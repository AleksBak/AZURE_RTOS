
sample_usbx_device_mass_storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d0  0800b5d0  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d8  0800b5d8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b5e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b8  20000208  20000208  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200032c0  200032c0  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0014b3b3  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0001805e  00000000  00000000  0016b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021b0  00000000  00000000  00183648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002850  00000000  00000000  001857f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004a00f  00000000  00000000  00188048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0004f8a9  00000000  00000000  001d2057  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00144db8  00000000  00000000  00221900  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  003666b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  003667b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0001969f  00000000  00000000  0036b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         00000084  00000000  00000000  00384f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000117  00000000  00000000  00385020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b32c 	.word	0x0800b32c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800b32c 	.word	0x0800b32c

08000210 <OTG_HS_IRQHandler>:
.thumb_func
OTG_HS_IRQHandler:
@ VOID UsbInterruptHandler (VOID)
@ {
@
        PUSH    {lr}
 8000210:	b500      	push	{lr}
        BL      _ux_dcd_stm32_interrupt_handler
 8000212:	f001 fc95 	bl	8001b40 <_ux_dcd_stm32_interrupt_handler>
        POP     {lr}
 8000216:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OTG_FS_IRQHandler>:
.thumb_func
OTG_FS_IRQHandler:
@ VOID UsbInterruptHandler (VOID)
@ {
@
        PUSH    {lr}
 800021c:	b500      	push	{lr}
        BL      _ux_dcd_stm32_interrupt_handler
 800021e:	f001 fc8f 	bl	8001b40 <_ux_dcd_stm32_interrupt_handler>
        POP     {lr}
 8000222:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 8000226:	4770      	bx	lr
	...

08000230 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000230:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000232:	481d      	ldr	r0, [pc, #116]	; (80002a8 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000236:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800023a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000240:	491b      	ldr	r1, [pc, #108]	; (80002b0 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000242:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000246:	481b      	ldr	r0, [pc, #108]	; (80002b4 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000248:	4919      	ldr	r1, [pc, #100]	; (80002b0 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800024a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800024c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800024e:	481a      	ldr	r0, [pc, #104]	; (80002b8 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000250:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000252:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000256:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000258:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800025c:	4917      	ldr	r1, [pc, #92]	; (80002bc <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800025e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000260:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000264:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000266:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800026a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800026e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000272:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000278:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800027c:	4770      	bx	lr

0800027e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800027e:	f7ff bffe 	b.w	800027e <__tx_BadHandler>

08000282 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000282:	f7ff bffe 	b.w	8000282 <__tx_HardfaultHandler>

08000286 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000286:	f7ff bffe 	b.w	8000286 <__tx_SVCallHandler>

0800028a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800028a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800028c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000290:	4770      	bx	lr

08000292 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000292:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000294:	f000 f894 	bl	80003c0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000298:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800029c:	4770      	bx	lr

0800029e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800029e:	f7ff bffe 	b.w	800029e <__tx_NMIHandler>

080002a2 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002a2:	f7ff bffe 	b.w	80002a2 <__tx_DBGHandler>
 80002a6:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80002a8:	200032a0 	.word	0x200032a0
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 80002ac:	200038c0 	.word	0x200038c0
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 80002b0:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002b4:	20002cec 	.word	0x20002cec
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002b8:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002bc:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002c0:	40ff0000 	.word	0x40ff0000
	...

080002d0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002d0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002d4:	4a22      	ldr	r2, [pc, #136]	; (8000360 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002d6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002d8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002e2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002e6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002ea:	f3bf 8f6f 	isb	sy

080002ee <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002ee:	e7fe      	b.n	80002ee <__tx_wait_here>

080002f0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002f0:	481c      	ldr	r0, [pc, #112]	; (8000364 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002f4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002f8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002fa:	b169      	cbz	r1, 8000318 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002fc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002fe:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 8000302:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000306:	4c19      	ldr	r4, [pc, #100]	; (800036c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 8000308:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 800030c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 800030e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 8000312:	b10d      	cbz	r5, 8000318 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 8000314:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 8000316:	6023      	str	r3, [r4, #0]

08000318 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 8000318:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 800031a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 800031c:	b189      	cbz	r1, 8000342 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 800031e:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000320:	b662      	cpsie	i

08000322 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000322:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000324:	4c11      	ldr	r4, [pc, #68]	; (800036c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000326:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000328:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800032c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800032e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000330:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000334:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000338:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800033c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000340:	4770      	bx	lr

08000342 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000342:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000344:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000346:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000348:	b909      	cbnz	r1, 800034e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800034a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800034c:	e7f9      	b.n	8000342 <__tx_ts_wait>

0800034e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800034e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000352:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000356:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800035a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800035c:	e7e1      	b.n	8000322 <__tx_ts_restore>
 800035e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000360:	20002cf0 	.word	0x20002cf0
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000364:	20002cf4 	.word	0x20002cf4
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000368:	20002cf8 	.word	0x20002cf8
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800036c:	20002d90 	.word	0x20002d90

08000370 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000370:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000372:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000376:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800037a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800037e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000380:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000384:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000386:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000388:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800038a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800038c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800038e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000390:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000392:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000394:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000398:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800039a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800039c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800039e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 80003a2:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 80003a4:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 80003a8:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 80003aa:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 80003ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 80003b0:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 80003b2:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
	...

080003c0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003c0:	4926      	ldr	r1, [pc, #152]	; (800045c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80003c2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 80003c4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80003c8:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80003cc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80003ce:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80003d0:	d008      	beq.n	80003e4 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 80003d2:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80003d6:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80003d8:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80003da:	d103      	bne.n	80003e4 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 80003de:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80003e2:	6018      	str	r0, [r3, #0]

080003e4 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003e4:	4920      	ldr	r1, [pc, #128]	; (8000468 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80003e6:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80003e8:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80003ea:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80003ec:	d004      	beq.n	80003f8 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 80003f0:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80003f4:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80003f6:	e008      	b.n	800040a <__tx_timer_done>

080003f8 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 80003f8:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80003fc:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80003fe:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 8000400:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 8000402:	d101      	bne.n	8000408 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 8000406:	6818      	ldr	r0, [r3, #0]

08000408 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 8000408:	6008      	str	r0, [r1, #0]

0800040a <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 800040c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 800040e:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 8000410:	d103      	bne.n	800041a <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 8000412:	4916      	ldr	r1, [pc, #88]	; (800046c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000414:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 8000416:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 8000418:	d01c      	beq.n	8000454 <__tx_timer_nothing_expired>

0800041a <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 800041a:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 800041e:	4913      	ldr	r1, [pc, #76]	; (800046c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000420:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000422:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000424:	d001      	beq.n	800042a <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 8000426:	f009 ff7b 	bl	800a320 <_tx_timer_expiration_process>

0800042a <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 800042c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 800042e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000430:	d00e      	beq.n	8000450 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000432:	f009 ff3b 	bl	800a2ac <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000436:	4810      	ldr	r0, [pc, #64]	; (8000478 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 8000438:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 800043a:	b949      	cbnz	r1, 8000450 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800043c:	480f      	ldr	r0, [pc, #60]	; (800047c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 800043e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000440:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000442:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 8000446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 800044a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 800044c:	d000      	beq.n	8000450 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 800044e:	6002      	str	r2, [r0, #0]

08000450 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 8000450:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000454 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000454:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 8000458:	4770      	bx	lr
 800045a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 800045c:	20003284 	.word	0x20003284
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 8000460:	20002d90 	.word	0x20002d90
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000464:	20003280 	.word	0x20003280
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000468:	20002d08 	.word	0x20002d08
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800046c:	20002d8c 	.word	0x20002d8c
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000470:	20002d98 	.word	0x20002d98
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000474:	20002e6c 	.word	0x20002e6c
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000478:	20002cf0 	.word	0x20002cf0
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800047c:	20002cf4 	.word	0x20002cf4
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000480:	20002cf8 	.word	0x20002cf8
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000484:	e000ed04 	.word	0xe000ed04
	...

08000490 <memchr>:
 8000490:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000494:	2a10      	cmp	r2, #16
 8000496:	db2b      	blt.n	80004f0 <memchr+0x60>
 8000498:	f010 0f07 	tst.w	r0, #7
 800049c:	d008      	beq.n	80004b0 <memchr+0x20>
 800049e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a2:	3a01      	subs	r2, #1
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d02d      	beq.n	8000504 <memchr+0x74>
 80004a8:	f010 0f07 	tst.w	r0, #7
 80004ac:	b342      	cbz	r2, 8000500 <memchr+0x70>
 80004ae:	d1f6      	bne.n	800049e <memchr+0xe>
 80004b0:	b4f0      	push	{r4, r5, r6, r7}
 80004b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004ba:	f022 0407 	bic.w	r4, r2, #7
 80004be:	f07f 0700 	mvns.w	r7, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004c8:	3c08      	subs	r4, #8
 80004ca:	ea85 0501 	eor.w	r5, r5, r1
 80004ce:	ea86 0601 	eor.w	r6, r6, r1
 80004d2:	fa85 f547 	uadd8	r5, r5, r7
 80004d6:	faa3 f587 	sel	r5, r3, r7
 80004da:	fa86 f647 	uadd8	r6, r6, r7
 80004de:	faa5 f687 	sel	r6, r5, r7
 80004e2:	b98e      	cbnz	r6, 8000508 <memchr+0x78>
 80004e4:	d1ee      	bne.n	80004c4 <memchr+0x34>
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004ec:	f002 0207 	and.w	r2, r2, #7
 80004f0:	b132      	cbz	r2, 8000500 <memchr+0x70>
 80004f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004f6:	3a01      	subs	r2, #1
 80004f8:	ea83 0301 	eor.w	r3, r3, r1
 80004fc:	b113      	cbz	r3, 8000504 <memchr+0x74>
 80004fe:	d1f8      	bne.n	80004f2 <memchr+0x62>
 8000500:	2000      	movs	r0, #0
 8000502:	4770      	bx	lr
 8000504:	3801      	subs	r0, #1
 8000506:	4770      	bx	lr
 8000508:	2d00      	cmp	r5, #0
 800050a:	bf06      	itte	eq
 800050c:	4635      	moveq	r5, r6
 800050e:	3803      	subeq	r0, #3
 8000510:	3807      	subne	r0, #7
 8000512:	f015 0f01 	tst.w	r5, #1
 8000516:	d107      	bne.n	8000528 <memchr+0x98>
 8000518:	3001      	adds	r0, #1
 800051a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800051e:	bf02      	ittt	eq
 8000520:	3001      	addeq	r0, #1
 8000522:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000526:	3001      	addeq	r0, #1
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	3801      	subs	r0, #1
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <__aeabi_uldivmod>:
 8000530:	b953      	cbnz	r3, 8000548 <__aeabi_uldivmod+0x18>
 8000532:	b94a      	cbnz	r2, 8000548 <__aeabi_uldivmod+0x18>
 8000534:	2900      	cmp	r1, #0
 8000536:	bf08      	it	eq
 8000538:	2800      	cmpeq	r0, #0
 800053a:	bf1c      	itt	ne
 800053c:	f04f 31ff 	movne.w	r1, #4294967295
 8000540:	f04f 30ff 	movne.w	r0, #4294967295
 8000544:	f000 b972 	b.w	800082c <__aeabi_idiv0>
 8000548:	f1ad 0c08 	sub.w	ip, sp, #8
 800054c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000550:	f000 f806 	bl	8000560 <__udivmoddi4>
 8000554:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800055c:	b004      	add	sp, #16
 800055e:	4770      	bx	lr

08000560 <__udivmoddi4>:
 8000560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000564:	9e08      	ldr	r6, [sp, #32]
 8000566:	4604      	mov	r4, r0
 8000568:	4688      	mov	r8, r1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d14b      	bne.n	8000606 <__udivmoddi4+0xa6>
 800056e:	428a      	cmp	r2, r1
 8000570:	4615      	mov	r5, r2
 8000572:	d967      	bls.n	8000644 <__udivmoddi4+0xe4>
 8000574:	fab2 f282 	clz	r2, r2
 8000578:	b14a      	cbz	r2, 800058e <__udivmoddi4+0x2e>
 800057a:	f1c2 0720 	rsb	r7, r2, #32
 800057e:	fa01 f302 	lsl.w	r3, r1, r2
 8000582:	fa20 f707 	lsr.w	r7, r0, r7
 8000586:	4095      	lsls	r5, r2
 8000588:	ea47 0803 	orr.w	r8, r7, r3
 800058c:	4094      	lsls	r4, r2
 800058e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000592:	0c23      	lsrs	r3, r4, #16
 8000594:	fbb8 f7fe 	udiv	r7, r8, lr
 8000598:	fa1f fc85 	uxth.w	ip, r5
 800059c:	fb0e 8817 	mls	r8, lr, r7, r8
 80005a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005a4:	fb07 f10c 	mul.w	r1, r7, ip
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x60>
 80005ac:	18eb      	adds	r3, r5, r3
 80005ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80005b2:	f080 811b 	bcs.w	80007ec <__udivmoddi4+0x28c>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 8118 	bls.w	80007ec <__udivmoddi4+0x28c>
 80005bc:	3f02      	subs	r7, #2
 80005be:	442b      	add	r3, r5
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b2a4      	uxth	r4, r4
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80005d4:	45a4      	cmp	ip, r4
 80005d6:	d909      	bls.n	80005ec <__udivmoddi4+0x8c>
 80005d8:	192c      	adds	r4, r5, r4
 80005da:	f100 33ff 	add.w	r3, r0, #4294967295
 80005de:	f080 8107 	bcs.w	80007f0 <__udivmoddi4+0x290>
 80005e2:	45a4      	cmp	ip, r4
 80005e4:	f240 8104 	bls.w	80007f0 <__udivmoddi4+0x290>
 80005e8:	3802      	subs	r0, #2
 80005ea:	442c      	add	r4, r5
 80005ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005f0:	eba4 040c 	sub.w	r4, r4, ip
 80005f4:	2700      	movs	r7, #0
 80005f6:	b11e      	cbz	r6, 8000600 <__udivmoddi4+0xa0>
 80005f8:	40d4      	lsrs	r4, r2
 80005fa:	2300      	movs	r3, #0
 80005fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000600:	4639      	mov	r1, r7
 8000602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000606:	428b      	cmp	r3, r1
 8000608:	d909      	bls.n	800061e <__udivmoddi4+0xbe>
 800060a:	2e00      	cmp	r6, #0
 800060c:	f000 80eb 	beq.w	80007e6 <__udivmoddi4+0x286>
 8000610:	2700      	movs	r7, #0
 8000612:	e9c6 0100 	strd	r0, r1, [r6]
 8000616:	4638      	mov	r0, r7
 8000618:	4639      	mov	r1, r7
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	fab3 f783 	clz	r7, r3
 8000622:	2f00      	cmp	r7, #0
 8000624:	d147      	bne.n	80006b6 <__udivmoddi4+0x156>
 8000626:	428b      	cmp	r3, r1
 8000628:	d302      	bcc.n	8000630 <__udivmoddi4+0xd0>
 800062a:	4282      	cmp	r2, r0
 800062c:	f200 80fa 	bhi.w	8000824 <__udivmoddi4+0x2c4>
 8000630:	1a84      	subs	r4, r0, r2
 8000632:	eb61 0303 	sbc.w	r3, r1, r3
 8000636:	2001      	movs	r0, #1
 8000638:	4698      	mov	r8, r3
 800063a:	2e00      	cmp	r6, #0
 800063c:	d0e0      	beq.n	8000600 <__udivmoddi4+0xa0>
 800063e:	e9c6 4800 	strd	r4, r8, [r6]
 8000642:	e7dd      	b.n	8000600 <__udivmoddi4+0xa0>
 8000644:	b902      	cbnz	r2, 8000648 <__udivmoddi4+0xe8>
 8000646:	deff      	udf	#255	; 0xff
 8000648:	fab2 f282 	clz	r2, r2
 800064c:	2a00      	cmp	r2, #0
 800064e:	f040 808f 	bne.w	8000770 <__udivmoddi4+0x210>
 8000652:	1b49      	subs	r1, r1, r5
 8000654:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000658:	fa1f f885 	uxth.w	r8, r5
 800065c:	2701      	movs	r7, #1
 800065e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000662:	0c23      	lsrs	r3, r4, #16
 8000664:	fb0e 111c 	mls	r1, lr, ip, r1
 8000668:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066c:	fb08 f10c 	mul.w	r1, r8, ip
 8000670:	4299      	cmp	r1, r3
 8000672:	d907      	bls.n	8000684 <__udivmoddi4+0x124>
 8000674:	18eb      	adds	r3, r5, r3
 8000676:	f10c 30ff 	add.w	r0, ip, #4294967295
 800067a:	d202      	bcs.n	8000682 <__udivmoddi4+0x122>
 800067c:	4299      	cmp	r1, r3
 800067e:	f200 80cd 	bhi.w	800081c <__udivmoddi4+0x2bc>
 8000682:	4684      	mov	ip, r0
 8000684:	1a59      	subs	r1, r3, r1
 8000686:	b2a3      	uxth	r3, r4
 8000688:	fbb1 f0fe 	udiv	r0, r1, lr
 800068c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000690:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000694:	fb08 f800 	mul.w	r8, r8, r0
 8000698:	45a0      	cmp	r8, r4
 800069a:	d907      	bls.n	80006ac <__udivmoddi4+0x14c>
 800069c:	192c      	adds	r4, r5, r4
 800069e:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a2:	d202      	bcs.n	80006aa <__udivmoddi4+0x14a>
 80006a4:	45a0      	cmp	r8, r4
 80006a6:	f200 80b6 	bhi.w	8000816 <__udivmoddi4+0x2b6>
 80006aa:	4618      	mov	r0, r3
 80006ac:	eba4 0408 	sub.w	r4, r4, r8
 80006b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006b4:	e79f      	b.n	80005f6 <__udivmoddi4+0x96>
 80006b6:	f1c7 0c20 	rsb	ip, r7, #32
 80006ba:	40bb      	lsls	r3, r7
 80006bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80006c4:	fa01 f407 	lsl.w	r4, r1, r7
 80006c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80006cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80006d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80006d4:	4325      	orrs	r5, r4
 80006d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80006da:	0c2c      	lsrs	r4, r5, #16
 80006dc:	fb08 3319 	mls	r3, r8, r9, r3
 80006e0:	fa1f fa8e 	uxth.w	sl, lr
 80006e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80006e8:	fb09 f40a 	mul.w	r4, r9, sl
 80006ec:	429c      	cmp	r4, r3
 80006ee:	fa02 f207 	lsl.w	r2, r2, r7
 80006f2:	fa00 f107 	lsl.w	r1, r0, r7
 80006f6:	d90b      	bls.n	8000710 <__udivmoddi4+0x1b0>
 80006f8:	eb1e 0303 	adds.w	r3, lr, r3
 80006fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000700:	f080 8087 	bcs.w	8000812 <__udivmoddi4+0x2b2>
 8000704:	429c      	cmp	r4, r3
 8000706:	f240 8084 	bls.w	8000812 <__udivmoddi4+0x2b2>
 800070a:	f1a9 0902 	sub.w	r9, r9, #2
 800070e:	4473      	add	r3, lr
 8000710:	1b1b      	subs	r3, r3, r4
 8000712:	b2ad      	uxth	r5, r5
 8000714:	fbb3 f0f8 	udiv	r0, r3, r8
 8000718:	fb08 3310 	mls	r3, r8, r0, r3
 800071c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000720:	fb00 fa0a 	mul.w	sl, r0, sl
 8000724:	45a2      	cmp	sl, r4
 8000726:	d908      	bls.n	800073a <__udivmoddi4+0x1da>
 8000728:	eb1e 0404 	adds.w	r4, lr, r4
 800072c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000730:	d26b      	bcs.n	800080a <__udivmoddi4+0x2aa>
 8000732:	45a2      	cmp	sl, r4
 8000734:	d969      	bls.n	800080a <__udivmoddi4+0x2aa>
 8000736:	3802      	subs	r0, #2
 8000738:	4474      	add	r4, lr
 800073a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800073e:	fba0 8902 	umull	r8, r9, r0, r2
 8000742:	eba4 040a 	sub.w	r4, r4, sl
 8000746:	454c      	cmp	r4, r9
 8000748:	46c2      	mov	sl, r8
 800074a:	464b      	mov	r3, r9
 800074c:	d354      	bcc.n	80007f8 <__udivmoddi4+0x298>
 800074e:	d051      	beq.n	80007f4 <__udivmoddi4+0x294>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d069      	beq.n	8000828 <__udivmoddi4+0x2c8>
 8000754:	ebb1 050a 	subs.w	r5, r1, sl
 8000758:	eb64 0403 	sbc.w	r4, r4, r3
 800075c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000760:	40fd      	lsrs	r5, r7
 8000762:	40fc      	lsrs	r4, r7
 8000764:	ea4c 0505 	orr.w	r5, ip, r5
 8000768:	e9c6 5400 	strd	r5, r4, [r6]
 800076c:	2700      	movs	r7, #0
 800076e:	e747      	b.n	8000600 <__udivmoddi4+0xa0>
 8000770:	f1c2 0320 	rsb	r3, r2, #32
 8000774:	fa20 f703 	lsr.w	r7, r0, r3
 8000778:	4095      	lsls	r5, r2
 800077a:	fa01 f002 	lsl.w	r0, r1, r2
 800077e:	fa21 f303 	lsr.w	r3, r1, r3
 8000782:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000786:	4338      	orrs	r0, r7
 8000788:	0c01      	lsrs	r1, r0, #16
 800078a:	fbb3 f7fe 	udiv	r7, r3, lr
 800078e:	fa1f f885 	uxth.w	r8, r5
 8000792:	fb0e 3317 	mls	r3, lr, r7, r3
 8000796:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800079a:	fb07 f308 	mul.w	r3, r7, r8
 800079e:	428b      	cmp	r3, r1
 80007a0:	fa04 f402 	lsl.w	r4, r4, r2
 80007a4:	d907      	bls.n	80007b6 <__udivmoddi4+0x256>
 80007a6:	1869      	adds	r1, r5, r1
 80007a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80007ac:	d22f      	bcs.n	800080e <__udivmoddi4+0x2ae>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d92d      	bls.n	800080e <__udivmoddi4+0x2ae>
 80007b2:	3f02      	subs	r7, #2
 80007b4:	4429      	add	r1, r5
 80007b6:	1acb      	subs	r3, r1, r3
 80007b8:	b281      	uxth	r1, r0
 80007ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80007be:	fb0e 3310 	mls	r3, lr, r0, r3
 80007c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c6:	fb00 f308 	mul.w	r3, r0, r8
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d907      	bls.n	80007de <__udivmoddi4+0x27e>
 80007ce:	1869      	adds	r1, r5, r1
 80007d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80007d4:	d217      	bcs.n	8000806 <__udivmoddi4+0x2a6>
 80007d6:	428b      	cmp	r3, r1
 80007d8:	d915      	bls.n	8000806 <__udivmoddi4+0x2a6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4429      	add	r1, r5
 80007de:	1ac9      	subs	r1, r1, r3
 80007e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80007e4:	e73b      	b.n	800065e <__udivmoddi4+0xfe>
 80007e6:	4637      	mov	r7, r6
 80007e8:	4630      	mov	r0, r6
 80007ea:	e709      	b.n	8000600 <__udivmoddi4+0xa0>
 80007ec:	4607      	mov	r7, r0
 80007ee:	e6e7      	b.n	80005c0 <__udivmoddi4+0x60>
 80007f0:	4618      	mov	r0, r3
 80007f2:	e6fb      	b.n	80005ec <__udivmoddi4+0x8c>
 80007f4:	4541      	cmp	r1, r8
 80007f6:	d2ab      	bcs.n	8000750 <__udivmoddi4+0x1f0>
 80007f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80007fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000800:	3801      	subs	r0, #1
 8000802:	4613      	mov	r3, r2
 8000804:	e7a4      	b.n	8000750 <__udivmoddi4+0x1f0>
 8000806:	4660      	mov	r0, ip
 8000808:	e7e9      	b.n	80007de <__udivmoddi4+0x27e>
 800080a:	4618      	mov	r0, r3
 800080c:	e795      	b.n	800073a <__udivmoddi4+0x1da>
 800080e:	4667      	mov	r7, ip
 8000810:	e7d1      	b.n	80007b6 <__udivmoddi4+0x256>
 8000812:	4681      	mov	r9, r0
 8000814:	e77c      	b.n	8000710 <__udivmoddi4+0x1b0>
 8000816:	3802      	subs	r0, #2
 8000818:	442c      	add	r4, r5
 800081a:	e747      	b.n	80006ac <__udivmoddi4+0x14c>
 800081c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000820:	442b      	add	r3, r5
 8000822:	e72f      	b.n	8000684 <__udivmoddi4+0x124>
 8000824:	4638      	mov	r0, r7
 8000826:	e708      	b.n	800063a <__udivmoddi4+0xda>
 8000828:	4637      	mov	r7, r6
 800082a:	e6e9      	b.n	8000600 <__udivmoddi4+0xa0>

0800082c <__aeabi_idiv0>:
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000838:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <SCB_EnableICache+0x3c>)
 800083e:	2200      	movs	r2, #0
 8000840:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000848:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <SCB_EnableICache+0x3c>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <SCB_EnableICache+0x3c>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800085c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <SCB_EnableDCache+0x7c>)
 8000878:	2200      	movs	r2, #0
 800087a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800087e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <SCB_EnableDCache+0x7c>)
 8000884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000888:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0b5b      	lsrs	r3, r3, #13
 800088e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000892:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800089c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	015a      	lsls	r2, r3, #5
 80008a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ac:	490f      	ldr	r1, [pc, #60]	; (80008ec <SCB_EnableDCache+0x7c>)
 80008ae:	4313      	orrs	r3, r2
 80008b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1ef      	bne.n	800089e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	60fa      	str	r2, [r7, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e5      	bne.n	8000894 <SCB_EnableDCache+0x24>
 80008c8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <SCB_EnableDCache+0x7c>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <SCB_EnableDCache+0x7c>)
 80008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d6:	6153      	str	r3, [r2, #20]
 80008d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008dc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__io_putchar>:
UART_HandleTypeDef huart1;

/*-------------------------------------------- printf --------------------------------------------*/

int __io_putchar(int ch)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80008f8:	1d39      	adds	r1, r7, #4
 80008fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fe:	2201      	movs	r2, #1
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <__io_putchar+0x20>)
 8000902:	f007 fafd 	bl	8007f00 <HAL_UART_Transmit>
	return ch;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200002bc 	.word	0x200002bc

08000914 <_write>:

int _write(int file, char* ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e009      	b.n	800093a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffde 	bl	80008f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf1      	blt.n	8000926 <_write+0x12>
	}

	return len;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3c      	ldr	r2, [pc, #240]	; (8000a5c <HAL_UART_MspInit+0x110>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d145      	bne.n	80009fa <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a3b      	ldr	r2, [pc, #236]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <HAL_UART_MspInit+0x114>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a35      	ldr	r2, [pc, #212]	; (8000a60 <HAL_UART_MspInit+0x114>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <HAL_UART_MspInit+0x114>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <HAL_UART_MspInit+0x114>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_UART_MspInit+0x114>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

		/* USART1 GPIO Configuration
		 * PB7 ------> USART1_RX
		 * PA9 ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c6:	2307      	movs	r3, #7
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4824      	ldr	r0, [pc, #144]	; (8000a64 <HAL_UART_MspInit+0x118>)
 80009d2:	f006 fd79 	bl	80074c8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009da:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e8:	2307      	movs	r3, #7
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <HAL_UART_MspInit+0x11c>)
 80009f4:	f006 fd68 	bl	80074c8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 80009f8:	e02c      	b.n	8000a54 <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <HAL_UART_MspInit+0x120>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d127      	bne.n	8000a54 <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a08:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	f003 0320 	and.w	r3, r3, #32
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000a34:	23c0      	movs	r3, #192	; 0xc0
 8000a36:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a44:	2308      	movs	r3, #8
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <HAL_UART_MspInit+0x124>)
 8000a50:	f006 fd3a 	bl	80074c8 <HAL_GPIO_Init>
}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40011400 	.word	0x40011400
 8000a70:	40020800 	.word	0x40020800

08000a74 <hardware_rand_initialize>:

void BSP_SDRAM_Init();
void USB_OTG_BSP_HS_Init(void);

void hardware_rand_initialize(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <hardware_rand_initialize+0x20>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <hardware_rand_initialize+0x20>)
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <hardware_rand_initialize+0x24>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40023834 	.word	0x40023834
 8000a98:	50060800 	.word	0x50060800

08000a9c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000aa4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ae0:	f007 fb18 	bl	8008114 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <MX_USART1_UART_Init+0x50>
	{
		while (1);
 8000aea:	e7fe      	b.n	8000aea <MX_USART1_UART_Init+0x4e>
	}
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200002bc 	.word	0x200002bc
 8000af4:	40011000 	.word	0x40011000

08000af8 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b092      	sub	sp, #72	; 0x48
 8000afc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000b18:	2319      	movs	r3, #25
 8000b1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 8000b1c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b26:	2309      	movs	r3, #9
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 fe0d 	bl	800774c <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d000      	beq.n	8000b42 <SystemClock_Config+0x4a>
	{
		while (1);
 8000b40:	e7fe      	b.n	8000b40 <SystemClock_Config+0x48>
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000b42:	f006 fdc7 	bl	80076d4 <HAL_PWREx_EnableOverDrive>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d000      	beq.n	8000b56 <SystemClock_Config+0x5e>
	{
		while (1);
 8000b54:	e7fe      	b.n	8000b54 <SystemClock_Config+0x5c>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000b56:	230f      	movs	r3, #15
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b72:	2107      	movs	r1, #7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f006 ffe3 	bl	8007b40 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d000      	beq.n	8000b8a <SystemClock_Config+0x92>
	{
		while (1);
 8000b88:	e7fe      	b.n	8000b88 <SystemClock_Config+0x90>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3748      	adds	r7, #72	; 0x48
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000b9a:	f006 fb6d 	bl	8007278 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MPU_Config+0x84>)
 8000ba4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000ba6:	2311      	movs	r3, #17
 8000ba8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000baa:	2303      	movs	r3, #3
 8000bac:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fb75 	bl	80072bc <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000bd6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bda:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000bdc:	2316      	movs	r3, #22
 8000bde:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000be0:	2303      	movs	r3, #3
 8000be2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4618      	mov	r0, r3
 8000c04:	f006 fb5a 	bl	80072bc <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c08:	2004      	movs	r0, #4
 8000c0a:	f006 fb45 	bl	8007298 <HAL_MPU_Enable>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20010000 	.word	0x20010000

08000c1c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000c20:	f7ff fe06 	bl	8000830 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000c24:	f7ff fe24 	bl	8000870 <SCB_EnableDCache>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <GreenLed_Init>:

static void GreenLed_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	/* enable clock and clear 'MODER1' field for port PI */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <GreenLed_Init+0x40>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <GreenLed_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOI->MODER &= ~GPIO_MODER_MODER1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <GreenLed_Init+0x44>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <GreenLed_Init+0x44>)
 8000c42:	f023 030c 	bic.w	r3, r3, #12
 8000c46:	6013      	str	r3, [r2, #0]

	/* setup pin PI1 as 'push-pull' output and reset it in '0' */
	GPIOI->MODER |= GPIO_MODER_MODER1_0;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <GreenLed_Init+0x44>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <GreenLed_Init+0x44>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BR_1;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <GreenLed_Init+0x44>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <GreenLed_Init+0x44>)
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5e:	6193      	str	r3, [r2, #24]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40022000 	.word	0x40022000

08000c74 <BlueButton_Init>:

static void BlueButton_Init(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
	/* Activate PULLUP for GPIOI11 */
	uint32_t temp = GPIOI->PUPDR;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <BlueButton_Init+0x44>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	607b      	str	r3, [r7, #4]
	temp &= ~(GPIO_PUPDR_PUPDR0 << (11 * 2));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c86:	607b      	str	r3, [r7, #4]
	temp |= (1 << (11 * 2));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8e:	607b      	str	r3, [r7, #4]
	GPIOI->PUPDR = temp;
 8000c90:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <BlueButton_Init+0x44>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60d3      	str	r3, [r2, #12]

	/* Configure IO Direction mode (Input) for GPIOI11 */
	temp = GPIOI->MODER;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <BlueButton_Init+0x44>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	607b      	str	r3, [r7, #4]
	temp &= ~(GPIO_MODER_MODER0 << (11 * 2));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ca2:	607b      	str	r3, [r7, #4]
	temp |= ((0 & 0x00000003U) << (11 * 2));
	GPIOI->MODER = temp;
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <BlueButton_Init+0x44>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <hardware_setup>:
	return (GPIOI->IDR & ((uint16_t)(1 << 11)));
}

/** Initialize: MPU, CACHE, HAL_Init, Clock, SDRAM, USART1, RNG */
void hardware_setup(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000cc0:	f7ff ff68 	bl	8000b94 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000cc4:	f7ff ffaa 	bl	8000c1c <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000cc8:	f006 fa48 	bl	800715c <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000ccc:	f7ff ff14 	bl	8000af8 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000cd0:	f006 f9ba 	bl	8007048 <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000cd4:	f7ff fee2 	bl	8000a9c <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000cd8:	f7ff fecc 	bl	8000a74 <hardware_rand_initialize>

	GreenLed_Init();
 8000cdc:	f7ff ffa6 	bl	8000c2c <GreenLed_Init>
	BlueButton_Init();
 8000ce0:	f7ff ffc8 	bl	8000c74 <BlueButton_Init>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <prvGetRegistersFromStack>:
/*    Other registers will not have changed since the fault occurred,     */
/*    and can be viewed directly in the debugger’s CPU register window.   */
/*                                                                        */
/**************************************************************************/
void prvGetRegistersFromStack(uint32_t* pulFaultStackAddress)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	volatile uint32_t lr;	/* Link register. */
	volatile uint32_t pc;	/* Program counter. */
	volatile uint32_t psr;	/* Program status register. */
#pragma GCC diagnostic pop

	r0 = pulFaultStackAddress[0];
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
	r1 = pulFaultStackAddress[1];
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	623b      	str	r3, [r7, #32]
	r2 = pulFaultStackAddress[2];
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	61fb      	str	r3, [r7, #28]
	r3 = pulFaultStackAddress[3];
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	61bb      	str	r3, [r7, #24]

	r12 = pulFaultStackAddress[4];
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	617b      	str	r3, [r7, #20]
	lr = pulFaultStackAddress[5];
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	613b      	str	r3, [r7, #16]
	pc = pulFaultStackAddress[6];	/* contains the program counter value */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	60fb      	str	r3, [r7, #12]
	psr = pulFaultStackAddress[7];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	60bb      	str	r3, [r7, #8]

	/* When the following line is hit, the variables contain the register values. */
	for (;;);
 8000d20:	e7fe      	b.n	8000d20 <prvGetRegistersFromStack+0x38>

08000d22 <NMI_Handler>:
	 * a precise fault, which makes the fault easier to debug, albeit at the cost of slower
	 * program execution. */
}

void NMI_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
	while(1);
 8000d26:	e7fe      	b.n	8000d26 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	while(1)
	{
		/* fault handler implementation calls a function called 'prvGetRegistersFromStack()' */
		__asm volatile
 8000d2c:	f01e 0f04 	tst.w	lr, #4
 8000d30:	bf0c      	ite	eq
 8000d32:	f3ef 8008 	mrseq	r0, MSP
 8000d36:	f3ef 8009 	mrsne	r0, PSP
 8000d3a:	6981      	ldr	r1, [r0, #24]
 8000d3c:	4a00      	ldr	r2, [pc, #0]	; (8000d40 <HANDLER2_ADDRESS_CONST>)
 8000d3e:	4710      	bx	r2

08000d40 <HANDLER2_ADDRESS_CONST>:
 8000d40:	08000ce9 	.word	0x08000ce9
 8000d44:	e7f2      	b.n	8000d2c <HardFault_Handler+0x4>

08000d46 <MemManage_Handler>:
		);
	}
}

void MemManage_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
	while(1);
 8000d4a:	e7fe      	b.n	8000d4a <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	while(1);
 8000d50:	e7fe      	b.n	8000d50 <BusFault_Handler+0x4>

08000d52 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	while(1);
 8000d56:	e7fe      	b.n	8000d56 <UsageFault_Handler+0x4>

08000d58 <main>:
/*------------------------------------------------------------------------------------------------*/

VOID hardware_setup(void);

int main(int argc, char** argv)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	/* Setup the hardware. */
	hardware_setup();
 8000d62:	f7ff ffab 	bl	8000cbc <hardware_setup>

	/* Enter the ThreadX kernel.  */
	tx_kernel_enter();
 8000d66:	f007 fde5 	bl	8008934 <_tx_initialize_kernel_enter>
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <tx_application_define>:

void tx_application_define(void* first_unused_memory)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af06      	add	r7, sp, #24
 8000d7a:	6078      	str	r0, [r7, #4]
	CHAR* stack_pointer;
	CHAR* memory_pointer;
	UINT status;

	/* Initialize the free memory pointer.  */
	stack_pointer = (CHAR*)first_unused_memory;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	617b      	str	r3, [r7, #20]

	/* Initialize the RAM disk memory. */
	memory_pointer = stack_pointer + DEMO_STACK_SIZE;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d86:	613b      	str	r3, [r7, #16]

	/* Initialize USBX Memory */
	status = _ux_system_initialize(memory_pointer, USBX_MEMORY_SIZE, UX_NULL, 0);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d90:	6938      	ldr	r0, [r7, #16]
 8000d92:	f001 ff45 	bl	8002c20 <_ux_system_initialize>
 8000d96:	60f8      	str	r0, [r7, #12]

	/* Initialize memory address for USBX.  */
	ram_disk_memory = (CHAR*)0xC0000000;
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <tx_application_define+0xec>)
 8000d9a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000d9e:	601a      	str	r2, [r3, #0]

	/* Reset it.  */
	_ux_utility_memory_set(ram_disk_memory, 0, RAM_DISK_SIZE);
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <tx_application_define+0xec>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <tx_application_define+0xf0>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 f911 	bl	8002fd0 <_ux_utility_memory_set>

	/* Initialize FileX.  */
	_fx_system_initialize();
 8000dae:	f003 fd01 	bl	80047b4 <_fx_system_initialize>
	 * string_framework_length               Length of string FW
	 * language_id_framework                 Pointer to language ID FW
	 * language_id_framework_length          Length of language ID FW
	 * (ux_system_slave_change_function)     Pointer to callback function for device changes
	 */
	status = _ux_device_stack_initialize(device_framework_high_speed,
 8000db2:	2300      	movs	r3, #0
 8000db4:	9304      	str	r3, [sp, #16]
 8000db6:	2302      	movs	r3, #2
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <tx_application_define+0xf4>)
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	2326      	movs	r3, #38	; 0x26
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <tx_application_define+0xf8>)
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2332      	movs	r3, #50	; 0x32
 8000dc8:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <tx_application_define+0xfc>)
 8000dca:	213c      	movs	r1, #60	; 0x3c
 8000dcc:	4829      	ldr	r0, [pc, #164]	; (8000e74 <tx_application_define+0x100>)
 8000dce:	f001 fd6d 	bl	80028ac <_ux_device_stack_initialize>
 8000dd2:	60f8      	str	r0, [r7, #12]
			DEVICE_FRAMEWORK_LENGTH_HIGH_SPEED, device_framework_full_speed,
			DEVICE_FRAMEWORK_LENGTH_FULL_SPEED, string_framework, STRING_FRAMEWORK_LENGTH,
			language_id_framework, LANGUAGE_ID_FRAMEWORK_LENGTH, UX_NULL);
	if (status != UX_SUCCESS)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d13b      	bne.n	8000e52 <tx_application_define+0xde>
		return;

	/* Store the number of LUN in this device storage instance.  */
	storage_parameter.ux_slave_class_storage_parameter_number_lun = 1;
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <tx_application_define+0x104>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	609a      	str	r2, [r3, #8]

	/* Initialize the storage class parameters for reading/writing to the Flash Disk.  */
	storage_parameter.ux_slave_class_storage_parameter_lun[0].ux_slave_class_storage_media_last_lba =
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <tx_application_define+0x104>)
 8000de2:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000de6:	60da      	str	r2, [r3, #12]
			RAM_DISK_LAST_LBA;

	storage_parameter.ux_slave_class_storage_parameter_lun[0]
			.ux_slave_class_storage_media_block_length = 512;
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <tx_application_define+0x104>)
 8000dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dee:	611a      	str	r2, [r3, #16]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].ux_slave_class_storage_media_type = 0;
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <tx_application_define+0x104>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]

	storage_parameter.ux_slave_class_storage_parameter_lun[0]
			.ux_slave_class_storage_media_removable_flag = 0x80;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <tx_application_define+0x104>)
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	619a      	str	r2, [r3, #24]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].ux_slave_class_storage_media_read =
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <tx_application_define+0x104>)
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <tx_application_define+0x108>)
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
			demo_thread_media_read;
	storage_parameter.ux_slave_class_storage_parameter_lun[0].ux_slave_class_storage_media_write =
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <tx_application_define+0x104>)
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <tx_application_define+0x10c>)
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
			demo_thread_media_write;
	storage_parameter.ux_slave_class_storage_parameter_lun[0].ux_slave_class_storage_media_status =
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <tx_application_define+0x104>)
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <tx_application_define+0x110>)
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
	 * class_name                            Name of class
	 * class_function_entry                  Class entry function
	 * configuration_number                  Configuration # for this class
	 * interface_number                      Interface # for this class
	 * parameter                             Parameter specific for class */
	status = _ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <tx_application_define+0x104>)
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	2201      	movs	r2, #1
 8000e16:	491c      	ldr	r1, [pc, #112]	; (8000e88 <tx_application_define+0x114>)
 8000e18:	481c      	ldr	r0, [pc, #112]	; (8000e8c <tx_application_define+0x118>)
 8000e1a:	f001 f9a7 	bl	800216c <_ux_device_stack_class_register>
 8000e1e:	60f8      	str	r0, [r7, #12]
			_ux_device_class_storage_entry, 1, 0, (VOID*)&storage_parameter);
	if (status != UX_SUCCESS)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d117      	bne.n	8000e56 <tx_application_define+0xe2>
		return;

	/* Create the main demo thread. */
	status = _tx_thread_create(&demo_thread, "tx demo", demo_thread_entry, 0, stack_pointer,
 8000e26:	2301      	movs	r3, #1
 8000e28:	9305      	str	r3, [sp, #20]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	9304      	str	r3, [sp, #16]
 8000e2e:	2314      	movs	r3, #20
 8000e30:	9303      	str	r3, [sp, #12]
 8000e32:	2314      	movs	r3, #20
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <tx_application_define+0x11c>)
 8000e44:	4913      	ldr	r1, [pc, #76]	; (8000e94 <tx_application_define+0x120>)
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <tx_application_define+0x124>)
 8000e48:	f007 ffbc 	bl	8008dc4 <_tx_thread_create>
 8000e4c:	60f8      	str	r0, [r7, #12]
			DEMO_STACK_SIZE, 20, 20, 1, TX_AUTO_START);

	return;
 8000e4e:	bf00      	nop
 8000e50:	e002      	b.n	8000e58 <tx_application_define+0xe4>
		return;
 8000e52:	bf00      	nop
 8000e54:	e000      	b.n	8000e58 <tx_application_define+0xe4>
		return;
 8000e56:	bf00      	nop
}
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200006c4 	.word	0x200006c4
 8000e64:	007ffe00 	.word	0x007ffe00
 8000e68:	20000098 	.word	0x20000098
 8000e6c:	20000070 	.word	0x20000070
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000034 	.word	0x20000034
 8000e78:	20000430 	.word	0x20000430
 8000e7c:	08000f69 	.word	0x08000f69
 8000e80:	08000fb1 	.word	0x08000fb1
 8000e84:	08000f4d 	.word	0x08000f4d
 8000e88:	080011cf 	.word	0x080011cf
 8000e8c:	200000dc 	.word	0x200000dc
 8000e90:	08000e9d 	.word	0x08000e9d
 8000e94:	0800b344 	.word	0x0800b344
 8000e98:	20000340 	.word	0x20000340

08000e9c <demo_thread_entry>:

void demo_thread_entry(ULONG arg)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af0a      	add	r7, sp, #40	; 0x28
 8000ea2:	6078      	str	r0, [r7, #4]
	ULONG status;

	/* Format the ram drive. */
	status = fx_media_format(&ram_disk, _fx_ram_driver, ram_disk_memory, buffer, 512, "RAM DISK",
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <demo_thread_entry+0x98>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8000eac:	2301      	movs	r3, #1
 8000eae:	9308      	str	r3, [sp, #32]
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	9307      	str	r3, [sp, #28]
 8000eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb8:	9306      	str	r3, [sp, #24]
 8000eba:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ebe:	9305      	str	r3, [sp, #20]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9304      	str	r3, [sp, #16]
 8000ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <demo_thread_entry+0x9c>)
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <demo_thread_entry+0xa0>)
 8000eda:	4919      	ldr	r1, [pc, #100]	; (8000f40 <demo_thread_entry+0xa4>)
 8000edc:	4819      	ldr	r0, [pc, #100]	; (8000f44 <demo_thread_entry+0xa8>)
 8000ede:	f003 fda1 	bl	8004a24 <_fxe_media_format>
 8000ee2:	60f8      	str	r0, [r7, #12]
			2, 512, 0, RAM_DISK_SIZE / 512, 512, 4, 1, 1);

	/* Check the media format status.  */
	if (status != FX_SUCCESS)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11e      	bne.n	8000f28 <demo_thread_entry+0x8c>
		/* Error opening media.  Return to caller.  */
		return;
	}

	/* Open the ram_disk.  */
	status = fx_media_open(&ram_disk, "RAM DISK", _fx_ram_driver, ram_disk_memory, buffer, 512);
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <demo_thread_entry+0x98>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <demo_thread_entry+0xa0>)
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4613      	mov	r3, r2
 8000f00:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <demo_thread_entry+0xa4>)
 8000f02:	490d      	ldr	r1, [pc, #52]	; (8000f38 <demo_thread_entry+0x9c>)
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <demo_thread_entry+0xa8>)
 8000f06:	f003 fdb1 	bl	8004a6c <_fxe_media_open>
 8000f0a:	60f8      	str	r0, [r7, #12]

	/* Check the media open status.  */
	if (status != FX_SUCCESS)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <demo_thread_entry+0x90>
		/* Error opening media.  Return to caller.  */
		return;
	}

	/* Initialize the bsp layer of the USB OTG HS Controller.  */
	USB_OTG_BSP_HS_Init();
 8000f12:	f000 f871 	bl	8000ff8 <USB_OTG_BSP_HS_Init>

	_tx_thread_sleep(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f008 f8b6 	bl	8009088 <_tx_thread_sleep>

	/* Register the STM32  USB device controllers available in this system */
	status = _ux_dcd_stm32_initialize(UX_DCD_STM32_OTG_FS_HIGH_SPEED, 0);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <demo_thread_entry+0xac>)
 8000f20:	f000 fd00 	bl	8001924 <_ux_dcd_stm32_initialize>
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	e002      	b.n	8000f2e <demo_thread_entry+0x92>
		return;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <demo_thread_entry+0x92>
		return;
 8000f2c:	bf00      	nop
}
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200006c4 	.word	0x200006c4
 8000f38:	0800b34c 	.word	0x0800b34c
 8000f3c:	200004c4 	.word	0x200004c4
 8000f40:	080046dd 	.word	0x080046dd
 8000f44:	200006c8 	.word	0x200006c8
 8000f48:	40040000 	.word	0x40040000

08000f4c <demo_thread_media_status>:

UINT demo_thread_media_status(VOID* storage, ULONG lun, ULONG media_id, ULONG* media_status)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
	/* The ATA drive never fails. This is just for demo only !!!! */
	return (UX_SUCCESS);
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <demo_thread_media_read>:

UINT demo_thread_media_read(VOID* storage, ULONG lun, UCHAR* data_pointer, ULONG number_blocks,
		ULONG lba, ULONG* media_status)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
	UINT status = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

	while (number_blocks--)
 8000f7a:	e00c      	b.n	8000f96 <demo_thread_media_read+0x2e>
	{
		status = fx_media_read(&ram_disk, lba, data_pointer);
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6a39      	ldr	r1, [r7, #32]
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <demo_thread_media_read+0x44>)
 8000f82:	f003 fdeb 	bl	8004b5c <_fxe_media_read>
 8000f86:	6178      	str	r0, [r7, #20]
		data_pointer += 512;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f8e:	607b      	str	r3, [r7, #4]
		lba++;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	3301      	adds	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
	while (number_blocks--)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	603a      	str	r2, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1ed      	bne.n	8000f7c <demo_thread_media_read+0x14>
	}

	return (status);
 8000fa0:	697b      	ldr	r3, [r7, #20]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200006c8 	.word	0x200006c8

08000fb0 <demo_thread_media_write>:

UINT demo_thread_media_write(VOID* storage, ULONG lun, UCHAR* data_pointer, ULONG number_blocks,
		ULONG lba, ULONG* media_status)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
	UINT status = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]

	while (number_blocks--)
 8000fc2:	e00c      	b.n	8000fde <demo_thread_media_write+0x2e>
	{
		status = fx_media_write(&ram_disk, lba, data_pointer);
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6a39      	ldr	r1, [r7, #32]
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <demo_thread_media_write+0x44>)
 8000fca:	f003 fde7 	bl	8004b9c <_fxe_media_write>
 8000fce:	6178      	str	r0, [r7, #20]
		data_pointer += 512;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fd6:	607b      	str	r3, [r7, #4]
		lba++;
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	while (number_blocks--)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	603a      	str	r2, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1ed      	bne.n	8000fc4 <demo_thread_media_write+0x14>
	}

	return (status);
 8000fe8:	697b      	ldr	r3, [r7, #20]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200006c8 	.word	0x200006c8

08000ff8 <USB_OTG_BSP_HS_Init>:

void USB_OTG_BSP_HS_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Configure USB FS GPIOs */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b56      	ldr	r3, [pc, #344]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a55      	ldr	r2, [pc, #340]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b50      	ldr	r3, [pc, #320]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a4f      	ldr	r2, [pc, #316]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a49      	ldr	r2, [pc, #292]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4b44      	ldr	r3, [pc, #272]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a43      	ldr	r2, [pc, #268]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

	/* CLK */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800105e:	2320      	movs	r3, #32
 8001060:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800106e:	230a      	movs	r3, #10
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4838      	ldr	r0, [pc, #224]	; (800115c <USB_OTG_BSP_HS_Init+0x164>)
 800107a:	f006 fa25 	bl	80074c8 <HAL_GPIO_Init>

	/* D0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800107e:	2308      	movs	r3, #8
 8001080:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800108e:	230a      	movs	r3, #10
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4830      	ldr	r0, [pc, #192]	; (800115c <USB_OTG_BSP_HS_Init+0x164>)
 800109a:	f006 fa15 	bl	80074c8 <HAL_GPIO_Init>

	/* D1 D2 D3 D4 D5 D6 D7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11
 800109e:	f643 4323 	movw	r3, #15395	; 0x3c23
 80010a2:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010ac:	230a      	movs	r3, #10
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	482a      	ldr	r0, [pc, #168]	; (8001160 <USB_OTG_BSP_HS_Init+0x168>)
 80010b8:	f006 fa06 	bl	80074c8 <HAL_GPIO_Init>

	/* STP */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010bc:	2301      	movs	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010c8:	230a      	movs	r3, #10
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4824      	ldr	r0, [pc, #144]	; (8001164 <USB_OTG_BSP_HS_Init+0x16c>)
 80010d4:	f006 f9f8 	bl	80074c8 <HAL_GPIO_Init>

	/* NXT */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010d8:	2310      	movs	r3, #16
 80010da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010e4:	230a      	movs	r3, #10
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <USB_OTG_BSP_HS_Init+0x170>)
 80010f0:	f006 f9ea 	bl	80074c8 <HAL_GPIO_Init>

	/* DIR */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f4:	2304      	movs	r3, #4
 80010f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001100:	230a      	movs	r3, #10
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4816      	ldr	r0, [pc, #88]	; (8001164 <USB_OTG_BSP_HS_Init+0x16c>)
 800110c:	f006 f9dc 	bl	80074c8 <HAL_GPIO_Init>

	/* Enable USB HS Clocks */
	__HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001116:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 800112e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <USB_OTG_BSP_HS_Init+0x160>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

	/* Set USBHS Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(OTG_HS_IRQn, 4, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2104      	movs	r1, #4
 8001144:	204d      	movs	r0, #77	; 0x4d
 8001146:	f006 f853 	bl	80071f0 <HAL_NVIC_SetPriority>

	/* Enable USBHS Interrupt */
	HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800114a:	204d      	movs	r0, #77	; 0x4d
 800114c:	f006 f886 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40021c00 	.word	0x40021c00

0800116c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800116e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopForever+0xe>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001196:	f007 fa5d 	bl	8008654 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800119a:	f009 f911 	bl	800a3c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff fddb 	bl	8000d58 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   r0, =_estack
 80011a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80011b0:	0800b5e0 	.word	0x0800b5e0
  ldr r2, =_sbss
 80011b4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80011b8:	200032c0 	.word	0x200032c0

080011bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 80011be:	f7ff bdb3 	b.w	8000d28 <HardFault_Handler>

MemManage_Handler:
  b MemManage_Handler
 80011c2:	f7ff bdc0 	b.w	8000d46 <MemManage_Handler>

BusFault_Handler:
  b BusFault_Handler
 80011c6:	f7ff bdc1 	b.w	8000d4c <BusFault_Handler>

UsageFault_Handler:
  b UsageFault_Handler
 80011ca:	f7ff bdc2 	b.w	8000d52 <UsageFault_Handler>

080011ce <_ux_device_class_storage_entry>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND* command)
{
 80011ce:	b508      	push	{r3, lr}
	UINT status;

	/* The command request will tell us we need to do here, either a enumeration
	 query, an activation or a deactivation.  */
	switch (command->ux_slave_class_command_request)
 80011d0:	6803      	ldr	r3, [r0, #0]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d819      	bhi.n	800120c <_ux_device_class_storage_entry+0x3e>
 80011d8:	e8df f003 	tbb	[pc, r3]
 80011dc:	15120f0a 	.word	0x15120f0a
 80011e0:	1804      	.short	0x1804
 80011e2:	07          	.byte	0x07
 80011e3:	00          	.byte	0x00
	{
		case UX_SLAVE_CLASS_COMMAND_INITIALIZE:
			/* Call the init function of the Storage class.  */
			status = _ux_device_class_storage_initialize(command);
 80011e4:	f000 f81c 	bl	8001220 <_ux_device_class_storage_initialize>
			UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

			/* Return an error.  */
			return (UX_FUNCTION_NOT_SUPPORTED);
	}
}
 80011e8:	bd08      	pop	{r3, pc}
			status = _ux_device_class_storage_uninitialize(command);
 80011ea:	f000 fac1 	bl	8001770 <_ux_device_class_storage_uninitialize>
			return (status);
 80011ee:	e7fb      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
			if (command->ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80011f0:	6943      	ldr	r3, [r0, #20]
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d111      	bne.n	800121a <_ux_device_class_storage_entry+0x4c>
				return (UX_SUCCESS);
 80011f6:	2000      	movs	r0, #0
 80011f8:	e7f6      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
			status = _ux_device_class_storage_activate(command);
 80011fa:	f001 ff76 	bl	80030ea <_ux_device_class_storage_activate>
			return (status);
 80011fe:	e7f3      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
			status = _ux_device_class_storage_deactivate(command);
 8001200:	f001 ffea 	bl	80031d8 <_ux_device_class_storage_deactivate>
			return (status);
 8001204:	e7f0      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
			status = _ux_device_class_storage_control_request(command);
 8001206:	f001 ff83 	bl	8003110 <_ux_device_class_storage_control_request>
			return (status);
 800120a:	e7ed      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS,
 800120c:	2254      	movs	r2, #84	; 0x54
 800120e:	2107      	movs	r1, #7
 8001210:	2002      	movs	r0, #2
 8001212:	f001 fcf7 	bl	8002c04 <_ux_system_error_handler>
			return (UX_FUNCTION_NOT_SUPPORTED);
 8001216:	2054      	movs	r0, #84	; 0x54
 8001218:	e7e6      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
				return (UX_NO_CLASS_MATCH);
 800121a:	2057      	movs	r0, #87	; 0x57
 800121c:	e7e4      	b.n	80011e8 <_ux_device_class_storage_entry+0x1a>
	...

08001220 <_ux_device_class_storage_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND* command)
{
 8001220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001224:	b086      	sub	sp, #24
	UX_SLAVE_CLASS_STORAGE_PARAMETER* storage_parameter;
	UX_SLAVE_CLASS* class;
	ULONG lun_index;

	/* Get the pointer to the application parameters for the storage class.  */
	storage_parameter = command->ux_slave_class_command_parameter;
 8001226:	6a44      	ldr	r4, [r0, #36]	; 0x24

	/* Ensure the number of LUN declared by the caller does not exceed the
	 max number allowed for LUN storage.  */
	if (storage_parameter->ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 8001228:	68a3      	ldr	r3, [r4, #8]
 800122a:	2b02      	cmp	r3, #2
 800122c:	f200 8091 	bhi.w	8001352 <_ux_device_class_storage_initialize+0x132>
		return UX_ERROR;

	/* Get the class container.  */
	class = command->ux_slave_class_command_class_ptr;
 8001230:	6a07      	ldr	r7, [r0, #32]

	/* Create an instance of the device storage class.  */
	storage = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8001232:	229c      	movs	r2, #156	; 0x9c
 8001234:	2100      	movs	r1, #0
 8001236:	4608      	mov	r0, r1
 8001238:	f001 fd98 	bl	8002d6c <_ux_utility_memory_allocate>
			sizeof(UX_SLAVE_CLASS_STORAGE));

	/* Check for successful allocation.  */
	if (storage == UX_NULL)
 800123c:	4606      	mov	r6, r0
 800123e:	2800      	cmp	r0, #0
 8001240:	f000 808c 	beq.w	800135c <_ux_device_class_storage_initialize+0x13c>
		return (UX_MEMORY_INSUFFICIENT);

	/* Allocate some memory for the thread stack. */
	class->ux_slave_class_thread_stack = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8001244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001248:	2100      	movs	r1, #0
 800124a:	4608      	mov	r0, r1
 800124c:	f001 fd8e 	bl	8002d6c <_ux_utility_memory_allocate>
 8001250:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
			UX_THREAD_STACK_SIZE);

	/* If it's OK, create thread.  */
	if (class->ux_slave_class_thread_stack != UX_NULL)
 8001254:	2800      	cmp	r0, #0
 8001256:	d070      	beq.n	800133a <_ux_device_class_storage_initialize+0x11a>

		/* This instance needs to be running in a different thread. So start
		 a new thread. We pass a pointer to the class to the new thread.  This thread
		 does not start until we have a instance of the class. */
		status = _ux_utility_thread_create(&class->ux_slave_class_thread, "ux_slave_storage_thread",
 8001258:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800125c:	2300      	movs	r3, #0
 800125e:	9305      	str	r3, [sp, #20]
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	2314      	movs	r3, #20
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	9000      	str	r0, [sp, #0]
 8001270:	463b      	mov	r3, r7
 8001272:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <_ux_device_class_storage_initialize+0x140>)
 8001274:	493b      	ldr	r1, [pc, #236]	; (8001364 <_ux_device_class_storage_initialize+0x144>)
 8001276:	4640      	mov	r0, r8
 8001278:	f001 ff0a 	bl	8003090 <_ux_utility_thread_create>
				UX_THREAD_PRIORITY_CLASS, UX_NO_TIME_SLICE, TX_DONT_START);
	else
		status = UX_MEMORY_INSUFFICIENT;

	/* If thread resources allocated, go on.  */
	if (status == UX_SUCCESS)
 800127c:	4605      	mov	r5, r0
 800127e:	2800      	cmp	r0, #0
 8001280:	d15c      	bne.n	800133c <_ux_device_class_storage_initialize+0x11c>
	{
		UX_THREAD_EXTENSION_PTR_SET(&(class -> ux_slave_class_thread), class)

		/* Store the number of LUN declared.  */
		storage->ux_slave_class_storage_number_lun = storage_parameter
				->ux_slave_class_storage_parameter_number_lun;
 8001282:	f8d4 c008 	ldr.w	ip, [r4, #8]
		storage->ux_slave_class_storage_number_lun = storage_parameter
 8001286:	f8c6 c004 	str.w	ip, [r6, #4]

		/* Copy each individual LUN parameters.  */
		for (lun_index = 0; lun_index < storage->ux_slave_class_storage_number_lun; lun_index++)
 800128a:	2100      	movs	r1, #0
 800128c:	458c      	cmp	ip, r1
 800128e:	d923      	bls.n	80012d8 <_ux_device_class_storage_initialize+0xb8>
		{
			/* Check block length size. */
			if (storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
					.ux_slave_class_storage_media_block_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8001290:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8001294:	0093      	lsls	r3, r2, #2
 8001296:	461a      	mov	r2, r3
 8001298:	4423      	add	r3, r4
 800129a:	691b      	ldr	r3, [r3, #16]
			if (storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
 800129c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a0:	d819      	bhi.n	80012d6 <_ux_device_class_storage_initialize+0xb6>
			}

			/* Store all the application parameter information about the media.  */
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba =
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_last_lba;
 80012a2:	4613      	mov	r3, r2
 80012a4:	4422      	add	r2, r4
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba =
 80012a6:	469e      	mov	lr, r3
 80012a8:	4433      	add	r3, r6
 80012aa:	68d0      	ldr	r0, [r2, #12]
 80012ac:	6098      	str	r0, [r3, #8]
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_block_length =
 80012ae:	6910      	ldr	r0, [r2, #16]
 80012b0:	60d8      	str	r0, [r3, #12]
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_block_length;
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type =
 80012b2:	6950      	ldr	r0, [r2, #20]
 80012b4:	6118      	str	r0, [r3, #16]
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_type;
			storage->ux_slave_class_storage_lun[lun_index]
					.ux_slave_class_storage_media_removable_flag = storage_parameter
 80012b6:	6990      	ldr	r0, [r2, #24]
 80012b8:	6158      	str	r0, [r3, #20]
					->ux_slave_class_storage_parameter_lun[lun_index]
					.ux_slave_class_storage_media_removable_flag;
			storage->ux_slave_class_storage_lun[lun_index]
					.ux_slave_class_storage_media_read_only_flag = storage_parameter
 80012ba:	69d0      	ldr	r0, [r2, #28]
 80012bc:	6198      	str	r0, [r3, #24]
					->ux_slave_class_storage_parameter_lun[lun_index]
					.ux_slave_class_storage_media_read_only_flag;
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read =
 80012be:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80012c0:	6318      	str	r0, [r3, #48]	; 0x30
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_read;
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_flush =
 80012c2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80012c4:	6398      	str	r0, [r3, #56]	; 0x38
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_flush;
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_write =
 80012c6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80012c8:	6358      	str	r0, [r3, #52]	; 0x34
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_write;
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_status =
 80012ca:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80012cc:	63d8      	str	r0, [r3, #60]	; 0x3c
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_status;
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification =
					storage_parameter->ux_slave_class_storage_parameter_lun[lun_index]
							.ux_slave_class_storage_media_notification;
 80012ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
			storage->ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification =
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
		for (lun_index = 0; lun_index < storage->ux_slave_class_storage_number_lun; lun_index++)
 80012d2:	3101      	adds	r1, #1
 80012d4:	e7da      	b.n	800128c <_ux_device_class_storage_initialize+0x6c>
				status = (UX_MEMORY_INSUFFICIENT);
 80012d6:	2512      	movs	r5, #18
		}

		/* If it's OK, complete it.  */
		if (status == UX_SUCCESS)
 80012d8:	bb5d      	cbnz	r5, 8001332 <_ux_device_class_storage_initialize+0x112>
		{

			/* Store the start and stop signals if needed by the application.  */
			storage->ux_slave_class_storage_instance_activate = storage_parameter
					->ux_slave_class_storage_instance_activate;
 80012da:	6823      	ldr	r3, [r4, #0]
			storage->ux_slave_class_storage_instance_activate = storage_parameter
 80012dc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			storage->ux_slave_class_storage_instance_deactivate = storage_parameter
					->ux_slave_class_storage_instance_deactivate;
 80012e0:	6863      	ldr	r3, [r4, #4]
			storage->ux_slave_class_storage_instance_deactivate = storage_parameter
 80012e2:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

			/* Store the vendor id, product id, product revision and product serial.  */
			if (storage_parameter->ux_slave_class_storage_parameter_vendor_id)
 80012e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80012ea:	b193      	cbz	r3, 8001312 <_ux_device_class_storage_initialize+0xf2>
				storage->ux_slave_class_storage_vendor_id = storage_parameter
 80012ec:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
						->ux_slave_class_storage_parameter_vendor_id;
			else
				storage->ux_slave_class_storage_vendor_id =
						_ux_system_slave_class_storage_vendor_id;

			if (storage_parameter->ux_slave_class_storage_parameter_product_id)
 80012f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80012f4:	b18b      	cbz	r3, 800131a <_ux_device_class_storage_initialize+0xfa>
				storage->ux_slave_class_storage_product_id = storage_parameter
 80012f6:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
						->ux_slave_class_storage_parameter_product_id;
			else
				storage->ux_slave_class_storage_product_id =
						_ux_system_slave_class_storage_product_id;

			if (storage_parameter->ux_slave_class_storage_parameter_product_rev)
 80012fa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80012fe:	b183      	cbz	r3, 8001322 <_ux_device_class_storage_initialize+0x102>
				storage->ux_slave_class_storage_product_rev = storage_parameter
 8001300:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
						->ux_slave_class_storage_parameter_product_rev;
			else
				storage->ux_slave_class_storage_product_rev =
						_ux_system_slave_class_storage_product_rev;

			if (storage_parameter->ux_slave_class_storage_parameter_product_serial)
 8001304:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001308:	b17b      	cbz	r3, 800132a <_ux_device_class_storage_initialize+0x10a>
				storage->ux_slave_class_storage_product_serial = storage_parameter
 800130a:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
			else
				storage->ux_slave_class_storage_product_serial =
						_ux_system_slave_class_storage_product_serial;

			/* Save the address of the STORAGE instance inside the STORAGE container.  */
			class->ux_slave_class_instance = (VOID*)storage;
 800130e:	64be      	str	r6, [r7, #72]	; 0x48

			return (UX_SUCCESS);
 8001310:	e020      	b.n	8001354 <_ux_device_class_storage_initialize+0x134>
				storage->ux_slave_class_storage_vendor_id =
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_ux_device_class_storage_initialize+0x148>)
 8001314:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001318:	e7ea      	b.n	80012f0 <_ux_device_class_storage_initialize+0xd0>
				storage->ux_slave_class_storage_product_id =
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <_ux_device_class_storage_initialize+0x14c>)
 800131c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001320:	e7eb      	b.n	80012fa <_ux_device_class_storage_initialize+0xda>
				storage->ux_slave_class_storage_product_rev =
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_ux_device_class_storage_initialize+0x150>)
 8001324:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
 8001328:	e7ec      	b.n	8001304 <_ux_device_class_storage_initialize+0xe4>
				storage->ux_slave_class_storage_product_serial =
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <_ux_device_class_storage_initialize+0x154>)
 800132c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8001330:	e7ed      	b.n	800130e <_ux_device_class_storage_initialize+0xee>
		}

		/* Free thread resources.  */
		_ux_utility_thread_delete(&class->ux_slave_class_thread);
 8001332:	4640      	mov	r0, r8
 8001334:	f001 fec9 	bl	80030ca <_ux_utility_thread_delete>
 8001338:	e000      	b.n	800133c <_ux_device_class_storage_initialize+0x11c>
		status = UX_MEMORY_INSUFFICIENT;
 800133a:	2512      	movs	r5, #18
	}

	if (class->ux_slave_class_thread_stack != UX_NULL)
 800133c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001340:	b11b      	cbz	r3, 800134a <_ux_device_class_storage_initialize+0x12a>
		_ux_utility_memory_free(&class->ux_slave_class_thread_stack);
 8001342:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001346:	f001 fdbf 	bl	8002ec8 <_ux_utility_memory_free>

	/* Free instance.  */
	_ux_utility_memory_free(storage);
 800134a:	4630      	mov	r0, r6
 800134c:	f001 fdbc 	bl	8002ec8 <_ux_utility_memory_free>

	/* Return completion status.  */
	return (status);
 8001350:	e000      	b.n	8001354 <_ux_device_class_storage_initialize+0x134>
		return UX_ERROR;
 8001352:	25ff      	movs	r5, #255	; 0xff
}
 8001354:	4628      	mov	r0, r5
 8001356:	b006      	add	sp, #24
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (UX_MEMORY_INSUFFICIENT);
 800135c:	2512      	movs	r5, #18
 800135e:	e7f9      	b.n	8001354 <_ux_device_class_storage_initialize+0x134>
 8001360:	08001379 	.word	0x08001379
 8001364:	0800b358 	.word	0x0800b358
 8001368:	200000d0 	.word	0x200000d0
 800136c:	2000009c 	.word	0x2000009c
 8001370:	200000b0 	.word	0x200000b0
 8001374:	200000b8 	.word	0x200000b8

08001378 <_ux_device_class_storage_thread>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_storage_thread(ULONG storage_class)
{
 8001378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137c:	b085      	sub	sp, #20
 800137e:	4680      	mov	r8, r0
 8001380:	e1e4      	b.n	800174c <_ux_device_class_storage_thread+0x3d4>
        
        /* This is the first time we are activated. We need the interface to the class.  */
        interface =  storage -> ux_slave_class_storage_interface;
        
        /* Locate the endpoints.  */
        endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8001382:	4627      	mov	r7, r4
        }
        else
        {

            /* We found the endpoint IN first, so next endpoint is OUT.  */
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8001384:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8001386:	e1ed      	b.n	8001764 <_ux_device_class_storage_thread+0x3ec>
                   content and format. First we make sure we have a complete CBW.  */
                if ((lun < storage -> ux_slave_class_storage_number_lun) && (length == UX_SLAVE_CLASS_STORAGE_CBW_LENGTH))
                {

                    /* The length of the CBW is correct, analyze the header.  */
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8001388:	4658      	mov	r0, fp
 800138a:	f001 fcd8 	bl	8002d3e <_ux_utility_long_get>
 800138e:	4b96      	ldr	r3, [pc, #600]	; (80015e8 <_ux_device_class_storage_thread+0x270>)
 8001390:	4298      	cmp	r0, r3
 8001392:	d003      	beq.n	800139c <_ux_device_class_storage_thread+0x24>
                    }
                    
                    else

                        /* Phase error!  */
                        storage -> ux_slave_class_storage_phase_error = TX_TRUE;
 8001394:	2301      	movs	r3, #1
 8001396:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 800139a:	e1a1      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                        cbwcb_length =  (ULONG) *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB_LENGTH);
 800139c:	f89b 300e 	ldrb.w	r3, [fp, #14]
                        if (cbwcb_length != 0)
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8193 	beq.w	80016cc <_ux_device_class_storage_thread+0x354>
                            switch (*(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB))
 80013a6:	f89b 300f 	ldrb.w	r3, [fp, #15]
 80013aa:	2baa      	cmp	r3, #170	; 0xaa
 80013ac:	f200 8159 	bhi.w	8001662 <_ux_device_class_storage_thread+0x2ea>
 80013b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80013b4:	015700ab 	.word	0x015700ab
 80013b8:	00b50157 	.word	0x00b50157
 80013bc:	015700bf 	.word	0x015700bf
 80013c0:	01570157 	.word	0x01570157
 80013c4:	01570157 	.word	0x01570157
 80013c8:	01570157 	.word	0x01570157
 80013cc:	01570157 	.word	0x01570157
 80013d0:	01570157 	.word	0x01570157
 80013d4:	01570157 	.word	0x01570157
 80013d8:	015700c9 	.word	0x015700c9
 80013dc:	01570157 	.word	0x01570157
 80013e0:	01570157 	.word	0x01570157
 80013e4:	01570157 	.word	0x01570157
 80013e8:	00d3010f 	.word	0x00d3010f
 80013ec:	01570157 	.word	0x01570157
 80013f0:	015700dd 	.word	0x015700dd
 80013f4:	01570157 	.word	0x01570157
 80013f8:	00e70157 	.word	0x00e70157
 80013fc:	00f10157 	.word	0x00f10157
 8001400:	01570157 	.word	0x01570157
 8001404:	01570128 	.word	0x01570128
 8001408:	01570140 	.word	0x01570140
 800140c:	01570157 	.word	0x01570157
 8001410:	00fb0157 	.word	0x00fb0157
 8001414:	01570157 	.word	0x01570157
 8001418:	01570157 	.word	0x01570157
 800141c:	014c0157 	.word	0x014c0157
 8001420:	01570157 	.word	0x01570157
 8001424:	01570157 	.word	0x01570157
 8001428:	01570157 	.word	0x01570157
 800142c:	01570157 	.word	0x01570157
 8001430:	01570157 	.word	0x01570157
 8001434:	01570157 	.word	0x01570157
 8001438:	01570157 	.word	0x01570157
 800143c:	01570157 	.word	0x01570157
 8001440:	01570157 	.word	0x01570157
 8001444:	01570157 	.word	0x01570157
 8001448:	01570157 	.word	0x01570157
 800144c:	01570157 	.word	0x01570157
 8001450:	01570157 	.word	0x01570157
 8001454:	01570157 	.word	0x01570157
 8001458:	01570157 	.word	0x01570157
 800145c:	01050157 	.word	0x01050157
 8001460:	01570157 	.word	0x01570157
 8001464:	01570157 	.word	0x01570157
 8001468:	0157010f 	.word	0x0157010f
 800146c:	01570157 	.word	0x01570157
 8001470:	01570157 	.word	0x01570157
 8001474:	01570157 	.word	0x01570157
 8001478:	01570157 	.word	0x01570157
 800147c:	01570157 	.word	0x01570157
 8001480:	01570157 	.word	0x01570157
 8001484:	01570157 	.word	0x01570157
 8001488:	01570157 	.word	0x01570157
 800148c:	01570157 	.word	0x01570157
 8001490:	01570157 	.word	0x01570157
 8001494:	01570157 	.word	0x01570157
 8001498:	01570157 	.word	0x01570157
 800149c:	01570157 	.word	0x01570157
 80014a0:	01570157 	.word	0x01570157
 80014a4:	01570157 	.word	0x01570157
 80014a8:	01570157 	.word	0x01570157
 80014ac:	01570157 	.word	0x01570157
 80014b0:	01570157 	.word	0x01570157
 80014b4:	01570157 	.word	0x01570157
 80014b8:	01570157 	.word	0x01570157
 80014bc:	01570157 	.word	0x01570157
 80014c0:	01570157 	.word	0x01570157
 80014c4:	01570157 	.word	0x01570157
 80014c8:	01570157 	.word	0x01570157
 80014cc:	01570157 	.word	0x01570157
 80014d0:	01570157 	.word	0x01570157
 80014d4:	01570157 	.word	0x01570157
 80014d8:	01570157 	.word	0x01570157
 80014dc:	01570157 	.word	0x01570157
 80014e0:	01570157 	.word	0x01570157
 80014e4:	01570157 	.word	0x01570157
 80014e8:	01570157 	.word	0x01570157
 80014ec:	01570157 	.word	0x01570157
 80014f0:	01570157 	.word	0x01570157
 80014f4:	01570157 	.word	0x01570157
 80014f8:	01570157 	.word	0x01570157
 80014fc:	01570157 	.word	0x01570157
 8001500:	01570157 	.word	0x01570157
 8001504:	0157011c 	.word	0x0157011c
 8001508:	0134      	.short	0x0134
                                _ux_device_class_storage_test_ready(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 800150a:	f10b 030f 	add.w	r3, fp, #15
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4623      	mov	r3, r4
 8001512:	463a      	mov	r2, r7
 8001514:	4651      	mov	r1, sl
 8001516:	4628      	mov	r0, r5
 8001518:	f002 f9d9 	bl	80038ce <_ux_device_class_storage_test_ready>
                                break;
 800151c:	e0e0      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_request_sense(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 800151e:	f10b 030f 	add.w	r3, fp, #15
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4623      	mov	r3, r4
 8001526:	463a      	mov	r2, r7
 8001528:	4651      	mov	r1, sl
 800152a:	4628      	mov	r0, r5
 800152c:	f002 f919 	bl	8003762 <_ux_device_class_storage_request_sense>
                                break;
 8001530:	e0d6      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_format(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 8001532:	f10b 030f 	add.w	r3, fp, #15
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4623      	mov	r3, r4
 800153a:	463a      	mov	r2, r7
 800153c:	4651      	mov	r1, sl
 800153e:	4628      	mov	r0, r5
 8001540:	f001 fe65 	bl	800320e <_ux_device_class_storage_format>
                                break;
 8001544:	e0cc      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_inquiry(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 8001546:	f10b 030f 	add.w	r3, fp, #15
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4623      	mov	r3, r4
 800154e:	463a      	mov	r2, r7
 8001550:	4651      	mov	r1, sl
 8001552:	4628      	mov	r0, r5
 8001554:	f001 fe7a 	bl	800324c <_ux_device_class_storage_inquiry>
                                break;
 8001558:	e0c2      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_start_stop(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 800155a:	f10b 030f 	add.w	r3, fp, #15
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4623      	mov	r3, r4
 8001562:	463a      	mov	r2, r7
 8001564:	4651      	mov	r1, sl
 8001566:	4628      	mov	r0, r5
 8001568:	f002 f92f 	bl	80037ca <_ux_device_class_storage_start_stop>
                                break;
 800156c:	e0b8      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_prevent_allow_media_removal(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 800156e:	f10b 030f 	add.w	r3, fp, #15
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	463a      	mov	r2, r7
 8001578:	4651      	mov	r1, sl
 800157a:	4628      	mov	r0, r5
 800157c:	f001 ffb3 	bl	80034e6 <_ux_device_class_storage_prevent_allow_media_removal>
                                break;
 8001580:	e0ae      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_read_format_capacity(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 8001582:	f10b 030f 	add.w	r3, fp, #15
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4623      	mov	r3, r4
 800158a:	463a      	mov	r2, r7
 800158c:	4651      	mov	r1, sl
 800158e:	4628      	mov	r0, r5
 8001590:	f002 f8b4 	bl	80036fc <_ux_device_class_storage_read_format_capacity>
                                break;
 8001594:	e0a4      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_read_capacity(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 8001596:	f10b 030f 	add.w	r3, fp, #15
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4623      	mov	r3, r4
 800159e:	463a      	mov	r2, r7
 80015a0:	4651      	mov	r1, sl
 80015a2:	4628      	mov	r0, r5
 80015a4:	f002 f85f 	bl	8003666 <_ux_device_class_storage_read_capacity>
                                break;
 80015a8:	e09a      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_verify(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 80015aa:	f10b 030f 	add.w	r3, fp, #15
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4623      	mov	r3, r4
 80015b2:	463a      	mov	r2, r7
 80015b4:	4651      	mov	r1, sl
 80015b6:	4628      	mov	r0, r5
 80015b8:	f000 f8eb 	bl	8001792 <_ux_device_class_storage_verify>
                                break;
 80015bc:	e090      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_mode_select(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 80015be:	f10b 030f 	add.w	r3, fp, #15
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	463a      	mov	r2, r7
 80015c8:	4651      	mov	r1, sl
 80015ca:	4628      	mov	r0, r5
 80015cc:	f001 fee3 	bl	8003396 <_ux_device_class_storage_mode_select>
                                break;
 80015d0:	e086      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_mode_sense(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB);
 80015d2:	f10b 030f 	add.w	r3, fp, #15
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4623      	mov	r3, r4
 80015da:	463a      	mov	r2, r7
 80015dc:	4651      	mov	r1, sl
 80015de:	4628      	mov	r0, r5
 80015e0:	f001 fefd 	bl	80033de <_ux_device_class_storage_mode_sense>
                                break;
 80015e4:	e07c      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
 80015e6:	bf00      	nop
 80015e8:	43425355 	.word	0x43425355
                                _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB, 
 80015ec:	23a8      	movs	r3, #168	; 0xa8
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	f10b 030f 	add.w	r3, fp, #15
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	4623      	mov	r3, r4
 80015f8:	463a      	mov	r2, r7
 80015fa:	4651      	mov	r1, sl
 80015fc:	4628      	mov	r0, r5
 80015fe:	f001 ff86 	bl	800350e <_ux_device_class_storage_read>
                                break;
 8001602:	e06d      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB, 
 8001604:	2328      	movs	r3, #40	; 0x28
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	f10b 030f 	add.w	r3, fp, #15
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	4623      	mov	r3, r4
 8001610:	463a      	mov	r2, r7
 8001612:	4651      	mov	r1, sl
 8001614:	4628      	mov	r0, r5
 8001616:	f001 ff7a 	bl	800350e <_ux_device_class_storage_read>
                                break;
 800161a:	e061      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB,
 800161c:	23aa      	movs	r3, #170	; 0xaa
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	f10b 030f 	add.w	r3, fp, #15
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4623      	mov	r3, r4
 8001628:	463a      	mov	r2, r7
 800162a:	4651      	mov	r1, sl
 800162c:	4628      	mov	r0, r5
 800162e:	f000 f8b6 	bl	800179e <_ux_device_class_storage_write>
                                break;
 8001632:	e055      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB, 
 8001634:	232a      	movs	r3, #42	; 0x2a
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f10b 030f 	add.w	r3, fp, #15
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4623      	mov	r3, r4
 8001640:	463a      	mov	r2, r7
 8001642:	4651      	mov	r1, sl
 8001644:	4628      	mov	r0, r5
 8001646:	f000 f8aa 	bl	800179e <_ux_device_class_storage_write>
                                break;
 800164a:	e049      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                _ux_device_class_storage_synchronize_cache(storage, lun, endpoint_in, endpoint_out, scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB, *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB));
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	f10b 030f 	add.w	r3, fp, #15
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4623      	mov	r3, r4
 8001656:	463a      	mov	r2, r7
 8001658:	4651      	mov	r1, sl
 800165a:	4628      	mov	r0, r5
 800165c:	f002 f8bb 	bl	80037d6 <_ux_device_class_storage_synchronize_cache>
                                break;
 8001660:	e03e      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                if (_ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH) > 0 &&
 8001662:	f10b 0008 	add.w	r0, fp, #8
 8001666:	f001 fb6a 	bl	8002d3e <_ux_utility_long_get>
 800166a:	b1b0      	cbz	r0, 800169a <_ux_device_class_storage_thread+0x322>
                                    ((*(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_FLAGS) & 0x80) == 0))
 800166c:	f99b 300c 	ldrsb.w	r3, [fp, #12]
                                if (_ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH) > 0 &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	db12      	blt.n	800169a <_ux_device_class_storage_thread+0x322>
                                    _ux_device_stack_endpoint_stall(endpoint_out);
 8001674:	4620      	mov	r0, r4
 8001676:	f001 f8a5 	bl	80027c4 <_ux_device_stack_endpoint_stall>
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key =       UX_SLAVE_CLASS_STORAGE_SENSE_KEY_ILLEGAL_REQUEST;
 800167a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800167e:	eba2 020a 	sub.w	r2, r2, sl
 8001682:	0093      	lsls	r3, r2, #2
 8001684:	442b      	add	r3, r5
 8001686:	2205      	movs	r2, #5
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code =            UX_SLAVE_CLASS_STORAGE_ASC_KEY_INVALID_COMMAND;
 800168c:	2220      	movs	r2, #32
 800168e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier =  0;
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                                while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8001698:	e007      	b.n	80016aa <_ux_device_class_storage_thread+0x332>
                                    _ux_device_stack_endpoint_stall(endpoint_in);
 800169a:	4638      	mov	r0, r7
 800169c:	f001 f892 	bl	80027c4 <_ux_device_stack_endpoint_stall>
 80016a0:	e7eb      	b.n	800167a <_ux_device_class_storage_thread+0x302>
                                    if (endpoint_in -> ux_slave_endpoint_state == UX_ENDPOINT_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b12b      	cbz	r3, 80016b2 <_ux_device_class_storage_thread+0x33a>
                                        _ux_utility_thread_relinquish();
 80016a6:	f001 fd18 	bl	80030da <_ux_utility_thread_relinquish>
                                while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80016aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d0f8      	beq.n	80016a2 <_ux_device_class_storage_thread+0x32a>
 80016b0:	e016      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                                        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 80016b2:	2301      	movs	r3, #1
 80016b4:	463a      	mov	r2, r7
 80016b6:	4651      	mov	r1, sl
 80016b8:	4628      	mov	r0, r5
 80016ba:	f001 fd61 	bl	8003180 <_ux_device_class_storage_csw_send>
                                        if (status != UX_SUCCESS)
 80016be:	4602      	mov	r2, r0
 80016c0:	b170      	cbz	r0, 80016e0 <_ux_device_class_storage_thread+0x368>
                                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 80016c2:	2107      	movs	r1, #7
 80016c4:	2002      	movs	r0, #2
 80016c6:	f001 fa9d 	bl	8002c04 <_ux_system_error_handler>
 80016ca:	e009      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                            storage -> ux_slave_class_storage_phase_error = TX_TRUE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 80016d2:	e005      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                    storage -> ux_slave_class_storage_phase_error = TX_TRUE;
            }
            else
            {

                if (storage -> ux_slave_class_storage_phase_error == TX_TRUE)
 80016d4:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d02c      	beq.n	8001736 <_ux_device_class_storage_thread+0x3be>
                    _ux_device_stack_endpoint_stall(endpoint_out);
                    _ux_device_stack_endpoint_stall(endpoint_in);
                }

                /* We must therefore wait a while.  */
                _ux_utility_thread_relinquish();
 80016dc:	f001 fcfd 	bl	80030da <_ux_utility_thread_relinquish>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80016e0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d12e      	bne.n	8001744 <_ux_device_class_storage_thread+0x3cc>
            if (endpoint_out -> ux_slave_endpoint_state == UX_ENDPOINT_RESET &&
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f3      	bne.n	80016d4 <_ux_device_class_storage_thread+0x35c>
                !storage -> ux_slave_class_storage_phase_error)
 80016ec:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
            if (endpoint_out -> ux_slave_endpoint_state == UX_ENDPOINT_RESET &&
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ef      	bne.n	80016d4 <_ux_device_class_storage_thread+0x35c>
                status =  _ux_device_stack_transfer_request(transfer_request, 64, 64);
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	4611      	mov	r1, r2
 80016f8:	4648      	mov	r0, r9
 80016fa:	f001 fa29 	bl	8002b50 <_ux_device_stack_transfer_request>
            if (status == UX_SUCCESS)
 80016fe:	2800      	cmp	r0, #0
 8001700:	d1e8      	bne.n	80016d4 <_ux_device_class_storage_thread+0x35c>
                length =  transfer_request -> ux_slave_transfer_request_actual_length;
 8001702:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001704:	9303      	str	r3, [sp, #12]
                scsi_command =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8001706:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
                lun =  (ULONG) *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_LUN);
 800170a:	f89b a00d 	ldrb.w	sl, [fp, #13]
                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_scsi_tag =  _ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_TAG);
 800170e:	f10b 0004 	add.w	r0, fp, #4
 8001712:	f001 fb14 	bl	8002d3e <_ux_utility_long_get>
 8001716:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 800171a:	0093      	lsls	r3, r2, #2
 800171c:	442b      	add	r3, r5
 800171e:	6218      	str	r0, [r3, #32]
                if ((lun < storage -> ux_slave_class_storage_number_lun) && (length == UX_SLAVE_CLASS_STORAGE_CBW_LENGTH))
 8001720:	686b      	ldr	r3, [r5, #4]
 8001722:	4553      	cmp	r3, sl
 8001724:	d903      	bls.n	800172e <_ux_device_class_storage_thread+0x3b6>
 8001726:	9b03      	ldr	r3, [sp, #12]
 8001728:	2b1f      	cmp	r3, #31
 800172a:	f43f ae2d 	beq.w	8001388 <_ux_device_class_storage_thread+0x10>
                    storage -> ux_slave_class_storage_phase_error = TX_TRUE;
 800172e:	2301      	movs	r3, #1
 8001730:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8001734:	e7d4      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
                    _ux_device_stack_endpoint_stall(endpoint_out);
 8001736:	4620      	mov	r0, r4
 8001738:	f001 f844 	bl	80027c4 <_ux_device_stack_endpoint_stall>
                    _ux_device_stack_endpoint_stall(endpoint_in);
 800173c:	4638      	mov	r0, r7
 800173e:	f001 f841 	bl	80027c4 <_ux_device_stack_endpoint_stall>
 8001742:	e7cb      	b.n	80016dc <_ux_device_class_storage_thread+0x364>
            }
        }

        /* We need to suspend ourselves. We will be resumed by the 
           device enumeration module.  */
        _ux_utility_thread_suspend(&class -> ux_slave_class_thread);
 8001744:	f108 0050 	add.w	r0, r8, #80	; 0x50
 8001748:	f001 fccb 	bl	80030e2 <_ux_utility_thread_suspend>
        storage =  (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 800174c:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
        device =  &_ux_system_slave -> ux_system_slave_device;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <_ux_device_class_storage_thread+0x3f4>)
 8001752:	681e      	ldr	r6, [r3, #0]
        interface =  storage -> ux_slave_class_storage_interface;
 8001754:	682b      	ldr	r3, [r5, #0]
        endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8001756:	6b5c      	ldr	r4, [r3, #52]	; 0x34
        if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8001758:	6963      	ldr	r3, [r4, #20]
 800175a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800175e:	f47f ae10 	bne.w	8001382 <_ux_device_class_storage_thread+0xa>
            endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8001762:	6a67      	ldr	r7, [r4, #36]	; 0x24
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8001764:	f104 0930 	add.w	r9, r4, #48	; 0x30
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8001768:	e7ba      	b.n	80016e0 <_ux_device_class_storage_thread+0x368>
 800176a:	bf00      	nop
 800176c:	20002b80 	.word	0x20002b80

08001770 <_ux_device_class_storage_uninitialize>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8001770:	b538      	push	{r3, r4, r5, lr}
                                          
UX_SLAVE_CLASS_STORAGE                  *storage;
UX_SLAVE_CLASS                          *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8001772:	6a04      	ldr	r4, [r0, #32]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 8001774:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    
    /* Sanity check.  */
    if (storage != UX_NULL)
 8001776:	b155      	cbz	r5, 800178e <_ux_device_class_storage_uninitialize+0x1e>
    {

        /* Remove STORAGE thread.  */
        _ux_utility_thread_delete(&class -> ux_slave_class_thread);
 8001778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800177c:	f001 fca5 	bl	80030ca <_ux_utility_thread_delete>
    
        /* Remove the thread used by STORAGE.  */
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8001780:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8001784:	f001 fba0 	bl	8002ec8 <_ux_utility_memory_free>
    
        /* Free the resources.  */
        _ux_utility_memory_free(storage);
 8001788:	4628      	mov	r0, r5
 800178a:	f001 fb9d 	bl	8002ec8 <_ux_utility_memory_free>
    }
    
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 800178e:	2000      	movs	r0, #0
 8001790:	bd38      	pop	{r3, r4, r5, pc}

08001792 <_ux_device_class_storage_verify>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_verify(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                      UX_SLAVE_ENDPOINT *endpoint_in,
                                      UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8001792:	b508      	push	{r3, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_VERIFY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We return a CSW with success.  */
    _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8001794:	2300      	movs	r3, #0
 8001796:	f001 fcf3 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* Return success!  */
    return(UX_SUCCESS);
}
 800179a:	2000      	movs	r0, #0
 800179c:	bd08      	pop	{r3, pc}

0800179e <_ux_device_class_storage_write>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_write(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                    UX_SLAVE_ENDPOINT *endpoint_in,
                                    UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 800179e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a2:	b087      	sub	sp, #28
 80017a4:	4680      	mov	r8, r0
 80017a6:	460e      	mov	r6, r1
 80017a8:	9203      	str	r2, [sp, #12]
 80017aa:	469a      	mov	sl, r3
 80017ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
ULONG                   media_status;
ULONG                   total_length;
ULONG                   transfer_length;

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 80017ae:	1ca0      	adds	r0, r4, #2
 80017b0:	f001 fad0 	bl	8002d54 <_ux_utility_long_get_big_endian>
 80017b4:	4681      	mov	r9, r0
    
    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.   */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16)
 80017b6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80017ba:	2b2a      	cmp	r3, #42	; 0x2a
 80017bc:	d02c      	beq.n	8001818 <_ux_device_class_storage_write+0x7a>
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);

    else        

        /* Get the number of blocks from the CBWCB in 32 bits.  */
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 80017be:	1da0      	adds	r0, r4, #6
 80017c0:	f001 fac8 	bl	8002d54 <_ux_utility_long_get_big_endian>
 80017c4:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_WRITE, storage, lun, lba, total_number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80017c6:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80017ca:	9302      	str	r3, [sp, #8]

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 80017cc:	0133      	lsls	r3, r6, #4
 80017ce:	1b9b      	subs	r3, r3, r6
 80017d0:	009f      	lsls	r7, r3, #2
 80017d2:	4447      	add	r7, r8
 80017d4:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80017d6:	ab05      	add	r3, sp, #20
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	4631      	mov	r1, r6
 80017dc:	4640      	mov	r0, r8
 80017de:	47a8      	blx	r5
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 80017e0:	9b05      	ldr	r3, [sp, #20]
 80017e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 80017e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80017ea:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 80017ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 80017f6:	b9a0      	cbnz	r0, 8001822 <_ux_device_class_storage_write+0x84>
        /* We are done here.  */
        return(UX_ERROR);
    }

    /* Check Read Only flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 80017f8:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 80017fc:	0093      	lsls	r3, r2, #2
 80017fe:	4443      	add	r3, r8
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d018      	beq.n	8001838 <_ux_device_class_storage_write+0x9a>
        /* We are done here.  */
        return(UX_ERROR);
    }

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8001806:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 800180a:	0093      	lsls	r3, r2, #2
 800180c:	4443      	add	r3, r8
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	fb04 f403 	mul.w	r4, r4, r3
 8001814:	464f      	mov	r7, r9
    
    /* Default status to success.  */
    status =  UX_SUCCESS;

    /* It may take several transfers to send the requested data.  */
    while (total_length)
 8001816:	e043      	b.n	80018a0 <_ux_device_class_storage_write+0x102>
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);
 8001818:	1de0      	adds	r0, r4, #7
 800181a:	f001 fc1c 	bl	8003056 <_ux_utility_short_get_big_endian>
 800181e:	4604      	mov	r4, r0
 8001820:	e7d1      	b.n	80017c6 <_ux_device_class_storage_write+0x28>
        _ux_device_stack_endpoint_stall(endpoint_out);
 8001822:	4650      	mov	r0, sl
 8001824:	f000 ffce 	bl	80027c4 <_ux_device_stack_endpoint_stall>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8001828:	2301      	movs	r3, #1
 800182a:	9a03      	ldr	r2, [sp, #12]
 800182c:	4631      	mov	r1, r6
 800182e:	4640      	mov	r0, r8
 8001830:	f001 fca6 	bl	8003180 <_ux_device_class_storage_csw_send>
        return(UX_ERROR);
 8001834:	20ff      	movs	r0, #255	; 0xff
 8001836:	e072      	b.n	800191e <_ux_device_class_storage_write+0x180>
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  UX_SLAVE_CLASS_STORAGE_SENSE_KEY_DATA_PROTECT;
 8001838:	0132      	lsls	r2, r6, #4
 800183a:	1b92      	subs	r2, r2, r6
 800183c:	0093      	lsls	r3, r2, #2
 800183e:	4443      	add	r3, r8
 8001840:	2207      	movs	r2, #7
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  UX_SLAVE_CLASS_STORAGE_REQUEST_CODE_MEDIA_PROTECTED;
 8001846:	2227      	movs	r2, #39	; 0x27
 8001848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0;
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        _ux_device_stack_endpoint_stall(endpoint_out);
 8001852:	4650      	mov	r0, sl
 8001854:	f000 ffb6 	bl	80027c4 <_ux_device_stack_endpoint_stall>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8001858:	2301      	movs	r3, #1
 800185a:	9a03      	ldr	r2, [sp, #12]
 800185c:	4631      	mov	r1, r6
 800185e:	4640      	mov	r0, r8
 8001860:	f001 fc8e 	bl	8003180 <_ux_device_class_storage_csw_send>
        return(UX_ERROR);
 8001864:	20ff      	movs	r0, #255	; 0xff
 8001866:	e05a      	b.n	800191e <_ux_device_class_storage_write+0x180>

        /* How much can we receive in this transfer?  */
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
        else
            transfer_length =  total_length;
 8001868:	4625      	mov	r5, r4
        
        /* Get the data payload from the host.  */
        status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length);
 800186a:	462a      	mov	r2, r5
 800186c:	4629      	mov	r1, r5
 800186e:	9802      	ldr	r0, [sp, #8]
 8001870:	f001 f96e 	bl	8002b50 <_ux_device_stack_transfer_request>
        
        /* Check the status.  */
        if (status != UX_SUCCESS)
 8001874:	b9d8      	cbnz	r0, 80018ae <_ux_device_class_storage_write+0x110>
            /* Return an error.  */
            return(UX_ERROR);
        }

        /* Compute the number of blocks to transfer.  */
        number_blocks = transfer_length / storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8001876:	0133      	lsls	r3, r6, #4
 8001878:	1b9b      	subs	r3, r3, r6
 800187a:	009a      	lsls	r2, r3, #2
 800187c:	4442      	add	r2, r8
 800187e:	68d3      	ldr	r3, [r2, #12]
 8001880:	fbb5 f9f3 	udiv	r9, r5, r3
        
        /* Execute the write command to the local media.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_write(storage, lun, transfer_request -> ux_slave_transfer_request_data_pointer, number_blocks, lba, &media_status);
 8001884:	f8d2 b034 	ldr.w	fp, [r2, #52]	; 0x34
 8001888:	ab05      	add	r3, sp, #20
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9700      	str	r7, [sp, #0]
 800188e:	464b      	mov	r3, r9
 8001890:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 8001894:	4631      	mov	r1, r6
 8001896:	4640      	mov	r0, r8
 8001898:	47d8      	blx	fp
    
        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 800189a:	bb00      	cbnz	r0, 80018de <_ux_device_class_storage_write+0x140>
            /* Return an error.  */
            return(UX_ERROR);
        }

        /* Update the lba.  */
        lba += number_blocks;
 800189c:	444f      	add	r7, r9
        
        /* Update the length to remain.  */
        total_length -= transfer_length;        
 800189e:	1b64      	subs	r4, r4, r5
    while (total_length)
 80018a0:	b3bc      	cbz	r4, 8001912 <_ux_device_class_storage_write+0x174>
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 80018a2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80018a6:	d9df      	bls.n	8001868 <_ux_device_class_storage_write+0xca>
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 80018a8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80018ac:	e7dd      	b.n	800186a <_ux_device_class_storage_write+0xcc>
            _ux_device_stack_endpoint_stall(endpoint_out);
 80018ae:	4650      	mov	r0, sl
 80018b0:	f000 ff88 	bl	80027c4 <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x02;
 80018b4:	0132      	lsls	r2, r6, #4
 80018b6:	1b92      	subs	r2, r2, r6
 80018b8:	0093      	lsls	r3, r2, #2
 80018ba:	4443      	add	r3, r8
 80018bc:	2202      	movs	r2, #2
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x54;
 80018c2:	2254      	movs	r2, #84	; 0x54
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x00;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 80018ce:	2301      	movs	r3, #1
 80018d0:	9a03      	ldr	r2, [sp, #12]
 80018d2:	4631      	mov	r1, r6
 80018d4:	4640      	mov	r0, r8
 80018d6:	f001 fc53 	bl	8003180 <_ux_device_class_storage_csw_send>
            return(UX_ERROR);
 80018da:	20ff      	movs	r0, #255	; 0xff
 80018dc:	e01f      	b.n	800191e <_ux_device_class_storage_write+0x180>
            _ux_device_stack_endpoint_stall(endpoint_out);
 80018de:	4650      	mov	r0, sl
 80018e0:	f000 ff70 	bl	80027c4 <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 80018e4:	9a05      	ldr	r2, [sp, #20]
 80018e6:	0131      	lsls	r1, r6, #4
 80018e8:	1b89      	subs	r1, r1, r6
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4443      	add	r3, r8
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 80018f2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80018f6:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 80018fa:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80018fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8001902:	2301      	movs	r3, #1
 8001904:	9a03      	ldr	r2, [sp, #12]
 8001906:	4631      	mov	r1, r6
 8001908:	4640      	mov	r0, r8
 800190a:	f001 fc39 	bl	8003180 <_ux_device_class_storage_csw_send>
            return(UX_ERROR);
 800190e:	20ff      	movs	r0, #255	; 0xff
 8001910:	e005      	b.n	800191e <_ux_device_class_storage_write+0x180>
    }

    /* Now we return a CSW with success.  */
    status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8001912:	2300      	movs	r3, #0
 8001914:	9a03      	ldr	r2, [sp, #12]
 8001916:	4631      	mov	r1, r6
 8001918:	4640      	mov	r0, r8
 800191a:	f001 fc31 	bl	8003180 <_ux_device_class_storage_csw_send>
                                    
    /* Return completion status.  */
    return(status);
}
 800191e:	b007      	add	sp, #28
 8001920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001924 <_ux_dcd_stm32_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	4606      	mov	r6, r0
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <_ux_dcd_stm32_initialize+0x1e8>)
 800192a:	681d      	ldr	r5, [r3, #0]

	/* The controller initialized here is of STM32 type. */
	dcd->ux_slave_dcd_controller_type = UX_DCD_STM32_SLAVE_CONTROLLER;
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	626b      	str	r3, [r5, #36]	; 0x24

	/* Allocate memory for this STM32 DCD instance. */
	UX_DCD_STM32* dcd_stm32 = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8001930:	229c      	movs	r2, #156	; 0x9c
 8001932:	2100      	movs	r1, #0
 8001934:	4608      	mov	r0, r1
 8001936:	f001 fa19 	bl	8002d6c <_ux_utility_memory_allocate>
			sizeof(UX_DCD_STM32));

	/* Check if memory was properly allocated. */
	if (dcd_stm32 == UX_NULL)
 800193a:	2800      	cmp	r0, #0
 800193c:	f000 80e3 	beq.w	8001b06 <_ux_dcd_stm32_initialize+0x1e2>
 8001940:	4604      	mov	r4, r0
		return (UX_MEMORY_INSUFFICIENT);

	/* Set the pointer to the STM32 DCD. */
	dcd->ux_slave_dcd_controller_hardware = (VOID*)dcd_stm32;
 8001942:	63e8      	str	r0, [r5, #60]	; 0x3c

	/* Save the base address of the controller. */
	dcd->ux_slave_dcd_io = dcd_io;
 8001944:	632e      	str	r6, [r5, #48]	; 0x30
	dcd_stm32->ux_dcd_stm32_base = dcd_io;
 8001946:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94

	/* Set the generic DCD owner for the STM32 DCD. */
	dcd_stm32->ux_dcd_stm32_dcd_owner = dcd;
 800194a:	6005      	str	r5, [r0, #0]

	/* Initialize the function collector for this DCD. */
	dcd->ux_slave_dcd_function = _ux_dcd_stm32_function;
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <_ux_dcd_stm32_initialize+0x1ec>)
 800194e:	63ab      	str	r3, [r5, #56]	; 0x38

	/* Reset the GINT Global Interrupt Mask register. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GAHBCFG,
 8001950:	2201      	movs	r2, #1
 8001952:	2108      	movs	r1, #8
 8001954:	f000 fa1c 	bl	8001d90 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_GAHBCFG_GINT);

	/* Check the controller. Full Speed or HighSpeed initialization. */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_FULL_SPEED)
 8001958:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800195c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001960:	f000 809f 	beq.w	8001aa2 <_ux_dcd_stm32_initialize+0x17e>
#endif
	}
	else
	{
		/* PHY Selection in HS mode. */
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8001964:	2210      	movs	r2, #16
 8001966:	210c      	movs	r1, #12
 8001968:	4620      	mov	r0, r4
 800196a:	f000 fa1c 	bl	8001da6 <_ux_dcd_stm32_register_set>
				UX_DCD_STM32_OTG_FS_GUSBCFG_ULPI_UTMI_SEL);
	}

	/* Spec says wait for 50 cycles. */
	_ux_dcd_stm32_delay(50);
 800196e:	2032      	movs	r0, #50	; 0x32
 8001970:	f001 ffd5 	bl	800391e <_ux_dcd_stm32_delay>

	/* Wait for AHB master Idle State. */
	do
	{
		/* Spec says wait for 5 cycles. */
		_ux_dcd_stm32_delay(5);
 8001974:	2005      	movs	r0, #5
 8001976:	f001 ffd2 	bl	800391e <_ux_dcd_stm32_delay>

		/* Read the RST Control register. */
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 800197a:	2110      	movs	r1, #16
 800197c:	4620      	mov	r0, r4
 800197e:	f000 fa0e 	bl	8001d9e <_ux_dcd_stm32_register_read>
	} while ((stm32_register & UX_DCD_STM32_OTG_FS_GRSTCTL_AHBIDL) == 0);
 8001982:	2800      	cmp	r0, #0
 8001984:	daf6      	bge.n	8001974 <_ux_dcd_stm32_initialize+0x50>

	/* Perform the core soft reset. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL,
 8001986:	2201      	movs	r2, #1
 8001988:	2110      	movs	r1, #16
 800198a:	4620      	mov	r0, r4
 800198c:	f000 fa0b 	bl	8001da6 <_ux_dcd_stm32_register_set>

	/* Wait for Soft Reset to be completed. */
	do
	{
		/* Read the RST Control register. */
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 8001990:	2110      	movs	r1, #16
 8001992:	4620      	mov	r0, r4
 8001994:	f000 fa03 	bl	8001d9e <_ux_dcd_stm32_register_read>
	} while (stm32_register & UX_DCD_STM32_OTG_FS_GRSTCTL_CSRST);
 8001998:	f010 0f01 	tst.w	r0, #1
 800199c:	d1f8      	bne.n	8001990 <_ux_dcd_stm32_initialize+0x6c>

	/* Spec says wait for 10 cycles. */
	_ux_dcd_stm32_delay(10);
 800199e:	200a      	movs	r0, #10
 80019a0:	f001 ffbd 	bl	800391e <_ux_dcd_stm32_delay>

	/* Set the controller to device mode. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a8:	210c      	movs	r1, #12
 80019aa:	4620      	mov	r0, r4
 80019ac:	f000 f9fb 	bl	8001da6 <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GUSBCFG_FDMOD);

	/* Spec says wait for 50 cycles. */
	_ux_dcd_stm32_delay(50);
 80019b0:	2032      	movs	r0, #50	; 0x32
 80019b2:	f001 ffb4 	bl	800391e <_ux_dcd_stm32_delay>

	/*--------------------------------------------------------------------------------------------*/

	/* Check the controller. Full Speed or HighSpeed initialization. */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_FULL_SPEED)
 80019b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80019ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019be:	d07c      	beq.n	8001aba <_ux_dcd_stm32_initialize+0x196>
		/* Set the PHY speed to full speed. */
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
				UX_DCD_STM32_OTG_FS_DCFG_DSPD_FULL_SPEED);

	/* Set the turnaround time. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 80019c0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80019c4:	210c      	movs	r1, #12
 80019c6:	4620      	mov	r0, r4
 80019c8:	f000 f9e2 	bl	8001d90 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_GUSBCFG_TRDT_MASK);
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 80019cc:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80019d0:	210c      	movs	r1, #12
 80019d2:	4620      	mov	r0, r4
 80019d4:	f000 f9e7 	bl	8001da6 <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GUSBCFG_TRDT_8);

	/* Restart the PHY clock. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_PCGCCTL, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80019de:	4620      	mov	r0, r4
 80019e0:	f000 f9e7 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Set the Device default address to 0 and the Periodic Frame interval to 80%. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 80019e4:	f641 72f0 	movw	r2, #8176	; 0x1ff0
 80019e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ec:	4620      	mov	r0, r4
 80019ee:	f000 f9cf 	bl	8001d90 <_ux_dcd_stm32_register_clear>
			(UX_DCD_STM32_OTG_FS_DCFG_PFVIL_MASK | UX_DCD_STM32_OTG_FS_DCFG_DAD_MASK));

	/* Set the RX FIFO. Size. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRXFSIZ, UX_DCD_STM32_RX_FIFO_SIZE);
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	2124      	movs	r1, #36	; 0x24
 80019f6:	4620      	mov	r0, r4
 80019f8:	f000 f9db 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Set the fifo address. */
	ULONG fifo_address = UX_DCD_STM32_RX_FIFO_SIZE;

	/* Set the NP TX FIFO. Size. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GNPTXFSIZ, (fifo_address |
 80019fc:	4a45      	ldr	r2, [pc, #276]	; (8001b14 <_ux_dcd_stm32_initialize+0x1f0>)
 80019fe:	2128      	movs	r1, #40	; 0x28
 8001a00:	4620      	mov	r0, r4
 8001a02:	f000 f9d6 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Adjust the fifo address. */
	fifo_address += UX_DCD_STM32_NP_TX_FIFO_SIZE;

	/* We need to setup the IN FIFOs. Check the controller. Full-Speed or High-Speed initialization. */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_HIGH_SPEED)
 8001a06:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <_ux_dcd_stm32_initialize+0x1f4>)
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d05b      	beq.n	8001ac8 <_ux_dcd_stm32_initialize+0x1a4>
	else
	{
		/* For OTG_FS, the maximum amount of RAM we have for FIFOs is 1.25kb. */

		/* Set the values for the IN Fifos (3 generic IN Fifos). */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF,
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <_ux_dcd_stm32_initialize+0x1f8>)
 8001a12:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001a16:	4620      	mov	r0, r4
 8001a18:	f000 f9cb 	bl	8001db2 <_ux_dcd_stm32_register_write>
				(fifo_address | (UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS
								<< UX_DCD_STM32_OTG_FS_GNPTXFSIZ_NPTXFSD_SHIFT)));

		/* Adjust the fifo address. */
		fifo_address += UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS;
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 4,
 8001a1c:	4a40      	ldr	r2, [pc, #256]	; (8001b20 <_ux_dcd_stm32_initialize+0x1fc>)
 8001a1e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001a22:	4620      	mov	r0, r4
 8001a24:	f000 f9c5 	bl	8001db2 <_ux_dcd_stm32_register_write>
				(fifo_address | (UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS
								<< UX_DCD_STM32_OTG_FS_GNPTXFSIZ_NPTXFSD_SHIFT)));

		/* Adjust the fifo address. */
		fifo_address += UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS;
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 8,
 8001a28:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <_ux_dcd_stm32_initialize+0x200>)
 8001a2a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f000 f9bf 	bl	8001db2 <_ux_dcd_stm32_register_write>
	}

	/*--------------------------------------------------------------------------------------------*/

	/* Clear DIEPMSK and DOEPMSK. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPMSK, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f000 f9b9 	bl	8001db2 <_ux_dcd_stm32_register_write>
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPMSK, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f640 0114 	movw	r1, #2068	; 0x814
 8001a46:	4620      	mov	r0, r4
 8001a48:	f000 f9b3 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Clear all pending interrupts on endpoint. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINT, 0xFFFFFFFF);
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	f640 0118 	movw	r1, #2072	; 0x818
 8001a54:	4620      	mov	r0, r4
 8001a56:	f000 f9ac 	bl	8001db2 <_ux_dcd_stm32_register_write>
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f640 011c 	movw	r1, #2076	; 0x81c
 8001a60:	4620      	mov	r0, r4
 8001a62:	f000 f9a6 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Disable all interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2118      	movs	r1, #24
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f000 f9a1 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Clear all pending interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS, 0xFFFFFFFF);
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	2114      	movs	r1, #20
 8001a76:	4620      	mov	r0, r4
 8001a78:	f000 f99b 	bl	8001db2 <_ux_dcd_stm32_register_write>

	/* Enable interrupts for the device mode only. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <_ux_dcd_stm32_initialize+0x204>)
 8001a7e:	2118      	movs	r1, #24
 8001a80:	4620      	mov	r0, r4
 8001a82:	f000 f990 	bl	8001da6 <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GINTMSK_ENUMDNEM |
			UX_DCD_STM32_OTG_FS_GINTMSK_IEPINTM |
			UX_DCD_STM32_OTG_FS_GINTMSK_OEPINTM);

	/* Set the state of the controller to OPERATIONAL now. */
	dcd->ux_slave_dcd_status = UX_DCD_STATUS_OPERATIONAL;
 8001a86:	2201      	movs	r2, #1
 8001a88:	622a      	str	r2, [r5, #32]

	/* Set the GINT Global Interrupt Mask register. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GAHBCFG,
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 f98a 	bl	8001da6 <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GAHBCFG_GINT);

	/* Clear soft disconnect bit. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCTL,
 8001a92:	2202      	movs	r2, #2
 8001a94:	f640 0104 	movw	r1, #2052	; 0x804
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f000 f979 	bl	8001d90 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_DCTL_SDIS);

	/* Return successful completion. */
	return (UX_SUCCESS);
 8001a9e:	2000      	movs	r0, #0
}
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	210c      	movs	r1, #12
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f000 f97d 	bl	8001da6 <_ux_dcd_stm32_register_set>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GCCFG,
 8001aac:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001ab0:	2138      	movs	r1, #56	; 0x38
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f000 f977 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001ab8:	e759      	b.n	800196e <_ux_dcd_stm32_initialize+0x4a>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 8001aba:	2203      	movs	r2, #3
 8001abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 f970 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001ac6:	e77b      	b.n	80019c0 <_ux_dcd_stm32_initialize+0x9c>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF,
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <_ux_dcd_stm32_initialize+0x208>)
 8001aca:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f000 f96f 	bl	8001db2 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 4,
 8001ad4:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <_ux_dcd_stm32_initialize+0x20c>)
 8001ad6:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001ada:	4620      	mov	r0, r4
 8001adc:	f000 f969 	bl	8001db2 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 8,
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_ux_dcd_stm32_initialize+0x210>)
 8001ae2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f000 f963 	bl	8001db2 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 12,
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_ux_dcd_stm32_initialize+0x214>)
 8001aee:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001af2:	4620      	mov	r0, r4
 8001af4:	f000 f95d 	bl	8001db2 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 16,
 8001af8:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <_ux_dcd_stm32_initialize+0x218>)
 8001afa:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001afe:	4620      	mov	r0, r4
 8001b00:	f000 f957 	bl	8001db2 <_ux_dcd_stm32_register_write>
 8001b04:	e796      	b.n	8001a34 <_ux_dcd_stm32_initialize+0x110>
		return (UX_MEMORY_INSUFFICIENT);
 8001b06:	2012      	movs	r0, #18
 8001b08:	e7ca      	b.n	8001aa0 <_ux_dcd_stm32_initialize+0x17c>
 8001b0a:	bf00      	nop
 8001b0c:	20002b80 	.word	0x20002b80
 8001b10:	08003a35 	.word	0x08003a35
 8001b14:	00600080 	.word	0x00600080
 8001b18:	40040000 	.word	0x40040000
 8001b1c:	002000e0 	.word	0x002000e0
 8001b20:	00200100 	.word	0x00200100
 8001b24:	00200120 	.word	0x00200120
 8001b28:	a00c3810 	.word	0xa00c3810
 8001b2c:	006000e0 	.word	0x006000e0
 8001b30:	00600140 	.word	0x00600140
 8001b34:	006001a0 	.word	0x006001a0
 8001b38:	00600200 	.word	0x00600200
 8001b3c:	00600260 	.word	0x00600260

08001b40 <_ux_dcd_stm32_interrupt_handler>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_interrupt_handler(VOID)
{
 8001b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8001b44:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8001b46:	681d      	ldr	r5, [r3, #0]

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8001b48:	6bee      	ldr	r6, [r5, #60]	; 0x3c
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/*------------------------------- Global USB interrupt status --------------------------------*/

	/* Read the interrupt status register from the controller. */
	ULONG stm32_pending_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 8001b4a:	2114      	movs	r1, #20
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f000 f926 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8001b52:	4604      	mov	r4, r0
			UX_DCD_STM32_OTG_FS_GINTSTS);

	/* Mask only with the interrupts we have programmed. */
	ULONG stm32_masked_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 8001b54:	2118      	movs	r1, #24
 8001b56:	4630      	mov	r0, r6
 8001b58:	f000 f921 	bl	8001d9e <_ux_dcd_stm32_register_read>
			UX_DCD_STM32_OTG_FS_GINTMSK);

	/* Source of interrupt must be masked. */
	stm32_pending_interrupt &= stm32_masked_interrupt;
 8001b5c:	4004      	ands	r4, r0

	/*----- see 'stm32f7xx_hal_pcd.c' -> 'void HAL_PCD_IRQHandler(PCD_HandleTypeDef* hpcd)' ------*/

	/* Check if we have a SUSPEND. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_USBSUSP)
 8001b5e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001b62:	d110      	bne.n	8001b86 <_ux_dcd_stm32_interrupt_handler+0x46>
			/* Device is reset, the behavior is the same as disconnection. */
			_ux_device_stack_disconnect();
	}

	/* Check if we have an RESUME. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_WKUINT)
 8001b64:	2c00      	cmp	r4, #0
 8001b66:	db21      	blt.n	8001bac <_ux_dcd_stm32_interrupt_handler+0x6c>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_RESUMED);
		}
	}

	/* Check the source of the interrupt. Is it Enumeration Done Interrupt (End of Bus Reset) ? */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_ENUMDNE)
 8001b68:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8001b6c:	d12d      	bne.n	8001bca <_ux_dcd_stm32_interrupt_handler+0x8a>
			device->ux_slave_device_state = UX_DEVICE_ATTACHED;
		}
	}

	/* Check the source of the interrupt. Is it RESET ? */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_USBRST)
 8001b6e:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8001b72:	d14d      	bne.n	8001c10 <_ux_dcd_stm32_interrupt_handler+0xd0>
	UX_SLAVE_ENDPOINT* endpoint;

	/* Check the source of the interrupt. Is RX FIFO non Empty interrupt ?
	 * Meaning we have received an OUT or SETUP token.
	 * Reading the FIFO will trigger a Transfer complete interrupt. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_RFXLVL)
 8001b74:	f014 0f10 	tst.w	r4, #16
 8001b78:	d158      	bne.n	8001c2c <_ux_dcd_stm32_interrupt_handler+0xec>
	ULONG endpoint_mask;
	ULONG stm32_doepint_register;
	ULONG stm32_diepint_register;

	/* Check the source of the interrupt. Is it a IN or OUT endpoint interrupt ? */
	if (stm32_pending_interrupt & (UX_DCD_STM32_OTG_FS_GINTSTS_IEPINT |
 8001b7a:	f414 2f40 	tst.w	r4, #786432	; 0xc0000
 8001b7e:	f040 809c 	bne.w	8001cba <_ux_dcd_stm32_interrupt_handler+0x17a>
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
							stm32_diepint_register);
			}
		}
	}
}
 8001b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8001b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b8a:	2114      	movs	r1, #20
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f000 f910 	bl	8001db2 <_ux_dcd_stm32_register_write>
		if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8001b92:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001b9a:	b10b      	cbz	r3, 8001ba0 <_ux_dcd_stm32_interrupt_handler+0x60>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_SUSPENDED);
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	4798      	blx	r3
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
 8001ba0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0de      	beq.n	8001b64 <_ux_dcd_stm32_interrupt_handler+0x24>
			_ux_device_stack_disconnect();
 8001ba6:	f000 fdd3 	bl	8002750 <_ux_device_stack_disconnect>
 8001baa:	e7db      	b.n	8001b64 <_ux_dcd_stm32_interrupt_handler+0x24>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8001bac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bb0:	2114      	movs	r1, #20
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 f8fd 	bl	8001db2 <_ux_dcd_stm32_register_write>
		if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8001bb8:	4b74      	ldr	r3, [pc, #464]	; (8001d8c <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0d1      	beq.n	8001b68 <_ux_dcd_stm32_interrupt_handler+0x28>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_RESUMED);
 8001bc4:	2005      	movs	r0, #5
 8001bc6:	4798      	blx	r3
 8001bc8:	e7ce      	b.n	8001b68 <_ux_dcd_stm32_interrupt_handler+0x28>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bce:	2114      	movs	r1, #20
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f000 f8ee 	bl	8001db2 <_ux_dcd_stm32_register_write>
		if (device->ux_slave_device_state != UX_DEVICE_ATTACHED
 8001bd6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	bf18      	it	ne
 8001bdc:	2b03      	cmpne	r3, #3
 8001bde:	d0c6      	beq.n	8001b6e <_ux_dcd_stm32_interrupt_handler+0x2e>
			ULONG stm32_dsts_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8001be0:	f640 0108 	movw	r1, #2056	; 0x808
 8001be4:	4630      	mov	r0, r6
 8001be6:	f000 f8da 	bl	8001d9e <_ux_dcd_stm32_register_read>
			if ((stm32_dsts_register & UX_DCD_STM32_OTG_FS_DSTS_ENUMSPD_MASK)
 8001bea:	f010 0f06 	tst.w	r0, #6
 8001bee:	d109      	bne.n	8001c04 <_ux_dcd_stm32_interrupt_handler+0xc4>
				_ux_system_slave->ux_system_slave_speed = UX_HIGH_SPEED_DEVICE;
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			_ux_dcd_stm32_initialize_complete();
 8001bfa:	f001 ff5d 	bl	8003ab8 <_ux_dcd_stm32_initialize_complete>
			device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	642b      	str	r3, [r5, #64]	; 0x40
 8001c02:	e7b4      	b.n	8001b6e <_ux_dcd_stm32_interrupt_handler+0x2e>
				_ux_system_slave->ux_system_slave_speed = UX_FULL_SPEED_DEVICE;
 8001c04:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8001c0e:	e7f4      	b.n	8001bfa <_ux_dcd_stm32_interrupt_handler+0xba>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8001c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c14:	2114      	movs	r1, #20
 8001c16:	4630      	mov	r0, r6
 8001c18:	f000 f8cb 	bl	8001db2 <_ux_dcd_stm32_register_write>
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
 8001c1c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c1e:	b913      	cbnz	r3, 8001c26 <_ux_dcd_stm32_interrupt_handler+0xe6>
		device->ux_slave_device_state = UX_DEVICE_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	642b      	str	r3, [r5, #64]	; 0x40
 8001c24:	e7a6      	b.n	8001b74 <_ux_dcd_stm32_interrupt_handler+0x34>
			_ux_device_stack_disconnect();
 8001c26:	f000 fd93 	bl	8002750 <_ux_device_stack_disconnect>
 8001c2a:	e7f9      	b.n	8001c20 <_ux_dcd_stm32_interrupt_handler+0xe0>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	2114      	movs	r1, #20
 8001c30:	4630      	mov	r0, r6
 8001c32:	f000 f8be 	bl	8001db2 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8001c36:	2210      	movs	r2, #16
 8001c38:	2118      	movs	r1, #24
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f000 f8a8 	bl	8001d90 <_ux_dcd_stm32_register_clear>
		ULONG stm32_grxstp_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8001c40:	2120      	movs	r1, #32
 8001c42:	4630      	mov	r0, r6
 8001c44:	f000 f8ab 	bl	8001d9e <_ux_dcd_stm32_register_read>
		endpoint_index = stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_EPNUM_MASK;
 8001c48:	f000 050f 	and.w	r5, r0, #15
		endpoint = ed->ux_dcd_stm32_ed_endpoint;
 8001c4c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001c50:	0093      	lsls	r3, r2, #2
 8001c52:	4433      	add	r3, r6
 8001c54:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
		ULONG transfer_status = (stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_PKTSTS_MASK)
 8001c58:	f3c0 4343 	ubfx	r3, r0, #17, #4
		ULONG transfer_length = (stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_BCNT_MASK)
 8001c5c:	f3c0 170a 	ubfx	r7, r0, #4, #11
		switch (transfer_status)
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d013      	beq.n	8001c8c <_ux_dcd_stm32_interrupt_handler+0x14c>
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d10b      	bne.n	8001c80 <_ux_dcd_stm32_interrupt_handler+0x140>
				_ux_dcd_stm32_fifo_read(dcd_stm32, endpoint_index,
 8001c68:	2308      	movs	r3, #8
 8001c6a:	f10a 0284 	add.w	r2, sl, #132	; 0x84
 8001c6e:	4629      	mov	r1, r5
 8001c70:	4630      	mov	r0, r6
 8001c72:	f001 fea3 	bl	80039bc <_ux_dcd_stm32_fifo_read>
				ed->ux_dcd_stm32_ed_payload_length = transfer_length;
 8001c76:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8001c7a:	00ab      	lsls	r3, r5, #2
 8001c7c:	4433      	add	r3, r6
 8001c7e:	611f      	str	r7, [r3, #16]
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8001c80:	2210      	movs	r2, #16
 8001c82:	2118      	movs	r1, #24
 8001c84:	4630      	mov	r0, r6
 8001c86:	f000 f88e 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001c8a:	e776      	b.n	8001b7a <_ux_dcd_stm32_interrupt_handler+0x3a>
				_ux_dcd_stm32_fifo_read(dcd_stm32, endpoint_index,
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 8001c92:	4629      	mov	r1, r5
 8001c94:	4630      	mov	r0, r6
 8001c96:	f001 fe91 	bl	80039bc <_ux_dcd_stm32_fifo_read>
				transfer_request->ux_slave_transfer_request_current_data_pointer += transfer_length;
 8001c9a:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8001c9e:	443b      	add	r3, r7
 8001ca0:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
				transfer_request->ux_slave_transfer_request_actual_length += transfer_length;
 8001ca4:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8001ca8:	443b      	add	r3, r7
 8001caa:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
				ed->ux_dcd_stm32_ed_payload_length = transfer_length;
 8001cae:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8001cb2:	00ab      	lsls	r3, r5, #2
 8001cb4:	4433      	add	r3, r6
 8001cb6:	611f      	str	r7, [r3, #16]
				break;
 8001cb8:	e7e2      	b.n	8001c80 <_ux_dcd_stm32_interrupt_handler+0x140>
		ULONG stm32_daint_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 8001cba:	f640 0118 	movw	r1, #2072	; 0x818
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f000 f86d 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8001cc4:	4607      	mov	r7, r0
		for (endpoint_mask = 0; endpoint_mask < 32; endpoint_mask++)
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	e028      	b.n	8001d1c <_ux_dcd_stm32_interrupt_handler+0x1dc>
					ed = &dcd_stm32->ux_dcd_stm32_ed[endpoint_index];
 8001cca:	00e2      	lsls	r2, r4, #3
 8001ccc:	4422      	add	r2, r4
 8001cce:	0093      	lsls	r3, r2, #2
 8001cd0:	4433      	add	r3, r6
 8001cd2:	f103 0a04 	add.w	sl, r3, #4
					ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_IDLE;
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 8001cda:	0161      	lsls	r1, r4, #5
					stm32_diepint_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8001cdc:	f601 1108 	addw	r1, r1, #2312	; 0x908
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f000 f85c 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8001ce6:	4681      	mov	r9, r0
					if (stm32_diepint_register & UX_DCD_STM32_OTG_FS_DIEPINT_XFRC)
 8001ce8:	f010 0f01 	tst.w	r0, #1
 8001cec:	d043      	beq.n	8001d76 <_ux_dcd_stm32_interrupt_handler+0x236>
						ed->ux_dcd_stm32_ed_transfer_status =
 8001cee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001cf2:	0093      	lsls	r3, r2, #2
 8001cf4:	4433      	add	r3, r6
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	615a      	str	r2, [r3, #20]
				endpoint_index = endpoint_mask;
 8001cfa:	4625      	mov	r5, r4
				endpoint = ed->ux_dcd_stm32_ed_endpoint;
 8001cfc:	f8da 1020 	ldr.w	r1, [sl, #32]
				_ux_dcd_stm32_transfer_callback(dcd_stm32, transfer_request);
 8001d00:	3130      	adds	r1, #48	; 0x30
 8001d02:	4630      	mov	r0, r6
 8001d04:	f000 f859 	bl	8001dba <_ux_dcd_stm32_transfer_callback>
				if (endpoint_mask >= 16)
 8001d08:	2c0f      	cmp	r4, #15
 8001d0a:	d936      	bls.n	8001d7a <_ux_dcd_stm32_interrupt_handler+0x23a>
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 8001d0c:	0169      	lsls	r1, r5, #5
					_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPINT +
 8001d0e:	4642      	mov	r2, r8
 8001d10:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 8001d14:	4630      	mov	r0, r6
 8001d16:	f000 f84c 	bl	8001db2 <_ux_dcd_stm32_register_write>
		for (endpoint_mask = 0; endpoint_mask < 32; endpoint_mask++)
 8001d1a:	3401      	adds	r4, #1
 8001d1c:	2c1f      	cmp	r4, #31
 8001d1e:	f63f af30 	bhi.w	8001b82 <_ux_dcd_stm32_interrupt_handler+0x42>
			if (stm32_daint_interrupt & (1 << endpoint_mask))
 8001d22:	2301      	movs	r3, #1
 8001d24:	40a3      	lsls	r3, r4
 8001d26:	423b      	tst	r3, r7
 8001d28:	d0f7      	beq.n	8001d1a <_ux_dcd_stm32_interrupt_handler+0x1da>
				if (endpoint_mask >= 16)
 8001d2a:	2c0f      	cmp	r4, #15
 8001d2c:	d9cd      	bls.n	8001cca <_ux_dcd_stm32_interrupt_handler+0x18a>
					endpoint_index -= 16;
 8001d2e:	f1a4 0510 	sub.w	r5, r4, #16
					ed = &dcd_stm32->ux_dcd_stm32_ed[endpoint_index];
 8001d32:	00ea      	lsls	r2, r5, #3
 8001d34:	442a      	add	r2, r5
 8001d36:	0093      	lsls	r3, r2, #2
 8001d38:	4433      	add	r3, r6
 8001d3a:	f103 0a04 	add.w	sl, r3, #4
					ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_IDLE;
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 8001d42:	0169      	lsls	r1, r5, #5
					stm32_doepint_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8001d44:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f000 f828 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8001d4e:	4680      	mov	r8, r0
					if (stm32_doepint_register & UX_DCD_STM32_OTG_FS_DOEPINT_STUP)
 8001d50:	f010 0f08 	tst.w	r0, #8
 8001d54:	d005      	beq.n	8001d62 <_ux_dcd_stm32_interrupt_handler+0x222>
						ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_SETUP;
 8001d56:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001d5a:	0093      	lsls	r3, r2, #2
 8001d5c:	4433      	add	r3, r6
 8001d5e:	2201      	movs	r2, #1
 8001d60:	615a      	str	r2, [r3, #20]
					if (stm32_doepint_register & UX_DCD_STM32_OTG_FS_DOEPINT_XFRC)
 8001d62:	f018 0f01 	tst.w	r8, #1
 8001d66:	d0c9      	beq.n	8001cfc <_ux_dcd_stm32_interrupt_handler+0x1bc>
						ed->ux_dcd_stm32_ed_transfer_status =
 8001d68:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001d6c:	0093      	lsls	r3, r2, #2
 8001d6e:	4433      	add	r3, r6
 8001d70:	2203      	movs	r2, #3
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	e7c2      	b.n	8001cfc <_ux_dcd_stm32_interrupt_handler+0x1bc>
				endpoint_index = endpoint_mask;
 8001d76:	4625      	mov	r5, r4
 8001d78:	e7c0      	b.n	8001cfc <_ux_dcd_stm32_interrupt_handler+0x1bc>
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 8001d7a:	0169      	lsls	r1, r5, #5
					_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPINT +
 8001d7c:	464a      	mov	r2, r9
 8001d7e:	f601 1108 	addw	r1, r1, #2312	; 0x908
 8001d82:	4630      	mov	r0, r6
 8001d84:	f000 f815 	bl	8001db2 <_ux_dcd_stm32_register_write>
 8001d88:	e7c7      	b.n	8001d1a <_ux_dcd_stm32_interrupt_handler+0x1da>
 8001d8a:	bf00      	nop
 8001d8c:	20002b80 	.word	0x20002b80

08001d90 <_ux_dcd_stm32_register_clear>:
/*                                                                        */
/**************************************************************************/
VOID  _ux_dcd_stm32_register_clear(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register, ULONG value)
{
    
    *((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register)) &=~ value;
 8001d90:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8001d94:	5843      	ldr	r3, [r0, r1]
 8001d96:	ea23 0202 	bic.w	r2, r3, r2
 8001d9a:	5042      	str	r2, [r0, r1]
    return;
}
 8001d9c:	4770      	bx	lr

08001d9e <_ux_dcd_stm32_register_read>:
/*                                                                        */
/**************************************************************************/
ULONG  _ux_dcd_stm32_register_read(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register)
{
        
    return((ULONG)(*((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register))));
 8001d9e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
}
 8001da2:	5858      	ldr	r0, [r3, r1]
 8001da4:	4770      	bx	lr

08001da6 <_ux_dcd_stm32_register_set>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_register_set(UX_DCD_STM32* dcd_stm32, ULONG stm32_register, ULONG value)
{
	*((ULONG*)(dcd_stm32->ux_dcd_stm32_base + stm32_register)) |= value;
 8001da6:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8001daa:	5843      	ldr	r3, [r0, r1]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	5042      	str	r2, [r0, r1]
	return;
}
 8001db0:	4770      	bx	lr

08001db2 <_ux_dcd_stm32_register_write>:
/*                                                                        */
/**************************************************************************/
VOID  _ux_dcd_stm32_register_write(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register, ULONG value)
{
    
    *((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register)) =  value;
 8001db2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8001db6:	505a      	str	r2, [r3, r1]
    return;
}
 8001db8:	4770      	bx	lr

08001dba <_ux_dcd_stm32_transfer_callback>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_transfer_callback(UX_DCD_STM32* dcd_stm32, UX_SLAVE_TRANSFER* transfer_request)
{
 8001dba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	460c      	mov	r4, r1
	/* Get the pointer to the logical endpoint from the transfer request. */
	UX_SLAVE_ENDPOINT* endpoint = transfer_request->ux_slave_transfer_request_endpoint;
 8001dc4:	688d      	ldr	r5, [r1, #8]

	/* Get the endpoint index. */
	ULONG stm32_endpoint_index = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 8001dc6:	696b      	ldr	r3, [r5, #20]
			& ~UX_ENDPOINT_DIRECTION;

	/* Get the STM32 endpoint. */
	UX_DCD_STM32_ED* ed = (UX_DCD_STM32_ED*)endpoint->ux_slave_endpoint_ed;
 8001dc8:	68ae      	ldr	r6, [r5, #8]
	ULONG fifo_length;
	ULONG endpoint_size;
	ULONG endpoint_control;

	/* Endpoint 0 is different. */
	if (stm32_endpoint_index == 0)
 8001dca:	f033 0880 	bics.w	r8, r3, #128	; 0x80
 8001dce:	f040 8111 	bne.w	8001ff4 <_ux_dcd_stm32_transfer_callback+0x23a>
	{
		/* Check if we have received a SETUP command. */
		if (ed->ux_dcd_stm32_ed_transfer_status == UX_DCD_STM32_ED_TRANSFER_STATUS_SETUP)
 8001dd2:	6933      	ldr	r3, [r6, #16]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d01c      	beq.n	8001e12 <_ux_dcd_stm32_transfer_callback+0x58>
					UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA | UX_DCD_STM32_OTG_FS_DOEPCTL_CNAK);
		}
		else
		{
			/* Check if we have received something on endpoint 0 during data phase . */
			if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8001dd8:	6873      	ldr	r3, [r6, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	f000 8086 	beq.w	8001eec <_ux_dcd_stm32_transfer_callback+0x132>
			}
			else
			{

				/* Check if we have received something on endpoint 0 during status phase . */
				if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_STATUS_RX)
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	f000 80bb 	beq.w	8001f5c <_ux_dcd_stm32_transfer_callback+0x1a2>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
				}
				else
				{
					/* Check if we need to send data again on control endpoint. */
					if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	f040 8119 	bne.w	800201e <_ux_dcd_stm32_transfer_callback+0x264>
					{
						/* Check if we have data to send. */
						if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8001dec:	69cb      	ldr	r3, [r1, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80c7 	bne.w	8001f82 <_ux_dcd_stm32_transfer_callback+0x1c8>
						{
							/* There is no data to send but we may need to send a Zero Length Packet. */
							if (transfer_request->ux_slave_transfer_request_force_zlp == UX_TRUE)
 8001df4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	f000 80b3 	beq.w	8001f62 <_ux_dcd_stm32_transfer_callback+0x1a8>
								transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
							}
							else
							{
								/* Set the completion code to no error. */
								transfer_request->ux_slave_transfer_request_completion_code =
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	620b      	str	r3, [r1, #32]
										UX_SUCCESS;

								/* The transfer is completed. */
								transfer_request->ux_slave_transfer_request_status =
 8001e00:	2302      	movs	r3, #2
 8001e02:	600b      	str	r3, [r1, #0]
										UX_TRANSFER_STATUS_COMPLETED;

								/* We are using a Control endpoint, if there is a callback,
								 * invoke it. We are still under ISR. */
								if (transfer_request->ux_slave_transfer_request_completion_function)
 8001e04:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001e06:	b10b      	cbz	r3, 8001e0c <_ux_dcd_stm32_transfer_callback+0x52>
									transfer_request->ux_slave_transfer_request_completion_function(
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4798      	blx	r3
											transfer_request);

								/* State is now STATUS RX. */
								ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	6073      	str	r3, [r6, #4]
 8001e10:	e105      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
			_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2120      	movs	r1, #32
 8001e16:	f001 fdb6 	bl	8003986 <_ux_dcd_stm32_fifo_flush>
			transfer_request->ux_slave_transfer_request_actual_length = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61a3      	str	r3, [r4, #24]
			transfer_request->ux_slave_transfer_request_type = UX_TRANSFER_PHASE_SETUP;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	6062      	str	r2, [r4, #4]
			transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8001e22:	6223      	str	r3, [r4, #32]
			ed->ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_STALLED;
 8001e24:	6833      	ldr	r3, [r6, #0]
 8001e26:	f023 0304 	bic.w	r3, r3, #4
 8001e2a:	6033      	str	r3, [r6, #0]
			if (*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8001e2c:	f994 3054 	ldrsb.w	r3, [r4, #84]	; 0x54
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db1d      	blt.n	8001e70 <_ux_dcd_stm32_transfer_callback+0xb6>
				ed->ux_dcd_stm32_ed_direction = UX_ENDPOINT_OUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61f3      	str	r3, [r6, #28]
				if (*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8001e38:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8001e3c:	b913      	cbnz	r3, 8001e44 <_ux_dcd_stm32_transfer_callback+0x8a>
						*(transfer_request->ux_slave_transfer_request_setup + 7) == 0)
 8001e3e:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
				if (*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8001e42:	b1db      	cbz	r3, 8001e7c <_ux_dcd_stm32_transfer_callback+0xc2>
			if (((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0) &&
 8001e44:	f994 3054 	ldrsb.w	r3, [r4, #84]	; 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db05      	blt.n	8001e58 <_ux_dcd_stm32_transfer_callback+0x9e>
					*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8001e4c:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
			if (((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0) &&
 8001e50:	b912      	cbnz	r2, 8001e58 <_ux_dcd_stm32_transfer_callback+0x9e>
					*(transfer_request->ux_slave_transfer_request_setup + 7) == 0)
 8001e52:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
					*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8001e56:	b1aa      	cbz	r2, 8001e84 <_ux_dcd_stm32_transfer_callback+0xca>
				if ((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0)
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da29      	bge.n	8001eb0 <_ux_dcd_stm32_transfer_callback+0xf6>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	6073      	str	r3, [r6, #4]
			_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8001e60:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8001e64:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8001e68:	4638      	mov	r0, r7
 8001e6a:	f7ff ff9c 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001e6e:	e0d6      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
				ed->ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	61f3      	str	r3, [r6, #28]
				_ux_device_stack_control_request_process(transfer_request);
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 f9b9 	bl	80021ec <_ux_device_stack_control_request_process>
 8001e7a:	e7e3      	b.n	8001e44 <_ux_dcd_stm32_transfer_callback+0x8a>
					_ux_device_stack_control_request_process(transfer_request);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 f9b5 	bl	80021ec <_ux_device_stack_control_request_process>
 8001e82:	e7df      	b.n	8001e44 <_ux_dcd_stm32_transfer_callback+0x8a>
				transfer_request->ux_slave_transfer_request_in_transfer_length = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61e3      	str	r3, [r4, #28]
				transfer_request->ux_slave_transfer_request_requested_length = 0;
 8001e88:	6163      	str	r3, [r4, #20]
				transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	6263      	str	r3, [r4, #36]	; 0x24
				ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	6073      	str	r3, [r6, #4]
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 8001e92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e96:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	f7ff ff89 	bl	8001db2 <_ux_dcd_stm32_register_write>
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8001ea0:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8001ea4:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	f7ff ff7c 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001eae:	e7d7      	b.n	8001e60 <_ux_dcd_stm32_transfer_callback+0xa6>
							_ux_utility_short_get(
 8001eb0:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8001eb4:	f001 f8ca 	bl	800304c <_ux_utility_short_get>
					transfer_request->ux_slave_transfer_request_requested_length =
 8001eb8:	6160      	str	r0, [r4, #20]
					if (transfer_request->ux_slave_transfer_request_requested_length
 8001eba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001ebe:	d80e      	bhi.n	8001ede <_ux_dcd_stm32_transfer_callback+0x124>
						transfer_request->ux_slave_transfer_request_actual_length = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61a3      	str	r3, [r4, #24]
								transfer_request->ux_slave_transfer_request_data_pointer;
 8001ec4:	68e3      	ldr	r3, [r4, #12]
						transfer_request->ux_slave_transfer_request_current_data_pointer =
 8001ec6:	6123      	str	r3, [r4, #16]
						endpoint_size = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8001ec8:	69ea      	ldr	r2, [r5, #28]
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ,
 8001eca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ece:	f44f 6131 	mov.w	r1, #2832	; 0xb10
 8001ed2:	4638      	mov	r0, r7
 8001ed4:	f7ff ff6d 	bl	8001db2 <_ux_dcd_stm32_register_write>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_RX;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	6073      	str	r3, [r6, #4]
 8001edc:	e7c0      	b.n	8001e60 <_ux_dcd_stm32_transfer_callback+0xa6>
						_ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8001ede:	4629      	mov	r1, r5
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	f001 fd2b 	bl	800393c <_ux_dcd_stm32_endpoint_stall>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6073      	str	r3, [r6, #4]
						return (UX_SUCCESS);
 8001eea:	e098      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
				fifo_length = ed->ux_dcd_stm32_ed_payload_length;
 8001eec:	68f1      	ldr	r1, [r6, #12]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8001eee:	69a2      	ldr	r2, [r4, #24]
						transfer_request->ux_slave_transfer_request_requested_length)
 8001ef0:	6963      	ldr	r3, [r4, #20]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d82a      	bhi.n	8001f4c <_ux_dcd_stm32_transfer_callback+0x192>
					if ((transfer_request->ux_slave_transfer_request_actual_length ==
 8001ef6:	d002      	beq.n	8001efe <_ux_dcd_stm32_transfer_callback+0x144>
							(fifo_length != endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize))
 8001ef8:	69ea      	ldr	r2, [r5, #28]
							transfer_request->ux_slave_transfer_request_requested_length) ||
 8001efa:	428a      	cmp	r2, r1
 8001efc:	d018      	beq.n	8001f30 <_ux_dcd_stm32_transfer_callback+0x176>
						transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8001efe:	2500      	movs	r5, #0
 8001f00:	6225      	str	r5, [r4, #32]
						_ux_device_stack_control_request_process(transfer_request);
 8001f02:	4620      	mov	r0, r4
 8001f04:	f000 f972 	bl	80021ec <_ux_device_stack_control_request_process>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	6073      	str	r3, [r6, #4]
						transfer_request->ux_slave_transfer_request_in_transfer_length = 0;
 8001f0c:	61e5      	str	r5, [r4, #28]
						transfer_request->ux_slave_transfer_request_requested_length = 0;
 8001f0e:	6165      	str	r5, [r4, #20]
						transfer_request->ux_slave_transfer_request_phase =
 8001f10:	6263      	str	r3, [r4, #36]	; 0x24
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 8001f12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f16:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8001f1a:	4638      	mov	r0, r7
 8001f1c:	f7ff ff49 	bl	8001db2 <_ux_dcd_stm32_register_write>
						_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8001f20:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8001f24:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001f28:	4638      	mov	r0, r7
 8001f2a:	f7ff ff3c 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001f2e:	e076      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ,
 8001f30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f34:	f44f 6131 	mov.w	r1, #2832	; 0xb10
 8001f38:	f7ff ff3b 	bl	8001db2 <_ux_dcd_stm32_register_write>
						_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8001f3c:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8001f40:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8001f44:	4638      	mov	r0, r7
 8001f46:	f7ff ff2e 	bl	8001da6 <_ux_dcd_stm32_register_set>
 8001f4a:	e068      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
					transfer_request->ux_slave_transfer_request_completion_code =
 8001f4c:	2327      	movs	r3, #39	; 0x27
 8001f4e:	6223      	str	r3, [r4, #32]
					if (transfer_request->ux_slave_transfer_request_completion_function)
 8001f50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
						transfer_request->ux_slave_transfer_request_completion_function(
 8001f56:	4620      	mov	r0, r4
 8001f58:	4798      	blx	r3
 8001f5a:	e060      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6073      	str	r3, [r6, #4]
 8001f60:	e05d      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
								_ux_dcd_stm32_register_write(dcd_stm32,
 8001f62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f66:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8001f6a:	f7ff ff22 	bl	8001db2 <_ux_dcd_stm32_register_write>
								_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8001f6e:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8001f72:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001f76:	4638      	mov	r0, r7
 8001f78:	f7ff ff15 	bl	8001da6 <_ux_dcd_stm32_register_set>
								transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6523      	str	r3, [r4, #80]	; 0x50
 8001f80:	e04d      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
							/* Get the size of the transfer, used for a IN transaction only. */
							fifo_length =
									transfer_request->ux_slave_transfer_request_in_transfer_length;

							/* Check if the endpoint size is bigger that data requested. */
							if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8001f82:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8001f86:	4543      	cmp	r3, r8
 8001f88:	d800      	bhi.n	8001f8c <_ux_dcd_stm32_transfer_callback+0x1d2>
							fifo_length =
 8001f8a:	4698      	mov	r8, r3
								/* Adjust the transfer size. */
								fifo_length = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
							}

							/* Keep the FIFO length in the endpoint. */
							ed->ux_dcd_stm32_ed_payload_length = fifo_length;
 8001f8c:	f8c6 800c 	str.w	r8, [r6, #12]
							/* Program the transfer size. */
							endpoint_size = fifo_length;

							/* And packet counts. */
							endpoint_size |= ((fifo_length - 1
									+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 8001f90:	69eb      	ldr	r3, [r5, #28]
 8001f92:	eb03 0208 	add.w	r2, r3, r8
 8001f96:	3a01      	subs	r2, #1
 8001f98:	fbb2 f2f3 	udiv	r2, r2, r3
									endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
									<< UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;

							/* Write the size of the FIFO. */
							_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 8001f9c:	ea48 42c2 	orr.w	r2, r8, r2, lsl #19
 8001fa0:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8001fa4:	4638      	mov	r0, r7
 8001fa6:	f7ff ff04 	bl	8001db2 <_ux_dcd_stm32_register_write>
									endpoint_size);

							/* Read the content of the control register. */
							endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32,
 8001faa:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001fae:	4638      	mov	r0, r7
 8001fb0:	f7ff fef5 	bl	8001d9e <_ux_dcd_stm32_register_read>
							/* Enable the IN endpoint FIFO. */
							endpoint_control |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA
									| UX_DCD_STM32_OTG_FS_DIEPCTL_CNAK;

							/* Write the Endpoint Control register. */
							_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8001fb4:	f040 4204 	orr.w	r2, r0, #2214592512	; 0x84000000
 8001fb8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	f7ff fef8 	bl	8001db2 <_ux_dcd_stm32_register_write>
									endpoint_control);

							/* Point the FIFO buffer to the current transfer request buffer address. */
							data_pointer =
 8001fc2:	6922      	ldr	r2, [r4, #16]
									transfer_request->ux_slave_transfer_request_current_data_pointer;

							/* Adjust the data pointer. */
							transfer_request->ux_slave_transfer_request_current_data_pointer +=
 8001fc4:	eb02 0308 	add.w	r3, r2, r8
 8001fc8:	6123      	str	r3, [r4, #16]
									fifo_length;

							/* Adjust the transfer length remaining. */
							transfer_request->ux_slave_transfer_request_in_transfer_length -=
 8001fca:	69e3      	ldr	r3, [r4, #28]
 8001fcc:	eba3 0308 	sub.w	r3, r3, r8
 8001fd0:	61e3      	str	r3, [r4, #28]
									fifo_length;

							/* If this is the last packet, set data end as well. */
							if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8001fd2:	b93b      	cbnz	r3, 8001fe4 <_ux_dcd_stm32_transfer_callback+0x22a>
								/* Write to the Fifo.  Last packet. */
								_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index,
 8001fd4:	68b1      	ldr	r1, [r6, #8]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4643      	mov	r3, r8
 8001fdc:	4638      	mov	r0, r7
 8001fde:	f001 fd0b 	bl	80039f8 <_ux_dcd_stm32_fifo_write>
 8001fe2:	e01c      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
										data_pointer, fifo_length, UX_TRUE);
							else
								/* Write to the Fifo.  More packets to come. */
								_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index,
 8001fe4:	68b1      	ldr	r1, [r6, #8]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	4643      	mov	r3, r8
 8001fec:	4638      	mov	r0, r7
 8001fee:	f001 fd03 	bl	80039f8 <_ux_dcd_stm32_fifo_write>
 8001ff2:	e014      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
		}
	}
	else
	{
		/* We treat non 0 endpoints here. Look at the direction and determine if this an OUT or IN endpoint. */
		if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8001ff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ff8:	d015      	beq.n	8002026 <_ux_dcd_stm32_transfer_callback+0x26c>
		}
		else
		{
			/* Update the length of the data sent in previous transaction. */
			transfer_request->ux_slave_transfer_request_actual_length +=
					ed->ux_dcd_stm32_ed_payload_length;
 8001ffa:	68f2      	ldr	r2, [r6, #12]
			transfer_request->ux_slave_transfer_request_actual_length +=
 8001ffc:	698b      	ldr	r3, [r1, #24]
 8001ffe:	4413      	add	r3, r2
 8002000:	618b      	str	r3, [r1, #24]

			/* Check if we have data to send. */
			if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8002002:	69cb      	ldr	r3, [r1, #28]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d171      	bne.n	80020ec <_ux_dcd_stm32_transfer_callback+0x332>
			{
				/* There is no data to send but we may need to send a Zero Length Packet. */
				if (transfer_request->ux_slave_transfer_request_force_zlp == UX_TRUE)
 8002008:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800200a:	2b01      	cmp	r3, #1
 800200c:	d05b      	beq.n	80020c6 <_ux_dcd_stm32_transfer_callback+0x30c>
					transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
				}
				else
				{
					/* Set the completion code to no error. */
					transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800200e:	2300      	movs	r3, #0
 8002010:	620b      	str	r3, [r1, #32]

					/* The transfer is completed. */
					transfer_request->ux_slave_transfer_request_status =
 8002012:	4608      	mov	r0, r1
 8002014:	2302      	movs	r3, #2
 8002016:	f840 3b2c 	str.w	r3, [r0], #44
							UX_TRANSFER_STATUS_COMPLETED;

					/* Non control endpoint operation, use semaphore. */
					_ux_utility_semaphore_put(
 800201a:	f001 f813 	bl	8003044 <_ux_utility_semaphore_put>
		}
	}

	/* We are done. */
	return (UX_SUCCESS);
}
 800201e:	2000      	movs	r0, #0
 8002020:	b003      	add	sp, #12
 8002022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 8002026:	ea4f 1948 	mov.w	r9, r8, lsl #5
			ULONG stm32_register = _ux_dcd_stm32_register_read(dcd_stm32,
 800202a:	f609 3108 	addw	r1, r9, #2824	; 0xb08
 800202e:	f7ff feb6 	bl	8001d9e <_ux_dcd_stm32_register_read>
			if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPINT_XFRC)
 8002032:	f010 0f01 	tst.w	r0, #1
 8002036:	d03d      	beq.n	80020b4 <_ux_dcd_stm32_transfer_callback+0x2fa>
				fifo_length = ed->ux_dcd_stm32_ed_payload_length;
 8002038:	68f1      	ldr	r1, [r6, #12]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 800203a:	69a2      	ldr	r2, [r4, #24]
						transfer_request->ux_slave_transfer_request_requested_length)
 800203c:	6963      	ldr	r3, [r4, #20]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 800203e:	429a      	cmp	r2, r3
 8002040:	d82f      	bhi.n	80020a2 <_ux_dcd_stm32_transfer_callback+0x2e8>
					if ((transfer_request->ux_slave_transfer_request_actual_length ==
 8002042:	d002      	beq.n	800204a <_ux_dcd_stm32_transfer_callback+0x290>
							(fifo_length != endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize))
 8002044:	69ea      	ldr	r2, [r5, #28]
							transfer_request->ux_slave_transfer_request_requested_length) ||
 8002046:	428a      	cmp	r2, r1
 8002048:	d008      	beq.n	800205c <_ux_dcd_stm32_transfer_callback+0x2a2>
						transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800204a:	2300      	movs	r3, #0
 800204c:	6223      	str	r3, [r4, #32]
						transfer_request->ux_slave_transfer_request_status =
 800204e:	4620      	mov	r0, r4
 8002050:	2302      	movs	r3, #2
 8002052:	f840 3b2c 	str.w	r3, [r0], #44
						_ux_utility_semaphore_put(
 8002056:	f000 fff5 	bl	8003044 <_ux_utility_semaphore_put>
 800205a:	e7e0      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
						if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 800205c:	4293      	cmp	r3, r2
 800205e:	d900      	bls.n	8002062 <_ux_dcd_stm32_transfer_callback+0x2a8>
							fifo_length = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8002060:	4613      	mov	r3, r2
						if (fifo_length == 0)
 8002062:	b1db      	cbz	r3, 800209c <_ux_dcd_stm32_transfer_callback+0x2e2>
									+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 8002064:	4413      	add	r3, r2
 8002066:	3b01      	subs	r3, #1
 8002068:	fbb3 f3f2 	udiv	r3, r3, r2
							endpoint_size = ((fifo_length - 1
 800206c:	fb03 f202 	mul.w	r2, r3, r2
							endpoint_size |= ((fifo_length - 1
 8002070:	ea42 42c3 	orr.w	r2, r2, r3, lsl #19
						_ux_dcd_stm32_register_write(dcd_stm32,
 8002074:	f509 6131 	add.w	r1, r9, #2832	; 0xb10
 8002078:	4638      	mov	r0, r7
 800207a:	f7ff fe9a 	bl	8001db2 <_ux_dcd_stm32_register_write>
						endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32,
 800207e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8002082:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8002086:	4641      	mov	r1, r8
 8002088:	4638      	mov	r0, r7
 800208a:	f7ff fe88 	bl	8001d9e <_ux_dcd_stm32_register_read>
						_ux_dcd_stm32_register_write(dcd_stm32,
 800208e:	f040 4204 	orr.w	r2, r0, #2214592512	; 0x84000000
 8002092:	4641      	mov	r1, r8
 8002094:	4638      	mov	r0, r7
 8002096:	f7ff fe8c 	bl	8001db2 <_ux_dcd_stm32_register_write>
 800209a:	e7c0      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
							endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;
 800209c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020a0:	e7e8      	b.n	8002074 <_ux_dcd_stm32_transfer_callback+0x2ba>
					transfer_request->ux_slave_transfer_request_completion_code =
 80020a2:	2327      	movs	r3, #39	; 0x27
 80020a4:	6223      	str	r3, [r4, #32]
					transfer_request->ux_slave_transfer_request_status =
 80020a6:	4620      	mov	r0, r4
 80020a8:	2302      	movs	r3, #2
 80020aa:	f840 3b2c 	str.w	r3, [r0], #44
					_ux_utility_semaphore_put(
 80020ae:	f000 ffc9 	bl	8003044 <_ux_utility_semaphore_put>
 80020b2:	e7b4      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
				transfer_request->ux_slave_transfer_request_completion_code = UX_TRANSFER_ERROR;
 80020b4:	2323      	movs	r3, #35	; 0x23
 80020b6:	6223      	str	r3, [r4, #32]
				transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_COMPLETED;
 80020b8:	4620      	mov	r0, r4
 80020ba:	2302      	movs	r3, #2
 80020bc:	f840 3b2c 	str.w	r3, [r0], #44
				_ux_utility_semaphore_put(&transfer_request->ux_slave_transfer_request_semaphore);
 80020c0:	f000 ffc0 	bl	8003044 <_ux_utility_semaphore_put>
 80020c4:	e7ab      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
									+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 80020c6:	ea4f 1148 	mov.w	r1, r8, lsl #5
					_ux_dcd_stm32_register_write(dcd_stm32,
 80020ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020ce:	f501 6111 	add.w	r1, r1, #2320	; 0x910
 80020d2:	f7ff fe6e 	bl	8001db2 <_ux_dcd_stm32_register_write>
					_ux_dcd_stm32_register_set(dcd_stm32,
 80020d6:	f108 0148 	add.w	r1, r8, #72	; 0x48
 80020da:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 80020de:	0149      	lsls	r1, r1, #5
 80020e0:	4638      	mov	r0, r7
 80020e2:	f7ff fe60 	bl	8001da6 <_ux_dcd_stm32_register_set>
					transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	6523      	str	r3, [r4, #80]	; 0x50
 80020ea:	e798      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
						+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80020ec:	f108 0948 	add.w	r9, r8, #72	; 0x48
				ULONG endpoint_control_address = (UX_DCD_STM32_OTG_FS_DIEPCTL
 80020f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
						+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80020f4:	ea4f 1848 	mov.w	r8, r8, lsl #5
				ULONG endpoint_size_address = (UX_DCD_STM32_OTG_FS_DIEPTSIZ
 80020f8:	f508 6811 	add.w	r8, r8, #2320	; 0x910
				endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 80020fc:	4649      	mov	r1, r9
 80020fe:	f7ff fe4e 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8002102:	4683      	mov	fp, r0
				fifo_length = transfer_request->ux_slave_transfer_request_in_transfer_length;
 8002104:	69e3      	ldr	r3, [r4, #28]
				if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8002106:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 800210a:	459a      	cmp	sl, r3
 800210c:	d300      	bcc.n	8002110 <_ux_dcd_stm32_transfer_callback+0x356>
				fifo_length = transfer_request->ux_slave_transfer_request_in_transfer_length;
 800210e:	469a      	mov	sl, r3
				ed->ux_dcd_stm32_ed_payload_length = fifo_length;
 8002110:	f8c6 a00c 	str.w	sl, [r6, #12]
						+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 8002114:	69eb      	ldr	r3, [r5, #28]
 8002116:	eb03 020a 	add.w	r2, r3, sl
 800211a:	3a01      	subs	r2, #1
 800211c:	fbb2 f2f3 	udiv	r2, r2, r3
				_ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size);
 8002120:	ea4a 42c2 	orr.w	r2, sl, r2, lsl #19
 8002124:	4641      	mov	r1, r8
 8002126:	4638      	mov	r0, r7
 8002128:	f7ff fe43 	bl	8001db2 <_ux_dcd_stm32_register_write>
				_ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 800212c:	f04b 4204 	orr.w	r2, fp, #2214592512	; 0x84000000
 8002130:	4649      	mov	r1, r9
 8002132:	4638      	mov	r0, r7
 8002134:	f7ff fe3d 	bl	8001db2 <_ux_dcd_stm32_register_write>
				data_pointer = transfer_request->ux_slave_transfer_request_current_data_pointer;
 8002138:	6922      	ldr	r2, [r4, #16]
				transfer_request->ux_slave_transfer_request_current_data_pointer += fifo_length;
 800213a:	eb02 030a 	add.w	r3, r2, sl
 800213e:	6123      	str	r3, [r4, #16]
				transfer_request->ux_slave_transfer_request_in_transfer_length -= fifo_length;
 8002140:	69e3      	ldr	r3, [r4, #28]
 8002142:	eba3 030a 	sub.w	r3, r3, sl
 8002146:	61e3      	str	r3, [r4, #28]
				if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8002148:	b13b      	cbz	r3, 800215a <_ux_dcd_stm32_transfer_callback+0x3a0>
					_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index, data_pointer,
 800214a:	68b1      	ldr	r1, [r6, #8]
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4653      	mov	r3, sl
 8002152:	4638      	mov	r0, r7
 8002154:	f001 fc50 	bl	80039f8 <_ux_dcd_stm32_fifo_write>
 8002158:	e761      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
					_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index, data_pointer,
 800215a:	68b1      	ldr	r1, [r6, #8]
 800215c:	2301      	movs	r3, #1
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4653      	mov	r3, sl
 8002162:	4638      	mov	r0, r7
 8002164:	f001 fc48 	bl	80039f8 <_ux_dcd_stm32_fifo_write>
 8002168:	e759      	b.n	800201e <_ux_dcd_stm32_transfer_callback+0x264>
	...

0800216c <_ux_device_stack_class_register>:
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_class_register(UCHAR* class_name,
		UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT*),
		ULONG configuration_number, ULONG interface_number, VOID* parameter)
{
 800216c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002170:	b08c      	sub	sp, #48	; 0x30
 8002172:	4680      	mov	r8, r0
 8002174:	460d      	mov	r5, r1
 8002176:	4617      	mov	r7, r2
 8002178:	461e      	mov	r6, r3
	/* Get the length of the class name (exclude null-terminator). */
	UINT class_name_length = 0;
 800217a:	a90c      	add	r1, sp, #48	; 0x30
 800217c:	2300      	movs	r3, #0
 800217e:	f841 3d04 	str.w	r3, [r1, #-4]!
	UINT status = _ux_utility_string_length_check(class_name, &class_name_length,
 8002182:	223f      	movs	r2, #63	; 0x3f
 8002184:	f000 ff6c 	bl	8003060 <_ux_utility_string_length_check>
			UX_MAX_CLASS_NAME_LENGTH);
	if (status)
 8002188:	4603      	mov	r3, r0
 800218a:	bb48      	cbnz	r0, 80021e0 <_ux_device_stack_class_register+0x74>
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name,
			interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* We need to parse the class table to find an empty spot. */
	UX_SLAVE_CLASS* class = _ux_system_slave->ux_system_slave_class_array;
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <_ux_device_stack_class_register+0x7c>)
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	f8d1 4180 	ldr.w	r4, [r1, #384]	; 0x180
	ULONG class_index;
	UX_SLAVE_CLASS_COMMAND command;
	for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class; class_index++)
 8002194:	2300      	movs	r3, #0
 8002196:	f8d1 2178 	ldr.w	r2, [r1, #376]	; 0x178
 800219a:	429a      	cmp	r2, r3
 800219c:	d91f      	bls.n	80021de <_ux_device_stack_class_register+0x72>
	{
		/* Check if this class is already used. */
		if (class->ux_slave_class_status == UX_UNUSED)
 800219e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021a0:	b11a      	cbz	r2, 80021aa <_ux_device_stack_class_register+0x3e>
			/* Return successful completion. */
			return (UX_SUCCESS);
		}

		/* Move to the next class. */
		class++;
 80021a2:	f504 7498 	add.w	r4, r4, #304	; 0x130
	for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class; class_index++)
 80021a6:	3301      	adds	r3, #1
 80021a8:	e7f5      	b.n	8002196 <_ux_device_stack_class_register+0x2a>
			_ux_utility_memory_copy(class->ux_slave_class_name, class_name, class_name_length + 1);
 80021aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80021ac:	3201      	adds	r2, #1
 80021ae:	4641      	mov	r1, r8
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 fe7e 	bl	8002eb2 <_ux_utility_memory_copy>
			class->ux_slave_class_entry_function = class_entry_function;
 80021b6:	6465      	str	r5, [r4, #68]	; 0x44
			class->ux_slave_class_interface_parameter = parameter;
 80021b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80021ba:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
			class->ux_slave_class_configuration_number = configuration_number;
 80021be:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
			class->ux_slave_class_interface_number = interface_number;
 80021c2:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
			command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 80021c6:	2305      	movs	r3, #5
 80021c8:	9300      	str	r3, [sp, #0]
			command.ux_slave_class_command_parameter = parameter;
 80021ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80021cc:	9309      	str	r3, [sp, #36]	; 0x24
			command.ux_slave_class_command_class_ptr = class;
 80021ce:	9408      	str	r4, [sp, #32]
			status = class_entry_function(&command);
 80021d0:	4668      	mov	r0, sp
 80021d2:	47a8      	blx	r5
			if (status != UX_SUCCESS)
 80021d4:	4603      	mov	r3, r0
 80021d6:	b918      	cbnz	r0, 80021e0 <_ux_device_stack_class_register+0x74>
			class->ux_slave_class_status = UX_USED;
 80021d8:	2201      	movs	r2, #1
 80021da:	6422      	str	r2, [r4, #64]	; 0x40
			return (UX_SUCCESS);
 80021dc:	e000      	b.n	80021e0 <_ux_device_stack_class_register+0x74>
	}

	/* No more entries in the class table. */
	return (UX_MEMORY_INSUFFICIENT);
 80021de:	2312      	movs	r3, #18
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	b00c      	add	sp, #48	; 0x30
 80021e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021e8:	20002b80 	.word	0x20002b80

080021ec <_ux_device_stack_control_request_process>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER* transfer_request)
{
 80021ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f0:	b08f      	sub	sp, #60	; 0x3c
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <_ux_device_stack_control_request_process+0x204>)
 80021f4:	681f      	ldr	r7, [r3, #0]
	UINT status = UX_ERROR;
	ULONG application_data_length;
	UX_SLAVE_CLASS_COMMAND class_command;

	/* Ensure that the Setup request has been received correctly. */
	if (transfer_request->ux_slave_transfer_request_completion_code == UX_SUCCESS)
 80021f6:	6a04      	ldr	r4, [r0, #32]
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	f040 80f4 	bne.w	80023e6 <_ux_device_stack_control_request_process+0x1fa>
 80021fe:	4605      	mov	r5, r0
	{
		/* Seems so far, the Setup request is valid. Extract all fields of the request. */
		ULONG request_type = *transfer_request->ux_slave_transfer_request_setup;
 8002200:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
		ULONG request = *(transfer_request->ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8002204:	f890 b055 	ldrb.w	fp, [r0, #85]	; 0x55
		ULONG request_value = _ux_utility_short_get(
 8002208:	3056      	adds	r0, #86	; 0x56
 800220a:	f000 ff1f 	bl	800304c <_ux_utility_short_get>
 800220e:	4681      	mov	r9, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_VALUE);
		ULONG request_index = _ux_utility_short_get(
 8002210:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8002214:	f000 ff1a 	bl	800304c <_ux_utility_short_get>
 8002218:	4680      	mov	r8, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_INDEX);
		ULONG request_length = _ux_utility_short_get(
 800221a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800221e:	f000 ff15 	bl	800304c <_ux_utility_short_get>
 8002222:	4682      	mov	sl, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_LENGTH);

		/* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned
		 * is not a standard descriptor, treat the command as a CLASS command. */
		if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR)
 8002224:	f1ab 0306 	sub.w	r3, fp, #6
 8002228:	2b01      	cmp	r3, #1
 800222a:	d90b      	bls.n	8002244 <_ux_device_stack_control_request_process+0x58>
			request_type |= UX_REQUEST_TYPE_CLASS;
		}

		/* Check if there is a vendor registered function at the application layer.
		 * If the request is VENDOR and the request match, pass the request to the application. */
		if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800222c:	f006 0360 	and.w	r3, r6, #96	; 0x60
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d011      	beq.n	8002258 <_ux_device_stack_control_request_process+0x6c>
			}
		}

		/* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
		 * the function has to be passed to the class layer. */
		if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	bf18      	it	ne
 8002238:	2b20      	cmpne	r3, #32
 800223a:	d152      	bne.n	80022e2 <_ux_device_stack_control_request_process+0xf6>
				((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
		{
			/* Build all the fields of the Class Command. */
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_REQUEST;
 800223c:	2304      	movs	r3, #4
 800223e:	9302      	str	r3, [sp, #8]
	UINT status = UX_ERROR;
 8002240:	25ff      	movs	r5, #255	; 0xff

			/* We need to find which class this request is for. */
			ULONG class_index;
			for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index++)
 8002242:	e03b      	b.n	80022bc <_ux_device_stack_control_request_process+0xd0>
				&& (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8002244:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8002248:	f013 0f60 	tst.w	r3, #96	; 0x60
 800224c:	d0ee      	beq.n	800222c <_ux_device_stack_control_request_process+0x40>
			request_type &= (UINT)~UX_REQUEST_TYPE;
 800224e:	f026 0660 	bic.w	r6, r6, #96	; 0x60
			request_type |= UX_REQUEST_TYPE_CLASS;
 8002252:	f046 0620 	orr.w	r6, r6, #32
 8002256:	e7e9      	b.n	800222c <_ux_device_stack_control_request_process+0x40>
			if (request == _ux_system_slave->ux_system_slave_device_vendor_request)
 8002258:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <_ux_device_stack_control_request_process+0x204>)
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	f8d2 11ec 	ldr.w	r1, [r2, #492]	; 0x1ec
 8002260:	4559      	cmp	r1, fp
 8002262:	d1e7      	bne.n	8002234 <_ux_device_stack_control_request_process+0x48>
				status = _ux_system_slave->ux_system_slave_device_vendor_request_function(
 8002264:	f8d2 41f0 	ldr.w	r4, [r2, #496]	; 0x1f0
 8002268:	68eb      	ldr	r3, [r5, #12]
 800226a:	aa0d      	add	r2, sp, #52	; 0x34
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4653      	mov	r3, sl
 8002272:	4642      	mov	r2, r8
 8002274:	4649      	mov	r1, r9
 8002276:	4658      	mov	r0, fp
 8002278:	47a0      	blx	r4
				if (status == UX_SUCCESS)
 800227a:	4605      	mov	r5, r0
 800227c:	b948      	cbnz	r0, 8002292 <_ux_device_stack_control_request_process+0xa6>
					transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 800227e:	2303      	movs	r3, #3
 8002280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					_ux_device_stack_transfer_request(transfer_request, request_length,
 8002284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002286:	4651      	mov	r1, sl
 8002288:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800228c:	f000 fc60 	bl	8002b50 <_ux_device_stack_transfer_request>
					return (UX_SUCCESS);
 8002290:	e0aa      	b.n	80023e8 <_ux_device_stack_control_request_process+0x1fc>
					_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 8002292:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002296:	f000 fa95 	bl	80027c4 <_ux_device_stack_endpoint_stall>
					return (UX_SUCCESS);
 800229a:	2500      	movs	r5, #0
 800229c:	e0a4      	b.n	80023e8 <_ux_device_stack_control_request_process+0x1fc>
						continue;
				}

				/* Get the class for the interface. */
				UX_SLAVE_CLASS* class =
						_ux_system_slave->ux_system_slave_interface_class_array[class_index];
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <_ux_device_stack_control_request_process+0x204>)
 80022a0:	681b      	ldr	r3, [r3, #0]
				UX_SLAVE_CLASS* class =
 80022a2:	f104 0260 	add.w	r2, r4, #96	; 0x60
 80022a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80022aa:	685b      	ldr	r3, [r3, #4]

				/* If class is not ready, try next. */
				if (class == UX_NULL)
 80022ac:	b12b      	cbz	r3, 80022ba <_ux_device_stack_control_request_process+0xce>
					continue;

				/* Memorize the class in the command. */
				class_command.ux_slave_class_command_class_ptr = class;
 80022ae:	930a      	str	r3, [sp, #40]	; 0x28

				/* We have found a potential candidate. Call this registered class entry function. */
				status = class->ux_slave_class_entry_function(&class_command);
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	a802      	add	r0, sp, #8
 80022b4:	4798      	blx	r3

				/* The status simply tells us if the registered class handled the
				 * command - if there was an issue processing the command, it would've
				 * stalled the control endpoint, notifying the host (and not us). */
				if (status == UX_SUCCESS)
 80022b6:	4605      	mov	r5, r0
 80022b8:	b158      	cbz	r0, 80022d2 <_ux_device_stack_control_request_process+0xe6>
			for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index++)
 80022ba:	3401      	adds	r4, #1
 80022bc:	2c0f      	cmp	r4, #15
 80022be:	d808      	bhi.n	80022d2 <_ux_device_stack_control_request_process+0xe6>
				if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 80022c0:	f006 0303 	and.w	r3, r6, #3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d1ea      	bne.n	800229e <_ux_device_stack_control_request_process+0xb2>
					if ((request_index & 0xFF) != class_index)
 80022c8:	fa5f f388 	uxtb.w	r3, r8
 80022cc:	42a3      	cmp	r3, r4
 80022ce:	d0e6      	beq.n	800229e <_ux_device_stack_control_request_process+0xb2>
 80022d0:	e7f3      	b.n	80022ba <_ux_device_stack_control_request_process+0xce>

				/* Not handled, try next. */
			}

			/* If no class handled the command, then we have an error here. */
			if (status != UX_SUCCESS)
 80022d2:	2d00      	cmp	r5, #0
 80022d4:	f000 8088 	beq.w	80023e8 <_ux_device_stack_control_request_process+0x1fc>
				/* We stall the command (request not supported). */
				_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 80022d8:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80022dc:	f000 fa72 	bl	80027c4 <_ux_device_stack_endpoint_stall>
 80022e0:	e082      	b.n	80023e8 <_ux_device_stack_control_request_process+0x1fc>
			return (status);
		}

		/* At this point, the request must be a standard request that the device stack should handle.
		 * Requests are here: 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, ..., 6, 6, 6, 6, 6, 6, 6, 1 */
		switch (request)
 80022e2:	f1bb 0f0c 	cmp.w	fp, #12
 80022e6:	d87c      	bhi.n	80023e2 <_ux_device_stack_control_request_process+0x1f6>
 80022e8:	e8df f00b 	tbb	[pc, fp]
 80022ec:	267b1907 	.word	0x267b1907
 80022f0:	4c40337b 	.word	0x4c40337b
 80022f4:	6b625851 	.word	0x6b625851
 80022f8:	76          	.byte	0x76
 80022f9:	00          	.byte	0x00
		{
			/* (0) For Device Reads the settings of the power supply (self or bus) and remote wakeup.
			 * For Endpoint Reads the halt status. */
			case UX_GET_STATUS:
				DEBUG_PRINT("GET_STATUS: %04X, %04X\r\n", (UINT)request_type,
 80022fa:	4642      	mov	r2, r8
 80022fc:	4631      	mov	r1, r6
 80022fe:	483d      	ldr	r0, [pc, #244]	; (80023f4 <_ux_device_stack_control_request_process+0x208>)
 8002300:	f008 f896 	bl	800a430 <iprintf>
						(UINT)request_index);
				status = _ux_device_stack_get_status(request_type, request_index, request_length);
 8002304:	4652      	mov	r2, sl
 8002306:	4641      	mov	r1, r8
 8002308:	4630      	mov	r0, r6
 800230a:	f000 fa73 	bl	80027f4 <_ux_device_stack_get_status>
 800230e:	4605      	mov	r5, r0
			default:
				status = UX_FUNCTION_NOT_SUPPORTED;
				break;
		}

		if (status != UX_SUCCESS)
 8002310:	2d00      	cmp	r5, #0
 8002312:	d069      	beq.n	80023e8 <_ux_device_stack_control_request_process+0x1fc>
			/* Stall the control endpoint to issue protocol error. */
			_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 8002314:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002318:	f000 fa54 	bl	80027c4 <_ux_device_stack_endpoint_stall>
 800231c:	e064      	b.n	80023e8 <_ux_device_stack_control_request_process+0x1fc>
				DEBUG_PRINT("GET_STATUS: %04X, %04X, %04X\r\n", (UINT)request_type,
 800231e:	4643      	mov	r3, r8
 8002320:	464a      	mov	r2, r9
 8002322:	4631      	mov	r1, r6
 8002324:	4834      	ldr	r0, [pc, #208]	; (80023f8 <_ux_device_stack_control_request_process+0x20c>)
 8002326:	f008 f883 	bl	800a430 <iprintf>
				status = _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800232a:	4642      	mov	r2, r8
 800232c:	4649      	mov	r1, r9
 800232e:	4630      	mov	r0, r6
 8002330:	f001 fe44 	bl	8003fbc <_ux_device_stack_clear_feature>
 8002334:	4605      	mov	r5, r0
				break;
 8002336:	e7eb      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SET_FEATURE: %04X, %04X, %04X\r\n", (UINT)request_type,
 8002338:	4643      	mov	r3, r8
 800233a:	464a      	mov	r2, r9
 800233c:	4631      	mov	r1, r6
 800233e:	482f      	ldr	r0, [pc, #188]	; (80023fc <_ux_device_stack_control_request_process+0x210>)
 8002340:	f008 f876 	bl	800a430 <iprintf>
				status = _ux_device_stack_set_feature(request_type, request_value, request_index);
 8002344:	4642      	mov	r2, r8
 8002346:	4649      	mov	r1, r9
 8002348:	4630      	mov	r0, r6
 800234a:	f000 fbcb 	bl	8002ae4 <_ux_device_stack_set_feature>
 800234e:	4605      	mov	r5, r0
				break;
 8002350:	e7de      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SET_ADDRESS: %04X\r\n", (UINT)request_value);
 8002352:	4649      	mov	r1, r9
 8002354:	482a      	ldr	r0, [pc, #168]	; (8002400 <_ux_device_stack_control_request_process+0x214>)
 8002356:	f008 f86b 	bl	800a430 <iprintf>
				dcd->ux_slave_dcd_device_address = request_value;
 800235a:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
				status = dcd->ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS,
 800235e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002360:	464a      	mov	r2, r9
 8002362:	2111      	movs	r1, #17
 8002364:	4638      	mov	r0, r7
 8002366:	4798      	blx	r3
 8002368:	4605      	mov	r5, r0
				break;
 800236a:	e7d1      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("GET_DESCRIPTOR: %04X, %04X\r\n", (UINT)request_value,
 800236c:	4642      	mov	r2, r8
 800236e:	4649      	mov	r1, r9
 8002370:	4824      	ldr	r0, [pc, #144]	; (8002404 <_ux_device_stack_control_request_process+0x218>)
 8002372:	f008 f85d 	bl	800a430 <iprintf>
				status = _ux_device_stack_descriptor_send(request_value, request_index,
 8002376:	4652      	mov	r2, sl
 8002378:	4641      	mov	r1, r8
 800237a:	4648      	mov	r0, r9
 800237c:	f000 f850 	bl	8002420 <_ux_device_stack_descriptor_send>
 8002380:	4605      	mov	r5, r0
				break;
 8002382:	e7c5      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("FUNCTION_NOT_SUPPORTED\r\n");
 8002384:	4820      	ldr	r0, [pc, #128]	; (8002408 <_ux_device_stack_control_request_process+0x21c>)
 8002386:	f008 f8c7 	bl	800a518 <puts>
				status = UX_FUNCTION_NOT_SUPPORTED;
 800238a:	2554      	movs	r5, #84	; 0x54
 800238c:	e7c2      	b.n	8002314 <_ux_device_stack_control_request_process+0x128>
				DEBUG_PRINT("GET_CONFIGURATION\r\n");
 800238e:	481f      	ldr	r0, [pc, #124]	; (800240c <_ux_device_stack_control_request_process+0x220>)
 8002390:	f008 f8c2 	bl	800a518 <puts>
				status = _ux_device_stack_configuration_get();
 8002394:	f001 fe48 	bl	8004028 <_ux_device_stack_configuration_get>
 8002398:	4605      	mov	r5, r0
				break;
 800239a:	e7b9      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				status = _ux_device_stack_configuration_set(request_value);
 800239c:	4648      	mov	r0, r9
 800239e:	f001 fe57 	bl	8004050 <_ux_device_stack_configuration_set>
 80023a2:	4605      	mov	r5, r0
				DEBUG_PRINT("SET_CONFIGURATION: %04X STATUS: %04X\r\n", (UINT)request_value, status);
 80023a4:	4602      	mov	r2, r0
 80023a6:	4649      	mov	r1, r9
 80023a8:	4819      	ldr	r0, [pc, #100]	; (8002410 <_ux_device_stack_control_request_process+0x224>)
 80023aa:	f008 f841 	bl	800a430 <iprintf>
				break;
 80023ae:	e7af      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("GET_INTERFACE: %04X\r\n", (UINT)request_index);
 80023b0:	4641      	mov	r1, r8
 80023b2:	4818      	ldr	r0, [pc, #96]	; (8002414 <_ux_device_stack_control_request_process+0x228>)
 80023b4:	f008 f83c 	bl	800a430 <iprintf>
				status = _ux_device_stack_alternate_setting_get(request_index);
 80023b8:	4640      	mov	r0, r8
 80023ba:	f001 fcf7 	bl	8003dac <_ux_device_stack_alternate_setting_get>
 80023be:	4605      	mov	r5, r0
				break;
 80023c0:	e7a6      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SET_INTERFACE: %04X, %04X\r\n", (UINT)request_index,
 80023c2:	464a      	mov	r2, r9
 80023c4:	4641      	mov	r1, r8
 80023c6:	4814      	ldr	r0, [pc, #80]	; (8002418 <_ux_device_stack_control_request_process+0x22c>)
 80023c8:	f008 f832 	bl	800a430 <iprintf>
				status = _ux_device_stack_alternate_setting_set(request_index, request_value);
 80023cc:	4649      	mov	r1, r9
 80023ce:	4640      	mov	r0, r8
 80023d0:	f001 fd10 	bl	8003df4 <_ux_device_stack_alternate_setting_set>
 80023d4:	4605      	mov	r5, r0
				break;
 80023d6:	e79b      	b.n	8002310 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SYNCH_FRAME\r\n");
 80023d8:	4810      	ldr	r0, [pc, #64]	; (800241c <_ux_device_stack_control_request_process+0x230>)
 80023da:	f008 f89d 	bl	800a518 <puts>
				status = UX_SUCCESS;
 80023de:	2500      	movs	r5, #0
 80023e0:	e002      	b.n	80023e8 <_ux_device_stack_control_request_process+0x1fc>
				status = UX_FUNCTION_NOT_SUPPORTED;
 80023e2:	2554      	movs	r5, #84	; 0x54
 80023e4:	e796      	b.n	8002314 <_ux_device_stack_control_request_process+0x128>
	UINT status = UX_ERROR;
 80023e6:	25ff      	movs	r5, #255	; 0xff
	}

	/* Return the function status. */
	return (status);
}
 80023e8:	4628      	mov	r0, r5
 80023ea:	b00f      	add	sp, #60	; 0x3c
 80023ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f0:	20002b80 	.word	0x20002b80
 80023f4:	0800b370 	.word	0x0800b370
 80023f8:	0800b38c 	.word	0x0800b38c
 80023fc:	0800b3ac 	.word	0x0800b3ac
 8002400:	0800b3cc 	.word	0x0800b3cc
 8002404:	0800b3e0 	.word	0x0800b3e0
 8002408:	0800b400 	.word	0x0800b400
 800240c:	0800b418 	.word	0x0800b418
 8002410:	0800b42c 	.word	0x0800b42c
 8002414:	0800b454 	.word	0x0800b454
 8002418:	0800b46c 	.word	0x0800b46c
 800241c:	0800b488 	.word	0x0800b488

08002420 <_ux_device_stack_descriptor_send>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8002420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002424:	b089      	sub	sp, #36	; 0x24
 8002426:	4616      	mov	r6, r2
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index,
			0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002428:	4bc7      	ldr	r3, [pc, #796]	; (8002748 <_ux_device_stack_descriptor_send+0x328>)
 800242a:	681c      	ldr	r4, [r3, #0]

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Get the control endpoint associated with the device. */
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;
 800242c:	f104 097c 	add.w	r9, r4, #124	; 0x7c

	/* Get the pointer to the transfer request associated with the endpoint. */
	UX_SLAVE_TRANSFER* transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 8002430:	f104 08ac 	add.w	r8, r4, #172	; 0xac

	/* Set the direction to OUT. */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8002434:	2303      	movs	r3, #3
 8002436:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	/* Isolate the descriptor index. */
	ULONG descriptor_index = descriptor_type & 0xff;
 800243a:	b2c5      	uxtb	r5, r0
	ULONG configuration_descriptor_length;

	UCHAR* string_memory;

	/* What type of descriptor do we need to return?  */
	switch (descriptor_type)
 800243c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002440:	3801      	subs	r0, #1
 8002442:	280e      	cmp	r0, #14
 8002444:	f200 8178 	bhi.w	8002738 <_ux_device_stack_descriptor_send+0x318>
 8002448:	e8df f010 	tbh	[pc, r0, lsl #1]
 800244c:	00b9000f 	.word	0x00b9000f
 8002450:	017600f1 	.word	0x017600f1
 8002454:	00220176 	.word	0x00220176
 8002458:	0176007d 	.word	0x0176007d
 800245c:	01760040 	.word	0x01760040
 8002460:	01760176 	.word	0x01760176
 8002464:	01760176 	.word	0x01760176
 8002468:	005e      	.short	0x005e
	{
		case UX_DEVICE_DESCRIPTOR_ITEM:						// 1
			/* Setup the length appropriately. */
			length = (host_length > UX_DEVICE_DESCRIPTOR_LENGTH) ? UX_DEVICE_DESCRIPTOR_LENGTH :
 800246a:	4615      	mov	r5, r2
 800246c:	2a12      	cmp	r2, #18
 800246e:	bf28      	it	cs
 8002470:	2512      	movcs	r5, #18
					host_length;

			/* Copy the device descriptor into the transfer request memory. */
			_ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_data_pointer,
 8002472:	462a      	mov	r2, r5
 8002474:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8002478:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800247c:	f000 fd19 	bl	8002eb2 <_ux_utility_memory_copy>
					_ux_system_slave->ux_system_slave_device_framework, length);

			/* Perform the data transfer.
			 * transfer_request->ux_slave_transfer_request_endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize == 0 ?*/
			status = _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8002480:	4632      	mov	r2, r6
 8002482:	4629      	mov	r1, r5
 8002484:	4640      	mov	r0, r8
 8002486:	f000 fb63 	bl	8002b50 <_ux_device_stack_transfer_request>
			return (UX_ERROR);
	}

	/* Return the status to the caller. */
	return (status);
}
 800248a:	b009      	add	sp, #36	; 0x24
 800248c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			length = (host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH) ?
 8002490:	4615      	mov	r5, r2
 8002492:	2a0a      	cmp	r2, #10
 8002494:	bf28      	it	cs
 8002496:	250a      	movcs	r5, #10
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8002498:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 800249c:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 80024a0:	4408      	add	r0, r1
			while (device_framework < device_framework_end)
 80024a2:	e000      	b.n	80024a6 <_ux_device_stack_descriptor_send+0x86>
				device_framework += descriptor_length;
 80024a4:	4411      	add	r1, r2
			while (device_framework < device_framework_end)
 80024a6:	4281      	cmp	r1, r0
 80024a8:	d20e      	bcs.n	80024c8 <_ux_device_stack_descriptor_send+0xa8>
				descriptor_type = *(device_framework + 1);
 80024aa:	784b      	ldrb	r3, [r1, #1]
				descriptor_length = (ULONG)*device_framework;
 80024ac:	780a      	ldrb	r2, [r1, #0]
				if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM)
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d1f8      	bne.n	80024a4 <_ux_device_stack_descriptor_send+0x84>
					_ux_utility_memory_copy(
 80024b2:	462a      	mov	r2, r5
 80024b4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80024b8:	f000 fcfb 	bl	8002eb2 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 80024bc:	4632      	mov	r2, r6
 80024be:	4629      	mov	r1, r5
 80024c0:	4640      	mov	r0, r8
 80024c2:	f000 fb45 	bl	8002b50 <_ux_device_stack_transfer_request>
					break;
 80024c6:	e7e0      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
	UINT status = UX_ERROR;
 80024c8:	20ff      	movs	r0, #255	; 0xff
 80024ca:	e7de      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
			length = (host_length > UX_OTG_DESCRIPTOR_LENGTH) ? UX_OTG_DESCRIPTOR_LENGTH :
 80024cc:	4615      	mov	r5, r2
 80024ce:	2a05      	cmp	r2, #5
 80024d0:	bf28      	it	cs
 80024d2:	2505      	movcs	r5, #5
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 80024d4:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 80024d8:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 80024dc:	4408      	add	r0, r1
			while (device_framework < device_framework_end)
 80024de:	e000      	b.n	80024e2 <_ux_device_stack_descriptor_send+0xc2>
				device_framework += descriptor_length;
 80024e0:	4411      	add	r1, r2
			while (device_framework < device_framework_end)
 80024e2:	4281      	cmp	r1, r0
 80024e4:	d20e      	bcs.n	8002504 <_ux_device_stack_descriptor_send+0xe4>
				descriptor_type = *(device_framework + 1);
 80024e6:	784b      	ldrb	r3, [r1, #1]
				descriptor_length = (ULONG)*device_framework;
 80024e8:	780a      	ldrb	r2, [r1, #0]
				if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM)
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d1f8      	bne.n	80024e0 <_ux_device_stack_descriptor_send+0xc0>
					_ux_utility_memory_copy(
 80024ee:	462a      	mov	r2, r5
 80024f0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80024f4:	f000 fcdd 	bl	8002eb2 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 80024f8:	4632      	mov	r2, r6
 80024fa:	4629      	mov	r1, r5
 80024fc:	4640      	mov	r0, r8
 80024fe:	f000 fb27 	bl	8002b50 <_ux_device_stack_transfer_request>
					break;
 8002502:	e7c2      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
	UINT status = UX_ERROR;
 8002504:	20ff      	movs	r0, #255	; 0xff
 8002506:	e7c0      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8002508:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 800250c:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 8002510:	4429      	add	r1, r5
			while (device_framework < device_framework_end)
 8002512:	e000      	b.n	8002516 <_ux_device_stack_descriptor_send+0xf6>
				device_framework += descriptor_length;
 8002514:	4415      	add	r5, r2
			while (device_framework < device_framework_end)
 8002516:	428d      	cmp	r5, r1
 8002518:	d213      	bcs.n	8002542 <_ux_device_stack_descriptor_send+0x122>
				descriptor_type = *(device_framework + 1);
 800251a:	786b      	ldrb	r3, [r5, #1]
				descriptor_length = (ULONG)*device_framework;
 800251c:	782a      	ldrb	r2, [r5, #0]
				if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800251e:	2b0f      	cmp	r3, #15
 8002520:	d1f8      	bne.n	8002514 <_ux_device_stack_descriptor_send+0xf4>
					length = _ux_utility_short_get(device_framework + 2);
 8002522:	1ca8      	adds	r0, r5, #2
 8002524:	f000 fd92 	bl	800304c <_ux_utility_short_get>
 8002528:	4607      	mov	r7, r0
					_ux_utility_memory_copy(
 800252a:	4602      	mov	r2, r0
 800252c:	4629      	mov	r1, r5
 800252e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8002532:	f000 fcbe 	bl	8002eb2 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 8002536:	4632      	mov	r2, r6
 8002538:	4639      	mov	r1, r7
 800253a:	4640      	mov	r0, r8
 800253c:	f000 fb08 	bl	8002b50 <_ux_device_stack_transfer_request>
					break;
 8002540:	e7a3      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
	UINT status = UX_ERROR;
 8002542:	20ff      	movs	r0, #255	; 0xff
 8002544:	e7a1      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
			device_framework = _ux_system_slave->ux_system_slave_device_framework_full_speed;
 8002546:	f8d4 7150 	ldr.w	r7, [r4, #336]	; 0x150
			device_framework_length =
 800254a:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
			device_framework_end = device_framework + device_framework_length;
 800254e:	4439      	add	r1, r7
	ULONG parsed_descriptor_index = 0;
 8002550:	2000      	movs	r0, #0
			while (device_framework < device_framework_end)
 8002552:	e028      	b.n	80025a6 <_ux_device_stack_descriptor_send+0x186>
						_ux_utility_descriptor_parse(device_framework,
 8002554:	466b      	mov	r3, sp
 8002556:	2208      	movs	r2, #8
 8002558:	497c      	ldr	r1, [pc, #496]	; (800274c <_ux_device_stack_descriptor_send+0x32c>)
 800255a:	4638      	mov	r0, r7
 800255c:	f000 fbd0 	bl	8002d00 <_ux_utility_descriptor_parse>
						configuration_descriptor_length = configuration_descriptor.wTotalLength;
 8002560:	9d02      	ldr	r5, [sp, #8]
						length = (configuration_descriptor_length < host_length) ?
 8002562:	42b5      	cmp	r5, r6
 8002564:	bf28      	it	cs
 8002566:	4635      	movcs	r5, r6
						if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8002568:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800256c:	d90a      	bls.n	8002584 <_ux_device_stack_descriptor_send+0x164>
							_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800256e:	2212      	movs	r2, #18
 8002570:	2109      	movs	r1, #9
 8002572:	2002      	movs	r0, #2
 8002574:	f000 fb46 	bl	8002c04 <_ux_system_error_handler>
							status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 8002578:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800257a:	464a      	mov	r2, r9
 800257c:	2114      	movs	r1, #20
 800257e:	4620      	mov	r0, r4
 8002580:	4798      	blx	r3
							break;
 8002582:	e782      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
						_ux_utility_memory_copy(
 8002584:	462a      	mov	r2, r5
 8002586:	4639      	mov	r1, r7
 8002588:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800258c:	f000 fc91 	bl	8002eb2 <_ux_utility_memory_copy>
						*(transfer_request->ux_slave_transfer_request_data_pointer + 1) =
 8002590:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002594:	2207      	movs	r2, #7
 8002596:	705a      	strb	r2, [r3, #1]
						status = _ux_device_stack_transfer_request(transfer_request, length,
 8002598:	4632      	mov	r2, r6
 800259a:	4629      	mov	r1, r5
 800259c:	4640      	mov	r0, r8
 800259e:	f000 fad7 	bl	8002b50 <_ux_device_stack_transfer_request>
						break;
 80025a2:	e772      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
				device_framework += descriptor_length;
 80025a4:	4417      	add	r7, r2
			while (device_framework < device_framework_end)
 80025a6:	428f      	cmp	r7, r1
 80025a8:	d207      	bcs.n	80025ba <_ux_device_stack_descriptor_send+0x19a>
				descriptor_type = *(device_framework + 1);
 80025aa:	787b      	ldrb	r3, [r7, #1]
				descriptor_length = (ULONG)*device_framework;
 80025ac:	783a      	ldrb	r2, [r7, #0]
				if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d1f8      	bne.n	80025a4 <_ux_device_stack_descriptor_send+0x184>
					if (parsed_descriptor_index == descriptor_index)
 80025b2:	42a8      	cmp	r0, r5
 80025b4:	d0ce      	beq.n	8002554 <_ux_device_stack_descriptor_send+0x134>
						parsed_descriptor_index++;
 80025b6:	3001      	adds	r0, #1
 80025b8:	e7f4      	b.n	80025a4 <_ux_device_stack_descriptor_send+0x184>
	UINT status = UX_ERROR;
 80025ba:	20ff      	movs	r0, #255	; 0xff
 80025bc:	e765      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 80025be:	f8d4 7148 	ldr.w	r7, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 80025c2:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 80025c6:	4439      	add	r1, r7
	ULONG parsed_descriptor_index = 0;
 80025c8:	2000      	movs	r0, #0
			while (device_framework < device_framework_end)
 80025ca:	e024      	b.n	8002616 <_ux_device_stack_descriptor_send+0x1f6>
						_ux_utility_descriptor_parse(device_framework,
 80025cc:	466b      	mov	r3, sp
 80025ce:	2208      	movs	r2, #8
 80025d0:	495e      	ldr	r1, [pc, #376]	; (800274c <_ux_device_stack_descriptor_send+0x32c>)
 80025d2:	4638      	mov	r0, r7
 80025d4:	f000 fb94 	bl	8002d00 <_ux_utility_descriptor_parse>
						configuration_descriptor_length = configuration_descriptor.wTotalLength;
 80025d8:	9d02      	ldr	r5, [sp, #8]
						length = (configuration_descriptor_length < host_length) ?
 80025da:	42b5      	cmp	r5, r6
 80025dc:	bf28      	it	cs
 80025de:	4635      	movcs	r5, r6
						if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80025e0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80025e4:	d90a      	bls.n	80025fc <_ux_device_stack_descriptor_send+0x1dc>
							_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80025e6:	2212      	movs	r2, #18
 80025e8:	2109      	movs	r1, #9
 80025ea:	2002      	movs	r0, #2
 80025ec:	f000 fb0a 	bl	8002c04 <_ux_system_error_handler>
							status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 80025f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025f2:	464a      	mov	r2, r9
 80025f4:	2114      	movs	r1, #20
 80025f6:	4620      	mov	r0, r4
 80025f8:	4798      	blx	r3
							break;
 80025fa:	e746      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
						_ux_utility_memory_copy(
 80025fc:	462a      	mov	r2, r5
 80025fe:	4639      	mov	r1, r7
 8002600:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8002604:	f000 fc55 	bl	8002eb2 <_ux_utility_memory_copy>
						status = _ux_device_stack_transfer_request(transfer_request, length,
 8002608:	4632      	mov	r2, r6
 800260a:	4629      	mov	r1, r5
 800260c:	4640      	mov	r0, r8
 800260e:	f000 fa9f 	bl	8002b50 <_ux_device_stack_transfer_request>
						break;
 8002612:	e73a      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
				device_framework += descriptor_length;
 8002614:	4417      	add	r7, r2
			while (device_framework < device_framework_end)
 8002616:	428f      	cmp	r7, r1
 8002618:	d207      	bcs.n	800262a <_ux_device_stack_descriptor_send+0x20a>
				descriptor_type = *(device_framework + 1);
 800261a:	787b      	ldrb	r3, [r7, #1]
				descriptor_length = (ULONG)*device_framework;
 800261c:	783a      	ldrb	r2, [r7, #0]
				if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800261e:	2b02      	cmp	r3, #2
 8002620:	d1f8      	bne.n	8002614 <_ux_device_stack_descriptor_send+0x1f4>
					if (parsed_descriptor_index == descriptor_index)
 8002622:	42a8      	cmp	r0, r5
 8002624:	d0d2      	beq.n	80025cc <_ux_device_stack_descriptor_send+0x1ac>
						parsed_descriptor_index++;
 8002626:	3001      	adds	r0, #1
 8002628:	e7f4      	b.n	8002614 <_ux_device_stack_descriptor_send+0x1f4>
	UINT status = UX_ERROR;
 800262a:	20ff      	movs	r0, #255	; 0xff
 800262c:	e72d      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
 800262e:	460f      	mov	r7, r1
			if (descriptor_index == 0)
 8002630:	bb65      	cbnz	r5, 800268c <_ux_device_stack_descriptor_send+0x26c>
				if (_ux_system_slave->ux_system_slave_language_id_framework_length
 8002632:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
						+ 2> UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8002636:	1c9a      	adds	r2, r3, #2
				if (_ux_system_slave->ux_system_slave_language_id_framework_length
 8002638:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800263c:	d819      	bhi.n	8002672 <_ux_device_stack_descriptor_send+0x252>
				string_memory = transfer_request->ux_slave_transfer_request_data_pointer;
 800263e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
						(UCHAR)(_ux_system_slave->ux_system_slave_language_id_framework_length + 2);
 8002642:	3302      	adds	r3, #2
				*string_memory =
 8002644:	7003      	strb	r3, [r0, #0]
				*(string_memory + 1) = UX_STRING_DESCRIPTOR_ITEM;
 8002646:	2303      	movs	r3, #3
 8002648:	7043      	strb	r3, [r0, #1]
						_ux_system_slave->ux_system_slave_language_id_framework,
 800264a:	4c3f      	ldr	r4, [pc, #252]	; (8002748 <_ux_device_stack_descriptor_send+0x328>)
 800264c:	6823      	ldr	r3, [r4, #0]
				_ux_utility_memory_copy(string_memory + 2,
 800264e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002652:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 8002656:	3002      	adds	r0, #2
 8002658:	f000 fc2b 	bl	8002eb2 <_ux_utility_memory_copy>
						> _ux_system_slave->ux_system_slave_language_id_framework_length + 2)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
 8002662:	3102      	adds	r1, #2
				if (host_length
 8002664:	42b1      	cmp	r1, r6
 8002666:	d20f      	bcs.n	8002688 <_ux_device_stack_descriptor_send+0x268>
				status = _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8002668:	4632      	mov	r2, r6
 800266a:	4640      	mov	r0, r8
 800266c:	f000 fa70 	bl	8002b50 <_ux_device_stack_transfer_request>
 8002670:	e70b      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
					_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK,
 8002672:	2212      	movs	r2, #18
 8002674:	2109      	movs	r1, #9
 8002676:	2002      	movs	r0, #2
 8002678:	f000 fac4 	bl	8002c04 <_ux_system_error_handler>
					status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800267c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800267e:	464a      	mov	r2, r9
 8002680:	2114      	movs	r1, #20
 8002682:	4620      	mov	r0, r4
 8002684:	4798      	blx	r3
					break;
 8002686:	e700      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
					length = host_length;
 8002688:	4631      	mov	r1, r6
 800268a:	e7ed      	b.n	8002668 <_ux_device_stack_descriptor_send+0x248>
				UCHAR* string_framework = _ux_system_slave->ux_system_slave_string_framework;
 800268c:	f8d4 b160 	ldr.w	fp, [r4, #352]	; 0x160
				ULONG string_framework_length =
 8002690:	f8d4 a164 	ldr.w	sl, [r4, #356]	; 0x164
				while (string_framework_length != 0)
 8002694:	e02a      	b.n	80026ec <_ux_device_stack_descriptor_send+0x2cc>
								_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8002696:	2212      	movs	r2, #18
 8002698:	2109      	movs	r1, #9
 800269a:	2002      	movs	r0, #2
 800269c:	f000 fab2 	bl	8002c04 <_ux_system_error_handler>
								status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 80026a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026a2:	464a      	mov	r2, r9
 80026a4:	2114      	movs	r1, #20
 80026a6:	4620      	mov	r0, r4
 80026a8:	4798      	blx	r3
								break;
 80026aa:	e03a      	b.n	8002722 <_ux_device_stack_descriptor_send+0x302>
										+ string_length);
 80026ac:	1d18      	adds	r0, r3, #4
								*(string_memory + 2 + (string_length * 2)) = *(string_framework + 4
 80026ae:	3301      	adds	r3, #1
 80026b0:	005a      	lsls	r2, r3, #1
 80026b2:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80026b6:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
								*(string_memory + 2 + (string_length * 2) + 1) = 0;
 80026ba:	3201      	adds	r2, #1
 80026bc:	2000      	movs	r0, #0
 80026be:	5488      	strb	r0, [r1, r2]
							for (string_length = 0; string_length < *(string_framework + 3);
 80026c0:	f89b 2003 	ldrb.w	r2, [fp, #3]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f1      	bhi.n	80026ac <_ux_device_stack_descriptor_send+0x28c>
							if (host_length > (UINT)((*(string_framework + 3) * 2) + 2))
 80026c8:	3201      	adds	r2, #1
 80026ca:	0051      	lsls	r1, r2, #1
 80026cc:	42b1      	cmp	r1, r6
 80026ce:	d300      	bcc.n	80026d2 <_ux_device_stack_descriptor_send+0x2b2>
								length = host_length;
 80026d0:	4631      	mov	r1, r6
							status = _ux_device_stack_transfer_request(transfer_request, length,
 80026d2:	4632      	mov	r2, r6
 80026d4:	4640      	mov	r0, r8
 80026d6:	f000 fa3b 	bl	8002b50 <_ux_device_stack_transfer_request>
							break;
 80026da:	e022      	b.n	8002722 <_ux_device_stack_descriptor_send+0x302>
					string_framework_length -= (ULONG)*(string_framework + 3) + 4;
 80026dc:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80026e0:	ebaa 0a03 	sub.w	sl, sl, r3
 80026e4:	f1aa 0a04 	sub.w	sl, sl, #4
					string_framework += (ULONG)*(string_framework + 3) + 4;
 80026e8:	3304      	adds	r3, #4
 80026ea:	449b      	add	fp, r3
				while (string_framework_length != 0)
 80026ec:	f1ba 0f00 	cmp.w	sl, #0
 80026f0:	d016      	beq.n	8002720 <_ux_device_stack_descriptor_send+0x300>
					ULONG curr_index = _ux_utility_short_get(string_framework);
 80026f2:	4658      	mov	r0, fp
 80026f4:	f000 fcaa 	bl	800304c <_ux_utility_short_get>
					if (curr_index == request_index)
 80026f8:	42b8      	cmp	r0, r7
 80026fa:	d1ef      	bne.n	80026dc <_ux_device_stack_descriptor_send+0x2bc>
						if (*(string_framework + 2) == descriptor_index)
 80026fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8002700:	42ab      	cmp	r3, r5
 8002702:	d1eb      	bne.n	80026dc <_ux_device_stack_descriptor_send+0x2bc>
							if (((*(string_framework + 3) * 2) + 2)
 8002704:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	2a80      	cmp	r2, #128	; 0x80
 800270c:	dcc3      	bgt.n	8002696 <_ux_device_stack_descriptor_send+0x276>
							string_memory =
 800270e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
							*string_memory = (UCHAR)((*(string_framework + 3) * 2) + 2);
 8002712:	3301      	adds	r3, #1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	700b      	strb	r3, [r1, #0]
							*(string_memory + 1) = UX_STRING_DESCRIPTOR_ITEM;
 8002718:	2303      	movs	r3, #3
 800271a:	704b      	strb	r3, [r1, #1]
							for (string_length = 0; string_length < *(string_framework + 3);
 800271c:	2300      	movs	r3, #0
 800271e:	e7cf      	b.n	80026c0 <_ux_device_stack_descriptor_send+0x2a0>
	UINT status = UX_ERROR;
 8002720:	20ff      	movs	r0, #255	; 0xff
				if (string_framework_length == 0)
 8002722:	f1ba 0f00 	cmp.w	sl, #0
 8002726:	f47f aeb0 	bne.w	800248a <_ux_device_stack_descriptor_send+0x6a>
					dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800272a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800272c:	464a      	mov	r2, r9
 800272e:	2114      	movs	r1, #20
 8002730:	4620      	mov	r0, r4
 8002732:	4798      	blx	r3
					return (UX_ERROR);
 8002734:	20ff      	movs	r0, #255	; 0xff
 8002736:	e6a8      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8002738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800273a:	464a      	mov	r2, r9
 800273c:	2114      	movs	r1, #20
 800273e:	4620      	mov	r0, r4
 8002740:	4798      	blx	r3
			return (UX_ERROR);
 8002742:	20ff      	movs	r0, #255	; 0xff
 8002744:	e6a1      	b.n	800248a <_ux_device_stack_descriptor_send+0x6a>
 8002746:	bf00      	nop
 8002748:	20002b80 	.word	0x20002b80
 800274c:	200000f4 	.word	0x200000f4

08002750 <_ux_device_stack_disconnect>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_disconnect(VOID)
{
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <_ux_device_stack_disconnect+0x70>)
 8002756:	681d      	ldr	r5, [r3, #0]

	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_UNREGISTER(device);

	/* If the device was in the configured state, there may be interfaces attached to the configuration. */
	if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8002758:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800275a:	2b03      	cmp	r3, #3
 800275c:	d017      	beq.n	800278e <_ux_device_stack_disconnect+0x3e>
	/*--------------------------------------------------------------------------------------------*/

	UINT status = UX_ERROR;

	/* If the device was attached, we need to destroy the control endpoint. */
	if (device->ux_slave_device_state == UX_DEVICE_ATTACHED)
 800275e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002760:	2b01      	cmp	r3, #1
 8002762:	d12b      	bne.n	80027bc <_ux_device_stack_disconnect+0x6c>
		/* Now we can destroy the default control endpoint. */
		status = dcd->ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8002764:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002766:	f105 027c 	add.w	r2, r5, #124	; 0x7c
 800276a:	210f      	movs	r1, #15
 800276c:	4628      	mov	r0, r5
 800276e:	4798      	blx	r3
 8002770:	4604      	mov	r4, r0
				(VOID*)&device->ux_slave_device_control_endpoint);

	/* We are reverting to configuration 0. */
	device->ux_slave_device_configuration_selected = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

	/* Set the device to be non attached. */
	device->ux_slave_device_state = UX_DEVICE_RESET;
 8002778:	642b      	str	r3, [r5, #64]	; 0x40

	/* Check the status change callback. */
	if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <_ux_device_stack_disconnect+0x70>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002782:	b10b      	cbz	r3, 8002788 <_ux_device_stack_disconnect+0x38>
	{
		/* Inform the application if a callback function was programmed. */
		_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8002784:	200a      	movs	r0, #10
 8002786:	4798      	blx	r3
	}

	/* Return the status to the caller. */
	return (status);
}
 8002788:	4620      	mov	r0, r4
 800278a:	b00c      	add	sp, #48	; 0x30
 800278c:	bd70      	pop	{r4, r5, r6, pc}
		UX_SLAVE_INTERFACE* interface = device->ux_slave_device_first_interface;
 800278e:	f8d5 4130 	ldr.w	r4, [r5, #304]	; 0x130
		while (interface != UX_NULL)
 8002792:	e004      	b.n	800279e <_ux_device_stack_disconnect+0x4e>
			UX_SLAVE_INTERFACE* next_interface = interface->ux_slave_interface_next_interface;
 8002794:	6b26      	ldr	r6, [r4, #48]	; 0x30
			_ux_device_stack_interface_delete(interface);
 8002796:	4620      	mov	r0, r4
 8002798:	f000 f982 	bl	8002aa0 <_ux_device_stack_interface_delete>
			interface = next_interface;
 800279c:	4634      	mov	r4, r6
		while (interface != UX_NULL)
 800279e:	b154      	cbz	r4, 80027b6 <_ux_device_stack_disconnect+0x66>
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80027a0:	2303      	movs	r3, #3
 80027a2:	9301      	str	r3, [sp, #4]
			class_command.ux_slave_class_command_interface = (VOID*)interface;
 80027a4:	9403      	str	r4, [sp, #12]
			UX_SLAVE_CLASS* class = interface->ux_slave_interface_class;
 80027a6:	6863      	ldr	r3, [r4, #4]
			class_command.ux_slave_class_command_class_ptr = class;
 80027a8:	9309      	str	r3, [sp, #36]	; 0x24
			if (class != UX_NULL)
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f2      	beq.n	8002794 <_ux_device_stack_disconnect+0x44>
				class->ux_slave_class_entry_function(&class_command);
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	a801      	add	r0, sp, #4
 80027b2:	4798      	blx	r3
 80027b4:	e7ee      	b.n	8002794 <_ux_device_stack_disconnect+0x44>
		device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 80027b6:	2301      	movs	r3, #1
 80027b8:	642b      	str	r3, [r5, #64]	; 0x40
 80027ba:	e7d0      	b.n	800275e <_ux_device_stack_disconnect+0xe>
	UINT status = UX_ERROR;
 80027bc:	24ff      	movs	r4, #255	; 0xff
 80027be:	e7d8      	b.n	8002772 <_ux_device_stack_disconnect+0x22>
 80027c0:	20002b80 	.word	0x20002b80

080027c4 <_ux_device_stack_endpoint_stall>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <_ux_device_stack_endpoint_stall+0x2c>)
 80027ca:	6818      	ldr	r0, [r3, #0]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80027cc:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80027d0:	b672      	cpsid	i
       resets it.  */
    TX_DISABLE

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	b143      	cbz	r3, 80027ea <_ux_device_stack_endpoint_stall+0x26>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80027d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027da:	4622      	mov	r2, r4
 80027dc:	2114      	movs	r1, #20
 80027de:	4798      	blx	r3
        
        /* Mark the endpoint state.  */
        endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80027e0:	2302      	movs	r3, #2
 80027e2:	6063      	str	r3, [r4, #4]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80027e4:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);       
}
 80027e8:	bd38      	pop	{r3, r4, r5, pc}
    status =  UX_ERROR;
 80027ea:	20ff      	movs	r0, #255	; 0xff
 80027ec:	e7fa      	b.n	80027e4 <_ux_device_stack_endpoint_stall+0x20>
 80027ee:	bf00      	nop
 80027f0:	20002b80 	.word	0x20002b80

080027f4 <_ux_device_stack_get_status>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index,
			request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80027f6:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <_ux_device_stack_get_status+0xb4>)
 80027f8:	681c      	ldr	r4, [r3, #0]

	/* Get the control endpoint for the device. */
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;

	/* Get the pointer to the transfer request associated with the endpoint. */
	UX_SLAVE_TRANSFER* transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 80027fa:	f104 07ac 	add.w	r7, r4, #172	; 0xac

	/* Reset the status buffer. */
	*transfer_request->ux_slave_transfer_request_data_pointer = 0;
 80027fe:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8002802:	2300      	movs	r3, #0
 8002804:	702b      	strb	r3, [r5, #0]
	*(transfer_request->ux_slave_transfer_request_data_pointer + 1) = 0;
 8002806:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800280a:	706b      	strb	r3, [r5, #1]
	ULONG data_length = 2;

	UINT status;

	/* The status can be for either the device or the endpoint. */
	switch (request_type & UX_REQUEST_TARGET)
 800280c:	f010 0003 	ands.w	r0, r0, #3
 8002810:	d00a      	beq.n	8002828 <_ux_device_stack_get_status+0x34>
 8002812:	f104 067c 	add.w	r6, r4, #124	; 0x7c
 8002816:	2802      	cmp	r0, #2
 8002818:	d021      	beq.n	800285e <_ux_device_stack_get_status+0x6a>
			}
			break;

		default:
			/* We stall the command. */
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800281a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800281c:	4632      	mov	r2, r6
 800281e:	2114      	movs	r1, #20
 8002820:	4620      	mov	r0, r4
 8002822:	4798      	blx	r3

			/* No more work to do here.  The command failed but the upper layer does not depend on it. */
			return (UX_SUCCESS);
 8002824:	2000      	movs	r0, #0
 8002826:	e03b      	b.n	80028a0 <_ux_device_stack_get_status+0xac>
			if (request_index == UX_OTG_STATUS_SELECTOR)
 8002828:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
 800282c:	d030      	beq.n	8002890 <_ux_device_stack_get_status+0x9c>
				if (_ux_system_slave->ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <_ux_device_stack_get_status+0xb4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002836:	2b02      	cmp	r3, #2
 8002838:	d00c      	beq.n	8002854 <_ux_device_stack_get_status+0x60>
				if (_ux_system_slave->ux_system_slave_remote_wakeup_enabled)
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <_ux_device_stack_get_status+0xb4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002842:	b373      	cbz	r3, 80028a2 <_ux_device_stack_get_status+0xae>
					*transfer_request->ux_slave_transfer_request_data_pointer |= 2;
 8002844:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8002848:	7813      	ldrb	r3, [r2, #0]
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	7013      	strb	r3, [r2, #0]
	ULONG data_length = 2;
 8002850:	2102      	movs	r1, #2
 8002852:	e01e      	b.n	8002892 <_ux_device_stack_get_status+0x9e>
					*transfer_request->ux_slave_transfer_request_data_pointer = 1;
 8002854:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e7ed      	b.n	800283a <_ux_device_stack_get_status+0x46>
			status = dcd->ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS,
 800285e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002860:	f021 0280 	bic.w	r2, r1, #128	; 0x80
 8002864:	2115      	movs	r1, #21
 8002866:	4620      	mov	r0, r4
 8002868:	4798      	blx	r3
			if (status != UX_ERROR)
 800286a:	28ff      	cmp	r0, #255	; 0xff
 800286c:	d106      	bne.n	800287c <_ux_device_stack_get_status+0x88>
				dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800286e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002870:	4632      	mov	r2, r6
 8002872:	2114      	movs	r1, #20
 8002874:	4620      	mov	r0, r4
 8002876:	4798      	blx	r3
				return (UX_SUCCESS);
 8002878:	2000      	movs	r0, #0
 800287a:	e011      	b.n	80028a0 <_ux_device_stack_get_status+0xac>
				if (status == UX_TRUE)
 800287c:	2801      	cmp	r0, #1
 800287e:	d001      	beq.n	8002884 <_ux_device_stack_get_status+0x90>
	ULONG data_length = 2;
 8002880:	2102      	movs	r1, #2
 8002882:	e006      	b.n	8002892 <_ux_device_stack_get_status+0x9e>
					*transfer_request->ux_slave_transfer_request_data_pointer = 1;
 8002884:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
	ULONG data_length = 2;
 800288c:	2102      	movs	r1, #2
 800288e:	e000      	b.n	8002892 <_ux_device_stack_get_status+0x9e>
				data_length = 1;
 8002890:	2101      	movs	r1, #1
	}

	/* Set the phase of the transfer to data out. */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8002892:	2303      	movs	r3, #3
 8002894:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	/* Send the descriptor with the appropriate length to the host. */
	status = _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8002898:	460a      	mov	r2, r1
 800289a:	4638      	mov	r0, r7
 800289c:	f000 f958 	bl	8002b50 <_ux_device_stack_transfer_request>

	/* Return the function status. */
	return (status);
}
 80028a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ULONG data_length = 2;
 80028a2:	2102      	movs	r1, #2
 80028a4:	e7f5      	b.n	8002892 <_ux_device_stack_get_status+0x9e>
 80028a6:	bf00      	nop
 80028a8:	20002b80 	.word	0x20002b80

080028ac <_ux_device_stack_initialize>:
UINT _ux_device_stack_initialize(UCHAR* device_framework_high_speed,
		ULONG device_framework_length_high_speed, UCHAR* device_framework_full_speed,
		ULONG device_framework_length_full_speed, UCHAR* string_framework,
		ULONG string_framework_length, UCHAR* language_id_framework,
		ULONG language_id_framework_length, UINT (*ux_system_slave_change_function)(ULONG))
{
 80028ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 80028b0:	4c79      	ldr	r4, [pc, #484]	; (8002a98 <_ux_device_stack_initialize+0x1ec>)
 80028b2:	6824      	ldr	r4, [r4, #0]

	/* Store the high speed device framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_device_framework_high_speed = device_framework_high_speed;
 80028b4:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
	_ux_system_slave->ux_system_slave_device_framework_length_high_speed =
 80028b8:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
			device_framework_length_high_speed;

	/* Store the string framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_device_framework_full_speed = device_framework_full_speed;
 80028bc:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
	_ux_system_slave->ux_system_slave_device_framework_length_full_speed =
 80028c0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			device_framework_length_full_speed;

	/* Store the string framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_string_framework = string_framework;
 80028c4:	9b06      	ldr	r3, [sp, #24]
 80028c6:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	_ux_system_slave->ux_system_slave_string_framework_length = string_framework_length;
 80028ca:	9b07      	ldr	r3, [sp, #28]
 80028cc:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164

	/* Store the language ID list in the project structure. */
	_ux_system_slave->ux_system_slave_language_id_framework = language_id_framework;
 80028d0:	9b08      	ldr	r3, [sp, #32]
 80028d2:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	_ux_system_slave->ux_system_slave_language_id_framework_length = language_id_framework_length;
 80028d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028d8:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

	/* Store the max number of slave class drivers in the project structure. */
	_ux_system_slave->ux_system_slave_max_class = UX_MAX_SLAVE_CLASS_DRIVER;
 80028dc:	2303      	movs	r3, #3
 80028de:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178

	/* Store the device state change function callback. */
	_ux_system_slave->ux_system_slave_change_function = ux_system_slave_change_function;
 80028e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e4:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8

	/* Allocate memory for the classes. sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow
	 * is checked outside of the function. */
	UCHAR* memory = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 80028e8:	f44f 7264 	mov.w	r2, #912	; 0x390
 80028ec:	2100      	movs	r1, #0
 80028ee:	4608      	mov	r0, r1
 80028f0:	f000 fa3c 	bl	8002d6c <_ux_utility_memory_allocate>
			sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
	if (memory == UX_NULL)
 80028f4:	2800      	cmp	r0, #0
 80028f6:	f000 80cb 	beq.w	8002a90 <_ux_device_stack_initialize+0x1e4>
		return (UX_MEMORY_INSUFFICIENT);

	/* Save this memory allocation in the USBX project. */
	_ux_system_slave->ux_system_slave_class_array = (UX_SLAVE_CLASS*)((void*)memory);
 80028fa:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <_ux_device_stack_initialize+0x1ec>)
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
	UX_SLAVE_TRANSFER* transfer_request =
			&device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

	/* Acquire a buffer for the size of the endpoint. */
	transfer_request->ux_slave_transfer_request_data_pointer =
			_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8002902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002906:	2101      	movs	r1, #1
 8002908:	2000      	movs	r0, #0
 800290a:	f000 fa2f 	bl	8002d6c <_ux_utility_memory_allocate>
	transfer_request->ux_slave_transfer_request_data_pointer =
 800290e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
					UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);

	UINT status;

	/* Ensure we have enough memory. */
	if (transfer_request->ux_slave_transfer_request_data_pointer == UX_NULL)
 8002912:	2800      	cmp	r0, #0
 8002914:	d051      	beq.n	80029ba <_ux_device_stack_initialize+0x10e>
	if (status == UX_SUCCESS)
	{
		/* We need to determine the maximum number of interfaces and endpoints declared in
		 * the device framework. This mechanism requires that both framework behave the same
		 * way regarding the number of interfaces and endpoints. */
		UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework_full_speed;
 8002916:	4b60      	ldr	r3, [pc, #384]	; (8002a98 <_ux_device_stack_initialize+0x1ec>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
		ULONG device_framework_length = _ux_system_slave
 800291e:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
				->ux_system_slave_device_framework_length_full_speed;

		/* Reset all values we are using during the scanning of the framework. */
		ULONG local_interfaces_found = 0;
		ULONG local_endpoints_found = 0;
		ULONG endpoints_in_interface_found = 0;
 8002922:	2000      	movs	r0, #0
		ULONG local_endpoints_found = 0;
 8002924:	4606      	mov	r6, r0
		ULONG local_interfaces_found = 0;
 8002926:	4607      	mov	r7, r0
	ULONG endpoints_found = 0;
 8002928:	4686      	mov	lr, r0
	ULONG interfaces_found = 0;
 800292a:	4684      	mov	ip, r0

		/* Parse the device framework and locate interfaces and endpoint descriptor(s). */
		while (device_framework_length != 0)
 800292c:	e00f      	b.n	800294e <_ux_device_stack_initialize+0xa2>
						local_interfaces_found++;
					}
					else
					{
						/* Compare the number of endpoints found in this non 0 alternate setting. */
						if (endpoints_in_interface_found < (ULONG)*(device_framework + 4))
 800292e:	791d      	ldrb	r5, [r3, #4]
 8002930:	4285      	cmp	r5, r0
 8002932:	d90a      	bls.n	800294a <_ux_device_stack_initialize+0x9e>
							/* Adjust the number of maximum endpoints in this interface. */
							endpoints_in_interface_found = (ULONG)*(device_framework + 4);
 8002934:	4628      	mov	r0, r5
 8002936:	e008      	b.n	800294a <_ux_device_stack_initialize+0x9e>

					break;

				case UX_CONFIGURATION_DESCRIPTOR_ITEM:
					/* Check if the number of interfaces found in this configuration is the maximum so far. */
					if (local_interfaces_found > interfaces_found)
 8002938:	45bc      	cmp	ip, r7
 800293a:	d200      	bcs.n	800293e <_ux_device_stack_initialize+0x92>
						/* We need to adjust the number of maximum interfaces. */
						interfaces_found = local_interfaces_found;
 800293c:	46bc      	mov	ip, r7

					/* We have a new configuration. We need to reset the number of local interfaces. */
					local_interfaces_found = 0;

					/* Add the cumulated number of endpoints in the previous interface. */
					local_endpoints_found += endpoints_in_interface_found;
 800293e:	4406      	add	r6, r0

					/* Check if the number of endpoints found in the previous configuration is the maximum so far. */
					if (local_endpoints_found > endpoints_found)
 8002940:	45b6      	cmp	lr, r6
 8002942:	d312      	bcc.n	800296a <_ux_device_stack_initialize+0xbe>
						/* We need to adjust the number of maximum endpoints. */
						endpoints_found = local_endpoints_found;

					/* We have a new configuration. We need to reset the number of local endpoints. */
					local_endpoints_found = 0;
					endpoints_in_interface_found = 0;
 8002944:	2000      	movs	r0, #0
					local_endpoints_found = 0;
 8002946:	4606      	mov	r6, r0
					local_interfaces_found = 0;
 8002948:	4607      	mov	r7, r0
				default:
					break;
			}

			/* Adjust what is left of the device framework. */
			device_framework_length -= descriptor_length;
 800294a:	1a52      	subs	r2, r2, r1

			/* Point to the next descriptor. */
			device_framework += descriptor_length;
 800294c:	440b      	add	r3, r1
		while (device_framework_length != 0)
 800294e:	b18a      	cbz	r2, 8002974 <_ux_device_stack_initialize+0xc8>
			ULONG descriptor_length = (ULONG)*device_framework;
 8002950:	7819      	ldrb	r1, [r3, #0]
			UCHAR descriptor_type = *(device_framework + 1);
 8002952:	785d      	ldrb	r5, [r3, #1]
			switch (descriptor_type)
 8002954:	2d02      	cmp	r5, #2
 8002956:	d0ef      	beq.n	8002938 <_ux_device_stack_initialize+0x8c>
 8002958:	2d04      	cmp	r5, #4
 800295a:	d1f6      	bne.n	800294a <_ux_device_stack_initialize+0x9e>
					if (*(device_framework + 3) == 0)
 800295c:	78dd      	ldrb	r5, [r3, #3]
 800295e:	2d00      	cmp	r5, #0
 8002960:	d1e5      	bne.n	800292e <_ux_device_stack_initialize+0x82>
						local_endpoints_found += endpoints_in_interface_found;
 8002962:	4406      	add	r6, r0
						endpoints_in_interface_found = (ULONG)*(device_framework + 4);
 8002964:	7918      	ldrb	r0, [r3, #4]
						local_interfaces_found++;
 8002966:	3701      	adds	r7, #1
 8002968:	e7ef      	b.n	800294a <_ux_device_stack_initialize+0x9e>
						endpoints_found = local_endpoints_found;
 800296a:	46b6      	mov	lr, r6
					endpoints_in_interface_found = 0;
 800296c:	2000      	movs	r0, #0
					local_endpoints_found = 0;
 800296e:	4606      	mov	r6, r0
					local_interfaces_found = 0;
 8002970:	4607      	mov	r7, r0
 8002972:	e7ea      	b.n	800294a <_ux_device_stack_initialize+0x9e>
		}

		/* Add the cumulated number of endpoints in the previous interface. */
		local_endpoints_found += endpoints_in_interface_found;
 8002974:	4406      	add	r6, r0

		/* Check if the number of endpoints found in the previous interface is the maximum so far. */
		if (local_endpoints_found > endpoints_found)
 8002976:	45b6      	cmp	lr, r6
 8002978:	d300      	bcc.n	800297c <_ux_device_stack_initialize+0xd0>
 800297a:	4676      	mov	r6, lr
			/* We need to adjust the number of maximum endpoints. */
			endpoints_found = local_endpoints_found;

		/* Check if the number of interfaces found in this configuration is the maximum so far. */
		if (local_interfaces_found > interfaces_found)
 800297c:	45bc      	cmp	ip, r7
 800297e:	d300      	bcc.n	8002982 <_ux_device_stack_initialize+0xd6>
 8002980:	4667      	mov	r7, ip
			/* We need to adjust the number of maximum interfaces. */
			interfaces_found = local_interfaces_found;

		/* We do a sanity check on the finding. At least there must be one interface but endpoints
		 * are not necessary. */
		if (interfaces_found == 0)
 8002982:	b197      	cbz	r7, 80029aa <_ux_device_stack_initialize+0xfe>
		status = UX_SUCCESS;
 8002984:	f04f 0800 	mov.w	r8, #0
	}

	/*--------------------------------------------------------------------------------------------*/

	/* Go on to allocate endpoints pool if no error. */
	if (status == UX_SUCCESS)
 8002988:	f1b8 0f00 	cmp.w	r8, #0
 800298c:	d01a      	beq.n	80029c4 <_ux_device_stack_initialize+0x118>
	/*--------------------------------------------------------------------------------------------*/

	UX_SLAVE_ENDPOINT* endpoints_pool;

	/* Do we need an endpoint pool ?  */
	if (endpoints_found != 0 && status == UX_SUCCESS)
 800298e:	fab8 f388 	clz	r3, r8
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2e00      	cmp	r6, #0
 8002996:	bf08      	it	eq
 8002998:	2300      	moveq	r3, #0
 800299a:	bb23      	cbnz	r3, 80029e6 <_ux_device_stack_initialize+0x13a>
				endpoints_pool++;
			}
		}
	}
	else
		endpoints_pool = UX_NULL;
 800299c:	2500      	movs	r5, #0

	/* Return successful completion. */
	if (status == UX_SUCCESS)
 800299e:	f1b8 0f00 	cmp.w	r8, #0
 80029a2:	d072      	beq.n	8002a8a <_ux_device_stack_initialize+0x1de>
		return (UX_SUCCESS);

	/*---------------------------- Free resources when there is error ----------------------------*/

	/* Free device -> ux_slave_device_endpoints_pool. */
	if (endpoints_pool)
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d151      	bne.n	8002a4c <_ux_device_stack_initialize+0x1a0>
 80029a8:	e05f      	b.n	8002a6a <_ux_device_stack_initialize+0x1be>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT,
 80029aa:	2242      	movs	r2, #66	; 0x42
 80029ac:	2103      	movs	r1, #3
 80029ae:	2002      	movs	r0, #2
 80029b0:	f000 f928 	bl	8002c04 <_ux_system_error_handler>
			status = UX_DESCRIPTOR_CORRUPTED;
 80029b4:	f04f 0842 	mov.w	r8, #66	; 0x42
 80029b8:	e7e6      	b.n	8002988 <_ux_device_stack_initialize+0xdc>
	ULONG endpoints_found = 0;
 80029ba:	2600      	movs	r6, #0
	ULONG interfaces_found = 0;
 80029bc:	4637      	mov	r7, r6
		status = UX_MEMORY_INSUFFICIENT;
 80029be:	f04f 0812 	mov.w	r8, #18
 80029c2:	e7e1      	b.n	8002988 <_ux_device_stack_initialize+0xdc>
		device->ux_slave_device_interfaces_pool_number = interfaces_found;
 80029c4:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
		device->ux_slave_device_endpoints_pool_number = endpoints_found;
 80029c8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		UX_SLAVE_INTERFACE* interfaces_pool = _ux_utility_memory_allocate_mulc_safe(
 80029cc:	2338      	movs	r3, #56	; 0x38
 80029ce:	463a      	mov	r2, r7
 80029d0:	2100      	movs	r1, #0
 80029d2:	4608      	mov	r0, r1
 80029d4:	f000 fa5e 	bl	8002e94 <_ux_utility_memory_allocate_mulc_safe>
		if (interfaces_pool == UX_NULL)
 80029d8:	b110      	cbz	r0, 80029e0 <_ux_device_stack_initialize+0x134>
			device->ux_slave_device_interfaces_pool = interfaces_pool;
 80029da:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 80029de:	e7d6      	b.n	800298e <_ux_device_stack_initialize+0xe2>
			status = UX_MEMORY_INSUFFICIENT;
 80029e0:	f04f 0812 	mov.w	r8, #18
 80029e4:	e7d3      	b.n	800298e <_ux_device_stack_initialize+0xe2>
		endpoints_pool = _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 80029e6:	2390      	movs	r3, #144	; 0x90
 80029e8:	4632      	mov	r2, r6
 80029ea:	2100      	movs	r1, #0
 80029ec:	4608      	mov	r0, r1
 80029ee:	f000 fa51 	bl	8002e94 <_ux_utility_memory_allocate_mulc_safe>
		if (endpoints_pool == UX_NULL)
 80029f2:	4605      	mov	r5, r0
 80029f4:	b308      	cbz	r0, 8002a3a <_ux_device_stack_initialize+0x18e>
			device->ux_slave_device_endpoints_pool = endpoints_pool;
 80029f6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
			while (endpoints_pool < (device->ux_slave_device_endpoints_pool + endpoints_found))
 80029fa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80029fe:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
 8002a02:	010a      	lsls	r2, r1, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	42ab      	cmp	r3, r5
 8002a08:	d9c9      	bls.n	800299e <_ux_device_stack_initialize+0xf2>
						_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8002a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2000      	movs	r0, #0
 8002a12:	f000 f9ab 	bl	8002d6c <_ux_utility_memory_allocate>
						.ux_slave_transfer_request_data_pointer =
 8002a16:	63e8      	str	r0, [r5, #60]	; 0x3c
				if (endpoints_pool->ux_slave_endpoint_transfer_request
 8002a18:	b148      	cbz	r0, 8002a2e <_ux_device_stack_initialize+0x182>
				status = _ux_utility_semaphore_create(
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	491f      	ldr	r1, [pc, #124]	; (8002a9c <_ux_device_stack_initialize+0x1f0>)
 8002a1e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002a22:	f000 fafd 	bl	8003020 <_ux_utility_semaphore_create>
				if (status != UX_SUCCESS)
 8002a26:	4680      	mov	r8, r0
 8002a28:	b920      	cbnz	r0, 8002a34 <_ux_device_stack_initialize+0x188>
				endpoints_pool++;
 8002a2a:	3590      	adds	r5, #144	; 0x90
 8002a2c:	e7e5      	b.n	80029fa <_ux_device_stack_initialize+0x14e>
					status = UX_MEMORY_INSUFFICIENT;
 8002a2e:	f04f 0812 	mov.w	r8, #18
 8002a32:	e7b4      	b.n	800299e <_ux_device_stack_initialize+0xf2>
					status = UX_SEMAPHORE_ERROR;
 8002a34:	f04f 0815 	mov.w	r8, #21
 8002a38:	e7b1      	b.n	800299e <_ux_device_stack_initialize+0xf2>
			status = UX_MEMORY_INSUFFICIENT;
 8002a3a:	f04f 0812 	mov.w	r8, #18
 8002a3e:	e7b1      	b.n	80029a4 <_ux_device_stack_initialize+0xf8>
		while (endpoints_pool >= device->ux_slave_device_endpoints_pool)
		{
			/* Delete ux_slave_transfer_request_semaphore. */
			if (endpoints_pool->ux_slave_endpoint_transfer_request
					.ux_slave_transfer_request_semaphore.tx_semaphore_id != 0)
				_ux_utility_semaphore_delete(&endpoints_pool->ux_slave_endpoint_transfer_request
 8002a40:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002a44:	f000 fafa 	bl	800303c <_ux_utility_semaphore_delete>
 8002a48:	e007      	b.n	8002a5a <_ux_device_stack_initialize+0x1ae>
					.ux_slave_transfer_request_data_pointer)
				_ux_utility_memory_free(endpoints_pool->ux_slave_endpoint_transfer_request
								.ux_slave_transfer_request_data_pointer);

			/* Move to previous endpoint. */
			endpoints_pool--;
 8002a4a:	3d90      	subs	r5, #144	; 0x90
		while (endpoints_pool >= device->ux_slave_device_endpoints_pool)
 8002a4c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002a50:	42a8      	cmp	r0, r5
 8002a52:	d808      	bhi.n	8002a66 <_ux_device_stack_initialize+0x1ba>
					.ux_slave_transfer_request_semaphore.tx_semaphore_id != 0)
 8002a54:	6deb      	ldr	r3, [r5, #92]	; 0x5c
			if (endpoints_pool->ux_slave_endpoint_transfer_request
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f2      	bne.n	8002a40 <_ux_device_stack_initialize+0x194>
					.ux_slave_transfer_request_data_pointer)
 8002a5a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
			if (endpoints_pool->ux_slave_endpoint_transfer_request
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d0f4      	beq.n	8002a4a <_ux_device_stack_initialize+0x19e>
				_ux_utility_memory_free(endpoints_pool->ux_slave_endpoint_transfer_request
 8002a60:	f000 fa32 	bl	8002ec8 <_ux_utility_memory_free>
 8002a64:	e7f1      	b.n	8002a4a <_ux_device_stack_initialize+0x19e>
		}

		_ux_utility_memory_free(device->ux_slave_device_endpoints_pool);
 8002a66:	f000 fa2f 	bl	8002ec8 <_ux_utility_memory_free>
	}

	/* Free device -> ux_slave_device_interfaces_pool. */
	if (device->ux_slave_device_interfaces_pool)
 8002a6a:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8002a6e:	b108      	cbz	r0, 8002a74 <_ux_device_stack_initialize+0x1c8>
		_ux_utility_memory_free(device->ux_slave_device_interfaces_pool);
 8002a70:	f000 fa2a 	bl	8002ec8 <_ux_utility_memory_free>

	/* Free device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
	 * 		.ux_slave_transfer_request_data_pointer. */
	if (device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
			.ux_slave_transfer_request_data_pointer)
 8002a74:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
 8002a78:	b108      	cbz	r0, 8002a7e <_ux_device_stack_initialize+0x1d2>
		_ux_utility_memory_free(
 8002a7a:	f000 fa25 	bl	8002ec8 <_ux_utility_memory_free>
				device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
						.ux_slave_transfer_request_data_pointer);

	/* Free _ux_system_slave -> ux_system_slave_class_array. */
	_ux_utility_memory_free(_ux_system_slave->ux_system_slave_class_array);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <_ux_device_stack_initialize+0x1ec>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8002a86:	f000 fa1f 	bl	8002ec8 <_ux_utility_memory_free>

	/* Return completion status. */
	return (status);
}
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (UX_MEMORY_INSUFFICIENT);
 8002a90:	f04f 0812 	mov.w	r8, #18
 8002a94:	e7f9      	b.n	8002a8a <_ux_device_stack_initialize+0x1de>
 8002a96:	bf00      	nop
 8002a98:	20002b80 	.word	0x20002b80
 8002a9c:	0800b498 	.word	0x0800b498

08002aa0 <_ux_device_stack_interface_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	4606      	mov	r6, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <_ux_device_stack_interface_delete+0x40>)
 8002aa6:	681f      	ldr	r7, [r3, #0]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 8002aa8:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8002aaa:	e00d      	b.n	8002ac8 <_ux_device_stack_interface_delete+0x28>

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8002aac:	6a65      	ldr	r5, [r4, #36]	; 0x24
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <_ux_device_stack_interface_delete+0x40>)
 8002ab0:	6818      	ldr	r0, [r3, #0]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8002ab2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8002aba:	2300      	movs	r3, #0
 8002abc:	6023      	str	r3, [r4, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8002abe:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8002ac0:	6263      	str	r3, [r4, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8002ac2:	62a3      	str	r3, [r4, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8002ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8002ac6:	462c      	mov	r4, r5
    while (next_endpoint != UX_NULL)
 8002ac8:	2c00      	cmp	r4, #0
 8002aca:	d1ef      	bne.n	8002aac <_ux_device_stack_interface_delete+0xc>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8002acc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ace:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	6070      	str	r0, [r6, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8002ad6:	60b0      	str	r0, [r6, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 8002ad8:	6330      	str	r0, [r6, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8002ada:	6370      	str	r0, [r6, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 8002adc:	6030      	str	r0, [r6, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 8002ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae0:	20002b80 	.word	0x20002b80

08002ae4 <_ux_device_stack_set_feature>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <_ux_device_stack_set_feature+0x68>)
 8002ae8:	681d      	ldr	r5, [r3, #0]
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;

	UX_SLAVE_INTERFACE* interface;

	/* The feature can be for either the device or the endpoint. */
	switch (request_type & UX_REQUEST_TARGET)
 8002aea:	f010 0003 	ands.w	r0, r0, #3
 8002aee:	d00b      	beq.n	8002b08 <_ux_device_stack_set_feature+0x24>
 8002af0:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8002af4:	4614      	mov	r4, r2
 8002af6:	2802      	cmp	r0, #2
 8002af8:	d012      	beq.n	8002b20 <_ux_device_stack_set_feature+0x3c>
			/* We get here when the endpoint is wrong. Should not happen though. */
			/* Intentionally fall through into the default case. */
			/* fall through */
		default:
			/* We stall the command. */
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8002afa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002afc:	4632      	mov	r2, r6
 8002afe:	2114      	movs	r1, #20
 8002b00:	4628      	mov	r0, r5
 8002b02:	4798      	blx	r3

			/* No more work to do here. The command failed but the upper layer does not depend on it. */
			return (UX_SUCCESS);
 8002b04:	2000      	movs	r0, #0
	}

	/* Return the function status. */
	return (UX_SUCCESS);
}
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
			if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8002b08:	2901      	cmp	r1, #1
 8002b0a:	d001      	beq.n	8002b10 <_ux_device_stack_set_feature+0x2c>
	return (UX_SUCCESS);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	e7fa      	b.n	8002b06 <_ux_device_stack_set_feature+0x22>
				if (_ux_system_slave->ux_system_slave_remote_wakeup_capability)
 8002b10:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 8002b14:	b1bb      	cbz	r3, 8002b46 <_ux_device_stack_set_feature+0x62>
					_ux_system_slave->ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
					return (UX_SUCCESS);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	e7f2      	b.n	8002b06 <_ux_device_stack_set_feature+0x22>
			interface = device->ux_slave_device_first_interface;
 8002b20:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
			while (interface != UX_NULL)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d0e8      	beq.n	8002afa <_ux_device_stack_set_feature+0x16>
				UX_SLAVE_ENDPOINT* endpoint_target = interface->ux_slave_interface_first_endpoint;
 8002b28:	6b42      	ldr	r2, [r0, #52]	; 0x34
				while (endpoint_target != UX_NULL)
 8002b2a:	b152      	cbz	r2, 8002b42 <_ux_device_stack_set_feature+0x5e>
					if (endpoint_target->ux_slave_endpoint_descriptor.bEndpointAddress
 8002b2c:	6951      	ldr	r1, [r2, #20]
 8002b2e:	42a1      	cmp	r1, r4
 8002b30:	d001      	beq.n	8002b36 <_ux_device_stack_set_feature+0x52>
					endpoint_target = endpoint_target->ux_slave_endpoint_next_endpoint;
 8002b32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b34:	e7f9      	b.n	8002b2a <_ux_device_stack_set_feature+0x46>
						dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8002b36:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8002b38:	2114      	movs	r1, #20
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	47a0      	blx	r4
						return (UX_SUCCESS);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e7e1      	b.n	8002b06 <_ux_device_stack_set_feature+0x22>
				interface = interface->ux_slave_interface_next_interface;
 8002b42:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002b44:	e7ee      	b.n	8002b24 <_ux_device_stack_set_feature+0x40>
					return (UX_FUNCTION_NOT_SUPPORTED);
 8002b46:	2054      	movs	r0, #84	; 0x54
 8002b48:	e7dd      	b.n	8002b06 <_ux_device_stack_set_feature+0x22>
 8002b4a:	bf00      	nop
 8002b4c:	20002b80 	.word	0x20002b80

08002b50 <_ux_device_stack_transfer_request>:
		ULONG host_length)
{
	TX_INTERRUPT_SAVE_AREA

	/* Do we have to skip this transfer?  */
	if (transfer_request->ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8002b50:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d051      	beq.n	8002bfa <_ux_device_stack_transfer_request+0xaa>
{
 8002b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002b5a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002b5e:	b672      	cpsid	i
	/* Disable interrupts to prevent the disconnection ISR from preempting us
	 * while we check the device state and set the transfer status. */
	TX_DISABLE

	/* Get the device state. */
	ULONG device_state = _ux_system_slave->ux_system_slave_device.ux_slave_device_state;
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <_ux_device_stack_transfer_request+0xb0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED. */
	if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
			|| (device_state == UX_DEVICE_CONFIGURED))
 8002b66:	3b01      	subs	r3, #1
	if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d821      	bhi.n	8002bb0 <_ux_device_stack_transfer_request+0x60>
 8002b6c:	4617      	mov	r7, r2
 8002b6e:	460d      	mov	r5, r1
 8002b70:	4604      	mov	r4, r0
		/* Set the transfer to pending. */
		transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8002b72:	2301      	movs	r3, #1
 8002b74:	6003      	str	r3, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002b76:	f386 8810 	msr	PRIMASK, r6
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <_ux_device_stack_transfer_request+0xb0>)
 8002b7c:	f8d3 8000 	ldr.w	r8, [r3]

	/* Get the endpoint associated with this transaction. */
	UX_SLAVE_ENDPOINT* endpoint = transfer_request->ux_slave_transfer_request_endpoint;
 8002b80:	6886      	ldr	r6, [r0, #8]

	/* If the endpoint is non Control, check the endpoint direction and set the data phase direction. */
	if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE)
 8002b82:	69b3      	ldr	r3, [r6, #24]
 8002b84:	f013 0f03 	tst.w	r3, #3
 8002b88:	d119      	bne.n	8002bbe <_ux_device_stack_transfer_request+0x6e>
	}

	/* See if we need to force a zero length packet at the end of the transfer. This happens on
	 * a DATA IN and when the host requested length is not met and the last packet is on a boundary.
	 * If slave_length is zero, then it is a explicit ZLP request, no need to force ZLP. */
	if ((transfer_request->ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8002b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d023      	beq.n	8002bd8 <_ux_device_stack_transfer_request+0x88>
		transfer_request->ux_slave_transfer_request_force_zlp = UX_TRUE;
	}
	else
	{
		/* Condition is not met, do not force a Zero Length Packet. */
		transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	6523      	str	r3, [r4, #80]	; 0x50
	}

	/* Reset the number of bytes sent/received. */
	transfer_request->ux_slave_transfer_request_actual_length = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61a3      	str	r3, [r4, #24]

	/* Determine how many bytes to send in this transaction.
	 * We keep track of the original length and have a working length. */
	transfer_request->ux_slave_transfer_request_requested_length = slave_length;
 8002b98:	6165      	str	r5, [r4, #20]
	transfer_request->ux_slave_transfer_request_in_transfer_length = slave_length;
 8002b9a:	61e5      	str	r5, [r4, #28]

	/* Save the buffer pointer. */
	transfer_request->ux_slave_transfer_request_current_data_pointer =
			transfer_request->ux_slave_transfer_request_data_pointer;
 8002b9c:	68e3      	ldr	r3, [r4, #12]
	transfer_request->ux_slave_transfer_request_current_data_pointer =
 8002b9e:	6123      	str	r3, [r4, #16]

	/* Call the DCD driver transfer function.   */
	UINT status = dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8002ba0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	210c      	movs	r1, #12
 8002ba8:	4640      	mov	r0, r8
 8002baa:	4798      	blx	r3

	/* And return the status. */
	return (status);
}
 8002bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bb0:	f386 8810 	msr	PRIMASK, r6
		return (UX_TRANSFER_NOT_READY);
 8002bb4:	2025      	movs	r0, #37	; 0x25
 8002bb6:	e7f9      	b.n	8002bac <_ux_device_stack_transfer_request+0x5c>
			_ux_utility_delay_ms(100);
 8002bb8:	2064      	movs	r0, #100	; 0x64
 8002bba:	f000 f893 	bl	8002ce4 <_ux_utility_delay_ms>
		while (endpoint->ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8002bbe:	6873      	ldr	r3, [r6, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d0f9      	beq.n	8002bb8 <_ux_device_stack_transfer_request+0x68>
		if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8002bc4:	6973      	ldr	r3, [r6, #20]
 8002bc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002bca:	d002      	beq.n	8002bd2 <_ux_device_stack_transfer_request+0x82>
			transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	6263      	str	r3, [r4, #36]	; 0x24
 8002bd0:	e7db      	b.n	8002b8a <_ux_device_stack_transfer_request+0x3a>
			transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_IN;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8002bd6:	e7d8      	b.n	8002b8a <_ux_device_stack_transfer_request+0x3a>
			(slave_length != 0) && (host_length != slave_length) &&
 8002bd8:	1bef      	subs	r7, r5, r7
 8002bda:	bf18      	it	ne
 8002bdc:	2701      	movne	r7, #1
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d0d6      	beq.n	8002b90 <_ux_device_stack_transfer_request+0x40>
 8002be2:	2f00      	cmp	r7, #0
 8002be4:	d0d4      	beq.n	8002b90 <_ux_device_stack_transfer_request+0x40>
			(slave_length % endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8002be6:	69f2      	ldr	r2, [r6, #28]
 8002be8:	fbb5 f3f2 	udiv	r3, r5, r2
 8002bec:	fb02 5313 	mls	r3, r2, r3, r5
			(slave_length != 0) && (host_length != slave_length) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1cd      	bne.n	8002b90 <_ux_device_stack_transfer_request+0x40>
		transfer_request->ux_slave_transfer_request_force_zlp = UX_TRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	6523      	str	r3, [r4, #80]	; 0x50
 8002bf8:	e7cc      	b.n	8002b94 <_ux_device_stack_transfer_request+0x44>
		return (UX_SUCCESS);
 8002bfa:	2000      	movs	r0, #0
}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20002b80 	.word	0x20002b80

08002c04 <_ux_system_error_handler>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8002c04:	b510      	push	{r4, lr}
	/* Save the last system error code.  */
	_ux_system->ux_system_last_error = error_code;
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <_ux_system_error_handler+0x18>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58

	/* Increment the total number of system errors.  */
	_ux_system->ux_system_error_count++;
 8002c0c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8002c0e:	3401      	adds	r4, #1
 8002c10:	65dc      	str	r4, [r3, #92]	; 0x5c

	/* Is there an application call back function to call ? */
	if (_ux_system->ux_system_error_callback_function != UX_NULL)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	b103      	cbz	r3, 8002c18 <_ux_system_error_handler+0x14>
	{
		/* The callback function is defined, call it.  */
		_ux_system->ux_system_error_callback_function(system_level, system_context, error_code);
 8002c16:	4798      	blx	r3
	}
}
 8002c18:	bd10      	pop	{r4, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20002b88 	.word	0x20002b88

08002c20 <_ux_system_initialize>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_initialize(VOID* regular_memory_pool_start, ULONG regular_memory_size,
		VOID* cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	460f      	mov	r7, r1
 8002c26:	4615      	mov	r5, r2
 8002c28:	461e      	mov	r6, r3
	/* Reset memory block */
	_ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size);
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	f000 f9cf 	bl	8002fd0 <_ux_utility_memory_set>

	/* Set the _ux_system structure at the start of our regular memory */
	_ux_system = (UX_SYSTEM*)regular_memory_pool_start;
 8002c32:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <_ux_system_initialize+0xb0>)
 8002c34:	601c      	str	r4, [r3, #0]

	/*--------------------------------------------------------------------------------------------*/

#ifndef UX_DEVICE_SIDE_ONLY
	/* Set the _ux_system_host structure. */
	_ux_system_host = (UX_SYSTEM_HOST*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8002c36:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <_ux_system_initialize+0xb4>)
 8002c3c:	6011      	str	r1, [r2, #0]
	memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_HOST);
#endif

#ifndef UX_HOST_SIDE_ONLY
	/* Set the _ux_system_slave structure. */
	_ux_system_slave = (UX_SYSTEM_SLAVE*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8002c3e:	f504 7158 	add.w	r1, r4, #864	; 0x360
 8002c42:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <_ux_system_initialize+0xb8>)
 8002c44:	6011      	str	r1, [r2, #0]
	memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

	/* Set the cache safe memory for the dynamic pool */
	_ux_system->ux_system_regular_memory_pool_start =
			(UX_MEMORY_BLOCK*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8002c46:	f204 5254 	addw	r2, r4, #1364	; 0x554
	_ux_system->ux_system_regular_memory_pool_start =
 8002c4a:	6022      	str	r2, [r4, #0]

	/* Make sure the regular memory pool is aligned properly */
	ALIGN_TYPE int_memory_pool_start = (ALIGN_TYPE)_ux_system->ux_system_regular_memory_pool_start;
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	6813      	ldr	r3, [r2, #0]
	int_memory_pool_start += UX_ALIGN_MIN;
 8002c50:	330f      	adds	r3, #15
	int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8002c52:	f023 030f 	bic.w	r3, r3, #15

	/* Set the end of the regular memory pool. */
	VOID* regular_memory_pool_end =
 8002c56:	443c      	add	r4, r7
			(void*)(((UCHAR*)regular_memory_pool_start) + regular_memory_size);

	/* Check if we have memory available. */
	if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d936      	bls.n	8002cca <_ux_system_initialize+0xaa>
		/* No memory available. */
		return (UX_MEMORY_INSUFFICIENT);
	}

	/* Now, we have a project structure allocated, save the regular memory allocation details */
	_ux_system->ux_system_regular_memory_pool_size = (ULONG)(((ALIGN_TYPE)regular_memory_pool_end)
 8002c5c:	1ae4      	subs	r4, r4, r3
 8002c5e:	6054      	str	r4, [r2, #4]
			- int_memory_pool_start);
	_ux_system->ux_system_regular_memory_pool_free = _ux_system->ux_system_regular_memory_pool_size;
 8002c60:	6094      	str	r4, [r2, #8]
	_ux_system->ux_system_regular_memory_pool_start = (UX_MEMORY_BLOCK*)int_memory_pool_start;
 8002c62:	6013      	str	r3, [r2, #0]

	/*--------------------------------------------------------------------------------------------*/

	/* Build the first free memory block */
	UX_MEMORY_BLOCK* memory_block = _ux_system->ux_system_regular_memory_pool_start;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <_ux_system_initialize+0xb0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
	memory_block->ux_memory_block_size = _ux_system->ux_system_regular_memory_pool_size
 8002c6a:	685b      	ldr	r3, [r3, #4]
			- (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002c6c:	3b10      	subs	r3, #16
	memory_block->ux_memory_block_size = _ux_system->ux_system_regular_memory_pool_size
 8002c6e:	6013      	str	r3, [r2, #0]
	memory_block->ux_memory_block_status = UX_MEMORY_UNUSED;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <_ux_system_initialize+0xbc>)
 8002c72:	6053      	str	r3, [r2, #4]

	/* Check the definition of the cache safe pool. If the application or controller do not require
	 * any cache safe memory, define the cached safe memory region as the regular memory region. */
	if (cache_safe_memory_pool_start == UX_NULL)
 8002c74:	b1f5      	cbz	r5, 8002cb4 <_ux_system_initialize+0x94>
	}
	else
	{
		/* Make sure the cache safe memory pool is aligned properly */
		int_memory_pool_start = (ALIGN_TYPE)cache_safe_memory_pool_start;
		int_memory_pool_start += UX_ALIGN_MIN;
 8002c76:	f105 000f 	add.w	r0, r5, #15
		int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8002c7a:	f020 000f 	bic.w	r0, r0, #15

		/* Save the cache safe memory allocation details */
		_ux_system->ux_system_cache_safe_memory_pool_size = cache_safe_memory_size - UX_ALIGN_MIN;
 8002c7e:	4c14      	ldr	r4, [pc, #80]	; (8002cd0 <_ux_system_initialize+0xb0>)
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	f1a6 020f 	sub.w	r2, r6, #15
 8002c86:	611a      	str	r2, [r3, #16]
		_ux_system->ux_system_cache_safe_memory_pool_free = _ux_system
 8002c88:	615a      	str	r2, [r3, #20]
				->ux_system_cache_safe_memory_pool_size;
		_ux_system->ux_system_cache_safe_memory_pool_start =
 8002c8a:	60d8      	str	r0, [r3, #12]
				(UX_MEMORY_BLOCK*)int_memory_pool_start;

		/* Reset this memory block */
		_ux_utility_memory_set(_ux_system->ux_system_cache_safe_memory_pool_start, 0,
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f000 f99f 	bl	8002fd0 <_ux_utility_memory_set>
				_ux_system->ux_system_cache_safe_memory_pool_size);

		/* Build the first free memory block */
		memory_block = _ux_system->ux_system_cache_safe_memory_pool_start;
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
		memory_block->ux_memory_block_size = _ux_system->ux_system_cache_safe_memory_pool_size
 8002c96:	691b      	ldr	r3, [r3, #16]
				- (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002c98:	3b10      	subs	r3, #16
		memory_block->ux_memory_block_size = _ux_system->ux_system_cache_safe_memory_pool_size
 8002c9a:	6013      	str	r3, [r2, #0]
		memory_block->ux_memory_block_status = UX_MEMORY_UNUSED;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <_ux_system_initialize+0xbc>)
 8002c9e:	6053      	str	r3, [r2, #4]
	/* Keep the size in system structure variable. */
	_ux_system->ux_system_debug_log_size = UX_DEBUG_LOG_SIZE;
#endif

	/* Create the Mutex object used by USBX to control critical sections. */
	UINT status = _ux_utility_mutex_create(&_ux_system->ux_system_mutex, "ux_system_mutex");
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <_ux_system_initialize+0xb0>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <_ux_system_initialize+0xc0>)
 8002ca6:	301c      	adds	r0, #28
 8002ca8:	f000 f99a 	bl	8002fe0 <_ux_utility_mutex_create>
	if (status != UX_SUCCESS)
 8002cac:	4603      	mov	r3, r0
 8002cae:	b950      	cbnz	r0, 8002cc6 <_ux_system_initialize+0xa6>
		return (UX_MUTEX_ERROR);

	return (UX_SUCCESS);
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				->ux_system_regular_memory_pool_size;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <_ux_system_initialize+0xb0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
		_ux_system->ux_system_cache_safe_memory_pool_size = _ux_system
 8002cba:	611a      	str	r2, [r3, #16]
				->ux_system_regular_memory_pool_free;
 8002cbc:	689a      	ldr	r2, [r3, #8]
		_ux_system->ux_system_cache_safe_memory_pool_free = _ux_system
 8002cbe:	615a      	str	r2, [r3, #20]
				->ux_system_regular_memory_pool_start;
 8002cc0:	681a      	ldr	r2, [r3, #0]
		_ux_system->ux_system_cache_safe_memory_pool_start = _ux_system
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	e7ec      	b.n	8002ca0 <_ux_system_initialize+0x80>
		return (UX_MUTEX_ERROR);
 8002cc6:	2317      	movs	r3, #23
 8002cc8:	e7f2      	b.n	8002cb0 <_ux_system_initialize+0x90>
		return (UX_MEMORY_INSUFFICIENT);
 8002cca:	2312      	movs	r3, #18
 8002ccc:	e7f0      	b.n	8002cb0 <_ux_system_initialize+0x90>
 8002cce:	bf00      	nop
 8002cd0:	20002b88 	.word	0x20002b88
 8002cd4:	20002b8c 	.word	0x20002b8c
 8002cd8:	20002b80 	.word	0x20002b80
 8002cdc:	12345678 	.word	0x12345678
 8002ce0:	0800b4b8 	.word	0x0800b4b8

08002ce4 <_ux_utility_delay_ms>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_delay_ms(ULONG ms_wait)
{
 8002ce4:	b508      	push	{r3, lr}
	/* translate ms into ticks. */
	ULONG ticks = (ms_wait * UX_PERIODIC_RATE) / 1000;
 8002ce6:	2364      	movs	r3, #100	; 0x64
 8002ce8:	fb03 f000 	mul.w	r0, r3, r0
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <_ux_utility_delay_ms+0x18>)
 8002cee:	fba3 3000 	umull	r3, r0, r3, r0
 8002cf2:	0980      	lsrs	r0, r0, #6

	/* For safety add 1 to ticks. */
	ticks++;

	/* Call ThreadX sleep function. */
	tx_thread_sleep(ticks);
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	f006 f9c7 	bl	8009088 <_tx_thread_sleep>

	/* Return completion status. */
	return;
}
 8002cfa:	bd08      	pop	{r3, pc}
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <_ux_utility_descriptor_parse>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_descriptor_parse(UCHAR* raw_descriptor, UCHAR* descriptor_structure,
		UINT descriptor_entries, UCHAR* descriptor)
{
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	4605      	mov	r5, r0
 8002d04:	461c      	mov	r4, r3
	/* Loop on all the entries in this descriptor. */
	while (descriptor_entries--)
 8002d06:	e007      	b.n	8002d18 <_ux_utility_descriptor_parse+0x18>
				*((ULONG*)descriptor) = _ux_utility_long_get(raw_descriptor);
				raw_descriptor += 4;
				break;

			case 2:
				*((ULONG*)descriptor) = (ULONG)_ux_utility_short_get(raw_descriptor);
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f000 f99f 	bl	800304c <_ux_utility_short_get>
 8002d0e:	6020      	str	r0, [r4, #0]
				raw_descriptor += 2;
 8002d10:	3502      	adds	r5, #2
				*((ULONG*)descriptor) = (ULONG)*raw_descriptor;
				raw_descriptor++;
		}

		/* Add the size of the component to the destination. */
		descriptor += 4;
 8002d12:	3404      	adds	r4, #4
	while (descriptor_entries--)
 8002d14:	4632      	mov	r2, r6
		switch (*descriptor_structure++)
 8002d16:	4639      	mov	r1, r7
	while (descriptor_entries--)
 8002d18:	1e56      	subs	r6, r2, #1
 8002d1a:	b17a      	cbz	r2, 8002d3c <_ux_utility_descriptor_parse+0x3c>
		switch (*descriptor_structure++)
 8002d1c:	1c4f      	adds	r7, r1, #1
 8002d1e:	780b      	ldrb	r3, [r1, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d0f1      	beq.n	8002d08 <_ux_utility_descriptor_parse+0x8>
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d105      	bne.n	8002d34 <_ux_utility_descriptor_parse+0x34>
				*((ULONG*)descriptor) = _ux_utility_long_get(raw_descriptor);
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 f808 	bl	8002d3e <_ux_utility_long_get>
 8002d2e:	6020      	str	r0, [r4, #0]
				raw_descriptor += 4;
 8002d30:	3504      	adds	r5, #4
				break;
 8002d32:	e7ee      	b.n	8002d12 <_ux_utility_descriptor_parse+0x12>
				*((ULONG*)descriptor) = (ULONG)*raw_descriptor;
 8002d34:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	e7ea      	b.n	8002d12 <_ux_utility_descriptor_parse+0x12>
	}

	/* Return to caller. */
	return;
}
 8002d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d3e <_ux_utility_long_get>:
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8002d3e:	7803      	ldrb	r3, [r0, #0]
    value |=  (ULONG)*address++ << 8;
 8002d40:	7842      	ldrb	r2, [r0, #1]
 8002d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    value |=  (ULONG)*address++ << 16;
 8002d46:	7882      	ldrb	r2, [r0, #2]
 8002d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    value |=  (ULONG)*address << 24;
 8002d4c:	78c0      	ldrb	r0, [r0, #3]

    /* Return 32-bit value.  */
    return(value);
}
 8002d4e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8002d52:	4770      	bx	lr

08002d54 <_ux_utility_long_get_big_endian>:

ULONG  value;


    /* We read a byte at a time from the address.  */
    value =  (ULONG) ((*address++) << 24);
 8002d54:	7802      	ldrb	r2, [r0, #0]
    value |=  (ULONG) ((*address++) << 16);
 8002d56:	7843      	ldrb	r3, [r0, #1]
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    value |=  (ULONG) ((*address++) << 8);
 8002d5e:	7882      	ldrb	r2, [r0, #2]
 8002d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    value |=  (ULONG) *address;
 8002d64:	78c0      	ldrb	r0, [r0, #3]

    /* Return 32-bit value.  */
    return(value);
}
 8002d66:	4318      	orrs	r0, r3
 8002d68:	4770      	bx	lr
	...

08002d6c <_ux_utility_memory_allocate>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	4606      	mov	r6, r0
 8002d70:	460f      	mov	r7, r1
 8002d72:	4614      	mov	r4, r2
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_utility_mutex_on(&_ux_system -> ux_system_mutex);
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <_ux_utility_memory_allocate+0x11c>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	301c      	adds	r0, #28
 8002d7a:	f000 f944 	bl	8003006 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8002d7e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002d82:	d003      	beq.n	8002d8c <_ux_utility_memory_allocate+0x20>
        memory_alignment = UX_NO_ALIGN;
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8002d84:	2e0e      	cmp	r6, #14
 8002d86:	d802      	bhi.n	8002d8e <_ux_utility_memory_allocate+0x22>
        memory_alignment =  UX_ALIGN_MIN;
 8002d88:	260f      	movs	r6, #15
 8002d8a:	e000      	b.n	8002d8e <_ux_utility_memory_allocate+0x22>
 8002d8c:	260f      	movs	r6, #15

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
    memory_alignment++;
 8002d8e:	1c75      	adds	r5, r6, #1
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8002d90:	340f      	adds	r4, #15
 8002d92:	f024 040f 	bic.w	r4, r4, #15
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8002d96:	1931      	adds	r1, r6, r4
 8002d98:	3110      	adds	r1, #16
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f000 f8ee 	bl	8002f7c <_ux_utility_memory_free_block_best_get>

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8002da0:	4603      	mov	r3, r0
 8002da2:	b350      	cbz	r0, 8002dfa <_ux_utility_memory_allocate+0x8e>
        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8002da4:	f100 0210 	add.w	r2, r0, #16

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8002da8:	4216      	tst	r6, r2
 8002daa:	d132      	bne.n	8002e12 <_ux_utility_memory_allocate+0xa6>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8002dac:	f104 0510 	add.w	r5, r4, #16
 8002db0:	1941      	adds	r1, r0, r5
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8002db2:	6882      	ldr	r2, [r0, #8]
 8002db4:	608a      	str	r2, [r1, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8002db6:	60c8      	str	r0, [r1, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002db8:	6802      	ldr	r2, [r0, #0]
 8002dba:	1b12      	subs	r2, r2, r4
 8002dbc:	3a10      	subs	r2, #16
 8002dbe:	5142      	str	r2, [r0, r5]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8002dc0:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <_ux_utility_memory_allocate+0x120>)
 8002dc2:	604a      	str	r2, [r1, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8002dc4:	6004      	str	r4, [r0, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8002dc6:	6081      	str	r1, [r0, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED;
 8002dc8:	4a31      	ldr	r2, [pc, #196]	; (8002e90 <_ux_utility_memory_allocate+0x124>)
 8002dca:	6042      	str	r2, [r0, #4]
        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8002dcc:	f103 0610 	add.w	r6, r3, #16

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested);
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f000 f8fb 	bl	8002fd0 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <_ux_utility_memory_allocate+0x11c>)
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68c2      	ldr	r2, [r0, #12]
 8002de0:	6803      	ldr	r3, [r0, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d047      	beq.n	8002e76 <_ux_utility_memory_allocate+0x10a>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
    }
    else
    {

       switch (memory_cache_flag)
 8002de6:	2f01      	cmp	r7, #1
 8002de8:	d149      	bne.n	8002e7e <_ux_utility_memory_allocate+0x112>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8002dea:	6943      	ldr	r3, [r0, #20]
 8002dec:	1b5d      	subs	r5, r3, r5
 8002dee:	6145      	str	r5, [r0, #20]

        }
    }

    /* Release the protection.  */
    _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8002df0:	301c      	adds	r0, #28
 8002df2:	f000 f904 	bl	8002ffe <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
}                                
 8002df6:	4630      	mov	r0, r6
 8002df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <_ux_utility_memory_allocate+0x11c>)
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	301c      	adds	r0, #28
 8002e00:	f000 f8fd 	bl	8002ffe <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8002e04:	2212      	movs	r2, #18
 8002e06:	2108      	movs	r1, #8
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f7ff fefb 	bl	8002c04 <_ux_system_error_handler>
        return(UX_NULL);
 8002e0e:	2600      	movs	r6, #0
 8002e10:	e7f1      	b.n	8002df6 <_ux_utility_memory_allocate+0x8a>
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002e12:	f102 0010 	add.w	r0, r2, #16
        int_memory_buffer +=  memory_alignment - 1;
 8002e16:	4428      	add	r0, r5
 8002e18:	3801      	subs	r0, #1
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8002e1a:	ea20 0006 	bic.w	r0, r0, r6
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8002e1e:	f1a0 0110 	sub.w	r1, r0, #16
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8002e22:	60cb      	str	r3, [r1, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8002e24:	689d      	ldr	r5, [r3, #8]
 8002e26:	608d      	str	r5, [r1, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8002e28:	681d      	ldr	r5, [r3, #0]
 8002e2a:	f840 5c10 	str.w	r5, [r0, #-16]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED;
 8002e2e:	4d18      	ldr	r5, [pc, #96]	; (8002e90 <_ux_utility_memory_allocate+0x124>)
 8002e30:	604d      	str	r5, [r1, #4]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8002e32:	6099      	str	r1, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8002e34:	1a8a      	subs	r2, r1, r2
 8002e36:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8002e38:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	3b10      	subs	r3, #16
 8002e40:	f840 3c10 	str.w	r3, [r0, #-16]
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8002e44:	1b1b      	subs	r3, r3, r4
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d910      	bls.n	8002e6c <_ux_utility_memory_allocate+0x100>
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8002e4a:	190d      	adds	r5, r1, r4
 8002e4c:	f105 0210 	add.w	r2, r5, #16
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8002e50:	688e      	ldr	r6, [r1, #8]
 8002e52:	61ae      	str	r6, [r5, #24]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8002e54:	61e9      	str	r1, [r5, #28]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002e56:	f1a3 0610 	sub.w	r6, r3, #16
 8002e5a:	612e      	str	r6, [r5, #16]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8002e5c:	4d0b      	ldr	r5, [pc, #44]	; (8002e8c <_ux_utility_memory_allocate+0x120>)
 8002e5e:	6055      	str	r5, [r2, #4]
            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8002e60:	608a      	str	r2, [r1, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8002e62:	f850 2c10 	ldr.w	r2, [r0, #-16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f840 3c10 	str.w	r3, [r0, #-16]
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002e6c:	f850 5c10 	ldr.w	r5, [r0, #-16]
 8002e70:	3510      	adds	r5, #16
        memory_block =  new_memory_block;
 8002e72:	460b      	mov	r3, r1
 8002e74:	e7aa      	b.n	8002dcc <_ux_utility_memory_allocate+0x60>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8002e76:	6883      	ldr	r3, [r0, #8]
 8002e78:	1b5d      	subs	r5, r3, r5
 8002e7a:	6085      	str	r5, [r0, #8]
 8002e7c:	e7b8      	b.n	8002df0 <_ux_utility_memory_allocate+0x84>
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8002e7e:	6883      	ldr	r3, [r0, #8]
 8002e80:	1b5d      	subs	r5, r3, r5
 8002e82:	6085      	str	r5, [r0, #8]
            break;
 8002e84:	e7b4      	b.n	8002df0 <_ux_utility_memory_allocate+0x84>
 8002e86:	bf00      	nop
 8002e88:	20002b88 	.word	0x20002b88
 8002e8c:	12345678 	.word	0x12345678
 8002e90:	87654321 	.word	0x87654321

08002e94 <_ux_utility_memory_allocate_mulc_safe>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align, ULONG cache, ULONG size_mul_v,
		ULONG size_mul_c)
{
 8002e94:	b5d0      	push	{r4, r6, r7, lr}
	return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8002e96:	2400      	movs	r4, #0
 8002e98:	fba2 6703 	umull	r6, r7, r2, r3
 8002e9c:	b92f      	cbnz	r7, 8002eaa <_ux_utility_memory_allocate_mulc_safe+0x16>
 8002e9e:	b934      	cbnz	r4, 8002eae <_ux_utility_memory_allocate_mulc_safe+0x1a>
 8002ea0:	fb03 f202 	mul.w	r2, r3, r2
 8002ea4:	f7ff ff62 	bl	8002d6c <_ux_utility_memory_allocate>
}
 8002ea8:	bdd0      	pop	{r4, r6, r7, pc}
	return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8002eaa:	2401      	movs	r4, #1
 8002eac:	e7f7      	b.n	8002e9e <_ux_utility_memory_allocate_mulc_safe+0xa>
 8002eae:	2000      	movs	r0, #0
 8002eb0:	e7fa      	b.n	8002ea8 <_ux_utility_memory_allocate_mulc_safe+0x14>

08002eb2 <_ux_utility_memory_copy>:
	/* Setup byte oriented source and destination pointers. */
	UCHAR* source = (UCHAR*)memory_source;
	UCHAR* destination = (UCHAR*)memory_destination;

	/* Loop to perform the copy. */
	while (length--)
 8002eb2:	e004      	b.n	8002ebe <_ux_utility_memory_copy+0xc>
	{
		/* Copy one byte. */
		*destination++ = *source++;
 8002eb4:	780a      	ldrb	r2, [r1, #0]
 8002eb6:	7002      	strb	r2, [r0, #0]
 8002eb8:	3001      	adds	r0, #1
 8002eba:	3101      	adds	r1, #1
	while (length--)
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	1e53      	subs	r3, r2, #1
 8002ec0:	2a00      	cmp	r2, #0
 8002ec2:	d1f7      	bne.n	8002eb4 <_ux_utility_memory_copy+0x2>
	}

	/* Return to caller. */
	return;
}
 8002ec4:	4770      	bx	lr
	...

08002ec8 <_ux_utility_memory_free>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4604      	mov	r4, r0
UX_MEMORY_BLOCK     *next_block;
ULONG               memory_size_returned;
UCHAR               *memory_address;

    /* Get the mutex as this is a critical section.  */
    _ux_utility_mutex_on(&_ux_system -> ux_system_mutex);
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <_ux_utility_memory_free+0xa8>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	301c      	adds	r0, #28
 8002ed2:	f000 f898 	bl	8003006 <_ux_utility_mutex_on>
    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002ed6:	f854 5c10 	ldr.w	r5, [r4, #-16]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != UX_MEMORY_USED)
 8002eda:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <_ux_utility_memory_free+0xac>)
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d10d      	bne.n	8002f00 <_ux_utility_memory_free+0x38>
 8002ee4:	f1a4 0110 	sub.w	r1, r4, #16
 8002ee8:	3510      	adds	r5, #16
        /* Return to caller.  */
        return;
    }

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <_ux_utility_memory_free+0xb0>)
 8002eec:	f844 3c0c 	str.w	r3, [r4, #-12]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8002ef0:	68cb      	ldr	r3, [r1, #12]
 8002ef2:	b183      	cbz	r3, 8002f16 <_ux_utility_memory_free+0x4e>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8002ef4:	6858      	ldr	r0, [r3, #4]
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <_ux_utility_memory_free+0xb0>)
 8002ef8:	4290      	cmp	r0, r2
 8002efa:	d10c      	bne.n	8002f16 <_ux_utility_memory_free+0x4e>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 8002efc:	4619      	mov	r1, r3
 8002efe:	e7f7      	b.n	8002ef0 <_ux_utility_memory_free+0x28>
        _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <_ux_utility_memory_free+0xa8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	301c      	adds	r0, #28
 8002f06:	f000 f87a 	bl	8002ffe <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 8002f0a:	2219      	movs	r2, #25
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f7ff fe78 	bl	8002c04 <_ux_system_error_handler>
        return;
 8002f14:	e02a      	b.n	8002f6c <_ux_utility_memory_free+0xa4>
            break;
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 8002f16:	688b      	ldr	r3, [r1, #8]
    while (next_block != UX_NULL)
 8002f18:	b173      	cbz	r3, 8002f38 <_ux_utility_memory_free+0x70>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status == UX_MEMORY_USED)
 8002f1a:	6858      	ldr	r0, [r3, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <_ux_utility_memory_free+0xac>)
 8002f1e:	4290      	cmp	r0, r2
 8002f20:	d008      	beq.n	8002f34 <_ux_utility_memory_free+0x6c>
            memory_block -> ux_memory_block_next =  next_block;
            next_block -> ux_memory_block_previous =  memory_block;
            break;
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	608a      	str	r2, [r1, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	6808      	ldr	r0, [r1, #0]
 8002f2a:	4402      	add	r2, r0
 8002f2c:	3210      	adds	r2, #16
 8002f2e:	600a      	str	r2, [r1, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	e7f1      	b.n	8002f18 <_ux_utility_memory_free+0x50>
            memory_block -> ux_memory_block_next =  next_block;
 8002f34:	608b      	str	r3, [r1, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 8002f36:	60d9      	str	r1, [r3, #12]
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <_ux_utility_memory_free+0xa8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	68c2      	ldr	r2, [r0, #12]
 8002f3e:	6803      	ldr	r3, [r0, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d009      	beq.n	8002f58 <_ux_utility_memory_free+0x90>

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d80b      	bhi.n	8002f60 <_ux_utility_memory_free+0x98>
 8002f48:	6842      	ldr	r2, [r0, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d907      	bls.n	8002f60 <_ux_utility_memory_free+0x98>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8002f50:	6883      	ldr	r3, [r0, #8]
 8002f52:	441d      	add	r5, r3
 8002f54:	6085      	str	r5, [r0, #8]
 8002f56:	e006      	b.n	8002f66 <_ux_utility_memory_free+0x9e>
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8002f58:	6883      	ldr	r3, [r0, #8]
 8002f5a:	441d      	add	r5, r3
 8002f5c:	6085      	str	r5, [r0, #8]
 8002f5e:	e002      	b.n	8002f66 <_ux_utility_memory_free+0x9e>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8002f60:	6943      	ldr	r3, [r0, #20]
 8002f62:	441d      	add	r5, r3
 8002f64:	6145      	str	r5, [r0, #20]
        
    }

    /* Release the protection.  */
    _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8002f66:	301c      	adds	r0, #28
 8002f68:	f000 f849 	bl	8002ffe <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
}
 8002f6c:	bd38      	pop	{r3, r4, r5, pc}
 8002f6e:	bf00      	nop
 8002f70:	20002b88 	.word	0x20002b88
 8002f74:	87654321 	.word	0x87654321
 8002f78:	12345678 	.word	0x12345678

08002f7c <_ux_utility_memory_free_block_best_get>:

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 8002f7c:	b118      	cbz	r0, 8002f86 <_ux_utility_memory_free_block_best_get+0xa>
 8002f7e:	2801      	cmp	r0, #1
 8002f80:	d008      	beq.n	8002f94 <_ux_utility_memory_free_block_best_get+0x18>
            break;
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8002f82:	2000      	movs	r0, #0
 8002f84:	4770      	bx	lr
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <_ux_utility_memory_free_block_best_get+0x4c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8002f8c:	2000      	movs	r0, #0
    while (memory_block != UX_NULL)
 8002f8e:	b1cb      	cbz	r3, 8002fc4 <_ux_utility_memory_free_block_best_get+0x48>
{
 8002f90:	b410      	push	{r4}
 8002f92:	e006      	b.n	8002fa2 <_ux_utility_memory_free_block_best_get+0x26>
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <_ux_utility_memory_free_block_best_get+0x4c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
            break;
 8002f9a:	e7f7      	b.n	8002f8c <_ux_utility_memory_free_block_best_get+0x10>
                    best_memory_block =  memory_block;
 8002f9c:	4618      	mov	r0, r3
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 8002f9e:	689b      	ldr	r3, [r3, #8]
    while (memory_block != UX_NULL)
 8002fa0:	b16b      	cbz	r3, 8002fbe <_ux_utility_memory_free_block_best_get+0x42>
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8002fa2:	685c      	ldr	r4, [r3, #4]
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <_ux_utility_memory_free_block_best_get+0x50>)
 8002fa6:	4294      	cmp	r4, r2
 8002fa8:	d1f9      	bne.n	8002f9e <_ux_utility_memory_free_block_best_get+0x22>
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	428a      	cmp	r2, r1
 8002fae:	d9f6      	bls.n	8002f9e <_ux_utility_memory_free_block_best_get+0x22>
                if (best_memory_block == UX_NULL)
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d0f3      	beq.n	8002f9c <_ux_utility_memory_free_block_best_get+0x20>
                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 8002fb4:	6804      	ldr	r4, [r0, #0]
 8002fb6:	42a2      	cmp	r2, r4
 8002fb8:	d2f1      	bcs.n	8002f9e <_ux_utility_memory_free_block_best_get+0x22>
                        best_memory_block =  memory_block;
 8002fba:	4618      	mov	r0, r3
 8002fbc:	e7ef      	b.n	8002f9e <_ux_utility_memory_free_block_best_get+0x22>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
}                                
 8002fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20002b88 	.word	0x20002b88
 8002fcc:	12345678 	.word	0x12345678

08002fd0 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 8002fd0:	e002      	b.n	8002fd8 <_ux_utility_memory_set+0x8>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8002fd2:	7001      	strb	r1, [r0, #0]
 8002fd4:	3001      	adds	r0, #1
    while(length--)
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	1e53      	subs	r3, r2, #1
 8002fda:	2a00      	cmp	r2, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <_ux_utility_memory_set+0x2>
    }

    /* Return to caller.  */
    return; 
}
 8002fde:	4770      	bx	lr

08002fe0 <_ux_utility_mutex_create>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_utility_mutex_create(TX_MUTEX* mutex, CHAR* mutex_name)
{
 8002fe0:	b510      	push	{r4, lr}
	/* Call ThreadX to create the Mutex object. */
	UINT status = tx_mutex_create(mutex, (CHAR* )mutex_name, TX_NO_INHERIT);
 8002fe2:	2334      	movs	r3, #52	; 0x34
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f006 fb95 	bl	8009714 <_txe_mutex_create>

	/* Check for status. */
	if (status != UX_SUCCESS)
 8002fea:	4604      	mov	r4, r0
 8002fec:	b908      	cbnz	r0, 8002ff2 <_ux_utility_mutex_create+0x12>
		UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)
	}

	/* Return completion status. */
	return (status);
}
 8002fee:	4620      	mov	r0, r4
 8002ff0:	bd10      	pop	{r4, pc}
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f7ff fe04 	bl	8002c04 <_ux_system_error_handler>
	return (status);
 8002ffc:	e7f7      	b.n	8002fee <_ux_utility_mutex_create+0xe>

08002ffe <_ux_utility_mutex_off>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_mutex_off(TX_MUTEX* mutex)
{
 8002ffe:	b508      	push	{r3, lr}
	/* Call ThreadX to release protection.  */
	tx_mutex_put(mutex);
 8003000:	f006 fc26 	bl	8009850 <_txe_mutex_put>

	/* Return to caller.  */
	return;
}
 8003004:	bd08      	pop	{r3, pc}

08003006 <_ux_utility_mutex_on>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_mutex_on(TX_MUTEX* mutex)
{
 8003006:	b508      	push	{r3, lr}
	/* Call ThreadX to get system mutex. */
	UINT status = tx_mutex_get(mutex, TX_WAIT_FOREVER);
 8003008:	f04f 31ff 	mov.w	r1, #4294967295
 800300c:	f006 fbec 	bl	80097e8 <_txe_mutex_get>

	/* Check for status. */
	if (status != UX_SUCCESS)
 8003010:	b900      	cbnz	r0, 8003014 <_ux_utility_mutex_on+0xe>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
	}

	/* Return to caller. */
	return;
}
 8003012:	bd08      	pop	{r3, pc}
 8003014:	4602      	mov	r2, r0
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8003016:	2108      	movs	r1, #8
 8003018:	2002      	movs	r0, #2
 800301a:	f7ff fdf3 	bl	8002c04 <_ux_system_error_handler>
	return;
 800301e:	e7f8      	b.n	8003012 <_ux_utility_mutex_on+0xc>

08003020 <_ux_utility_semaphore_create>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(TX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8003020:	b510      	push	{r4, lr}

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 8003022:	2320      	movs	r3, #32
 8003024:	f006 fc30 	bl	8009888 <_txe_semaphore_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8003028:	4604      	mov	r4, r0
 800302a:	b908      	cbnz	r0, 8003030 <_ux_utility_semaphore_create+0x10>

    }

    /* Return completion status.  */
    return(status);
}
 800302c:	4620      	mov	r0, r4
 800302e:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8003030:	4602      	mov	r2, r0
 8003032:	2108      	movs	r1, #8
 8003034:	2002      	movs	r0, #2
 8003036:	f7ff fde5 	bl	8002c04 <_ux_system_error_handler>
    return(status);
 800303a:	e7f7      	b.n	800302c <_ux_utility_semaphore_create+0xc>

0800303c <_ux_utility_semaphore_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(TX_SEMAPHORE *semaphore)
{
 800303c:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800303e:	f006 fc7d 	bl	800993c <_txe_semaphore_delete>

    /* Return completion status.  */
    return(status);
}
 8003042:	bd08      	pop	{r3, pc}

08003044 <_ux_utility_semaphore_put>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(TX_SEMAPHORE *semaphore)
{
 8003044:	b508      	push	{r3, lr}

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8003046:	f006 fcb7 	bl	80099b8 <_txe_semaphore_put>

    /* Return completion status.  */
    return(status);
}
 800304a:	bd08      	pop	{r3, pc}

0800304c <_ux_utility_short_get>:
/**************************************************************************/
ULONG _ux_utility_short_get(UCHAR* address)
{
	/* In order to make this function endian agnostic and memory alignment
	 * independent, we read a byte at a time from the address. */
	USHORT value = (USHORT)*address++;
 800304c:	7803      	ldrb	r3, [r0, #0]
	value |= (USHORT)(*address << 8);
 800304e:	7840      	ldrb	r0, [r0, #1]

	/* Return to caller. */
	return ((ULONG)value);
}
 8003050:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003054:	4770      	bx	lr

08003056 <_ux_utility_short_get_big_endian>:
{

USHORT  value;

    /* We read a byte at a time from the address.  */
    value =  (USHORT)((*address++) << 8);
 8003056:	7802      	ldrb	r2, [r0, #0]
    value =  (USHORT)(value | *address);
 8003058:	7840      	ldrb	r0, [r0, #1]

    /* Return 16-bit value.  */
    return((ULONG) value);
}
 800305a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800305e:	4770      	bx	lr

08003060 <_ux_utility_string_length_check>:
{

UINT    string_length;


    if (string == UX_NULL)
 8003060:	b190      	cbz	r0, 8003088 <_ux_utility_string_length_check+0x28>
{
 8003062:	b510      	push	{r4, lr}
 8003064:	4604      	mov	r4, r0
        return(UX_ERROR);

    string_length = 0;
 8003066:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 8003068:	5ce0      	ldrb	r0, [r4, r3]
 800306a:	b148      	cbz	r0, 8003080 <_ux_utility_string_length_check+0x20>
            break;

        string_length++;
 800306c:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 800306e:	4293      	cmp	r3, r2
 8003070:	d9fa      	bls.n	8003068 <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8003072:	22ff      	movs	r2, #255	; 0xff
 8003074:	2108      	movs	r1, #8
 8003076:	2002      	movs	r0, #2
 8003078:	f7ff fdc4 	bl	8002c04 <_ux_system_error_handler>

            return(UX_ERROR);
 800307c:	20ff      	movs	r0, #255	; 0xff

    if (string_length_ptr)
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
}
 800307e:	bd10      	pop	{r4, pc}
    if (string_length_ptr)
 8003080:	b121      	cbz	r1, 800308c <_ux_utility_string_length_check+0x2c>
        *string_length_ptr = string_length;
 8003082:	600b      	str	r3, [r1, #0]
    return(UX_SUCCESS); 
 8003084:	2000      	movs	r0, #0
 8003086:	e7fa      	b.n	800307e <_ux_utility_string_length_check+0x1e>
        return(UX_ERROR);
 8003088:	20ff      	movs	r0, #255	; 0xff
}
 800308a:	4770      	bx	lr
    return(UX_SUCCESS); 
 800308c:	2000      	movs	r0, #0
 800308e:	e7f6      	b.n	800307e <_ux_utility_string_length_check+0x1e>

08003090 <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(TX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 8003090:	b510      	push	{r4, lr}
 8003092:	b088      	sub	sp, #32

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 8003094:	24c8      	movs	r4, #200	; 0xc8
 8003096:	9406      	str	r4, [sp, #24]
 8003098:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800309a:	9405      	str	r4, [sp, #20]
 800309c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800309e:	9404      	str	r4, [sp, #16]
 80030a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80030a2:	9403      	str	r4, [sp, #12]
 80030a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80030a6:	9402      	str	r4, [sp, #8]
 80030a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80030aa:	9401      	str	r4, [sp, #4]
 80030ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80030ae:	9400      	str	r4, [sp, #0]
 80030b0:	f006 fc8e 	bl	80099d0 <_txe_thread_create>
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80030b4:	4604      	mov	r4, r0
 80030b6:	b910      	cbnz	r0, 80030be <_ux_utility_thread_create+0x2e>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
}
 80030b8:	4620      	mov	r0, r4
 80030ba:	b008      	add	sp, #32
 80030bc:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80030be:	4602      	mov	r2, r0
 80030c0:	2108      	movs	r1, #8
 80030c2:	2002      	movs	r0, #2
 80030c4:	f7ff fd9e 	bl	8002c04 <_ux_system_error_handler>
    return(status);
 80030c8:	e7f6      	b.n	80030b8 <_ux_utility_thread_create+0x28>

080030ca <_ux_utility_thread_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(TX_THREAD *thread_ptr)
{
 80030ca:	b510      	push	{r4, lr}
 80030cc:	4604      	mov	r4, r0

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 80030ce:	f006 fd85 	bl	8009bdc <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f006 fd34 	bl	8009b40 <_txe_thread_delete>

    /* Return completion status.  */
    return(status);
}
 80030d8:	bd10      	pop	{r4, pc}

080030da <_ux_utility_thread_relinquish>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_thread_relinquish(VOID)
{
 80030da:	b508      	push	{r3, lr}

    /* Call ThreadX to relinquish a USBX thread.  */
    tx_thread_relinquish();
 80030dc:	f006 fd56 	bl	8009b8c <_txe_thread_relinquish>

}
 80030e0:	bd08      	pop	{r3, pc}

080030e2 <_ux_utility_thread_suspend>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(TX_THREAD *thread_ptr)
{
 80030e2:	b508      	push	{r3, lr}

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 80030e4:	f006 fd6e 	bl	8009bc4 <_txe_thread_suspend>

    /* Return completion status.  */
    return(status);
}
 80030e8:	bd08      	pop	{r3, pc}

080030ea <_ux_device_class_storage_activate>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 80030ea:	b538      	push	{r3, r4, r5, lr}
UX_SLAVE_INTERFACE                      *interface;
UX_SLAVE_CLASS_STORAGE                  *storage;
UX_SLAVE_CLASS                          *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80030ec:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class -> ux_slave_class_instance;
 80030ee:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 80030f0:	6882      	ldr	r2, [r0, #8]
    
    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)storage;
 80030f2:	6094      	str	r4, [r2, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    storage -> ux_slave_class_storage_interface =  interface;
 80030f4:	6022      	str	r2, [r4, #0]

    /* Resume thread.  */
    status =  _ux_utility_thread_resume(&class -> ux_slave_class_thread); 
 80030f6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80030fa:	f001 f9cb 	bl	8004494 <_ux_utility_thread_resume>
 80030fe:	4605      	mov	r5, r0

    /* If there is a activate function call it.  */
    if (storage -> ux_slave_class_storage_instance_activate != UX_NULL)
 8003100:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003104:	b10b      	cbz	r3, 800310a <_ux_device_class_storage_activate+0x20>
    {        
        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_activate(storage);
 8003106:	4620      	mov	r0, r4
 8003108:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, storage, 0, 0, 0)

    /* Return completion status.  */
    return(status);
}
 800310a:	4628      	mov	r0, r5
 800310c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003110 <_ux_device_class_storage_control_request>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8003110:	b538      	push	{r3, r4, r5, lr}
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <_ux_device_class_storage_control_request+0x6c>)
 8003114:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
    
    /* Extract the request type from the SETUP packet..   */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8003116:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 800311a:	6a01      	ldr	r1, [r0, #32]
    
    /* Get the storage instance from this class container.  */
    storage =  (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 800311c:	6c8c      	ldr	r4, [r1, #72]	; 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800311e:	2afe      	cmp	r2, #254	; 0xfe
 8003120:	d018      	beq.n	8003154 <_ux_device_class_storage_control_request+0x44>
 8003122:	2aff      	cmp	r2, #255	; 0xff
 8003124:	d127      	bne.n	8003176 <_ux_device_class_storage_control_request+0x66>
    {

    case UX_SLAVE_CLASS_STORAGE_RESET:

        /* We need the interface to the class.  */
        interface =  storage -> ux_slave_class_storage_interface;
 8003126:	6823      	ldr	r3, [r4, #0]
        
        /* Locate the endpoints.  */
        endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8003128:	6b58      	ldr	r0, [r3, #52]	; 0x34
        
        /* Check the endpoint direction, if IN we have the correct endpoint.  */
        if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800312a:	6943      	ldr	r3, [r0, #20]
 800312c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003130:	d10d      	bne.n	800314e <_ux_device_class_storage_control_request+0x3e>

            /* Wrong direction, we found the OUT endpoint first.  */
            endpoint_out =  endpoint_in;
                
            /* So the next endpoint has to be the IN endpoint.  */
            endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8003132:	6a45      	ldr	r5, [r0, #36]	; 0x24
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
        }
            
        /* First cancel any transfer on the endpoint OUT, from the host.  */
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8003134:	2128      	movs	r1, #40	; 0x28
 8003136:	3030      	adds	r0, #48	; 0x30
 8003138:	f001 f946 	bl	80043c8 <_ux_device_stack_transfer_abort>

        /* Then cancel any transfer on the endpoint IN, from the host.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 800313c:	2128      	movs	r1, #40	; 0x28
 800313e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003142:	f001 f941 	bl	80043c8 <_ux_device_stack_transfer_abort>

        /* Reset phase error.  */
        storage -> ux_slave_class_storage_phase_error = UX_FALSE;
 8003146:	2000      	movs	r0, #0
 8003148:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
            return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
}
 800314c:	bd38      	pop	{r3, r4, r5, pc}
        endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 800314e:	4605      	mov	r5, r0
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8003150:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003152:	e7ef      	b.n	8003134 <_ux_device_class_storage_control_request+0x24>
 8003154:	f103 05ac 	add.w	r5, r3, #172	; 0xac
        *transfer_request -> ux_slave_transfer_request_data_pointer =  (UCHAR)(storage -> ux_slave_class_storage_number_lun -1);
 8003158:	6862      	ldr	r2, [r4, #4]
 800315a:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800315e:	3a01      	subs	r2, #1
 8003160:	700a      	strb	r2, [r1, #0]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8003162:	2203      	movs	r2, #3
 8003164:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8003168:	2201      	movs	r2, #1
 800316a:	4611      	mov	r1, r2
 800316c:	4628      	mov	r0, r5
 800316e:	f7ff fcef 	bl	8002b50 <_ux_device_stack_transfer_request>
    return(UX_SUCCESS);
 8003172:	2000      	movs	r0, #0
        break;
 8003174:	e7ea      	b.n	800314c <_ux_device_class_storage_control_request+0x3c>
            return(UX_ERROR);
 8003176:	20ff      	movs	r0, #255	; 0xff
 8003178:	e7e8      	b.n	800314c <_ux_device_class_storage_control_request+0x3c>
 800317a:	bf00      	nop
 800317c:	20002b80 	.word	0x20002b80

08003180 <_ux_device_class_storage_csw_send>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                UX_SLAVE_ENDPOINT *endpoint_in, UCHAR csw_status)
{
 8003180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	4605      	mov	r5, r0
 8003188:	460c      	mov	r4, r1
 800318a:	4616      	mov	r6, r2
 800318c:	4698      	mov	r8, r3
UINT                    status;
UX_SLAVE_TRANSFER       *transfer_request;
UCHAR                   csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_LENGTH];

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 800318e:	f102 0730 	add.w	r7, r2, #48	; 0x30

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(csw_buffer, 0, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);
 8003192:	220d      	movs	r2, #13
 8003194:	2100      	movs	r1, #0
 8003196:	4668      	mov	r0, sp
 8003198:	f7ff ff1a 	bl	8002fd0 <_ux_utility_memory_set>

    /* Store the signature of the CSW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE], UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE_MASK);
 800319c:	490d      	ldr	r1, [pc, #52]	; (80031d4 <_ux_device_class_storage_csw_send+0x54>)
 800319e:	4668      	mov	r0, sp
 80031a0:	f001 f938 	bl	8004414 <_ux_utility_long_put>

    /* Store the SCSI tag from the CBW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_TAG], storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_scsi_tag);
 80031a4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80031a8:	00a3      	lsls	r3, r4, #2
 80031aa:	441d      	add	r5, r3
 80031ac:	6a29      	ldr	r1, [r5, #32]
 80031ae:	a801      	add	r0, sp, #4
 80031b0:	f001 f930 	bl	8004414 <_ux_utility_long_put>

    /* Store the status of the previous operation.  */
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] =  csw_status;
 80031b4:	f88d 800c 	strb.w	r8, [sp, #12]

    /* Copy the CSW into the transfer request memory.  */
    _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80031b8:	220d      	movs	r2, #13
 80031ba:	4669      	mov	r1, sp
 80031bc:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80031be:	f7ff fe78 	bl	8002eb2 <_ux_utility_memory_copy>

    /* We may be in a special state machine condition where the endpoint is stalled waiting for
       a CLEAR_FEATURE.  We will wait until the host clears the endpoint.  
       The transfer_request function does that.  */
    /* Send the CSW back to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH, 
 80031c2:	220d      	movs	r2, #13
 80031c4:	4611      	mov	r1, r2
 80031c6:	4638      	mov	r0, r7
 80031c8:	f7ff fcc2 	bl	8002b50 <_ux_device_stack_transfer_request>
                                    UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);

    /* Return completion status.  */
    return(status);
}
 80031cc:	b004      	add	sp, #16
 80031ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d2:	bf00      	nop
 80031d4:	53425355 	.word	0x53425355

080031d8 <_ux_device_class_storage_deactivate>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80031d8:	b538      	push	{r3, r4, r5, lr}
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80031da:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class -> ux_slave_class_instance;
 80031dc:	6c9d      	ldr	r5, [r3, #72]	; 0x48

    /* We need the interface to the class.  */
    interface =  storage -> ux_slave_class_storage_interface;
 80031de:	682b      	ldr	r3, [r5, #0]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 80031e0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80031e2:	6963      	ldr	r3, [r4, #20]
 80031e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031e8:	d10e      	bne.n	8003208 <_ux_device_class_storage_deactivate+0x30>

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 80031ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 80031ec:	2126      	movs	r1, #38	; 0x26
 80031ee:	f001 f90b 	bl	8004408 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 80031f2:	2126      	movs	r1, #38	; 0x26
 80031f4:	4620      	mov	r0, r4
 80031f6:	f001 f907 	bl	8004408 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (storage -> ux_slave_class_storage_instance_deactivate != UX_NULL)
 80031fa:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80031fe:	b10b      	cbz	r3, 8003204 <_ux_device_class_storage_deactivate+0x2c>
    {

        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_deactivate(storage);
 8003200:	4628      	mov	r0, r5
 8003202:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(storage);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8003204:	2000      	movs	r0, #0
 8003206:	bd38      	pop	{r3, r4, r5, pc}
    endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8003208:	4620      	mov	r0, r4
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800320a:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800320c:	e7ee      	b.n	80031ec <_ux_device_class_storage_deactivate+0x14>

0800320e <_ux_device_class_storage_format>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_format(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb)
{
 800320e:	b570      	push	{r4, r5, r6, lr}
 8003210:	4604      	mov	r4, r0
 8003212:	460d      	mov	r5, r1
 8003214:	4616      	mov	r6, r2
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_FORMAT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint. We stall the
       OUT endpoint because we expect the host to send parameters.  */
    _ux_device_stack_endpoint_stall(endpoint_out);
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fad4 	bl	80027c4 <_ux_device_stack_endpoint_stall>

    /* Now we return a CSW with failure.  */
    _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 800321c:	2301      	movs	r3, #1
 800321e:	4632      	mov	r2, r6
 8003220:	4629      	mov	r1, r5
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff ffac 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x05;
 8003228:	0129      	lsls	r1, r5, #4
 800322a:	1b4a      	subs	r2, r1, r5
 800322c:	0093      	lsls	r3, r2, #2
 800322e:	4423      	add	r3, r4
 8003230:	2205      	movs	r2, #5
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x26;
 8003236:	2226      	movs	r2, #38	; 0x26
 8003238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x01;
 800323c:	1b49      	subs	r1, r1, r5
 800323e:	008b      	lsls	r3, r1, #2
 8003240:	441c      	add	r4, r3
 8003242:	2301      	movs	r3, #1
 8003244:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}
 8003248:	2054      	movs	r0, #84	; 0x54
 800324a:	bd70      	pop	{r4, r5, r6, pc}

0800324c <_ux_device_class_storage_inquiry>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 800324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003250:	b08b      	sub	sp, #44	; 0x2c
 8003252:	4604      	mov	r4, r0
 8003254:	460d      	mov	r5, r1
 8003256:	4616      	mov	r6, r2
 8003258:	9b12      	ldr	r3, [sp, #72]	; 0x48

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_INQUIRY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* From the SCSI Inquiry payload, get the page code.  */
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 800325a:	f893 8002 	ldrb.w	r8, [r3, #2]
    
    /* And the length to be returned. */
    inquiry_length =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH);
 800325e:	791f      	ldrb	r7, [r3, #4]

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8003260:	f102 0930 	add.w	r9, r2, #48	; 0x30

    /* Ensure the data buffer is cleaned.  */
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH);
 8003264:	2224      	movs	r2, #36	; 0x24
 8003266:	2100      	movs	r1, #0
 8003268:	a801      	add	r0, sp, #4
 800326a:	f7ff feb1 	bl	8002fd0 <_ux_utility_memory_set>

    /* Check for the maximum length to be returned. */
    if (inquiry_length > UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH)
 800326e:	2f24      	cmp	r7, #36	; 0x24
 8003270:	d900      	bls.n	8003274 <_ux_device_class_storage_inquiry+0x28>
        inquiry_length =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 8003272:	2724      	movs	r7, #36	; 0x24

    /* Ensure we know about the page code.  */
    switch (inquiry_page_code)
 8003274:	f1b8 0f00 	cmp.w	r8, #0
 8003278:	d01a      	beq.n	80032b0 <_ux_device_class_storage_inquiry+0x64>
 800327a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800327e:	d063      	beq.n	8003348 <_ux_device_class_storage_inquiry+0xfc>
        break;

    default:
            
        /* The page code is not supported.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 8003280:	4630      	mov	r0, r6
 8003282:	f7ff fa9f 	bl	80027c4 <_ux_device_stack_endpoint_stall>

        /* Now we return a CSW with failure.  */
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8003286:	2301      	movs	r3, #1
 8003288:	4632      	mov	r2, r6
 800328a:	4629      	mov	r1, r5
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff ff77 	bl	8003180 <_ux_device_class_storage_csw_send>

        /* And update the REQUEST_SENSE codes.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x05;
 8003292:	012b      	lsls	r3, r5, #4
 8003294:	1b59      	subs	r1, r3, r5
 8003296:	008a      	lsls	r2, r1, #2
 8003298:	4422      	add	r2, r4
 800329a:	2105      	movs	r1, #5
 800329c:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x26;
 80032a0:	2126      	movs	r1, #38	; 0x26
 80032a2:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x01;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        /* Return error.  */
        status =  UX_ERROR;
 80032ac:	20ff      	movs	r0, #255	; 0xff

        break;            
    }    

    /* Return completion status.  */
    return(status);
 80032ae:	e040      	b.n	8003332 <_ux_device_class_storage_inquiry+0xe6>
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PERIPHERAL_TYPE] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type;
 80032b0:	012a      	lsls	r2, r5, #4
 80032b2:	1b52      	subs	r2, r2, r5
 80032b4:	0093      	lsls	r3, r2, #2
 80032b6:	4423      	add	r3, r4
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	f88d 2004 	strb.w	r2, [sp, #4]
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_REMOVABLE_MEDIA] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_removable_flag;
 80032be:	7d1b      	ldrb	r3, [r3, #20]
 80032c0:	f88d 3005 	strb.w	r3, [sp, #5]
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type == UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 80032c4:	2a05      	cmp	r2, #5
 80032c6:	d037      	beq.n	8003338 <_ux_device_class_storage_inquiry+0xec>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x00;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f88d 3007 	strb.w	r3, [sp, #7]
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 80032ce:	2a05      	cmp	r2, #5
 80032d0:	d036      	beq.n	8003340 <_ux_device_class_storage_inquiry+0xf4>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 80032d2:	2324      	movs	r3, #36	; 0x24
 80032d4:	f88d 3008 	strb.w	r3, [sp, #8]
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 80032d8:	2208      	movs	r2, #8
 80032da:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80032de:	a803      	add	r0, sp, #12
 80032e0:	f7ff fde7 	bl	8002eb2 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 80032e4:	2210      	movs	r2, #16
 80032e6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80032ea:	a805      	add	r0, sp, #20
 80032ec:	f7ff fde1 	bl	8002eb2 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 80032f0:	2204      	movs	r2, #4
 80032f2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80032f6:	a809      	add	r0, sp, #36	; 0x24
 80032f8:	f7ff fddb 	bl	8002eb2 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, inquiry_buffer, inquiry_length);
 80032fc:	463a      	mov	r2, r7
 80032fe:	a901      	add	r1, sp, #4
 8003300:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8003302:	f7ff fdd6 	bl	8002eb2 <_ux_utility_memory_copy>
        _ux_device_stack_transfer_request(transfer_request, inquiry_length, inquiry_length);
 8003306:	463a      	mov	r2, r7
 8003308:	4639      	mov	r1, r7
 800330a:	4648      	mov	r0, r9
 800330c:	f7ff fc20 	bl	8002b50 <_ux_device_stack_transfer_request>
        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8003310:	2300      	movs	r3, #0
 8003312:	4632      	mov	r2, r6
 8003314:	4629      	mov	r1, r5
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff ff32 	bl	8003180 <_ux_device_class_storage_csw_send>
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x00;
 800331c:	012b      	lsls	r3, r5, #4
 800331e:	1b59      	subs	r1, r3, r5
 8003320:	008a      	lsls	r2, r1, #2
 8003322:	4422      	add	r2, r4
 8003324:	2100      	movs	r1, #0
 8003326:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x00;
 800332a:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x00;
 800332e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
}
 8003332:	b00b      	add	sp, #44	; 0x2c
 8003334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x32;
 8003338:	2332      	movs	r3, #50	; 0x32
 800333a:	f88d 3007 	strb.w	r3, [sp, #7]
 800333e:	e7c6      	b.n	80032ce <_ux_device_class_storage_inquiry+0x82>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH_CD_ROM;
 8003340:	235b      	movs	r3, #91	; 0x5b
 8003342:	f88d 3008 	strb.w	r3, [sp, #8]
 8003346:	e7c7      	b.n	80032d8 <_ux_device_class_storage_inquiry+0x8c>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL);
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800334c:	f001 f89c 	bl	8004488 <_ux_utility_short_put_big_endian>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer + 2, 20);
 8003350:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8003352:	2114      	movs	r1, #20
 8003354:	3002      	adds	r0, #2
 8003356:	f001 f897 	bl	8004488 <_ux_utility_short_put_big_endian>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer + 4, storage -> ux_slave_class_storage_product_serial, 20);
 800335a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800335c:	2214      	movs	r2, #20
 800335e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003362:	3004      	adds	r0, #4
 8003364:	f7ff fda5 	bl	8002eb2 <_ux_utility_memory_copy>
        _ux_device_stack_transfer_request(transfer_request, 24, 24);
 8003368:	2218      	movs	r2, #24
 800336a:	4611      	mov	r1, r2
 800336c:	4648      	mov	r0, r9
 800336e:	f7ff fbef 	bl	8002b50 <_ux_device_stack_transfer_request>
        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8003372:	2300      	movs	r3, #0
 8003374:	4632      	mov	r2, r6
 8003376:	4629      	mov	r1, r5
 8003378:	4620      	mov	r0, r4
 800337a:	f7ff ff01 	bl	8003180 <_ux_device_class_storage_csw_send>
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x00;
 800337e:	012b      	lsls	r3, r5, #4
 8003380:	1b59      	subs	r1, r3, r5
 8003382:	008a      	lsls	r2, r1, #2
 8003384:	4422      	add	r2, r4
 8003386:	2100      	movs	r1, #0
 8003388:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x00;
 800338c:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x00;
 8003390:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
        break;
 8003394:	e7cd      	b.n	8003332 <_ux_device_class_storage_inquiry+0xe6>

08003396 <_ux_device_class_storage_mode_select>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_mode_select(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8003396:	b570      	push	{r4, r5, r6, lr}
 8003398:	4604      	mov	r4, r0
 800339a:	460d      	mov	r5, r1
 800339c:	4616      	mov	r6, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SELECT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint.  */
    _ux_device_stack_endpoint_stall(endpoint_out);
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fa10 	bl	80027c4 <_ux_device_stack_endpoint_stall>

    /* Now we return a CSW with failure.  */
    _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 80033a4:	2301      	movs	r3, #1
 80033a6:	4632      	mov	r2, r6
 80033a8:	4629      	mov	r1, r5
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7ff fee8 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x05;
 80033b0:	0129      	lsls	r1, r5, #4
 80033b2:	1b4a      	subs	r2, r1, r5
 80033b4:	0093      	lsls	r3, r2, #2
 80033b6:	4423      	add	r3, r4
 80033b8:	2205      	movs	r2, #5
 80033ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x26;
 80033be:	2226      	movs	r2, #38	; 0x26
 80033c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x01;
 80033c4:	1b49      	subs	r1, r1, r5
 80033c6:	008b      	lsls	r3, r1, #2
 80033c8:	441c      	add	r4, r3
 80033ca:	2301      	movs	r3, #1
 80033cc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80033d0:	2254      	movs	r2, #84	; 0x54
 80033d2:	2107      	movs	r1, #7
 80033d4:	2002      	movs	r0, #2
 80033d6:	f7ff fc15 	bl	8002c04 <_ux_system_error_handler>
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error!  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}    
 80033da:	2054      	movs	r0, #84	; 0x54
 80033dc:	bd70      	pop	{r4, r5, r6, pc}

080033de <_ux_device_class_storage_mode_sense>:
UINT  _ux_device_class_storage_mode_sense(UX_SLAVE_CLASS_STORAGE *storage, 
                      ULONG               lun, 
                      UX_SLAVE_ENDPOINT   *endpoint_in,
                      UX_SLAVE_ENDPOINT   *endpoint_out, 
                      UCHAR               *cbwcb)
{
 80033de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e2:	b083      	sub	sp, #12
 80033e4:	4605      	mov	r5, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	4616      	mov	r6, r2
 80033ea:	980c      	ldr	r0, [sp, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SENSE, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80033ec:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80033f0:	9300      	str	r3, [sp, #0]

    /* Get the command format : we have 1a and 5a.  */
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 80033f2:	f890 a000 	ldrb.w	sl, [r0]
    
    /* Extract the notification from the cbwcb.  */
    page_code =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PC_PAGE_CODE);
 80033f6:	f890 9002 	ldrb.w	r9, [r0, #2]

    /* Check the command.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 80033fa:	f1ba 0f1a 	cmp.w	sl, #26
 80033fe:	d162      	bne.n	80034c6 <_ux_device_class_storage_mode_sense+0xe8>
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8003400:	7907      	ldrb	r7, [r0, #4]
        medium_type_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_MEDIUM_TYPE_6;
 8003402:	2301      	movs	r3, #1
 8003404:	9301      	str	r3, [sp, #4]
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_6;
 8003406:	f04f 0804 	mov.w	r8, #4
        medium_type_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_MEDIUM_TYPE_10;
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_10;
    }

    /* Ensure reply not exceed storage buffer.  */
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 800340a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800340e:	d901      	bls.n	8003414 <_ux_device_class_storage_mode_sense+0x36>
        mode_sense_reply_length = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 8003410:	f44f 5780 	mov.w	r7, #4096	; 0x1000

    /* Ensure memory buffer cleaned.  */
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length);
 8003414:	463a      	mov	r2, r7
 8003416:	2100      	movs	r1, #0
 8003418:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800341a:	f7ff fdd9 	bl	8002fd0 <_ux_utility_memory_set>

    /* Establish READ ONLY flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 800341e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8003422:	0093      	lsls	r3, r2, #2
 8003424:	442b      	add	r3, r5
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d055      	beq.n	80034d8 <_ux_device_class_storage_mode_sense+0xfa>
        read_only_flag = 0x80;
    
    else
    
        /* This device can be written to.  */
        read_only_flag = 0;        
 800342c:	f04f 0b00 	mov.w	fp, #0

    /* Build response based on expected page codes.  */

    /* Initialize length and page pointer.  */
    mode_data_length = response_header_length;
    page_pointer = transfer_request -> ux_slave_transfer_request_data_pointer + response_header_length;
 8003430:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8003432:	4443      	add	r3, r8
        page_pointer += page_length;
    }
#endif

    /* Caching mode page is returned if cache flush callback implemented.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8003434:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 8003438:	008a      	lsls	r2, r1, #2
 800343a:	442a      	add	r2, r5
 800343c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800343e:	b182      	cbz	r2, 8003462 <_ux_device_class_storage_mode_sense+0x84>
 8003440:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8003444:	bf18      	it	ne
 8003446:	f1b9 0f08 	cmpne.w	r9, #8
 800344a:	d10a      	bne.n	8003462 <_ux_device_class_storage_mode_sense+0x84>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL))
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_CACHE_LENGTH;

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 800344c:	2208      	movs	r2, #8
 800344e:	701a      	strb	r2, [r3, #0]

        /* Store the length of the page data.  */
        *(page_pointer + 1) = 0x12;
 8003450:	2212      	movs	r2, #18
 8003452:	705a      	strb	r2, [r3, #1]

        /* Set the Write Cache Enabled (WCE) bit.  */
        *(page_pointer + 2) |= 0x04;
 8003454:	789a      	ldrb	r2, [r3, #2]
 8003456:	f042 0204 	orr.w	r2, r2, #4
 800345a:	709a      	strb	r2, [r3, #2]

        mode_data_length += page_length;
 800345c:	f108 0814 	add.w	r8, r8, #20
        page_pointer += page_length;
 8003460:	3314      	adds	r3, #20
    }

    /* Informational Exceptions Control mode page.  */
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8003462:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8003466:	bf18      	it	ne
 8003468:	f1b9 0f1c 	cmpne.w	r9, #28
 800346c:	d105      	bne.n	800347a <_ux_device_class_storage_mode_sense+0x9c>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL)
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_IEC_LENGTH;

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC;
 800346e:	221c      	movs	r2, #28
 8003470:	701a      	strb	r2, [r3, #0]

        /* Store the length of the page data.  */
        *(page_pointer + 1) = 0x0A;
 8003472:	220a      	movs	r2, #10
 8003474:	705a      	strb	r2, [r3, #1]

        mode_data_length += page_length;
 8003476:	f108 080c 	add.w	r8, r8, #12
        page_pointer += page_length;
    }

    /* Put the payload length in the header.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 800347a:	f1ba 0f1a 	cmp.w	sl, #26
 800347e:	d02e      	beq.n	80034de <_ux_device_class_storage_mode_sense+0x100>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
    else
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);
 8003480:	fa1f f188 	uxth.w	r1, r8
 8003484:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8003486:	f000 ffff 	bl	8004488 <_ux_utility_short_put_big_endian>

    /* Store the write protection flag.  */
    *(transfer_request -> ux_slave_transfer_request_data_pointer + medium_type_index + 1) = read_only_flag;
 800348a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	3301      	adds	r3, #1
 8003490:	f802 b003 	strb.w	fp, [r2, r3]

    /* Send a payload with the response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, mode_sense_reply_length, mode_sense_reply_length); 
 8003494:	463a      	mov	r2, r7
 8003496:	4639      	mov	r1, r7
 8003498:	9800      	ldr	r0, [sp, #0]
 800349a:	f7ff fb59 	bl	8002b50 <_ux_device_stack_transfer_request>

    /* Now we return a CSW with success.  */
    status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 800349e:	2300      	movs	r3, #0
 80034a0:	4632      	mov	r2, r6
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f7ff fe6b 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x00;
 80034aa:	0123      	lsls	r3, r4, #4
 80034ac:	1b19      	subs	r1, r3, r4
 80034ae:	008a      	lsls	r2, r1, #2
 80034b0:	442a      	add	r2, r5
 80034b2:	2100      	movs	r1, #0
 80034b4:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x00;
 80034b8:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x00;
 80034bc:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26

    /* Return completion status.  */
    return(status);
}
 80034c0:	b003      	add	sp, #12
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 80034c6:	3007      	adds	r0, #7
 80034c8:	f7ff fdc5 	bl	8003056 <_ux_utility_short_get_big_endian>
 80034cc:	4607      	mov	r7, r0
        medium_type_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_MEDIUM_TYPE_10;
 80034ce:	2302      	movs	r3, #2
 80034d0:	9301      	str	r3, [sp, #4]
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_10;
 80034d2:	f04f 0808 	mov.w	r8, #8
 80034d6:	e798      	b.n	800340a <_ux_device_class_storage_mode_sense+0x2c>
        read_only_flag = 0x80;
 80034d8:	f04f 0b80 	mov.w	fp, #128	; 0x80
 80034dc:	e7a8      	b.n	8003430 <_ux_device_class_storage_mode_sense+0x52>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 80034de:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80034e0:	f883 8000 	strb.w	r8, [r3]
 80034e4:	e7d1      	b.n	800348a <_ux_device_class_storage_mode_sense+0xac>

080034e6 <_ux_device_class_storage_prevent_allow_media_removal>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_prevent_allow_media_removal(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80034e6:	b538      	push	{r3, r4, r5, lr}
 80034e8:	4604      	mov	r4, r0
 80034ea:	460d      	mov	r5, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_PREVENT_ALLOW_MEDIA_REMOVAL, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We return a CSW with success.  */
    _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80034ec:	2300      	movs	r3, #0
 80034ee:	f7ff fe47 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x00;
 80034f2:	0129      	lsls	r1, r5, #4
 80034f4:	1b4a      	subs	r2, r1, r5
 80034f6:	0093      	lsls	r3, r2, #2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4423      	add	r3, r4
 80034fc:	2000      	movs	r0, #0
 80034fe:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x00;
 8003502:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x00;
 8003506:	4414      	add	r4, r2
 8003508:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 800350c:	bd38      	pop	{r3, r4, r5, pc}

0800350e <_ux_device_class_storage_read>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 800350e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	4607      	mov	r7, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4693      	mov	fp, r2
 800351a:	9d10      	ldr	r5, [sp, #64]	; 0x40
ULONG                   transfer_length;

    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 800351c:	1ca8      	adds	r0, r5, #2
 800351e:	f7ff fc19 	bl	8002d54 <_ux_utility_long_get_big_endian>
 8003522:	4682      	mov	sl, r0

    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.  */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_READ16)
 8003524:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003528:	2b28      	cmp	r3, #40	; 0x28
 800352a:	d00e      	beq.n	800354a <_ux_device_class_storage_read+0x3c>
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);

    else        

        /* Get the number of blocks from the CBWCB in 32 bits.  */
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 800352c:	1da8      	adds	r0, r5, #6
 800352e:	f7ff fc11 	bl	8002d54 <_ux_utility_long_get_big_endian>
 8003532:	4681      	mov	r9, r0

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8003534:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8003538:	9303      	str	r3, [sp, #12]

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 800353a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800353e:	0093      	lsls	r3, r2, #2
 8003540:	443b      	add	r3, r7
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	fb09 f803 	mul.w	r8, r9, r3

    /* It may take several transfers to send the requested data.  */
    while (total_number_blocks)
 8003548:	e032      	b.n	80035b0 <_ux_device_class_storage_read+0xa2>
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);
 800354a:	1de8      	adds	r0, r5, #7
 800354c:	f7ff fd83 	bl	8003056 <_ux_utility_short_get_big_endian>
 8003550:	4681      	mov	r9, r0
 8003552:	e7ef      	b.n	8003534 <_ux_device_class_storage_read+0x26>
        if (status != UX_SUCCESS)
        {
    
            /* We have a problem, media status error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 8003554:	4658      	mov	r0, fp
 8003556:	f7ff f935 	bl	80027c4 <_ux_device_stack_endpoint_stall>
    
            /* Now we return a CSW with failure.  */
            _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 800355a:	2301      	movs	r3, #1
 800355c:	465a      	mov	r2, fp
 800355e:	4621      	mov	r1, r4
 8003560:	4638      	mov	r0, r7
 8003562:	f7ff fe0d 	bl	8003180 <_ux_device_class_storage_csw_send>
    
            /* Return an error.  */
            return(UX_ERROR);
 8003566:	20ff      	movs	r0, #255	; 0xff
 8003568:	e07a      	b.n	8003660 <_ux_device_class_storage_read+0x152>
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
            
        else

            /* Compute the transfer length based on what is left to transfer.  */
            transfer_length =  total_length;
 800356a:	4646      	mov	r6, r8

        /* Compute the number of blocks to transfer.  */
        number_blocks = transfer_length / storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 800356c:	0122      	lsls	r2, r4, #4
 800356e:	1b12      	subs	r2, r2, r4
 8003570:	0093      	lsls	r3, r2, #2
 8003572:	443b      	add	r3, r7
 8003574:	68dd      	ldr	r5, [r3, #12]
 8003576:	fbb6 f2f5 	udiv	r2, r6, r5
 800357a:	9202      	str	r2, [sp, #8]
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ, storage, lun, transfer_request -> ux_slave_transfer_request_data_pointer, 
                                number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

        /* Execute the read command from the local media.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read(storage, lun, 
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	461d      	mov	r5, r3
 8003580:	ab05      	add	r3, sp, #20
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f8cd a000 	str.w	sl, [sp]
 8003588:	4613      	mov	r3, r2
 800358a:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800358e:	4621      	mov	r1, r4
 8003590:	4638      	mov	r0, r7
 8003592:	47a8      	blx	r5
                                                    transfer_request -> ux_slave_transfer_request_data_pointer, number_blocks, lba, &media_status); 

        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 8003594:	bb60      	cbnz	r0, 80035f0 <_ux_device_class_storage_read+0xe2>
            /* Return an error.  */
            return(UX_ERROR);
        }

        /* Sends the data payload back to the caller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length);
 8003596:	4632      	mov	r2, r6
 8003598:	4631      	mov	r1, r6
 800359a:	9803      	ldr	r0, [sp, #12]
 800359c:	f7ff fad8 	bl	8002b50 <_ux_device_stack_transfer_request>

        /* Check the status.  */
        if(status != UX_SUCCESS)
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d13f      	bne.n	8003624 <_ux_device_class_storage_read+0x116>
            return(UX_ERROR);

        }

        /* Update the LBA address.  */
        lba += number_blocks;
 80035a4:	9b02      	ldr	r3, [sp, #8]
 80035a6:	449a      	add	sl, r3
        
        /* Update the length to remain.  */
        total_length -= transfer_length;        
 80035a8:	eba8 0806 	sub.w	r8, r8, r6
        
        /* Update the number of blocks to read.  */
        total_number_blocks -= number_blocks;
 80035ac:	eba9 0903 	sub.w	r9, r9, r3
    while (total_number_blocks)
 80035b0:	f1b9 0f00 	cmp.w	r9, #0
 80035b4:	d04e      	beq.n	8003654 <_ux_device_class_storage_read+0x146>
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80035b6:	0123      	lsls	r3, r4, #4
 80035b8:	1b1b      	subs	r3, r3, r4
 80035ba:	009e      	lsls	r6, r3, #2
 80035bc:	443e      	add	r6, r7
 80035be:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 80035c0:	ab05      	add	r3, sp, #20
 80035c2:	69f2      	ldr	r2, [r6, #28]
 80035c4:	4621      	mov	r1, r4
 80035c6:	4638      	mov	r0, r7
 80035c8:	47a8      	blx	r5
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 80035ca:	9b05      	ldr	r3, [sp, #20]
 80035cc:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 80035d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80035d4:	f886 2025 	strb.w	r2, [r6, #37]	; 0x25
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 80035d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80035dc:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
        if (status != UX_SUCCESS)
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1b7      	bne.n	8003554 <_ux_device_class_storage_read+0x46>
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 80035e4:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 80035e8:	d9bf      	bls.n	800356a <_ux_device_class_storage_read+0x5c>
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 80035ea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80035ee:	e7bd      	b.n	800356c <_ux_device_class_storage_read+0x5e>
            _ux_device_stack_endpoint_stall(endpoint_in);
 80035f0:	4658      	mov	r0, fp
 80035f2:	f7ff f8e7 	bl	80027c4 <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 80035f6:	9a05      	ldr	r2, [sp, #20]
 80035f8:	0121      	lsls	r1, r4, #4
 80035fa:	1b09      	subs	r1, r1, r4
 80035fc:	008b      	lsls	r3, r1, #2
 80035fe:	443b      	add	r3, r7
 8003600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 8003604:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003608:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 800360c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8003610:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8003614:	2301      	movs	r3, #1
 8003616:	465a      	mov	r2, fp
 8003618:	4621      	mov	r1, r4
 800361a:	4638      	mov	r0, r7
 800361c:	f7ff fdb0 	bl	8003180 <_ux_device_class_storage_csw_send>
            return(UX_ERROR);
 8003620:	20ff      	movs	r0, #255	; 0xff
 8003622:	e01d      	b.n	8003660 <_ux_device_class_storage_read+0x152>
            _ux_device_stack_endpoint_stall(endpoint_in);
 8003624:	4658      	mov	r0, fp
 8003626:	f7ff f8cd 	bl	80027c4 <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  0x02;
 800362a:	0122      	lsls	r2, r4, #4
 800362c:	1b12      	subs	r2, r2, r4
 800362e:	0093      	lsls	r3, r2, #2
 8003630:	443b      	add	r3, r7
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  0x54;
 8003638:	2254      	movs	r2, #84	; 0x54
 800363a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  0x00;
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8003644:	2301      	movs	r3, #1
 8003646:	465a      	mov	r2, fp
 8003648:	4621      	mov	r1, r4
 800364a:	4638      	mov	r0, r7
 800364c:	f7ff fd98 	bl	8003180 <_ux_device_class_storage_csw_send>
            return(UX_ERROR);
 8003650:	20ff      	movs	r0, #255	; 0xff
 8003652:	e005      	b.n	8003660 <_ux_device_class_storage_read+0x152>
    }
        
    /* Now we return a CSW with success.  */
    status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8003654:	2300      	movs	r3, #0
 8003656:	465a      	mov	r2, fp
 8003658:	4621      	mov	r1, r4
 800365a:	4638      	mov	r0, r7
 800365c:	f7ff fd90 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* Return completion status.  */
    return(status);
}
 8003660:	b007      	add	sp, #28
 8003662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003666 <_ux_device_class_storage_read_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8003666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	4606      	mov	r6, r0
 800366e:	460d      	mov	r5, r1
 8003670:	4690      	mov	r8, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8003672:	010b      	lsls	r3, r1, #4
 8003674:	1a5b      	subs	r3, r3, r1
 8003676:	009c      	lsls	r4, r3, #2
 8003678:	4404      	add	r4, r0
 800367a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800367c:	ab03      	add	r3, sp, #12
 800367e:	69e2      	ldr	r2, [r4, #28]
 8003680:	47b8      	blx	r7
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 8003682:	9b03      	ldr	r3, [sp, #12]
 8003684:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 8003688:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800368c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 8003690:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003694:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 8003698:	bb30      	cbnz	r0, 80036e8 <_ux_device_class_storage_read_capacity+0x82>
    }
    else
    {
    
        /* Obtain the pointer to the transfer request.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 800369a:	f108 0730 	add.w	r7, r8, #48	; 0x30
    
        /* Ensure it is cleaned.  */
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH);
 800369e:	2208      	movs	r2, #8
 80036a0:	2100      	movs	r1, #0
 80036a2:	a801      	add	r0, sp, #4
 80036a4:	f7ff fc94 	bl	8002fd0 <_ux_utility_memory_set>
    
        /* Insert the last LBA address in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LAST_LBA],
 80036a8:	012b      	lsls	r3, r5, #4
 80036aa:	1b5b      	subs	r3, r3, r5
 80036ac:	009c      	lsls	r4, r3, #2
 80036ae:	4434      	add	r4, r6
 80036b0:	68a1      	ldr	r1, [r4, #8]
 80036b2:	a801      	add	r0, sp, #4
 80036b4:	f000 feb8 	bl	8004428 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);
    
        /* Insert the block length in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_BLOCK_SIZE],
 80036b8:	68e1      	ldr	r1, [r4, #12]
 80036ba:	a802      	add	r0, sp, #8
 80036bc:	f000 feb4 	bl	8004428 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);
    
        /* Copy the CSW into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 80036c0:	2208      	movs	r2, #8
 80036c2:	a901      	add	r1, sp, #4
 80036c4:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80036c8:	f7ff fbf3 	bl	8002eb2 <_ux_utility_memory_copy>
                                            read_capacity_buffer, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH);
    
        /* Send a data payload with the read_capacity response buffer.  */
        _ux_device_stack_transfer_request(transfer_request, 
 80036cc:	2208      	movs	r2, #8
 80036ce:	4611      	mov	r1, r2
 80036d0:	4638      	mov	r0, r7
 80036d2:	f7ff fa3d 	bl	8002b50 <_ux_device_stack_transfer_request>
                                      UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH,
                                      UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH);
    
        /* Now we return a CSW with success.  */
        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80036d6:	2300      	movs	r3, #0
 80036d8:	4642      	mov	r2, r8
 80036da:	4629      	mov	r1, r5
 80036dc:	4630      	mov	r0, r6
 80036de:	f7ff fd4f 	bl	8003180 <_ux_device_class_storage_csw_send>
    }
        
    /* Return completion status.  */
    return(status);
}
 80036e2:	b004      	add	sp, #16
 80036e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _ux_device_stack_endpoint_stall(endpoint_in);
 80036e8:	4640      	mov	r0, r8
 80036ea:	f7ff f86b 	bl	80027c4 <_ux_device_stack_endpoint_stall>
        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 80036ee:	2301      	movs	r3, #1
 80036f0:	4642      	mov	r2, r8
 80036f2:	4629      	mov	r1, r5
 80036f4:	4630      	mov	r0, r6
 80036f6:	f7ff fd43 	bl	8003180 <_ux_device_class_storage_csw_send>
 80036fa:	e7f2      	b.n	80036e2 <_ux_device_class_storage_read_capacity+0x7c>

080036fc <_ux_device_class_storage_read_format_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80036fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	4607      	mov	r7, r0
 8003704:	460d      	mov	r5, r1
 8003706:	4616      	mov	r6, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_FORMAT_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8003708:	f102 0830 	add.w	r8, r2, #48	; 0x30

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);
 800370c:	220c      	movs	r2, #12
 800370e:	2100      	movs	r1, #0
 8003710:	a801      	add	r0, sp, #4
 8003712:	f7ff fc5d 	bl	8002fd0 <_ux_utility_memory_set>

    /* Insert the size of the response block.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_SIZE], 8);
 8003716:	2108      	movs	r1, #8
 8003718:	a801      	add	r0, sp, #4
 800371a:	f000 fe85 	bl	8004428 <_ux_utility_long_put_big_endian>

    /* Insert the last LBA address in the response.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LAST_LBA],
 800371e:	012b      	lsls	r3, r5, #4
 8003720:	1b5b      	subs	r3, r3, r5
 8003722:	009c      	lsls	r4, r3, #2
 8003724:	443c      	add	r4, r7
 8003726:	68a1      	ldr	r1, [r4, #8]
 8003728:	a802      	add	r0, sp, #8
 800372a:	f000 fe7d 	bl	8004428 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);

    /* Insert the block length in the response.  This is in 3 bytes. */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_BLOCK_SIZE],
 800372e:	68e1      	ldr	r1, [r4, #12]
 8003730:	a803      	add	r0, sp, #12
 8003732:	f000 fe79 	bl	8004428 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);

    /* Insert the response code : always 2.  */
    read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_DESC_CODE] =  2;    
 8003736:	2302      	movs	r3, #2
 8003738:	f88d 300c 	strb.w	r3, [sp, #12]

    /* Copy the CSW into the transfer request memory.  */
    _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800373c:	220c      	movs	r2, #12
 800373e:	a901      	add	r1, sp, #4
 8003740:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8003742:	f7ff fbb6 	bl	8002eb2 <_ux_utility_memory_copy>
                                        read_format_capacity_buffer, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);

    /* Send a data payload with the read_capacity response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, 
 8003746:	220c      	movs	r2, #12
 8003748:	4611      	mov	r1, r2
 800374a:	4640      	mov	r0, r8
 800374c:	f7ff fa00 	bl	8002b50 <_ux_device_stack_transfer_request>
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH,
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);

    /* Now we return a CSW with success.  */
    status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8003750:	2300      	movs	r3, #0
 8003752:	4632      	mov	r2, r6
 8003754:	4629      	mov	r1, r5
 8003756:	4638      	mov	r0, r7
 8003758:	f7ff fd12 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* Return completion status.  */
    return(status);
}
 800375c:	b004      	add	sp, #16
 800375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003762 <_ux_device_class_storage_request_sense>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8003762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003764:	b08b      	sub	sp, #44	; 0x2c
 8003766:	4606      	mov	r6, r0
 8003768:	460c      	mov	r4, r1
 800376a:	4615      	mov	r5, r2

    UX_PARAMETER_NOT_USED(cbwcb);
    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 800376c:	f102 0730 	add.w	r7, r2, #48	; 0x30

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(sense_buffer, 0, UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH);
 8003770:	2212      	movs	r2, #18
 8003772:	2100      	movs	r1, #0
 8003774:	a801      	add	r0, sp, #4
 8003776:	f7ff fc2b 	bl	8002fd0 <_ux_utility_memory_set>
    
    /* Initialize the response buffer with the error code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 800377a:	2370      	movs	r3, #112	; 0x70
 800377c:	f88d 3004 	strb.w	r3, [sp, #4]
                    UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE_VALUE;

    /* Initialize the response buffer with the sense key.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_SENSE_KEY] = 
                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key;
 8003780:	0122      	lsls	r2, r4, #4
 8003782:	1b12      	subs	r2, r2, r4
 8003784:	0093      	lsls	r3, r2, #2
 8003786:	4433      	add	r3, r6
 8003788:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_SENSE_KEY] = 
 800378c:	f88d 2006 	strb.w	r2, [sp, #6]

    /* Initialize the response buffer with the code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE] = 
                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code;
 8003790:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE] = 
 8003794:	f88d 2010 	strb.w	r2, [sp, #16]

    /* Initialize the response buffer with the code qualifier.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE_QUALIFIER] = 
                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier;
 8003798:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE_QUALIFIER] = 
 800379c:	f88d 3011 	strb.w	r3, [sp, #17]
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_REQUEST_SENSE, storage, lun, 
                            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key, 
                            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Initialize the response buffer with the additional length.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ADD_LENGTH] =  10;
 80037a0:	230a      	movs	r3, #10
 80037a2:	f88d 300b 	strb.w	r3, [sp, #11]


    /* Copy the request sense response into the transfer request memory.  */
    _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 80037a6:	2212      	movs	r2, #18
 80037a8:	a901      	add	r1, sp, #4
 80037aa:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80037ac:	f7ff fb81 	bl	8002eb2 <_ux_utility_memory_copy>
                                        sense_buffer, UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH);

    /* Send a data payload with the sense codes.  */
    _ux_device_stack_transfer_request(transfer_request, UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH,
 80037b0:	2212      	movs	r2, #18
 80037b2:	4611      	mov	r1, r2
 80037b4:	4638      	mov	r0, r7
 80037b6:	f7ff f9cb 	bl	8002b50 <_ux_device_stack_transfer_request>
                              UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH);
    
    /* Now we return a CSW with success.  */
    status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80037ba:	2300      	movs	r3, #0
 80037bc:	462a      	mov	r2, r5
 80037be:	4621      	mov	r1, r4
 80037c0:	4630      	mov	r0, r6
 80037c2:	f7ff fcdd 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* Return completion status.  */    
    return(status);
}
 80037c6:	b00b      	add	sp, #44	; 0x2c
 80037c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037ca <_ux_device_class_storage_start_stop>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_start_stop(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80037ca:	b508      	push	{r3, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_START_STOP, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We return a CSW with success.  */
    _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80037cc:	2300      	movs	r3, #0
 80037ce:	f7ff fcd7 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 80037d2:	2000      	movs	r0, #0
 80037d4:	bd08      	pop	{r3, pc}

080037d6 <_ux_device_class_storage_synchronize_cache>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_synchronize_cache(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                                 UX_SLAVE_ENDPOINT *endpoint_in,
                                                 UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb, UCHAR scsi_command)
{
 80037d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	4606      	mov	r6, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4690      	mov	r8, r2
 80037e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38

    UX_PARAMETER_NOT_USED(endpoint_out);
    UX_PARAMETER_NOT_USED(scsi_command);

    /* Is there not an implementation?  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 80037e4:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 80037e8:	0093      	lsls	r3, r2, #2
 80037ea:	4403      	add	r3, r0
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d045      	beq.n	800387e <_ux_device_class_storage_synchronize_cache+0xa8>

        /* Return success.  */
        return(UX_SUCCESS);
    }

    flags =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS);
 80037f2:	f895 b001 	ldrb.w	fp, [r5, #1]

    /* Get the LBA and number of blocks from the CBWCB in 16 bits.  */
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 80037f6:	1ca8      	adds	r0, r5, #2
 80037f8:	f7ff faac 	bl	8002d54 <_ux_utility_long_get_big_endian>
 80037fc:	4682      	mov	sl, r0
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 80037fe:	1de8      	adds	r0, r5, #7
 8003800:	f7ff fc29 	bl	8003056 <_ux_utility_short_get_big_endian>
 8003804:	4681      	mov	r9, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_SYNCHRONIZE_CACHE, storage, lun, lba, number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8003806:	0123      	lsls	r3, r4, #4
 8003808:	1b1b      	subs	r3, r3, r4
 800380a:	009d      	lsls	r5, r3, #2
 800380c:	4435      	add	r5, r6
 800380e:	ab03      	add	r3, sp, #12
 8003810:	69ea      	ldr	r2, [r5, #28]
 8003812:	4621      	mov	r1, r4
 8003814:	4630      	mov	r0, r6
 8003816:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8003818:	47b8      	blx	r7
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 800381a:	9b03      	ldr	r3, [sp, #12]
 800381c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 8003820:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003824:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 8003828:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800382c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8003830:	bb70      	cbnz	r0, 8003890 <_ux_device_class_storage_synchronize_cache+0xba>
        /* We are done here.  */
        return(UX_ERROR);
    }

    /* If the immediate bit is set, we return a CSW before flush.  */
    else if ((flags & UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS_IMMED) != 0)
 8003832:	f01b 0702 	ands.w	r7, fp, #2
 8003836:	d137      	bne.n	80038a8 <_ux_device_class_storage_synchronize_cache+0xd2>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);

    /* Send the flush command to the local media.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush(storage, lun, number_blocks, lba, &media_status);
 8003838:	0123      	lsls	r3, r4, #4
 800383a:	1b1b      	subs	r3, r3, r4
 800383c:	009d      	lsls	r5, r3, #2
 800383e:	4435      	add	r5, r6
 8003840:	f8d5 b038 	ldr.w	fp, [r5, #56]	; 0x38
 8003844:	ab03      	add	r3, sp, #12
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	4653      	mov	r3, sl
 800384a:	fa1f f289 	uxth.w	r2, r9
 800384e:	4621      	mov	r1, r4
 8003850:	4630      	mov	r0, r6
 8003852:	47d8      	blx	fp
 8003854:	4681      	mov	r9, r0

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key         =  (UCHAR) (media_status & 0xff);
 8003856:	9b03      	ldr	r3, [sp, #12]
 8003858:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code              =  (UCHAR) ((media_status >> 8 ) & 0xff);
 800385c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003860:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier    =  (UCHAR) ((media_status >> 16 ) & 0xff);
 8003864:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003868:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26

    /* If the immediate bit is set, we are already done, no matter what local operation status is.  */
    if ((flags & UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS_IMMED) != 0)
 800386c:	b967      	cbnz	r7, 8003888 <_ux_device_class_storage_synchronize_cache+0xb2>
        return(status);

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 800386e:	bb10      	cbnz	r0, 80038b6 <_ux_device_class_storage_synchronize_cache+0xe0>

        /* Return an error.  */
        return(UX_ERROR);
    }
    else
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 8003870:	2300      	movs	r3, #0
 8003872:	4642      	mov	r2, r8
 8003874:	4621      	mov	r1, r4
 8003876:	4630      	mov	r0, r6
 8003878:	f7ff fc82 	bl	8003180 <_ux_device_class_storage_csw_send>

    /* Return completion status.  */
    return(status);
 800387c:	e004      	b.n	8003888 <_ux_device_class_storage_synchronize_cache+0xb2>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 800387e:	4642      	mov	r2, r8
 8003880:	f7ff fc7e 	bl	8003180 <_ux_device_class_storage_csw_send>
        return(UX_SUCCESS);
 8003884:	f04f 0900 	mov.w	r9, #0
}
 8003888:	4648      	mov	r0, r9
 800388a:	b005      	add	sp, #20
 800388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _ux_device_stack_endpoint_stall(endpoint_in);
 8003890:	4640      	mov	r0, r8
 8003892:	f7fe ff97 	bl	80027c4 <_ux_device_stack_endpoint_stall>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8003896:	2301      	movs	r3, #1
 8003898:	4642      	mov	r2, r8
 800389a:	4621      	mov	r1, r4
 800389c:	4630      	mov	r0, r6
 800389e:	f7ff fc6f 	bl	8003180 <_ux_device_class_storage_csw_send>
        return(UX_ERROR);
 80038a2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80038a6:	e7ef      	b.n	8003888 <_ux_device_class_storage_synchronize_cache+0xb2>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80038a8:	2300      	movs	r3, #0
 80038aa:	4642      	mov	r2, r8
 80038ac:	4621      	mov	r1, r4
 80038ae:	4630      	mov	r0, r6
 80038b0:	f7ff fc66 	bl	8003180 <_ux_device_class_storage_csw_send>
 80038b4:	e7c0      	b.n	8003838 <_ux_device_class_storage_synchronize_cache+0x62>
        _ux_device_stack_endpoint_stall(endpoint_in);
 80038b6:	4640      	mov	r0, r8
 80038b8:	f7fe ff84 	bl	80027c4 <_ux_device_stack_endpoint_stall>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 80038bc:	2301      	movs	r3, #1
 80038be:	4642      	mov	r2, r8
 80038c0:	4621      	mov	r1, r4
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7ff fc5c 	bl	8003180 <_ux_device_class_storage_csw_send>
        return(UX_ERROR);
 80038c8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80038cc:	e7dc      	b.n	8003888 <_ux_device_class_storage_synchronize_cache+0xb2>

080038ce <_ux_device_class_storage_test_ready>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_test_ready(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                          UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80038ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	4606      	mov	r6, r0
 80038d6:	460d      	mov	r5, r1
 80038d8:	4690      	mov	r8, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_TEST_READY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80038da:	010b      	lsls	r3, r1, #4
 80038dc:	1a5b      	subs	r3, r3, r1
 80038de:	009c      	lsls	r4, r3, #2
 80038e0:	4404      	add	r4, r0
 80038e2:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80038e4:	ab01      	add	r3, sp, #4
 80038e6:	69e2      	ldr	r2, [r4, #28]
 80038e8:	47b8      	blx	r7
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Set the sense/code/qualifier codes for the REQUEST_SENSE command.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_key =       (media_status & 0xff);
 80038ea:	9b01      	ldr	r3, [sp, #4]
 80038ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code =            ((media_status >> 8) & 0xff);
 80038f0:	0a1a      	lsrs	r2, r3, #8
 80038f2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_code_qualifier =  ((media_status >> 16) & 0xff);
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 80038fc:	b940      	cbnz	r0, 8003910 <_ux_device_class_storage_test_ready+0x42>
    }        
    else
    {

        /* We return a CSW with success.  */
        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80038fe:	2300      	movs	r3, #0
 8003900:	4642      	mov	r2, r8
 8003902:	4629      	mov	r1, r5
 8003904:	4630      	mov	r0, r6
 8003906:	f7ff fc3b 	bl	8003180 <_ux_device_class_storage_csw_send>
    }
    
    /* Return completion status.  */
    return(status);
}
 800390a:	b002      	add	sp, #8
 800390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_FAILED);
 8003910:	2301      	movs	r3, #1
 8003912:	4642      	mov	r2, r8
 8003914:	4629      	mov	r1, r5
 8003916:	4630      	mov	r0, r6
 8003918:	f7ff fc32 	bl	8003180 <_ux_device_class_storage_csw_send>
 800391c:	e7f5      	b.n	800390a <_ux_device_class_storage_test_ready+0x3c>

0800391e <_ux_dcd_stm32_delay>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_delay(ULONG usec)
{
 800391e:	b082      	sub	sp, #8
	volatile ULONG ucount = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	9301      	str	r3, [sp, #4]

	/* Calculate the time to wait in cycles. */
	volatile ULONG utime = UX_DCD_STM32_CONTROLLER_DELAY * usec;
 8003924:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003928:	00c3      	lsls	r3, r0, #3
 800392a:	9300      	str	r3, [sp, #0]
	/* Now loop to wait. */
	do
	{
		/* Check the count. Place volatile variables in non-volatile to avoid
		 * compiler confusion regarding the order of volatile comparisons. */
		ucount_local = ++ucount;
 800392c:	9b01      	ldr	r3, [sp, #4]
 800392e:	3301      	adds	r3, #1
 8003930:	9301      	str	r3, [sp, #4]
		utime_local = utime;
 8003932:	9a00      	ldr	r2, [sp, #0]

		if (ucount_local > utime_local)
 8003934:	4293      	cmp	r3, r2
 8003936:	d9f9      	bls.n	800392c <_ux_dcd_stm32_delay+0xe>
			/* Done. */
			return;
	} while (1);
}
 8003938:	b002      	add	sp, #8
 800393a:	4770      	bx	lr

0800393c <_ux_dcd_stm32_endpoint_stall>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4606      	mov	r6, r0
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_register;
ULONG               stm32_endpoint_address;

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8003940:	688d      	ldr	r5, [r1, #8]

    /* Check the endpoint direction for the base.  */
    if (ed -> ux_dcd_stm32_ed_direction  == UX_ENDPOINT_IN)
 8003942:	69eb      	ldr	r3, [r5, #28]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d015      	beq.n	8003974 <_ux_dcd_stm32_endpoint_stall+0x38>
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));

    else
    
        /* Endpoint is OUT.  */
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003948:	68ac      	ldr	r4, [r5, #8]
 800394a:	3458      	adds	r4, #88	; 0x58
 800394c:	0164      	lsls	r4, r4, #5

    /* Read the current EP register.  */
       stm32_endpoint_register =  _ux_dcd_stm32_register_read(dcd_stm32, stm32_endpoint_address);
 800394e:	4621      	mov	r1, r4
 8003950:	4630      	mov	r0, r6
 8003952:	f7fe fa24 	bl	8001d9e <_ux_dcd_stm32_register_read>

    /* Check the direction. Is the endpoint IN ? */
    if (ed -> ux_dcd_stm32_ed_direction == UX_ENDPOINT_IN)
 8003956:	69eb      	ldr	r3, [r5, #28]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d00f      	beq.n	800397c <_ux_dcd_stm32_endpoint_stall+0x40>

    /* Set the stall bit.  */
    stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_STALL;

    /* Write the endpoint register.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, stm32_endpoint_register);
 800395c:	f440 1200 	orr.w	r2, r0, #2097152	; 0x200000
 8003960:	4621      	mov	r1, r4
 8003962:	4630      	mov	r0, r6
 8003964:	f7fe fa25 	bl	8001db2 <_ux_dcd_stm32_register_write>
        
    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	602b      	str	r3, [r5, #0]

    /* This function never fails.  */
    return(UX_SUCCESS);         
}
 8003970:	2000      	movs	r0, #0
 8003972:	bd70      	pop	{r4, r5, r6, pc}
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003974:	68ac      	ldr	r4, [r5, #8]
 8003976:	3448      	adds	r4, #72	; 0x48
 8003978:	0164      	lsls	r4, r4, #5
 800397a:	e7e8      	b.n	800394e <_ux_dcd_stm32_endpoint_stall+0x12>
        if (stm32_endpoint_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
 800397c:	2800      	cmp	r0, #0
 800397e:	daed      	bge.n	800395c <_ux_dcd_stm32_endpoint_stall+0x20>
            stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPDIS;
 8003980:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003984:	e7ea      	b.n	800395c <_ux_dcd_stm32_endpoint_stall+0x20>

08003986 <_ux_dcd_stm32_fifo_flush>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_flush(UX_DCD_STM32 *dcd_stm32, ULONG fifo_type, ULONG fifo_index)
{
 8003986:	b538      	push	{r3, r4, r5, lr}
 8003988:	4604      	mov	r4, r0
 800398a:	460d      	mov	r5, r1
ULONG    stm32_register;

    /* Check if this is for RX or TX Fifos.  */
    if (fifo_type == UX_DCD_STM32_FLUSH_RX_FIFO)
 800398c:	2910      	cmp	r1, #16
 800398e:	d010      	beq.n	80039b2 <_ux_dcd_stm32_fifo_flush+0x2c>
    else

        /* Set the Fifo number and the TXFFLSH bit.  */
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
                                    (UX_DCD_STM32_OTG_FS_GRSTCTL_TXFFLSH | 
                                    (fifo_index << UX_DCD_STM32_OTG_FS_GRSTCTL_TXFNUM_SHIFT)));
 8003990:	0192      	lsls	r2, r2, #6
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	2110      	movs	r1, #16
 8003998:	f7fe fa0b 	bl	8001db2 <_ux_dcd_stm32_register_write>

    /* Wait for the FIFO to be flushed.  */
    do
    {
        /* Read the GRSTCTL register.  */
        stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 800399c:	2110      	movs	r1, #16
 800399e:	4620      	mov	r0, r4
 80039a0:	f7fe f9fd 	bl	8001d9e <_ux_dcd_stm32_register_read>

    } while (stm32_register & fifo_type);
 80039a4:	4205      	tst	r5, r0
 80039a6:	d1f9      	bne.n	800399c <_ux_dcd_stm32_fifo_flush+0x16>

    /* Spec says to wait for 3 PHY Clocks.  */
    _ux_dcd_stm32_delay(3);    
 80039a8:	2003      	movs	r0, #3
 80039aa:	f7ff ffb8 	bl	800391e <_ux_dcd_stm32_delay>

    return(UX_SUCCESS);        
}
 80039ae:	2000      	movs	r0, #0
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
 80039b2:	2210      	movs	r2, #16
 80039b4:	4611      	mov	r1, r2
 80039b6:	f7fe f9fc 	bl	8001db2 <_ux_dcd_stm32_register_write>
 80039ba:	e7ef      	b.n	800399c <_ux_dcd_stm32_fifo_flush+0x16>

080039bc <_ux_dcd_stm32_fifo_read>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_read(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index,
                                        UCHAR *data_pointer, ULONG fifo_length)
{
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	4607      	mov	r7, r0
 80039c2:	4614      	mov	r4, r2
TX_INTERRUPT_SAVE_AREA
ULONG    fifo_address;
ULONG    fifo_value;

    /* Calculate the address of the FIFO.  */
    fifo_address = UX_DCD_STM32_DATA_FIFO_OFFSET + (endpoint_index * UX_DCD_STM32_DATA_FIFO_SIZE);
 80039c4:	3101      	adds	r1, #1
 80039c6:	030e      	lsls	r6, r1, #12

    /* Number of bytes to read is based on DWORDS.  */
    fifo_length = (fifo_length + 3) / sizeof(ULONG);
 80039c8:	3303      	adds	r3, #3
 80039ca:	089b      	lsrs	r3, r3, #2
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80039cc:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80039d0:	b672      	cpsid	i
    
    /* Lockout interrupts.  */
    TX_DISABLE

    /* Read one DWORD at a time.  */
    while (fifo_length--)
 80039d2:	e009      	b.n	80039e8 <_ux_dcd_stm32_fifo_read+0x2c>
    {

        /* Read from FIFO.  */
        fifo_value = _ux_dcd_stm32_register_read(dcd_stm32, fifo_address);
 80039d4:	4631      	mov	r1, r6
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7fe f9e1 	bl	8001d9e <_ux_dcd_stm32_register_read>
        
        /* Store this value in a endian agnostic way.  */
        _ux_utility_long_put(data_pointer, fifo_value);
 80039dc:	4601      	mov	r1, r0
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 fd18 	bl	8004414 <_ux_utility_long_put>

        /* Increment the data pointer buffer address.  */
        data_pointer += sizeof(ULONG);
 80039e4:	3404      	adds	r4, #4
    while (fifo_length--)
 80039e6:	462b      	mov	r3, r5
 80039e8:	1e5d      	subs	r5, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f2      	bne.n	80039d4 <_ux_dcd_stm32_fifo_read+0x18>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80039ee:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return successful completion.  */
    return(UX_SUCCESS);        
}
 80039f2:	2000      	movs	r0, #0
 80039f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039f8 <_ux_dcd_stm32_fifo_write>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_write(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index,
                                     UCHAR * data_pointer, ULONG fifo_length, ULONG last_packet_flag)
{
 80039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fc:	4607      	mov	r7, r0
 80039fe:	4614      	mov	r4, r2
TX_INTERRUPT_SAVE_AREA
ULONG    fifo_address;
ULONG    fifo_value;

    /* Calculate the address of the FIFO.  */
    fifo_address = UX_DCD_STM32_DATA_FIFO_OFFSET + (endpoint_index * UX_DCD_STM32_DATA_FIFO_SIZE);
 8003a00:	3101      	adds	r1, #1
 8003a02:	030e      	lsls	r6, r1, #12

    /* Number of bytes to read is based on DWORDS.  */
    fifo_length = (fifo_length + 3) / sizeof(ULONG);
 8003a04:	3303      	adds	r3, #3
 8003a06:	089b      	lsrs	r3, r3, #2
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a08:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003a0c:	b672      	cpsid	i
    
    /* Lockout interrupts.  */
    TX_DISABLE

    /* Write one DWORD at a time.  */
    while (fifo_length--)
 8003a0e:	e009      	b.n	8003a24 <_ux_dcd_stm32_fifo_write+0x2c>
    {

        /* load the value from the FIFO. This is little/endian agnostic.  */
        fifo_value = _ux_utility_long_get(data_pointer);
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7ff f994 	bl	8002d3e <_ux_utility_long_get>

        /* Write from FIFO.  */
        _ux_dcd_stm32_register_write(dcd_stm32, fifo_address, fifo_value);
 8003a16:	4602      	mov	r2, r0
 8003a18:	4631      	mov	r1, r6
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f7fe f9c9 	bl	8001db2 <_ux_dcd_stm32_register_write>

        /* Increment the data pointer buffer address.  */
        data_pointer += sizeof(ULONG);
 8003a20:	3404      	adds	r4, #4
    while (fifo_length--)
 8003a22:	462b      	mov	r3, r5
 8003a24:	1e5d      	subs	r5, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f2      	bne.n	8003a10 <_ux_dcd_stm32_fifo_write+0x18>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a2a:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return successful completion.  */
    return(UX_SUCCESS);        
}
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a34 <_ux_dcd_stm32_function>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_function(UX_SLAVE_DCD* dcd, UINT function, VOID* parameter)
{
 8003a34:	b508      	push	{r3, lr}
	/* Check the status of the controller. */
	if (dcd->ux_slave_dcd_status == UX_UNUSED)
 8003a36:	6a03      	ldr	r3, [r0, #32]
 8003a38:	b163      	cbz	r3, 8003a54 <_ux_dcd_stm32_function+0x20>

		return (UX_CONTROLLER_UNKNOWN);
	}

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8003a3a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

	UINT status;

	/* Look at the function and route it. */
	switch (function)
 8003a3c:	f1a1 030a 	sub.w	r3, r1, #10
 8003a40:	2b0b      	cmp	r3, #11
 8003a42:	d832      	bhi.n	8003aaa <_ux_dcd_stm32_function+0x76>
 8003a44:	e8df f003 	tbb	[pc, r3]
 8003a48:	3111310d 	.word	0x3111310d
 8003a4c:	251d1915 	.word	0x251d1915
 8003a50:	2d212931 	.word	0x2d212931
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD,
 8003a54:	2255      	movs	r2, #85	; 0x55
 8003a56:	2102      	movs	r1, #2
 8003a58:	4608      	mov	r0, r1
 8003a5a:	f7ff f8d3 	bl	8002c04 <_ux_system_error_handler>
		return (UX_CONTROLLER_UNKNOWN);
 8003a5e:	2055      	movs	r0, #85	; 0x55
			break;
	}

	/* Return completion status. */
	return (status);
}
 8003a60:	bd08      	pop	{r3, pc}
			status = _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG*)parameter);
 8003a62:	4611      	mov	r1, r2
 8003a64:	f000 fe37 	bl	80046d6 <_ux_dcd_stm32_frame_number_get>
			break;
 8003a68:	e7fa      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER*)parameter);
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	f000 f8fc 	bl	8003c68 <_ux_dcd_stm32_transfer_request>
			break;
 8003a70:	e7f6      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8003a72:	4611      	mov	r1, r2
 8003a74:	f000 fd24 	bl	80044c0 <_ux_dcd_stm32_endpoint_create>
			break;
 8003a78:	e7f2      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	f000 fdca 	bl	8004614 <_ux_dcd_stm32_endpoint_destroy>
			break;
 8003a80:	e7ee      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8003a82:	4611      	mov	r1, r2
 8003a84:	f000 fdf6 	bl	8004674 <_ux_dcd_stm32_endpoint_reset>
			break;
 8003a88:	e7ea      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	f7ff ff56 	bl	800393c <_ux_dcd_stm32_endpoint_stall>
			break;
 8003a90:	e7e6      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_address_set(dcd_stm32, (ULONG)parameter);
 8003a92:	4611      	mov	r1, r2
 8003a94:	f000 fd02 	bl	800449c <_ux_dcd_stm32_address_set>
			break;
 8003a98:	e7e2      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_state_change(dcd_stm32, (ULONG)parameter);
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	f000 f8e2 	bl	8003c64 <_ux_dcd_stm32_state_change>
			break;
 8003aa0:	e7de      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG)parameter);
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	f000 fe06 	bl	80046b4 <_ux_dcd_stm32_endpoint_status>
			break;
 8003aa8:	e7da      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD,
 8003aaa:	2254      	movs	r2, #84	; 0x54
 8003aac:	2102      	movs	r1, #2
 8003aae:	4608      	mov	r0, r1
 8003ab0:	f7ff f8a8 	bl	8002c04 <_ux_system_error_handler>
			status = UX_FUNCTION_NOT_SUPPORTED;
 8003ab4:	2054      	movs	r0, #84	; 0x54
			break;
 8003ab6:	e7d3      	b.n	8003a60 <_ux_dcd_stm32_function+0x2c>

08003ab8 <_ux_dcd_stm32_initialize_complete>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_initialize_complete(VOID)
{
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003aba:	4b68      	ldr	r3, [pc, #416]	; (8003c5c <_ux_dcd_stm32_initialize_complete+0x1a4>)
 8003abc:	681d      	ldr	r5, [r3, #0]

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8003abe:	6bec      	ldr	r4, [r5, #60]	; 0x3c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Are we in DFU mode ? If so, check if we are in a Reset mode. */
	if (_ux_system_slave->ux_system_slave_device_dfu_state_machine ==
 8003ac0:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d021      	beq.n	8003b0c <_ux_dcd_stm32_initialize_complete+0x54>
				->ux_system_slave_dfu_framework_length;
	}
	else
	{
		/* Set State to App Idle. */
		_ux_system_slave->ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0

		/* Check the speed and set the correct descriptor. */
		if (_ux_system_slave->ux_system_slave_speed == UX_FULL_SPEED_DEVICE)
 8003ace:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d023      	beq.n	8003b1e <_ux_dcd_stm32_initialize_complete+0x66>
		}
		else
		{
			/* The device is operating at high speed. */
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
					->ux_system_slave_device_framework_high_speed;
 8003ad6:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8003ada:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
					->ux_system_slave_device_framework_length_high_speed;
 8003ade:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8003ae2:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
		}
	}

	/* Flush the Endpoint Fifos. */
	_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO, UX_DCD_STM32_FLUSH_FIFO_ALL);
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	2120      	movs	r1, #32
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7ff ff4b 	bl	8003986 <_ux_dcd_stm32_fifo_flush>
	_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_RX_FIFO, UX_DCD_STM32_FLUSH_FIFO_ALL);
 8003af0:	2210      	movs	r2, #16
 8003af2:	4611      	mov	r1, r2
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff ff46 	bl	8003986 <_ux_dcd_stm32_fifo_flush>

	/* Clear all pending device interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINT, 0xFFFFFFFF);
 8003afa:	f04f 32ff 	mov.w	r2, #4294967295
 8003afe:	f640 0118 	movw	r1, #2072	; 0x818
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7fe f955 	bl	8001db2 <_ux_dcd_stm32_register_write>

	ULONG ed_index;
	ULONG stm32_register;

	/* Reset the IN endpoints. */
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8003b08:	2600      	movs	r6, #0
 8003b0a:	e025      	b.n	8003b58 <_ux_dcd_stm32_initialize_complete+0xa0>
				->ux_system_slave_dfu_framework;
 8003b0c:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
		_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8003b10:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
				->ux_system_slave_dfu_framework_length;
 8003b14:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
		_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8003b18:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
 8003b1c:	e7e3      	b.n	8003ae6 <_ux_dcd_stm32_initialize_complete+0x2e>
					->ux_system_slave_device_framework_full_speed;
 8003b1e:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8003b22:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
					->ux_system_slave_device_framework_length_full_speed;
 8003b26:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8003b2a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
 8003b2e:	e7da      	b.n	8003ae6 <_ux_dcd_stm32_initialize_complete+0x2e>

		/* Check if the endpoint is already enabled. */
		if (stm32_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
		{
			/* Set the endpoint disabled bit and SNAK. */
			stm32_register = UX_DCD_STM32_OTG_FS_DIEPCTL_SNAK |
 8003b30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
		else
			/* Reset register. Nothing to do. */
			stm32_register = 0;

		/* Set the Endpoint register. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL +
 8003b34:	4639      	mov	r1, r7
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7fe f93b 	bl	8001db2 <_ux_dcd_stm32_register_write>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), stm32_register);

		/* Reset the DIEPSIZ register of the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ +
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), 0);
 8003b3c:	0177      	lsls	r7, r6, #5
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ +
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8003b44:	4620      	mov	r0, r4
 8003b46:	f7fe f934 	bl	8001db2 <_ux_dcd_stm32_register_write>

		/* Reset the interrupt register for the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPINT +
 8003b4a:	22dd      	movs	r2, #221	; 0xdd
 8003b4c:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7fe f92e 	bl	8001db2 <_ux_dcd_stm32_register_write>
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8003b56:	3601      	adds	r6, #1
 8003b58:	2e03      	cmp	r6, #3
 8003b5a:	d80a      	bhi.n	8003b72 <_ux_dcd_stm32_initialize_complete+0xba>
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL +
 8003b5c:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8003b60:	017f      	lsls	r7, r7, #5
 8003b62:	4639      	mov	r1, r7
 8003b64:	4620      	mov	r0, r4
 8003b66:	f7fe f91a 	bl	8001d9e <_ux_dcd_stm32_register_read>
		if (stm32_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	dbe0      	blt.n	8003b30 <_ux_dcd_stm32_initialize_complete+0x78>
			stm32_register = 0;
 8003b6e:	2200      	movs	r2, #0
 8003b70:	e7e0      	b.n	8003b34 <_ux_dcd_stm32_initialize_complete+0x7c>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), UX_DCD_STM32_OTG_FS_DIEPINT_ALL);
	}

	/* Reset the OUT endpoints. */
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8003b72:	2600      	movs	r6, #0
 8003b74:	e013      	b.n	8003b9e <_ux_dcd_stm32_initialize_complete+0xe6>

		/* Check if the endpoint is already enabled. */
		if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA)
		{
			/* Set the endpoint disabled bit and SNAK. */
			stm32_register = UX_DCD_STM32_OTG_FS_DOEPCTL_SNAK |
 8003b76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
		else
			/* Reset register. Nothing to do. */
			stm32_register = 0;

		/* Set the Endpoint register. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL +
 8003b7a:	4639      	mov	r1, r7
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7fe f918 	bl	8001db2 <_ux_dcd_stm32_register_write>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), stm32_register);

		/* Reset the DIEPSIZ register of the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ +
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), 0);
 8003b82:	0177      	lsls	r7, r6, #5
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ +
 8003b84:	2200      	movs	r2, #0
 8003b86:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7fe f911 	bl	8001db2 <_ux_dcd_stm32_register_write>

		/* Reset the interrupt register for the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPINT +
 8003b90:	225d      	movs	r2, #93	; 0x5d
 8003b92:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7fe f90b 	bl	8001db2 <_ux_dcd_stm32_register_write>
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	2e03      	cmp	r6, #3
 8003ba0:	d80a      	bhi.n	8003bb8 <_ux_dcd_stm32_initialize_complete+0x100>
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL +
 8003ba2:	f106 0758 	add.w	r7, r6, #88	; 0x58
 8003ba6:	017f      	lsls	r7, r7, #5
 8003ba8:	4639      	mov	r1, r7
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7fe f8f7 	bl	8001d9e <_ux_dcd_stm32_register_read>
		if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA)
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	dbe0      	blt.n	8003b76 <_ux_dcd_stm32_initialize_complete+0xbe>
			stm32_register = 0;
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	e7e0      	b.n	8003b7a <_ux_dcd_stm32_initialize_complete+0xc2>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), UX_DCD_STM32_OTG_FS_DOEPINT_ALL);
	}

	/* Set the DOEPMSK register. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPMSK,
 8003bb8:	224b      	movs	r2, #75	; 0x4b
 8003bba:	f640 0114 	movw	r1, #2068	; 0x814
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7fe f8f7 	bl	8001db2 <_ux_dcd_stm32_register_write>
			UX_DCD_STM32_OTG_FS_DOEPMSK_XFRCM | UX_DCD_STM32_OTG_FS_DOEPMSK_STUPM |
			UX_DCD_STM32_OTG_FS_DOEPMSK_EPDM | UX_DCD_STM32_OTG_FS_DOEPMSK_B2BSTUP);

	/* Set the DIEPMSK register. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPMSK,
 8003bc4:	220b      	movs	r2, #11
 8003bc6:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7fe f8f1 	bl	8001db2 <_ux_dcd_stm32_register_write>
			UX_DCD_STM32_OTG_FS_DIEPMSK_XFRCM | UX_DCD_STM32_OTG_FS_DIEPMSK_EPDM |
			UX_DCD_STM32_OTG_FS_DIEPMSK_TOM);

	/* Reset the Global IN/OUT NAK. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCTL,
 8003bd0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8003bd4:	f640 0104 	movw	r1, #2052	; 0x804
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7fe f8e4 	bl	8001da6 <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_DCTL_CGONAK | UX_DCD_STM32_OTG_FS_DCTL_CGINAK);

	/* Reset the device address. */
	_ux_dcd_stm32_address_set(dcd_stm32, 0);
 8003bde:	2100      	movs	r1, #0
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 fc5b 	bl	800449c <_ux_dcd_stm32_address_set>

	/*--------------------------------------------------------------------------------------------*/

	/* Get the device framework pointer. */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003be6:	4c1d      	ldr	r4, [pc, #116]	; (8003c5c <_ux_dcd_stm32_initialize_complete+0x1a4>)
 8003be8:	6820      	ldr	r0, [r4, #0]

	/* And create the decompressed device descriptor structure. */
	_ux_utility_descriptor_parse(device_framework, _ux_system_device_descriptor_structure,
 8003bea:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8003bee:	220e      	movs	r2, #14
 8003bf0:	491b      	ldr	r1, [pc, #108]	; (8003c60 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 8003bf2:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8003bf6:	f7ff f883 	bl	8002d00 <_ux_utility_descriptor_parse>
			UX_DEVICE_DESCRIPTOR_ENTRIES, (UCHAR*)&device->ux_slave_device_descriptor);

	/* Now we create a transfer request to accept the first SETUP packet and get the ball running.
	 * First get the address of the endpoint transfer request container. */
	UX_SLAVE_TRANSFER* transfer_request =
 8003bfa:	f105 06ac 	add.w	r6, r5, #172	; 0xac
			&device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

	/* Set the timeout to be for Control Endpoint. */
	transfer_request->ux_slave_transfer_request_timeout = MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8003bfe:	2364      	movs	r3, #100	; 0x64
 8003c00:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8

	/* Adjust the current data pointer as well. */
	transfer_request->ux_slave_transfer_request_current_data_pointer =
			transfer_request->ux_slave_transfer_request_data_pointer;
 8003c04:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
	transfer_request->ux_slave_transfer_request_current_data_pointer =
 8003c08:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc

	/* Update the transfer request endpoint pointer with the default endpoint. */
	transfer_request->ux_slave_transfer_request_endpoint =
			&device->ux_slave_device_control_endpoint;
 8003c0c:	f105 027c 	add.w	r2, r5, #124	; 0x7c
	transfer_request->ux_slave_transfer_request_endpoint =
 8003c10:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4

	/* The control endpoint max packet size needs to be filled manually in its descriptor. */
	transfer_request->ux_slave_transfer_request_endpoint->ux_slave_endpoint_descriptor
			.wMaxPacketSize = device->ux_slave_device_descriptor.bMaxPacketSize0;
 8003c14:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003c16:	61d3      	str	r3, [r2, #28]

	/* On the control endpoint, always expect the maximum. */
	transfer_request->ux_slave_transfer_request_requested_length =
 8003c18:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
			&device->ux_slave_device_control_endpoint;

	/* Create the default control endpoint attached to the device. Once this endpoint is enabled,
	 * the host can then send a setup packet. The device controller will receive it and will call
	 * the setup function module. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8003c1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c1e:	210e      	movs	r1, #14
 8003c20:	4628      	mov	r0, r5
 8003c22:	4798      	blx	r3
			(VOID*)&device->ux_slave_device_control_endpoint);

	/* Ensure the control endpoint is properly reset. */
	device->ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	/* Mark the phase as SETUP. */
	transfer_request->ux_slave_transfer_request_type = UX_TRANSFER_PHASE_SETUP;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0

	/* Mark this transfer request as pending. */
	transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8003c30:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/* Ask for 8 bytes of the SETUP packet. */
	transfer_request->ux_slave_transfer_request_requested_length = UX_SETUP_SIZE;
 8003c34:	2208      	movs	r2, #8
 8003c36:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	transfer_request->ux_slave_transfer_request_in_transfer_length = UX_SETUP_SIZE;
 8003c3a:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8

	/* Reset the number of bytes sent/received. */
	transfer_request->ux_slave_transfer_request_actual_length = 0;
 8003c3e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	/* Call the DCD driver transfer function. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8003c42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c44:	4632      	mov	r2, r6
 8003c46:	210c      	movs	r1, #12
 8003c48:	4628      	mov	r0, r5
 8003c4a:	4798      	blx	r3

	/* Check the status change callback. */
	if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003c52:	b10b      	cbz	r3, 8003c58 <_ux_dcd_stm32_initialize_complete+0x1a0>
	{
		/* Inform the application if a callback function was programmed. */
		_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8003c54:	2001      	movs	r0, #1
 8003c56:	4798      	blx	r3
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

	/* We are now ready for the USB device to accept the first packet when connected. */
	return (UX_SUCCESS);
}
 8003c58:	2000      	movs	r0, #0
 8003c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c5c:	20002b80 	.word	0x20002b80
 8003c60:	200000fc 	.word	0x200000fc

08003c64 <_ux_dcd_stm32_state_change>:
UINT  _ux_dcd_stm32_state_change(UX_DCD_STM32 *dcd_stm32, ULONG state)
{

    /* This function always succeeds.  */
    return(UX_SUCCESS);         
}
 8003c64:	2000      	movs	r0, #0
 8003c66:	4770      	bx	lr

08003c68 <_ux_dcd_stm32_transfer_request>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8003c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	4607      	mov	r7, r0
 8003c70:	460c      	mov	r4, r1
ULONG                    endpoint_control;
ULONG                    endpoint_size;
UINT                    status;                            

    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8003c72:	f8d1 a008 	ldr.w	sl, [r1, #8]

    /* Get the physical endpoint from the logical endpoint.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8003c76:	f8da 6008 	ldr.w	r6, [sl, #8]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8003c7a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d01f      	beq.n	8003cc0 <_ux_dcd_stm32_transfer_request+0x58>
    {

        /* We have a request for a SETUP or OUT Endpoint.  */

        /* Compute the endpoint address.  */
        endpoint_control_address = (UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003c80:	68b5      	ldr	r5, [r6, #8]
 8003c82:	f105 0858 	add.w	r8, r5, #88	; 0x58
 8003c86:	ea4f 1848 	mov.w	r8, r8, lsl #5

        /* And the size register.  */
        endpoint_size_address = (UX_DCD_STM32_OTG_FS_DOEPTSIZ + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003c8a:	016d      	lsls	r5, r5, #5
 8003c8c:	f505 6531 	add.w	r5, r5, #2832	; 0xb10
        
        /* Read the content of the control register.  */
        endpoint_control  =  _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 8003c90:	4641      	mov	r1, r8
 8003c92:	f7fe f884 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8003c96:	4681      	mov	r9, r0

        /* Get the size of the transfer, used for a IN transaction only.  */
        fifo_length =  transfer_request -> ux_slave_transfer_request_requested_length;
 8003c98:	6962      	ldr	r2, [r4, #20]

        /* Check if the endpoint size is bigger that data requested. */
        if(fifo_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8003c9a:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d200      	bcs.n	8003ca4 <_ux_dcd_stm32_transfer_request+0x3c>
        {

            /* Adjust the transfer size.  */
            fifo_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8003ca2:	461a      	mov	r2, r3
        }

        /* Check if size is 0 as in ZLP.  */
        if (fifo_length == 0)
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d05a      	beq.n	8003d5e <_ux_dcd_stm32_transfer_request+0xf6>
        
        else
        {

            /* If this is a SETUP phase, we need to have 3 packets in the pipe possible.  */
            if (transfer_request -> ux_slave_transfer_request_type ==  UX_TRANSFER_PHASE_SETUP)
 8003ca8:	6861      	ldr	r1, [r4, #4]
 8003caa:	2901      	cmp	r1, #1
 8003cac:	d06c      	beq.n	8003d88 <_ux_dcd_stm32_transfer_request+0x120>
            }
            else
            {
            
                /* Program the transfer size.  */
                endpoint_size = ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8003cae:	441a      	add	r2, r3
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
                                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) * 
                                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
                
                /* And packet counts.  */
                endpoint_size |= ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8003cba:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 8003cbe:	e050      	b.n	8003d62 <_ux_dcd_stm32_transfer_request+0xfa>
        endpoint_control_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003cc0:	68b3      	ldr	r3, [r6, #8]
 8003cc2:	f103 0948 	add.w	r9, r3, #72	; 0x48
 8003cc6:	ea4f 1949 	mov.w	r9, r9, lsl #5
        endpoint_size_address = (UX_DCD_STM32_OTG_FS_DIEPTSIZ + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003cca:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8003cce:	f508 6811 	add.w	r8, r8, #2320	; 0x910
        endpoint_control  =  _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	f7fe f863 	bl	8001d9e <_ux_dcd_stm32_register_read>
 8003cd8:	4683      	mov	fp, r0
        fifo_length =  transfer_request -> ux_slave_transfer_request_requested_length;
 8003cda:	6965      	ldr	r5, [r4, #20]
        if(fifo_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8003cdc:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003ce0:	42ab      	cmp	r3, r5
 8003ce2:	d200      	bcs.n	8003ce6 <_ux_dcd_stm32_transfer_request+0x7e>
            fifo_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8003ce4:	461d      	mov	r5, r3
        if (fifo_length == 0)
 8003ce6:	b31d      	cbz	r5, 8003d30 <_ux_dcd_stm32_transfer_request+0xc8>
            endpoint_size |= ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8003ce8:	195a      	adds	r2, r3, r5
 8003cea:	3a01      	subs	r2, #1
 8003cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf0:	ea45 42c2 	orr.w	r2, r5, r2, lsl #19
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size); 
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f7fe f85b 	bl	8001db2 <_ux_dcd_stm32_register_write>
          _ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8003cfc:	f04b 4204 	orr.w	r2, fp, #2214592512	; 0x84000000
 8003d00:	4649      	mov	r1, r9
 8003d02:	4638      	mov	r0, r7
 8003d04:	f7fe f855 	bl	8001db2 <_ux_dcd_stm32_register_write>
        ed -> ux_dcd_stm32_ed_payload_length =  fifo_length;
 8003d08:	60f5      	str	r5, [r6, #12]
        fifo_buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8003d0a:	68e2      	ldr	r2, [r4, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer += fifo_length;
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	442b      	add	r3, r5
 8003d10:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_in_transfer_length -= fifo_length;
 8003d12:	69e3      	ldr	r3, [r4, #28]
 8003d14:	1b5b      	subs	r3, r3, r5
 8003d16:	61e3      	str	r3, [r4, #28]
        if (transfer_request -> ux_slave_transfer_request_in_transfer_length == 0)
 8003d18:	b96b      	cbnz	r3, 8003d36 <_ux_dcd_stm32_transfer_request+0xce>
            _ux_dcd_stm32_fifo_write(dcd_stm32, ed -> ux_dcd_stm32_ed_index, fifo_buffer, fifo_length, UX_TRUE);
 8003d1a:	68b1      	ldr	r1, [r6, #8]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	462b      	mov	r3, r5
 8003d22:	4638      	mov	r0, r7
 8003d24:	f7ff fe68 	bl	80039f8 <_ux_dcd_stm32_fifo_write>
        if (ed -> ux_dcd_stm32_ed_index != 0)
 8003d28:	68b3      	ldr	r3, [r6, #8]
 8003d2a:	b963      	cbnz	r3, 8003d46 <_ux_dcd_stm32_transfer_request+0xde>
            return(UX_SUCCESS);
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e027      	b.n	8003d80 <_ux_dcd_stm32_transfer_request+0x118>
            endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;                        
 8003d30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d34:	e7de      	b.n	8003cf4 <_ux_dcd_stm32_transfer_request+0x8c>
            _ux_dcd_stm32_fifo_write(dcd_stm32, ed -> ux_dcd_stm32_ed_index, fifo_buffer, fifo_length, UX_FALSE);
 8003d36:	68b1      	ldr	r1, [r6, #8]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f7ff fe5a 	bl	80039f8 <_ux_dcd_stm32_fifo_write>
 8003d44:	e7f0      	b.n	8003d28 <_ux_dcd_stm32_transfer_request+0xc0>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore, UX_WAIT_FOREVER);
 8003d46:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003d4e:	f000 fb77 	bl	8004440 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 8003d52:	4603      	mov	r3, r0
 8003d54:	b9a0      	cbnz	r0, 8003d80 <_ux_dcd_stm32_transfer_request+0x118>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8003d56:	6a22      	ldr	r2, [r4, #32]
 8003d58:	b192      	cbz	r2, 8003d80 <_ux_dcd_stm32_transfer_request+0x118>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	e010      	b.n	8003d80 <_ux_dcd_stm32_transfer_request+0x118>
            endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;                        
 8003d5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size); 
 8003d62:	4629      	mov	r1, r5
 8003d64:	4638      	mov	r0, r7
 8003d66:	f7fe f824 	bl	8001db2 <_ux_dcd_stm32_register_write>
        ed -> ux_dcd_stm32_ed_payload_length = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60f3      	str	r3, [r6, #12]
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8003d6e:	f049 4204 	orr.w	r2, r9, #2214592512	; 0x84000000
 8003d72:	4641      	mov	r1, r8
 8003d74:	4638      	mov	r0, r7
 8003d76:	f7fe f81c 	bl	8001db2 <_ux_dcd_stm32_register_write>
        if (ed -> ux_dcd_stm32_ed_index != 0)
 8003d7a:	68b3      	ldr	r3, [r6, #8]
 8003d7c:	b933      	cbnz	r3, 8003d8c <_ux_dcd_stm32_transfer_request+0x124>
    return(UX_SUCCESS);
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	b003      	add	sp, #12
 8003d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                endpoint_size |=  UX_DCD_STM32_OTG_FS_DOEPTSIZ_STUPCNT_DEFAULT << UX_DCD_STM32_OTG_FS_DOEPTSIZ_STUPCNT_SHIFT;
 8003d88:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <_ux_dcd_stm32_transfer_request+0x140>)
 8003d8a:	e7ea      	b.n	8003d62 <_ux_dcd_stm32_transfer_request+0xfa>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore, UX_WAIT_FOREVER);
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003d94:	f000 fb54 	bl	8004440 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d1f0      	bne.n	8003d80 <_ux_dcd_stm32_transfer_request+0x118>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8003d9e:	6a22      	ldr	r2, [r4, #32]
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	d0ed      	beq.n	8003d80 <_ux_dcd_stm32_transfer_request+0x118>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8003da4:	4613      	mov	r3, r2
 8003da6:	e7eb      	b.n	8003d80 <_ux_dcd_stm32_transfer_request+0x118>
 8003da8:	60080018 	.word	0x60080018

08003dac <_ux_device_stack_alternate_setting_get>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8003dac:	b510      	push	{r4, lr}
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <_ux_device_stack_alternate_setting_get+0x44>)
 8003db0:	681c      	ldr	r4, [r3, #0]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8003db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d119      	bne.n	8003dec <_ux_device_stack_alternate_setting_get+0x40>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8003db8:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130

        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 8003dbc:	b1a3      	cbz	r3, 8003de8 <_ux_device_stack_alternate_setting_get+0x3c>
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	4282      	cmp	r2, r0
 8003dc2:	d001      	beq.n	8003dc8 <_ux_device_stack_alternate_setting_get+0x1c>
                /* Return the function status.  */
                return(status);
            }

            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	e7f9      	b.n	8003dbc <_ux_device_stack_alternate_setting_get+0x10>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8003dc8:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8003dcc:	7e1b      	ldrb	r3, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8003dce:	7013      	strb	r3, [r2, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8003ddc:	460a      	mov	r2, r1
 8003dde:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8003de2:	f7fe feb5 	bl	8002b50 <_ux_device_stack_transfer_request>
                return(status);
 8003de6:	e002      	b.n	8003dee <_ux_device_stack_alternate_setting_get+0x42>
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8003de8:	20ff      	movs	r0, #255	; 0xff
 8003dea:	e000      	b.n	8003dee <_ux_device_stack_alternate_setting_get+0x42>
 8003dec:	20ff      	movs	r0, #255	; 0xff
}
 8003dee:	bd10      	pop	{r4, pc}
 8003df0:	20002b80 	.word	0x20002b80

08003df4 <_ux_device_stack_alternate_setting_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	b09f      	sub	sp, #124	; 0x7c
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value,
			alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003dfa:	4b6c      	ldr	r3, [pc, #432]	; (8003fac <_ux_device_stack_alternate_setting_set+0x1b8>)
 8003dfc:	f8d3 8000 	ldr.w	r8, [r3]
 8003e00:	f8cd 8004 	str.w	r8, [sp, #4]

	/* We may have multiple configurations!  */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003e04:	f8d8 4148 	ldr.w	r4, [r8, #328]	; 0x148
	ULONG device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003e08:	f8d8 614c 	ldr.w	r6, [r8, #332]	; 0x14c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Protocol error must be reported when it's unconfigured */
	if (device->ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8003e0c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	f040 80bf 	bne.w	8003f94 <_ux_device_stack_alternate_setting_set+0x1a0>
 8003e16:	f108 0b40 	add.w	fp, r8, #64	; 0x40
		return UX_FUNCTION_NOT_SUPPORTED;

	/* Find the current interface. */
	UX_SLAVE_INTERFACE* interface = device->ux_slave_device_first_interface;
 8003e1a:	f8d8 5130 	ldr.w	r5, [r8, #304]	; 0x130

	/* Scan all interfaces if any. */
	while (interface != UX_NULL)
 8003e1e:	b125      	cbz	r5, 8003e2a <_ux_device_stack_alternate_setting_set+0x36>
	{
		if (interface->ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8003e20:	696b      	ldr	r3, [r5, #20]
 8003e22:	4283      	cmp	r3, r0
 8003e24:	d001      	beq.n	8003e2a <_ux_device_stack_alternate_setting_set+0x36>
			break;
		else
			interface = interface->ux_slave_interface_next_interface;
 8003e26:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8003e28:	e7f9      	b.n	8003e1e <_ux_device_stack_alternate_setting_set+0x2a>
 8003e2a:	468a      	mov	sl, r1
 8003e2c:	4681      	mov	r9, r0
	}

	/* We must have found the interface pointer for the interface value
	 requested by the caller. */
	if (interface == UX_NULL)
 8003e2e:	b12d      	cbz	r5, 8003e3c <_ux_device_stack_alternate_setting_set+0x48>
		return (UX_INTERFACE_HANDLE_UNKNOWN);
	}

	/* If the host is requesting a change of alternate setting to the current one,
	 we do not need to do any work. */
	if (interface->ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8003e30:	69ab      	ldr	r3, [r5, #24]
 8003e32:	428b      	cmp	r3, r1
 8003e34:	f040 809a 	bne.w	8003f6c <_ux_device_stack_alternate_setting_set+0x178>
		return (UX_SUCCESS);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e0ac      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS,
 8003e3c:	2252      	movs	r2, #82	; 0x52
 8003e3e:	2107      	movs	r1, #7
 8003e40:	2002      	movs	r0, #2
 8003e42:	f7fe fedf 	bl	8002c04 <_ux_system_error_handler>
		return (UX_INTERFACE_HANDLE_UNKNOWN);
 8003e46:	2352      	movs	r3, #82	; 0x52
 8003e48:	e0a5      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
							 * the endpoints associated with the previous alternate setting. */
							endpoint = interface->ux_slave_interface_first_endpoint;
							while (endpoint != UX_NULL)
							{
								/* Abort any pending transfer. */
								_ux_device_stack_transfer_all_request_abort(endpoint,
 8003e4a:	2126      	movs	r1, #38	; 0x26
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f000 fadb 	bl	8004408 <_ux_device_stack_transfer_all_request_abort>
										UX_TRANSFER_BUS_RESET);

								/* The device controller must be called to destroy the endpoint. */
								dcd->ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8003e52:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8003e56:	463a      	mov	r2, r7
 8003e58:	210f      	movs	r1, #15
 8003e5a:	9801      	ldr	r0, [sp, #4]
 8003e5c:	4798      	blx	r3
										(VOID*)endpoint);

								/* Get the next endpoint. */
								next_endpoint = endpoint->ux_slave_endpoint_next_endpoint;
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24

								/* Free the endpoint. */
								endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8003e60:	2300      	movs	r3, #0
 8003e62:	603b      	str	r3, [r7, #0]

								/* Make sure the endpoint instance is now cleaned up. */
								endpoint->ux_slave_endpoint_state = 0;
 8003e64:	607b      	str	r3, [r7, #4]
								endpoint->ux_slave_endpoint_next_endpoint = UX_NULL;
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
								endpoint->ux_slave_endpoint_interface = UX_NULL;
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
								endpoint->ux_slave_endpoint_device = UX_NULL;
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

								/* Now we refresh the endpoint pointer. */
								endpoint = next_endpoint;
 8003e6c:	4617      	mov	r7, r2
							while (endpoint != UX_NULL)
 8003e6e:	2f00      	cmp	r7, #0
 8003e70:	d1eb      	bne.n	8003e4a <_ux_device_stack_alternate_setting_set+0x56>
							}

							/* Now clear the interface endpoint entry. */
							interface->ux_slave_interface_first_endpoint = UX_NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	636b      	str	r3, [r5, #52]	; 0x34

							/* Point beyond the interface descriptor. */
							device_framework_length -= (ULONG)*device_framework;
 8003e76:	7827      	ldrb	r7, [r4, #0]
 8003e78:	1bf6      	subs	r6, r6, r7
							device_framework += (ULONG)*device_framework;
 8003e7a:	4427      	add	r7, r4

							/* Parse the device framework and locate endpoint descriptor(s). */
							while (device_framework_length != 0)
 8003e7c:	e035      	b.n	8003eea <_ux_device_stack_alternate_setting_set+0xf6>
								{
									case UX_ENDPOINT_DESCRIPTOR_ITEM:

										/* Find a free endpoint in the pool and hook it to the 
										 existing interface after it's created by DCD. */
										endpoint = device->ux_slave_device_endpoints_pool;
 8003e7e:	f8d8 413c 	ldr.w	r4, [r8, #316]	; 0x13c
										endpoints_pool_number =
 8003e82:	f8d8 3140 	ldr.w	r3, [r8, #320]	; 0x140
												device->ux_slave_device_endpoints_pool_number;
										while (endpoints_pool_number != 0)
 8003e86:	b133      	cbz	r3, 8003e96 <_ux_device_stack_alternate_setting_set+0xa2>
										{
											/* Check if this endpoint is free. */
											if (endpoint->ux_slave_endpoint_status == UX_UNUSED)
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	b112      	cbz	r2, 8003e92 <_ux_device_stack_alternate_setting_set+0x9e>
												endpoint->ux_slave_endpoint_status = UX_USED;
												break;
											}

											/* Try the next endpoint. */
											endpoint++;
 8003e8c:	3490      	adds	r4, #144	; 0x90

											/* Decrement the number of endpoints to scan from the pool. */
											endpoints_pool_number--;
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	e7f9      	b.n	8003e86 <_ux_device_stack_alternate_setting_set+0x92>
												endpoint->ux_slave_endpoint_status = UX_USED;
 8003e92:	2201      	movs	r2, #1
 8003e94:	6022      	str	r2, [r4, #0]
										}

										/* Did we find a free endpoint ?  */
										if (endpoints_pool_number == 0)
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8081 	beq.w	8003f9e <_ux_device_stack_alternate_setting_set+0x1aa>
											return (UX_MEMORY_INSUFFICIENT);

										/* Parse the descriptor in something more readable. */
										_ux_utility_descriptor_parse(device_framework,
 8003e9c:	f104 030c 	add.w	r3, r4, #12
 8003ea0:	2206      	movs	r2, #6
 8003ea2:	4943      	ldr	r1, [pc, #268]	; (8003fb0 <_ux_device_stack_alternate_setting_set+0x1bc>)
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7fe ff2b 	bl	8002d00 <_ux_utility_descriptor_parse>
										/* Now we create a transfer request to accept transfer on this endpoint. */
										transfer_request =
												&endpoint->ux_slave_endpoint_transfer_request;

										/* We store the endpoint in the transfer request as well. */
										transfer_request->ux_slave_transfer_request_endpoint =
 8003eaa:	63a4      	str	r4, [r4, #56]	; 0x38
												endpoint;

										/* By default the timeout is infinite on request. */
										transfer_request->ux_slave_transfer_request_timeout =
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	67e3      	str	r3, [r4, #124]	; 0x7c
												UX_WAIT_FOREVER;

										/* Attach the interface to the endpoint. */
										endpoint->ux_slave_endpoint_interface = interface;
 8003eb2:	62a5      	str	r5, [r4, #40]	; 0x28

										/* Attach the device to the endpoint. */
										endpoint->ux_slave_endpoint_device = device;
 8003eb4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c

										/* Create the endpoint at the DCD level. */
										status = dcd->ux_slave_dcd_function(dcd,
 8003eb8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	210e      	movs	r1, #14
 8003ec0:	9801      	ldr	r0, [sp, #4]
 8003ec2:	4798      	blx	r3
												UX_DCD_CREATE_ENDPOINT, (VOID*)endpoint);

										/* Do a sanity check on endpoint creation. */
										if (status != UX_SUCCESS)
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	b918      	cbnz	r0, 8003ed0 <_ux_device_stack_alternate_setting_set+0xdc>
											endpoint->ux_slave_endpoint_status = UX_UNUSED;
											return (status);
										}

										/* Attach this endpoint to the end of the endpoint chain. */
										if (interface->ux_slave_interface_first_endpoint == UX_NULL)
 8003ec8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003eca:	b92a      	cbnz	r2, 8003ed8 <_ux_device_stack_alternate_setting_set+0xe4>
										{
											interface->ux_slave_interface_first_endpoint = endpoint;
 8003ecc:	636c      	str	r4, [r5, #52]	; 0x34
 8003ece:	e009      	b.n	8003ee4 <_ux_device_stack_alternate_setting_set+0xf0>
											endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	6022      	str	r2, [r4, #0]
											return (status);
 8003ed4:	e05f      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
											/* Multiple endpoints exist, so find the end of the chain. */
											endpoint_link =
													interface->ux_slave_interface_first_endpoint;
											while (endpoint_link->ux_slave_endpoint_next_endpoint
													!= UX_NULL)
												endpoint_link =
 8003ed6:	461a      	mov	r2, r3
											while (endpoint_link->ux_slave_endpoint_next_endpoint
 8003ed8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1fb      	bne.n	8003ed6 <_ux_device_stack_alternate_setting_set+0xe2>
														endpoint_link->ux_slave_endpoint_next_endpoint;
											endpoint_link->ux_slave_endpoint_next_endpoint =
 8003ede:	6254      	str	r4, [r2, #36]	; 0x24
 8003ee0:	e000      	b.n	8003ee4 <_ux_device_stack_alternate_setting_set+0xf0>
									case UX_INTERFACE_DESCRIPTOR_ITEM:
										/* We have found a new configuration or interface descriptor,
										 * this is the end of the current interface. The search for
										 * the endpoints must be terminated as if it was the end of
										 * the entire descriptor. */
										device_framework_length = descriptor_length;
 8003ee2:	464e      	mov	r6, r9
										/* We have found another descriptor embedded in the interface. Ignore it. */
										break;
								}

								/* Adjust what is left of the device framework. */
								device_framework_length -= descriptor_length;
 8003ee4:	eba6 0609 	sub.w	r6, r6, r9

								/* Point to the next descriptor. */
								device_framework += descriptor_length;
 8003ee8:	444f      	add	r7, r9
							while (device_framework_length != 0)
 8003eea:	b14e      	cbz	r6, 8003f00 <_ux_device_stack_alternate_setting_set+0x10c>
								descriptor_length = (ULONG)*device_framework;
 8003eec:	f897 9000 	ldrb.w	r9, [r7]
								descriptor_type = *(device_framework + 1);
 8003ef0:	787b      	ldrb	r3, [r7, #1]
								switch (descriptor_type)
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d0f5      	beq.n	8003ee2 <_ux_device_stack_alternate_setting_set+0xee>
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d0c1      	beq.n	8003e7e <_ux_device_stack_alternate_setting_set+0x8a>
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d1f2      	bne.n	8003ee4 <_ux_device_stack_alternate_setting_set+0xf0>
 8003efe:	e7f0      	b.n	8003ee2 <_ux_device_stack_alternate_setting_set+0xee>
							}

							/* The interface descriptor in the current class must be changed to the new alternate setting. */
							_ux_utility_memory_copy(&interface->ux_slave_interface_descriptor,
 8003f00:	2224      	movs	r2, #36	; 0x24
 8003f02:	a90d      	add	r1, sp, #52	; 0x34
 8003f04:	f105 000c 	add.w	r0, r5, #12
 8003f08:	f7fe ffd3 	bl	8002eb2 <_ux_utility_memory_copy>
									&interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR));

							/* Get the class for the interface. */
							class =
									_ux_system_slave->ux_system_slave_interface_class_array[interface->ux_slave_interface_descriptor.bInterfaceNumber];
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <_ux_device_stack_alternate_setting_set+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	696a      	ldr	r2, [r5, #20]
							class =
 8003f12:	3260      	adds	r2, #96	; 0x60
 8003f14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003f18:	685b      	ldr	r3, [r3, #4]

							/* Check if class driver is available. */
							if (class == UX_NULL || class->ux_slave_class_status == UX_UNUSED)
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d041      	beq.n	8003fa2 <_ux_device_stack_alternate_setting_set+0x1ae>
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	d040      	beq.n	8003fa6 <_ux_device_stack_alternate_setting_set+0x1b2>
							{
								return (UX_NO_CLASS_MATCH);
							}

							/* The interface attached to this configuration must be changed at the class level. */
							class_command.ux_slave_class_command_request =
 8003f24:	2206      	movs	r2, #6
 8003f26:	9202      	str	r2, [sp, #8]
									UX_SLAVE_CLASS_COMMAND_CHANGE;
							class_command.ux_slave_class_command_interface = (VOID*)interface;
 8003f28:	9504      	str	r5, [sp, #16]

							/* And store it. */
							class_command.ux_slave_class_command_class_ptr = class;
 8003f2a:	930a      	str	r3, [sp, #40]	; 0x28

							/* We can now memorize the interface pointer associated with this class. */
							class->ux_slave_class_interface = interface;
 8003f2c:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128

							/* We have found a potential candidate. Call this registered class entry
							 * function to change the alternate setting. */
							status = class->ux_slave_class_entry_function(&class_command);
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	a802      	add	r0, sp, #8
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0

							/* We are done here. */
							return (status);
 8003f38:	e02d      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
						}
					}

					/* Adjust what is left of the device framework. */
					device_framework_length -= descriptor_length;
 8003f3a:	1bf6      	subs	r6, r6, r7

					/* Point to the next descriptor. */
					device_framework += descriptor_length;
 8003f3c:	443c      	add	r4, r7
				while (device_framework_length != 0)
 8003f3e:	b18e      	cbz	r6, 8003f64 <_ux_device_stack_alternate_setting_set+0x170>
					descriptor_length = (ULONG)*device_framework;
 8003f40:	7827      	ldrb	r7, [r4, #0]
					descriptor_type = *(device_framework + 1);
 8003f42:	7863      	ldrb	r3, [r4, #1]
					if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d1f8      	bne.n	8003f3a <_ux_device_stack_alternate_setting_set+0x146>
						_ux_utility_descriptor_parse(device_framework,
 8003f48:	ab0d      	add	r3, sp, #52	; 0x34
 8003f4a:	2209      	movs	r2, #9
 8003f4c:	4919      	ldr	r1, [pc, #100]	; (8003fb4 <_ux_device_stack_alternate_setting_set+0x1c0>)
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7fe fed6 	bl	8002d00 <_ux_utility_descriptor_parse>
						if (interface_descriptor.bInterfaceNumber == interface_value &&
 8003f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f56:	454b      	cmp	r3, r9
 8003f58:	d1ef      	bne.n	8003f3a <_ux_device_stack_alternate_setting_set+0x146>
								interface_descriptor.bAlternateSetting == alternate_setting_value)
 8003f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
						if (interface_descriptor.bInterfaceNumber == interface_value &&
 8003f5c:	4553      	cmp	r3, sl
 8003f5e:	d1ec      	bne.n	8003f3a <_ux_device_stack_alternate_setting_set+0x146>
							endpoint = interface->ux_slave_interface_first_endpoint;
 8003f60:	6b6f      	ldr	r7, [r5, #52]	; 0x34
							while (endpoint != UX_NULL)
 8003f62:	e784      	b.n	8003e6e <_ux_device_stack_alternate_setting_set+0x7a>
		/* Point to the next descriptor. */
		device_framework += descriptor_length;
	}

	/* Return error completion. */
	return (UX_ERROR);
 8003f64:	23ff      	movs	r3, #255	; 0xff
 8003f66:	e016      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
		device_framework_length -= descriptor_length;
 8003f68:	1bf6      	subs	r6, r6, r7
		device_framework += descriptor_length;
 8003f6a:	443c      	add	r4, r7
	while (device_framework_length != 0)
 8003f6c:	b186      	cbz	r6, 8003f90 <_ux_device_stack_alternate_setting_set+0x19c>
		descriptor_length = (ULONG)*device_framework;
 8003f6e:	7827      	ldrb	r7, [r4, #0]
		descriptor_type = *(device_framework + 1);
 8003f70:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d1f8      	bne.n	8003f68 <_ux_device_stack_alternate_setting_set+0x174>
			_ux_utility_descriptor_parse(device_framework,
 8003f76:	ab16      	add	r3, sp, #88	; 0x58
 8003f78:	2208      	movs	r2, #8
 8003f7a:	490f      	ldr	r1, [pc, #60]	; (8003fb8 <_ux_device_stack_alternate_setting_set+0x1c4>)
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7fe febf 	bl	8002d00 <_ux_utility_descriptor_parse>
					== device->ux_slave_device_configuration_selected)
 8003f82:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
			if (configuration_descriptor.bConfigurationValue
 8003f86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1ed      	bne.n	8003f68 <_ux_device_stack_alternate_setting_set+0x174>
				device_framework_length = configuration_descriptor.wTotalLength;
 8003f8c:	9e18      	ldr	r6, [sp, #96]	; 0x60
				while (device_framework_length != 0)
 8003f8e:	e7d6      	b.n	8003f3e <_ux_device_stack_alternate_setting_set+0x14a>
	return (UX_ERROR);
 8003f90:	23ff      	movs	r3, #255	; 0xff
 8003f92:	e000      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
		return UX_FUNCTION_NOT_SUPPORTED;
 8003f94:	2354      	movs	r3, #84	; 0x54
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	b01f      	add	sp, #124	; 0x7c
 8003f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
											return (UX_MEMORY_INSUFFICIENT);
 8003f9e:	2312      	movs	r3, #18
 8003fa0:	e7f9      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
								return (UX_NO_CLASS_MATCH);
 8003fa2:	2357      	movs	r3, #87	; 0x57
 8003fa4:	e7f7      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
 8003fa6:	2357      	movs	r3, #87	; 0x57
 8003fa8:	e7f5      	b.n	8003f96 <_ux_device_stack_alternate_setting_set+0x1a2>
 8003faa:	bf00      	nop
 8003fac:	20002b80 	.word	0x20002b80
 8003fb0:	2000010c 	.word	0x2000010c
 8003fb4:	20000114 	.word	0x20000114
 8003fb8:	200000f4 	.word	0x200000f4

08003fbc <_ux_device_stack_clear_feature>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8003fbc:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value,
			request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003fbe:	4b19      	ldr	r3, [pc, #100]	; (8004024 <_ux_device_stack_clear_feature+0x68>)
 8003fc0:	681d      	ldr	r5, [r3, #0]
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;

	UX_SLAVE_INTERFACE* interface;

	/* The request can be for either the device or the endpoint. */
	switch (request_type & UX_REQUEST_TARGET)
 8003fc2:	f010 0003 	ands.w	r0, r0, #3
 8003fc6:	d00b      	beq.n	8003fe0 <_ux_device_stack_clear_feature+0x24>
 8003fc8:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8003fcc:	4611      	mov	r1, r2
 8003fce:	2802      	cmp	r0, #2
 8003fd0:	d011      	beq.n	8003ff6 <_ux_device_stack_clear_feature+0x3a>
			/* fall through */

			/* We get here when the endpoint is wrong. Should not happen though. */
		default:
			/* We stall the command. */
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003fd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	2114      	movs	r1, #20
 8003fd8:	4628      	mov	r0, r5
 8003fda:	4798      	blx	r3

			/* No more work to do here.  The command failed but the upper layer does not depend on it. */
			return (UX_SUCCESS);
 8003fdc:	2000      	movs	r0, #0
	}

	/* Return the function status. */
	return (UX_SUCCESS);
}
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
			if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8003fe0:	2901      	cmp	r1, #1
 8003fe2:	d001      	beq.n	8003fe8 <_ux_device_stack_clear_feature+0x2c>
	return (UX_SUCCESS);
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	e7fa      	b.n	8003fde <_ux_device_stack_clear_feature+0x22>
				if (_ux_system_slave->ux_system_slave_remote_wakeup_capability)
 8003fe8:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 8003fec:	b1c3      	cbz	r3, 8004020 <_ux_device_stack_clear_feature+0x64>
					_ux_system_slave->ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
 8003ff4:	e7f3      	b.n	8003fde <_ux_device_stack_clear_feature+0x22>
			interface = device->ux_slave_device_first_interface;
 8003ff6:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
			while (interface != UX_NULL)
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0e9      	beq.n	8003fd2 <_ux_device_stack_clear_feature+0x16>
				UX_SLAVE_ENDPOINT* endpoint_target = interface->ux_slave_interface_first_endpoint;
 8003ffe:	6b44      	ldr	r4, [r0, #52]	; 0x34
				while (endpoint_target != UX_NULL)
 8004000:	b164      	cbz	r4, 800401c <_ux_device_stack_clear_feature+0x60>
					if (endpoint_target->ux_slave_endpoint_descriptor.bEndpointAddress
 8004002:	6963      	ldr	r3, [r4, #20]
 8004004:	428b      	cmp	r3, r1
 8004006:	d001      	beq.n	800400c <_ux_device_stack_clear_feature+0x50>
					endpoint_target = endpoint_target->ux_slave_endpoint_next_endpoint;
 8004008:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800400a:	e7f9      	b.n	8004000 <_ux_device_stack_clear_feature+0x44>
						dcd->ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800400c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800400e:	4622      	mov	r2, r4
 8004010:	2110      	movs	r1, #16
 8004012:	4628      	mov	r0, r5
 8004014:	4798      	blx	r3
						endpoint_target->ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8004016:	2000      	movs	r0, #0
 8004018:	6060      	str	r0, [r4, #4]
						return (UX_SUCCESS);
 800401a:	e7e0      	b.n	8003fde <_ux_device_stack_clear_feature+0x22>
				interface = interface->ux_slave_interface_next_interface;
 800401c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800401e:	e7ec      	b.n	8003ffa <_ux_device_stack_clear_feature+0x3e>
					return (UX_FUNCTION_NOT_SUPPORTED);
 8004020:	2054      	movs	r0, #84	; 0x54
 8004022:	e7dc      	b.n	8003fde <_ux_device_stack_clear_feature+0x22>
 8004024:	20002b80 	.word	0x20002b80

08004028 <_ux_device_stack_configuration_get>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_configuration_get(VOID)
{
 8004028:	b508      	push	{r3, lr}
	UX_SLAVE_DEVICE* device;
	UX_SLAVE_ENDPOINT* endpoint;
	UINT status;

	/* Get the pointer to the device.  */
	device = &_ux_system_slave->ux_system_slave_device;
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <_ux_device_stack_configuration_get+0x24>)
 800402c:	6818      	ldr	r0, [r3, #0]

	/* Get the pointer to the transfer request associated with the endpoint.  */
	transfer_request = &endpoint->ux_slave_endpoint_transfer_request;

	/* Set the value of the configuration in the buffer.  */
	*transfer_request->ux_slave_transfer_request_data_pointer =
 800402e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
			(UCHAR)device->ux_slave_device_configuration_selected;
 8004032:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
	*transfer_request->ux_slave_transfer_request_data_pointer =
 8004036:	701a      	strb	r2, [r3, #0]
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET,
			device->ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS,
			0, 0)

	/* Set the phase of the transfer to data out.  */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8004038:	2303      	movs	r3, #3
 800403a:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	/* Send the descriptor with the appropriate length to the host.  */
	status = _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800403e:	2201      	movs	r2, #1
 8004040:	4611      	mov	r1, r2
 8004042:	30ac      	adds	r0, #172	; 0xac
 8004044:	f7fe fd84 	bl	8002b50 <_ux_device_stack_transfer_request>

	/* Return the function status.  */
	return (status);
}
 8004048:	bd08      	pop	{r3, pc}
 800404a:	bf00      	nop
 800404c:	20002b80 	.word	0x20002b80

08004050 <_ux_device_stack_configuration_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	b09f      	sub	sp, #124	; 0x7c
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004056:	4b7d      	ldr	r3, [pc, #500]	; (800424c <_ux_device_stack_configuration_set+0x1fc>)
 8004058:	681d      	ldr	r5, [r3, #0]

	/* Reset the IAD flag. */
	ULONG iad_flag = UX_FALSE;

	/* If the configuration value is already selected, keep it. */
	if (device->ux_slave_device_configuration_selected == configuration_value)
 800405a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800405e:	4283      	cmp	r3, r0
 8004060:	f000 80ed 	beq.w	800423e <_ux_device_stack_configuration_set+0x1ee>
 8004064:	4606      	mov	r6, r0
		return (UX_SUCCESS);

	/* We may have multiple configurations !, the index will tell us what
	 configuration descriptor we need to return. */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8004066:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
	ULONG device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 800406a:	f8d5 714c 	ldr.w	r7, [r5, #332]	; 0x14c

	/*--------------------------------------------------------------------------------------------*/

	ULONG descriptor_length;
	UCHAR descriptor_type;
	UX_CONFIGURATION_DESCRIPTOR configuration_descriptor = { 0 };
 800406e:	2220      	movs	r2, #32
 8004070:	2100      	movs	r1, #0
 8004072:	a816      	add	r0, sp, #88	; 0x58
 8004074:	f006 f9d3 	bl	800a41e <memset>

	/* Parse the device framework and locate a configuration descriptor. */
	while (device_framework_length != 0)
 8004078:	e002      	b.n	8004080 <_ux_device_stack_configuration_set+0x30>
				/* The configuration is found. */
				break;
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 800407a:	eba7 0708 	sub.w	r7, r7, r8
		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 800407e:	4444      	add	r4, r8
	while (device_framework_length != 0)
 8004080:	b16f      	cbz	r7, 800409e <_ux_device_stack_configuration_set+0x4e>
		descriptor_length = (ULONG)*device_framework;
 8004082:	f894 8000 	ldrb.w	r8, [r4]
		descriptor_type = *(device_framework + 1);
 8004086:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8004088:	2b02      	cmp	r3, #2
 800408a:	d1f6      	bne.n	800407a <_ux_device_stack_configuration_set+0x2a>
			_ux_utility_descriptor_parse(device_framework,
 800408c:	ab16      	add	r3, sp, #88	; 0x58
 800408e:	2208      	movs	r2, #8
 8004090:	496f      	ldr	r1, [pc, #444]	; (8004250 <_ux_device_stack_configuration_set+0x200>)
 8004092:	4620      	mov	r0, r4
 8004094:	f7fe fe34 	bl	8002d00 <_ux_utility_descriptor_parse>
			if (configuration_descriptor.bConfigurationValue == configuration_value)
 8004098:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800409a:	42b3      	cmp	r3, r6
 800409c:	d1ed      	bne.n	800407a <_ux_device_stack_configuration_set+0x2a>
	}

	/* Configuration not found. */
	if (device_framework_length == 0 && configuration_value != 0)
 800409e:	1c33      	adds	r3, r6, #0
 80040a0:	bf18      	it	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	2f00      	cmp	r7, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	461f      	moveq	r7, r3
 80040aa:	2700      	movne	r7, #0
 80040ac:	2f00      	cmp	r7, #0
 80040ae:	f040 80ca 	bne.w	8004246 <_ux_device_stack_configuration_set+0x1f6>
	UX_SLAVE_INTERFACE* next_interface;
	UX_SLAVE_CLASS* class;
	UX_SLAVE_CLASS_COMMAND class_command;

	/* We unmount the configuration if there is previous configuration selected. */
	if (device->ux_slave_device_configuration_selected)
 80040b2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80040b6:	b1ab      	cbz	r3, 80040e4 <_ux_device_stack_configuration_set+0x94>
	{
		/* Get the pointer to the first interface. */
		interface = device->ux_slave_device_first_interface;
 80040b8:	f8d5 7130 	ldr.w	r7, [r5, #304]	; 0x130
 80040bc:	46a0      	mov	r8, r4

		/* Deactivate all the interfaces if any. */
		while (interface != UX_NULL)
 80040be:	e004      	b.n	80040ca <_ux_device_stack_configuration_set+0x7a>
			if (class != UX_NULL)
				/* Call the class with the DEACTIVATE signal. */
				class->ux_slave_class_entry_function(&class_command);

			/* Get the next interface. */
			next_interface = interface->ux_slave_interface_next_interface;
 80040c0:	6b3c      	ldr	r4, [r7, #48]	; 0x30

			/* Remove the interface and all endpoints associated with it. */
			_ux_device_stack_interface_delete(interface);
 80040c2:	4638      	mov	r0, r7
 80040c4:	f7fe fcec 	bl	8002aa0 <_ux_device_stack_interface_delete>

			/* Now we refresh the interface pointer. */
			interface = next_interface;
 80040c8:	4627      	mov	r7, r4
		while (interface != UX_NULL)
 80040ca:	b157      	cbz	r7, 80040e2 <_ux_device_stack_configuration_set+0x92>
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80040cc:	2303      	movs	r3, #3
 80040ce:	930b      	str	r3, [sp, #44]	; 0x2c
			class_command.ux_slave_class_command_interface = (VOID*)interface;
 80040d0:	970d      	str	r7, [sp, #52]	; 0x34
			class = interface->ux_slave_interface_class;
 80040d2:	687b      	ldr	r3, [r7, #4]
			class_command.ux_slave_class_command_class_ptr = class;
 80040d4:	9313      	str	r3, [sp, #76]	; 0x4c
			if (class != UX_NULL)
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f2      	beq.n	80040c0 <_ux_device_stack_configuration_set+0x70>
				class->ux_slave_class_entry_function(&class_command);
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	a80b      	add	r0, sp, #44	; 0x2c
 80040de:	4798      	blx	r3
 80040e0:	e7ee      	b.n	80040c0 <_ux_device_stack_configuration_set+0x70>
 80040e2:	4644      	mov	r4, r8
		}
	}

	/* No configuration is selected. */
	device->ux_slave_device_configuration_selected = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

	/* Mark the device as attached now. */
	device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 80040ea:	2201      	movs	r2, #1
 80040ec:	642a      	str	r2, [r5, #64]	; 0x40

	/* The DCD needs to update the device state too. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID*) UX_DEVICE_ATTACHED);
 80040ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80040f0:	2113      	movs	r1, #19
 80040f2:	4628      	mov	r0, r5
 80040f4:	4798      	blx	r3

	/* If the host tries to unconfigure, we are done. */
	if (configuration_value == 0)
 80040f6:	b90e      	cbnz	r6, 80040fc <_ux_device_stack_configuration_set+0xac>
		return (UX_SUCCESS);
 80040f8:	2000      	movs	r0, #0
 80040fa:	e0a1      	b.n	8004240 <_ux_device_stack_configuration_set+0x1f0>

	/* Memorize the configuration selected. */
	device->ux_slave_device_configuration_selected = configuration_value;
 80040fc:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c

	/*--------------------------------------------------------------------------------------------*/

	/* We have found the configuration value requested by the host.
	 * Create the configuration descriptor and attach it to the device. */
	_ux_utility_descriptor_parse(device_framework,
 8004100:	f505 7388 	add.w	r3, r5, #272	; 0x110
 8004104:	2208      	movs	r2, #8
 8004106:	4952      	ldr	r1, [pc, #328]	; (8004250 <_ux_device_stack_configuration_set+0x200>)
 8004108:	4620      	mov	r0, r4
 800410a:	f7fe fdf9 	bl	8002d00 <_ux_utility_descriptor_parse>
			UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
			(UCHAR*)&device->ux_slave_device_configuration_descriptor);

	/* Configuration character D6 is for Self-powered */
	_ux_system_slave->ux_system_slave_power_state =
			(configuration_descriptor.bmAttributes & 0x40) ?
 800410e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
					UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8004110:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004114:	d00f      	beq.n	8004136 <_ux_device_stack_configuration_set+0xe6>
 8004116:	2102      	movs	r1, #2
	_ux_system_slave->ux_system_slave_power_state =
 8004118:	4a4c      	ldr	r2, [pc, #304]	; (800424c <_ux_device_stack_configuration_set+0x1fc>)
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8

	/* Configuration character D5 is for Remote Wakeup */
	_ux_system_slave->ux_system_slave_remote_wakeup_capability =
			(configuration_descriptor.bmAttributes & 0x20) ?
					UX_TRUE : UX_FALSE;
 8004120:	f3c3 1340 	ubfx	r3, r3, #5, #1
	_ux_system_slave->ux_system_slave_remote_wakeup_capability =
 8004124:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc

	/* Search only in current configuration */
	device_framework_length = configuration_descriptor.wTotalLength;
 8004128:	9f18      	ldr	r7, [sp, #96]	; 0x60

	UX_INTERFACE_DESCRIPTOR interface_descriptor;
	ULONG iad_first_interface = 0;
	ULONG iad_number_interfaces = 0;
	ULONG class_index;
	UX_SLAVE_CLASS* current_class = UX_NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	9301      	str	r3, [sp, #4]
	ULONG iad_number_interfaces = 0;
 800412e:	4699      	mov	r9, r3
	ULONG iad_first_interface = 0;
 8004130:	469b      	mov	fp, r3
 8004132:	46ca      	mov	sl, r9

	/*  We need to scan all the interface descriptors following this configuration descriptor and
	 * enable all endpoints associated with the default alternate setting of each interface. */
	while (device_framework_length != 0)
 8004134:	e006      	b.n	8004144 <_ux_device_stack_configuration_set+0xf4>
					UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8004136:	2101      	movs	r1, #1
 8004138:	e7ee      	b.n	8004118 <_ux_device_stack_configuration_set+0xc8>
			/* Get the number of interfaces we have in the IAD. */
			iad_number_interfaces = (ULONG)*(device_framework + 3);
		}

		/* Check if this is an interface descriptor. */
		if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800413a:	2b04      	cmp	r3, #4
 800413c:	d010      	beq.n	8004160 <_ux_device_stack_configuration_set+0x110>
				_ux_device_stack_interface_set(device_framework, device_framework_length, 0);
			}
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 800413e:	eba7 0708 	sub.w	r7, r7, r8

		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 8004142:	4444      	add	r4, r8
	while (device_framework_length != 0)
 8004144:	2f00      	cmp	r7, #0
 8004146:	d072      	beq.n	800422e <_ux_device_stack_configuration_set+0x1de>
		descriptor_length = (ULONG)*device_framework;
 8004148:	f894 8000 	ldrb.w	r8, [r4]
		descriptor_type = *(device_framework + 1);
 800414c:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800414e:	2b0b      	cmp	r3, #11
 8004150:	d1f3      	bne.n	800413a <_ux_device_stack_configuration_set+0xea>
			iad_first_interface = (ULONG)*(device_framework + 2);
 8004152:	f894 a002 	ldrb.w	sl, [r4, #2]
			iad_number_interfaces = (ULONG)*(device_framework + 3);
 8004156:	f894 9003 	ldrb.w	r9, [r4, #3]
			iad_flag = UX_TRUE;
 800415a:	f04f 0b01 	mov.w	fp, #1
 800415e:	e7ec      	b.n	800413a <_ux_device_stack_configuration_set+0xea>
			_ux_utility_descriptor_parse(device_framework,
 8004160:	ab02      	add	r3, sp, #8
 8004162:	2209      	movs	r2, #9
 8004164:	493b      	ldr	r1, [pc, #236]	; (8004254 <_ux_device_stack_configuration_set+0x204>)
 8004166:	4620      	mov	r0, r4
 8004168:	f7fe fdca 	bl	8002d00 <_ux_utility_descriptor_parse>
			if (interface_descriptor.bAlternateSetting == 0)
 800416c:	9b05      	ldr	r3, [sp, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <_ux_device_stack_configuration_set+0xee>
				if (iad_flag == UX_TRUE)
 8004172:	f1bb 0f01 	cmp.w	fp, #1
 8004176:	d132      	bne.n	80041de <_ux_device_stack_configuration_set+0x18e>
					if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8004178:	9904      	ldr	r1, [sp, #16]
 800417a:	4551      	cmp	r1, sl
 800417c:	d00d      	beq.n	800419a <_ux_device_stack_configuration_set+0x14a>
						_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <_ux_device_stack_configuration_set+0x1fc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 8004186:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800418a:	9b01      	ldr	r3, [sp, #4]
 800418c:	f8cc 3004 	str.w	r3, [ip, #4]
					if (iad_number_interfaces == 0)
 8004190:	f1b9 0901 	subs.w	r9, r9, #1
 8004194:	d145      	bne.n	8004222 <_ux_device_stack_configuration_set+0x1d2>
						iad_flag = UX_FALSE;
 8004196:	46cb      	mov	fp, r9
 8004198:	e043      	b.n	8004222 <_ux_device_stack_configuration_set+0x1d2>
						class = _ux_system_slave->ux_system_slave_class_array;
 800419a:	4a2c      	ldr	r2, [pc, #176]	; (800424c <_ux_device_stack_configuration_set+0x1fc>)
 800419c:	6810      	ldr	r0, [r2, #0]
 800419e:	f8d0 2180 	ldr.w	r2, [r0, #384]	; 0x180
 80041a2:	46ac      	mov	ip, r5
						for (class_index = 0;
 80041a4:	e002      	b.n	80041ac <_ux_device_stack_configuration_set+0x15c>
							class++;
 80041a6:	f502 7298 	add.w	r2, r2, #304	; 0x130
								class_index++)
 80041aa:	3301      	adds	r3, #1
								class_index < _ux_system_slave->ux_system_slave_max_class;
 80041ac:	f8d0 5178 	ldr.w	r5, [r0, #376]	; 0x178
						for (class_index = 0;
 80041b0:	429d      	cmp	r5, r3
 80041b2:	d912      	bls.n	80041da <_ux_device_stack_configuration_set+0x18a>
							if (class->ux_slave_class_status == UX_USED)
 80041b4:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80041b6:	2d01      	cmp	r5, #1
 80041b8:	d1f5      	bne.n	80041a6 <_ux_device_stack_configuration_set+0x156>
										== class->ux_slave_class_interface_number) &&
 80041ba:	f8d2 5120 	ldr.w	r5, [r2, #288]	; 0x120
								if ((interface_descriptor.bInterfaceNumber
 80041be:	42a9      	cmp	r1, r5
 80041c0:	d1f1      	bne.n	80041a6 <_ux_device_stack_configuration_set+0x156>
												== class->ux_slave_class_configuration_number))
 80041c2:	f8d2 5124 	ldr.w	r5, [r2, #292]	; 0x124
										== class->ux_slave_class_interface_number) &&
 80041c6:	42b5      	cmp	r5, r6
 80041c8:	d1ed      	bne.n	80041a6 <_ux_device_stack_configuration_set+0x156>
 80041ca:	4665      	mov	r5, ip
									_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 80041cc:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 80041d0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80041d4:	6042      	str	r2, [r0, #4]
									current_class = class;
 80041d6:	9201      	str	r2, [sp, #4]
									break;
 80041d8:	e7da      	b.n	8004190 <_ux_device_stack_configuration_set+0x140>
 80041da:	4665      	mov	r5, ip
 80041dc:	e7d8      	b.n	8004190 <_ux_device_stack_configuration_set+0x140>
					class = _ux_system_slave->ux_system_slave_class_array;
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <_ux_device_stack_configuration_set+0x1fc>)
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
					for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class;
 80041e6:	465a      	mov	r2, fp
 80041e8:	46ac      	mov	ip, r5
 80041ea:	e002      	b.n	80041f2 <_ux_device_stack_configuration_set+0x1a2>
						class++;
 80041ec:	f503 7398 	add.w	r3, r3, #304	; 0x130
							class_index++)
 80041f0:	3201      	adds	r2, #1
					for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class;
 80041f2:	f8d0 1178 	ldr.w	r1, [r0, #376]	; 0x178
 80041f6:	4291      	cmp	r1, r2
 80041f8:	d912      	bls.n	8004220 <_ux_device_stack_configuration_set+0x1d0>
						if (class->ux_slave_class_status == UX_USED)
 80041fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80041fc:	2901      	cmp	r1, #1
 80041fe:	d1f5      	bne.n	80041ec <_ux_device_stack_configuration_set+0x19c>
							if ((interface_descriptor.bInterfaceNumber
 8004200:	9904      	ldr	r1, [sp, #16]
									== class->ux_slave_class_interface_number)
 8004202:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
							if ((interface_descriptor.bInterfaceNumber
 8004206:	42a9      	cmp	r1, r5
 8004208:	d1f0      	bne.n	80041ec <_ux_device_stack_configuration_set+0x19c>
											== class->ux_slave_class_configuration_number))
 800420a:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
									&&
 800420e:	42b5      	cmp	r5, r6
 8004210:	d1ec      	bne.n	80041ec <_ux_device_stack_configuration_set+0x19c>
 8004212:	4665      	mov	r5, ip
								_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 8004214:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 8004218:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800421c:	6043      	str	r3, [r0, #4]
								break;
 800421e:	e000      	b.n	8004222 <_ux_device_stack_configuration_set+0x1d2>
 8004220:	4665      	mov	r5, ip
				_ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8004222:	2200      	movs	r2, #0
 8004224:	4639      	mov	r1, r7
 8004226:	4620      	mov	r0, r4
 8004228:	f000 f816 	bl	8004258 <_ux_device_stack_interface_set>
 800422c:	e787      	b.n	800413e <_ux_device_stack_configuration_set+0xee>
	}

	/* Mark the device as configured now. */
	device->ux_slave_device_state = UX_DEVICE_CONFIGURED;
 800422e:	2203      	movs	r2, #3
 8004230:	642a      	str	r2, [r5, #64]	; 0x40

	/* The DCD needs to update the device state too. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID*) UX_DEVICE_CONFIGURED);
 8004232:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004234:	2113      	movs	r1, #19
 8004236:	4628      	mov	r0, r5
 8004238:	4798      	blx	r3

	/* Configuration mounted. */
	return (UX_SUCCESS);
 800423a:	2000      	movs	r0, #0
 800423c:	e000      	b.n	8004240 <_ux_device_stack_configuration_set+0x1f0>
		return (UX_SUCCESS);
 800423e:	2000      	movs	r0, #0
}
 8004240:	b01f      	add	sp, #124	; 0x7c
 8004242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (UX_ERROR);
 8004246:	20ff      	movs	r0, #255	; 0xff
 8004248:	e7fa      	b.n	8004240 <_ux_device_stack_configuration_set+0x1f0>
 800424a:	bf00      	nop
 800424c:	20002b80 	.word	0x20002b80
 8004250:	200000f4 	.word	0x200000f4
 8004254:	20000114 	.word	0x20000114

08004258 <_ux_device_stack_interface_set>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_interface_set(UCHAR* device_framework, ULONG device_framework_length,
		ULONG alternate_setting_value)
{
 8004258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 800425c:	4b3c      	ldr	r3, [pc, #240]	; (8004350 <_ux_device_stack_interface_set+0xf8>)
 800425e:	681f      	ldr	r7, [r3, #0]
 8004260:	46b8      	mov	r8, r7

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8004262:	f107 0940 	add.w	r9, r7, #64	; 0x40

	/*--------------------------------------------------------------------------------------------*/

	/* Find a free interface in the pool and hook it to the existing interface. */
	UX_SLAVE_INTERFACE* interface = device->ux_slave_device_interfaces_pool;
 8004266:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134

	ULONG interfaces_pool_number = device->ux_slave_device_interfaces_pool_number;
 800426a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
	while (interfaces_pool_number != 0)
 800426e:	b133      	cbz	r3, 800427e <_ux_device_stack_interface_set+0x26>
	{
		/* Check if this interface is free. */
		if (interface->ux_slave_interface_status == UX_UNUSED)
 8004270:	6822      	ldr	r2, [r4, #0]
 8004272:	b112      	cbz	r2, 800427a <_ux_device_stack_interface_set+0x22>
			interface->ux_slave_interface_status = UX_USED;
			break;
		}

		/* Try the next interface. */
		interface++;
 8004274:	3438      	adds	r4, #56	; 0x38

		/* Decrement the number of interfaces left to scan in the pool. */
		interfaces_pool_number--;
 8004276:	3b01      	subs	r3, #1
 8004278:	e7f9      	b.n	800426e <_ux_device_stack_interface_set+0x16>
			interface->ux_slave_interface_status = UX_USED;
 800427a:	2201      	movs	r2, #1
 800427c:	6022      	str	r2, [r4, #0]
	}

	/* Did we find a free interface ?  */
	if (interfaces_pool_number == 0)
 800427e:	2b00      	cmp	r3, #0
 8004280:	d05f      	beq.n	8004342 <_ux_device_stack_interface_set+0xea>
 8004282:	468a      	mov	sl, r1
 8004284:	4606      	mov	r6, r0

	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, interface, 0, 0, 0)

	/* Parse the descriptor in something more readable. */
	_ux_utility_descriptor_parse(device_framework, _ux_system_interface_descriptor_structure,
 8004286:	f104 030c 	add.w	r3, r4, #12
 800428a:	2209      	movs	r2, #9
 800428c:	4931      	ldr	r1, [pc, #196]	; (8004354 <_ux_device_stack_interface_set+0xfc>)
 800428e:	f7fe fd37 	bl	8002d00 <_ux_utility_descriptor_parse>
			UX_INTERFACE_DESCRIPTOR_ENTRIES, (UCHAR*)&interface->ux_slave_interface_descriptor);

	/*--------------------------------------------------------------------------------------------*/

	/* Attach this interface to the end of the interface chain. */
	if (device->ux_slave_device_first_interface == UX_NULL)
 8004292:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004296:	b91a      	cbnz	r2, 80042a0 <_ux_device_stack_interface_set+0x48>
	{
		device->ux_slave_device_first_interface = interface;
 8004298:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800429c:	e004      	b.n	80042a8 <_ux_device_stack_interface_set+0x50>
	{
		/* Multiple interfaces exist, so find the end of the chain. */
		UX_SLAVE_INTERFACE* interface_link = device->ux_slave_device_first_interface;

		while (interface_link->ux_slave_interface_next_interface != UX_NULL)
			interface_link = interface_link->ux_slave_interface_next_interface;
 800429e:	461a      	mov	r2, r3
		while (interface_link->ux_slave_interface_next_interface != UX_NULL)
 80042a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1fb      	bne.n	800429e <_ux_device_stack_interface_set+0x46>

		interface_link->ux_slave_interface_next_interface = interface;
 80042a6:	6314      	str	r4, [r2, #48]	; 0x30
	}

	/* Point beyond the interface descriptor. */
	device_framework_length -= (ULONG)*device_framework;
 80042a8:	7830      	ldrb	r0, [r6, #0]
 80042aa:	ebaa 0a00 	sub.w	sl, sl, r0
	device_framework += (ULONG)*device_framework;
 80042ae:	4406      	add	r6, r0
	UCHAR descriptor_type;
	ULONG endpoints_pool_number;
	UINT status;

	/* Parse the device framework and locate endpoint descriptor(s). */
	while (device_framework_length != 0)
 80042b0:	e031      	b.n	8004316 <_ux_device_stack_interface_set+0xbe>
		switch (descriptor_type)
		{
			case UX_ENDPOINT_DESCRIPTOR_ITEM:
				/* Find a free endpoint in the pool and hook it to the existing interface
				 * after it's created by DCD. */
				endpoint = device->ux_slave_device_endpoints_pool;
 80042b2:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
				endpoints_pool_number = device->ux_slave_device_endpoints_pool_number;
 80042b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
				while (endpoints_pool_number != 0)
 80042ba:	b133      	cbz	r3, 80042ca <_ux_device_stack_interface_set+0x72>
				{
					/* Check if this endpoint is free. */
					if (endpoint->ux_slave_endpoint_status == UX_UNUSED)
 80042bc:	682a      	ldr	r2, [r5, #0]
 80042be:	b112      	cbz	r2, 80042c6 <_ux_device_stack_interface_set+0x6e>
						endpoint->ux_slave_endpoint_status = UX_USED;
						break;
					}

					/* Try the next endpoint. */
					endpoint++;
 80042c0:	3590      	adds	r5, #144	; 0x90

					/* Decrement the number of endpoints to scan from the pool. */
					endpoints_pool_number--;
 80042c2:	3b01      	subs	r3, #1
 80042c4:	e7f9      	b.n	80042ba <_ux_device_stack_interface_set+0x62>
						endpoint->ux_slave_endpoint_status = UX_USED;
 80042c6:	2201      	movs	r2, #1
 80042c8:	602a      	str	r2, [r5, #0]
				}

				/* Did we find a free endpoint ?  */
				if (endpoints_pool_number == 0)
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d03d      	beq.n	800434a <_ux_device_stack_interface_set+0xf2>
					return (UX_MEMORY_INSUFFICIENT);

				/* Parse the descriptor in something more readable. */
				_ux_utility_descriptor_parse(device_framework,
 80042ce:	f105 030c 	add.w	r3, r5, #12
 80042d2:	2206      	movs	r2, #6
 80042d4:	4920      	ldr	r1, [pc, #128]	; (8004358 <_ux_device_stack_interface_set+0x100>)
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7fe fd12 	bl	8002d00 <_ux_utility_descriptor_parse>

				/* Now we create a transfer request to accept transfer on this endpoint. */
				transfer_request = &endpoint->ux_slave_endpoint_transfer_request;

				/* We store the endpoint in the transfer request as well. */
				transfer_request->ux_slave_transfer_request_endpoint = endpoint;
 80042dc:	63ad      	str	r5, [r5, #56]	; 0x38

				/* By default the timeout is infinite on request. */
				transfer_request->ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	67eb      	str	r3, [r5, #124]	; 0x7c

				/* Attach the interface to the endpoint. */
				endpoint->ux_slave_endpoint_interface = interface;
 80042e4:	62ac      	str	r4, [r5, #40]	; 0x28

				/* Attach the device to the endpoint. */
				endpoint->ux_slave_endpoint_device = device;
 80042e6:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c

				/* Create the endpoint at the DCD level. */
				status = dcd->ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID*)endpoint);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	462a      	mov	r2, r5
 80042ee:	210e      	movs	r1, #14
 80042f0:	4640      	mov	r0, r8
 80042f2:	4798      	blx	r3

				/* Do a sanity check on endpoint creation. */
				if (status != UX_SUCCESS)
 80042f4:	4603      	mov	r3, r0
 80042f6:	b918      	cbnz	r0, 8004300 <_ux_device_stack_interface_set+0xa8>
					endpoint->ux_slave_endpoint_status = UX_UNUSED;
					return (status);
				}

				/* Attach this endpoint to the end of the endpoint chain. */
				if (interface->ux_slave_interface_first_endpoint == UX_NULL)
 80042f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80042fa:	b92a      	cbnz	r2, 8004308 <_ux_device_stack_interface_set+0xb0>
				{
					interface->ux_slave_interface_first_endpoint = endpoint;
 80042fc:	6365      	str	r5, [r4, #52]	; 0x34
 80042fe:	e007      	b.n	8004310 <_ux_device_stack_interface_set+0xb8>
					endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8004300:	2200      	movs	r2, #0
 8004302:	602a      	str	r2, [r5, #0]
					return (status);
 8004304:	e01e      	b.n	8004344 <_ux_device_stack_interface_set+0xec>
				else
				{
					/* Multiple endpoints exist, so find the end of the chain. */
					endpoint_link = interface->ux_slave_interface_first_endpoint;
					while (endpoint_link->ux_slave_endpoint_next_endpoint != UX_NULL)
						endpoint_link = endpoint_link->ux_slave_endpoint_next_endpoint;
 8004306:	461a      	mov	r2, r3
					while (endpoint_link->ux_slave_endpoint_next_endpoint != UX_NULL)
 8004308:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1fb      	bne.n	8004306 <_ux_device_stack_interface_set+0xae>
					endpoint_link->ux_slave_endpoint_next_endpoint = endpoint;
 800430e:	6255      	str	r5, [r2, #36]	; 0x24
			default:
				break;
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 8004310:	ebaa 0a0b 	sub.w	sl, sl, fp

		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 8004314:	445e      	add	r6, fp
	while (device_framework_length != 0)
 8004316:	f1ba 0f00 	cmp.w	sl, #0
 800431a:	d00d      	beq.n	8004338 <_ux_device_stack_interface_set+0xe0>
		descriptor_length = (ULONG)*device_framework;
 800431c:	f896 b000 	ldrb.w	fp, [r6]
		descriptor_type = *(device_framework + 1);
 8004320:	7873      	ldrb	r3, [r6, #1]
		switch (descriptor_type)
 8004322:	2b04      	cmp	r3, #4
 8004324:	d003      	beq.n	800432e <_ux_device_stack_interface_set+0xd6>
 8004326:	2b05      	cmp	r3, #5
 8004328:	d0c3      	beq.n	80042b2 <_ux_device_stack_interface_set+0x5a>
 800432a:	2b02      	cmp	r3, #2
 800432c:	d1f0      	bne.n	8004310 <_ux_device_stack_interface_set+0xb8>
				status = _ux_device_stack_interface_start(interface);
 800432e:	4620      	mov	r0, r4
 8004330:	f000 f814 	bl	800435c <_ux_device_stack_interface_start>
 8004334:	4603      	mov	r3, r0
				return (status);
 8004336:	e005      	b.n	8004344 <_ux_device_stack_interface_set+0xec>
	}

	/* The interface attached to this configuration must be started at the class level. */
	status = _ux_device_stack_interface_start(interface);
 8004338:	4620      	mov	r0, r4
 800433a:	f000 f80f 	bl	800435c <_ux_device_stack_interface_start>
 800433e:	4603      	mov	r3, r0

	/* Return the status to the caller. */
	return (status);
 8004340:	e000      	b.n	8004344 <_ux_device_stack_interface_set+0xec>
		return (UX_MEMORY_INSUFFICIENT);
 8004342:	2312      	movs	r3, #18
}
 8004344:	4618      	mov	r0, r3
 8004346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return (UX_MEMORY_INSUFFICIENT);
 800434a:	2312      	movs	r3, #18
 800434c:	e7fa      	b.n	8004344 <_ux_device_stack_interface_set+0xec>
 800434e:	bf00      	nop
 8004350:	20002b80 	.word	0x20002b80
 8004354:	20000114 	.word	0x20000114
 8004358:	2000010c 	.word	0x2000010c

0800435c <_ux_device_stack_interface_start>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_interface_start(UX_SLAVE_INTERFACE* interface)
{
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
	/* Get the class for the interface. */
	UX_SLAVE_CLASS* class =
			_ux_system_slave->
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <_ux_device_stack_interface_start+0x68>)
 8004362:	681d      	ldr	r5, [r3, #0]
					ux_system_slave_interface_class_array[interface->ux_slave_interface_descriptor.bInterfaceNumber];
 8004364:	6943      	ldr	r3, [r0, #20]
	UX_SLAVE_CLASS* class =
 8004366:	3360      	adds	r3, #96	; 0x60
 8004368:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800436c:	685e      	ldr	r6, [r3, #4]

	/* Check if class driver is available. */
	if (class == UX_NULL)
 800436e:	b32e      	cbz	r6, 80043bc <_ux_device_stack_interface_start+0x60>
 8004370:	4604      	mov	r4, r0
	 * 		UINT ux_slave_class_command_protocol;
	 * 		struct UX_SLAVE_CLASS_STRUCT* ux_slave_class_command_class_ptr;
	 * 		VOID* ux_slave_class_command_parameter;
	 * 		VOID* ux_slave_class_command_interface_number;
	 * } UX_SLAVE_CLASS_COMMAND; */
	UX_SLAVE_CLASS_COMMAND class_command = { 0 };
 8004372:	2228      	movs	r2, #40	; 0x28
 8004374:	2100      	movs	r1, #0
 8004376:	a802      	add	r0, sp, #8
 8004378:	f006 f851 	bl	800a41e <memset>

	/* Build all the fields of the Class Command. */
	class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_QUERY;
 800437c:	2301      	movs	r3, #1
 800437e:	9301      	str	r3, [sp, #4]
	class_command.ux_slave_class_command_interface = (VOID*)interface;
 8004380:	9403      	str	r4, [sp, #12]
	class_command.ux_slave_class_command_pid = device->ux_slave_device_descriptor.idProduct;
 8004382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004384:	9304      	str	r3, [sp, #16]
	class_command.ux_slave_class_command_vid = device->ux_slave_device_descriptor.idVendor;
 8004386:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004388:	9305      	str	r3, [sp, #20]
	class_command.ux_slave_class_command_class =
			interface->ux_slave_interface_descriptor.bInterfaceClass;
 800438a:	6a23      	ldr	r3, [r4, #32]
	class_command.ux_slave_class_command_class =
 800438c:	9306      	str	r3, [sp, #24]
	class_command.ux_slave_class_command_subclass =
			interface->ux_slave_interface_descriptor.bInterfaceSubClass;
 800438e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	class_command.ux_slave_class_command_subclass =
 8004390:	9307      	str	r3, [sp, #28]
	class_command.ux_slave_class_command_protocol =
			interface->ux_slave_interface_descriptor.bInterfaceProtocol;
 8004392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	class_command.ux_slave_class_command_protocol =
 8004394:	9308      	str	r3, [sp, #32]

	/* We can now memorize the interface pointer associated with this class. */
	class->ux_slave_class_interface = interface;
 8004396:	f8c6 4128 	str.w	r4, [r6, #296]	; 0x128

	/* We have found a potential candidate. Call this registered class entry function. */
	UINT status = class->ux_slave_class_entry_function(&class_command);
 800439a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800439c:	a801      	add	r0, sp, #4
 800439e:	4798      	blx	r3

	/* The status tells us if the registered class wants to own this class. */
	if (status == UX_SUCCESS)
 80043a0:	b970      	cbnz	r0, 80043c0 <_ux_device_stack_interface_start+0x64>
	{
		/* Store the class container. */
		class_command.ux_slave_class_command_class_ptr = class;
 80043a2:	9609      	str	r6, [sp, #36]	; 0x24

		/* Store the command. */
		class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 80043a4:	a80c      	add	r0, sp, #48	; 0x30
 80043a6:	2302      	movs	r3, #2
 80043a8:	f840 3d2c 	str.w	r3, [r0, #-44]!

		/* Activate the class. */
		status = class->ux_slave_class_entry_function(&class_command);
 80043ac:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80043ae:	4798      	blx	r3

		/* If the class was successfully activated, set the class for the interface. */
		if (status == UX_SUCCESS)
 80043b0:	4603      	mov	r3, r0
 80043b2:	b900      	cbnz	r0, 80043b6 <_ux_device_stack_interface_start+0x5a>
			interface->ux_slave_interface_class = class;
 80043b4:	6066      	str	r6, [r4, #4]
		return (status);
	}

	/* There is no driver who want to own this class!  */
	return (UX_NO_CLASS_MATCH);
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	b00c      	add	sp, #48	; 0x30
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
		return (UX_NO_CLASS_MATCH);
 80043bc:	2357      	movs	r3, #87	; 0x57
 80043be:	e7fa      	b.n	80043b6 <_ux_device_stack_interface_start+0x5a>
	return (UX_NO_CLASS_MATCH);
 80043c0:	2357      	movs	r3, #87	; 0x57
 80043c2:	e7f8      	b.n	80043b6 <_ux_device_stack_interface_start+0x5a>
 80043c4:	20002b80 	.word	0x20002b80

080043c8 <_ux_device_stack_transfer_abort>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER* transfer_request, ULONG completion_code)
{
 80043c8:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code,
			0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <_ux_device_stack_transfer_abort+0x3c>)
 80043cc:	681b      	ldr	r3, [r3, #0]

	/* Sets the completion code due to bus reset. */
	transfer_request->ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 80043ce:	2226      	movs	r2, #38	; 0x26
 80043d0:	6202      	str	r2, [r0, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80043d2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80043d6:	b672      	cpsid	i

	/* Ensure we're not preempted by the transfer completion ISR. */
	TX_DISABLE

	/* It's possible the transfer already completed. Ensure it hasn't before doing the abort. */
	if (transfer_request->ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 80043d8:	6802      	ldr	r2, [r0, #0]
 80043da:	2a01      	cmp	r2, #1
 80043dc:	d10f      	bne.n	80043fe <_ux_device_stack_transfer_abort+0x36>
 80043de:	4604      	mov	r4, r0
	{
		/* Call the DCD if necessary for cleaning up the pending transfer. */
		dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID*)transfer_request);
 80043e0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80043e2:	4602      	mov	r2, r0
 80043e4:	210d      	movs	r1, #13
 80043e6:	4618      	mov	r0, r3
 80043e8:	47b0      	blx	r6
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80043ea:	f385 8810 	msr	PRIMASK, r5
		TX_RESTORE

		/* We need to set the completion code for the transfer to aborted. Note that the transfer
		 * request function cannot simultaneously modify this because if the transfer was pending,
		 * then the transfer's thread is currently waiting for it to complete. */
		transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_ABORT;
 80043ee:	4620      	mov	r0, r4
 80043f0:	2304      	movs	r3, #4
 80043f2:	f840 3b2c 	str.w	r3, [r0], #44

		/* Wake up the device driver who is waiting on the semaphore. */
		_ux_utility_semaphore_put(&transfer_request->ux_slave_transfer_request_semaphore);
 80043f6:	f7fe fe25 	bl	8003044 <_ux_utility_semaphore_put>
		TX_RESTORE
	}

	/* This function never fails. */
	return (UX_SUCCESS);
}
 80043fa:	2000      	movs	r0, #0
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
 80043fe:	f385 8810 	msr	PRIMASK, r5
 8004402:	e7fa      	b.n	80043fa <_ux_device_stack_transfer_abort+0x32>
 8004404:	20002b80 	.word	0x20002b80

08004408 <_ux_device_stack_transfer_all_request_abort>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8004408:	b508      	push	{r3, lr}

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800440a:	3030      	adds	r0, #48	; 0x30
 800440c:	f7ff ffdc 	bl	80043c8 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8004410:	2000      	movs	r0, #0
 8004412:	bd08      	pop	{r3, pc}

08004414 <_ux_utility_long_put>:
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8004414:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8004416:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800441a:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800441c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004420:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8004422:	0e09      	lsrs	r1, r1, #24
 8004424:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 8004426:	4770      	bx	lr

08004428 <_ux_utility_long_put_big_endian>:
ULONG   high_word_value;

    /* First we swap the value words.  */
    low_word_value =  value >> 16;
    high_word_value =  value << 16;
    value =  high_word_value | low_word_value;
 8004428:	ea4f 4131 	mov.w	r1, r1, ror #16

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800442c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004430:	7003      	strb	r3, [r0, #0]
    *address++ =  (UCHAR) (value & 0xff);
 8004432:	7041      	strb	r1, [r0, #1]
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 8004434:	0e0b      	lsrs	r3, r1, #24
 8004436:	7083      	strb	r3, [r0, #2]
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 8004438:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800443c:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 800443e:	4770      	bx	lr

08004440 <_ux_utility_semaphore_get>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(TX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8004440:	b530      	push	{r4, r5, lr}
 8004442:	b08f      	sub	sp, #60	; 0x3c
 8004444:	4604      	mov	r4, r0
 8004446:	460d      	mov	r5, r1
ULONG       time_slice;
TX_THREAD   *next_thread;
TX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8004448:	f004 fd52 	bl	8008ef0 <_tx_thread_identify>

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 800444c:	ab06      	add	r3, sp, #24
 800444e:	9304      	str	r3, [sp, #16]
 8004450:	ab07      	add	r3, sp, #28
 8004452:	9303      	str	r3, [sp, #12]
 8004454:	ab08      	add	r3, sp, #32
 8004456:	9302      	str	r3, [sp, #8]
 8004458:	ab09      	add	r3, sp, #36	; 0x24
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	ab0a      	add	r3, sp, #40	; 0x28
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	ab0b      	add	r3, sp, #44	; 0x2c
 8004462:	aa0c      	add	r2, sp, #48	; 0x30
 8004464:	a90d      	add	r1, sp, #52	; 0x34
 8004466:	f005 fb81 	bl	8009b6c <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <_ux_utility_semaphore_get+0x44>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6999      	ldr	r1, [r3, #24]
 8004470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004472:	4291      	cmp	r1, r2
 8004474:	d200      	bcs.n	8004478 <_ux_utility_semaphore_get+0x38>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 8004476:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 8004478:	4629      	mov	r1, r5
 800447a:	4620      	mov	r0, r4
 800447c:	f005 fa7c 	bl	8009978 <_txe_semaphore_get>

    /* Return completion status.  */
    return(status);
}
 8004480:	b00f      	add	sp, #60	; 0x3c
 8004482:	bd30      	pop	{r4, r5, pc}
 8004484:	20002b88 	.word	0x20002b88

08004488 <_ux_utility_short_put_big_endian>:

    
    /* First we swap the value bytes. */
    low_byte_value =  value >> 8;
    high_byte_value =  (USHORT)(value<< 8);
    value =  high_byte_value | low_byte_value;
 8004488:	ba49      	rev16	r1, r1
 800448a:	b289      	uxth	r1, r1

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800448c:	7001      	strb	r1, [r0, #0]
    *address=     (UCHAR) ((value >> 8) & 0xff);
 800448e:	0a09      	lsrs	r1, r1, #8
 8004490:	7041      	strb	r1, [r0, #1]

    /* Return to caller. */
    return;
}
 8004492:	4770      	bx	lr

08004494 <_ux_utility_thread_resume>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(TX_THREAD *thread_ptr)
{
 8004494:	b508      	push	{r3, lr}

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 8004496:	f005 fb89 	bl	8009bac <_txe_thread_resume>

    /* Return completion status.  */
    return(status);
}
 800449a:	bd08      	pop	{r3, pc}

0800449c <_ux_dcd_stm32_address_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_address_set(UX_DCD_STM32* dcd_stm32, ULONG address)
{
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4604      	mov	r4, r0
 80044a0:	460d      	mov	r5, r1
    /* Clear the previous address. */
    _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 80044a2:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 80044a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044aa:	f7fd fc71 	bl	8001d90 <_ux_dcd_stm32_register_clear>
            UX_DCD_STM32_OTG_FS_DCFG_DAD_MASK);

    /* Store the new address of the device. */
    _ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 80044ae:	012a      	lsls	r2, r5, #4
 80044b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044b4:	4620      	mov	r0, r4
 80044b6:	f7fd fc76 	bl	8001da6 <_ux_dcd_stm32_register_set>
            address << UX_DCD_STM32_OTG_FS_DCFG_DAD_SHIFT);

    /* This function always succeeds. */
    return (UX_SUCCESS);
}
 80044ba:	2000      	movs	r0, #0
 80044bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080044c0 <_ux_dcd_stm32_endpoint_create>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_endpoint_create(UX_DCD_STM32* dcd_stm32, UX_SLAVE_ENDPOINT* endpoint)
{
 80044c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* The endpoint index in the array of the STM32 must match the endpoint number.
	 * The STM32 has 4 endpoints maximum. Each can be IN/OUT. */
	ULONG stm32_endpoint_index = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80044c4:	694c      	ldr	r4, [r1, #20]
 80044c6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
			& ~UX_ENDPOINT_DIRECTION;

	/* Fetch the address of the physical endpoint. */
	UX_DCD_STM32_ED* ed = &dcd_stm32->ux_dcd_stm32_ed[stm32_endpoint_index];
 80044ca:	00e2      	lsls	r2, r4, #3
 80044cc:	4422      	add	r2, r4
 80044ce:	0093      	lsls	r3, r2, #2
 80044d0:	4403      	add	r3, r0
 80044d2:	f103 0804 	add.w	r8, r3, #4

	ULONG stm32_endpoint_register;
	ULONG stm32_endpoint_address;

	/* Check the endpoint status, if it is free, reserve it. If not reject this endpoint. */
	if ((ed->ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f013 0f01 	tst.w	r3, #1
 80044dc:	f040 808e 	bne.w	80045fc <_ux_dcd_stm32_endpoint_create+0x13c>
 80044e0:	460d      	mov	r5, r1
 80044e2:	4606      	mov	r6, r0
	{
		/* We can use this endpoint. */
		ed->ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_USED;
 80044e4:	00e2      	lsls	r2, r4, #3
 80044e6:	4422      	add	r2, r4
 80044e8:	0097      	lsls	r7, r2, #2
 80044ea:	4407      	add	r7, r0
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	607b      	str	r3, [r7, #4]

		/* Keep the physical endpoint address in the endpoint container. */
		endpoint->ux_slave_endpoint_ed = (VOID*)ed;
 80044f2:	f8c1 8008 	str.w	r8, [r1, #8]

		/* Save the endpoint pointer. */
		ed->ux_dcd_stm32_ed_endpoint = endpoint;
 80044f6:	6279      	str	r1, [r7, #36]	; 0x24

		/* And its index. */
		ed->ux_dcd_stm32_ed_index = stm32_endpoint_index;
 80044f8:	60fc      	str	r4, [r7, #12]

		/* And its direction. */
		ed->ux_dcd_stm32_ed_direction = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80044fa:	694b      	ldr	r3, [r1, #20]
				& UX_ENDPOINT_DIRECTION;
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
		ed->ux_dcd_stm32_ed_direction = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 8004500:	623b      	str	r3, [r7, #32]

		/* And its type. */
		ed->ux_dcd_stm32_ed_type = endpoint->ux_slave_endpoint_descriptor.bmAttributes
 8004502:	698b      	ldr	r3, [r1, #24]
				& UX_MASK_ENDPOINT_TYPE;
 8004504:	f003 0303 	and.w	r3, r3, #3
		ed->ux_dcd_stm32_ed_type = endpoint->ux_slave_endpoint_descriptor.bmAttributes
 8004508:	61fb      	str	r3, [r7, #28]

		/* Reset the endpoint. */
		_ux_dcd_stm32_endpoint_reset(dcd_stm32, endpoint);
 800450a:	f000 f8b3 	bl	8004674 <_ux_dcd_stm32_endpoint_reset>

		/* Reset the endpoint register. */
		stm32_endpoint_register = 0;

		/* For IN endpoint, the FIFO number is stored in the DIEPCTL register. */
		if (ed->ux_dcd_stm32_ed_direction == UX_ENDPOINT_IN)
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d00d      	beq.n	8004530 <_ux_dcd_stm32_endpoint_create+0x70>
		stm32_endpoint_register = 0;
 8004514:	2700      	movs	r7, #0
			/* Set the FIFO number based on the endpoint index. */
			stm32_endpoint_register |= stm32_endpoint_index
					<< UX_DCD_STM32_OTG_FS_DIEPCTL_TXFNUM_SHIFT;

		/* Set USBAEP Active endpoint bit. */
		stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_USBAEP;
 8004516:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000

		/* Build the endpoint DIEP or DOEP register. */
		switch (ed->ux_dcd_stm32_ed_type)
 800451a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800451e:	0093      	lsls	r3, r2, #2
 8004520:	4433      	add	r3, r6
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d86c      	bhi.n	8004602 <_ux_dcd_stm32_endpoint_create+0x142>
 8004528:	e8df f003 	tbb	[pc, r3]
 800452c:	55505a04 	.word	0x55505a04
					<< UX_DCD_STM32_OTG_FS_DIEPCTL_TXFNUM_SHIFT;
 8004530:	05a7      	lsls	r7, r4, #22
 8004532:	e7f0      	b.n	8004516 <_ux_dcd_stm32_endpoint_create+0x56>
		{
			case UX_CONTROL_ENDPOINT:
				/* Set the MaxPacketSize. This is different for Control endpoints and other endpoints. */
				switch (endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8004534:	69eb      	ldr	r3, [r5, #28]
 8004536:	2b10      	cmp	r3, #16
 8004538:	d046      	beq.n	80045c8 <_ux_dcd_stm32_endpoint_create+0x108>
 800453a:	d905      	bls.n	8004548 <_ux_dcd_stm32_endpoint_create+0x88>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d007      	beq.n	8004550 <_ux_dcd_stm32_endpoint_create+0x90>
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d106      	bne.n	8004552 <_ux_dcd_stm32_endpoint_create+0x92>
				{
					/* Is it 64 bytes ? */
					case 64:
						stm32_endpoint_register = 0;
 8004544:	2700      	movs	r7, #0
 8004546:	e004      	b.n	8004552 <_ux_dcd_stm32_endpoint_create+0x92>
				switch (endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8004548:	2b08      	cmp	r3, #8
 800454a:	d102      	bne.n	8004552 <_ux_dcd_stm32_endpoint_create+0x92>
						stm32_endpoint_register = 2;
						break;

					/* Is it 8 bytes ? */
					case 8:
						stm32_endpoint_register = 3;
 800454c:	2703      	movs	r7, #3
						break;
 800454e:	e000      	b.n	8004552 <_ux_dcd_stm32_endpoint_create+0x92>
						stm32_endpoint_register = 1;
 8004550:	2701      	movs	r7, #1
					default:
						break;
				}

				/* Set the UX_DCD_STM32_OTG_FS_DIEPCTL register. */
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8004552:	463a      	mov	r2, r7
 8004554:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8004558:	4630      	mov	r0, r6
 800455a:	f7fd fc2a 	bl	8001db2 <_ux_dcd_stm32_register_write>
						stm32_endpoint_register);

				/* Set the DAINTMSK field for control endpoint IN. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 800455e:	2201      	movs	r2, #1
 8004560:	40a2      	lsls	r2, r4
 8004562:	f640 011c 	movw	r1, #2076	; 0x81c
 8004566:	4630      	mov	r0, r6
 8004568:	f7fd fc1d 	bl	8001da6 <_ux_dcd_stm32_register_set>
						1 << stm32_endpoint_index);

				/* Set the UX_DCD_STM32_OTG_FS_DOEPCTL register. */
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 800456c:	463a      	mov	r2, r7
 800456e:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004572:	4630      	mov	r0, r6
 8004574:	f7fd fc1d 	bl	8001db2 <_ux_dcd_stm32_register_write>
						stm32_endpoint_register);

				/* Set the DAINTMSK field for control endpoint OUT. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 8004578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800457c:	40a2      	lsls	r2, r4
 800457e:	f640 011c 	movw	r1, #2076	; 0x81c
 8004582:	4630      	mov	r0, r6
 8004584:	f7fd fc0f 	bl	8001da6 <_ux_dcd_stm32_register_set>
			default:
				return (UX_ERROR);
		}

		/* Continue initialization for non control endpoints. */
		if (ed->ux_dcd_stm32_ed_type != UX_CONTROL_ENDPOINT)
 8004588:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800458c:	0093      	lsls	r3, r2, #2
 800458e:	4433      	add	r3, r6
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	b3c3      	cbz	r3, 8004606 <_ux_dcd_stm32_endpoint_create+0x146>
		{
			/* Set the endpoint direction. */
			if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8004594:	696b      	ldr	r3, [r5, #20]
 8004596:	f013 0f80 	tst.w	r3, #128	; 0x80
 800459a:	d026      	beq.n	80045ea <_ux_dcd_stm32_endpoint_create+0x12a>
					== UX_ENDPOINT_IN)
			{
				/* Reset FIFO for endpoint IN. */
				_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO,
 800459c:	4622      	mov	r2, r4
 800459e:	2120      	movs	r1, #32
 80045a0:	4630      	mov	r0, r6
 80045a2:	f7ff f9f0 	bl	8003986 <_ux_dcd_stm32_fifo_flush>
						stm32_endpoint_index);

				/* Set the DAINTMSK field for endpoint IN. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 80045a6:	2201      	movs	r2, #1
 80045a8:	40a2      	lsls	r2, r4
 80045aa:	f640 011c 	movw	r1, #2076	; 0x81c
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7fd fbf9 	bl	8001da6 <_ux_dcd_stm32_register_set>
				/* Set the DAINTMSK field for endpoint OUT. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
						0x10000 << stm32_endpoint_index);

			/* Get the endpoint address. */
			stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 80045b4:	4640      	mov	r0, r8
 80045b6:	f000 f84f 	bl	8004658 <_ux_dcd_stm32_endpoint_register_address_get>

			/* Set the endpoint register at the EP address. */
			_ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address,
 80045ba:	463a      	mov	r2, r7
 80045bc:	4601      	mov	r1, r0
 80045be:	4630      	mov	r0, r6
 80045c0:	f7fd fbf7 	bl	8001db2 <_ux_dcd_stm32_register_write>
					stm32_endpoint_register);
		}

		/* Return successful completion. */
		return (UX_SUCCESS);
 80045c4:	2000      	movs	r0, #0
 80045c6:	e01a      	b.n	80045fe <_ux_dcd_stm32_endpoint_create+0x13e>
						stm32_endpoint_register = 2;
 80045c8:	2702      	movs	r7, #2
						break;
 80045ca:	e7c2      	b.n	8004552 <_ux_dcd_stm32_endpoint_create+0x92>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 80045cc:	69eb      	ldr	r3, [r5, #28]
 80045ce:	433b      	orrs	r3, r7
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_BULK
 80045d0:	4f0e      	ldr	r7, [pc, #56]	; (800460c <_ux_dcd_stm32_endpoint_create+0x14c>)
 80045d2:	431f      	orrs	r7, r3
				break;
 80045d4:	e7d8      	b.n	8004588 <_ux_dcd_stm32_endpoint_create+0xc8>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 80045d6:	69eb      	ldr	r3, [r5, #28]
 80045d8:	433b      	orrs	r3, r7
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_INTERRUPT
 80045da:	4f0d      	ldr	r7, [pc, #52]	; (8004610 <_ux_dcd_stm32_endpoint_create+0x150>)
 80045dc:	431f      	orrs	r7, r3
				break;
 80045de:	e7d3      	b.n	8004588 <_ux_dcd_stm32_endpoint_create+0xc8>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 80045e0:	69eb      	ldr	r3, [r5, #28]
 80045e2:	431f      	orrs	r7, r3
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_ISO
 80045e4:	f447 2790 	orr.w	r7, r7, #294912	; 0x48000
				break;
 80045e8:	e7ce      	b.n	8004588 <_ux_dcd_stm32_endpoint_create+0xc8>
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 80045ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045ee:	40a2      	lsls	r2, r4
 80045f0:	f640 011c 	movw	r1, #2076	; 0x81c
 80045f4:	4630      	mov	r0, r6
 80045f6:	f7fd fbd6 	bl	8001da6 <_ux_dcd_stm32_register_set>
 80045fa:	e7db      	b.n	80045b4 <_ux_dcd_stm32_endpoint_create+0xf4>
	}

	/* Return an error. */
	return (UX_NO_ED_AVAILABLE);
 80045fc:	2014      	movs	r0, #20
}
 80045fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return (UX_ERROR);
 8004602:	20ff      	movs	r0, #255	; 0xff
 8004604:	e7fb      	b.n	80045fe <_ux_dcd_stm32_endpoint_create+0x13e>
		return (UX_SUCCESS);
 8004606:	2000      	movs	r0, #0
 8004608:	e7f9      	b.n	80045fe <_ux_dcd_stm32_endpoint_create+0x13e>
 800460a:	bf00      	nop
 800460c:	18088000 	.word	0x18088000
 8004610:	180c8000 	.word	0x180c8000

08004614 <_ux_dcd_stm32_endpoint_destroy>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4605      	mov	r5, r0

UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_address;

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8004618:	688c      	ldr	r4, [r1, #8]

    /* Set the endpoint direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800461a:	694b      	ldr	r3, [r1, #20]
 800461c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004620:	d112      	bne.n	8004648 <_ux_dcd_stm32_endpoint_destroy+0x34>
    }            
    else
    {
    
        /* Clear the DAINTMSK field for endpoint OUT.  */
        _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 0x1000 << ed -> ux_dcd_stm32_ed_index);
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004628:	409a      	lsls	r2, r3
 800462a:	f640 011c 	movw	r1, #2076	; 0x81c
 800462e:	f7fd fbaf 	bl	8001d90 <_ux_dcd_stm32_register_clear>
    }

    /* Get the endpoint address.  */
    stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f810 	bl	8004658 <_ux_dcd_stm32_endpoint_register_address_get>

    /* Clear the endpoint register at the EP address.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, 0);
 8004638:	2200      	movs	r2, #0
 800463a:	4601      	mov	r1, r0
 800463c:	4628      	mov	r0, r5
 800463e:	f7fd fbb8 	bl	8001db2 <_ux_dcd_stm32_register_write>

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8004642:	2000      	movs	r0, #0
 8004644:	6020      	str	r0, [r4, #0]

    /* This function never fails.  */
    return(UX_SUCCESS);         
}
 8004646:	bd38      	pop	{r3, r4, r5, pc}
        _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 1 << ed -> ux_dcd_stm32_ed_index);
 8004648:	68a3      	ldr	r3, [r4, #8]
 800464a:	2201      	movs	r2, #1
 800464c:	409a      	lsls	r2, r3
 800464e:	f640 011c 	movw	r1, #2076	; 0x81c
 8004652:	f7fd fb9d 	bl	8001d90 <_ux_dcd_stm32_register_clear>
 8004656:	e7ec      	b.n	8004632 <_ux_dcd_stm32_endpoint_destroy+0x1e>

08004658 <_ux_dcd_stm32_endpoint_register_address_get>:
/**************************************************************************/
ULONG  _ux_dcd_stm32_endpoint_register_address_get(UX_DCD_STM32_ED *ed)
{

    /* Check for endpoint 0.  */
    if (ed -> ux_dcd_stm32_ed_index == 0)
 8004658:	6883      	ldr	r3, [r0, #8]
 800465a:	b143      	cbz	r3, 800466e <_ux_dcd_stm32_endpoint_register_address_get+0x16>
    
    else
    {
                    
        /* Check the endpoint direction for the base.  */
        if (ed -> ux_dcd_stm32_ed_direction  == UX_ENDPOINT_IN)
 800465c:	69c2      	ldr	r2, [r0, #28]
 800465e:	2a80      	cmp	r2, #128	; 0x80
 8004660:	d002      	beq.n	8004668 <_ux_dcd_stm32_endpoint_register_address_get+0x10>
            return(UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));

        else
        
            /* Endpoint is OUT.  */
            return(UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004662:	3358      	adds	r3, #88	; 0x58
 8004664:	0158      	lsls	r0, r3, #5
 8004666:	4770      	bx	lr
            return(UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004668:	3348      	adds	r3, #72	; 0x48
 800466a:	0158      	lsls	r0, r3, #5
 800466c:	4770      	bx	lr
        return(UX_DCD_STM32_OTG_FS_DOEPCTL);
 800466e:	f44f 6030 	mov.w	r0, #2816	; 0xb00
    }
}
 8004672:	4770      	bx	lr

08004674 <_ux_dcd_stm32_endpoint_reset>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4605      	mov	r5, r0
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_register;
ULONG               stm32_endpoint_address;

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8004678:	688c      	ldr	r4, [r1, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_STALLED;
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	6023      	str	r3, [r4, #0]

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8004682:	2300      	movs	r3, #0
 8004684:	6063      	str	r3, [r4, #4]

    /* Get the endpoint address.  */
    stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff ffe6 	bl	8004658 <_ux_dcd_stm32_endpoint_register_address_get>
 800468c:	4606      	mov	r6, r0

    /* Read the current EP register.  */
    stm32_endpoint_register =  _ux_dcd_stm32_register_read(dcd_stm32, stm32_endpoint_address);
 800468e:	4601      	mov	r1, r0
 8004690:	4628      	mov	r0, r5
 8004692:	f7fd fb84 	bl	8001d9e <_ux_dcd_stm32_register_read>

    /* Reset the stall bit.  */
    stm32_endpoint_register &= ~UX_DCD_STM32_OTG_FS_DIEPCTL_STALL;
 8004696:	f420 1200 	bic.w	r2, r0, #2097152	; 0x200000

    /* If the endpoint is Bulk or INT we need to reset the PID Data to DATA0.  */
    if (ed -> ux_dcd_stm32_ed_type == UX_BULK_ENDPOINT || ed -> ux_dcd_stm32_ed_type == UX_INTERRUPT_ENDPOINT)
 800469a:	69a3      	ldr	r3, [r4, #24]
 800469c:	3b02      	subs	r3, #2
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d905      	bls.n	80046ae <_ux_dcd_stm32_endpoint_reset+0x3a>
    
        /* Set the SD0PID flag.  */
        stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_SD0PID;

    /* Write the endpoint register.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, stm32_endpoint_register);
 80046a2:	4631      	mov	r1, r6
 80046a4:	4628      	mov	r0, r5
 80046a6:	f7fd fb84 	bl	8001db2 <_ux_dcd_stm32_register_write>
        
    /* This function never fails.  */
    return(UX_SUCCESS);         

}
 80046aa:	2000      	movs	r0, #0
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
        stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_SD0PID;
 80046ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046b2:	e7f6      	b.n	80046a2 <_ux_dcd_stm32_endpoint_reset+0x2e>

080046b4 <_ux_dcd_stm32_endpoint_status>:

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[endpoint_index];

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80046b4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80046b8:	008b      	lsls	r3, r1, #2
 80046ba:	4418      	add	r0, r3
 80046bc:	6843      	ldr	r3, [r0, #4]
 80046be:	f013 0f01 	tst.w	r3, #1
 80046c2:	d006      	beq.n	80046d2 <_ux_dcd_stm32_endpoint_status+0x1e>
        return(UX_ERROR);
        
    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 80046c4:	f013 0f04 	tst.w	r3, #4
 80046c8:	d001      	beq.n	80046ce <_ux_dcd_stm32_endpoint_status+0x1a>
        return(UX_FALSE);
    else            
        return(UX_TRUE);
 80046ca:	2001      	movs	r0, #1
}
 80046cc:	4770      	bx	lr
        return(UX_FALSE);
 80046ce:	2000      	movs	r0, #0
 80046d0:	4770      	bx	lr
        return(UX_ERROR);
 80046d2:	20ff      	movs	r0, #255	; 0xff
 80046d4:	4770      	bx	lr

080046d6 <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 80046d6:	2000      	movs	r0, #0
 80046d8:	4770      	bx	lr
	...

080046dc <_fx_ram_driver>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_ram_driver(FX_MEDIA *media_ptr)
{
 80046dc:	b538      	push	{r3, r4, r5, lr}
                                                    FX_DIRECTORY_SECTOR
                                                    FX_DATA_SECTOR
     */

    /* Process the driver request specified in the media control block.  */
    switch (media_ptr -> fx_media_driver_request)
 80046de:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80046e2:	4604      	mov	r4, r0
    switch (media_ptr -> fx_media_driver_request)
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d84e      	bhi.n	8004786 <_fx_ram_driver+0xaa>
 80046e8:	e8df f003 	tbb	[pc, r3]
 80046ec:	0b0b0f38 	.word	0x0b0b0f38
 80046f0:	2d4d240b 	.word	0x2d4d240b
 80046f4:	0b          	.byte	0x0b
 80046f5:	00          	.byte	0x00
            media_ptr -> fx_media_driver_status =  FX_BUFFER_ERROR;
            break;
        }

        /* Copy the RAM boot sector into the destination.  */
        _fx_utility_memory_copy(source_buffer, media_ptr -> fx_media_driver_buffer,
 80046f6:	4602      	mov	r2, r0
 80046f8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 f98b 	bl	8004a18 <_fx_utility_memory_copy>
                                bytes_per_sector);

        /* Successful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        /* Invalid driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
        break;
    }
    }
}
 8004708:	bd38      	pop	{r3, r4, r5, pc}
            ((media_ptr -> fx_media_driver_logical_sector + 
 800470a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800470c:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
             media_ptr -> fx_media_bytes_per_sector);
 8004710:	6a83      	ldr	r3, [r0, #40]	; 0x28
            ((media_ptr -> fx_media_driver_logical_sector + 
 8004712:	4411      	add	r1, r2
        destination_buffer =  ((UCHAR *)media_ptr -> fx_media_driver_info) +
 8004714:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
        _fx_utility_memory_copy(media_ptr -> fx_media_driver_buffer, destination_buffer,
 8004718:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800471c:	fb03 0101 	mla	r1, r3, r1, r0
 8004720:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004724:	fb02 f203 	mul.w	r2, r2, r3
 8004728:	f000 f976 	bl	8004a18 <_fx_utility_memory_copy>
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800472c:	2300      	movs	r3, #0
 800472e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8004732:	bd38      	pop	{r3, r4, r5, pc}
        source_buffer =  (UCHAR *)media_ptr -> fx_media_driver_info;
 8004734:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
        if ((source_buffer[0] != (UCHAR)0xEB)  ||
 8004738:	782b      	ldrb	r3, [r5, #0]
 800473a:	2beb      	cmp	r3, #235	; 0xeb
 800473c:	d027      	beq.n	800478e <_fx_ram_driver+0xb2>
            media_ptr -> fx_media_driver_status =  FX_MEDIA_INVALID;
 800473e:	2302      	movs	r3, #2
 8004740:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8004744:	bd38      	pop	{r3, r4, r5, pc}
        _fx_utility_memory_copy(media_ptr -> fx_media_driver_buffer, destination_buffer,
 8004746:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004748:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800474c:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 8004750:	f000 f962 	bl	8004a18 <_fx_utility_memory_copy>
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8004754:	2300      	movs	r3, #0
 8004756:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800475a:	bd38      	pop	{r3, r4, r5, pc}
            ((media_ptr -> fx_media_driver_logical_sector + 
 800475c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800475e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
             media_ptr -> fx_media_bytes_per_sector);
 8004762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        source_buffer =  ((UCHAR *)media_ptr -> fx_media_driver_info) +
 8004764:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            ((media_ptr -> fx_media_driver_logical_sector + 
 8004768:	4410      	add	r0, r2
        _fx_utility_memory_copy(source_buffer, media_ptr -> fx_media_driver_buffer,
 800476a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800476e:	fb03 1000 	mla	r0, r3, r0, r1
 8004772:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004776:	fb02 f203 	mul.w	r2, r2, r3
 800477a:	f000 f94d 	bl	8004a18 <_fx_utility_memory_copy>
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8004784:	bd38      	pop	{r3, r4, r5, pc}
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8004786:	2390      	movs	r3, #144	; 0x90
 8004788:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
}
 800478c:	bd38      	pop	{r3, r4, r5, pc}
            ((source_buffer[1] != (UCHAR)0x34)  &&
 800478e:	786b      	ldrb	r3, [r5, #1]
        if ((source_buffer[0] != (UCHAR)0xEB)  ||
 8004790:	2b34      	cmp	r3, #52	; 0x34
 8004792:	d001      	beq.n	8004798 <_fx_ram_driver+0xbc>
 8004794:	2b76      	cmp	r3, #118	; 0x76
 8004796:	d1d2      	bne.n	800473e <_fx_ram_driver+0x62>
             (source_buffer[1] != (UCHAR)0x76)) ||          /* exFAT jump code.  */
 8004798:	78ab      	ldrb	r3, [r5, #2]
 800479a:	2b90      	cmp	r3, #144	; 0x90
 800479c:	d1cf      	bne.n	800473e <_fx_ram_driver+0x62>
        bytes_per_sector =  _fx_utility_16_unsigned_read(&source_buffer[FX_BYTES_SECTOR]);
 800479e:	f105 000b 	add.w	r0, r5, #11
 80047a2:	f000 f933 	bl	8004a0c <_fx_utility_16_unsigned_read>
        if (bytes_per_sector > media_ptr -> fx_media_memory_size)
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	4283      	cmp	r3, r0
 80047aa:	d2a4      	bcs.n	80046f6 <_fx_ram_driver+0x1a>
            media_ptr -> fx_media_driver_status =  FX_BUFFER_ERROR;
 80047ac:	2321      	movs	r3, #33	; 0x21
 80047ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 80047b2:	bd38      	pop	{r3, r4, r5, pc}

080047b4 <_fx_system_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 80047b4:	b570      	push	{r4, r5, r6, lr}
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 80047b6:	2300      	movs	r3, #0
{
 80047b8:	b084      	sub	sp, #16
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047be:	2001      	movs	r0, #1
    _fx_system_media_opened_ptr =       FX_NULL;
 80047c0:	4917      	ldr	r1, [pc, #92]	; (8004820 <_fx_system_initialize+0x6c>)
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 80047c2:	2510      	movs	r5, #16
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047c4:	9002      	str	r0, [sp, #8]
    _fx_system_date =   FX_INITIAL_DATE;
 80047c6:	f644 2621 	movw	r6, #18977	; 0x4a21
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047ca:	9201      	str	r2, [sp, #4]
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 80047cc:	f44f 7080 	mov.w	r0, #256	; 0x100
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047d0:	9200      	str	r2, [sp, #0]
    _fx_system_media_opened_count =     0;
 80047d2:	4c14      	ldr	r4, [pc, #80]	; (8004824 <_fx_system_initialize+0x70>)
    _fx_system_media_opened_ptr =       FX_NULL;
 80047d4:	600b      	str	r3, [r1, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 80047d6:	4914      	ldr	r1, [pc, #80]	; (8004828 <_fx_system_initialize+0x74>)
    _fx_system_media_opened_count =     0;
 80047d8:	6023      	str	r3, [r4, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 80047da:	600b      	str	r3, [r1, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047dc:	f103 438e 	add.w	r3, r3, #1191182336	; 0x47000000
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 80047e0:	4c12      	ldr	r4, [pc, #72]	; (800482c <_fx_system_initialize+0x78>)
    _fx_system_date =   FX_INITIAL_DATE;
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <_fx_system_initialize+0x7c>)
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047e4:	f1a3 13a7 	sub.w	r3, r3, #10944679	; 0xa700a7
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 80047e8:	4912      	ldr	r1, [pc, #72]	; (8004834 <_fx_system_initialize+0x80>)
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 80047ea:	6025      	str	r5, [r4, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047ec:	f5a3 432c 	sub.w	r3, r3, #44032	; 0xac00
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 80047f0:	4d11      	ldr	r5, [pc, #68]	; (8004838 <_fx_system_initialize+0x84>)
    _fx_system_date =   FX_INITIAL_DATE;
 80047f2:	6016      	str	r6, [r2, #0]
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 80047f4:	6008      	str	r0, [r1, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80047f6:	4a11      	ldr	r2, [pc, #68]	; (800483c <_fx_system_initialize+0x88>)
 80047f8:	4911      	ldr	r1, [pc, #68]	; (8004840 <_fx_system_initialize+0x8c>)
 80047fa:	4812      	ldr	r0, [pc, #72]	; (8004844 <_fx_system_initialize+0x90>)
 80047fc:	f004 fe02 	bl	8009404 <_tx_timer_create>
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8004800:	4c11      	ldr	r4, [pc, #68]	; (8004848 <_fx_system_initialize+0x94>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8004802:	682a      	ldr	r2, [r5, #0]
 8004804:	4911      	ldr	r1, [pc, #68]	; (800484c <_fx_system_initialize+0x98>)
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8004806:	6823      	ldr	r3, [r4, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8004808:	4811      	ldr	r0, [pc, #68]	; (8004850 <_fx_system_initialize+0x9c>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800480a:	4311      	orrs	r1, r2
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800480c:	4a11      	ldr	r2, [pc, #68]	; (8004854 <_fx_system_initialize+0xa0>)
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800480e:	6806      	ldr	r6, [r0, #0]
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8004810:	431a      	orrs	r2, r3
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <_fx_system_initialize+0xa4>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8004814:	6029      	str	r1, [r5, #0]
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8004816:	4333      	orrs	r3, r6
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8004818:	6022      	str	r2, [r4, #0]
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800481a:	6003      	str	r3, [r0, #0]
    }
}
 800481c:	b004      	add	sp, #16
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	20002bd0 	.word	0x20002bd0
 8004824:	20002bc8 	.word	0x20002bc8
 8004828:	20002bdc 	.word	0x20002bdc
 800482c:	20002bcc 	.word	0x20002bcc
 8004830:	20002bc4 	.word	0x20002bc4
 8004834:	20002bc0 	.word	0x20002bc0
 8004838:	20002bd4 	.word	0x20002bd4
 800483c:	0800485d 	.word	0x0800485d
 8004840:	0800b4c8 	.word	0x0800b4c8
 8004844:	20002b94 	.word	0x20002b94
 8004848:	20002b90 	.word	0x20002b90
 800484c:	ffff0000 	.word	0xffff0000
 8004850:	20002bd8 	.word	0x20002bd8
 8004854:	01008010 	.word	0x01008010
 8004858:	000a03e8 	.word	0x000a03e8

0800485c <_fx_system_timer_entry>:
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800485c:	4b67      	ldr	r3, [pc, #412]	; (80049fc <_fx_system_timer_entry+0x1a0>)
 800485e:	4298      	cmp	r0, r3
 8004860:	d000      	beq.n	8004864 <_fx_system_timer_entry+0x8>
 8004862:	4770      	bx	lr
{
 8004864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8004868:	4d65      	ldr	r5, [pc, #404]	; (8004a00 <_fx_system_timer_entry+0x1a4>)
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
        day =     _fx_system_date & FX_DAY_MASK;
 800486a:	4e66      	ldr	r6, [pc, #408]	; (8004a04 <_fx_system_timer_entry+0x1a8>)
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800486c:	6829      	ldr	r1, [r5, #0]
        day =     _fx_system_date & FX_DAY_MASK;
 800486e:	6834      	ldr	r4, [r6, #0]
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8004870:	f001 001f 	and.w	r0, r1, #31
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8004874:	f3c1 1745 	ubfx	r7, r1, #5, #6
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8004878:	f3c4 2e46 	ubfx	lr, r4, #9, #7
        day =     _fx_system_date & FX_DAY_MASK;
 800487c:	f004 021f 	and.w	r2, r4, #31
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8004880:	0040      	lsls	r0, r0, #1
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8004882:	f3c1 21c4 	ubfx	r1, r1, #11, #5
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8004886:	f20e 7cbc 	addw	ip, lr, #1980	; 0x7bc
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800488a:	f3c4 1443 	ubfx	r4, r4, #5, #4

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800488e:	f100 030a 	add.w	r3, r0, #10

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 8004892:	2b3b      	cmp	r3, #59	; 0x3b
 8004894:	d80e      	bhi.n	80048b4 <_fx_system_timer_entry+0x58>
 8004896:	02c9      	lsls	r1, r1, #11
 8004898:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
                            (month << FX_MONTH_SHIFT) | day;

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800489c:	085b      	lsrs	r3, r3, #1
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800489e:	f2ac 7cbc 	subw	ip, ip, #1980	; 0x7bc
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80048a2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
                            (month << FX_MONTH_SHIFT) | day;
 80048a6:	ea42 224c 	orr.w	r2, r2, ip, lsl #9
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80048aa:	430b      	orrs	r3, r1
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80048ac:	6032      	str	r2, [r6, #0]
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80048ae:	602b      	str	r3, [r5, #0]
    }
}
 80048b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            second =  second % 60;
 80048b4:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8004a08 <_fx_system_timer_entry+0x1ac>
            minute =  minute + second / 60;
 80048b8:	3701      	adds	r7, #1
            second =  second % 60;
 80048ba:	fba8 9003 	umull	r9, r0, r8, r3
            if (minute > FX_MAXIMUM_MINUTE)
 80048be:	2f3b      	cmp	r7, #59	; 0x3b
            second =  second % 60;
 80048c0:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80048c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80048c8:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
            if (minute > FX_MAXIMUM_MINUTE)
 80048cc:	d9e3      	bls.n	8004896 <_fx_system_timer_entry+0x3a>
                minute =  minute % 60;
 80048ce:	fba8 0807 	umull	r0, r8, r8, r7
                hour =    hour + minute / 60;
 80048d2:	3101      	adds	r1, #1
                minute =  minute % 60;
 80048d4:	ea4f 1858 	mov.w	r8, r8, lsr #5
                if (hour > FX_MAXIMUM_HOUR)
 80048d8:	2917      	cmp	r1, #23
                minute =  minute % 60;
 80048da:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80048de:	eba7 0788 	sub.w	r7, r7, r8, lsl #2
                if (hour > FX_MAXIMUM_HOUR)
 80048e2:	d9d8      	bls.n	8004896 <_fx_system_timer_entry+0x3a>
                    switch (month)
 80048e4:	3c01      	subs	r4, #1
                    day++;
 80048e6:	3201      	adds	r2, #1
                    switch (month)
 80048e8:	2c0b      	cmp	r4, #11
 80048ea:	d8e1      	bhi.n	80048b0 <_fx_system_timer_entry+0x54>
 80048ec:	e8df f004 	tbb	[pc, r4]
 80048f0:	243e304a 	.word	0x243e304a
 80048f4:	1e382a44 	.word	0x1e382a44
 80048f8:	060c1218 	.word	0x060c1218
                        if (day > 31)
 80048fc:	2a20      	cmp	r2, #32
 80048fe:	d04b      	beq.n	8004998 <_fx_system_timer_entry+0x13c>
 8004900:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004904:	2100      	movs	r1, #0
 8004906:	e7c9      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8004908:	2a1e      	cmp	r2, #30
 800490a:	d841      	bhi.n	8004990 <_fx_system_timer_entry+0x134>
 800490c:	f442 72b0 	orr.w	r2, r2, #352	; 0x160
 8004910:	2100      	movs	r1, #0
 8004912:	e7c3      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8004914:	2a20      	cmp	r2, #32
 8004916:	d04b      	beq.n	80049b0 <_fx_system_timer_entry+0x154>
 8004918:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 800491c:	2100      	movs	r1, #0
 800491e:	e7bd      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8004920:	2a1e      	cmp	r2, #30
 8004922:	d841      	bhi.n	80049a8 <_fx_system_timer_entry+0x14c>
 8004924:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004928:	2100      	movs	r1, #0
 800492a:	e7b7      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 31)
 800492c:	2a20      	cmp	r2, #32
 800492e:	d052      	beq.n	80049d6 <_fx_system_timer_entry+0x17a>
 8004930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004934:	2100      	movs	r1, #0
 8004936:	e7b1      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8004938:	2a1e      	cmp	r2, #30
 800493a:	d846      	bhi.n	80049ca <_fx_system_timer_entry+0x16e>
 800493c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004940:	2100      	movs	r1, #0
 8004942:	e7ab      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8004944:	2a1e      	cmp	r2, #30
 8004946:	d84e      	bhi.n	80049e6 <_fx_system_timer_entry+0x18a>
 8004948:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800494c:	2100      	movs	r1, #0
 800494e:	e7a5      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if ((year % 4) == 0)
 8004950:	f01c 0103 	ands.w	r1, ip, #3
 8004954:	d133      	bne.n	80049be <_fx_system_timer_entry+0x162>
                            if (day > 29)
 8004956:	2a1d      	cmp	r2, #29
 8004958:	d84b      	bhi.n	80049f2 <_fx_system_timer_entry+0x196>
 800495a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495e:	e79d      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8004960:	2a20      	cmp	r2, #32
 8004962:	d03c      	beq.n	80049de <_fx_system_timer_entry+0x182>
 8004964:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004968:	2100      	movs	r1, #0
 800496a:	e797      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 31)
 800496c:	2a20      	cmp	r2, #32
 800496e:	d02f      	beq.n	80049d0 <_fx_system_timer_entry+0x174>
 8004970:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004974:	2100      	movs	r1, #0
 8004976:	e791      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8004978:	2a20      	cmp	r2, #32
 800497a:	d037      	beq.n	80049ec <_fx_system_timer_entry+0x190>
 800497c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004980:	2100      	movs	r1, #0
 8004982:	e78b      	b.n	800489c <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8004984:	2a20      	cmp	r2, #32
 8004986:	d017      	beq.n	80049b8 <_fx_system_timer_entry+0x15c>
 8004988:	f042 0220 	orr.w	r2, r2, #32
 800498c:	2100      	movs	r1, #0
 800498e:	e785      	b.n	800489c <_fx_system_timer_entry+0x40>
 8004990:	f240 1281 	movw	r2, #385	; 0x181
 8004994:	2100      	movs	r1, #0
 8004996:	e781      	b.n	800489c <_fx_system_timer_entry+0x40>
                            if (year > FX_MAXIMUM_YEAR)
 8004998:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 800499c:	f20e 7cbd 	addw	ip, lr, #1981	; 0x7bd
 80049a0:	d086      	beq.n	80048b0 <_fx_system_timer_entry+0x54>
 80049a2:	2221      	movs	r2, #33	; 0x21
 80049a4:	2100      	movs	r1, #0
 80049a6:	e779      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049a8:	f240 1241 	movw	r2, #321	; 0x141
 80049ac:	2100      	movs	r1, #0
 80049ae:	e775      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049b0:	f240 1261 	movw	r2, #353	; 0x161
 80049b4:	2100      	movs	r1, #0
 80049b6:	e771      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049b8:	2241      	movs	r2, #65	; 0x41
 80049ba:	2100      	movs	r1, #0
 80049bc:	e76e      	b.n	800489c <_fx_system_timer_entry+0x40>
                            if (day > 28)
 80049be:	2a1c      	cmp	r2, #28
 80049c0:	d819      	bhi.n	80049f6 <_fx_system_timer_entry+0x19a>
 80049c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c6:	2100      	movs	r1, #0
 80049c8:	e768      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049ca:	22a1      	movs	r2, #161	; 0xa1
 80049cc:	2100      	movs	r1, #0
 80049ce:	e765      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049d0:	2281      	movs	r2, #129	; 0x81
 80049d2:	2100      	movs	r1, #0
 80049d4:	e762      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049d6:	f240 1221 	movw	r2, #289	; 0x121
 80049da:	2100      	movs	r1, #0
 80049dc:	e75e      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049de:	f240 1201 	movw	r2, #257	; 0x101
 80049e2:	2100      	movs	r1, #0
 80049e4:	e75a      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049e6:	22e1      	movs	r2, #225	; 0xe1
 80049e8:	2100      	movs	r1, #0
 80049ea:	e757      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049ec:	22c1      	movs	r2, #193	; 0xc1
 80049ee:	2100      	movs	r1, #0
 80049f0:	e754      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049f2:	2261      	movs	r2, #97	; 0x61
 80049f4:	e752      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049f6:	2261      	movs	r2, #97	; 0x61
 80049f8:	2100      	movs	r1, #0
 80049fa:	e74f      	b.n	800489c <_fx_system_timer_entry+0x40>
 80049fc:	46585359 	.word	0x46585359
 8004a00:	20002bdc 	.word	0x20002bdc
 8004a04:	20002bc4 	.word	0x20002bc4
 8004a08:	88888889 	.word	0x88888889

08004a0c <_fx_utility_16_unsigned_read>:
{

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8004a0c:	7803      	ldrb	r3, [r0, #0]
 8004a0e:	7840      	ldrb	r0, [r0, #1]
              ((UINT)*(source_ptr) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8004a10:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop

08004a18 <_fx_utility_memory_copy>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8004a18:	460b      	mov	r3, r1

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size);
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f005 bcf3 	b.w	800a408 <memcpy>
 8004a22:	bf00      	nop

08004a24 <_fxe_media_format>:

UINT status;


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (driver == FX_NULL) || (memory_ptr == FX_NULL))
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf18      	it	ne
 8004a28:	2900      	cmpne	r1, #0
 8004a2a:	d016      	beq.n	8004a5a <_fxe_media_format+0x36>
{
 8004a2c:	b430      	push	{r4, r5}
    if ((media_ptr == FX_NULL) || (driver == FX_NULL) || (memory_ptr == FX_NULL))
 8004a2e:	b188      	cbz	r0, 8004a54 <_fxe_media_format+0x30>
__attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
{

unsigned int  ipsr_value;

    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a30:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8004a34:	4d0a      	ldr	r5, [pc, #40]	; (8004a60 <_fxe_media_format+0x3c>)
 8004a36:	682d      	ldr	r5, [r5, #0]
 8004a38:	432c      	orrs	r4, r5
 8004a3a:	d108      	bne.n	8004a4e <_fxe_media_format+0x2a>
 8004a3c:	4c09      	ldr	r4, [pc, #36]	; (8004a64 <_fxe_media_format+0x40>)
 8004a3e:	6824      	ldr	r4, [r4, #0]
 8004a40:	b12c      	cbz	r4, 8004a4e <_fxe_media_format+0x2a>
 8004a42:	4d09      	ldr	r5, [pc, #36]	; (8004a68 <_fxe_media_format+0x44>)
 8004a44:	42ac      	cmp	r4, r5
 8004a46:	d002      	beq.n	8004a4e <_fxe_media_format+0x2a>
                               total_sectors, bytes_per_sector, sectors_per_cluster,
                               heads, sectors_per_track);

    /* Return completion status.  */
    return(status);
}
 8004a48:	bc30      	pop	{r4, r5}
    status =  _fx_media_format(media_ptr, driver, driver_info_ptr, memory_ptr, memory_size,
 8004a4a:	f000 b8c5 	b.w	8004bd8 <_fx_media_format>
    FX_CALLER_CHECKING_CODE
 8004a4e:	2020      	movs	r0, #32
}
 8004a50:	bc30      	pop	{r4, r5}
 8004a52:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8004a54:	2018      	movs	r0, #24
}
 8004a56:	bc30      	pop	{r4, r5}
 8004a58:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8004a5a:	2018      	movs	r0, #24
}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	2000019c 	.word	0x2000019c
 8004a64:	20002cf4 	.word	0x20002cf4
 8004a68:	20002da0 	.word	0x20002da0

08004a6c <_fxe_media_open>:
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d031      	beq.n	8004ad4 <_fxe_media_open+0x68>
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	d02f      	beq.n	8004ad4 <_fxe_media_open+0x68>
{
 8004a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a78:	b085      	sub	sp, #20
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8004a7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004a7c:	b334      	cbz	r4, 8004acc <_fxe_media_open+0x60>
 8004a7e:	f242 44b8 	movw	r4, #9400	; 0x24b8
 8004a82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004a84:	42a5      	cmp	r5, r4
 8004a86:	d121      	bne.n	8004acc <_fxe_media_open+0x60>
 8004a88:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8004a8c:	4d2c      	ldr	r5, [pc, #176]	; (8004b40 <_fxe_media_open+0xd4>)
 8004a8e:	682d      	ldr	r5, [r5, #0]
 8004a90:	432c      	orrs	r4, r5
 8004a92:	d121      	bne.n	8004ad8 <_fxe_media_open+0x6c>
 8004a94:	4c2b      	ldr	r4, [pc, #172]	; (8004b44 <_fxe_media_open+0xd8>)
 8004a96:	4d2c      	ldr	r5, [pc, #176]	; (8004b48 <_fxe_media_open+0xdc>)
 8004a98:	6824      	ldr	r4, [r4, #0]
 8004a9a:	42ac      	cmp	r4, r5
 8004a9c:	d01c      	beq.n	8004ad8 <_fxe_media_open+0x6c>
 8004a9e:	b1dc      	cbz	r4, 8004ad8 <_fxe_media_open+0x6c>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8004aa0:	4c2a      	ldr	r4, [pc, #168]	; (8004b4c <_fxe_media_open+0xe0>)
 8004aa2:	6825      	ldr	r5, [r4, #0]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8004aa4:	426c      	negs	r4, r5
 8004aa6:	402c      	ands	r4, r5

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8004aa8:	2c01      	cmp	r4, #1
 8004aaa:	d00b      	beq.n	8004ac4 <_fxe_media_open+0x58>
 8004aac:	42a5      	cmp	r5, r4
 8004aae:	d109      	bne.n	8004ac4 <_fxe_media_open+0x58>
        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8004ab0:	4c27      	ldr	r4, [pc, #156]	; (8004b50 <_fxe_media_open+0xe4>)
 8004ab2:	6824      	ldr	r4, [r4, #0]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8004ab4:	4265      	negs	r5, r4
 8004ab6:	4025      	ands	r5, r4

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8004ab8:	2d01      	cmp	r5, #1
 8004aba:	d003      	beq.n	8004ac4 <_fxe_media_open+0x58>
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	bf18      	it	ne
 8004ac0:	2401      	movne	r4, #1
 8004ac2:	b16c      	cbz	r4, 8004ae0 <_fxe_media_open+0x74>
        return(FX_MEDIA_INVALID);
 8004ac4:	2002      	movs	r0, #2
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
}
 8004ac6:	b005      	add	sp, #20
 8004ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 8004acc:	2018      	movs	r0, #24
}
 8004ace:	b005      	add	sp, #20
 8004ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 8004ad4:	2018      	movs	r0, #24
}
 8004ad6:	4770      	bx	lr
    FX_CALLER_CHECKING_CODE
 8004ad8:	2020      	movs	r0, #32
}
 8004ada:	b005      	add	sp, #20
 8004adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ae0:	461e      	mov	r6, r3
 8004ae2:	4617      	mov	r7, r2
 8004ae4:	4688      	mov	r8, r1
 8004ae6:	4605      	mov	r5, r0
    current_thread =  tx_thread_identify();
 8004ae8:	f004 fa02 	bl	8008ef0 <_tx_thread_identify>
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8004aec:	4621      	mov	r1, r4
 8004aee:	aa03      	add	r2, sp, #12
    current_thread =  tx_thread_identify();
 8004af0:	4681      	mov	r9, r0
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8004af2:	f004 fa3f 	bl	8008f74 <_tx_thread_preemption_change>
    open_count =     _fx_system_media_opened_count;
 8004af6:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <_fxe_media_open+0xe8>)
    current_media =  _fx_system_media_opened_ptr;
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <_fxe_media_open+0xec>)
    open_count =     _fx_system_media_opened_count;
 8004afa:	6811      	ldr	r1, [r2, #0]
    current_media =  _fx_system_media_opened_ptr;
 8004afc:	681b      	ldr	r3, [r3, #0]
    while (open_count--)
 8004afe:	1e4a      	subs	r2, r1, #1
 8004b00:	b929      	cbnz	r1, 8004b0e <_fxe_media_open+0xa2>
 8004b02:	e00d      	b.n	8004b20 <_fxe_media_open+0xb4>
 8004b04:	3a01      	subs	r2, #1
        current_media =  current_media -> fx_media_opened_next;
 8004b06:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    while (open_count--)
 8004b0a:	1c51      	adds	r1, r2, #1
 8004b0c:	d008      	beq.n	8004b20 <_fxe_media_open+0xb4>
        if (media_ptr == current_media)
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	d1f8      	bne.n	8004b04 <_fxe_media_open+0x98>
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8004b12:	aa03      	add	r2, sp, #12
 8004b14:	4648      	mov	r0, r9
 8004b16:	9903      	ldr	r1, [sp, #12]
 8004b18:	f004 fa2c 	bl	8008f74 <_tx_thread_preemption_change>
            return(FX_PTR_ERROR);
 8004b1c:	2018      	movs	r0, #24
 8004b1e:	e7d6      	b.n	8004ace <_fxe_media_open+0x62>
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8004b20:	aa03      	add	r2, sp, #12
 8004b22:	9903      	ldr	r1, [sp, #12]
 8004b24:	4648      	mov	r0, r9
 8004b26:	f004 fa25 	bl	8008f74 <_tx_thread_preemption_change>
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 8004b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b2c:	463a      	mov	r2, r7
 8004b2e:	4641      	mov	r1, r8
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	4628      	mov	r0, r5
 8004b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	4633      	mov	r3, r6
 8004b3a:	f000 fb23 	bl	8005184 <_fx_media_open>
    return(status);
 8004b3e:	e7c6      	b.n	8004ace <_fxe_media_open+0x62>
 8004b40:	2000019c 	.word	0x2000019c
 8004b44:	20002cf4 	.word	0x20002cf4
 8004b48:	20002da0 	.word	0x20002da0
 8004b4c:	20002bc0 	.word	0x20002bc0
 8004b50:	20002bcc 	.word	0x20002bcc
 8004b54:	20002bc8 	.word	0x20002bc8
 8004b58:	20002bd0 	.word	0x20002bd0

08004b5c <_fxe_media_read>:

UINT status;


    /* Check for a null media pointer or buffer pointer.  */
    if ((media_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8004b5c:	b1a8      	cbz	r0, 8004b8a <_fxe_media_read+0x2e>
 8004b5e:	b1a2      	cbz	r2, 8004b8a <_fxe_media_read+0x2e>
{
 8004b60:	b410      	push	{r4}
 8004b62:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8004b66:	4c0a      	ldr	r4, [pc, #40]	; (8004b90 <_fxe_media_read+0x34>)
 8004b68:	6824      	ldr	r4, [r4, #0]
 8004b6a:	4323      	orrs	r3, r4
 8004b6c:	d109      	bne.n	8004b82 <_fxe_media_read+0x26>
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <_fxe_media_read+0x38>)
 8004b70:	4c09      	ldr	r4, [pc, #36]	; (8004b98 <_fxe_media_read+0x3c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d004      	beq.n	8004b82 <_fxe_media_read+0x26>
 8004b78:	b11b      	cbz	r3, 8004b82 <_fxe_media_read+0x26>
    /* Call actual media read service.  */
    status =  _fx_media_read(media_ptr, logical_sector, buffer_ptr);

    /* Return status to the caller.  */
    return(status);
}
 8004b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    status =  _fx_media_read(media_ptr, logical_sector, buffer_ptr);
 8004b7e:	f000 be97 	b.w	80058b0 <_fx_media_read>
    FX_CALLER_CHECKING_CODE
 8004b82:	2020      	movs	r0, #32
}
 8004b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b88:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8004b8a:	2018      	movs	r0, #24
}
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	2000019c 	.word	0x2000019c
 8004b94:	20002cf4 	.word	0x20002cf4
 8004b98:	20002da0 	.word	0x20002da0

08004b9c <_fxe_media_write>:
UINT _fxe_media_write(FX_MEDIA* media_ptr, ULONG logical_sector, VOID* buffer_ptr)
{
	UINT status;

	/* Check for a null media pointer.  */
	if (media_ptr == FX_NULL)
 8004b9c:	b1a0      	cbz	r0, 8004bc8 <_fxe_media_write+0x2c>
{
 8004b9e:	b410      	push	{r4}
 8004ba0:	f3ef 8305 	mrs	r3, IPSR
	{
		return (FX_PTR_ERROR);
	}

	/* Check for a valid caller.  */
	FX_CALLER_CHECKING_CODE
 8004ba4:	4c09      	ldr	r4, [pc, #36]	; (8004bcc <_fxe_media_write+0x30>)
 8004ba6:	6824      	ldr	r4, [r4, #0]
 8004ba8:	4323      	orrs	r3, r4
 8004baa:	d109      	bne.n	8004bc0 <_fxe_media_write+0x24>
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <_fxe_media_write+0x34>)
 8004bae:	4c09      	ldr	r4, [pc, #36]	; (8004bd4 <_fxe_media_write+0x38>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	d004      	beq.n	8004bc0 <_fxe_media_write+0x24>
 8004bb6:	b11b      	cbz	r3, 8004bc0 <_fxe_media_write+0x24>
	/* Call actual media write service.  */
	status = _fx_media_write(media_ptr, logical_sector, buffer_ptr);

	/* Return a successful status to the caller.  */
	return (status);
}
 8004bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
	status = _fx_media_write(media_ptr, logical_sector, buffer_ptr);
 8004bbc:	f000 bea8 	b.w	8005910 <_fx_media_write>
	FX_CALLER_CHECKING_CODE
 8004bc0:	2020      	movs	r0, #32
}
 8004bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc6:	4770      	bx	lr
		return (FX_PTR_ERROR);
 8004bc8:	2018      	movs	r0, #24
}
 8004bca:	4770      	bx	lr
 8004bcc:	2000019c 	.word	0x2000019c
 8004bd0:	20002cf4 	.word	0x20002cf4
 8004bd4:	20002da0 	.word	0x20002da0

08004bd8 <_fx_media_format>:
/**************************************************************************/
UINT  _fx_media_format(FX_MEDIA *media_ptr, VOID (*driver)(FX_MEDIA *media), VOID *driver_info_ptr, UCHAR *memory_ptr, UINT memory_size,
                       CHAR *volume_name, UINT number_of_fats, UINT directory_entries, UINT hidden_sectors,
                       ULONG total_sectors, UINT bytes_per_sector, UINT sectors_per_cluster,
                       UINT heads, UINT sectors_per_track)
{
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8004be0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FORMAT, media_ptr, directory_entries, total_sectors, sectors_per_cluster, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Validate bytes per sector value: greater than zero and no more than 4096.  */
    if((bytes_per_sector == 0) || (bytes_per_sector > 4096))
 8004be4:	1e74      	subs	r4, r6, #1
 8004be6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004bea:	9402      	str	r4, [sp, #8]
 8004bec:	f080 81ea 	bcs.w	8004fc4 <_fx_media_format+0x3ec>
        return(FX_SECTOR_INVALID);

    /* Validate sectors per cluster value: greater than zero and no more than 128.  */
    if((sectors_per_cluster == 0) || (sectors_per_cluster > 128))
 8004bf0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004bf2:	f105 3aff 	add.w	sl, r5, #4294967295
 8004bf6:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 8004bfa:	f200 81e3 	bhi.w	8004fc4 <_fx_media_format+0x3ec>
 8004bfe:	4694      	mov	ip, r2
        return(FX_SECTOR_INVALID);

    /* Setup driver pointer and memory information.  */
    media_ptr -> fx_media_driver_entry =                driver;
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
    media_ptr -> fx_media_memory_size =                 memory_size;
 8004c00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c02:	460f      	mov	r7, r1
 8004c04:	461d      	mov	r5, r3
 8004c06:	60c2      	str	r2, [r0, #12]
    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 8004c08:	2300      	movs	r3, #0
    media_ptr -> fx_media_sectors_per_track =           sectors_per_track;
 8004c0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 8004c0c:	2104      	movs	r1, #4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8004c0e:	f04f 0890 	mov.w	r8, #144	; 0x90
 8004c12:	4604      	mov	r4, r0
    media_ptr -> fx_media_sectors_per_track =           sectors_per_track;
 8004c14:	62c2      	str	r2, [r0, #44]	; 0x2c
    media_ptr -> fx_media_heads =                       heads;
 8004c16:	9a18      	ldr	r2, [sp, #96]	; 0x60
    media_ptr -> fx_media_driver_entry =                driver;
 8004c18:	f8c0 70bc 	str.w	r7, [r0, #188]	; 0xbc
    media_ptr -> fx_media_heads =                       heads;
 8004c1c:	6302      	str	r2, [r0, #48]	; 0x30
    media_ptr -> fx_media_hidden_sectors =              hidden_sectors;
 8004c1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8004c20:	6085      	str	r5, [r0, #8]
    media_ptr -> fx_media_bytes_per_sector =            bytes_per_sector;
 8004c22:	6286      	str	r6, [r0, #40]	; 0x28
    media_ptr -> fx_media_hidden_sectors =              hidden_sectors;
 8004c24:	6702      	str	r2, [r0, #112]	; 0x70
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 8004c26:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8004c2a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8004c2e:	e9c0 1822 	strd	r1, r8, [r0, #136]	; 0x88
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8004c32:	e9c0 332a 	strd	r3, r3, [r0, #168]	; 0xa8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004c36:	47b8      	blx	r7

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004c38:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
 8004c3c:	f1bb 0f00 	cmp.w	fp, #0
 8004c40:	f040 81bc 	bne.w	8004fbc <_fx_media_format+0x3e4>
 8004c44:	4632      	mov	r2, r6
 8004c46:	4659      	mov	r1, fp
        /* Return the driver error status.  */
        return(FX_IO_ERROR);
    }

    /* Setup driver buffer memory.  */
    media_ptr -> fx_media_driver_buffer =  memory_ptr;
 8004c48:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f005 fbe6 	bl	800a41e <memset>
 8004c52:	4bcc      	ldr	r3, [pc, #816]	; (8004f84 <_fx_media_format+0x3ac>)
        /* Clear each byte of the boot record.  */
        byte_ptr[i] =  (UCHAR)0;
    }

    /* Set jump instruction at the beginning of the sector.  */
    byte_ptr[0] =  (UCHAR)0xEB;
 8004c54:	22eb      	movs	r2, #235	; 0xeb
 8004c56:	1ce9      	adds	r1, r5, #3
 8004c58:	1d18      	adds	r0, r3, #4
    byte_ptr[1] =  (UCHAR)0x34;
 8004c5a:	f04f 0c34 	mov.w	ip, #52	; 0x34
    byte_ptr[0] =  (UCHAR)0xEB;
 8004c5e:	702a      	strb	r2, [r5, #0]
 8004c60:	1dea      	adds	r2, r5, #7
    byte_ptr[2] =  (UCHAR)0x90;
 8004c62:	f885 8002 	strb.w	r8, [r5, #2]
 8004c66:	4281      	cmp	r1, r0
 8004c68:	bf38      	it	cc
 8004c6a:	4293      	cmpcc	r3, r2
    byte_ptr[1] =  (UCHAR)0x34;
 8004c6c:	f885 c001 	strb.w	ip, [r5, #1]
 8004c70:	f0c0 820a 	bcc.w	8005088 <_fx_media_format+0x4b0>
 8004c74:	0789      	lsls	r1, r1, #30
 8004c76:	f040 8207 	bne.w	8005088 <_fx_media_format+0x4b0>
    /* Set the OEM name in the boot record.  */
    for (i = 0; i < 8; i++)
    {

        /* Copy a character from the OEM name.  */
        byte_ptr[i + 3] =  _fx_media_format_oem_name[i];
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f8c5 2003 	str.w	r2, [r5, #3]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f8c5 3007 	str.w	r3, [r5, #7]
    }

    /* Set the media type in the boot record.  */
    byte_ptr[FX_MEDIA_TYPE] =  _fx_media_format_media_type;
 8004c86:	4bc0      	ldr	r3, [pc, #768]	; (8004f88 <_fx_media_format+0x3b0>)

    /* Set the number of bytes per sector.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_BYTES_SECTOR], bytes_per_sector);
 8004c88:	4631      	mov	r1, r6
 8004c8a:	f105 000b 	add.w	r0, r5, #11
    byte_ptr[FX_MEDIA_TYPE] =  _fx_media_format_media_type;
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	756b      	strb	r3, [r5, #21]
    _fx_utility_16_unsigned_write(&byte_ptr[FX_BYTES_SECTOR], bytes_per_sector);
 8004c92:	f000 fe75 	bl	8005980 <_fx_utility_16_unsigned_write>

    /* Set the number of sectors per track.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS_PER_TRK], sectors_per_track);
 8004c96:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004c98:	f105 0018 	add.w	r0, r5, #24
 8004c9c:	f000 fe70 	bl	8005980 <_fx_utility_16_unsigned_write>

    /* Set the number of heads.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_HEADS], heads);
 8004ca0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ca2:	f105 001a 	add.w	r0, r5, #26
 8004ca6:	f000 fe6b 	bl	8005980 <_fx_utility_16_unsigned_write>
#endif


    /* Calculate the maximum clusters.... This is actually greater than the actual since the FAT
       sectors have yet to be accounted for.  */
    total_clusters =  (total_sectors - reserved_sectors - ((directory_entries * FX_DIR_ENTRY_SIZE) + (bytes_per_sector - 1)) / bytes_per_sector) / sectors_per_cluster;
 8004caa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cae:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	fbb2 f2f6 	udiv	r2, r2, r6
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cbe:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Calculate the maximum number of FAT sectors necessary for FAT12.  */
    if (total_clusters % 2)
 8004cc2:	07da      	lsls	r2, r3, #31
 8004cc4:	f140 8182 	bpl.w	8004fcc <_fx_media_format+0x3f4>
    {
        bytes_needed = (total_clusters + total_clusters / 2) + 1;
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    }
    else
    {
        bytes_needed = (total_clusters + total_clusters / 2);
    }
    sectors_per_fat =  bytes_needed / bytes_per_sector;
 8004cce:	fbb2 f8f6 	udiv	r8, r2, r6
    if (bytes_needed % bytes_per_sector)
 8004cd2:	fb06 2218 	mls	r2, r6, r8, r2
 8004cd6:	b10a      	cbz	r2, 8004cdc <_fx_media_format+0x104>
    {
        sectors_per_fat++;
 8004cd8:	f108 0801 	add.w	r8, r8, #1
    }

    /* Now adjust the total clusters by the number of sectors per FAT.  */
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8004cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48

    /* Is the total cluster count greater than the FAT12 maximum?  */
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8004cde:	f640 71f5 	movw	r1, #4085	; 0xff5
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8004ce2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004ce4:	fb02 f208 	mul.w	r2, r2, r8
 8004ce8:	9204      	str	r2, [sp, #16]
 8004cea:	4452      	add	r2, sl
 8004cec:	fbb2 f2f0 	udiv	r2, r2, r0
 8004cf0:	1a9a      	subs	r2, r3, r2
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8004cf2:	428a      	cmp	r2, r1
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8004cf4:	9201      	str	r2, [sp, #4]
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8004cf6:	d915      	bls.n	8004d24 <_fx_media_format+0x14c>
        /* Reset the maximum clusters.... This is actually greater than the actual since the FAT
           sectors have yet to be accounted for.  */
        total_clusters =  (total_sectors - reserved_sectors -  ((directory_entries * FX_DIR_ENTRY_SIZE) + (bytes_per_sector - 1)) / bytes_per_sector) / sectors_per_cluster;

        /* Calculate 16-bit FAT is present. Each cluster requires a 2 byte entry in the FAT table.  */
        sectors_per_fat =  (total_clusters * 2) / bytes_per_sector;
 8004cf8:	005a      	lsls	r2, r3, #1
 8004cfa:	fbb2 f8f6 	udiv	r8, r2, r6
        if ((total_clusters * 2) % bytes_per_sector)
 8004cfe:	fb06 2218 	mls	r2, r6, r8, r2
 8004d02:	b10a      	cbz	r2, 8004d08 <_fx_media_format+0x130>
        {
            sectors_per_fat++;
 8004d04:	f108 0801 	add.w	r8, r8, #1
        }

        /* Now adjust the total clusters by the number of sectors per FAT.  */
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8004d08:	9a12      	ldr	r2, [sp, #72]	; 0x48

        /* Is the total cluster count greater than the FAT16 maximum?  */
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8004d0a:	f64f 71f4 	movw	r1, #65524	; 0xfff4
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8004d0e:	fb02 f208 	mul.w	r2, r2, r8
 8004d12:	9204      	str	r2, [sp, #16]
 8004d14:	4452      	add	r2, sl
 8004d16:	fbb2 f2f0 	udiv	r2, r2, r0
 8004d1a:	1a9b      	subs	r3, r3, r2
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8004d1c:	428b      	cmp	r3, r1
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8004d1e:	9301      	str	r3, [sp, #4]
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8004d20:	f200 815f 	bhi.w	8004fe2 <_fx_media_format+0x40a>
 8004d24:	2301      	movs	r3, #1
 8004d26:	9303      	str	r3, [sp, #12]
    /* Set sectors per FAT type.  */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
    {

        /* Set the number of sectors per FAT12/16.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS_PER_FAT], sectors_per_fat);
 8004d28:	4641      	mov	r1, r8
 8004d2a:	f105 0016 	add.w	r0, r5, #22
 8004d2e:	f000 fe27 	bl	8005980 <_fx_utility_16_unsigned_write>

        /* Set the signature.  */
        byte_ptr[FX_BOOT_SIG] =  0x29;
 8004d32:	2229      	movs	r2, #41	; 0x29

        /* Setup the volume ID.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID], _fx_media_format_volume_id);
 8004d34:	4b95      	ldr	r3, [pc, #596]	; (8004f8c <_fx_media_format+0x3b4>)
 8004d36:	f105 0027 	add.w	r0, r5, #39	; 0x27
        byte_ptr[FX_BOOT_SIG] =  0x29;
 8004d3a:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID], _fx_media_format_volume_id);
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	f000 fe2e 	bl	80059a0 <_fx_utility_32_unsigned_write>
        /* Setup the volume ID.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
    }

    /* Set the total number of sectors.  */
    if (total_sectors < (ULONG)0xFFFF)
 8004d44:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004d48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d4a:	f105 0013 	add.w	r0, r5, #19
 8004d4e:	f105 0a20 	add.w	sl, r5, #32
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f200 813d 	bhi.w	8004fd2 <_fx_media_format+0x3fa>
    {

        /* Write the 16-bit total sector field.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS], (UINT)(total_sectors));
 8004d58:	4611      	mov	r1, r2
 8004d5a:	f000 fe11 	bl	8005980 <_fx_utility_16_unsigned_write>

        /* Set the number of huge sectors.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], 0);
 8004d5e:	4650      	mov	r0, sl
 8004d60:	2100      	movs	r1, #0
 8004d62:	f000 fe1d 	bl	80059a0 <_fx_utility_32_unsigned_write>
        /* Set the number of huge sectors.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], total_sectors);
    }

    /* Set the number of reserved sectors.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_RESERVED_SECTORS], reserved_sectors);
 8004d66:	9903      	ldr	r1, [sp, #12]
 8004d68:	f105 000e 	add.w	r0, r5, #14
 8004d6c:	f000 fe08 	bl	8005980 <_fx_utility_16_unsigned_write>

    /* Set the number of sectors per cluster */
    byte_ptr[FX_SECTORS_CLUSTER] =  (UCHAR)sectors_per_cluster;
 8004d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    /* Set the number of FATs.  */
    byte_ptr[FX_NUMBER_OF_FATS] =  (UCHAR)number_of_fats;

    /* Set the number of hidden sectors.  */
    _fx_utility_32_unsigned_write(&byte_ptr[FX_HIDDEN_SECTORS], hidden_sectors);
 8004d72:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004d74:	f105 001c 	add.w	r0, r5, #28
    byte_ptr[FX_SECTORS_CLUSTER] =  (UCHAR)sectors_per_cluster;
 8004d78:	736b      	strb	r3, [r5, #13]
    byte_ptr[FX_NUMBER_OF_FATS] =  (UCHAR)number_of_fats;
 8004d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d7c:	742b      	strb	r3, [r5, #16]
    _fx_utility_32_unsigned_write(&byte_ptr[FX_HIDDEN_SECTORS], hidden_sectors);
 8004d7e:	f000 fe0f 	bl	80059a0 <_fx_utility_32_unsigned_write>

    /* Determine if a FAT12 or FAT16 is present.  If FAT32 is present, these fields are left alone!   */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 8004d82:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8004d86:	9a01      	ldr	r2, [sp, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	f240 8176 	bls.w	800507a <_fx_media_format+0x4a2>
    }
    else
    {

        /* FAT32 volume label offset.  */
        j =  FX_VOLUME_LABEL_32;
 8004d8e:	2247      	movs	r2, #71	; 0x47
    i = 0;
    while (i < 11)
    {

        /* Determine if it is NULL.  */
        if (volume_name[i] == 0)
 8004d90:	f899 3000 	ldrb.w	r3, [r9]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8167 	beq.w	8005068 <_fx_media_format+0x490>
            /* Yes, the copying is finished.  */
            break;
        }

        /* Otherwise, copy byte of volume name into boot record.  */
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004d9a:	54ab      	strb	r3, [r5, r2]
        if (volume_name[i] == 0)
 8004d9c:	f899 1001 	ldrb.w	r1, [r9, #1]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	f000 81ad 	beq.w	8005100 <_fx_media_format+0x528>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004da6:	18ab      	adds	r3, r5, r2
 8004da8:	7059      	strb	r1, [r3, #1]
        if (volume_name[i] == 0)
 8004daa:	f899 1002 	ldrb.w	r1, [r9, #2]
 8004dae:	2900      	cmp	r1, #0
 8004db0:	f000 81a9 	beq.w	8005106 <_fx_media_format+0x52e>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004db4:	7099      	strb	r1, [r3, #2]
        if (volume_name[i] == 0)
 8004db6:	f899 1003 	ldrb.w	r1, [r9, #3]
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	f000 81a6 	beq.w	800510c <_fx_media_format+0x534>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004dc0:	70d9      	strb	r1, [r3, #3]
        if (volume_name[i] == 0)
 8004dc2:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	f000 81a6 	beq.w	8005118 <_fx_media_format+0x540>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004dcc:	7119      	strb	r1, [r3, #4]
        if (volume_name[i] == 0)
 8004dce:	f899 1005 	ldrb.w	r1, [r9, #5]
 8004dd2:	2900      	cmp	r1, #0
 8004dd4:	f000 819d 	beq.w	8005112 <_fx_media_format+0x53a>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004dd8:	7159      	strb	r1, [r3, #5]
        if (volume_name[i] == 0)
 8004dda:	f899 1006 	ldrb.w	r1, [r9, #6]
 8004dde:	2900      	cmp	r1, #0
 8004de0:	f000 819d 	beq.w	800511e <_fx_media_format+0x546>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004de4:	7199      	strb	r1, [r3, #6]
        if (volume_name[i] == 0)
 8004de6:	f899 1007 	ldrb.w	r1, [r9, #7]
 8004dea:	2900      	cmp	r1, #0
 8004dec:	f000 81a5 	beq.w	800513a <_fx_media_format+0x562>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004df0:	71d9      	strb	r1, [r3, #7]
        if (volume_name[i] == 0)
 8004df2:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004df6:	2900      	cmp	r1, #0
 8004df8:	f000 81a2 	beq.w	8005140 <_fx_media_format+0x568>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004dfc:	7219      	strb	r1, [r3, #8]
        if (volume_name[i] == 0)
 8004dfe:	f899 1009 	ldrb.w	r1, [r9, #9]
 8004e02:	2900      	cmp	r1, #0
 8004e04:	f000 812e 	beq.w	8005064 <_fx_media_format+0x48c>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004e08:	7259      	strb	r1, [r3, #9]
        if (volume_name[i] == 0)
 8004e0a:	f899 100a 	ldrb.w	r1, [r9, #10]
 8004e0e:	2900      	cmp	r1, #0
 8004e10:	f000 816d 	beq.w	80050ee <_fx_media_format+0x516>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004e14:	7299      	strb	r1, [r3, #10]
    byte_ptr[510] = 0x55;
    byte_ptr[511] = 0xAA;
#else

    /* Set bootrecord signature.  */
    byte_ptr[bytes_per_sector - 2] = 0x55;
 8004e16:	19aa      	adds	r2, r5, r6
 8004e18:	f04f 0b55 	mov.w	fp, #85	; 0x55
    byte_ptr[bytes_per_sector - 1] = 0xAA;
#endif

    /* Select the boot record write command.  */
    media_ptr -> fx_media_driver_request =       FX_DRIVER_BOOT_WRITE;
 8004e1c:	2307      	movs	r3, #7
    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8004e1e:	f04f 0901 	mov.w	r9, #1
    byte_ptr[bytes_per_sector - 2] = 0x55;
 8004e22:	f802 bc02 	strb.w	fp, [r2, #-2]
    byte_ptr[bytes_per_sector - 1] = 0xAA;
 8004e26:	f04f 0aaa 	mov.w	sl, #170	; 0xaa
 8004e2a:	9a02      	ldr	r2, [sp, #8]

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_WRITE, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Write out the bootrecord */
    (driver)(media_ptr);
 8004e2c:	4620      	mov	r0, r4
    byte_ptr[bytes_per_sector - 1] = 0xAA;
 8004e2e:	f805 a002 	strb.w	sl, [r5, r2]
    media_ptr -> fx_media_driver_request =       FX_DRIVER_BOOT_WRITE;
 8004e32:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8004e36:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
    media_ptr -> fx_media_driver_sector_type =   FX_BOOT_SECTOR;
 8004e3a:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
    (driver)(media_ptr);
 8004e3e:	47b8      	blx	r7

    /* Clear the write flag.  */
    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004e40:	2200      	movs	r2, #0

    /* Determine if it was successful.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004e42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004e46:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 80b6 	bne.w	8004fbc <_fx_media_format+0x3e4>
    /* Calculate the number of root sectors.  */
    root_sectors =    ((directory_entries * FX_DIR_ENTRY_SIZE) + bytes_per_sector - 1) / bytes_per_sector;

    /* Determine if FAT32 is present AND if the bytes per sector is large enough to have
       a FSINFO sector.  */
    if ((total_clusters >= FX_16_BIT_FAT_SIZE) && (bytes_per_sector == 512))
 8004e50:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8004e54:	9901      	ldr	r1, [sp, #4]
 8004e56:	4291      	cmp	r1, r2
 8004e58:	d941      	bls.n	8004ede <_fx_media_format+0x306>
 8004e5a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004e5e:	d13e      	bne.n	8004ede <_fx_media_format+0x306>
 8004e60:	4619      	mov	r1, r3
 8004e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e66:	4628      	mov	r0, r5
 8004e68:	9305      	str	r3, [sp, #20]
 8004e6a:	f005 fad8 	bl	800a41e <memset>
        /* Build the final signature word, this too is used to help verify that this is a FSINFO sector.  */
        byte_ptr[508] =  0x55;
        byte_ptr[509] =  0xAA;

        /* Setup the total available clusters on the media. We need to subtract 1 for the FAT32 root directory.  */
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004e6e:	9b01      	ldr	r3, [sp, #4]
        byte_ptr[3] =  0x41;
 8004e70:	2241      	movs	r2, #65	; 0x41
        byte_ptr[0] =  0x52;
 8004e72:	f04f 0e52 	mov.w	lr, #82	; 0x52
        byte_ptr[2] =  0x61;
 8004e76:	f04f 0c61 	mov.w	ip, #97	; 0x61
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004e7a:	1e59      	subs	r1, r3, #1
        byte_ptr[484] =  0x72;
 8004e7c:	f04f 0372 	mov.w	r3, #114	; 0x72
        byte_ptr[3] =  0x41;
 8004e80:	70ea      	strb	r2, [r5, #3]
        byte_ptr[486] =  0x41;
 8004e82:	f885 21e6 	strb.w	r2, [r5, #486]	; 0x1e6
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004e86:	f505 70f4 	add.w	r0, r5, #488	; 0x1e8
        byte_ptr[484] =  0x72;
 8004e8a:	f885 31e4 	strb.w	r3, [r5, #484]	; 0x1e4
        byte_ptr[485] =  0x72;
 8004e8e:	f885 31e5 	strb.w	r3, [r5, #485]	; 0x1e5
        byte_ptr[0] =  0x52;
 8004e92:	f885 e000 	strb.w	lr, [r5]
        byte_ptr[1] =  0x52;
 8004e96:	f885 e001 	strb.w	lr, [r5, #1]
        byte_ptr[2] =  0x61;
 8004e9a:	f885 c002 	strb.w	ip, [r5, #2]
        byte_ptr[487] =  0x61;
 8004e9e:	f885 c1e7 	strb.w	ip, [r5, #487]	; 0x1e7
        byte_ptr[508] =  0x55;
 8004ea2:	f885 b1fc 	strb.w	fp, [r5, #508]	; 0x1fc
        byte_ptr[509] =  0xAA;
 8004ea6:	f885 a1fd 	strb.w	sl, [r5, #509]	; 0x1fd
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004eaa:	f000 fd79 	bl	80059a0 <_fx_utility_32_unsigned_write>

        /* Setup the starting free cluster to 3, since cluster 2 is reserved for the FAT32 root directory.  */
        _fx_utility_32_unsigned_write(&byte_ptr[492], 3);
 8004eae:	2103      	movs	r1, #3
 8004eb0:	f505 70f6 	add.w	r0, r5, #492	; 0x1ec
 8004eb4:	f000 fd74 	bl	80059a0 <_fx_utility_32_unsigned_write>

        /* Now write the FSINFO sector to the media.  */
        media_ptr -> fx_media_driver_logical_sector =  1;
 8004eb8:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004ebc:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, 1, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Write out the sector.  */
        (driver)(media_ptr);
 8004ec0:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_sectors =         1;
 8004ec2:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 8004ec6:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_sector_type =     FX_BOOT_SECTOR;
 8004eca:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
        (driver)(media_ptr);
 8004ece:	47b8      	blx	r7

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004ed0:	9b05      	ldr	r3, [sp, #20]

        /* Determine if it was successful.  */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004ed2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004ed6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d16e      	bne.n	8004fbc <_fx_media_format+0x3e4>
    }

    /* At this point we need set up first to FAT entries and clear the remaining FAT sectors area.  */

    /* Loop through number of FATs. The first is the only one used.  */
    for (f = 0; f < number_of_fats; f++)
 8004ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ee0:	b3b3      	cbz	r3, 8004f50 <_fx_media_format+0x378>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ee8:	469a      	mov	sl, r3
 8004eea:	9305      	str	r3, [sp, #20]
    {

        /* Loop through all the sectors in this FAT.  */
        for (s = 0; s < sectors_per_fat; s++)
 8004eec:	f1b8 0f00 	cmp.w	r8, #0
 8004ef0:	d027      	beq.n	8004f42 <_fx_media_format+0x36a>
 8004ef2:	f04f 0b00 	mov.w	fp, #0
                    byte_ptr[2] =  (UCHAR)0xFF;

                    /* Start clearing at FAT entry 3.  */
                    i =  3;
                }
                else if (total_clusters < FX_16_BIT_FAT_SIZE)
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	465d      	mov	r5, fp
 8004efa:	469b      	mov	fp, r3
            if (s == 0)
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	f000 80d4 	beq.w	80050aa <_fx_media_format+0x4d2>
                    i =  12;
                }
            }
            else
            {
                i = 0;
 8004f02:	2000      	movs	r0, #0
 8004f04:	1a32      	subs	r2, r6, r0
 8004f06:	2100      	movs	r1, #0
 8004f08:	4458      	add	r0, fp
 8004f0a:	f005 fa88 	bl	800a41e <memset>
                byte_ptr[i] =  (CHAR)0;
            }

            /* Build sector write command.  */
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
            media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004f0e:	2301      	movs	r3, #1
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
 8004f10:	eb05 0109 	add.w	r1, r5, r9
            media_ptr -> fx_media_driver_sectors =         1;
            media_ptr -> fx_media_driver_system_write =    FX_TRUE;
            media_ptr -> fx_media_driver_sector_type =     FX_FAT_SECTOR;
 8004f14:	2202      	movs	r2, #2

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_driver_logical_sector, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Write out the sector.  */
            (driver)(media_ptr);
 8004f16:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004f18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            media_ptr -> fx_media_driver_sectors =         1;
 8004f1c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 8004f20:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
 8004f24:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
            media_ptr -> fx_media_driver_sector_type =     FX_FAT_SECTOR;
 8004f28:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
            (driver)(media_ptr);
 8004f2c:	47b8      	blx	r7

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;

            /* Determine if it was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004f2e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004f32:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d140      	bne.n	8004fbc <_fx_media_format+0x3e4>
        for (s = 0; s < sectors_per_fat; s++)
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	4545      	cmp	r5, r8
 8004f3e:	d1dd      	bne.n	8004efc <_fx_media_format+0x324>
 8004f40:	465d      	mov	r5, fp
    for (f = 0; f < number_of_fats; f++)
 8004f42:	9b05      	ldr	r3, [sp, #20]
 8004f44:	44c1      	add	r9, r8
 8004f46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f48:	3301      	adds	r3, #1
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	d1cd      	bne.n	8004eec <_fx_media_format+0x314>
 8004f50:	4632      	mov	r2, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	2100      	movs	r1, #0
 8004f56:	f005 fa62 	bl	800a41e <memset>
    root_sectors =    ((directory_entries * FX_DIR_ENTRY_SIZE) + bytes_per_sector - 1) / bytes_per_sector;
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f5e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004f62:	fbb3 f3f6 	udiv	r3, r3, r6
    {
        byte_ptr[i] =  (CHAR)0;
    }

    /* Now clear the root directory sectors.  */
    for (s = 0; s < root_sectors; s++)
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80dc 	beq.w	8005124 <_fx_media_format+0x54c>
    {

        /* Build sector write command.  */
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004f6c:	9a04      	ldr	r2, [sp, #16]
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004f6e:	2601      	movs	r6, #1
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004f70:	9903      	ldr	r1, [sp, #12]
        media_ptr -> fx_media_driver_sectors =         1;
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
        media_ptr -> fx_media_driver_sector_type =     FX_DIRECTORY_SECTOR;
 8004f72:	f04f 0a03 	mov.w	sl, #3

        /* Write out the sector.  */
        (driver)(media_ptr);

        /* Clear the write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004f76:	f04f 0900 	mov.w	r9, #0
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004f7a:	440a      	add	r2, r1
 8004f7c:	4615      	mov	r5, r2
 8004f7e:	eb02 0803 	add.w	r8, r2, r3
 8004f82:	e008      	b.n	8004f96 <_fx_media_format+0x3be>
 8004f84:	20000184 	.word	0x20000184
 8004f88:	20000180 	.word	0x20000180
 8004f8c:	2000018c 	.word	0x2000018c
    for (s = 0; s < root_sectors; s++)
 8004f90:	45a8      	cmp	r8, r5
 8004f92:	f000 80c7 	beq.w	8005124 <_fx_media_format+0x54c>
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004f96:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
        (driver)(media_ptr);
 8004f9a:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004f9c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8004fa0:	3501      	adds	r5, #1
        media_ptr -> fx_media_driver_sectors =         1;
 8004fa2:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 8004fa6:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_sector_type =     FX_DIRECTORY_SECTOR;
 8004faa:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
        (driver)(media_ptr);
 8004fae:	47b8      	blx	r7

        /* Determine if it was successful.  */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004fb0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004fb4:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0e9      	beq.n	8004f90 <_fx_media_format+0x3b8>
        return(FX_IO_ERROR);
 8004fbc:	2090      	movs	r0, #144	; 0x90
    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);

    /* Return success!  */
    return(media_ptr -> fx_media_driver_status);
}
 8004fbe:	b007      	add	sp, #28
 8004fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_SECTOR_INVALID);
 8004fc4:	2089      	movs	r0, #137	; 0x89
}
 8004fc6:	b007      	add	sp, #28
 8004fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        bytes_needed = (total_clusters + total_clusters / 2);
 8004fcc:	eb03 0253 	add.w	r2, r3, r3, lsr #1
 8004fd0:	e67d      	b.n	8004cce <_fx_media_format+0xf6>
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS], (UINT)0);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	f000 fcd4 	bl	8005980 <_fx_utility_16_unsigned_write>
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], total_sectors);
 8004fd8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004fda:	4650      	mov	r0, sl
 8004fdc:	f000 fce0 	bl	80059a0 <_fx_utility_32_unsigned_write>
 8004fe0:	e6c1      	b.n	8004d66 <_fx_media_format+0x18e>
            if (bytes_per_sector == 512)
 8004fe2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004fe6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004fea:	f000 8083 	beq.w	80050f4 <_fx_media_format+0x51c>
    reserved_sectors =  1;
 8004fee:	2301      	movs	r3, #1
                _fx_utility_16_unsigned_write(&byte_ptr[48], 0xFFFF);
 8004ff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    reserved_sectors =  1;
 8004ff4:	9303      	str	r3, [sp, #12]
                _fx_utility_16_unsigned_write(&byte_ptr[48], 0xFFFF);
 8004ff6:	f000 fcc3 	bl	8005980 <_fx_utility_16_unsigned_write>
            _fx_utility_32_unsigned_write(&byte_ptr[FX_ROOT_CLUSTER_32], FX_FAT_ENTRY_START);
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8005000:	f000 fcce 	bl	80059a0 <_fx_utility_32_unsigned_write>
            total_clusters =  (total_sectors - reserved_sectors) / sectors_per_cluster;
 8005004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005006:	9a03      	ldr	r2, [sp, #12]
 8005008:	1a9a      	subs	r2, r3, r2
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800500a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
            total_clusters =  (total_sectors - reserved_sectors) / sectors_per_cluster;
 800500c:	fbb2 f2f3 	udiv	r2, r2, r3
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8005010:	fb03 f106 	mul.w	r1, r3, r6
            sectors_per_fat =  (total_clusters * 4) / bytes_per_sector;
 8005014:	0093      	lsls	r3, r2, #2
 8005016:	fbb3 f8f6 	udiv	r8, r3, r6
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800501a:	0949      	lsrs	r1, r1, #5
            if ((total_clusters * 4) % bytes_per_sector)
 800501c:	fb06 3318 	mls	r3, r6, r8, r3
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8005020:	9113      	str	r1, [sp, #76]	; 0x4c
            if ((total_clusters * 4) % bytes_per_sector)
 8005022:	b10b      	cbz	r3, 8005028 <_fx_media_format+0x450>
                sectors_per_fat++;
 8005024:	f108 0801 	add.w	r8, r8, #1
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8005028:	9b12      	ldr	r3, [sp, #72]	; 0x48
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 800502a:	f64f 71f4 	movw	r1, #65524	; 0xfff4
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 800502e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005030:	fb03 f308 	mul.w	r3, r3, r8
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	4453      	add	r3, sl
 8005038:	fbb3 f3f0 	udiv	r3, r3, r0
 800503c:	1ad3      	subs	r3, r2, r3
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 800503e:	428b      	cmp	r3, r1
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8005040:	9301      	str	r3, [sp, #4]
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 8005042:	f67f ae71 	bls.w	8004d28 <_fx_media_format+0x150>
        _fx_utility_32_unsigned_write(&byte_ptr[FX_SECTORS_PER_FAT_32], sectors_per_fat);
 8005046:	4641      	mov	r1, r8
 8005048:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800504c:	f000 fca8 	bl	80059a0 <_fx_utility_32_unsigned_write>
        byte_ptr[FX_BOOT_SIG_32] =  0x29;
 8005050:	2229      	movs	r2, #41	; 0x29
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
 8005052:	4b4b      	ldr	r3, [pc, #300]	; (8005180 <_fx_media_format+0x5a8>)
 8005054:	f105 0043 	add.w	r0, r5, #67	; 0x43
        byte_ptr[FX_BOOT_SIG_32] =  0x29;
 8005058:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	f000 fc9f 	bl	80059a0 <_fx_utility_32_unsigned_write>
 8005062:	e66f      	b.n	8004d44 <_fx_media_format+0x16c>
        i++;
 8005064:	f04f 0b09 	mov.w	fp, #9
 8005068:	eb02 000b 	add.w	r0, r2, fp
 800506c:	2120      	movs	r1, #32
 800506e:	f1cb 020b 	rsb	r2, fp, #11
 8005072:	4428      	add	r0, r5
 8005074:	f005 f9d3 	bl	800a41e <memset>
 8005078:	e6cd      	b.n	8004e16 <_fx_media_format+0x23e>
        _fx_utility_16_unsigned_write(&byte_ptr[FX_ROOT_DIR_ENTRIES], directory_entries);
 800507a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800507c:	f105 0011 	add.w	r0, r5, #17
 8005080:	f000 fc7e 	bl	8005980 <_fx_utility_16_unsigned_write>
        j =  FX_VOLUME_LABEL;
 8005084:	222b      	movs	r2, #43	; 0x2b
 8005086:	e683      	b.n	8004d90 <_fx_media_format+0x1b8>
        byte_ptr[i + 3] =  _fx_media_format_oem_name[i];
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	70ea      	strb	r2, [r5, #3]
 800508c:	785a      	ldrb	r2, [r3, #1]
 800508e:	712a      	strb	r2, [r5, #4]
 8005090:	789a      	ldrb	r2, [r3, #2]
 8005092:	716a      	strb	r2, [r5, #5]
 8005094:	78da      	ldrb	r2, [r3, #3]
 8005096:	71aa      	strb	r2, [r5, #6]
 8005098:	791a      	ldrb	r2, [r3, #4]
 800509a:	71ea      	strb	r2, [r5, #7]
 800509c:	795a      	ldrb	r2, [r3, #5]
 800509e:	722a      	strb	r2, [r5, #8]
 80050a0:	799a      	ldrb	r2, [r3, #6]
 80050a2:	726a      	strb	r2, [r5, #9]
 80050a4:	79db      	ldrb	r3, [r3, #7]
 80050a6:	72ab      	strb	r3, [r5, #10]
 80050a8:	e5ed      	b.n	8004c86 <_fx_media_format+0xae>
                if (total_clusters < FX_12_BIT_FAT_SIZE)
 80050aa:	9b01      	ldr	r3, [sp, #4]
 80050ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d912      	bls.n	80050da <_fx_media_format+0x502>
                else if (total_clusters < FX_16_BIT_FAT_SIZE)
 80050b4:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d844      	bhi.n	8005146 <_fx_media_format+0x56e>
                    byte_ptr[2] =  (UCHAR)0xFF;
 80050bc:	23ff      	movs	r3, #255	; 0xff
                    byte_ptr[0] =  (UCHAR)0xF0;
 80050be:	22f0      	movs	r2, #240	; 0xf0
                    i =  4;
 80050c0:	2004      	movs	r0, #4
                    byte_ptr[1] =  (UCHAR)0x00;
 80050c2:	f88b 5001 	strb.w	r5, [fp, #1]
                    byte_ptr[0] =  (UCHAR)0xF0;
 80050c6:	f88b 2000 	strb.w	r2, [fp]
                    byte_ptr[2] =  (UCHAR)0xFF;
 80050ca:	f88b 3002 	strb.w	r3, [fp, #2]
                    byte_ptr[3] =  (UCHAR)0xFF;
 80050ce:	f88b 3003 	strb.w	r3, [fp, #3]
            for (; i < bytes_per_sector; i++)
 80050d2:	42b0      	cmp	r0, r6
 80050d4:	f4bf af1b 	bcs.w	8004f0e <_fx_media_format+0x336>
 80050d8:	e714      	b.n	8004f04 <_fx_media_format+0x32c>
                    byte_ptr[0] =  (UCHAR)0x0F;
 80050da:	230f      	movs	r3, #15
                    byte_ptr[2] =  (UCHAR)0xFF;
 80050dc:	22ff      	movs	r2, #255	; 0xff
                    i =  3;
 80050de:	2003      	movs	r0, #3
                    byte_ptr[0] =  (UCHAR)0x0F;
 80050e0:	f88b 3000 	strb.w	r3, [fp]
                    byte_ptr[1] =  (UCHAR)0x0F;
 80050e4:	f88b 3001 	strb.w	r3, [fp, #1]
                    byte_ptr[2] =  (UCHAR)0xFF;
 80050e8:	f88b 2002 	strb.w	r2, [fp, #2]
 80050ec:	e7f1      	b.n	80050d2 <_fx_media_format+0x4fa>
        i++;
 80050ee:	f04f 0b0a 	mov.w	fp, #10
 80050f2:	e7b9      	b.n	8005068 <_fx_media_format+0x490>
                _fx_utility_16_unsigned_write(&byte_ptr[48], 1);
 80050f4:	2101      	movs	r1, #1
 80050f6:	f000 fc43 	bl	8005980 <_fx_utility_16_unsigned_write>
                reserved_sectors++;
 80050fa:	2302      	movs	r3, #2
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	e77c      	b.n	8004ffa <_fx_media_format+0x422>
        i++;
 8005100:	f04f 0b01 	mov.w	fp, #1
 8005104:	e7b0      	b.n	8005068 <_fx_media_format+0x490>
 8005106:	f04f 0b02 	mov.w	fp, #2
 800510a:	e7ad      	b.n	8005068 <_fx_media_format+0x490>
 800510c:	f04f 0b03 	mov.w	fp, #3
 8005110:	e7aa      	b.n	8005068 <_fx_media_format+0x490>
 8005112:	f04f 0b05 	mov.w	fp, #5
 8005116:	e7a7      	b.n	8005068 <_fx_media_format+0x490>
 8005118:	f04f 0b04 	mov.w	fp, #4
 800511c:	e7a4      	b.n	8005068 <_fx_media_format+0x490>
 800511e:	f04f 0b06 	mov.w	fp, #6
 8005122:	e7a1      	b.n	8005068 <_fx_media_format+0x490>
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8005124:	2108      	movs	r1, #8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8005126:	2290      	movs	r2, #144	; 0x90
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005128:	4620      	mov	r0, r4
 800512a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800512e:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005132:	4798      	blx	r3
    return(media_ptr -> fx_media_driver_status);
 8005134:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005138:	e741      	b.n	8004fbe <_fx_media_format+0x3e6>
        i++;
 800513a:	f04f 0b07 	mov.w	fp, #7
 800513e:	e793      	b.n	8005068 <_fx_media_format+0x490>
 8005140:	f04f 0b08 	mov.w	fp, #8
 8005144:	e790      	b.n	8005068 <_fx_media_format+0x490>
                    byte_ptr[4] =  (UCHAR)0xFF;
 8005146:	23ff      	movs	r3, #255	; 0xff
                    byte_ptr[0] =  (UCHAR)0xF0;
 8005148:	21f0      	movs	r1, #240	; 0xf0
                    byte_ptr[11] =  (UCHAR)0x0F;
 800514a:	220f      	movs	r2, #15
                    byte_ptr[1] =  (UCHAR)0x00;
 800514c:	f88b 5001 	strb.w	r5, [fp, #1]
                    byte_ptr[2] =  (UCHAR)0x00;
 8005150:	f88b 5002 	strb.w	r5, [fp, #2]
                    i =  12;
 8005154:	200c      	movs	r0, #12
                    byte_ptr[3] =  (UCHAR)0x00;
 8005156:	f88b 5003 	strb.w	r5, [fp, #3]
                    byte_ptr[0] =  (UCHAR)0xF0;
 800515a:	f88b 1000 	strb.w	r1, [fp]
                    byte_ptr[4] =  (UCHAR)0xFF;
 800515e:	f88b 3004 	strb.w	r3, [fp, #4]
                    byte_ptr[5] =  (UCHAR)0xFF;
 8005162:	f88b 3005 	strb.w	r3, [fp, #5]
                    byte_ptr[6] =  (UCHAR)0xFF;
 8005166:	f88b 3006 	strb.w	r3, [fp, #6]
                    byte_ptr[7] =  (UCHAR)0xFF;
 800516a:	f88b 3007 	strb.w	r3, [fp, #7]
                    byte_ptr[8] =   (UCHAR)0xFF;
 800516e:	f88b 3008 	strb.w	r3, [fp, #8]
                    byte_ptr[9] =   (UCHAR)0xFF;
 8005172:	f88b 3009 	strb.w	r3, [fp, #9]
                    byte_ptr[10] =  (UCHAR)0xFF;
 8005176:	f88b 300a 	strb.w	r3, [fp, #10]
                    byte_ptr[11] =  (UCHAR)0x0F;
 800517a:	f88b 200b 	strb.w	r2, [fp, #11]
 800517e:	e7a8      	b.n	80050d2 <_fx_media_format+0x4fa>
 8005180:	2000018c 	.word	0x2000018c

08005184 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             bytes_in_buffer;
FX_INT_SAVE_AREA


    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8005188:	4d78      	ldr	r5, [pc, #480]	; (800536c <_fx_media_open+0x1e8>)
{
 800518a:	b087      	sub	sp, #28
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800518c:	4c78      	ldr	r4, [pc, #480]	; (8005370 <_fx_media_open+0x1ec>)
 800518e:	4e79      	ldr	r6, [pc, #484]	; (8005374 <_fx_media_open+0x1f0>)
 8005190:	6827      	ldr	r7, [r4, #0]
 8005192:	682d      	ldr	r5, [r5, #0]
 8005194:	433d      	orrs	r5, r7
 8005196:	6837      	ldr	r7, [r6, #0]
{
 8005198:	9e10      	ldr	r6, [sp, #64]	; 0x40
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800519a:	433d      	orrs	r5, r7
 800519c:	f000 80b8 	beq.w	8005310 <_fx_media_open+0x18c>
        _fx_version_id[0] == 0)
 80051a0:	4d75      	ldr	r5, [pc, #468]	; (8005378 <_fx_media_open+0x1f4>)
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80051a2:	782d      	ldrb	r5, [r5, #0]
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	f000 80b3 	beq.w	8005310 <_fx_media_open+0x18c>
    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
    media_ptr -> fx_media_driver_entry =                media_driver;
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
    media_ptr -> fx_media_memory_size =                 memory_size;
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 80051aa:	2500      	movs	r5, #0
    media_ptr -> fx_media_name =                        media_name;
 80051ac:	6041      	str	r1, [r0, #4]
 80051ae:	4698      	mov	r8, r3
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 80051b0:	f242 4ea4 	movw	lr, #9380	; 0x24a4
    media_ptr -> fx_media_memory_size =                 memory_size;
 80051b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    media_ptr -> fx_media_FAT_type =                    0;
 80051b6:	f242 4cb0 	movw	ip, #9392	; 0x24b0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 80051ba:	2104      	movs	r1, #4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 80051bc:	2790      	movs	r7, #144	; 0x90
 80051be:	4604      	mov	r4, r0
    media_ptr -> fx_media_memory_size =                 memory_size;
 80051c0:	60c3      	str	r3, [r0, #12]
    media_ptr -> fx_media_driver_entry =                media_driver;
 80051c2:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 80051c6:	6086      	str	r6, [r0, #8]
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 80051c8:	f840 500e 	str.w	r5, [r0, lr]
    media_ptr -> fx_media_directory_local_path_gets =  0;
 80051cc:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 80051d0:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 80051d4:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 80051d8:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 80051dc:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 80051e0:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 80051e4:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 80051e8:	f8c0 511c 	str.w	r5, [r0, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 80051ec:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 80051f0:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 80051f4:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 80051f8:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 80051fc:	f8c0 5130 	str.w	r5, [r0, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 8005200:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 8005204:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 8005208:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800520c:	e9c0 5536 	strd	r5, r5, [r0, #216]	; 0xd8
    media_ptr -> fx_media_directory_default_gets =  0;
 8005210:	e9c0 5538 	strd	r5, r5, [r0, #224]	; 0xe0
    media_ptr -> fx_media_directory_deletes =  0;
 8005214:	e9c0 553a 	strd	r5, r5, [r0, #232]	; 0xe8
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 8005218:	e9c0 553c 	strd	r5, r5, [r0, #240]	; 0xf0
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800521c:	e9c0 553e 	strd	r5, r5, [r0, #248]	; 0xf8
    media_ptr -> fx_media_FAT_type =                    0;
 8005220:	f800 500c 	strb.w	r5, [r0, ip]
    media_ptr -> fx_media_file_relative_seeks =  0;
 8005224:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 8005228:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800522c:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 8005230:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 8005234:	f8c0 5150 	str.w	r5, [r0, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 8005238:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800523c:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 8005240:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 8005244:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 8005248:	f8c0 5164 	str.w	r5, [r0, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800524c:	f8c0 5168 	str.w	r5, [r0, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 8005250:	f8c0 516c 	str.w	r5, [r0, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 8005254:	f8c0 5170 	str.w	r5, [r0, #368]	; 0x170
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 8005258:	f8c0 51c4 	str.w	r5, [r0, #452]	; 0x1c4
    media_ptr -> fx_media_directory_free_searches =  0;
 800525c:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 8005260:	f8c0 5178 	str.w	r5, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 8005264:	f8c0 517c 	str.w	r5, [r0, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 8005268:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800526c:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 8005270:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 8005274:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 8005278:	f8c0 5190 	str.w	r5, [r0, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800527c:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 8005280:	f8c0 5198 	str.w	r5, [r0, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 8005284:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 8005288:	f8c0 51a0 	str.w	r5, [r0, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800528c:	f8c0 51a4 	str.w	r5, [r0, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 8005290:	f8c0 51a8 	str.w	r5, [r0, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 8005294:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 8005298:	f8c0 51b0 	str.w	r5, [r0, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800529c:	f8c0 51b4 	str.w	r5, [r0, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 80052a0:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 80052a4:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 80052a8:	f8c0 51c0 	str.w	r5, [r0, #448]	; 0x1c0
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 80052ac:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 80052b0:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 80052b4:	e9c0 552a 	strd	r5, r5, [r0, #168]	; 0xa8
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 80052b8:	e9c0 1722 	strd	r1, r7, [r0, #136]	; 0x88

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80052bc:	4790      	blx	r2

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80052be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d150      	bne.n	8005368 <_fx_media_open+0x1e4>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 80052c6:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
    media_ptr -> fx_media_driver_sectors =          1;
 80052ca:	2501      	movs	r5, #1
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 80052cc:	2205      	movs	r2, #5
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80052ce:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    media_ptr -> fx_media_driver_boot_read_requests++;
 80052d2:	442b      	add	r3, r5
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 80052d4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 80052d8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80052dc:	4620      	mov	r0, r4
    media_ptr -> fx_media_driver_boot_read_requests++;
 80052de:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    media_ptr -> fx_media_driver_sectors =          1;
 80052e2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80052e6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 80052ea:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80052ee:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80052f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80052f4:	b18b      	cbz	r3, 800531a <_fx_media_open+0x196>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80052f6:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80052f8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80052fc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005300:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8005302:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005306:	4798      	blx	r3
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
}
 8005308:	4628      	mov	r0, r5
 800530a:	b007      	add	sp, #28
 800530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_IMPLEMENTED);
 8005310:	2522      	movs	r5, #34	; 0x22
}
 8005312:	4628      	mov	r0, r5
 8005314:	b007      	add	sp, #28
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800531a:	4620      	mov	r0, r4
 800531c:	f001 fbe4 	bl	8006ae8 <_fx_media_boot_info_extract>
 8005320:	4605      	mov	r5, r0
 8005322:	b150      	cbz	r0, 800533a <_fx_media_open+0x1b6>
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8005324:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8005326:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800532a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800532e:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8005330:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        return(FX_MEDIA_INVALID);
 8005334:	2502      	movs	r5, #2
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005336:	4798      	blx	r3
        return(FX_MEDIA_INVALID);
 8005338:	e7e6      	b.n	8005308 <_fx_media_open+0x184>
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800533a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800533e:	3030      	adds	r0, #48	; 0x30
 8005340:	f7ff fb64 	bl	8004a0c <_fx_utility_16_unsigned_read>
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 8005344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005346:	9a11      	ldr	r2, [sp, #68]	; 0x44
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 8005348:	4680      	mov	r8, r0
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	6163      	str	r3, [r4, #20]
    if (media_ptr -> fx_media_sector_cache_size == 0)
 8005350:	b9a3      	cbnz	r3, 800537c <_fx_media_open+0x1f8>
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8005352:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8005354:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005358:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800535c:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800535e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        return(FX_BUFFER_ERROR);
 8005362:	2521      	movs	r5, #33	; 0x21
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005364:	4798      	blx	r3
        return(FX_BUFFER_ERROR);
 8005366:	e7cf      	b.n	8005308 <_fx_media_open+0x184>
        return(FX_IO_ERROR);
 8005368:	463d      	mov	r5, r7
 800536a:	e7cd      	b.n	8005308 <_fx_media_open+0x184>
 800536c:	20002bd4 	.word	0x20002bd4
 8005370:	20002b90 	.word	0x20002b90
 8005374:	20002bd8 	.word	0x20002bd8
 8005378:	20000120 	.word	0x20000120
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800537c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005380:	f240 817e 	bls.w	8005680 <_fx_media_open+0x4fc>
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 8005384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005388:	23ff      	movs	r3, #255	; 0xff
 800538a:	6162      	str	r2, [r4, #20]
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800538c:	f504 6e4a 	add.w	lr, r4, #3232	; 0xca0
 8005390:	f604 42b8 	addw	r2, r4, #3256	; 0xcb8
    while (i--)
 8005394:	469a      	mov	sl, r3
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 8005396:	46b1      	mov	r9, r6
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	f04f 31ff 	mov.w	r1, #4294967295
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 80053a0:	f04f 0c00 	mov.w	ip, #0
    while (i--)
 80053a4:	f10a 3aff 	add.w	sl, sl, #4294967295
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 80053a8:	f802 cc08 	strb.w	ip, [r2, #-8]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 80053ac:	f802 cc07 	strb.w	ip, [r2, #-7]
    while (i--)
 80053b0:	f1ba 3fff 	cmp.w	sl, #4294967295
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 80053b4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 80053b6:	f842 9c18 	str.w	r9, [r2, #-24]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 80053ba:	f842 2c04 	str.w	r2, [r2, #-4]
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 80053be:	44b9      	add	r9, r7
 80053c0:	f102 0218 	add.w	r2, r2, #24
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 80053c4:	e942 010a 	strd	r0, r1, [r2, #-40]	; 0x28
    while (i--)
 80053c8:	d1ec      	bne.n	80053a4 <_fx_media_open+0x220>
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 80053ca:	3301      	adds	r3, #1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 80053cc:	6961      	ldr	r1, [r4, #20]
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 80053ce:	f109 32ff 	add.w	r2, r9, #4294967295
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 80053d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 80053d6:	290f      	cmp	r1, #15
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 80053d8:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 80053dc:	f843 cc04 	str.w	ip, [r3, #-4]
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 80053e0:	e9c4 2e06 	strd	r2, lr, [r4, #24]
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 80053e4:	e9c4 cc08 	strd	ip, ip, [r4, #32]
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 80053e8:	d906      	bls.n	80053f8 <_fx_media_open+0x274>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 80053ea:	1e4b      	subs	r3, r1, #1
 80053ec:	ea81 0203 	eor.w	r2, r1, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 80053f0:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 80053f2:	429a      	cmp	r2, r3
 80053f4:	f000 81cb 	beq.w	800578e <_fx_media_open+0x60a>
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 80053f8:	2200      	movs	r2, #0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80053fa:	f04f 0900 	mov.w	r9, #0
 80053fe:	6122      	str	r2, [r4, #16]
 8005400:	f604 0018 	addw	r0, r4, #2072	; 0x818
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	4649      	mov	r1, r9
 8005408:	f8c4 9758 	str.w	r9, [r4, #1880]	; 0x758
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800540c:	f8c4 975c 	str.w	r9, [r4, #1884]	; 0x75c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005410:	f8c4 9760 	str.w	r9, [r4, #1888]	; 0x760
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005414:	f8c4 9764 	str.w	r9, [r4, #1892]	; 0x764
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005418:	f8c4 9768 	str.w	r9, [r4, #1896]	; 0x768
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800541c:	f8c4 976c 	str.w	r9, [r4, #1900]	; 0x76c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005420:	f8c4 9770 	str.w	r9, [r4, #1904]	; 0x770
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005424:	f8c4 9774 	str.w	r9, [r4, #1908]	; 0x774
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005428:	f8c4 9778 	str.w	r9, [r4, #1912]	; 0x778
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800542c:	f8c4 977c 	str.w	r9, [r4, #1916]	; 0x77c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005430:	f8c4 9780 	str.w	r9, [r4, #1920]	; 0x780
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005434:	f8c4 9784 	str.w	r9, [r4, #1924]	; 0x784
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005438:	f8c4 9788 	str.w	r9, [r4, #1928]	; 0x788
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800543c:	f8c4 978c 	str.w	r9, [r4, #1932]	; 0x78c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005440:	f8c4 9790 	str.w	r9, [r4, #1936]	; 0x790
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005444:	f8c4 9794 	str.w	r9, [r4, #1940]	; 0x794
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005448:	f8c4 9798 	str.w	r9, [r4, #1944]	; 0x798
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800544c:	f8c4 979c 	str.w	r9, [r4, #1948]	; 0x79c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005450:	f8c4 97a0 	str.w	r9, [r4, #1952]	; 0x7a0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005454:	f8c4 97a4 	str.w	r9, [r4, #1956]	; 0x7a4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005458:	f8c4 97a8 	str.w	r9, [r4, #1960]	; 0x7a8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800545c:	f8c4 97ac 	str.w	r9, [r4, #1964]	; 0x7ac
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005460:	f8c4 97b0 	str.w	r9, [r4, #1968]	; 0x7b0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005464:	f8c4 97b4 	str.w	r9, [r4, #1972]	; 0x7b4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005468:	f8c4 97b8 	str.w	r9, [r4, #1976]	; 0x7b8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800546c:	f8c4 97bc 	str.w	r9, [r4, #1980]	; 0x7bc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005470:	f8c4 97c0 	str.w	r9, [r4, #1984]	; 0x7c0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005474:	f8c4 97c4 	str.w	r9, [r4, #1988]	; 0x7c4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005478:	f8c4 97c8 	str.w	r9, [r4, #1992]	; 0x7c8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800547c:	f8c4 97cc 	str.w	r9, [r4, #1996]	; 0x7cc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005480:	f8c4 97d0 	str.w	r9, [r4, #2000]	; 0x7d0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005484:	f8c4 97d4 	str.w	r9, [r4, #2004]	; 0x7d4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005488:	f8c4 97d8 	str.w	r9, [r4, #2008]	; 0x7d8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800548c:	f8c4 97dc 	str.w	r9, [r4, #2012]	; 0x7dc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8005490:	f8c4 97e0 	str.w	r9, [r4, #2016]	; 0x7e0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8005494:	f8c4 97e4 	str.w	r9, [r4, #2020]	; 0x7e4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8005498:	f8c4 97e8 	str.w	r9, [r4, #2024]	; 0x7e8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800549c:	f8c4 97ec 	str.w	r9, [r4, #2028]	; 0x7ec
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80054a0:	f8c4 97f0 	str.w	r9, [r4, #2032]	; 0x7f0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80054a4:	f8c4 97f4 	str.w	r9, [r4, #2036]	; 0x7f4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80054a8:	f8c4 97f8 	str.w	r9, [r4, #2040]	; 0x7f8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80054ac:	f8c4 97fc 	str.w	r9, [r4, #2044]	; 0x7fc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80054b0:	f8c4 9800 	str.w	r9, [r4, #2048]	; 0x800
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80054b4:	f8c4 9804 	str.w	r9, [r4, #2052]	; 0x804
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80054b8:	f8c4 9808 	str.w	r9, [r4, #2056]	; 0x808
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80054bc:	f8c4 980c 	str.w	r9, [r4, #2060]	; 0x80c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80054c0:	f8c4 9810 	str.w	r9, [r4, #2064]	; 0x810
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80054c4:	f8c4 9814 	str.w	r9, [r4, #2068]	; 0x814
 80054c8:	f004 ffa9 	bl	800a41e <memset>
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 80054cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 80054ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80054d0:	464b      	mov	r3, r9
             media_ptr -> fx_media_bytes_per_sector - 1) /
 80054d2:	eb07 1242 	add.w	r2, r7, r2, lsl #5
            (media_ptr -> fx_media_number_of_FATs *
 80054d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                                                            media_ptr -> fx_media_sectors_per_cluster);
 80054d8:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
             media_ptr -> fx_media_bytes_per_sector - 1) /
 80054dc:	f102 3cff 	add.w	ip, r2, #4294967295
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 80054e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
             media_ptr -> fx_media_bytes_per_sector - 1) /
 80054e2:	fbbc f7f7 	udiv	r7, ip, r7
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 80054e6:	fb02 0101 	mla	r1, r2, r1, r0
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80054ea:	4652      	mov	r2, sl
        media_ptr -> fx_media_root_sectors =
 80054ec:	64e7      	str	r7, [r4, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 80054ee:	eb01 0b07 	add.w	fp, r1, r7
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 80054f2:	64a1      	str	r1, [r4, #72]	; 0x48
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80054f4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 80054f8:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80054fc:	ebb0 000b 	subs.w	r0, r0, fp
 8005500:	f161 0100 	sbc.w	r1, r1, #0
 8005504:	f7fb f814 	bl	8000530 <__aeabi_uldivmod>
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8005508:	f640 73f5 	movw	r3, #4085	; 0xff5
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800550c:	6420      	str	r0, [r4, #64]	; 0x40
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800550e:	4298      	cmp	r0, r3
 8005510:	f200 80b8 	bhi.w	8005684 <_fx_media_open+0x500>
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8005514:	2201      	movs	r2, #1
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8005516:	f242 41a8 	movw	r1, #9384	; 0x24a8
 800551a:	f64f 70f0 	movw	r0, #65520	; 0xfff0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800551e:	f242 43ac 	movw	r3, #9388	; 0x24ac
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8005522:	6622      	str	r2, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8005524:	f64f 72ff 	movw	r2, #65535	; 0xffff
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8005528:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800552c:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8005530:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8005532:	50e2      	str	r2, [r4, r3]
    media_ptr -> fx_media_available_clusters =  0;
 8005534:	2300      	movs	r3, #0
 8005536:	67e3      	str	r3, [r4, #124]	; 0x7c
    media_ptr -> fx_media_cluster_search_start =  0;
 8005538:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (media_ptr -> fx_media_12_bit_FAT)
 800553c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800553e:	2b00      	cmp	r3, #0
 8005540:	f040 80b3 	bne.w	80056aa <_fx_media_open+0x526>
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 8005544:	2101      	movs	r1, #1
 8005546:	2300      	movs	r3, #0
 8005548:	2201      	movs	r2, #1
 800554a:	4620      	mov	r0, r4
 800554c:	9102      	str	r1, [sp, #8]
 800554e:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 8005552:	e9cd 8900 	strd	r8, r9, [sp]
 8005556:	f000 fd07 	bl	8005f68 <_fx_utility_logical_sector_flush>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800555a:	6da3      	ldr	r3, [r4, #88]	; 0x58
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800555c:	60a6      	str	r6, [r4, #8]
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800555e:	2b00      	cmp	r3, #0
 8005560:	d051      	beq.n	8005606 <_fx_media_open+0x482>
 8005562:	2700      	movs	r7, #0
 8005564:	6960      	ldr	r0, [r4, #20]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005566:	f04f 0890 	mov.w	r8, #144	; 0x90
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800556a:	f04f 0902 	mov.w	r9, #2
        cluster_number =  0;
 800556e:	463e      	mov	r6, r7
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8005570:	46ba      	mov	sl, r7
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8005572:	1bd9      	subs	r1, r3, r7
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8005574:	6c62      	ldr	r2, [r4, #68]	; 0x44
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8005576:	68a3      	ldr	r3, [r4, #8]
 8005578:	4281      	cmp	r1, r0
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800557a:	443a      	add	r2, r7
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800557c:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 8005580:	bf28      	it	cs
 8005582:	4601      	movcs	r1, r0
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005584:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005588:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800558a:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800558e:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 8005592:	468b      	mov	fp, r1
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8005594:	e9c4 3224 	strd	r3, r2, [r4, #144]	; 0x90
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005598:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800559c:	4798      	blx	r3
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800559e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 80fe 	bne.w	80057a4 <_fx_media_open+0x620>
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 80055a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80055aa:	fb00 f00b 	mul.w	r0, r0, fp
            for (j = 0; j < bytes_in_buffer;)
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f000 80eb 	beq.w	800578a <_fx_media_open+0x606>
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80055b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055b8:	f103 0c02 	add.w	ip, r3, #2
 80055bc:	68a1      	ldr	r1, [r4, #8]
 80055be:	2a00      	cmp	r2, #0
 80055c0:	f040 80cd 	bne.w	800575e <_fx_media_open+0x5da>
            for (j = 0; j < bytes_in_buffer;)
 80055c4:	4696      	mov	lr, r2
 80055c6:	e002      	b.n	80055ce <_fx_media_open+0x44a>
 80055c8:	4570      	cmp	r0, lr
 80055ca:	f240 80de 	bls.w	800578a <_fx_media_open+0x606>
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 80055ce:	eb01 020e 	add.w	r2, r1, lr
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 80055d2:	f811 300e 	ldrb.w	r3, [r1, lr]
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 80055d6:	f10e 0e02 	add.w	lr, lr, #2
 80055da:	7852      	ldrb	r2, [r2, #1]
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 80055dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055e0:	9305      	str	r3, [sp, #20]
                if (FAT_entry == FX_FREE_CLUSTER)
 80055e2:	b93b      	cbnz	r3, 80055f4 <_fx_media_open+0x470>
                    media_ptr -> fx_media_available_clusters++;
 80055e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 80055e6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    media_ptr -> fx_media_available_clusters++;
 80055ea:	3301      	adds	r3, #1
 80055ec:	67e3      	str	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 80055ee:	b90a      	cbnz	r2, 80055f4 <_fx_media_open+0x470>
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 80055f0:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
                cluster_number++;
 80055f4:	3601      	adds	r6, #1
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80055f6:	45b4      	cmp	ip, r6
 80055f8:	d8e6      	bhi.n	80055c8 <_fx_media_open+0x444>
                    i = media_ptr -> fx_media_sectors_per_FAT;
 80055fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055fc:	461f      	mov	r7, r3
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 80055fe:	6960      	ldr	r0, [r4, #20]
 8005600:	4407      	add	r7, r0
 8005602:	42bb      	cmp	r3, r7
 8005604:	d8b5      	bhi.n	8005572 <_fx_media_open+0x3ee>
    if (media_ptr -> fx_media_cluster_search_start == 0)
 8005606:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800560a:	b913      	cbnz	r3, 8005612 <_fx_media_open+0x48e>
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800560c:	2302      	movs	r3, #2
 800560e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8005612:	2300      	movs	r3, #0
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 8005614:	f504 62ca 	add.w	r2, r4, #1616	; 0x650
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8005618:	499d      	ldr	r1, [pc, #628]	; (8005890 <_fx_media_open+0x70c>)
 800561a:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800561e:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8005622:	461a      	mov	r2, r3
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8005624:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 8005628:	f884 3650 	strb.w	r3, [r4, #1616]	; 0x650
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800562c:	f884 3550 	strb.w	r3, [r4, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 8005630:	f884 364f 	strb.w	r3, [r4, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 8005634:	f8c4 3750 	str.w	r3, [r4, #1872]	; 0x750
    media_ptr -> fx_media_last_found_name[0] =  0;
 8005638:	f884 33e0 	strb.w	r3, [r4, #992]	; 0x3e0
    media_ptr -> fx_media_opened_file_count =     0;
 800563c:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8005640:	f003 f99c 	bl	800897c <_tx_mutex_create>
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005644:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005648:	b672      	cpsid	i
    if (_fx_system_media_opened_ptr)
 800564a:	4a92      	ldr	r2, [pc, #584]	; (8005894 <_fx_media_open+0x710>)
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800564c:	4992      	ldr	r1, [pc, #584]	; (8005898 <_fx_media_open+0x714>)
    if (_fx_system_media_opened_ptr)
 800564e:	6813      	ldr	r3, [r2, #0]
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 8005650:	6021      	str	r1, [r4, #0]
    if (_fx_system_media_opened_ptr)
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80a2 	beq.w	800579c <_fx_media_open+0x618>
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 8005658:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800565c:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 8005660:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 8005664:	e9c4 3234 	strd	r3, r2, [r4, #208]	; 0xd0
    _fx_system_media_opened_count++;
 8005668:	498c      	ldr	r1, [pc, #560]	; (800589c <_fx_media_open+0x718>)
    if (media_ptr -> fx_media_open_notify)
 800566a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    _fx_system_media_opened_count++;
 800566e:	680b      	ldr	r3, [r1, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	600b      	str	r3, [r1, #0]
    if (media_ptr -> fx_media_open_notify)
 8005674:	b10a      	cbz	r2, 800567a <_fx_media_open+0x4f6>
        media_ptr -> fx_media_open_notify(media_ptr);
 8005676:	4620      	mov	r0, r4
 8005678:	4790      	blx	r2
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800567a:	f386 8810 	msr	PRIMASK, r6
    return(FX_SUCCESS);
 800567e:	e643      	b.n	8005308 <_fx_media_open+0x184>
 8005680:	3b01      	subs	r3, #1
 8005682:	e683      	b.n	800538c <_fx_media_open+0x208>
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 8005684:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005688:	4298      	cmp	r0, r3
 800568a:	d837      	bhi.n	80056fc <_fx_media_open+0x578>
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800568c:	f242 41a8 	movw	r1, #9384	; 0x24a8
 8005690:	f64f 70f0 	movw	r0, #65520	; 0xfff0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8005694:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8005698:	f64f 72ff 	movw	r2, #65535	; 0xffff
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800569c:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 80056a0:	e9c4 9918 	strd	r9, r9, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 80056a4:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 80056a6:	50e2      	str	r2, [r4, r3]
 80056a8:	e744      	b.n	8005534 <_fx_media_open+0x3b0>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 80056aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ac:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d9a9      	bls.n	8005606 <_fx_media_open+0x482>
 80056b2:	2602      	movs	r6, #2
 80056b4:	af05      	add	r7, sp, #20
 80056b6:	e00e      	b.n	80056d6 <_fx_media_open+0x552>
            if (FAT_entry == FX_FREE_CLUSTER)
 80056b8:	9b05      	ldr	r3, [sp, #20]
 80056ba:	b93b      	cbnz	r3, 80056cc <_fx_media_open+0x548>
                media_ptr -> fx_media_available_clusters++;
 80056bc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                if (media_ptr -> fx_media_cluster_search_start == 0)
 80056be:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                media_ptr -> fx_media_available_clusters++;
 80056c2:	3301      	adds	r3, #1
 80056c4:	67e3      	str	r3, [r4, #124]	; 0x7c
                if (media_ptr -> fx_media_cluster_search_start == 0)
 80056c6:	b90a      	cbnz	r2, 80056cc <_fx_media_open+0x548>
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 80056c8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 80056cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
             cluster_number++)
 80056ce:	3601      	adds	r6, #1
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 80056d0:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 80056d2:	42b3      	cmp	r3, r6
 80056d4:	d997      	bls.n	8005606 <_fx_media_open+0x482>
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 80056d6:	463a      	mov	r2, r7
 80056d8:	4631      	mov	r1, r6
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 f968 	bl	80059b0 <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d0e9      	beq.n	80056b8 <_fx_media_open+0x534>
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80056e4:	2108      	movs	r1, #8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80056e6:	2290      	movs	r2, #144	; 0x90
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80056e8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80056ec:	4620      	mov	r0, r4
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80056ee:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
                return(FX_FAT_READ_ERROR);
 80056f2:	2503      	movs	r5, #3
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80056f4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80056f8:	4798      	blx	r3
                return(FX_FAT_READ_ERROR);
 80056fa:	e605      	b.n	8005308 <_fx_media_open+0x184>
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 80056fc:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8005700:	2201      	movs	r2, #1
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8005702:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8005706:	f242 43a8 	movw	r3, #9384	; 0x24a8
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800570a:	6662      	str	r2, [r4, #100]	; 0x64
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800570c:	f242 41ac 	movw	r1, #9388	; 0x24ac
 8005710:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8005714:	4a62      	ldr	r2, [pc, #392]	; (80058a0 <_fx_media_open+0x71c>)
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8005716:	f1b8 0f01 	cmp.w	r8, #1
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800571a:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800571e:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8005720:	50e2      	str	r2, [r4, r3]
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8005722:	f240 80b3 	bls.w	800588c <_fx_media_open+0x708>
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8005726:	f1a8 0302 	sub.w	r3, r8, #2
 800572a:	af05      	add	r7, sp, #20
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800572c:	fb0a b303 	mla	r3, sl, r3, fp
            if (FAT_entry >= FX_RESERVED_1_32)
 8005730:	f8df a178 	ldr.w	sl, [pc, #376]	; 80058ac <_fx_media_open+0x728>
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8005734:	64a3      	str	r3, [r4, #72]	; 0x48
 8005736:	e008      	b.n	800574a <_fx_media_open+0x5c6>
            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 8005738:	9b05      	ldr	r3, [sp, #20]
 800573a:	4543      	cmp	r3, r8
 800573c:	4698      	mov	r8, r3
 800573e:	d0d1      	beq.n	80056e4 <_fx_media_open+0x560>
 8005740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005742:	454b      	cmp	r3, r9
 8005744:	d3ce      	bcc.n	80056e4 <_fx_media_open+0x560>
            if (FAT_entry >= FX_RESERVED_1_32)
 8005746:	45d0      	cmp	r8, sl
 8005748:	d837      	bhi.n	80057ba <_fx_media_open+0x636>
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800574a:	463a      	mov	r2, r7
 800574c:	4641      	mov	r1, r8
 800574e:	4620      	mov	r0, r4
            i++;
 8005750:	f109 0901 	add.w	r9, r9, #1
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8005754:	f000 f92c 	bl	80059b0 <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8005758:	2800      	cmp	r0, #0
 800575a:	d0ed      	beq.n	8005738 <_fx_media_open+0x5b4>
 800575c:	e7c2      	b.n	80056e4 <_fx_media_open+0x560>
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800575e:	468e      	mov	lr, r1
 8005760:	e001      	b.n	8005766 <_fx_media_open+0x5e2>
            for (j = 0; j < bytes_in_buffer;)
 8005762:	4558      	cmp	r0, fp
 8005764:	d911      	bls.n	800578a <_fx_media_open+0x606>
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 8005766:	f85e 3b04 	ldr.w	r3, [lr], #4
            for (j = 0; j < bytes_in_buffer;)
 800576a:	ebae 0b01 	sub.w	fp, lr, r1
 800576e:	9305      	str	r3, [sp, #20]
                if (FAT_entry == FX_FREE_CLUSTER)
 8005770:	b93b      	cbnz	r3, 8005782 <_fx_media_open+0x5fe>
                    media_ptr -> fx_media_available_clusters++;
 8005772:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8005774:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    media_ptr -> fx_media_available_clusters++;
 8005778:	3301      	adds	r3, #1
 800577a:	67e3      	str	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800577c:	b90a      	cbnz	r2, 8005782 <_fx_media_open+0x5fe>
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800577e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
                cluster_number++;
 8005782:	3601      	adds	r6, #1
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8005784:	45b4      	cmp	ip, r6
 8005786:	d8ec      	bhi.n	8005762 <_fx_media_open+0x5de>
 8005788:	e737      	b.n	80055fa <_fx_media_open+0x476>
 800578a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800578c:	e737      	b.n	80055fe <_fx_media_open+0x47a>
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800578e:	088b      	lsrs	r3, r1, #2
        media_ptr -> fx_media_sector_cache_hash_mask =
 8005790:	f242 41a0 	movw	r1, #9376	; 0x24a0
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 8005794:	2201      	movs	r2, #1
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8005796:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 8005798:	5063      	str	r3, [r4, r1]
 800579a:	e62e      	b.n	80053fa <_fx_media_open+0x276>
        _fx_system_media_opened_ptr =           media_ptr;
 800579c:	6014      	str	r4, [r2, #0]
        media_ptr -> fx_media_opened_previous = media_ptr;
 800579e:	e9c4 4434 	strd	r4, r4, [r4, #208]	; 0xd0
 80057a2:	e761      	b.n	8005668 <_fx_media_open+0x4e4>
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80057a4:	2208      	movs	r2, #8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80057a6:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80057aa:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80057ae:	4620      	mov	r0, r4
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80057b0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
                return(FX_FAT_READ_ERROR);
 80057b4:	2503      	movs	r5, #3
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80057b6:	4798      	blx	r3
                return(FX_FAT_READ_ERROR);
 80057b8:	e5a6      	b.n	8005308 <_fx_media_open+0x184>
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 80057ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    media_ptr -> fx_media_available_clusters =  0;
 80057be:	67e0      	str	r0, [r4, #124]	; 0x7c
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 80057c0:	fb03 f302 	mul.w	r3, r3, r2
 80057c4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    media_ptr -> fx_media_cluster_search_start =  0;
 80057c6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 80057ca:	fb09 f903 	mul.w	r9, r9, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80057ce:	ea4f 1359 	mov.w	r3, r9, lsr #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 80057d2:	67a3      	str	r3, [r4, #120]	; 0x78
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f43f aeb1 	beq.w	800553c <_fx_media_open+0x3b8>
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80057da:	69e2      	ldr	r2, [r4, #28]
        media_ptr -> fx_media_driver_sectors =          1;
 80057dc:	2101      	movs	r1, #1
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 80057de:	f04f 38ff 	mov.w	r8, #4294967295
 80057e2:	f04f 39ff 	mov.w	r9, #4294967295
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 80057e6:	7450      	strb	r0, [r2, #17]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80057e8:	2790      	movs	r7, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 80057ea:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 80057ee:	e9c2 8902 	strd	r8, r9, [r2, #8]
        media_ptr -> fx_media_driver_read_requests++;
 80057f2:	440b      	add	r3, r1
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80057f4:	6812      	ldr	r2, [r2, #0]
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80057f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80057fa:	4620      	mov	r0, r4
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80057fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8005800:	2203      	movs	r2, #3
        media_ptr -> fx_media_driver_read_requests++;
 8005802:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8005806:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005808:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800580c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8005810:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005814:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8005818:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800581c:	4798      	blx	r3
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800581e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005822:	b153      	cbz	r3, 800583a <_fx_media_open+0x6b6>
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8005824:	2300      	movs	r3, #0
 8005826:	66a3      	str	r3, [r4, #104]	; 0x68
    if (media_ptr -> fx_media_12_bit_FAT)
 8005828:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800582a:	2b00      	cmp	r3, #0
 800582c:	f47f af3d 	bne.w	80056aa <_fx_media_open+0x526>
    else if (media_ptr -> fx_media_available_clusters == 0)
 8005830:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f aee7 	bne.w	8005606 <_fx_media_open+0x482>
 8005838:	e684      	b.n	8005544 <_fx_media_open+0x3c0>
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800583a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800583e:	4638      	mov	r0, r7
 8005840:	f000 f8a2 	bl	8005988 <_fx_utility_32_unsigned_read>
            if (signature == 0x41615252)
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <_fx_media_open+0x720>)
 8005846:	4298      	cmp	r0, r3
 8005848:	d1ec      	bne.n	8005824 <_fx_media_open+0x6a0>
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800584a:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 800584e:	f000 f89b 	bl	8005988 <_fx_utility_32_unsigned_read>
                if (signature == 0x61417272)
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <_fx_media_open+0x724>)
 8005854:	4298      	cmp	r0, r3
 8005856:	d1e5      	bne.n	8005824 <_fx_media_open+0x6a0>
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 8005858:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 800585c:	f000 f894 	bl	8005988 <_fx_utility_32_unsigned_read>
 8005860:	4603      	mov	r3, r0
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8005862:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 8005866:	67e3      	str	r3, [r4, #124]	; 0x7c
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8005868:	66e3      	str	r3, [r4, #108]	; 0x6c
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800586a:	f000 f88d 	bl	8005988 <_fx_utility_32_unsigned_read>
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800586e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005870:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8005872:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8005876:	429a      	cmp	r2, r3
 8005878:	f63f ae5c 	bhi.w	8005534 <_fx_media_open+0x3b0>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800587c:	3302      	adds	r3, #2
 800587e:	4298      	cmp	r0, r3
 8005880:	f63f ae58 	bhi.w	8005534 <_fx_media_open+0x3b0>
 8005884:	2801      	cmp	r0, #1
 8005886:	f67f ae55 	bls.w	8005534 <_fx_media_open+0x3b0>
 800588a:	e7cd      	b.n	8005828 <_fx_media_open+0x6a4>
                return(FX_MEDIA_INVALID);
 800588c:	2502      	movs	r5, #2
 800588e:	e53b      	b.n	8005308 <_fx_media_open+0x184>
 8005890:	0800b4dc 	.word	0x0800b4dc
 8005894:	20002bd0 	.word	0x20002bd0
 8005898:	4d454449 	.word	0x4d454449
 800589c:	20002bc8 	.word	0x20002bc8
 80058a0:	0ffffff0 	.word	0x0ffffff0
 80058a4:	41615252 	.word	0x41615252
 80058a8:	61417272 	.word	0x61417272
 80058ac:	0fffffef 	.word	0x0fffffef

080058b0 <_fx_media_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_read(FX_MEDIA *media_ptr, ULONG logical_sector, VOID *buffer_ptr)
{
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_reads++;
 80058b2:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
{
 80058b6:	b085      	sub	sp, #20
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80058b8:	4c14      	ldr	r4, [pc, #80]	; (800590c <_fx_media_read+0x5c>)
 80058ba:	6805      	ldr	r5, [r0, #0]
    media_ptr -> fx_media_reads++;
 80058bc:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80058be:	42a5      	cmp	r5, r4
    media_ptr -> fx_media_reads++;
 80058c0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80058c4:	d003      	beq.n	80058ce <_fx_media_read+0x1e>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80058c6:	2411      	movs	r4, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return status to the caller.  */
    return(status);
}
 80058c8:	4620      	mov	r0, r4
 80058ca:	b005      	add	sp, #20
 80058cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FX_PROTECT
 80058ce:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
 80058d2:	460d      	mov	r5, r1
 80058d4:	4604      	mov	r4, r0
 80058d6:	f04f 31ff 	mov.w	r1, #4294967295
 80058da:	4638      	mov	r0, r7
 80058dc:	4616      	mov	r6, r2
 80058de:	f003 f87d 	bl	80089dc <_tx_mutex_get>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1ef      	bne.n	80058c6 <_fx_media_read+0x16>
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector, buffer_ptr, ((ULONG) 1), FX_DATA_SECTOR);
 80058e6:	f04f 0c04 	mov.w	ip, #4
 80058ea:	2101      	movs	r1, #1
 80058ec:	4603      	mov	r3, r0
 80058ee:	462a      	mov	r2, r5
 80058f0:	f8cd c008 	str.w	ip, [sp, #8]
 80058f4:	4620      	mov	r0, r4
 80058f6:	9101      	str	r1, [sp, #4]
 80058f8:	9600      	str	r6, [sp, #0]
 80058fa:	f000 fe59 	bl	80065b0 <_fx_utility_logical_sector_read>
 80058fe:	4604      	mov	r4, r0
    FX_UNPROTECT
 8005900:	4638      	mov	r0, r7
 8005902:	f003 f955 	bl	8008bb0 <_tx_mutex_put>
}
 8005906:	4620      	mov	r0, r4
 8005908:	b005      	add	sp, #20
 800590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800590c:	4d454449 	.word	0x4d454449

08005910 <_fx_media_write>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_write(FX_MEDIA *media_ptr, ULONG logical_sector, VOID *buffer_ptr)
{
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_writes++;
 8005912:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 8005916:	b085      	sub	sp, #20
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8005918:	4c18      	ldr	r4, [pc, #96]	; (800597c <_fx_media_write+0x6c>)
 800591a:	6805      	ldr	r5, [r0, #0]
    media_ptr -> fx_media_writes++;
 800591c:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800591e:	42a5      	cmp	r5, r4
    media_ptr -> fx_media_writes++;
 8005920:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8005924:	d003      	beq.n	800592e <_fx_media_write+0x1e>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8005926:	2411      	movs	r4, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return status to the caller.  */
    return(status);
}
 8005928:	4620      	mov	r0, r4
 800592a:	b005      	add	sp, #20
 800592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FX_PROTECT
 800592e:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
 8005932:	460d      	mov	r5, r1
 8005934:	4604      	mov	r4, r0
 8005936:	f04f 31ff 	mov.w	r1, #4294967295
 800593a:	4638      	mov	r0, r7
 800593c:	4616      	mov	r6, r2
 800593e:	f003 f84d 	bl	80089dc <_tx_mutex_get>
 8005942:	2800      	cmp	r0, #0
 8005944:	d1ef      	bne.n	8005926 <_fx_media_write+0x16>
    if (media_ptr -> fx_media_driver_write_protect)
 8005946:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800594a:	b98b      	cbnz	r3, 8005970 <_fx_media_write+0x60>
    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector, buffer_ptr, ((ULONG) 1), FX_DATA_SECTOR);
 800594c:	f04f 0c04 	mov.w	ip, #4
 8005950:	2101      	movs	r1, #1
 8005952:	462a      	mov	r2, r5
 8005954:	9600      	str	r6, [sp, #0]
 8005956:	f8cd c008 	str.w	ip, [sp, #8]
 800595a:	4620      	mov	r0, r4
 800595c:	9101      	str	r1, [sp, #4]
 800595e:	f000 ffd5 	bl	800690c <_fx_utility_logical_sector_write>
 8005962:	4604      	mov	r4, r0
    FX_UNPROTECT
 8005964:	4638      	mov	r0, r7
 8005966:	f003 f923 	bl	8008bb0 <_tx_mutex_put>
}
 800596a:	4620      	mov	r0, r4
 800596c:	b005      	add	sp, #20
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FX_UNPROTECT
 8005970:	4638      	mov	r0, r7
        return(FX_WRITE_PROTECT);
 8005972:	2423      	movs	r4, #35	; 0x23
        FX_UNPROTECT
 8005974:	f003 f91c 	bl	8008bb0 <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 8005978:	e7d6      	b.n	8005928 <_fx_media_write+0x18>
 800597a:	bf00      	nop
 800597c:	4d454449 	.word	0x4d454449

08005980 <_fx_utility_16_unsigned_write>:
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8005980:	0a0b      	lsrs	r3, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8005982:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8005984:	7043      	strb	r3, [r0, #1]
}
 8005986:	4770      	bx	lr

08005988 <_fx_utility_32_unsigned_read>:
{

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8005988:	7803      	ldrb	r3, [r0, #0]
 800598a:	7841      	ldrb	r1, [r0, #1]
 800598c:	7882      	ldrb	r2, [r0, #2]
 800598e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005992:	78c0      	ldrb	r0, [r0, #3]
 8005994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
              (((ULONG) *(source_ptr)) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8005998:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop

080059a0 <_fx_utility_32_unsigned_write>:
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 80059a0:	0a0a      	lsrs	r2, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 80059a2:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 80059a4:	0c0b      	lsrs	r3, r1, #16
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 80059a6:	0e09      	lsrs	r1, r1, #24
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 80059a8:	7042      	strb	r2, [r0, #1]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 80059aa:	7083      	strb	r3, [r0, #2]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 80059ac:	70c1      	strb	r1, [r0, #3]
}
 80059ae:	4770      	bx	lr

080059b0 <_fx_utility_FAT_entry_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 80059b4:	f001 0403 	and.w	r4, r1, #3
    media_ptr -> fx_media_fat_entry_reads++;
 80059b8:	f8d0 6178 	ldr.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80059bc:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
{
 80059c0:	b089      	sub	sp, #36	; 0x24
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 80059c2:	00a7      	lsls	r7, r4, #2
    media_ptr -> fx_media_fat_entry_reads++;
 80059c4:	3601      	adds	r6, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80059c6:	3301      	adds	r3, #1
    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];

    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 80059c8:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    media_ptr -> fx_media_fat_entry_reads++;
 80059cc:	f8c0 6178 	str.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80059d0:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 80059d4:	00a4      	lsls	r4, r4, #2
 80059d6:	eb00 0c04 	add.w	ip, r0, r4
 80059da:	f8dc 6758 	ldr.w	r6, [ip, #1880]	; 0x758
 80059de:	428e      	cmp	r6, r1
 80059e0:	d05f      	beq.n	8005aa2 <_fx_utility_FAT_entry_read+0xf2>
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 80059e2:	f504 64eb 	add.w	r4, r4, #1880	; 0x758
 80059e6:	4605      	mov	r5, r0
 80059e8:	f50c 6eeb 	add.w	lr, ip, #1880	; 0x758
 80059ec:	4404      	add	r4, r0
        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 80059ee:	68e6      	ldr	r6, [r4, #12]
 80059f0:	428e      	cmp	r6, r1
 80059f2:	d041      	beq.n	8005a78 <_fx_utility_FAT_entry_read+0xc8>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 80059f4:	69a6      	ldr	r6, [r4, #24]
 80059f6:	428e      	cmp	r6, r1
 80059f8:	d063      	beq.n	8005ac2 <_fx_utility_FAT_entry_read+0x112>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 80059fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059fc:	428e      	cmp	r6, r1
 80059fe:	d07b      	beq.n	8005af8 <_fx_utility_FAT_entry_read+0x148>
 8005a00:	4690      	mov	r8, r2
        return(FX_SUCCESS);
    }

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8005a02:	1cfa      	adds	r2, r7, #3
 8005a04:	460e      	mov	r6, r1
 8005a06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005a0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a0e:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d14d      	bne.n	8005ab2 <_fx_utility_FAT_entry_read+0x102>

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8005a16:	f8d5 1184 	ldr.w	r1, [r5, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8005a1a:	1e5a      	subs	r2, r3, #1
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8005a1c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8005a1e:	3101      	adds	r1, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8005a20:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
 8005a24:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8005a28:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
 8005a2c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8005a2e:	68a8      	ldr	r0, [r5, #8]
    if (media_ptr -> fx_media_12_bit_FAT)
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 809d 	bne.w	8005b70 <_fx_utility_FAT_entry_read+0x1c0>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8005a36:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	d17e      	bne.n	8005b3a <_fx_utility_FAT_entry_read+0x18a>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8005a3c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
            (ULONG)media_ptr -> fx_media_reserved_sectors;

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005a40:	460b      	mov	r3, r1
 8005a42:	9000      	str	r0, [sp, #0]
 8005a44:	2101      	movs	r1, #1
 8005a46:	2002      	movs	r0, #2
 8005a48:	9101      	str	r1, [sp, #4]
 8005a4a:	9002      	str	r0, [sp, #8]
 8005a4c:	4628      	mov	r0, r5
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005a4e:	fbba f9f9 	udiv	r9, sl, r9
 8005a52:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005a54:	464a      	mov	r2, r9
 8005a56:	f000 fdab 	bl	80065b0 <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	b9e8      	cbnz	r0, 8005a9a <_fx_utility_FAT_entry_read+0xea>
            return(status);
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8005a5e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8005a60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005a62:	eba9 0902 	sub.w	r9, r9, r2
             media_ptr -> fx_media_bytes_per_sector);

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8005a66:	68a8      	ldr	r0, [r5, #8]
        byte_offset =  byte_offset -
 8005a68:	fb03 aa19 	mls	sl, r3, r9, sl

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8005a6c:	4450      	add	r0, sl
 8005a6e:	f7fe ffcd 	bl	8004a0c <_fx_utility_16_unsigned_read>

        *entry_ptr =  entry;
 8005a72:	f8c8 0000 	str.w	r0, [r8]
 8005a76:	e0b2      	b.n	8005bde <_fx_utility_FAT_entry_read+0x22e>
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8005a78:	6921      	ldr	r1, [r4, #16]
        temp_cache_entry =        *(cache_entry_ptr);
 8005a7a:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8005a7c:	340c      	adds	r4, #12
        return(FX_SUCCESS);
 8005a7e:	2300      	movs	r3, #0
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8005a80:	6011      	str	r1, [r2, #0]
        temp_cache_entry =        *(cache_entry_ptr);
 8005a82:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005a86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8005a8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005a8e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8005a92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	b009      	add	sp, #36	; 0x24
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_SUCCESS);
 8005aa2:	2300      	movs	r3, #0
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8005aa4:	f8dc 175c 	ldr.w	r1, [ip, #1884]	; 0x75c
}
 8005aa8:	4618      	mov	r0, r3
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8005aaa:	6011      	str	r1, [r2, #0]
}
 8005aac:	b009      	add	sp, #36	; 0x24
 8005aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status = _fx_utility_FAT_flush(media_ptr);
 8005ab2:	f000 f8dd 	bl	8005c70 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d1ee      	bne.n	8005a9a <_fx_utility_FAT_entry_read+0xea>
 8005abc:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 8005ac0:	e7a9      	b.n	8005a16 <_fx_utility_FAT_entry_read+0x66>
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8005ac2:	69e3      	ldr	r3, [r4, #28]
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8005ac4:	f104 0718 	add.w	r7, r4, #24
        temp_cache_entry =        *(cache_entry_ptr);
 8005ac8:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8005aca:	340c      	adds	r4, #12
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8005acc:	6013      	str	r3, [r2, #0]
        return(FX_SUCCESS);
 8005ace:	2300      	movs	r3, #0
        temp_cache_entry =        *(cache_entry_ptr);
 8005ad0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005ad4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8005ad8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005adc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8005ae0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005ae4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8005ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	b009      	add	sp, #36	; 0x24
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8005af8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        temp_cache_entry =        *(cache_entry_ptr);
 8005afa:	ab05      	add	r3, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8005afc:	f104 0724 	add.w	r7, r4, #36	; 0x24
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8005b00:	f104 0518 	add.w	r5, r4, #24
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8005b04:	6011      	str	r1, [r2, #0]
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8005b06:	340c      	adds	r4, #12
        temp_cache_entry =        *(cache_entry_ptr);
 8005b08:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8005b10:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005b14:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8005b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b1c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8005b20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005b24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8005b28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
        return(FX_SUCCESS);
 8005b2c:	2300      	movs	r3, #0
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8005b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	b009      	add	sp, #36	; 0x24
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byte_offset =  (((ULONG)cluster) * 4);
 8005b3a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005b3e:	f04f 0c02 	mov.w	ip, #2
 8005b42:	2101      	movs	r1, #1
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005b44:	fbba fbf9 	udiv	fp, sl, r9
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005b48:	e88d 1003 	stmia.w	sp, {r0, r1, ip}
 8005b4c:	445a      	add	r2, fp
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 fd2e 	bl	80065b0 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 8005b54:	4603      	mov	r3, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d19f      	bne.n	8005a9a <_fx_utility_FAT_entry_read+0xea>
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8005b5a:	68a8      	ldr	r0, [r5, #8]
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8005b5c:	fb09 a91b 	mls	r9, r9, fp, sl
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 8005b60:	4448      	add	r0, r9
 8005b62:	f7ff ff11 	bl	8005988 <_fx_utility_32_unsigned_read>
            entry32 = entry32 & 0x0FFFFFFF;
 8005b66:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
        *entry_ptr =  entry32;
 8005b6a:	f8c8 0000 	str.w	r0, [r8]
 8005b6e:	e036      	b.n	8005bde <_fx_utility_FAT_entry_read+0x22e>
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005b70:	f04f 0b01 	mov.w	fp, #1
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005b74:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005b78:	2302      	movs	r3, #2
 8005b7a:	9000      	str	r0, [sp, #0]
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005b7c:	fa2a fa0b 	lsr.w	sl, sl, fp
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005b80:	f8cd b004 	str.w	fp, [sp, #4]
 8005b84:	9302      	str	r3, [sp, #8]
 8005b86:	4628      	mov	r0, r5
 8005b88:	2300      	movs	r3, #0
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005b8a:	fbba f9f9 	udiv	r9, sl, r9
 8005b8e:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005b90:	464a      	mov	r2, r9
 8005b92:	f000 fd0d 	bl	80065b0 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 8005b96:	4603      	mov	r3, r0
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f47f af7e 	bne.w	8005a9a <_fx_utility_FAT_entry_read+0xea>
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8005b9e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
             media_ptr -> fx_media_bytes_per_sector);
 8005ba0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8005ba2:	eba9 0202 	sub.w	r2, r9, r2
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8005ba6:	68a8      	ldr	r0, [r5, #8]
 8005ba8:	f101 3cff 	add.w	ip, r1, #4294967295
        byte_offset =  byte_offset -
 8005bac:	fb01 a212 	mls	r2, r1, r2, sl
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8005bb0:	eb00 0e02 	add.w	lr, r0, r2
 8005bb4:	f810 a002 	ldrb.w	sl, [r0, r2]
 8005bb8:	eb0e 010b 	add.w	r1, lr, fp
        if (cluster & 1)
 8005bbc:	ea16 0e0b 	ands.w	lr, r6, fp
 8005bc0:	d02c      	beq.n	8005c1c <_fx_utility_FAT_entry_read+0x26c>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8005bc2:	4562      	cmp	r2, ip
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8005bc4:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8005bc8:	d031      	beq.n	8005c2e <_fx_utility_FAT_entry_read+0x27e>
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 8005bca:	780b      	ldrb	r3, [r1, #0]
 8005bcc:	ea4a 1303 	orr.w	r3, sl, r3, lsl #4
        if (entry >= FX_MAX_12BIT_CLUST)
 8005bd0:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
            entry =  entry | FX_SIGN_EXTEND;
 8005bd4:	bf28      	it	cs
 8005bd6:	f443 4370 	orrcs.w	r3, r3, #61440	; 0xf000
        *entry_ptr =  entry;
 8005bda:	f8c8 3000 	str.w	r3, [r8]
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8005bde:	f104 0c18 	add.w	ip, r4, #24
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8005be2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8005be6:	f104 0e24 	add.w	lr, r4, #36	; 0x24
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8005bea:	340c      	adds	r4, #12
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8005bec:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    return(FX_SUCCESS);
 8005bf0:	2300      	movs	r3, #0
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8005bf2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8005bf6:	f505 67eb 	add.w	r7, r5, #1880	; 0x758
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8005bfa:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8005bfe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005c02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8005c06:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8005c0e:	f8c5 6758 	str.w	r6, [r5, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 8005c12:	f8d8 2000 	ldr.w	r2, [r8]
 8005c16:	f8c5 275c 	str.w	r2, [r5, #1884]	; 0x75c
    return(FX_SUCCESS);
 8005c1a:	e73e      	b.n	8005a9a <_fx_utility_FAT_entry_read+0xea>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8005c1c:	4562      	cmp	r2, ip
 8005c1e:	d015      	beq.n	8005c4c <_fx_utility_FAT_entry_read+0x29c>
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 8005c20:	780b      	ldrb	r3, [r1, #0]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c28:	ea43 030a 	orr.w	r3, r3, sl
 8005c2c:	e7d0      	b.n	8005bd0 <_fx_utility_FAT_entry_read+0x220>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005c2e:	2202      	movs	r2, #2
 8005c30:	e9cd 0b00 	strd	r0, fp, [sp]
 8005c34:	9202      	str	r2, [sp, #8]
 8005c36:	4628      	mov	r0, r5
 8005c38:	eb09 020b 	add.w	r2, r9, fp
 8005c3c:	f000 fcb8 	bl	80065b0 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8005c40:	4603      	mov	r3, r0
 8005c42:	2800      	cmp	r0, #0
 8005c44:	f47f af29 	bne.w	8005a9a <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8005c48:	68a9      	ldr	r1, [r5, #8]
 8005c4a:	e7be      	b.n	8005bca <_fx_utility_FAT_entry_read+0x21a>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	9000      	str	r0, [sp, #0]
 8005c50:	f109 0201 	add.w	r2, r9, #1
 8005c54:	f8cd b004 	str.w	fp, [sp, #4]
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	4673      	mov	r3, lr
 8005c5e:	f000 fca7 	bl	80065b0 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8005c62:	4603      	mov	r3, r0
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f47f af18 	bne.w	8005a9a <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8005c6a:	68a9      	ldr	r1, [r5, #8]
 8005c6c:	e7d8      	b.n	8005c20 <_fx_utility_FAT_entry_read+0x270>
 8005c6e:	bf00      	nop

08005c70 <_fx_utility_FAT_flush>:
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8005c70:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
{
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_fat_cache_flushes++;
 8005c78:	3301      	adds	r3, #1
{
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	4604      	mov	r4, r0
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8005c7e:	2700      	movs	r7, #0
 8005c80:	4606      	mov	r6, r0
    media_ptr -> fx_media_fat_cache_flushes++;
 8005c82:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8005c86:	f8d6 3760 	ldr.w	r3, [r6, #1888]	; 0x760
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d064      	beq.n	8005d58 <_fx_utility_FAT_flush+0xe8>

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8005c8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8005c90:	f8d6 2758 	ldr.w	r2, [r6, #1880]	; 0x758
 8005c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005c98:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c9a:	68a0      	ldr	r0, [r4, #8]
        if (media_ptr -> fx_media_12_bit_FAT)
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d163      	bne.n	8005d68 <_fx_utility_FAT_flush+0xf8>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8005ca0:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8005ca4:	f1be 0f00 	cmp.w	lr, #0
 8005ca8:	f040 8124 	bne.w	8005ef4 <_fx_utility_FAT_flush+0x284>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8005cac:	0055      	lsls	r5, r2, #1
            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
                (ULONG)media_ptr -> fx_media_reserved_sectors;

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005cae:	9000      	str	r0, [sp, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2002      	movs	r0, #2
 8005cb4:	4673      	mov	r3, lr
 8005cb6:	9002      	str	r0, [sp, #8]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	9201      	str	r2, [sp, #4]
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005cbc:	fbb5 f5fc 	udiv	r5, r5, ip
 8005cc0:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005cc2:	462a      	mov	r2, r5
 8005cc4:	f000 fc74 	bl	80065b0 <_fx_utility_logical_sector_read>
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d14a      	bne.n	8005d62 <_fx_utility_FAT_flush+0xf2>
 8005ccc:	68a0      	ldr	r0, [r4, #8]
 8005cce:	46b0      	mov	r8, r6
 8005cd0:	46b9      	mov	r9, r7
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8005cd2:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8005cd6:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8005cda:	b1b3      	cbz	r3, 8005d0a <_fx_utility_FAT_flush+0x9a>

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8005cdc:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005ce0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 2);
 8005ce4:	005b      	lsls	r3, r3, #1
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8005ce6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005ce8:	fbb3 f2fc 	udiv	r2, r3, ip
 8005cec:	440a      	add	r2, r1

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8005cee:	4295      	cmp	r5, r2
 8005cf0:	d10b      	bne.n	8005d0a <_fx_utility_FAT_flush+0x9a>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8005cf2:	1a6a      	subs	r2, r5, r1

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8005cf4:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 8005cf8:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8005cfc:	4418      	add	r0, r3
 8005cfe:	f7ff fe3f 	bl	8005980 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	68a0      	ldr	r0, [r4, #8]
 8005d06:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8005d0a:	f1b9 0f10 	cmp.w	r9, #16
 8005d0e:	f108 080c 	add.w	r8, r8, #12
 8005d12:	d1de      	bne.n	8005cd2 <_fx_utility_FAT_flush+0x62>
                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8005d14:	2302      	movs	r3, #2
 8005d16:	2101      	movs	r1, #1
 8005d18:	9000      	str	r0, [sp, #0]
 8005d1a:	462a      	mov	r2, r5
 8005d1c:	9302      	str	r3, [sp, #8]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	2300      	movs	r3, #0
 8005d22:	9101      	str	r1, [sp, #4]
 8005d24:	f000 fdf2 	bl	800690c <_fx_utility_logical_sector_write>
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8005d28:	b9d8      	cbnz	r0, 8005d62 <_fx_utility_FAT_flush+0xf2>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8005d2a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005d2c:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8005d30:	f3c2 2287 	ubfx	r2, r2, #10, #8
 8005d34:	b10b      	cbz	r3, 8005d3a <_fx_utility_FAT_flush+0xca>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8005d36:	3201      	adds	r2, #1
 8005d38:	b2d2      	uxtb	r2, r2
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8005d3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005d3c:	2301      	movs	r3, #1
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8005d3e:	1a6d      	subs	r5, r5, r1
 8005d40:	fbb5 f5f2 	udiv	r5, r5, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005d44:	eb04 02d5 	add.w	r2, r4, r5, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005d48:	40ab      	lsls	r3, r5
 8005d4a:	f892 1818 	ldrb.w	r1, [r2, #2072]	; 0x818
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	430b      	orrs	r3, r1
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005d54:	f882 3818 	strb.w	r3, [r2, #2072]	; 0x818
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8005d58:	3701      	adds	r7, #1
 8005d5a:	360c      	adds	r6, #12
 8005d5c:	2f10      	cmp	r7, #16
 8005d5e:	d192      	bne.n	8005c86 <_fx_utility_FAT_flush+0x16>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8005d60:	2000      	movs	r0, #0
}
 8005d62:	b005      	add	sp, #20
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005d68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            multi_sector_entry = -1;
 8005d6c:	f04f 38ff 	mov.w	r8, #4294967295
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005d70:	0855      	lsrs	r5, r2, #1
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005d72:	fbb5 f5fc 	udiv	r5, r5, ip
 8005d76:	440d      	add	r5, r1
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005d78:	2301      	movs	r3, #1
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	9000      	str	r0, [sp, #0]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	9202      	str	r2, [sp, #8]
 8005d82:	462a      	mov	r2, r5
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	2300      	movs	r3, #0
 8005d88:	f000 fc12 	bl	80065b0 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d1e8      	bne.n	8005d62 <_fx_utility_FAT_flush+0xf2>
                if (multi_sector_entry != -1)
 8005d90:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d94:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005d98:	d00f      	beq.n	8005dba <_fx_utility_FAT_flush+0x14a>
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8005d9a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8005d9e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
                    if (cluster & 1)
 8005da2:	f8d8 2758 	ldr.w	r2, [r8, #1880]	; 0x758
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8005da6:	f8d8 375c 	ldr.w	r3, [r8, #1884]	; 0x75c
                    if (cluster & 1)
 8005daa:	07d2      	lsls	r2, r2, #31
 8005dac:	f140 808a 	bpl.w	8005ec4 <_fx_utility_FAT_flush+0x254>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	f88e 3000 	strb.w	r3, [lr]
 8005db6:	f8d4 e008 	ldr.w	lr, [r4, #8]
            multi_sector_entry = -1;
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f04f 38ff 	mov.w	r8, #4294967295
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8005dc2:	f8d1 3760 	ldr.w	r3, [r1, #1888]	; 0x760
 8005dc6:	b38b      	cbz	r3, 8005e2c <_fx_utility_FAT_flush+0x1bc>
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8005dc8:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005dcc:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005dd0:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8005dd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005dd6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005dda:	fbbc f9fa 	udiv	r9, ip, sl
 8005dde:	4499      	add	r9, r3
                    if (sector != FAT_sector)
 8005de0:	454d      	cmp	r5, r9
 8005de2:	d123      	bne.n	8005e2c <_fx_utility_FAT_flush+0x1bc>
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8005de4:	1aeb      	subs	r3, r5, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8005de6:	f10a 3bff 	add.w	fp, sl, #4294967295
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8005dea:	f8d1 975c 	ldr.w	r9, [r1, #1884]	; 0x75c
 8005dee:	f002 0201 	and.w	r2, r2, #1
                    byte_offset =  byte_offset -
 8005df2:	fb0a c313 	mls	r3, sl, r3, ip
 8005df6:	fa5f fc89 	uxtb.w	ip, r9
 8005dfa:	449e      	add	lr, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8005dfc:	459b      	cmp	fp, r3
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	f8c1 3760 	str.w	r3, [r1, #1888]	; 0x760
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8005e06:	d056      	beq.n	8005eb6 <_fx_utility_FAT_flush+0x246>
                    if (cluster & 1)
 8005e08:	2a00      	cmp	r2, #0
 8005e0a:	d043      	beq.n	8005e94 <_fx_utility_FAT_flush+0x224>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8005e0c:	f89e 3000 	ldrb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8005e10:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8005e1a:	f88e 3000 	strb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8005e1e:	d047      	beq.n	8005eb0 <_fx_utility_FAT_flush+0x240>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8005e20:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8005e24:	f88e 9001 	strb.w	r9, [lr, #1]
 8005e28:	f8d4 e008 	ldr.w	lr, [r4, #8]
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	310c      	adds	r1, #12
 8005e30:	2810      	cmp	r0, #16
 8005e32:	d1c6      	bne.n	8005dc2 <_fx_utility_FAT_flush+0x152>
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8005e34:	2301      	movs	r3, #1
 8005e36:	2202      	movs	r2, #2
 8005e38:	f8cd e000 	str.w	lr, [sp]
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	9202      	str	r2, [sp, #8]
 8005e40:	462a      	mov	r2, r5
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	2300      	movs	r3, #0
 8005e46:	f000 fd61 	bl	800690c <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d189      	bne.n	8005d62 <_fx_utility_FAT_flush+0xf2>
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8005e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e54:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8005e58:	b10a      	cbz	r2, 8005e5e <_fx_utility_FAT_flush+0x1ee>
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
                if (sectors_per_bit == 0)
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d07d      	beq.n	8005f5e <_fx_utility_FAT_flush+0x2ee>
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8005e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005e64:	2201      	movs	r2, #1
                if (multi_sector_entry != -1)
 8005e66:	f1b8 3fff 	cmp.w	r8, #4294967295
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8005e6a:	eba5 0101 	sub.w	r1, r5, r1
 8005e6e:	fbb1 f3f3 	udiv	r3, r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005e72:	eb04 01d3 	add.w	r1, r4, r3, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	f891 2818 	ldrb.w	r2, [r1, #2072]	; 0x818
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	ea43 0302 	orr.w	r3, r3, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005e86:	f881 3818 	strb.w	r3, [r1, #2072]	; 0x818
                if (multi_sector_entry != -1)
 8005e8a:	f43f af65 	beq.w	8005d58 <_fx_utility_FAT_flush+0xe8>
                    FAT_sector++;
 8005e8e:	3501      	adds	r5, #1
 8005e90:	68a0      	ldr	r0, [r4, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005e92:	e771      	b.n	8005d78 <_fx_utility_FAT_flush+0x108>
                        if ((multi_sector_entry) == (INT)i)
 8005e94:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8005e96:	f88e c000 	strb.w	ip, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8005e9a:	d00f      	beq.n	8005ebc <_fx_utility_FAT_flush+0x24c>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8005e9c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8005ea0:	f3c9 2903 	ubfx	r9, r9, #8, #4
 8005ea4:	f023 030f 	bic.w	r3, r3, #15
 8005ea8:	ea49 0903 	orr.w	r9, r9, r3
 8005eac:	f88e 9001 	strb.w	r9, [lr, #1]
 8005eb0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005eb4:	e7ba      	b.n	8005e2c <_fx_utility_FAT_flush+0x1bc>
                    if (cluster & 1)
 8005eb6:	b98a      	cbnz	r2, 8005edc <_fx_utility_FAT_flush+0x26c>
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8005eb8:	f88e c000 	strb.w	ip, [lr]
 8005ebc:	f8d4 e008 	ldr.w	lr, [r4, #8]
                        if ((multi_sector_entry) == (INT)i)
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	e7b3      	b.n	8005e2c <_fx_utility_FAT_flush+0x1bc>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8005ec4:	f89e 2000 	ldrb.w	r2, [lr]
 8005ec8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005ecc:	f022 020f 	bic.w	r2, r2, #15
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f88e 3000 	strb.w	r3, [lr]
 8005ed6:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005eda:	e76e      	b.n	8005dba <_fx_utility_FAT_flush+0x14a>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8005edc:	f89e 3000 	ldrb.w	r3, [lr]
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8005eea:	f88e 3000 	strb.w	r3, [lr]
 8005eee:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005ef2:	e79b      	b.n	8005e2c <_fx_utility_FAT_flush+0x1bc>
            byte_offset =  (((ULONG)cluster) * 4);
 8005ef4:	0092      	lsls	r2, r2, #2
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005ef6:	2501      	movs	r5, #1
 8005ef8:	9000      	str	r0, [sp, #0]
 8005efa:	2002      	movs	r0, #2
 8005efc:	9501      	str	r5, [sp, #4]
 8005efe:	9002      	str	r0, [sp, #8]
 8005f00:	4620      	mov	r0, r4
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005f02:	fbb2 f5fc 	udiv	r5, r2, ip
 8005f06:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005f08:	462a      	mov	r2, r5
 8005f0a:	f000 fb51 	bl	80065b0 <_fx_utility_logical_sector_read>
            if (status != FX_SUCCESS)
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f47f af27 	bne.w	8005d62 <_fx_utility_FAT_flush+0xf2>
 8005f14:	68a0      	ldr	r0, [r4, #8]
 8005f16:	46b0      	mov	r8, r6
 8005f18:	46b9      	mov	r9, r7
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8005f1a:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8005f1e:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8005f22:	b1b3      	cbz	r3, 8005f52 <_fx_utility_FAT_flush+0x2e2>
                byte_offset =  (((ULONG)cluster) * 4);
 8005f24:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005f28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 4);
 8005f2c:	009b      	lsls	r3, r3, #2
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8005f2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005f30:	fbb3 f2fc 	udiv	r2, r3, ip
 8005f34:	440a      	add	r2, r1
                if (sector != FAT_sector)
 8005f36:	4295      	cmp	r5, r2
 8005f38:	d10b      	bne.n	8005f52 <_fx_utility_FAT_flush+0x2e2>
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8005f3a:	1a6a      	subs	r2, r5, r1
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8005f3c:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 8005f40:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8005f44:	4418      	add	r0, r3
 8005f46:	f7ff fd2b 	bl	80059a0 <_fx_utility_32_unsigned_write>
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	68a0      	ldr	r0, [r4, #8]
 8005f4e:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8005f52:	f1b9 0f10 	cmp.w	r9, #16
 8005f56:	f108 080c 	add.w	r8, r8, #12
 8005f5a:	d1de      	bne.n	8005f1a <_fx_utility_FAT_flush+0x2aa>
 8005f5c:	e6da      	b.n	8005d14 <_fx_utility_FAT_flush+0xa4>
                    return(FX_MEDIA_INVALID);
 8005f5e:	2002      	movs	r0, #2
}
 8005f60:	b005      	add	sp, #20
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	bf00      	nop

08005f68 <_fx_utility_logical_sector_flush>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b08b      	sub	sp, #44	; 0x2c
 8005f6e:	461e      	mov	r6, r3
 8005f70:	4615      	mov	r5, r2
 8005f72:	4681      	mov	r9, r0
 8005f74:	2000      	movs	r0, #0
 8005f76:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8005f7a:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
 8005f7e:	4601      	mov	r1, r0
 8005f80:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
{
 8005f84:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8005f88:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005f8c:	f144 34ff 	adc.w	r4, r4, #4294967295
 8005f90:	18ef      	adds	r7, r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8005f92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f96:	eb56 0804 	adcs.w	r8, r6, r4
 8005f9a:	bf28      	it	cs
 8005f9c:	2001      	movcs	r0, #1
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8005fa4:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8005fa8:	9007      	str	r0, [sp, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 8097 	bne.w	80060de <_fx_utility_logical_sector_flush+0x176>
        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8005fb0:	f8d9 401c 	ldr.w	r4, [r9, #28]

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8005fb4:	1e45      	subs	r5, r0, #1
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f000 808d 	beq.w	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 8005fbc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005fc0:	ea52 0103 	orrs.w	r1, r2, r3
 8005fc4:	f000 8087 	beq.w	80060d6 <_fx_utility_logical_sector_flush+0x16e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8005fc8:	ea5a 010b 	orrs.w	r1, sl, fp
 8005fcc:	f000 8083 	beq.w	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 8005fd0:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
 8005fd4:	4301      	orrs	r1, r0
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2601      	moveq	r6, #1
 8005fda:	2600      	movne	r6, #0
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	d17a      	bne.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
                /* Determine if the invalidate option is specified.  */
                if (invalidate)
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005fe0:	9600      	str	r6, [sp, #0]
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	461f      	mov	r7, r3
 8005fe8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8005fec:	e00f      	b.n	800600e <_fx_utility_logical_sector_flush+0xa6>
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8005fee:	3d01      	subs	r5, #1
                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8005ff0:	6964      	ldr	r4, [r4, #20]
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8005ff2:	1c6e      	adds	r6, r5, #1
 8005ff4:	d06f      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 8005ff6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005ffa:	461f      	mov	r7, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	4616      	mov	r6, r2
 8006000:	d069      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
            if (sectors == 0)
 8006002:	ea5a 030b 	orrs.w	r3, sl, fp
 8006006:	d066      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 8006008:	ea58 0309 	orrs.w	r3, r8, r9
 800600c:	d063      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
            if ((cache_entry -> fx_cached_sector_valid) &&
 800600e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006012:	429f      	cmp	r7, r3
 8006014:	bf08      	it	eq
 8006016:	4296      	cmpeq	r6, r2
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8006018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
            if ((cache_entry -> fx_cached_sector_valid) &&
 800601c:	bf2c      	ite	cs
 800601e:	2001      	movcs	r0, #1
 8006020:	2000      	movcc	r0, #0
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8006022:	42bb      	cmp	r3, r7
 8006024:	f000 0001 	and.w	r0, r0, #1
 8006028:	bf08      	it	eq
 800602a:	42b2      	cmpeq	r2, r6
 800602c:	bf38      	it	cc
 800602e:	2000      	movcc	r0, #0
 8006030:	2800      	cmp	r0, #0
 8006032:	d0dc      	beq.n	8005fee <_fx_utility_logical_sector_flush+0x86>
            if ((cache_entry -> fx_cached_sector_valid) &&
 8006034:	7c60      	ldrb	r0, [r4, #17]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8006036:	2800      	cmp	r0, #0
 8006038:	d0d9      	beq.n	8005fee <_fx_utility_logical_sector_flush+0x86>
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 800603a:	7c20      	ldrb	r0, [r4, #16]
 800603c:	b370      	cbz	r0, 800609c <_fx_utility_logical_sector_flush+0x134>
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 800603e:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
 8006042:	bb58      	cbnz	r0, 800609c <_fx_utility_logical_sector_flush+0x134>
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8006044:	2201      	movs	r2, #1
                        media_ptr -> fx_media_driver_write_requests++;
 8006046:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800604a:	2090      	movs	r0, #144	; 0x90
                        media_ptr -> fx_media_driver_write_requests++;
 800604c:	4413      	add	r3, r2
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800604e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006052:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8006056:	6820      	ldr	r0, [r4, #0]
                        media_ptr -> fx_media_driver_write_requests++;
 8006058:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800605c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8006060:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
                        media_ptr -> fx_media_driver_sectors =          1;
 8006064:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8006068:	7ca3      	ldrb	r3, [r4, #18]
 800606a:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800606e:	7ca3      	ldrb	r3, [r4, #18]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d001      	beq.n	8006078 <_fx_utility_logical_sector_flush+0x110>
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8006074:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006078:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 800607c:	4608      	mov	r0, r1
 800607e:	9106      	str	r1, [sp, #24]
 8006080:	4798      	blx	r3
                        if (media_ptr -> fx_media_driver_status)
 8006082:	9906      	ldr	r1, [sp, #24]
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006084:	9b00      	ldr	r3, [sp, #0]
                        if (media_ptr -> fx_media_driver_status)
 8006086:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800608a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
                        if (media_ptr -> fx_media_driver_status)
 800608e:	bb18      	cbnz	r0, 80060d8 <_fx_utility_logical_sector_flush+0x170>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8006090:	7420      	strb	r0, [r4, #16]
                        remaining_dirty--;
 8006092:	f10a 3aff 	add.w	sl, sl, #4294967295
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8006096:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006098:	3b01      	subs	r3, #1
 800609a:	624b      	str	r3, [r1, #36]	; 0x24
                if (invalidate)
 800609c:	f1bb 0f00 	cmp.w	fp, #0
 80060a0:	d010      	beq.n	80060c4 <_fx_utility_logical_sector_flush+0x15c>
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80060a2:	9b00      	ldr	r3, [sp, #0]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 80060a8:	7c20      	ldrb	r0, [r4, #16]
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80060aa:	7463      	strb	r3, [r4, #17]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 80060b4:	b130      	cbz	r0, 80060c4 <_fx_utility_logical_sector_flush+0x15c>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80060b6:	9b00      	ldr	r3, [sp, #0]
                        remaining_dirty--;
 80060b8:	f10a 3aff 	add.w	sl, sl, #4294967295
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80060bc:	7423      	strb	r3, [r4, #16]
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80060be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80060c0:	3b01      	subs	r3, #1
 80060c2:	624b      	str	r3, [r1, #36]	; 0x24
                sectors--;
 80060c4:	f118 38ff 	adds.w	r8, r8, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80060c8:	f105 35ff 	add.w	r5, r5, #4294967295
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80060cc:	6964      	ldr	r4, [r4, #20]
                sectors--;
 80060ce:	f149 39ff 	adc.w	r9, r9, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80060d2:	1c6e      	adds	r6, r5, #1
 80060d4:	d18f      	bne.n	8005ff6 <_fx_utility_logical_sector_flush+0x8e>
            }
        }
    }

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 80060d6:	2000      	movs	r0, #0
}
 80060d8:	b00b      	add	sp, #44	; 0x2c
 80060da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 80060de:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80060e2:	9309      	str	r3, [sp, #36]	; 0x24
        while (valid_bit_map)
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0f6      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80060e8:	fabb f38b 	clz	r3, fp
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	9306      	str	r3, [sp, #24]
 80060f0:	ea5a 030b 	orrs.w	r3, sl, fp
 80060f4:	d0ef      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 80060f6:	e9dd 3014 	ldrd	r3, r0, [sp, #80]	; 0x50
 80060fa:	4303      	orrs	r3, r0
 80060fc:	d0eb      	beq.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 80060fe:	ea52 0301 	orrs.w	r3, r2, r1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e4      	bne.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 800610c:	9308      	str	r3, [sp, #32]
            if (use_starting_sector)
 800610e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
            if ((sectors == 0) || (starting_sector > ending_sector))
 8006112:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
            if (use_starting_sector)
 8006116:	2c00      	cmp	r4, #0
 8006118:	bf08      	it	eq
 800611a:	2b20      	cmpeq	r3, #32
 800611c:	f080 80b4 	bcs.w	8006288 <_fx_utility_logical_sector_flush+0x320>
                bit_set =  (index % 32);
 8006120:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8006124:	9a02      	ldr	r2, [sp, #8]
 8006126:	f859 3003 	ldr.w	r3, [r9, r3]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	4013      	ands	r3, r2
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8006130:	009e      	lsls	r6, r3, #2
                bit_set =  (index % 32);
 8006132:	9308      	str	r3, [sp, #32]
 8006134:	eb06 0446 	add.w	r4, r6, r6, lsl #1
            remaining_valid =  0;
 8006138:	2500      	movs	r5, #0
 800613a:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 800613e:	f504 644a 	add.w	r4, r4, #3232	; 0xca0
 8006142:	e9cd 7800 	strd	r7, r8, [sp]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8006146:	7c63      	ldrb	r3, [r4, #17]
 8006148:	b183      	cbz	r3, 800616c <_fx_utility_logical_sector_flush+0x204>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800614a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800614e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006152:	4607      	mov	r7, r0
 8006154:	4299      	cmp	r1, r3
 8006156:	bf08      	it	eq
 8006158:	4290      	cmpeq	r0, r2
 800615a:	d306      	bcc.n	800616a <_fx_utility_logical_sector_flush+0x202>
 800615c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006160:	428b      	cmp	r3, r1
 8006162:	bf08      	it	eq
 8006164:	4282      	cmpeq	r2, r0
 8006166:	f080 809f 	bcs.w	80062a8 <_fx_utility_logical_sector_flush+0x340>
                            remaining_valid++;
 800616a:	3501      	adds	r5, #1
 800616c:	ea4b 030a 	orr.w	r3, fp, sl
 8006170:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8096 	beq.w	80062a4 <_fx_utility_logical_sector_flush+0x33c>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8006178:	e9dd 2000 	ldrd	r2, r0, [sp]
 800617c:	4310      	orrs	r0, r2
 800617e:	d103      	bne.n	8006188 <_fx_utility_logical_sector_flush+0x220>
 8006180:	9a06      	ldr	r2, [sp, #24]
 8006182:	2a00      	cmp	r2, #0
 8006184:	f040 81a6 	bne.w	80064d4 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8006188:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800618c:	b17b      	cbz	r3, 80061ae <_fx_utility_logical_sector_flush+0x246>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800618e:	e9d4 7808 	ldrd	r7, r8, [r4, #32]
 8006192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006196:	4598      	cmp	r8, r3
 8006198:	bf08      	it	eq
 800619a:	4297      	cmpeq	r7, r2
 800619c:	d306      	bcc.n	80061ac <_fx_utility_logical_sector_flush+0x244>
 800619e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a2:	4543      	cmp	r3, r8
 80061a4:	bf08      	it	eq
 80061a6:	42ba      	cmpeq	r2, r7
 80061a8:	f080 80d0 	bcs.w	800634c <_fx_utility_logical_sector_flush+0x3e4>
                            remaining_valid++;
 80061ac:	3501      	adds	r5, #1
 80061ae:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80061b0:	b918      	cbnz	r0, 80061ba <_fx_utility_logical_sector_flush+0x252>
 80061b2:	9a06      	ldr	r2, [sp, #24]
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	f040 818d 	bne.w	80064d4 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80061ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80061be:	b17b      	cbz	r3, 80061e0 <_fx_utility_logical_sector_flush+0x278>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80061c0:	e9d4 780e 	ldrd	r7, r8, [r4, #56]	; 0x38
 80061c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c8:	4598      	cmp	r8, r3
 80061ca:	bf08      	it	eq
 80061cc:	4297      	cmpeq	r7, r2
 80061ce:	d306      	bcc.n	80061de <_fx_utility_logical_sector_flush+0x276>
 80061d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d4:	4543      	cmp	r3, r8
 80061d6:	bf08      	it	eq
 80061d8:	42ba      	cmpeq	r2, r7
 80061da:	f080 8119 	bcs.w	8006410 <_fx_utility_logical_sector_flush+0x4a8>
                            remaining_valid++;
 80061de:	3501      	adds	r5, #1
 80061e0:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80061e2:	b918      	cbnz	r0, 80061ec <_fx_utility_logical_sector_flush+0x284>
 80061e4:	9a06      	ldr	r2, [sp, #24]
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	f040 8174 	bne.w	80064d4 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80061ec:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80061f0:	b17b      	cbz	r3, 8006212 <_fx_utility_logical_sector_flush+0x2aa>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80061f2:	e9d4 7814 	ldrd	r7, r8, [r4, #80]	; 0x50
 80061f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061fa:	4598      	cmp	r8, r3
 80061fc:	bf08      	it	eq
 80061fe:	4297      	cmpeq	r7, r2
 8006200:	d306      	bcc.n	8006210 <_fx_utility_logical_sector_flush+0x2a8>
 8006202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006206:	4543      	cmp	r3, r8
 8006208:	bf08      	it	eq
 800620a:	42ba      	cmpeq	r2, r7
 800620c:	f080 8167 	bcs.w	80064de <_fx_utility_logical_sector_flush+0x576>
                            remaining_valid++;
 8006210:	3501      	adds	r5, #1
 8006212:	460b      	mov	r3, r1
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8006214:	3680      	adds	r6, #128	; 0x80
            } while (index < cache_size);
 8006216:	9a07      	ldr	r2, [sp, #28]
 8006218:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800621c:	4296      	cmp	r6, r2
 800621e:	d392      	bcc.n	8006146 <_fx_utility_logical_sector_flush+0x1de>
 8006220:	e9dd 7800 	ldrd	r7, r8, [sp]
            if ((invalidate) && (remaining_valid == 0))
 8006224:	f1bb 0f00 	cmp.w	fp, #0
 8006228:	d009      	beq.n	800623e <_fx_utility_logical_sector_flush+0x2d6>
 800622a:	b945      	cbnz	r5, 800623e <_fx_utility_logical_sector_flush+0x2d6>
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 800622c:	2101      	movs	r1, #1
 800622e:	9808      	ldr	r0, [sp, #32]
 8006230:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8006234:	4081      	lsls	r1, r0
 8006236:	ea22 0201 	bic.w	r2, r2, r1
 800623a:	f8c9 2020 	str.w	r2, [r9, #32]
            if (use_starting_sector)
 800623e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006242:	2a00      	cmp	r2, #0
 8006244:	bf08      	it	eq
 8006246:	2920      	cmpeq	r1, #32
 8006248:	f080 81a6 	bcs.w	8006598 <_fx_utility_logical_sector_flush+0x630>
                starting_sector++;
 800624c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006250:	3101      	adds	r1, #1
 8006252:	f142 0200 	adc.w	r2, r2, #0
 8006256:	e9cd 1202 	strd	r1, r2, [sp, #8]
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800625a:	2b00      	cmp	r3, #0
 800625c:	f43f af3b 	beq.w	80060d6 <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 8006260:	ea57 0308 	orrs.w	r3, r7, r8
 8006264:	f43f af37 	beq.w	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 8006268:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800626c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006270:	4294      	cmp	r4, r2
 8006272:	bf08      	it	eq
 8006274:	428b      	cmpeq	r3, r1
 8006276:	f4ff af2e 	bcc.w	80060d6 <_fx_utility_logical_sector_flush+0x16e>
            if (use_starting_sector)
 800627a:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 800627e:	2c00      	cmp	r4, #0
 8006280:	bf08      	it	eq
 8006282:	2b20      	cmpeq	r3, #32
 8006284:	f4ff af4c 	bcc.w	8006120 <_fx_utility_logical_sector_flush+0x1b8>
                while ((valid_bit_map & 1) == 0)
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	07d8      	lsls	r0, r3, #31
 800628c:	f100 818d 	bmi.w	80065aa <_fx_utility_logical_sector_flush+0x642>
 8006290:	9a08      	ldr	r2, [sp, #32]
                    valid_bit_map =  valid_bit_map >> 1;
 8006292:	085b      	lsrs	r3, r3, #1
                    bit_set++;
 8006294:	3201      	adds	r2, #1
                while ((valid_bit_map & 1) == 0)
 8006296:	07d9      	lsls	r1, r3, #31
 8006298:	d5fb      	bpl.n	8006292 <_fx_utility_logical_sector_flush+0x32a>
 800629a:	9309      	str	r3, [sp, #36]	; 0x24
 800629c:	4613      	mov	r3, r2
 800629e:	9208      	str	r2, [sp, #32]
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80062a0:	009e      	lsls	r6, r3, #2
 80062a2:	e747      	b.n	8006134 <_fx_utility_logical_sector_flush+0x1cc>
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80062a4:	469a      	mov	sl, r3
 80062a6:	e7b5      	b.n	8006214 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80062a8:	7c21      	ldrb	r1, [r4, #16]
 80062aa:	b389      	cbz	r1, 8006310 <_fx_utility_logical_sector_flush+0x3a8>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80062ac:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 80062b0:	bb71      	cbnz	r1, 8006310 <_fx_utility_logical_sector_flush+0x3a8>
                                media_ptr -> fx_media_driver_write_requests++;
 80062b2:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80062b6:	f04f 0801 	mov.w	r8, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80062ba:	6821      	ldr	r1, [r4, #0]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80062bc:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80062be:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80062c0:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80062c4:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80062c8:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 80062cc:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80062ce:	e9c9 8222 	strd	r8, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 80062d2:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80062d6:	7ca3      	ldrb	r3, [r4, #18]
 80062d8:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80062dc:	7ca3      	ldrb	r3, [r4, #18]
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d002      	beq.n	80062e8 <_fx_utility_logical_sector_flush+0x380>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80062e8:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 80062ec:	4648      	mov	r0, r9
 80062ee:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80062f0:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 80062f2:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80062f6:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f47f aeec 	bne.w	80060d8 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8006300:	7420      	strb	r0, [r4, #16]
                                remaining_dirty--;
 8006302:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8006306:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800630a:	3b01      	subs	r3, #1
 800630c:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8006310:	f1bb 0f00 	cmp.w	fp, #0
 8006314:	d011      	beq.n	800633a <_fx_utility_logical_sector_flush+0x3d2>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8006316:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8006320:	7c22      	ldrb	r2, [r4, #16]
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8006322:	7463      	strb	r3, [r4, #17]
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8006324:	e9c4 0102 	strd	r0, r1, [r4, #8]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8006328:	b13a      	cbz	r2, 800633a <_fx_utility_logical_sector_flush+0x3d2>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800632a:	7423      	strb	r3, [r4, #16]
                                remaining_dirty--;
 800632c:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8006330:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006334:	3b01      	subs	r3, #1
 8006336:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 800633a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800633e:	f112 32ff 	adds.w	r2, r2, #4294967295
 8006342:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006346:	e9cd 2300 	strd	r2, r3, [sp]
 800634a:	e70f      	b.n	800616c <_fx_utility_logical_sector_flush+0x204>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 800634c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8006350:	b3a1      	cbz	r1, 80063bc <_fx_utility_logical_sector_flush+0x454>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8006352:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8006356:	bb89      	cbnz	r1, 80063bc <_fx_utility_logical_sector_flush+0x454>
                                media_ptr -> fx_media_driver_write_requests++;
 8006358:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800635c:	f04f 0e01 	mov.w	lr, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8006360:	69a1      	ldr	r1, [r4, #24]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006362:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8006364:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8006366:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800636a:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 800636e:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8006372:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006374:	e9c9 e222 	strd	lr, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8006378:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800637c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006380:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8006384:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006388:	2b04      	cmp	r3, #4
 800638a:	d002      	beq.n	8006392 <_fx_utility_logical_sector_flush+0x42a>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006392:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8006396:	4648      	mov	r0, r9
 8006398:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800639a:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 800639c:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80063a0:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f47f ae97 	bne.w	80060d8 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80063aa:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
                                remaining_dirty--;
 80063ae:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80063b2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80063b6:	3b01      	subs	r3, #1
 80063b8:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 80063bc:	f1bb 0f00 	cmp.w	fp, #0
 80063c0:	d014      	beq.n	80063ec <_fx_utility_logical_sector_flush+0x484>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80063c2:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80063cc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80063d0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80063d4:	e9c4 0108 	strd	r0, r1, [r4, #32]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80063d8:	b142      	cbz	r2, 80063ec <_fx_utility_logical_sector_flush+0x484>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80063da:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                                remaining_dirty--;
 80063de:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80063e2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 80063ec:	ea4b 030a 	orr.w	r3, fp, sl
                        sectors--;
 80063f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063f4:	f111 31ff 	adds.w	r1, r1, #4294967295
 80063f8:	f142 32ff 	adc.w	r2, r2, #4294967295
 80063fc:	e9cd 1200 	strd	r1, r2, [sp]
 8006400:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8006402:	2b00      	cmp	r3, #0
 8006404:	f43f af4e 	beq.w	80062a4 <_fx_utility_logical_sector_flush+0x33c>
 8006408:	e9dd 2000 	ldrd	r2, r0, [sp]
 800640c:	4310      	orrs	r0, r2
 800640e:	e6cf      	b.n	80061b0 <_fx_utility_logical_sector_flush+0x248>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8006410:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006414:	b3a1      	cbz	r1, 8006480 <_fx_utility_logical_sector_flush+0x518>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8006416:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 800641a:	bb89      	cbnz	r1, 8006480 <_fx_utility_logical_sector_flush+0x518>
                                media_ptr -> fx_media_driver_write_requests++;
 800641c:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006420:	f04f 0c01 	mov.w	ip, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8006424:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006426:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8006428:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800642a:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800642e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8006432:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8006436:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006438:	e9c9 c222 	strd	ip, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 800643c:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8006440:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006444:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8006448:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800644c:	2b04      	cmp	r3, #4
 800644e:	d002      	beq.n	8006456 <_fx_utility_logical_sector_flush+0x4ee>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006456:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 800645a:	4648      	mov	r0, r9
 800645c:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800645e:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8006460:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006464:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8006468:	2800      	cmp	r0, #0
 800646a:	f47f ae35 	bne.w	80060d8 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800646e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
                                remaining_dirty--;
 8006472:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8006476:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800647a:	3b01      	subs	r3, #1
 800647c:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8006480:	f1bb 0f00 	cmp.w	fp, #0
 8006484:	d014      	beq.n	80064b0 <_fx_utility_logical_sector_flush+0x548>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8006486:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8006490:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8006494:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8006498:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 800649c:	b142      	cbz	r2, 80064b0 <_fx_utility_logical_sector_flush+0x548>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800649e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                                remaining_dirty--;
 80064a2:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80064a6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80064aa:	3b01      	subs	r3, #1
 80064ac:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 80064b0:	ea4a 030b 	orr.w	r3, sl, fp
                        sectors--;
 80064b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064b8:	f111 31ff 	adds.w	r1, r1, #4294967295
 80064bc:	f142 32ff 	adc.w	r2, r2, #4294967295
 80064c0:	e9cd 1200 	strd	r1, r2, [sp]
 80064c4:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f43f aeec 	beq.w	80062a4 <_fx_utility_logical_sector_flush+0x33c>
 80064cc:	e9dd 2000 	ldrd	r2, r0, [sp]
 80064d0:	4310      	orrs	r0, r2
 80064d2:	e686      	b.n	80061e2 <_fx_utility_logical_sector_flush+0x27a>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80064d4:	2100      	movs	r1, #0
 80064d6:	2200      	movs	r2, #0
 80064d8:	e9cd 1200 	strd	r1, r2, [sp]
 80064dc:	e69a      	b.n	8006214 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80064de:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80064e2:	b399      	cbz	r1, 800654c <_fx_utility_logical_sector_flush+0x5e4>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80064e4:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 80064e8:	bb81      	cbnz	r1, 800654c <_fx_utility_logical_sector_flush+0x5e4>
                                media_ptr -> fx_media_driver_write_requests++;
 80064ea:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80064ee:	2001      	movs	r0, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80064f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80064f2:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80064f4:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80064f6:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80064fa:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80064fe:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8006502:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006504:	e9c9 0222 	strd	r0, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8006508:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800650c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8006510:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8006514:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8006518:	2b04      	cmp	r3, #4
 800651a:	d002      	beq.n	8006522 <_fx_utility_logical_sector_flush+0x5ba>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006522:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8006526:	4648      	mov	r0, r9
 8006528:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800652a:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 800652c:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006530:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8006534:	2800      	cmp	r0, #0
 8006536:	f47f adcf 	bne.w	80060d8 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800653a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
                                remaining_dirty--;
 800653e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8006542:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006546:	3b01      	subs	r3, #1
 8006548:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 800654c:	f1bb 0f00 	cmp.w	fp, #0
 8006550:	d014      	beq.n	800657c <_fx_utility_logical_sector_flush+0x614>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8006552:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 800655c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8006560:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8006564:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8006568:	b142      	cbz	r2, 800657c <_fx_utility_logical_sector_flush+0x614>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800656a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                                remaining_dirty--;
 800656e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8006572:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006576:	3b01      	subs	r3, #1
 8006578:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 800657c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006580:	f112 32ff 	adds.w	r2, r2, #4294967295
 8006584:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006588:	e9cd 2300 	strd	r2, r3, [sp]
 800658c:	ea5a 030b 	orrs.w	r3, sl, fp
 8006590:	bf08      	it	eq
 8006592:	f04f 0a00 	moveq.w	sl, #0
 8006596:	e63d      	b.n	8006214 <_fx_utility_logical_sector_flush+0x2ac>
                bit_set++;
 8006598:	9a08      	ldr	r2, [sp, #32]
 800659a:	3201      	adds	r2, #1
 800659c:	9208      	str	r2, [sp, #32]
        while (valid_bit_map)
 800659e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a0:	0852      	lsrs	r2, r2, #1
 80065a2:	9209      	str	r2, [sp, #36]	; 0x24
 80065a4:	f47f ae59 	bne.w	800625a <_fx_utility_logical_sector_flush+0x2f2>
 80065a8:	e595      	b.n	80060d6 <_fx_utility_logical_sector_flush+0x16e>
 80065aa:	9b08      	ldr	r3, [sp, #32]
 80065ac:	e678      	b.n	80062a0 <_fx_utility_logical_sector_flush+0x338>
 80065ae:	bf00      	nop

080065b0 <_fx_utility_logical_sector_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	b08b      	sub	sp, #44	; 0x2c
 80065b6:	4604      	mov	r4, r0
 80065b8:	4616      	mov	r6, r2
 80065ba:	461f      	mov	r7, r3
 80065bc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 80065c0:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80065c4:	2902      	cmp	r1, #2
{
 80065c6:	9106      	str	r1, [sp, #24]
 80065c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    if (sector_type == FX_FAT_SECTOR)
 80065ca:	d104      	bne.n	80065d6 <_fx_utility_logical_sector_read+0x26>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 80065cc:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 80065d0:	3301      	adds	r3, #1
 80065d2:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 80065d6:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80065da:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_reads++;
 80065dc:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80065de:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_reads++;
 80065e0:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80065e4:	d803      	bhi.n	80065ee <_fx_utility_logical_sector_read+0x3e>
 80065e6:	69a3      	ldr	r3, [r4, #24]
 80065e8:	4553      	cmp	r3, sl
 80065ea:	f080 80fa 	bcs.w	80067e2 <_fx_utility_logical_sector_read+0x232>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 80065ee:	eb16 0805 	adds.w	r8, r6, r5
 80065f2:	f147 0900 	adc.w	r9, r7, #0
 80065f6:	f118 30ff 	adds.w	r0, r8, #4294967295
 80065fa:	f149 31ff 	adc.w	r1, r9, #4294967295
 80065fe:	f04f 0900 	mov.w	r9, #0
 8006602:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8006606:	4589      	cmp	r9, r1
 8006608:	bf08      	it	eq
 800660a:	4282      	cmpeq	r2, r0
 800660c:	f0c0 80e5 	bcc.w	80067da <_fx_utility_logical_sector_read+0x22a>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
 8006610:	2d00      	cmp	r5, #0
 8006612:	f000 80de 	beq.w	80067d2 <_fx_utility_logical_sector_read+0x222>
 8006616:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800661a:	e00b      	b.n	8006634 <_fx_utility_logical_sector_read+0x84>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 800661c:	3601      	adds	r6, #1
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 800661e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006620:	68a0      	ldr	r0, [r4, #8]
            logical_sector++;
 8006622:	f147 0700 	adc.w	r7, r7, #0
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8006626:	f7fe f9f7 	bl	8004a18 <_fx_utility_memory_copy>
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 800662a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        while (sectors)
 800662c:	3d01      	subs	r5, #1
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 800662e:	449a      	add	sl, r3
        while (sectors)
 8006630:	f000 80cf 	beq.w	80067d2 <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8006634:	f8cd b000 	str.w	fp, [sp]
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	4620      	mov	r0, r4
 800663e:	f000 faab 	bl	8006b98 <_fx_utility_logical_sector_cache_entry_read>
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8006642:	4651      	mov	r1, sl
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8006644:	2800      	cmp	r0, #0
 8006646:	d0e9      	beq.n	800661c <_fx_utility_logical_sector_read+0x6c>
            sectors--;
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8006648:	f116 38ff 	adds.w	r8, r6, #4294967295
 800664c:	f147 39ff 	adc.w	r9, r7, #4294967295
 8006650:	eb18 0205 	adds.w	r2, r8, r5
 8006654:	f149 0300 	adc.w	r3, r9, #0
 8006658:	4690      	mov	r8, r2
 800665a:	4699      	mov	r9, r3
 800665c:	e009      	b.n	8006672 <_fx_utility_logical_sector_read+0xc2>
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 800665e:	3d01      	subs	r5, #1
 8006660:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
 8006662:	68a0      	ldr	r0, [r4, #8]
 8006664:	fb02 a105 	mla	r1, r2, r5, sl
 8006668:	f7fe f9d6 	bl	8004a18 <_fx_utility_memory_copy>
        while (sectors)
 800666c:	2d00      	cmp	r5, #0
 800666e:	f000 80b0 	beq.w	80067d2 <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8006672:	4642      	mov	r2, r8
                                    media_ptr -> fx_media_bytes_per_sector);

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8006674:	f118 38ff 	adds.w	r8, r8, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8006678:	464b      	mov	r3, r9
 800667a:	f8cd b000 	str.w	fp, [sp]
 800667e:	4620      	mov	r0, r4
            end_sector--;
 8006680:	f149 39ff 	adc.w	r9, r9, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8006684:	f000 fa88 	bl	8006b98 <_fx_utility_logical_sector_cache_entry_read>
 8006688:	2800      	cmp	r0, #0
 800668a:	d0e8      	beq.n	800665e <_fx_utility_logical_sector_read+0xae>
            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 800668c:	f04f 0901 	mov.w	r9, #1
 8006690:	f04f 0800 	mov.w	r8, #0
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	9500      	str	r5, [sp, #0]
 800669a:	4620      	mov	r0, r4
 800669c:	f8cd 9008 	str.w	r9, [sp, #8]
 80066a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80066a4:	f7ff fc60 	bl	8005f68 <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80066a8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80066ac:	9906      	ldr	r1, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80066ae:	2290      	movs	r2, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 80066b0:	444b      	add	r3, r9
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80066b2:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 80066b6:	2904      	cmp	r1, #4
        media_ptr -> fx_media_driver_sectors =          sectors;
 80066b8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80066bc:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_read_requests++;
 80066c0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80066c4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80066c8:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90
        if (sector_type == FX_DATA_SECTOR)
 80066cc:	f000 80fc 	beq.w	80068c8 <_fx_utility_logical_sector_read+0x318>

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80066d0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80066d4:	4620      	mov	r0, r4
 80066d6:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80066d8:	2300      	movs	r3, #0

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 80066da:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80066de:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d176      	bne.n	80067d4 <_fx_utility_logical_sector_read+0x224>
 80066e6:	6963      	ldr	r3, [r4, #20]
 80066e8:	ebb5 0f93 	cmp.w	r5, r3, lsr #2
 80066ec:	d272      	bcs.n	80067d4 <_fx_utility_logical_sector_read+0x224>
 80066ee:	f116 0801 	adds.w	r8, r6, #1
 80066f2:	f105 31ff 	add.w	r1, r5, #4294967295

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80066f6:	9007      	str	r0, [sp, #28]
 80066f8:	f147 0900 	adc.w	r9, r7, #0
 80066fc:	eb18 0201 	adds.w	r2, r8, r1
 8006700:	f149 0300 	adc.w	r3, r9, #0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006704:	46d1      	mov	r9, sl
 8006706:	46a2      	mov	sl, r4
 8006708:	e9cd 2304 	strd	r2, r3, [sp, #16]
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 800670c:	f8cd b000 	str.w	fp, [sp]
 8006710:	4632      	mov	r2, r6
 8006712:	463b      	mov	r3, r7
 8006714:	4650      	mov	r0, sl
 8006716:	f000 fa3f 	bl	8006b98 <_fx_utility_logical_sector_cache_entry_read>
                if (cache_entry == FX_NULL)
 800671a:	4604      	mov	r4, r0
 800671c:	2800      	cmp	r0, #0
 800671e:	d058      	beq.n	80067d2 <_fx_utility_logical_sector_read+0x222>
                if ((cache_entry -> fx_cached_sector_valid) &&
 8006720:	7c42      	ldrb	r2, [r0, #17]
 8006722:	6803      	ldr	r3, [r0, #0]
 8006724:	b372      	cbz	r2, 8006784 <_fx_utility_logical_sector_read+0x1d4>
 8006726:	7c22      	ldrb	r2, [r4, #16]
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006728:	4650      	mov	r0, sl
                if ((cache_entry -> fx_cached_sector_valid) &&
 800672a:	b35a      	cbz	r2, 8006784 <_fx_utility_logical_sector_read+0x1d4>
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800672c:	2101      	movs	r1, #1
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800672e:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
                    media_ptr -> fx_media_driver_write_requests++;
 8006732:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8006736:	68a3      	ldr	r3, [r4, #8]
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8006738:	f8ca 1088 	str.w	r1, [sl, #136]	; 0x88
                    media_ptr -> fx_media_driver_write_requests++;
 800673c:	440a      	add	r2, r1
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800673e:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006742:	2190      	movs	r1, #144	; 0x90
                    media_ptr -> fx_media_driver_sectors =          1;
 8006744:	2301      	movs	r3, #1
                    media_ptr -> fx_media_driver_write_requests++;
 8006746:	f8ca 21b0 	str.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800674a:	f8ca 108c 	str.w	r1, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_sectors =          1;
 800674e:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8006752:	7ca3      	ldrb	r3, [r4, #18]
 8006754:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8006758:	7ca3      	ldrb	r3, [r4, #18]
 800675a:	2b04      	cmp	r3, #4
 800675c:	d002      	beq.n	8006764 <_fx_utility_logical_sector_read+0x1b4>
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800675e:	2301      	movs	r3, #1
 8006760:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006764:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 8006768:	4798      	blx	r3
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800676a:	9b07      	ldr	r3, [sp, #28]

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 800676c:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006770:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    if (media_ptr -> fx_media_driver_status)
 8006774:	bb70      	cbnz	r0, 80067d4 <_fx_utility_logical_sector_read+0x224>
                        return(media_ptr -> fx_media_driver_status);
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8006776:	7420      	strb	r0, [r4, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8006778:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	3a01      	subs	r2, #1
 8006780:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8006784:	f04f 0501 	mov.w	r5, #1

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8006788:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        media_ptr -> fx_media_sector_cache_list_ptr;
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr,
 800678a:	4648      	mov	r0, r9
 800678c:	4619      	mov	r1, r3
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800678e:	7465      	strb	r5, [r4, #17]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8006790:	9d06      	ldr	r5, [sp, #24]
                cache_entry -> fx_cached_sector =  logical_sector;
 8006792:	e9c4 6702 	strd	r6, r7, [r4, #8]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8006796:	74a5      	strb	r5, [r4, #18]
                if (previous_cache_entry)
 8006798:	2a00      	cmp	r2, #0
 800679a:	f000 8098 	beq.w	80068ce <_fx_utility_logical_sector_read+0x31e>
                    cache_entry -> fx_cached_sector_next_used =
 800679e:	f8da 301c 	ldr.w	r3, [sl, #28]

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 80067a2:	3601      	adds	r6, #1
                    previous_cache_entry -> fx_cached_sector_next_used =
 80067a4:	6965      	ldr	r5, [r4, #20]
                logical_sector++;
 80067a6:	f147 0700 	adc.w	r7, r7, #0
                    previous_cache_entry -> fx_cached_sector_next_used =
 80067aa:	6155      	str	r5, [r2, #20]
                _fx_utility_memory_copy(buffer_ptr,
 80067ac:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                    cache_entry -> fx_cached_sector_next_used =
 80067b0:	6163      	str	r3, [r4, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 80067b2:	f8ca 401c 	str.w	r4, [sl, #28]
                _fx_utility_memory_copy(buffer_ptr,
 80067b6:	f7fe f92f 	bl	8004a18 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80067ba:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80067be:	4499      	add	r9, r3
            while (sectors)
 80067c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80067c4:	42a7      	cmp	r7, r4
 80067c6:	bf08      	it	eq
 80067c8:	429e      	cmpeq	r6, r3
 80067ca:	d19f      	bne.n	800670c <_fx_utility_logical_sector_read+0x15c>
 80067cc:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80067d0:	e000      	b.n	80067d4 <_fx_utility_logical_sector_read+0x224>
            return(FX_SUCCESS);
 80067d2:	2000      	movs	r0, #0
    }
}
 80067d4:	b00b      	add	sp, #44	; 0x2c
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 80067da:	2089      	movs	r0, #137	; 0x89
}
 80067dc:	b00b      	add	sp, #44	; 0x2c
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 80067e2:	a909      	add	r1, sp, #36	; 0x24
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	4620      	mov	r0, r4
 80067ea:	9100      	str	r1, [sp, #0]
 80067ec:	f000 f9d4 	bl	8006b98 <_fx_utility_logical_sector_cache_entry_read>
        if (cache_entry == FX_NULL)
 80067f0:	4605      	mov	r5, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0ed      	beq.n	80067d2 <_fx_utility_logical_sector_read+0x222>
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 80067f6:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 80067fa:	3301      	adds	r3, #1
 80067fc:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
        if ((cache_entry -> fx_cached_sector_valid) &&
 8006800:	7c43      	ldrb	r3, [r0, #17]
 8006802:	b35b      	cbz	r3, 800685c <_fx_utility_logical_sector_read+0x2ac>
 8006804:	7c03      	ldrb	r3, [r0, #16]
 8006806:	b34b      	cbz	r3, 800685c <_fx_utility_logical_sector_read+0x2ac>
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8006808:	2101      	movs	r1, #1
            media_ptr -> fx_media_driver_write_requests++;
 800680a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800680e:	6802      	ldr	r2, [r0, #0]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006810:	2090      	movs	r0, #144	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 8006812:	440b      	add	r3, r1
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8006814:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8006818:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 800681c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8006820:	68ab      	ldr	r3, [r5, #8]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006822:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006826:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sectors =          1;
 8006828:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800682c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8006830:	7cab      	ldrb	r3, [r5, #18]
 8006832:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8006836:	7cab      	ldrb	r3, [r5, #18]
 8006838:	2b04      	cmp	r3, #4
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800683a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800683e:	bf18      	it	ne
 8006840:	f8c4 10b0 	strne.w	r1, [r4, #176]	; 0xb0
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006844:	4798      	blx	r3
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006846:	2300      	movs	r3, #0
            if (media_ptr -> fx_media_driver_status)
 8006848:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800684c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
            if (media_ptr -> fx_media_driver_status)
 8006850:	2800      	cmp	r0, #0
 8006852:	d1bf      	bne.n	80067d4 <_fx_utility_logical_sector_read+0x224>
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8006854:	7428      	strb	r0, [r5, #16]
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8006856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006858:	3b01      	subs	r3, #1
 800685a:	6263      	str	r3, [r4, #36]	; 0x24
        if (logical_sector >= (ULONG)media_ptr -> fx_media_total_sectors)
 800685c:	2100      	movs	r1, #0
 800685e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8006862:	428f      	cmp	r7, r1
 8006864:	bf08      	it	eq
 8006866:	4296      	cmpeq	r6, r2
 8006868:	d2b7      	bcs.n	80067da <_fx_utility_logical_sector_read+0x22a>
        media_ptr -> fx_media_driver_read_requests++;
 800686a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800686e:	2100      	movs	r1, #0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006870:	2290      	movs	r2, #144	; 0x90
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006872:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_read_requests++;
 8006874:	3301      	adds	r3, #1
 8006876:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	e9c4 3624 	strd	r3, r6, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8006880:	9b06      	ldr	r3, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006882:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
        if (sector_type == FX_DATA_SECTOR)
 8006886:	2b04      	cmp	r3, #4
        media_ptr -> fx_media_driver_sectors =          1;
 8006888:	f04f 0201 	mov.w	r2, #1
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800688c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_sectors =          1;
 8006890:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8006894:	bf08      	it	eq
 8006896:	f8c4 20b4 	streq.w	r2, [r4, #180]	; 0xb4
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800689a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800689e:	4798      	blx	r3
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80068a0:	2300      	movs	r3, #0
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 80068a2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80068a6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 80068aa:	bb12      	cbnz	r2, 80068f2 <_fx_utility_logical_sector_read+0x342>
            cache_entry -> fx_cached_sector_type =  sector_type;
 80068ac:	9b06      	ldr	r3, [sp, #24]
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 80068ae:	2201      	movs	r2, #1
            cache_entry -> fx_cached_sector_type =  sector_type;
 80068b0:	74ab      	strb	r3, [r5, #18]
            if (previous_cache_entry)
 80068b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 80068b4:	746a      	strb	r2, [r5, #17]
            cache_entry -> fx_cached_sector =  logical_sector;
 80068b6:	e9c5 6702 	strd	r6, r7, [r5, #8]
            if (previous_cache_entry)
 80068ba:	b30b      	cbz	r3, 8006900 <_fx_utility_logical_sector_read+0x350>
                    cache_entry -> fx_cached_sector_next_used;
 80068bc:	6969      	ldr	r1, [r5, #20]
                cache_entry -> fx_cached_sector_next_used =
 80068be:	69e2      	ldr	r2, [r4, #28]
                previous_cache_entry -> fx_cached_sector_next_used =
 80068c0:	6159      	str	r1, [r3, #20]
                cache_entry -> fx_cached_sector_next_used =
 80068c2:	616a      	str	r2, [r5, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 80068c4:	61e5      	str	r5, [r4, #28]
 80068c6:	e01b      	b.n	8006900 <_fx_utility_logical_sector_read+0x350>
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80068c8:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
 80068cc:	e700      	b.n	80066d0 <_fx_utility_logical_sector_read+0x120>
                logical_sector++;
 80068ce:	3601      	adds	r6, #1
                _fx_utility_memory_copy(buffer_ptr,
 80068d0:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                logical_sector++;
 80068d4:	f147 0700 	adc.w	r7, r7, #0
                _fx_utility_memory_copy(buffer_ptr,
 80068d8:	f7fe f89e 	bl	8004a18 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80068dc:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80068e0:	4499      	add	r9, r3
            while (sectors)
 80068e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80068e6:	42bc      	cmp	r4, r7
 80068e8:	bf08      	it	eq
 80068ea:	42b3      	cmpeq	r3, r6
 80068ec:	f47f af0e 	bne.w	800670c <_fx_utility_logical_sector_read+0x15c>
 80068f0:	e76c      	b.n	80067cc <_fx_utility_logical_sector_read+0x21c>
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	f04f 31ff 	mov.w	r1, #4294967295
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80068fa:	746b      	strb	r3, [r5, #17]
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80068fc:	e9c5 0102 	strd	r0, r1, [r5, #8]
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8006900:	682b      	ldr	r3, [r5, #0]
        return(media_ptr -> fx_media_driver_status);
 8006902:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8006906:	60a3      	str	r3, [r4, #8]
        return(media_ptr -> fx_media_driver_status);
 8006908:	e764      	b.n	80067d4 <_fx_utility_logical_sector_read+0x224>
 800690a:	bf00      	nop

0800690c <_fx_utility_logical_sector_write>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	b085      	sub	sp, #20
 8006912:	4604      	mov	r4, r0
 8006914:	4616      	mov	r6, r2
 8006916:	461f      	mov	r7, r3
 8006918:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800691c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8006920:	2d02      	cmp	r5, #2
 8006922:	d104      	bne.n	800692e <_fx_utility_logical_sector_write+0x22>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8006924:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 8006928:	3301      	adds	r3, #1
 800692a:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 800692e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8006932:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_writes++;
 8006934:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8006936:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_writes++;
 8006938:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800693c:	d802      	bhi.n	8006944 <_fx_utility_logical_sector_write+0x38>
 800693e:	69a3      	ldr	r3, [r4, #24]
 8006940:	4553      	cmp	r3, sl
 8006942:	d24b      	bcs.n	80069dc <_fx_utility_logical_sector_write+0xd0>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8006944:	ea56 0307 	orrs.w	r3, r6, r7
 8006948:	d044      	beq.n	80069d4 <_fx_utility_logical_sector_write+0xc8>
 800694a:	2f00      	cmp	r7, #0
 800694c:	bf08      	it	eq
 800694e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8006952:	d03f      	beq.n	80069d4 <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 8006954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006956:	f04f 0900 	mov.w	r9, #0
 800695a:	2100      	movs	r1, #0
 800695c:	4698      	mov	r8, r3
 800695e:	eb18 0b06 	adds.w	fp, r8, r6
 8006962:	eb49 0c07 	adc.w	ip, r9, r7
 8006966:	f11b 30ff 	adds.w	r0, fp, #4294967295
 800696a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800696e:	460b      	mov	r3, r1
 8006970:	f14c 31ff 	adc.w	r1, ip, #4294967295
 8006974:	4299      	cmp	r1, r3
 8006976:	bf08      	it	eq
 8006978:	4290      	cmpeq	r0, r2
 800697a:	d22b      	bcs.n	80069d4 <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 800697c:	f04f 0b01 	mov.w	fp, #1
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	4620      	mov	r0, r4
 8006986:	f8cd b008 	str.w	fp, [sp, #8]
 800698a:	e9cd 8900 	strd	r8, r9, [sp]
 800698e:	f7ff faeb 	bl	8005f68 <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8006992:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006996:	2290      	movs	r2, #144	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8006998:	990f      	ldr	r1, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 800699a:	445b      	add	r3, fp
        media_ptr -> fx_media_driver_sector_type =      sector_type;

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 800699c:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800699e:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
        media_ptr -> fx_media_driver_sectors =          sectors;
 80069a2:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80069a6:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 80069aa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80069ae:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80069b2:	bf18      	it	ne
 80069b4:	f8c4 b0b0 	strne.w	fp, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80069b8:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80069bc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80069c0:	4620      	mov	r0, r4
 80069c2:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80069c4:	2300      	movs	r3, #0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80069c6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80069ca:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    }
}
 80069ce:	b005      	add	sp, #20
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 80069d4:	2089      	movs	r0, #137	; 0x89
}
 80069d6:	b005      	add	sp, #20
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_sector_cache_hashed)
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d062      	beq.n	8006aa8 <_fx_utility_logical_sector_write+0x19c>
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 80069e2:	f242 43a0 	movw	r3, #9376	; 0x24a0
 80069e6:	58e1      	ldr	r1, [r4, r3]
 80069e8:	4031      	ands	r1, r6
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80069ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80069ee:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80069f2:	f501 614a 	add.w	r1, r1, #3232	; 0xca0
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80069f6:	7c4b      	ldrb	r3, [r1, #17]
 80069f8:	b12b      	cbz	r3, 8006a06 <_fx_utility_logical_sector_write+0xfa>
 80069fa:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80069fe:	429f      	cmp	r7, r3
 8006a00:	bf08      	it	eq
 8006a02:	4296      	cmpeq	r6, r2
 8006a04:	d063      	beq.n	8006ace <_fx_utility_logical_sector_write+0x1c2>
 8006a06:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8006a0a:	f101 0018 	add.w	r0, r1, #24
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006a0e:	b12b      	cbz	r3, 8006a1c <_fx_utility_logical_sector_write+0x110>
 8006a10:	e9d1 2308 	ldrd	r2, r3, [r1, #32]
 8006a14:	429f      	cmp	r7, r3
 8006a16:	bf08      	it	eq
 8006a18:	4296      	cmpeq	r6, r2
 8006a1a:	d062      	beq.n	8006ae2 <_fx_utility_logical_sector_write+0x1d6>
 8006a1c:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8006a20:	f101 0030 	add.w	r0, r1, #48	; 0x30
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006a24:	b12b      	cbz	r3, 8006a32 <_fx_utility_logical_sector_write+0x126>
 8006a26:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8006a2a:	429f      	cmp	r7, r3
 8006a2c:	bf08      	it	eq
 8006a2e:	4296      	cmpeq	r6, r2
 8006a30:	d057      	beq.n	8006ae2 <_fx_utility_logical_sector_write+0x1d6>
 8006a32:	f891 3059 	ldrb.w	r3, [r1, #89]	; 0x59
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8006a36:	f101 0248 	add.w	r2, r1, #72	; 0x48
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006a3a:	b12b      	cbz	r3, 8006a48 <_fx_utility_logical_sector_write+0x13c>
 8006a3c:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8006a40:	42b9      	cmp	r1, r7
 8006a42:	bf08      	it	eq
 8006a44:	42b0      	cmpeq	r0, r6
 8006a46:	d041      	beq.n	8006acc <_fx_utility_logical_sector_write+0x1c0>
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8006a48:	ea56 0307 	orrs.w	r3, r6, r7
 8006a4c:	d0c2      	beq.n	80069d4 <_fx_utility_logical_sector_write+0xc8>
 8006a4e:	2f00      	cmp	r7, #0
 8006a50:	bf08      	it	eq
 8006a52:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8006a56:	d0bd      	beq.n	80069d4 <_fx_utility_logical_sector_write+0xc8>
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 8006a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a5a:	eb16 0803 	adds.w	r8, r6, r3
 8006a5e:	f147 0900 	adc.w	r9, r7, #0
 8006a62:	f118 30ff 	adds.w	r0, r8, #4294967295
 8006a66:	f149 31ff 	adc.w	r1, r9, #4294967295
 8006a6a:	f04f 0900 	mov.w	r9, #0
 8006a6e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8006a72:	4549      	cmp	r1, r9
 8006a74:	bf08      	it	eq
 8006a76:	4290      	cmpeq	r0, r2
 8006a78:	d2ac      	bcs.n	80069d4 <_fx_utility_logical_sector_write+0xc8>
        media_ptr -> fx_media_driver_write_requests++;
 8006a7a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8006a7e:	2201      	movs	r2, #1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006a80:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          sectors;
 8006a82:	980f      	ldr	r0, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 8006a84:	4413      	add	r3, r2
        if (sector_type != FX_DATA_SECTOR)
 8006a86:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8006a88:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8006a8c:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          sectors;
 8006a90:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8006a94:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8006a98:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006a9c:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
        if (sector_type != FX_DATA_SECTOR)
 8006aa0:	d08c      	beq.n	80069bc <_fx_utility_logical_sector_write+0xb0>
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8006aa2:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8006aa6:	e789      	b.n	80069bc <_fx_utility_logical_sector_write+0xb0>
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8006aa8:	6960      	ldr	r0, [r4, #20]
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8006aaa:	69e1      	ldr	r1, [r4, #28]
            while (cache_size--)
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d0cb      	beq.n	8006a48 <_fx_utility_logical_sector_write+0x13c>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006ab0:	7c4b      	ldrb	r3, [r1, #17]
 8006ab2:	3801      	subs	r0, #1
 8006ab4:	b12b      	cbz	r3, 8006ac2 <_fx_utility_logical_sector_write+0x1b6>
 8006ab6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8006aba:	42bb      	cmp	r3, r7
 8006abc:	bf08      	it	eq
 8006abe:	42b2      	cmpeq	r2, r6
 8006ac0:	d005      	beq.n	8006ace <_fx_utility_logical_sector_write+0x1c2>
                if (cache_entry -> fx_cached_sector_next_used)
 8006ac2:	694b      	ldr	r3, [r1, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf18      	it	ne
 8006ac8:	4619      	movne	r1, r3
 8006aca:	e7ef      	b.n	8006aac <_fx_utility_logical_sector_write+0x1a0>
 8006acc:	4611      	mov	r1, r2
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 8006ace:	7c08      	ldrb	r0, [r1, #16]
 8006ad0:	b108      	cbz	r0, 8006ad6 <_fx_utility_logical_sector_write+0x1ca>
            return(FX_SUCCESS);
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e77f      	b.n	80069d6 <_fx_utility_logical_sector_write+0xca>
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8006ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8006ad8:	2201      	movs	r2, #1
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8006ada:	4413      	add	r3, r2
 8006adc:	6263      	str	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8006ade:	740a      	strb	r2, [r1, #16]
 8006ae0:	e779      	b.n	80069d6 <_fx_utility_logical_sector_write+0xca>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	e7f3      	b.n	8006ace <_fx_utility_logical_sector_write+0x1c2>
 8006ae6:	bf00      	nop

08006ae8 <_fx_media_boot_info_extract>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8006ae8:	b538      	push	{r3, r4, r5, lr}

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 8006aea:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
{
 8006aee:	4604      	mov	r4, r0

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 8006af0:	f105 000b 	add.w	r0, r5, #11
 8006af4:	f7fd ff8a 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006af8:	62a0      	str	r0, [r4, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 8006afa:	b388      	cbz	r0, 8006b60 <_fx_media_boot_info_extract+0x78>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8006afc:	f105 0018 	add.w	r0, r5, #24
 8006b00:	f7fd ff84 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006b04:	62e0      	str	r0, [r4, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 8006b06:	f105 001a 	add.w	r0, r5, #26
 8006b0a:	f7fd ff7f 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006b0e:	6320      	str	r0, [r4, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8006b10:	f105 0013 	add.w	r0, r5, #19
 8006b14:	f7fd ff7a 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006b18:	2100      	movs	r1, #0
        if (media_ptr -> fx_media_total_sectors == 0)
 8006b1a:	ea50 0301 	orrs.w	r3, r0, r1
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8006b1e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8006b22:	d013      	beq.n	8006b4c <_fx_media_boot_info_extract+0x64>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 8006b24:	f105 000e 	add.w	r0, r5, #14
 8006b28:	f7fd ff70 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006b2c:	6460      	str	r0, [r4, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 8006b2e:	b1b8      	cbz	r0, 8006b60 <_fx_media_boot_info_extract+0x78>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 8006b30:	7b6b      	ldrb	r3, [r5, #13]
 8006b32:	6563      	str	r3, [r4, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 8006b34:	b1a3      	cbz	r3, 8006b60 <_fx_media_boot_info_extract+0x78>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 8006b36:	f105 0016 	add.w	r0, r5, #22
 8006b3a:	f7fd ff67 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006b3e:	65a0      	str	r0, [r4, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8006b40:	b310      	cbz	r0, 8006b88 <_fx_media_boot_info_extract+0xa0>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8006b42:	7c2b      	ldrb	r3, [r5, #16]
 8006b44:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8006b46:	b973      	cbnz	r3, 8006b66 <_fx_media_boot_info_extract+0x7e>
        {
            return(FX_BOOT_ERROR);
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e00a      	b.n	8006b62 <_fx_media_boot_info_extract+0x7a>
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8006b4c:	f105 0020 	add.w	r0, r5, #32
 8006b50:	f7fe ff1a 	bl	8005988 <_fx_utility_32_unsigned_read>
 8006b54:	2100      	movs	r1, #0
        if (media_ptr -> fx_media_total_sectors == 0)
 8006b56:	ea50 0301 	orrs.w	r3, r0, r1
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8006b5a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8006b5e:	d1e1      	bne.n	8006b24 <_fx_media_boot_info_extract+0x3c>
        return(FX_MEDIA_INVALID);
 8006b60:	2302      	movs	r3, #2
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	bd38      	pop	{r3, r4, r5, pc}
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 8006b66:	f105 001c 	add.w	r0, r5, #28
 8006b6a:	f7fe ff0d 	bl	8005988 <_fx_utility_32_unsigned_read>
 8006b6e:	6720      	str	r0, [r4, #112]	; 0x70
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 8006b70:	f105 0011 	add.w	r0, r5, #17
 8006b74:	f7fd ff4a 	bl	8004a0c <_fx_utility_16_unsigned_read>
 8006b78:	67a0      	str	r0, [r4, #120]	; 0x78
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8006b7a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8006b7e:	f7fe ff03 	bl	8005988 <_fx_utility_32_unsigned_read>
    return(FX_SUCCESS);
 8006b82:	2300      	movs	r3, #0
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8006b84:	6760      	str	r0, [r4, #116]	; 0x74
    return(FX_SUCCESS);
 8006b86:	e7ec      	b.n	8006b62 <_fx_media_boot_info_extract+0x7a>
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 8006b88:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006b8c:	f7fe fefc 	bl	8005988 <_fx_utility_32_unsigned_read>
 8006b90:	65a0      	str	r0, [r4, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d0e4      	beq.n	8006b60 <_fx_media_boot_info_extract+0x78>
 8006b96:	e7d4      	b.n	8006b42 <_fx_media_boot_info_extract+0x5a>

08006b98 <_fx_utility_logical_sector_cache_entry_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8006b9c:	6904      	ldr	r4, [r0, #16]
{
 8006b9e:	4616      	mov	r6, r2
 8006ba0:	461f      	mov	r7, r3
 8006ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (media_ptr -> fx_media_sector_cache_hashed)
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	f000 808d 	beq.w	8006cc4 <_fx_utility_logical_sector_cache_entry_read+0x12c>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8006baa:	f242 43a0 	movw	r3, #9376	; 0x24a0

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8006bae:	2501      	movs	r5, #1
 8006bb0:	6a04      	ldr	r4, [r0, #32]
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8006bb2:	58c3      	ldr	r3, [r0, r3]
 8006bb4:	4033      	ands	r3, r6

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8006bb6:	0099      	lsls	r1, r3, #2
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8006bb8:	f003 0c1f 	and.w	ip, r3, #31

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8006bbc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8006bc0:	fa05 f50c 	lsl.w	r5, r5, ip
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8006bc4:	00db      	lsls	r3, r3, #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8006bc6:	432c      	orrs	r4, r5

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006bc8:	eb00 0e03 	add.w	lr, r0, r3
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8006bcc:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8006bd0:	6204      	str	r4, [r0, #32]
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006bd2:	f89e ccb1 	ldrb.w	ip, [lr, #3249]	; 0xcb1
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8006bd6:	4403      	add	r3, r0
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006bd8:	f1bc 0f00 	cmp.w	ip, #0
 8006bdc:	f040 8086 	bne.w	8006cec <_fx_utility_logical_sector_cache_entry_read+0x154>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8006be0:	f893 e029 	ldrb.w	lr, [r3, #41]	; 0x29
 8006be4:	f1be 0f00 	cmp.w	lr, #0
 8006be8:	d006      	beq.n	8006bf8 <_fx_utility_logical_sector_cache_entry_read+0x60>
 8006bea:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006bee:	42bd      	cmp	r5, r7
 8006bf0:	bf08      	it	eq
 8006bf2:	42b4      	cmpeq	r4, r6
 8006bf4:	f000 80f5 	beq.w	8006de2 <_fx_utility_logical_sector_cache_entry_read+0x24a>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8006bf8:	f893 9041 	ldrb.w	r9, [r3, #65]	; 0x41
 8006bfc:	f1b9 0f00 	cmp.w	r9, #0
 8006c00:	d006      	beq.n	8006c10 <_fx_utility_logical_sector_cache_entry_read+0x78>
 8006c02:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006c06:	42bd      	cmp	r5, r7
 8006c08:	bf08      	it	eq
 8006c0a:	42b4      	cmpeq	r4, r6
 8006c0c:	f000 811c 	beq.w	8006e48 <_fx_utility_logical_sector_cache_entry_read+0x2b0>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8006c10:	f893 a059 	ldrb.w	sl, [r3, #89]	; 0x59
 8006c14:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8006c18:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8006c1c:	f1ba 0f00 	cmp.w	sl, #0
 8006c20:	d004      	beq.n	8006c2c <_fx_utility_logical_sector_cache_entry_read+0x94>
 8006c22:	42af      	cmp	r7, r5
 8006c24:	bf08      	it	eq
 8006c26:	42a6      	cmpeq	r6, r4
 8006c28:	f000 8085 	beq.w	8006d36 <_fx_utility_logical_sector_cache_entry_read+0x19e>
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8006c2c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006c30:	6b1e      	ldr	r6, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8006c32:	f883 9059 	strb.w	r9, [r3, #89]	; 0x59
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8006c36:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006c3a:	699f      	ldr	r7, [r3, #24]
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006c3c:	649e      	str	r6, [r3, #72]	; 0x48
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006c3e:	631f      	str	r7, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006c40:	f893 c040 	ldrb.w	ip, [r3, #64]	; 0x40
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8006c44:	f893 b042 	ldrb.w	fp, [r3, #66]	; 0x42
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006c48:	f893 9028 	ldrb.w	r9, [r3, #40]	; 0x28
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8006c4c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8006c50:	f600 4ea8 	addw	lr, r0, #3240	; 0xca8
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006c54:	f883 9040 	strb.w	r9, [r3, #64]	; 0x40
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006c58:	f893 902a 	ldrb.w	r9, [r3, #42]	; 0x2a
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8006c5c:	e9d3 670e 	ldrd	r6, r7, [r3, #56]	; 0x38
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006c60:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8006c64:	e9c3 6714 	strd	r6, r7, [r3, #80]	; 0x50
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8006c68:	f893 705a 	ldrb.w	r7, [r3, #90]	; 0x5a
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8006c6c:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8006c70:	f883 b05a 	strb.w	fp, [r3, #90]	; 0x5a
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006c74:	f883 c058 	strb.w	ip, [r3, #88]	; 0x58
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8006c78:	e9d3 bc08 	ldrd	fp, ip, [r3, #32]
 8006c7c:	e9c3 bc0e 	strd	fp, ip, [r3, #56]	; 0x38
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8006c80:	f8d0 1ca0 	ldr.w	r1, [r0, #3232]	; 0xca0
 8006c84:	6199      	str	r1, [r3, #24]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8006c86:	2100      	movs	r1, #0
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8006c88:	e9de bc00 	ldrd	fp, ip, [lr]
 8006c8c:	e9c3 bc08 	strd	fp, ip, [r3, #32]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8006c90:	f890 ccb0 	ldrb.w	ip, [r0, #3248]	; 0xcb0
 8006c94:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8006c98:	f890 ccb1 	ldrb.w	ip, [r0, #3249]	; 0xcb1
 8006c9c:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8006ca0:	f890 ccb2 	ldrb.w	ip, [r0, #3250]	; 0xcb2
 8006ca4:	f883 c02a 	strb.w	ip, [r3, #42]	; 0x2a
        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8006ca8:	f8c0 8ca0 	str.w	r8, [r0, #3232]	; 0xca0
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8006cac:	e9ce 4500 	strd	r4, r5, [lr]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8006cb0:	f880 6cb0 	strb.w	r6, [r0, #3248]	; 0xcb0
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8006cb4:	f880 acb1 	strb.w	sl, [r0, #3249]	; 0xcb1
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8006cb8:	f880 7cb2 	strb.w	r7, [r0, #3250]	; 0xcb2
        *previous_cache_entry =  FX_NULL;
 8006cbc:	6011      	str	r1, [r2, #0]
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8006cc4:	6941      	ldr	r1, [r0, #20]
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8006cc6:	69c3      	ldr	r3, [r0, #28]
        *previous_cache_entry =  FX_NULL;
 8006cc8:	6014      	str	r4, [r2, #0]
        while (cache_size--)
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d0f7      	beq.n	8006cbe <_fx_utility_logical_sector_cache_entry_read+0x126>
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006cce:	7c5c      	ldrb	r4, [r3, #17]
 8006cd0:	3901      	subs	r1, #1
 8006cd2:	b12c      	cbz	r4, 8006ce0 <_fx_utility_logical_sector_cache_entry_read+0x148>
 8006cd4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006cd8:	42bd      	cmp	r5, r7
 8006cda:	bf08      	it	eq
 8006cdc:	42b4      	cmpeq	r4, r6
 8006cde:	d018      	beq.n	8006d12 <_fx_utility_logical_sector_cache_entry_read+0x17a>
            if (cache_entry -> fx_cached_sector_next_used)
 8006ce0:	695c      	ldr	r4, [r3, #20]
 8006ce2:	2c00      	cmp	r4, #0
 8006ce4:	d0f1      	beq.n	8006cca <_fx_utility_logical_sector_cache_entry_read+0x132>
                *previous_cache_entry =  cache_entry;
 8006ce6:	6013      	str	r3, [r2, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	e7ee      	b.n	8006cca <_fx_utility_logical_sector_cache_entry_read+0x132>
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8006cec:	f60e 44a8 	addw	r4, lr, #3240	; 0xca8
 8006cf0:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006cf4:	42bd      	cmp	r5, r7
 8006cf6:	bf08      	it	eq
 8006cf8:	42b4      	cmpeq	r4, r6
 8006cfa:	f47f af71 	bne.w	8006be0 <_fx_utility_logical_sector_cache_entry_read+0x48>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006cfe:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8006d02:	2300      	movs	r3, #0
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8006d04:	f8de 1ca0 	ldr.w	r1, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d08:	3201      	adds	r2, #1
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8006d0a:	6081      	str	r1, [r0, #8]
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d0c:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8006d10:	e7d5      	b.n	8006cbe <_fx_utility_logical_sector_cache_entry_read+0x126>
                if (*previous_cache_entry)
 8006d12:	6812      	ldr	r2, [r2, #0]
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8006d14:	6819      	ldr	r1, [r3, #0]
 8006d16:	6081      	str	r1, [r0, #8]
                if (*previous_cache_entry)
 8006d18:	b122      	cbz	r2, 8006d24 <_fx_utility_logical_sector_cache_entry_read+0x18c>
                        cache_entry -> fx_cached_sector_next_used;
 8006d1a:	695c      	ldr	r4, [r3, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8006d1c:	69c1      	ldr	r1, [r0, #28]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8006d1e:	6154      	str	r4, [r2, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8006d20:	6159      	str	r1, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8006d22:	61c3      	str	r3, [r0, #28]
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d24:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
                return(FX_NULL);
 8006d28:	2300      	movs	r3, #0
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d2a:	3201      	adds	r2, #1
 8006d2c:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006d36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d3a:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8006d3e:	f8c0 8008 	str.w	r8, [r0, #8]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006d42:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d46:	3201      	adds	r2, #1
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006d48:	f60e 49a8 	addw	r9, lr, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006d4c:	f8de 6ca0 	ldr.w	r6, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006d50:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8006d54:	f89e 7cb0 	ldrb.w	r7, [lr, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8006d58:	f89e 2cb2 	ldrb.w	r2, [lr, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006d5c:	e9d9 4500 	ldrd	r4, r5, [r9]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8006d60:	f8ce 8ca0 	str.w	r8, [lr, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8006d64:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006d68:	e9c9 0100 	strd	r0, r1, [r9]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8006d6c:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 8006d70:	f88e 1cb0 	strb.w	r1, [lr, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8006d74:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 8006d78:	f88e 1cb1 	strb.w	r1, [lr, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8006d7c:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8006d80:	f88e 1cb2 	strb.w	r1, [lr, #3250]	; 0xcb2
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006d84:	6b18      	ldr	r0, [r3, #48]	; 0x30
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006d86:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8006d8a:	f893 8041 	ldrb.w	r8, [r3, #65]	; 0x41
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006d8e:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006d90:	6498      	str	r0, [r3, #72]	; 0x48
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006d92:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8006d96:	f893 e042 	ldrb.w	lr, [r3, #66]	; 0x42
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006d9a:	f883 9058 	strb.w	r9, [r3, #88]	; 0x58
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8006d9e:	f883 8059 	strb.w	r8, [r3, #89]	; 0x59
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006da2:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006da4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8006da8:	f883 e05a 	strb.w	lr, [r3, #90]	; 0x5a
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8006dac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8006db0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8006db4:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8006db8:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8006dbc:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006dc0:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8006dc4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8006dc8:	619e      	str	r6, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8006dca:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8006dce:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8006dd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006dd6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8006dda:	e9c3 4508 	strd	r4, r5, [r3, #32]
            return(FX_NULL);
 8006dde:	2300      	movs	r3, #0
 8006de0:	e76d      	b.n	8006cbe <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006de2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006de6:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006dea:	6999      	ldr	r1, [r3, #24]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006dec:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006df0:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006df2:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006df4:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006df8:	f8d2 8ca0 	ldr.w	r8, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006dfc:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8006e00:	f892 ecb0 	ldrb.w	lr, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8006e04:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006e08:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006e0c:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8006e10:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006e14:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006e18:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8006e1c:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8006e20:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8006e24:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8006e28:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8006e2c:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8006e30:	f8c3 8018 	str.w	r8, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8006e34:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8006e38:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8006e3c:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8006e40:	e9c3 6708 	strd	r6, r7, [r3, #32]
            return(FX_NULL);
 8006e44:	2300      	movs	r3, #0
 8006e46:	e73a      	b.n	8006cbe <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006e48:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006e4c:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006e50:	6b19      	ldr	r1, [r3, #48]	; 0x30
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006e52:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006e56:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006e58:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006e5a:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006e5e:	f8d2 eca0 	ldr.w	lr, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006e62:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8006e66:	f892 8cb0 	ldrb.w	r8, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8006e6a:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006e6e:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006e72:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8006e76:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006e7a:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006e7e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8006e82:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8006e86:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8006e8a:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8006e8e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8006e92:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006e96:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006e98:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006e9c:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8006ea0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006ea4:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006ea6:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8006eaa:	f8c3 e018 	str.w	lr, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8006eae:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006eb2:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8006eb6:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8006ebe:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8006ec2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8006ec6:	e9c3 6708 	strd	r6, r7, [r3, #32]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8006eca:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
            return(FX_NULL);
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e6f5      	b.n	8006cbe <_fx_utility_logical_sector_cache_entry_read+0x126>
 8006ed2:	bf00      	nop

08006ed4 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8006ed4:	4b53      	ldr	r3, [pc, #332]	; (8007024 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006ed6:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 8006ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eda:	f042 0201 	orr.w	r2, r2, #1
{
 8006ede:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
{
 8006ee2:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 8006ee6:	2001      	movs	r0, #1
{
 8006ee8:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 8006eea:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 8006eec:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 8006eee:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 8006ef0:	9201      	str	r2, [sp, #4]
 8006ef2:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 8006ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
 8006efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006efe:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006f02:	9202      	str	r2, [sp, #8]
 8006f04:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f08:	f042 0204 	orr.w	r2, r2, #4
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f10:	f002 0204 	and.w	r2, r2, #4
 8006f14:	9203      	str	r2, [sp, #12]
 8006f16:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1a:	432a      	orrs	r2, r5
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f20:	402a      	ands	r2, r5
 8006f22:	9204      	str	r2, [sp, #16]
 8006f24:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f28:	f042 0210 	orr.w	r2, r2, #16
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f30:	f002 0210 	and.w	r2, r2, #16
 8006f34:	9205      	str	r2, [sp, #20]
 8006f36:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8006f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3a:	f042 0220 	orr.w	r2, r2, #32
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f42:	f002 0220 	and.w	r2, r2, #32
 8006f46:	9206      	str	r2, [sp, #24]
 8006f48:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8006f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006f58:	9207      	str	r2, [sp, #28]
 8006f5a:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006f64:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 8006f68:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8006f6c:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006f72:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006f74:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006f76:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006f78:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 8006f7a:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006f7c:	482a      	ldr	r0, [pc, #168]	; (8007028 <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006f7e:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006f80:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006f82:	f000 faa1 	bl	80074c8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006f86:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4827      	ldr	r0, [pc, #156]	; (800702c <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006f8e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006f90:	f000 fa9a 	bl	80074c8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8006f94:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4825      	ldr	r0, [pc, #148]	; (8007030 <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8006f9c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006f9e:	f000 fa93 	bl	80074c8 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 8006fa2:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4822      	ldr	r0, [pc, #136]	; (8007034 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 8006faa:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006fac:	f000 fa8c 	bl	80074c8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8006fb0:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4820      	ldr	r0, [pc, #128]	; (8007038 <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8006fb8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006fba:	f000 fa85 	bl	80074c8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8006fbe:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	481e      	ldr	r0, [pc, #120]	; (800703c <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8006fc4:	4c1e      	ldr	r4, [pc, #120]	; (8007040 <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8006fc6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006fc8:	f000 fa7e 	bl	80074c8 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8006fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006fd0:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8006fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fd6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8006fda:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8006fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006fe0:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8006fe6:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006fe8:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8006fea:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006fec:	4b15      	ldr	r3, [pc, #84]	; (8007044 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006fee:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ff0:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 8006ff2:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006ff4:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ff6:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ff8:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 8006ffa:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ffc:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 8006ffe:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007000:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8007002:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 8007006:	f000 fa1d 	bl	8007444 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 800700a:	4620      	mov	r0, r4
 800700c:	f000 f97e 	bl	800730c <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007010:	462a      	mov	r2, r5
 8007012:	210f      	movs	r1, #15
 8007014:	2038      	movs	r0, #56	; 0x38
 8007016:	f000 f8eb 	bl	80071f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800701a:	2038      	movs	r0, #56	; 0x38
 800701c:	f000 f91e 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 8007020:	b00e      	add	sp, #56	; 0x38
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	40023800 	.word	0x40023800
 8007028:	40020800 	.word	0x40020800
 800702c:	40020c00 	.word	0x40020c00
 8007030:	40021000 	.word	0x40021000
 8007034:	40021400 	.word	0x40021400
 8007038:	40021800 	.word	0x40021800
 800703c:	40021c00 	.word	0x40021c00
 8007040:	20000250 	.word	0x20000250
 8007044:	40026410 	.word	0x40026410

08007048 <BSP_SDRAM_Init>:
{
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800704c:	483d      	ldr	r0, [pc, #244]	; (8007144 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 800704e:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007050:	4d3d      	ldr	r5, [pc, #244]	; (8007148 <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007052:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 8007054:	4c3d      	ldr	r4, [pc, #244]	; (800714c <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8007056:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 800705a:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 800705e:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 8007062:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8007064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 8007068:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800706c:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 8007070:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007072:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007074:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007076:	4628      	mov	r0, r5
 8007078:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 800707a:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 800707c:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800707e:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8007080:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 8007082:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 8007086:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 800708a:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800708e:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8007090:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007092:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8007096:	f8c5 8010 	str.w	r8, [r5, #16]
 800709a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8007154 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800709e:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 80070a2:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80070a6:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80070aa:	f7ff ff13 	bl	8006ed4 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80070b2:	4c27      	ldr	r4, [pc, #156]	; (8007150 <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80070b4:	f000 fe88 	bl	8007dc8 <HAL_SDRAM_Init>
 80070b8:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80070ba:	4621      	mov	r1, r4
 80070bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80070c0:	bf18      	it	ne
 80070c2:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80070c4:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 80070c6:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80070c8:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80070cc:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 80070d0:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80070d2:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 80070d4:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80070d6:	f000 fe99 	bl	8007e0c <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 80070da:	4638      	mov	r0, r7
 80070dc:	f000 f862 	bl	80071a4 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80070e0:	4621      	mov	r1, r4
 80070e2:	4628      	mov	r0, r5
 80070e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80070e8:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 80070ec:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80070f0:	f000 fe8c 	bl	8007e0c <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80070f4:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 80070f8:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007102:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 8007106:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8007108:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 800710c:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800710e:	f000 fe7d 	bl	8007e0c <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 8007112:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007116:	4621      	mov	r1, r4
 8007118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800711c:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800711e:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 8007120:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8007122:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 8007126:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800712a:	f000 fe6f 	bl	8007e0c <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800712e:	4628      	mov	r0, r5
 8007130:	f240 6103 	movw	r1, #1539	; 0x603
 8007134:	f000 fe84 	bl	8007e40 <HAL_SDRAM_ProgramRefreshRate>
}
 8007138:	f89b 0000 	ldrb.w	r0, [fp]
 800713c:	b003      	add	sp, #12
 800713e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007142:	bf00      	nop
 8007144:	a0000140 	.word	0xa0000140
 8007148:	20002be0 	.word	0x20002be0
 800714c:	20000234 	.word	0x20000234
 8007150:	20000224 	.word	0x20000224
 8007154:	20000190 	.word	0x20000190

08007158 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 800715c:	4a07      	ldr	r2, [pc, #28]	; (800717c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800715e:	2003      	movs	r0, #3
{
 8007160:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007168:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800716a:	f000 f82d 	bl	80071c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800716e:	200f      	movs	r0, #15
 8007170:	f000 fe7a 	bl	8007e68 <HAL_InitTick>
  HAL_MspInit();
 8007174:	f7ff fff0 	bl	8007158 <HAL_MspInit>
}
 8007178:	2000      	movs	r0, #0
 800717a:	bd08      	pop	{r3, pc}
 800717c:	40023c00 	.word	0x40023c00

08007180 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007180:	4a03      	ldr	r2, [pc, #12]	; (8007190 <HAL_IncTick+0x10>)
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <HAL_IncTick+0x14>)
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	440b      	add	r3, r1
 800718a:	6013      	str	r3, [r2, #0]
}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20002c14 	.word	0x20002c14
 8007194:	20000191 	.word	0x20000191

08007198 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007198:	4b01      	ldr	r3, [pc, #4]	; (80071a0 <HAL_GetTick+0x8>)
 800719a:	6818      	ldr	r0, [r3, #0]
}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20002c14 	.word	0x20002c14

080071a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80071a8:	f7ff fff6 	bl	8007198 <HAL_GetTick>
 80071ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071ae:	1c63      	adds	r3, r4, #1
 80071b0:	d002      	beq.n	80071b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_Delay+0x20>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071b8:	f7ff ffee 	bl	8007198 <HAL_GetTick>
 80071bc:	1b40      	subs	r0, r0, r5
 80071be:	42a0      	cmp	r0, r4
 80071c0:	d3fa      	bcc.n	80071b8 <HAL_Delay+0x14>
  {
  }
}
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	20000191 	.word	0x20000191

080071c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071c8:	4907      	ldr	r1, [pc, #28]	; (80071e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071ca:	0200      	lsls	r0, r0, #8
 80071cc:	4b07      	ldr	r3, [pc, #28]	; (80071ec <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071ce:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071d0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071d4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071d6:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80071da:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80071dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071e2:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80071e4:	60c8      	str	r0, [r1, #12]
 80071e6:	4770      	bx	lr
 80071e8:	e000ed00 	.word	0xe000ed00
 80071ec:	05fa0000 	.word	0x05fa0000

080071f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071f0:	4b17      	ldr	r3, [pc, #92]	; (8007250 <HAL_NVIC_SetPriority+0x60>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071f8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071fa:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071fe:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007200:	2d04      	cmp	r5, #4
 8007202:	bf28      	it	cs
 8007204:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007206:	2c06      	cmp	r4, #6
 8007208:	d918      	bls.n	800723c <HAL_NVIC_SetPriority+0x4c>
 800720a:	3b03      	subs	r3, #3
 800720c:	f04f 34ff 	mov.w	r4, #4294967295
 8007210:	409c      	lsls	r4, r3
 8007212:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007216:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800721a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800721c:	fa02 f205 	lsl.w	r2, r2, r5
 8007220:	ea21 0102 	bic.w	r1, r1, r2
 8007224:	fa01 f203 	lsl.w	r2, r1, r3
 8007228:	ea42 0204 	orr.w	r2, r2, r4
 800722c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8007230:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8007232:	db06      	blt.n	8007242 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <HAL_NVIC_SetPriority+0x64>)
 8007236:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007238:	bc30      	pop	{r4, r5}
 800723a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800723c:	2400      	movs	r4, #0
 800723e:	4623      	mov	r3, r4
 8007240:	e7e9      	b.n	8007216 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007242:	f000 000f 	and.w	r0, r0, #15
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <HAL_NVIC_SetPriority+0x68>)
 8007248:	541a      	strb	r2, [r3, r0]
 800724a:	bc30      	pop	{r4, r5}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	e000ed00 	.word	0xe000ed00
 8007254:	e000e400 	.word	0xe000e400
 8007258:	e000ed14 	.word	0xe000ed14

0800725c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800725c:	2800      	cmp	r0, #0
 800725e:	db07      	blt.n	8007270 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007260:	f000 011f 	and.w	r1, r0, #31
 8007264:	2301      	movs	r3, #1
 8007266:	0940      	lsrs	r0, r0, #5
 8007268:	4a02      	ldr	r2, [pc, #8]	; (8007274 <HAL_NVIC_EnableIRQ+0x18>)
 800726a:	408b      	lsls	r3, r1
 800726c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	e000e100 	.word	0xe000e100

08007278 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007278:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800727e:	2000      	movs	r0, #0
 8007280:	4904      	ldr	r1, [pc, #16]	; (8007294 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007282:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007288:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800728a:	6048      	str	r0, [r1, #4]
}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	e000ed90 	.word	0xe000ed90

08007298 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007298:	4a06      	ldr	r2, [pc, #24]	; (80072b4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800729a:	f040 0001 	orr.w	r0, r0, #1
 800729e:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <HAL_MPU_Enable+0x20>)
 80072a0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80072a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80072aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80072ae:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80072b2:	4770      	bx	lr
 80072b4:	e000ed00 	.word	0xe000ed00
 80072b8:	e000ed90 	.word	0xe000ed90

080072bc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80072bc:	4a12      	ldr	r2, [pc, #72]	; (8007308 <HAL_MPU_ConfigRegion+0x4c>)
 80072be:	7843      	ldrb	r3, [r0, #1]
 80072c0:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80072c2:	7801      	ldrb	r1, [r0, #0]
 80072c4:	b911      	cbnz	r1, 80072cc <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80072c6:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80072c8:	6111      	str	r1, [r2, #16]
 80072ca:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80072cc:	6843      	ldr	r3, [r0, #4]
{
 80072ce:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 80072d0:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80072d2:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072d4:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80072d6:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80072d8:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80072da:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072dc:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80072e0:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072e2:	430b      	orrs	r3, r1
 80072e4:	7a01      	ldrb	r1, [r0, #8]
 80072e6:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80072ea:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072ec:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80072f0:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072f2:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80072f6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80072fa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80072fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 8007302:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007304:	6113      	str	r3, [r2, #16]
}
 8007306:	4770      	bx	lr
 8007308:	e000ed90 	.word	0xe000ed90

0800730c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8007310:	f7ff ff42 	bl	8007198 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007314:	2c00      	cmp	r4, #0
 8007316:	d053      	beq.n	80073c0 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007318:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800731a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800731c:	2100      	movs	r1, #0
 800731e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8007320:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8007324:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8007326:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800732a:	f022 0201 	bic.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007330:	e005      	b.n	800733e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007332:	f7ff ff31 	bl	8007198 <HAL_GetTick>
 8007336:	1b40      	subs	r0, r0, r5
 8007338:	2805      	cmp	r0, #5
 800733a:	d83a      	bhi.n	80073b2 <HAL_DMA_Init+0xa6>
 800733c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	07d1      	lsls	r1, r2, #31
 8007342:	d4f6      	bmi.n	8007332 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007344:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8007348:	68e1      	ldr	r1, [r4, #12]
 800734a:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800734c:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800734e:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007352:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007354:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8007356:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007358:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800735c:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800735e:	4d35      	ldr	r5, [pc, #212]	; (8007434 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007360:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007362:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007364:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007366:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8007368:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800736a:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800736c:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007370:	d028      	beq.n	80073c4 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007372:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007374:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007376:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800737a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800737c:	b2da      	uxtb	r2, r3
 800737e:	4d2e      	ldr	r5, [pc, #184]	; (8007438 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8007380:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007382:	3a10      	subs	r2, #16
 8007384:	492d      	ldr	r1, [pc, #180]	; (800743c <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007386:	482e      	ldr	r0, [pc, #184]	; (8007440 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007388:	fba5 5202 	umull	r5, r2, r5, r2
 800738c:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800738e:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007390:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007392:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007394:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 8007396:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007398:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800739c:	bf88      	it	hi
 800739e:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073a0:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073a2:	4083      	lsls	r3, r0
  return HAL_OK;
 80073a4:	4610      	mov	r0, r2
 80073a6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073a8:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073aa:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80073ac:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80073b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073b4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80073b6:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073b8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80073be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80073c0:	2001      	movs	r0, #1
}
 80073c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073c4:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80073c8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073ca:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80073ce:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073d2:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80073d4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80073d6:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073d8:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80073dc:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073de:	2d00      	cmp	r5, #0
 80073e0:	d0cc      	beq.n	800737c <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073e2:	b17e      	cbz	r6, 8007404 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073e4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80073e8:	d016      	beq.n	8007418 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073ea:	2f02      	cmp	r7, #2
 80073ec:	d903      	bls.n	80073f6 <HAL_DMA_Init+0xea>
 80073ee:	2f03      	cmp	r7, #3
 80073f0:	d1c4      	bne.n	800737c <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073f2:	01ea      	lsls	r2, r5, #7
 80073f4:	d5c2      	bpl.n	800737c <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80073f6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f8:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80073fa:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073fc:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80073fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8007404:	2f01      	cmp	r7, #1
 8007406:	d003      	beq.n	8007410 <HAL_DMA_Init+0x104>
 8007408:	d3f3      	bcc.n	80073f2 <HAL_DMA_Init+0xe6>
 800740a:	2f02      	cmp	r7, #2
 800740c:	d1b6      	bne.n	800737c <HAL_DMA_Init+0x70>
 800740e:	e7f0      	b.n	80073f2 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007410:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007414:	d1b2      	bne.n	800737c <HAL_DMA_Init+0x70>
 8007416:	e7ee      	b.n	80073f6 <HAL_DMA_Init+0xea>
    switch (tmp)
 8007418:	2f03      	cmp	r7, #3
 800741a:	d8af      	bhi.n	800737c <HAL_DMA_Init+0x70>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <HAL_DMA_Init+0x118>)
 800741e:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8007422:	bf00      	nop
 8007424:	080073f7 	.word	0x080073f7
 8007428:	080073f3 	.word	0x080073f3
 800742c:	080073f7 	.word	0x080073f7
 8007430:	08007411 	.word	0x08007411
 8007434:	f010803f 	.word	0xf010803f
 8007438:	aaaaaaab 	.word	0xaaaaaaab
 800743c:	fffffc00 	.word	0xfffffc00
 8007440:	0800b4f0 	.word	0x0800b4f0

08007444 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8007444:	2800      	cmp	r0, #0
 8007446:	d035      	beq.n	80074b4 <HAL_DMA_DeInit+0x70>
 8007448:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800744a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800744e:	b2c0      	uxtb	r0, r0
 8007450:	2802      	cmp	r0, #2
 8007452:	d031      	beq.n	80074b8 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8007454:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8007456:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007458:	b2d1      	uxtb	r1, r2
{
 800745a:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800745c:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800745e:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007460:	4d16      	ldr	r5, [pc, #88]	; (80074bc <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007462:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8007464:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007468:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800746c:	4d14      	ldr	r5, [pc, #80]	; (80074c0 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800746e:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007470:	0909      	lsrs	r1, r1, #4
 8007472:	4c14      	ldr	r4, [pc, #80]	; (80074c4 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 8007474:	6010      	str	r0, [r2, #0]
 8007476:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007478:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 800747a:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800747c:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 8007480:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007482:	bf88      	it	hi
 8007484:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 8007486:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007488:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 800748a:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800748c:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800748e:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 8007490:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007492:	65dd      	str	r5, [r3, #92]	; 0x5c
 8007494:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 8007496:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007498:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800749c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80074a4:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80074a8:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80074ac:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 80074b0:	bc70      	pop	{r4, r5, r6}
 80074b2:	4770      	bx	lr
    return HAL_ERROR;
 80074b4:	2001      	movs	r0, #1
 80074b6:	4770      	bx	lr
}
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	aaaaaaab 	.word	0xaaaaaaab
 80074c0:	0800b4f0 	.word	0x0800b4f0
 80074c4:	fffffc00 	.word	0xfffffc00

080074c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	4688      	mov	r8, r1
 80074ce:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80074d0:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074d2:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074d6:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80076d0 <HAL_GPIO_Init+0x208>
 80074da:	e003      	b.n	80074e4 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 80074dc:	3401      	adds	r4, #1
 80074de:	2c10      	cmp	r4, #16
 80074e0:	f000 80b6 	beq.w	8007650 <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 80074e4:	2301      	movs	r3, #1
 80074e6:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074e8:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d1f5      	bne.n	80074dc <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074f4:	0067      	lsls	r7, r4, #1
 80074f6:	2103      	movs	r1, #3
 80074f8:	f025 0c10 	bic.w	ip, r5, #16
 80074fc:	40b9      	lsls	r1, r7
 80074fe:	f10c 33ff 	add.w	r3, ip, #4294967295
 8007502:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007504:	2b01      	cmp	r3, #1
 8007506:	d810      	bhi.n	800752a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8007508:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800750a:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800750e:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 8007512:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007516:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8007518:	40be      	lsls	r6, r7
 800751a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800751e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007520:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007522:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007526:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8007528:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800752a:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800752c:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007530:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007534:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007538:	fa06 f607 	lsl.w	r6, r6, r7
 800753c:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 8007540:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007542:	d115      	bne.n	8007570 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8007544:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007546:	f004 0c07 	and.w	ip, r4, #7
 800754a:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800754e:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8007552:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007556:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800755a:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800755e:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007562:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007566:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800756a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 800756e:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 8007570:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007572:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007576:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007578:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800757a:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800757c:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 8007580:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007582:	d5ab      	bpl.n	80074dc <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007584:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <HAL_GPIO_Init+0x1e0>)
 8007586:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800758a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800758e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8007590:	4619      	mov	r1, r3
 8007592:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007596:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800759a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800759e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80075a2:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075a4:	644f      	str	r7, [r1, #68]	; 0x44
 80075a6:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80075a8:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075ac:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80075b0:	9701      	str	r7, [sp, #4]
 80075b2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80075b4:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80075b6:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80075ba:	4f3c      	ldr	r7, [pc, #240]	; (80076ac <HAL_GPIO_Init+0x1e4>)
 80075bc:	42b8      	cmp	r0, r7
 80075be:	d020      	beq.n	8007602 <HAL_GPIO_Init+0x13a>
 80075c0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80075c4:	42b8      	cmp	r0, r7
 80075c6:	d046      	beq.n	8007656 <HAL_GPIO_Init+0x18e>
 80075c8:	4f39      	ldr	r7, [pc, #228]	; (80076b0 <HAL_GPIO_Init+0x1e8>)
 80075ca:	42b8      	cmp	r0, r7
 80075cc:	d048      	beq.n	8007660 <HAL_GPIO_Init+0x198>
 80075ce:	4f39      	ldr	r7, [pc, #228]	; (80076b4 <HAL_GPIO_Init+0x1ec>)
 80075d0:	42b8      	cmp	r0, r7
 80075d2:	d04a      	beq.n	800766a <HAL_GPIO_Init+0x1a2>
 80075d4:	4f38      	ldr	r7, [pc, #224]	; (80076b8 <HAL_GPIO_Init+0x1f0>)
 80075d6:	42b8      	cmp	r0, r7
 80075d8:	d04c      	beq.n	8007674 <HAL_GPIO_Init+0x1ac>
 80075da:	4f38      	ldr	r7, [pc, #224]	; (80076bc <HAL_GPIO_Init+0x1f4>)
 80075dc:	42b8      	cmp	r0, r7
 80075de:	d053      	beq.n	8007688 <HAL_GPIO_Init+0x1c0>
 80075e0:	4f37      	ldr	r7, [pc, #220]	; (80076c0 <HAL_GPIO_Init+0x1f8>)
 80075e2:	42b8      	cmp	r0, r7
 80075e4:	d055      	beq.n	8007692 <HAL_GPIO_Init+0x1ca>
 80075e6:	4f37      	ldr	r7, [pc, #220]	; (80076c4 <HAL_GPIO_Init+0x1fc>)
 80075e8:	42b8      	cmp	r0, r7
 80075ea:	d048      	beq.n	800767e <HAL_GPIO_Init+0x1b6>
 80075ec:	4f36      	ldr	r7, [pc, #216]	; (80076c8 <HAL_GPIO_Init+0x200>)
 80075ee:	42b8      	cmp	r0, r7
 80075f0:	d054      	beq.n	800769c <HAL_GPIO_Init+0x1d4>
 80075f2:	4f36      	ldr	r7, [pc, #216]	; (80076cc <HAL_GPIO_Init+0x204>)
 80075f4:	42b8      	cmp	r0, r7
 80075f6:	bf0c      	ite	eq
 80075f8:	2709      	moveq	r7, #9
 80075fa:	270a      	movne	r7, #10
 80075fc:	fa07 f303 	lsl.w	r3, r7, r3
 8007600:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8007602:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8007604:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 8007606:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800760a:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 800760c:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8007610:	bf54      	ite	pl
 8007612:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007614:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007616:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8007618:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 800761c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8007620:	bf54      	ite	pl
 8007622:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007624:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007626:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8007628:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 800762c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8007630:	bf54      	ite	pl
 8007632:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007634:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007636:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8007638:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 800763c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8007640:	bf54      	ite	pl
 8007642:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007644:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8007646:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8007648:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800764c:	f47f af4a 	bne.w	80074e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007650:	b003      	add	sp, #12
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	2701      	movs	r7, #1
 8007658:	fa07 f303 	lsl.w	r3, r7, r3
 800765c:	4319      	orrs	r1, r3
 800765e:	e7d0      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 8007660:	2702      	movs	r7, #2
 8007662:	fa07 f303 	lsl.w	r3, r7, r3
 8007666:	4319      	orrs	r1, r3
 8007668:	e7cb      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 800766a:	2703      	movs	r7, #3
 800766c:	fa07 f303 	lsl.w	r3, r7, r3
 8007670:	4319      	orrs	r1, r3
 8007672:	e7c6      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 8007674:	2704      	movs	r7, #4
 8007676:	fa07 f303 	lsl.w	r3, r7, r3
 800767a:	4319      	orrs	r1, r3
 800767c:	e7c1      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 800767e:	2707      	movs	r7, #7
 8007680:	fa07 f303 	lsl.w	r3, r7, r3
 8007684:	4319      	orrs	r1, r3
 8007686:	e7bc      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 8007688:	2705      	movs	r7, #5
 800768a:	fa07 f303 	lsl.w	r3, r7, r3
 800768e:	4319      	orrs	r1, r3
 8007690:	e7b7      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 8007692:	2706      	movs	r7, #6
 8007694:	fa07 f303 	lsl.w	r3, r7, r3
 8007698:	4319      	orrs	r1, r3
 800769a:	e7b2      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 800769c:	2708      	movs	r7, #8
 800769e:	fa07 f303 	lsl.w	r3, r7, r3
 80076a2:	4319      	orrs	r1, r3
 80076a4:	e7ad      	b.n	8007602 <HAL_GPIO_Init+0x13a>
 80076a6:	bf00      	nop
 80076a8:	40023800 	.word	0x40023800
 80076ac:	40020000 	.word	0x40020000
 80076b0:	40020800 	.word	0x40020800
 80076b4:	40020c00 	.word	0x40020c00
 80076b8:	40021000 	.word	0x40021000
 80076bc:	40021400 	.word	0x40021400
 80076c0:	40021800 	.word	0x40021800
 80076c4:	40021c00 	.word	0x40021c00
 80076c8:	40022000 	.word	0x40022000
 80076cc:	40022400 	.word	0x40022400
 80076d0:	40013c00 	.word	0x40013c00

080076d4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80076d4:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076d6:	4b1c      	ldr	r3, [pc, #112]	; (8007748 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80076d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80076da:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 80076de:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80076e0:	6411      	str	r1, [r2, #64]	; 0x40
{
 80076e2:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80076e4:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076e6:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 80076e8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80076ec:	9201      	str	r2, [sp, #4]
 80076ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80076f6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80076f8:	f7ff fd4e 	bl	8007198 <HAL_GetTick>
 80076fc:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076fe:	e005      	b.n	800770c <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007700:	f7ff fd4a 	bl	8007198 <HAL_GetTick>
 8007704:	1b40      	subs	r0, r0, r5
 8007706:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800770a:	d817      	bhi.n	800773c <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	03da      	lsls	r2, r3, #15
 8007710:	d5f6      	bpl.n	8007700 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007712:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007714:	4d0c      	ldr	r5, [pc, #48]	; (8007748 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800771a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800771c:	f7ff fd3c 	bl	8007198 <HAL_GetTick>
 8007720:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007722:	e005      	b.n	8007730 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007724:	f7ff fd38 	bl	8007198 <HAL_GetTick>
 8007728:	1b00      	subs	r0, r0, r4
 800772a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800772e:	d805      	bhi.n	800773c <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007730:	686b      	ldr	r3, [r5, #4]
 8007732:	039b      	lsls	r3, r3, #14
 8007734:	d5f6      	bpl.n	8007724 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007736:	2000      	movs	r0, #0
}
 8007738:	b003      	add	sp, #12
 800773a:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800773c:	2003      	movs	r0, #3
}
 800773e:	b003      	add	sp, #12
 8007740:	bd30      	pop	{r4, r5, pc}
 8007742:	bf00      	nop
 8007744:	40023800 	.word	0x40023800
 8007748:	40007000 	.word	0x40007000

0800774c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800774c:	2800      	cmp	r0, #0
 800774e:	f000 814c 	beq.w	80079ea <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007752:	6803      	ldr	r3, [r0, #0]
{
 8007754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007758:	07dd      	lsls	r5, r3, #31
{
 800775a:	b082      	sub	sp, #8
 800775c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800775e:	d535      	bpl.n	80077cc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007760:	49ac      	ldr	r1, [pc, #688]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 8007762:	688a      	ldr	r2, [r1, #8]
 8007764:	f002 020c 	and.w	r2, r2, #12
 8007768:	2a04      	cmp	r2, #4
 800776a:	f000 80ff 	beq.w	800796c <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800776e:	688a      	ldr	r2, [r1, #8]
 8007770:	f002 020c 	and.w	r2, r2, #12
 8007774:	2a08      	cmp	r2, #8
 8007776:	f000 80f5 	beq.w	8007964 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007780:	d010      	beq.n	80077a4 <HAL_RCC_OscConfig+0x58>
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 811a 	beq.w	80079bc <HAL_RCC_OscConfig+0x270>
 8007788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800778c:	4ba1      	ldr	r3, [pc, #644]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	f000 8164 	beq.w	8007a5c <HAL_RCC_OscConfig+0x310>
 8007794:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e004      	b.n	80077ae <HAL_RCC_OscConfig+0x62>
 80077a4:	4a9b      	ldr	r2, [pc, #620]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ae:	f7ff fcf3 	bl	8007198 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b2:	4d98      	ldr	r5, [pc, #608]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80077b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b6:	e005      	b.n	80077c4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077b8:	f7ff fcee 	bl	8007198 <HAL_GetTick>
 80077bc:	1b80      	subs	r0, r0, r6
 80077be:	2864      	cmp	r0, #100	; 0x64
 80077c0:	f200 80ef 	bhi.w	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	039a      	lsls	r2, r3, #14
 80077c8:	d5f6      	bpl.n	80077b8 <HAL_RCC_OscConfig+0x6c>
 80077ca:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077cc:	079f      	lsls	r7, r3, #30
 80077ce:	d442      	bmi.n	8007856 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077d0:	071a      	lsls	r2, r3, #28
 80077d2:	d517      	bpl.n	8007804 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077d4:	6963      	ldr	r3, [r4, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80b1 	beq.w	800793e <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077dc:	4b8d      	ldr	r3, [pc, #564]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80077de:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e0:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80077e8:	f7ff fcd6 	bl	8007198 <HAL_GetTick>
 80077ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ee:	e005      	b.n	80077fc <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077f0:	f7ff fcd2 	bl	8007198 <HAL_GetTick>
 80077f4:	1b80      	subs	r0, r0, r6
 80077f6:	2802      	cmp	r0, #2
 80077f8:	f200 80d3 	bhi.w	80079a2 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80077fe:	079b      	lsls	r3, r3, #30
 8007800:	d5f6      	bpl.n	80077f0 <HAL_RCC_OscConfig+0xa4>
 8007802:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007804:	075d      	lsls	r5, r3, #29
 8007806:	d56b      	bpl.n	80078e0 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007808:	4b82      	ldr	r3, [pc, #520]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 800780a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800780c:	00d0      	lsls	r0, r2, #3
 800780e:	f100 80ee 	bmi.w	80079ee <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8007814:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007816:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800781a:	641a      	str	r2, [r3, #64]	; 0x40
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007826:	4b7c      	ldr	r3, [pc, #496]	; (8007a18 <HAL_RCC_OscConfig+0x2cc>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	05d1      	lsls	r1, r2, #23
 800782c:	f140 80a8 	bpl.w	8007980 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007830:	68a3      	ldr	r3, [r4, #8]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d039      	beq.n	80078aa <HAL_RCC_OscConfig+0x15e>
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 80db 	beq.w	80079f2 <HAL_RCC_OscConfig+0x2a6>
 800783c:	2b05      	cmp	r3, #5
 800783e:	4b75      	ldr	r3, [pc, #468]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 8007840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007842:	f000 8113 	beq.w	8007a6c <HAL_RCC_OscConfig+0x320>
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	671a      	str	r2, [r3, #112]	; 0x70
 800784c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800784e:	f022 0204 	bic.w	r2, r2, #4
 8007852:	671a      	str	r2, [r3, #112]	; 0x70
 8007854:	e02e      	b.n	80078b4 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007856:	4a6f      	ldr	r2, [pc, #444]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 8007858:	6891      	ldr	r1, [r2, #8]
 800785a:	f011 0f0c 	tst.w	r1, #12
 800785e:	d063      	beq.n	8007928 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007860:	6891      	ldr	r1, [r2, #8]
 8007862:	f001 010c 	and.w	r1, r1, #12
 8007866:	2908      	cmp	r1, #8
 8007868:	d05b      	beq.n	8007922 <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800786a:	68e3      	ldr	r3, [r4, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80e1 	beq.w	8007a34 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8007872:	4b68      	ldr	r3, [pc, #416]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 8007874:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007876:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8007878:	f042 0201 	orr.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800787e:	f7ff fc8b 	bl	8007198 <HAL_GetTick>
 8007882:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007884:	e005      	b.n	8007892 <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007886:	f7ff fc87 	bl	8007198 <HAL_GetTick>
 800788a:	1b80      	subs	r0, r0, r6
 800788c:	2802      	cmp	r0, #2
 800788e:	f200 8088 	bhi.w	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	0798      	lsls	r0, r3, #30
 8007896:	d5f6      	bpl.n	8007886 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	6922      	ldr	r2, [r4, #16]
 800789c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80078a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	e792      	b.n	80077d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078aa:	4a5a      	ldr	r2, [pc, #360]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80078ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7ff fc70 	bl	8007198 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b8:	4e56      	ldr	r6, [pc, #344]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80078ba:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078bc:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c0:	e005      	b.n	80078ce <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f7ff fc69 	bl	8007198 <HAL_GetTick>
 80078c6:	eba0 0008 	sub.w	r0, r0, r8
 80078ca:	42b8      	cmp	r0, r7
 80078cc:	d869      	bhi.n	80079a2 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ce:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80078d0:	079b      	lsls	r3, r3, #30
 80078d2:	d5f6      	bpl.n	80078c2 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078d4:	b125      	cbz	r5, 80078e0 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078d6:	4a4f      	ldr	r2, [pc, #316]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80078d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80078da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078e0:	69a0      	ldr	r0, [r4, #24]
 80078e2:	b1d0      	cbz	r0, 800791a <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078e4:	4b4b      	ldr	r3, [pc, #300]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	f002 020c 	and.w	r2, r2, #12
 80078ec:	2a08      	cmp	r2, #8
 80078ee:	f000 80c5 	beq.w	8007a7c <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078f2:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f4:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078f6:	f000 80eb 	beq.w	8007ad0 <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078fe:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8007900:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007902:	f7ff fc49 	bl	8007198 <HAL_GetTick>
 8007906:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007908:	e004      	b.n	8007914 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800790a:	f7ff fc45 	bl	8007198 <HAL_GetTick>
 800790e:	1b40      	subs	r0, r0, r5
 8007910:	2802      	cmp	r0, #2
 8007912:	d846      	bhi.n	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	019b      	lsls	r3, r3, #6
 8007918:	d4f7      	bmi.n	800790a <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800791a:	2000      	movs	r0, #0
}
 800791c:	b002      	add	sp, #8
 800791e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007922:	6852      	ldr	r2, [r2, #4]
 8007924:	0256      	lsls	r6, r2, #9
 8007926:	d4a0      	bmi.n	800786a <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007928:	4a3a      	ldr	r2, [pc, #232]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	0795      	lsls	r5, r2, #30
 800792e:	d53c      	bpl.n	80079aa <HAL_RCC_OscConfig+0x25e>
 8007930:	68e2      	ldr	r2, [r4, #12]
 8007932:	2a01      	cmp	r2, #1
 8007934:	d039      	beq.n	80079aa <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8007936:	2001      	movs	r0, #1
}
 8007938:	b002      	add	sp, #8
 800793a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800793e:	4b35      	ldr	r3, [pc, #212]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 8007940:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007942:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800794a:	f7ff fc25 	bl	8007198 <HAL_GetTick>
 800794e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007950:	e004      	b.n	800795c <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007952:	f7ff fc21 	bl	8007198 <HAL_GetTick>
 8007956:	1b80      	subs	r0, r0, r6
 8007958:	2802      	cmp	r0, #2
 800795a:	d822      	bhi.n	80079a2 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800795c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800795e:	079f      	lsls	r7, r3, #30
 8007960:	d4f7      	bmi.n	8007952 <HAL_RCC_OscConfig+0x206>
 8007962:	e74e      	b.n	8007802 <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007964:	684a      	ldr	r2, [r1, #4]
 8007966:	0250      	lsls	r0, r2, #9
 8007968:	f57f af07 	bpl.w	800777a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800796c:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	0391      	lsls	r1, r2, #14
 8007972:	f57f af2b 	bpl.w	80077cc <HAL_RCC_OscConfig+0x80>
 8007976:	6862      	ldr	r2, [r4, #4]
 8007978:	2a00      	cmp	r2, #0
 800797a:	f47f af27 	bne.w	80077cc <HAL_RCC_OscConfig+0x80>
 800797e:	e7da      	b.n	8007936 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8007980:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007982:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8007984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007988:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800798a:	f7ff fc05 	bl	8007198 <HAL_GetTick>
 800798e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	05da      	lsls	r2, r3, #23
 8007994:	f53f af4c 	bmi.w	8007830 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007998:	f7ff fbfe 	bl	8007198 <HAL_GetTick>
 800799c:	1bc0      	subs	r0, r0, r7
 800799e:	2864      	cmp	r0, #100	; 0x64
 80079a0:	d9f6      	bls.n	8007990 <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 80079a2:	2003      	movs	r0, #3
}
 80079a4:	b002      	add	sp, #8
 80079a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079aa:	491a      	ldr	r1, [pc, #104]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80079ac:	6920      	ldr	r0, [r4, #16]
 80079ae:	680a      	ldr	r2, [r1, #0]
 80079b0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80079b4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80079b8:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ba:	e709      	b.n	80077d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079bc:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 80079be:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079c0:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80079d0:	f7ff fbe2 	bl	8007198 <HAL_GetTick>
 80079d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d6:	e004      	b.n	80079e2 <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d8:	f7ff fbde 	bl	8007198 <HAL_GetTick>
 80079dc:	1b80      	subs	r0, r0, r6
 80079de:	2864      	cmp	r0, #100	; 0x64
 80079e0:	d8df      	bhi.n	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	039b      	lsls	r3, r3, #14
 80079e6:	d4f7      	bmi.n	80079d8 <HAL_RCC_OscConfig+0x28c>
 80079e8:	e6ef      	b.n	80077ca <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80079ea:	2001      	movs	r0, #1
}
 80079ec:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 80079ee:	2500      	movs	r5, #0
 80079f0:	e719      	b.n	8007826 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079f2:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079fa:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	671a      	str	r2, [r3, #112]	; 0x70
 8007a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a04:	f022 0204 	bic.w	r2, r2, #4
 8007a08:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007a0a:	f7ff fbc5 	bl	8007198 <HAL_GetTick>
 8007a0e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a10:	e009      	b.n	8007a26 <HAL_RCC_OscConfig+0x2da>
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a1c:	f7ff fbbc 	bl	8007198 <HAL_GetTick>
 8007a20:	1bc0      	subs	r0, r0, r7
 8007a22:	4540      	cmp	r0, r8
 8007a24:	d8bd      	bhi.n	80079a2 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a26:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007a28:	0798      	lsls	r0, r3, #30
 8007a2a:	d4f7      	bmi.n	8007a1c <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	f43f af57 	beq.w	80078e0 <HAL_RCC_OscConfig+0x194>
 8007a32:	e750      	b.n	80078d6 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8007a34:	4b41      	ldr	r3, [pc, #260]	; (8007b3c <HAL_RCC_OscConfig+0x3f0>)
 8007a36:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a38:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007a40:	f7ff fbaa 	bl	8007198 <HAL_GetTick>
 8007a44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a46:	e004      	b.n	8007a52 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a48:	f7ff fba6 	bl	8007198 <HAL_GetTick>
 8007a4c:	1b80      	subs	r0, r0, r6
 8007a4e:	2802      	cmp	r0, #2
 8007a50:	d8a7      	bhi.n	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	0799      	lsls	r1, r3, #30
 8007a56:	d4f7      	bmi.n	8007a48 <HAL_RCC_OscConfig+0x2fc>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	e6b9      	b.n	80077d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e6a0      	b.n	80077ae <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a6c:	f042 0204 	orr.w	r2, r2, #4
 8007a70:	671a      	str	r2, [r3, #112]	; 0x70
 8007a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	671a      	str	r2, [r3, #112]	; 0x70
 8007a7a:	e71b      	b.n	80078b4 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a7c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8007a7e:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a80:	f43f af5a 	beq.w	8007938 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a84:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a88:	69e1      	ldr	r1, [r4, #28]
 8007a8a:	428b      	cmp	r3, r1
 8007a8c:	f47f af53 	bne.w	8007936 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a90:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a94:	6a21      	ldr	r1, [r4, #32]
 8007a96:	428b      	cmp	r3, r1
 8007a98:	f47f af4d 	bne.w	8007936 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007aa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007aa2:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007aa4:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8007aa8:	f47f af45 	bne.w	8007936 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007aac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007aae:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ab6:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8007aba:	f47f af3c 	bne.w	8007936 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ac0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ac4:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8007ac8:	bf14      	ite	ne
 8007aca:	2001      	movne	r0, #1
 8007acc:	2000      	moveq	r0, #0
 8007ace:	e733      	b.n	8007938 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8007ad0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad4:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8007ad6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007ad8:	f7ff fb5e 	bl	8007198 <HAL_GetTick>
 8007adc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ade:	e005      	b.n	8007aec <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae0:	f7ff fb5a 	bl	8007198 <HAL_GetTick>
 8007ae4:	1b80      	subs	r0, r0, r6
 8007ae6:	2802      	cmp	r0, #2
 8007ae8:	f63f af5b 	bhi.w	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	0199      	lsls	r1, r3, #6
 8007af0:	d4f6      	bmi.n	8007ae0 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007af2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8007af6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007af8:	4313      	orrs	r3, r2
 8007afa:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8007afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b02:	4c0e      	ldr	r4, [pc, #56]	; (8007b3c <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b04:	0852      	lsrs	r2, r2, #1
 8007b06:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007b0a:	3a01      	subs	r2, #1
 8007b0c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007b1e:	f7ff fb3b 	bl	8007198 <HAL_GetTick>
 8007b22:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b24:	e005      	b.n	8007b32 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b26:	f7ff fb37 	bl	8007198 <HAL_GetTick>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	2802      	cmp	r0, #2
 8007b2e:	f63f af38 	bhi.w	80079a2 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	019a      	lsls	r2, r3, #6
 8007b36:	d5f6      	bpl.n	8007b26 <HAL_RCC_OscConfig+0x3da>
 8007b38:	e6ef      	b.n	800791a <HAL_RCC_OscConfig+0x1ce>
 8007b3a:	bf00      	nop
 8007b3c:	40023800 	.word	0x40023800

08007b40 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b40:	b178      	cbz	r0, 8007b62 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b42:	4a5e      	ldr	r2, [pc, #376]	; (8007cbc <HAL_RCC_ClockConfig+0x17c>)
 8007b44:	6813      	ldr	r3, [r2, #0]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	428b      	cmp	r3, r1
 8007b4c:	d20b      	bcs.n	8007b66 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	f023 030f 	bic.w	r3, r3, #15
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b58:	6813      	ldr	r3, [r2, #0]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	d001      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8007b62:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8007b64:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b66:	6803      	ldr	r3, [r0, #0]
{
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b6c:	079d      	lsls	r5, r3, #30
 8007b6e:	d514      	bpl.n	8007b9a <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b70:	075c      	lsls	r4, r3, #29
 8007b72:	d504      	bpl.n	8007b7e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b74:	4c52      	ldr	r4, [pc, #328]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007b76:	68a2      	ldr	r2, [r4, #8]
 8007b78:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8007b7c:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b7e:	071a      	lsls	r2, r3, #28
 8007b80:	d504      	bpl.n	8007b8c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b82:	4c4f      	ldr	r4, [pc, #316]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007b84:	68a2      	ldr	r2, [r4, #8]
 8007b86:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8007b8a:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b8c:	4c4c      	ldr	r4, [pc, #304]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007b8e:	6885      	ldr	r5, [r0, #8]
 8007b90:	68a2      	ldr	r2, [r4, #8]
 8007b92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007b96:	432a      	orrs	r2, r5
 8007b98:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b9a:	07df      	lsls	r7, r3, #31
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	d521      	bpl.n	8007be6 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba2:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ba4:	4b46      	ldr	r3, [pc, #280]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ba8:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007baa:	d063      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bac:	2a02      	cmp	r2, #2
 8007bae:	d079      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb0:	0799      	lsls	r1, r3, #30
 8007bb2:	d528      	bpl.n	8007c06 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bb4:	4942      	ldr	r1, [pc, #264]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bba:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bbc:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007bc6:	f7ff fae7 	bl	8007198 <HAL_GetTick>
 8007bca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bcc:	e004      	b.n	8007bd8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bce:	f7ff fae3 	bl	8007198 <HAL_GetTick>
 8007bd2:	1bc0      	subs	r0, r0, r7
 8007bd4:	4540      	cmp	r0, r8
 8007bd6:	d863      	bhi.n	8007ca0 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd8:	68b3      	ldr	r3, [r6, #8]
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	f003 030c 	and.w	r3, r3, #12
 8007be0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007be4:	d1f3      	bne.n	8007bce <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007be6:	4a35      	ldr	r2, [pc, #212]	; (8007cbc <HAL_RCC_ClockConfig+0x17c>)
 8007be8:	6813      	ldr	r3, [r2, #0]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	42ab      	cmp	r3, r5
 8007bf0:	d90c      	bls.n	8007c0c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	f023 030f 	bic.w	r3, r3, #15
 8007bf8:	432b      	orrs	r3, r5
 8007bfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfc:	6813      	ldr	r3, [r2, #0]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	42ab      	cmp	r3, r5
 8007c04:	d002      	beq.n	8007c0c <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8007c06:	2001      	movs	r0, #1
}
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	075a      	lsls	r2, r3, #29
 8007c10:	d506      	bpl.n	8007c20 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c12:	492b      	ldr	r1, [pc, #172]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007c14:	68e0      	ldr	r0, [r4, #12]
 8007c16:	688a      	ldr	r2, [r1, #8]
 8007c18:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007c1c:	4302      	orrs	r2, r0
 8007c1e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c20:	071b      	lsls	r3, r3, #28
 8007c22:	d507      	bpl.n	8007c34 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c24:	4a26      	ldr	r2, [pc, #152]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007c26:	6921      	ldr	r1, [r4, #16]
 8007c28:	6893      	ldr	r3, [r2, #8]
 8007c2a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007c32:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c34:	4922      	ldr	r1, [pc, #136]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007c36:	688b      	ldr	r3, [r1, #8]
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d01c      	beq.n	8007c7a <HAL_RCC_ClockConfig+0x13a>
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d12b      	bne.n	8007c9c <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c44:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c46:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c4c:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c4e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007c52:	d12a      	bne.n	8007caa <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c54:	481b      	ldr	r0, [pc, #108]	; (8007cc4 <HAL_RCC_ClockConfig+0x184>)
 8007c56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007c5a:	fba1 0100 	umull	r0, r1, r1, r0
 8007c5e:	f7f8 fc67 	bl	8000530 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8007c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c72:	e003      	b.n	8007c7c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c74:	039e      	lsls	r6, r3, #14
 8007c76:	d49d      	bmi.n	8007bb4 <HAL_RCC_ClockConfig+0x74>
 8007c78:	e7c5      	b.n	8007c06 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c7c:	4a10      	ldr	r2, [pc, #64]	; (8007cc0 <HAL_RCC_ClockConfig+0x180>)
 8007c7e:	4c13      	ldr	r4, [pc, #76]	; (8007ccc <HAL_RCC_ClockConfig+0x18c>)
 8007c80:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8007c82:	4813      	ldr	r0, [pc, #76]	; (8007cd0 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c84:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007c88:	4912      	ldr	r1, [pc, #72]	; (8007cd4 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8007c8a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c8c:	5ca2      	ldrb	r2, [r4, r2]
 8007c8e:	40d3      	lsrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8007c92:	f000 f8e9 	bl	8007e68 <HAL_InitTick>
  return HAL_OK;
 8007c96:	2000      	movs	r0, #0
}
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <HAL_RCC_ClockConfig+0x184>)
 8007c9e:	e7ed      	b.n	8007c7c <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8007ca0:	2003      	movs	r0, #3
 8007ca2:	e7b1      	b.n	8007c08 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca4:	0198      	lsls	r0, r3, #6
 8007ca6:	d485      	bmi.n	8007bb4 <HAL_RCC_ClockConfig+0x74>
 8007ca8:	e7ad      	b.n	8007c06 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007caa:	4807      	ldr	r0, [pc, #28]	; (8007cc8 <HAL_RCC_ClockConfig+0x188>)
 8007cac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	fba1 0100 	umull	r0, r1, r1, r0
 8007cb6:	f7f8 fc3b 	bl	8000530 <__aeabi_uldivmod>
 8007cba:	e7d2      	b.n	8007c62 <HAL_RCC_ClockConfig+0x122>
 8007cbc:	40023c00 	.word	0x40023c00
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	00f42400 	.word	0x00f42400
 8007cc8:	017d7840 	.word	0x017d7840
 8007ccc:	0800b50c 	.word	0x0800b50c
 8007cd0:	20000194 	.word	0x20000194
 8007cd4:	20000198 	.word	0x20000198

08007cd8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cd8:	4916      	ldr	r1, [pc, #88]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8007cda:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cdc:	688b      	ldr	r3, [r1, #8]
 8007cde:	f003 030c 	and.w	r3, r3, #12
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d01b      	beq.n	8007d1e <HAL_RCC_GetSysClockFreq+0x46>
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d117      	bne.n	8007d1a <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cea:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cec:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cf4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007cf8:	d113      	bne.n	8007d22 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfa:	480f      	ldr	r0, [pc, #60]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x60>)
 8007cfc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007d00:	fba1 0100 	umull	r0, r1, r1, r0
 8007d04:	f7f8 fc14 	bl	8000530 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x5c>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007d10:	3301      	adds	r3, #1
 8007d12:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8007d14:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007d18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8007d1a:	4807      	ldr	r0, [pc, #28]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8007d1c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8007d1e:	4807      	ldr	r0, [pc, #28]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8007d20:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d22:	4806      	ldr	r0, [pc, #24]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x64>)
 8007d24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007d28:	2300      	movs	r3, #0
 8007d2a:	fba1 0100 	umull	r0, r1, r1, r0
 8007d2e:	f7f8 fbff 	bl	8000530 <__aeabi_uldivmod>
 8007d32:	e7e9      	b.n	8007d08 <HAL_RCC_GetSysClockFreq+0x30>
 8007d34:	40023800 	.word	0x40023800
 8007d38:	00f42400 	.word	0x00f42400
 8007d3c:	017d7840 	.word	0x017d7840

08007d40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d40:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007d42:	4a05      	ldr	r2, [pc, #20]	; (8007d58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007d44:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d46:	4905      	ldr	r1, [pc, #20]	; (8007d5c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d48:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007d4c:	6808      	ldr	r0, [r1, #0]
 8007d4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8007d50:	40d8      	lsrs	r0, r3
 8007d52:	4770      	bx	lr
 8007d54:	40023800 	.word	0x40023800
 8007d58:	0800b51c 	.word	0x0800b51c
 8007d5c:	20000198 	.word	0x20000198

08007d60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007d64:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d66:	4905      	ldr	r1, [pc, #20]	; (8007d7c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d68:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007d6c:	6808      	ldr	r0, [r1, #0]
 8007d6e:	5cd3      	ldrb	r3, [r2, r3]
}
 8007d70:	40d8      	lsrs	r0, r3
 8007d72:	4770      	bx	lr
 8007d74:	40023800 	.word	0x40023800
 8007d78:	0800b51c 	.word	0x0800b51c
 8007d7c:	20000198 	.word	0x20000198

08007d80 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d80:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d82:	220f      	movs	r2, #15
 8007d84:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	f002 0203 	and.w	r2, r2, #3
 8007d8c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007d94:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8007d9c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	08db      	lsrs	r3, r3, #3
{
 8007da2:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007da4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007da8:	4c05      	ldr	r4, [pc, #20]	; (8007dc0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007daa:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007dac:	6823      	ldr	r3, [r4, #0]
}
 8007dae:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	600b      	str	r3, [r1, #0]
}
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	40023c00 	.word	0x40023c00

08007dc4 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop

08007dc8 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8007dc8:	b1e8      	cbz	r0, 8007e06 <HAL_SDRAM_Init+0x3e>
{   
 8007dca:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007dcc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007dd8:	b183      	cbz	r3, 8007dfc <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007dda:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ddc:	1d21      	adds	r1, r4, #4
 8007dde:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007de0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007de4:	f000 fb88 	bl	80084f8 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007de8:	4629      	mov	r1, r5
 8007dea:	e9d4 0200 	ldrd	r0, r2, [r4]
 8007dee:	f000 fbc1 	bl	8008574 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007df2:	2301      	movs	r3, #1
  return HAL_OK;
 8007df4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007df6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8007dfc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007e00:	f7ff ffe0 	bl	8007dc4 <HAL_SDRAM_MspInit>
 8007e04:	e7e9      	b.n	8007dda <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8007e06:	2001      	movs	r0, #1
}
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop

08007e0c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007e0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007e0e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d010      	beq.n	8007e3a <HAL_SDRAM_SendCommand+0x2e>
 8007e18:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007e1e:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007e24:	f000 fbf8 	bl	8008618 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e28:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8007e2a:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e2c:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007e2e:	bf0c      	ite	eq
 8007e30:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007e32:	2301      	movne	r3, #1
 8007e34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8007e3a:	4618      	mov	r0, r3
}
 8007e3c:	bd38      	pop	{r3, r4, r5, pc}
 8007e3e:	bf00      	nop

08007e40 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007e40:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d00c      	beq.n	8007e64 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e4a:	2302      	movs	r3, #2
{
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007e50:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e52:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007e56:	f000 fbf5 	bl	8008644 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e5a:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8007e5c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007e62:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007e64:	4618      	mov	r0, r3
}
 8007e66:	4770      	bx	lr

08007e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8007e68:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8007e6a:	4601      	mov	r1, r0
{
 8007e6c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2036      	movs	r0, #54	; 0x36
 8007e72:	f7ff f9bd 	bl	80071f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007e76:	2036      	movs	r0, #54	; 0x36
 8007e78:	f7ff f9f0 	bl	800725c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007e7c:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e7e:	a901      	add	r1, sp, #4
 8007e80:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e84:	f042 0210 	orr.w	r2, r2, #16
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	9302      	str	r3, [sp, #8]
 8007e92:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e94:	f7ff ff74 	bl	8007d80 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8007e98:	9b06      	ldr	r3, [sp, #24]
 8007e9a:	b9c3      	cbnz	r3, 8007ece <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7ff ff50 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8007ea2:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 8007ea4:	4c10      	ldr	r4, [pc, #64]	; (8007ee8 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8007ea6:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007eaa:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 8007eae:	490f      	ldr	r1, [pc, #60]	; (8007eec <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8007eb0:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8007eb2:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007eb4:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 8007eb6:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 8007eb8:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007eba:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ebc:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ebe:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8007ec0:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8007ec2:	f000 fbd7 	bl	8008674 <HAL_TIM_Base_Init>
 8007ec6:	b130      	cbz	r0, 8007ed6 <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007ec8:	2001      	movs	r0, #1
}
 8007eca:	b009      	add	sp, #36	; 0x24
 8007ecc:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007ece:	f7ff ff37 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
 8007ed2:	0040      	lsls	r0, r0, #1
 8007ed4:	e7e4      	b.n	8007ea0 <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fc50 	bl	800877c <HAL_TIM_Base_Start_IT>
}
 8007edc:	b009      	add	sp, #36	; 0x24
 8007ede:	bd30      	pop	{r4, r5, pc}
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	431bde83 	.word	0x431bde83
 8007ee8:	20002c18 	.word	0x20002c18
 8007eec:	40001000 	.word	0x40001000

08007ef0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8007ef0:	f7ff b946 	b.w	8007180 <HAL_IncTick>

08007ef4 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <TIM6_DAC_IRQHandler+0x8>)
 8007ef6:	f000 bc5f 	b.w	80087b8 <HAL_TIM_IRQHandler>
 8007efa:	bf00      	nop
 8007efc:	20002c18 	.word	0x20002c18

08007f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f04:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f06:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007f08:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d147      	bne.n	8007f9e <HAL_UART_Transmit+0x9e>
 8007f0e:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8007f10:	2900      	cmp	r1, #0
 8007f12:	d048      	beq.n	8007fa6 <HAL_UART_Transmit+0xa6>
 8007f14:	fab2 f782 	clz	r7, r2
 8007f18:	9201      	str	r2, [sp, #4]
 8007f1a:	097f      	lsrs	r7, r7, #5
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	d142      	bne.n	8007fa6 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8007f20:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8007f24:	4605      	mov	r5, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d039      	beq.n	8007f9e <HAL_UART_Transmit+0x9e>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8007f2c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2e:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8007f30:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f34:	6743      	str	r3, [r0, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007f36:	f7ff f92f 	bl	8007198 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3a:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8007f3c:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8007f3e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8007f44:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f48:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4c:	f000 8083 	beq.w	8008056 <HAL_UART_Transmit+0x156>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8007f50:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8007f54:	2200      	movs	r2, #0
 8007f56:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8007f58:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8007f5a:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8007f5e:	b1ab      	cbz	r3, 8007f8c <HAL_UART_Transmit+0x8c>
 8007f60:	1c71      	adds	r1, r6, #1
 8007f62:	d124      	bne.n	8007fae <HAL_UART_Transmit+0xae>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f64:	69e2      	ldr	r2, [r4, #28]
 8007f66:	0612      	lsls	r2, r2, #24
 8007f68:	d5fc      	bpl.n	8007f64 <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 8007f6a:	f1b9 0f00 	cmp.w	r9, #0
 8007f6e:	d034      	beq.n	8007fda <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f70:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007f74:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8007f76:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007f82:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e9      	bne.n	8007f60 <HAL_UART_Transmit+0x60>
 8007f8c:	1c71      	adds	r1, r6, #1
 8007f8e:	d129      	bne.n	8007fe4 <HAL_UART_Transmit+0xe4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f90:	69e3      	ldr	r3, [r4, #28]
 8007f92:	065a      	lsls	r2, r3, #25
 8007f94:	d5fc      	bpl.n	8007f90 <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 8007f96:	2320      	movs	r3, #32
    return HAL_OK;
 8007f98:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8007f9a:	676b      	str	r3, [r5, #116]	; 0x74
    return HAL_OK;
 8007f9c:	e000      	b.n	8007fa0 <HAL_UART_Transmit+0xa0>
    return HAL_BUSY;
 8007f9e:	2002      	movs	r0, #2
}
 8007fa0:	b003      	add	sp, #12
 8007fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8007fa6:	2001      	movs	r0, #1
}
 8007fa8:	b003      	add	sp, #12
 8007faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fae:	69e3      	ldr	r3, [r4, #28]
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	d4da      	bmi.n	8007f6a <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb4:	f7ff f8f0 	bl	8007198 <HAL_GetTick>
 8007fb8:	eba0 0008 	sub.w	r0, r0, r8
 8007fbc:	4286      	cmp	r6, r0
 8007fbe:	d339      	bcc.n	8008034 <HAL_UART_Transmit+0x134>
 8007fc0:	fab6 f386 	clz	r3, r6
 8007fc4:	095b      	lsrs	r3, r3, #5
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d134      	bne.n	8008034 <HAL_UART_Transmit+0x134>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fca:	682c      	ldr	r4, [r5, #0]
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	0752      	lsls	r2, r2, #29
 8007fd0:	d5c6      	bpl.n	8007f60 <HAL_UART_Transmit+0x60>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fd2:	69e2      	ldr	r2, [r4, #28]
 8007fd4:	0510      	lsls	r0, r2, #20
 8007fd6:	d5c3      	bpl.n	8007f60 <HAL_UART_Transmit+0x60>
 8007fd8:	e019      	b.n	800800e <HAL_UART_Transmit+0x10e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fda:	f837 3b02 	ldrh.w	r3, [r7], #2
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	e7c7      	b.n	8007f74 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe4:	69e3      	ldr	r3, [r4, #28]
 8007fe6:	065b      	lsls	r3, r3, #25
 8007fe8:	d4d5      	bmi.n	8007f96 <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fea:	f7ff f8d5 	bl	8007198 <HAL_GetTick>
 8007fee:	eba0 0008 	sub.w	r0, r0, r8
 8007ff2:	fab6 f386 	clz	r3, r6
 8007ff6:	4286      	cmp	r6, r0
 8007ff8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8007ffc:	d31a      	bcc.n	8008034 <HAL_UART_Transmit+0x134>
 8007ffe:	b9cb      	cbnz	r3, 8008034 <HAL_UART_Transmit+0x134>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008000:	682c      	ldr	r4, [r5, #0]
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	0757      	lsls	r7, r2, #29
 8008006:	d5c1      	bpl.n	8007f8c <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008008:	69e2      	ldr	r2, [r4, #28]
 800800a:	0510      	lsls	r0, r2, #20
 800800c:	d5be      	bpl.n	8007f8c <HAL_UART_Transmit+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800800e:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8008012:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008014:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008016:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008018:	6821      	ldr	r1, [r4, #0]
 800801a:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800801e:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008020:	68a1      	ldr	r1, [r4, #8]
 8008022:	f021 0101 	bic.w	r1, r1, #1
 8008026:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008028:	676a      	str	r2, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800802a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800802e:	67aa      	str	r2, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008030:	67ea      	str	r2, [r5, #124]	; 0x7c
 8008032:	e7b5      	b.n	8007fa0 <HAL_UART_Transmit+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008034:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008036:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8008038:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 800803a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008042:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800804c:	6769      	str	r1, [r5, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800804e:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8008052:	67a9      	str	r1, [r5, #120]	; 0x78
 8008054:	e7a4      	b.n	8007fa0 <HAL_UART_Transmit+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008056:	692b      	ldr	r3, [r5, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f47f af79 	bne.w	8007f50 <HAL_UART_Transmit+0x50>
 800805e:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8008060:	4699      	mov	r9, r3
 8008062:	e775      	b.n	8007f50 <HAL_UART_Transmit+0x50>

08008064 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008064:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008066:	07da      	lsls	r2, r3, #31
{
 8008068:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800806a:	d506      	bpl.n	800807a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800806c:	6801      	ldr	r1, [r0, #0]
 800806e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008070:	684a      	ldr	r2, [r1, #4]
 8008072:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008076:	4322      	orrs	r2, r4
 8008078:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800807a:	079c      	lsls	r4, r3, #30
 800807c:	d506      	bpl.n	800808c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800807e:	6801      	ldr	r1, [r0, #0]
 8008080:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008082:	684a      	ldr	r2, [r1, #4]
 8008084:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008088:	4322      	orrs	r2, r4
 800808a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800808c:	0759      	lsls	r1, r3, #29
 800808e:	d506      	bpl.n	800809e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008090:	6801      	ldr	r1, [r0, #0]
 8008092:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008094:	684a      	ldr	r2, [r1, #4]
 8008096:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800809a:	4322      	orrs	r2, r4
 800809c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800809e:	071a      	lsls	r2, r3, #28
 80080a0:	d506      	bpl.n	80080b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080a2:	6801      	ldr	r1, [r0, #0]
 80080a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80080a6:	684a      	ldr	r2, [r1, #4]
 80080a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080ac:	4322      	orrs	r2, r4
 80080ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080b0:	06dc      	lsls	r4, r3, #27
 80080b2:	d506      	bpl.n	80080c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080b4:	6801      	ldr	r1, [r0, #0]
 80080b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80080b8:	688a      	ldr	r2, [r1, #8]
 80080ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080be:	4322      	orrs	r2, r4
 80080c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080c2:	0699      	lsls	r1, r3, #26
 80080c4:	d506      	bpl.n	80080d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080c6:	6801      	ldr	r1, [r0, #0]
 80080c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80080ca:	688a      	ldr	r2, [r1, #8]
 80080cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d0:	4322      	orrs	r2, r4
 80080d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d4:	065a      	lsls	r2, r3, #25
 80080d6:	d50a      	bpl.n	80080ee <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80080dc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080de:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80080e6:	ea42 0204 	orr.w	r2, r2, r4
 80080ea:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ec:	d00b      	beq.n	8008106 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	d506      	bpl.n	8008100 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080f2:	6802      	ldr	r2, [r0, #0]
 80080f4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80080f6:	6853      	ldr	r3, [r2, #4]
 80080f8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6053      	str	r3, [r2, #4]
}
 8008100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008104:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008106:	684a      	ldr	r2, [r1, #4]
 8008108:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800810a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800810e:	4322      	orrs	r2, r4
 8008110:	604a      	str	r2, [r1, #4]
 8008112:	e7ec      	b.n	80080ee <UART_AdvFeatureConfig+0x8a>

08008114 <HAL_UART_Init>:
  if (huart == NULL)
 8008114:	2800      	cmp	r0, #0
 8008116:	d04f      	beq.n	80081b8 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008118:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800811a:	b570      	push	{r4, r5, r6, lr}
 800811c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800811e:	2b00      	cmp	r3, #0
 8008120:	d045      	beq.n	80081ae <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 8008122:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008124:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008126:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8008128:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800812a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800812c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800812e:	4302      	orrs	r2, r0
 8008130:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8008132:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008136:	4dbc      	ldr	r5, [pc, #752]	; (8008428 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008138:	4302      	orrs	r2, r0
 800813a:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800813c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800813e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008140:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008142:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008144:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008146:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008148:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800814a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800814c:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 800814e:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008152:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008154:	4db5      	ldr	r5, [pc, #724]	; (800842c <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008156:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800815a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800815c:	ea41 0106 	orr.w	r1, r1, r6
 8008160:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008162:	6899      	ldr	r1, [r3, #8]
 8008164:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008168:	ea42 0201 	orr.w	r2, r2, r1
 800816c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800816e:	d025      	beq.n	80081bc <HAL_UART_Init+0xa8>
 8008170:	4aaf      	ldr	r2, [pc, #700]	; (8008430 <HAL_UART_Init+0x31c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d044      	beq.n	8008200 <HAL_UART_Init+0xec>
 8008176:	4aaf      	ldr	r2, [pc, #700]	; (8008434 <HAL_UART_Init+0x320>)
 8008178:	4293      	cmp	r3, r2
 800817a:	f000 80f3 	beq.w	8008364 <HAL_UART_Init+0x250>
 800817e:	4aae      	ldr	r2, [pc, #696]	; (8008438 <HAL_UART_Init+0x324>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d045      	beq.n	8008210 <HAL_UART_Init+0xfc>
 8008184:	4aad      	ldr	r2, [pc, #692]	; (800843c <HAL_UART_Init+0x328>)
 8008186:	4293      	cmp	r3, r2
 8008188:	f000 80d8 	beq.w	800833c <HAL_UART_Init+0x228>
 800818c:	4aac      	ldr	r2, [pc, #688]	; (8008440 <HAL_UART_Init+0x32c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	f000 8188 	beq.w	80084a4 <HAL_UART_Init+0x390>
 8008194:	4aab      	ldr	r2, [pc, #684]	; (8008444 <HAL_UART_Init+0x330>)
 8008196:	4293      	cmp	r3, r2
 8008198:	f000 8198 	beq.w	80084cc <HAL_UART_Init+0x3b8>
 800819c:	4aaa      	ldr	r2, [pc, #680]	; (8008448 <HAL_UART_Init+0x334>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	f000 815e 	beq.w	8008460 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 80081a4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80081a6:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80081a8:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80081ae:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80081b2:	f7f8 fbcb 	bl	800094c <HAL_UART_MspInit>
 80081b6:	e7b4      	b.n	8008122 <HAL_UART_Init+0xe>
    return HAL_ERROR;
 80081b8:	2001      	movs	r0, #1
}
 80081ba:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081bc:	4ba3      	ldr	r3, [pc, #652]	; (800844c <HAL_UART_Init+0x338>)
 80081be:	4aa4      	ldr	r2, [pc, #656]	; (8008450 <HAL_UART_Init+0x33c>)
 80081c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80081ce:	d02f      	beq.n	8008230 <HAL_UART_Init+0x11c>
    switch (clocksource)
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d8e7      	bhi.n	80081a4 <HAL_UART_Init+0x90>
 80081d4:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <HAL_UART_Init+0xc8>)
 80081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081da:	bf00      	nop
 80081dc:	0800832b 	.word	0x0800832b
 80081e0:	0800826d 	.word	0x0800826d
 80081e4:	0800837f 	.word	0x0800837f
 80081e8:	080081a5 	.word	0x080081a5
 80081ec:	08008353 	.word	0x08008353
 80081f0:	080081a5 	.word	0x080081a5
 80081f4:	080081a5 	.word	0x080081a5
 80081f8:	080081a5 	.word	0x080081a5
 80081fc:	0800838f 	.word	0x0800838f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008200:	4b92      	ldr	r3, [pc, #584]	; (800844c <HAL_UART_Init+0x338>)
 8008202:	4a94      	ldr	r2, [pc, #592]	; (8008454 <HAL_UART_Init+0x340>)
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008208:	f003 030c 	and.w	r3, r3, #12
 800820c:	5cd3      	ldrb	r3, [r2, r3]
 800820e:	e7dc      	b.n	80081ca <HAL_UART_Init+0xb6>
 8008210:	4b8e      	ldr	r3, [pc, #568]	; (800844c <HAL_UART_Init+0x338>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	f000 8096 	beq.w	800834c <HAL_UART_Init+0x238>
 8008220:	d97d      	bls.n	800831e <HAL_UART_Init+0x20a>
 8008222:	2b80      	cmp	r3, #128	; 0x80
 8008224:	f000 80a8 	beq.w	8008378 <HAL_UART_Init+0x264>
 8008228:	2bc0      	cmp	r3, #192	; 0xc0
 800822a:	f000 80c5 	beq.w	80083b8 <HAL_UART_Init+0x2a4>
 800822e:	e7b9      	b.n	80081a4 <HAL_UART_Init+0x90>
    switch (clocksource)
 8008230:	2b08      	cmp	r3, #8
 8008232:	d8b7      	bhi.n	80081a4 <HAL_UART_Init+0x90>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <HAL_UART_Init+0x128>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	08008421 	.word	0x08008421
 8008240:	080083f7 	.word	0x080083f7
 8008244:	08008411 	.word	0x08008411
 8008248:	080081a5 	.word	0x080081a5
 800824c:	0800840b 	.word	0x0800840b
 8008250:	080081a5 	.word	0x080081a5
 8008254:	080081a5 	.word	0x080081a5
 8008258:	080081a5 	.word	0x080081a5
 800825c:	080083bf 	.word	0x080083bf
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008260:	2b00      	cmp	r3, #0
 8008262:	d19f      	bne.n	80081a4 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008264:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008268:	f000 80c5 	beq.w	80083f6 <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800826c:	f7ff fd78 	bl	8007d60 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008270:	6863      	ldr	r3, [r4, #4]
 8008272:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8008276:	fbb2 f2f3 	udiv	r2, r2, r3
 800827a:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800827c:	f1a2 0110 	sub.w	r1, r2, #16
 8008280:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008284:	4299      	cmp	r1, r3
 8008286:	d88d      	bhi.n	80081a4 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 8008288:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 800828a:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 800828c:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 800828e:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008292:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008294:	2a00      	cmp	r2, #0
 8008296:	f040 8082 	bne.w	800839e <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800829a:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800829e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082aa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b4:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80082b6:	f7fe ff6f 	bl	8007198 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ba:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80082bc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	0710      	lsls	r0, r2, #28
 80082c2:	d407      	bmi.n	80082d4 <HAL_UART_Init+0x1c0>
  huart->gState = HAL_UART_STATE_READY;
 80082c4:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80082c6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80082c8:	6762      	str	r2, [r4, #116]	; 0x74
  return HAL_OK;
 80082ca:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80082cc:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80082ce:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d4:	69dd      	ldr	r5, [r3, #28]
 80082d6:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80082da:	d1f3      	bne.n	80082c4 <HAL_UART_Init+0x1b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082dc:	f7fe ff5c 	bl	8007198 <HAL_GetTick>
 80082e0:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082e2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082e4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80082e8:	f080 80cd 	bcs.w	8008486 <HAL_UART_Init+0x372>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	0751      	lsls	r1, r2, #29
 80082f0:	d5f0      	bpl.n	80082d4 <HAL_UART_Init+0x1c0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	0512      	lsls	r2, r2, #20
 80082f6:	d5ed      	bpl.n	80082d4 <HAL_UART_Init+0x1c0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 80082fc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80082fe:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008300:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008308:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830a:	6899      	ldr	r1, [r3, #8]
 800830c:	f021 0101 	bic.w	r1, r1, #1
 8008310:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008312:	6762      	str	r2, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 8008314:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8008318:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800831a:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800831c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800831e:	2b00      	cmp	r3, #0
 8008320:	f47f af40 	bne.w	80081a4 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008324:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008328:	d07a      	beq.n	8008420 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800832a:	f7ff fd09 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8008334:	fbb2 f2f3 	udiv	r2, r2, r3
 8008338:	b292      	uxth	r2, r2
 800833a:	e79f      	b.n	800827c <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800833c:	4b43      	ldr	r3, [pc, #268]	; (800844c <HAL_UART_Init+0x338>)
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834a:	d12d      	bne.n	80083a8 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800834c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008350:	d05b      	beq.n	800840a <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8008352:	f7ff fcc1 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800835c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008360:	b292      	uxth	r2, r2
 8008362:	e78b      	b.n	800827c <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008364:	4b39      	ldr	r3, [pc, #228]	; (800844c <HAL_UART_Init+0x338>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800836e:	2b10      	cmp	r3, #16
 8008370:	d0ec      	beq.n	800834c <HAL_UART_Init+0x238>
 8008372:	d9d4      	bls.n	800831e <HAL_UART_Init+0x20a>
 8008374:	2b20      	cmp	r3, #32
 8008376:	d13b      	bne.n	80083f0 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008378:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800837c:	d048      	beq.n	8008410 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	4a35      	ldr	r2, [pc, #212]	; (8008458 <HAL_UART_Init+0x344>)
 8008382:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008386:	fbb2 f2f3 	udiv	r2, r2, r3
 800838a:	b292      	uxth	r2, r2
 800838c:	e776      	b.n	800827c <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	085a      	lsrs	r2, r3, #1
 8008392:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8008396:	fbb2 f2f3 	udiv	r2, r2, r3
 800839a:	b292      	uxth	r2, r2
 800839c:	e76e      	b.n	800827c <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fe60 	bl	8008064 <UART_AdvFeatureConfig>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	e778      	b.n	800829a <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a8:	d9b9      	bls.n	800831e <HAL_UART_Init+0x20a>
 80083aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ae:	d0e3      	beq.n	8008378 <HAL_UART_Init+0x264>
 80083b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083b4:	f47f aef6 	bne.w	80081a4 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80083bc:	d1e7      	bne.n	800838e <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80083be:	6862      	ldr	r2, [r4, #4]
 80083c0:	0853      	lsrs	r3, r2, #1
 80083c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80083c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ca:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083cc:	f1a3 0110 	sub.w	r1, r3, #16
 80083d0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80083d4:	4291      	cmp	r1, r2
 80083d6:	f63f aee5 	bhi.w	80081a4 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083da:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083de:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 80083e2:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 80083ea:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 80083ee:	e750      	b.n	8008292 <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083f0:	2b30      	cmp	r3, #48	; 0x30
 80083f2:	d0e1      	beq.n	80083b8 <HAL_UART_Init+0x2a4>
 80083f4:	e6d6      	b.n	80081a4 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f6:	f7ff fcb3 	bl	8007d60 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083fa:	6862      	ldr	r2, [r4, #4]
 80083fc:	0853      	lsrs	r3, r2, #1
 80083fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008402:	fbb3 f3f2 	udiv	r3, r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	e7e0      	b.n	80083cc <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 800840a:	f7ff fc65 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 800840e:	e7f4      	b.n	80083fa <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008410:	6862      	ldr	r2, [r4, #4]
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <HAL_UART_Init+0x348>)
 8008414:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008418:	fbb3 f3f2 	udiv	r3, r3, r2
 800841c:	b29b      	uxth	r3, r3
 800841e:	e7d5      	b.n	80083cc <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008420:	f7ff fc8e 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
 8008424:	e7e9      	b.n	80083fa <HAL_UART_Init+0x2e6>
 8008426:	bf00      	nop
 8008428:	efff69f3 	.word	0xefff69f3
 800842c:	40011000 	.word	0x40011000
 8008430:	40004400 	.word	0x40004400
 8008434:	40004800 	.word	0x40004800
 8008438:	40004c00 	.word	0x40004c00
 800843c:	40005000 	.word	0x40005000
 8008440:	40011400 	.word	0x40011400
 8008444:	40007800 	.word	0x40007800
 8008448:	40007c00 	.word	0x40007c00
 800844c:	40023800 	.word	0x40023800
 8008450:	0800b4f8 	.word	0x0800b4f8
 8008454:	0800b4fc 	.word	0x0800b4fc
 8008458:	00f42400 	.word	0x00f42400
 800845c:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008460:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <HAL_UART_Init+0x3e0>)
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008466:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800846a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800846e:	f43f af6d 	beq.w	800834c <HAL_UART_Init+0x238>
 8008472:	f67f af54 	bls.w	800831e <HAL_UART_Init+0x20a>
 8008476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847a:	f43f af7d 	beq.w	8008378 <HAL_UART_Init+0x264>
 800847e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008482:	d099      	beq.n	80083b8 <HAL_UART_Init+0x2a4>
 8008484:	e68e      	b.n	80081a4 <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008486:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008488:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 800848a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800848c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008490:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800849a:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800849c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80084a0:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a4:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <HAL_UART_Init+0x3e0>)
 80084a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b2:	f43f af4b 	beq.w	800834c <HAL_UART_Init+0x238>
 80084b6:	f67f aed3 	bls.w	8008260 <HAL_UART_Init+0x14c>
 80084ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084be:	f43f af5b 	beq.w	8008378 <HAL_UART_Init+0x264>
 80084c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084c6:	f43f af77 	beq.w	80083b8 <HAL_UART_Init+0x2a4>
 80084ca:	e66b      	b.n	80081a4 <HAL_UART_Init+0x90>
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_UART_Init+0x3e0>)
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084da:	f43f af37 	beq.w	800834c <HAL_UART_Init+0x238>
 80084de:	f67f af1e 	bls.w	800831e <HAL_UART_Init+0x20a>
 80084e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e6:	f43f af47 	beq.w	8008378 <HAL_UART_Init+0x264>
 80084ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084ee:	f43f af63 	beq.w	80083b8 <HAL_UART_Init+0x2a4>
 80084f2:	e657      	b.n	80081a4 <HAL_UART_Init+0x90>
 80084f4:	40023800 	.word	0x40023800

080084f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80084f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80084fc:	680f      	ldr	r7, [r1, #0]
 80084fe:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8008502:	2f01      	cmp	r7, #1
 8008504:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8008508:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 800850c:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8008510:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8008514:	d012      	beq.n	800853c <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008516:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008518:	4f15      	ldr	r7, [pc, #84]	; (8008570 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800851a:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800851c:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008520:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008522:	4322      	orrs	r2, r4
 8008524:	ea42 0308 	orr.w	r3, r2, r8
 8008528:	ea43 030c 	orr.w	r3, r3, ip
 800852c:	4333      	orrs	r3, r6
 800852e:	432b      	orrs	r3, r5
 8008530:	430b      	orrs	r3, r1
 8008532:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008534:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8008536:	2000      	movs	r0, #0
 8008538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800853c:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008540:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008542:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008544:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008548:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800854c:	4c08      	ldr	r4, [pc, #32]	; (8008570 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800854e:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008552:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008554:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008558:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800855c:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800855e:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008560:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008562:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008564:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008566:	6043      	str	r3, [r0, #4]
}
 8008568:	2000      	movs	r0, #0
 800856a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856e:	bf00      	nop
 8008570:	ffff8000 	.word	0xffff8000

08008574 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800857a:	2a01      	cmp	r2, #1
 800857c:	68cf      	ldr	r7, [r1, #12]
 800857e:	694e      	ldr	r6, [r1, #20]
 8008580:	f103 33ff 	add.w	r3, r3, #4294967295
 8008584:	684d      	ldr	r5, [r1, #4]
 8008586:	f107 37ff 	add.w	r7, r7, #4294967295
 800858a:	688c      	ldr	r4, [r1, #8]
 800858c:	f106 36ff 	add.w	r6, r6, #4294967295
 8008590:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8008594:	f105 35ff 	add.w	r5, r5, #4294967295
 8008598:	6809      	ldr	r1, [r1, #0]
 800859a:	f104 34ff 	add.w	r4, r4, #4294967295
 800859e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085a2:	ea4f 3707 	mov.w	r7, r7, lsl #12
 80085a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80085aa:	ea4f 5606 	mov.w	r6, r6, lsl #20
 80085ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80085b2:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80085b6:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80085ba:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 80085be:	d012      	beq.n	80085e6 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80085c0:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80085c4:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80085c6:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80085ca:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80085ce:	ea42 0305 	orr.w	r3, r2, r5
 80085d2:	430b      	orrs	r3, r1
 80085d4:	ea43 030e 	orr.w	r3, r3, lr
 80085d8:	ea43 030c 	orr.w	r3, r3, ip
 80085dc:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80085de:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80085e0:	2000      	movs	r0, #0
 80085e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80085e6:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80085e8:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80085ec:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80085ee:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80085f2:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80085f4:	4e07      	ldr	r6, [pc, #28]	; (8008614 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80085f6:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80085fa:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80085fe:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008600:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008604:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008606:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008608:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800860a:	60c3      	str	r3, [r0, #12]
}
 800860c:	2000      	movs	r0, #0
 800860e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008612:	bf00      	nop
 8008614:	ff0f0fff 	.word	0xff0f0fff

08008618 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008618:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 800861a:	2200      	movs	r2, #0
{
 800861c:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800861e:	684d      	ldr	r5, [r1, #4]
{
 8008620:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008622:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8008624:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 8008626:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008628:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800862a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800862e:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008632:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008634:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8008638:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800863a:	9b01      	ldr	r3, [sp, #4]
 800863c:	6123      	str	r3, [r4, #16]
}
 800863e:	b002      	add	sp, #8
 8008640:	bc30      	pop	{r4, r5}
 8008642:	4770      	bx	lr

08008644 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008644:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8008646:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8008648:	6953      	ldr	r3, [r2, #20]
 800864a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800864e:	6151      	str	r1, [r2, #20]
}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop

08008654 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008656:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800865a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800865e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008666:	6099      	str	r1, [r3, #8]
#endif
}
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	e000ed00 	.word	0xe000ed00

08008670 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008674:	2800      	cmp	r0, #0
 8008676:	d065      	beq.n	8008744 <HAL_TIM_Base_Init+0xd0>
{
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800867a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800867e:	4604      	mov	r4, r0
 8008680:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008684:	2b00      	cmp	r3, #0
 8008686:	d03b      	beq.n	8008700 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800868a:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	4e36      	ldr	r6, [pc, #216]	; (8008768 <HAL_TIM_Base_Init+0xf4>)
 800868e:	4f37      	ldr	r7, [pc, #220]	; (800876c <HAL_TIM_Base_Init+0xf8>)
 8008690:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008694:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8008698:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 800869c:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80086a0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a2:	fab6 f686 	clz	r6, r6
 80086a6:	fab7 f787 	clz	r7, r7
 80086aa:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80086ae:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80086b2:	d02a      	beq.n	800870a <HAL_TIM_Base_Init+0x96>
 80086b4:	bb4e      	cbnz	r6, 800870a <HAL_TIM_Base_Init+0x96>
 80086b6:	492e      	ldr	r1, [pc, #184]	; (8008770 <HAL_TIM_Base_Init+0xfc>)
 80086b8:	428a      	cmp	r2, r1
 80086ba:	d045      	beq.n	8008748 <HAL_TIM_Base_Init+0xd4>
 80086bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086c0:	428a      	cmp	r2, r1
 80086c2:	d041      	beq.n	8008748 <HAL_TIM_Base_Init+0xd4>
 80086c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086c8:	428a      	cmp	r2, r1
 80086ca:	d042      	beq.n	8008752 <HAL_TIM_Base_Init+0xde>
 80086cc:	2f00      	cmp	r7, #0
 80086ce:	d140      	bne.n	8008752 <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d0:	4928      	ldr	r1, [pc, #160]	; (8008774 <HAL_TIM_Base_Init+0x100>)
 80086d2:	428a      	cmp	r2, r1
 80086d4:	d01e      	beq.n	8008714 <HAL_TIM_Base_Init+0xa0>
 80086d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086da:	428a      	cmp	r2, r1
 80086dc:	d01a      	beq.n	8008714 <HAL_TIM_Base_Init+0xa0>
 80086de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086e2:	428a      	cmp	r2, r1
 80086e4:	d016      	beq.n	8008714 <HAL_TIM_Base_Init+0xa0>
 80086e6:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80086ea:	428a      	cmp	r2, r1
 80086ec:	d012      	beq.n	8008714 <HAL_TIM_Base_Init+0xa0>
 80086ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086f2:	428a      	cmp	r2, r1
 80086f4:	d00e      	beq.n	8008714 <HAL_TIM_Base_Init+0xa0>
 80086f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086fa:	428a      	cmp	r2, r1
 80086fc:	d10e      	bne.n	800871c <HAL_TIM_Base_Init+0xa8>
 80086fe:	e009      	b.n	8008714 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8008700:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008704:	f7ff ffb4 	bl	8008670 <HAL_TIM_Base_MspInit>
 8008708:	e7be      	b.n	8008688 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800870a:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800870e:	68a0      	ldr	r0, [r4, #8]
 8008710:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008718:	6920      	ldr	r0, [r4, #16]
 800871a:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800871c:	69a1      	ldr	r1, [r4, #24]
 800871e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008722:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008724:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008726:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008728:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800872a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800872c:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800872e:	b936      	cbnz	r6, 800873e <HAL_TIM_Base_Init+0xca>
 8008730:	b92f      	cbnz	r7, 800873e <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008732:	2301      	movs	r3, #1
  return HAL_OK;
 8008734:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8008736:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8008738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800873c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 800873e:	6963      	ldr	r3, [r4, #20]
 8008740:	6313      	str	r3, [r2, #48]	; 0x30
 8008742:	e7f6      	b.n	8008732 <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8008744:	2001      	movs	r0, #1
}
 8008746:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800874c:	68a1      	ldr	r1, [r4, #8]
 800874e:	430b      	orrs	r3, r1
 8008750:	e7e0      	b.n	8008714 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008752:	4909      	ldr	r1, [pc, #36]	; (8008778 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008758:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800875a:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800875c:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008760:	d0d8      	beq.n	8008714 <HAL_TIM_Base_Init+0xa0>
 8008762:	2f00      	cmp	r7, #0
 8008764:	d1d6      	bne.n	8008714 <HAL_TIM_Base_Init+0xa0>
 8008766:	e7b3      	b.n	80086d0 <HAL_TIM_Base_Init+0x5c>
 8008768:	40010000 	.word	0x40010000
 800876c:	40010400 	.word	0x40010400
 8008770:	40000400 	.word	0x40000400
 8008774:	40014000 	.word	0x40014000
 8008778:	40000c00 	.word	0x40000c00

0800877c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800877c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008780:	68d9      	ldr	r1, [r3, #12]
 8008782:	f041 0101 	orr.w	r1, r1, #1
 8008786:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008788:	6899      	ldr	r1, [r3, #8]
 800878a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878c:	2a06      	cmp	r2, #6
 800878e:	d006      	beq.n	800879e <HAL_TIM_Base_Start_IT+0x22>
 8008790:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008794:	d003      	beq.n	800879e <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
}
 800879e:	2000      	movs	r0, #0
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	00010007 	.word	0x00010007

080087a8 <HAL_TIM_OC_DelayElapsedCallback>:
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop

080087ac <HAL_TIM_IC_CaptureCallback>:
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop

080087b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop

080087b4 <HAL_TIM_TriggerCallback>:
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop

080087b8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087b8:	6803      	ldr	r3, [r0, #0]
 80087ba:	691a      	ldr	r2, [r3, #16]
 80087bc:	0791      	lsls	r1, r2, #30
{
 80087be:	b510      	push	{r4, lr}
 80087c0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087c2:	d502      	bpl.n	80087ca <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	0792      	lsls	r2, r2, #30
 80087c8:	d468      	bmi.n	800889c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	0752      	lsls	r2, r2, #29
 80087ce:	d502      	bpl.n	80087d6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	0750      	lsls	r0, r2, #29
 80087d4:	d44f      	bmi.n	8008876 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d6:	691a      	ldr	r2, [r3, #16]
 80087d8:	0711      	lsls	r1, r2, #28
 80087da:	d502      	bpl.n	80087e2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	0712      	lsls	r2, r2, #28
 80087e0:	d437      	bmi.n	8008852 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	06d0      	lsls	r0, r2, #27
 80087e6:	d502      	bpl.n	80087ee <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	06d1      	lsls	r1, r2, #27
 80087ec:	d41e      	bmi.n	800882c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	07d2      	lsls	r2, r2, #31
 80087f2:	d502      	bpl.n	80087fa <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	07d0      	lsls	r0, r2, #31
 80087f8:	d469      	bmi.n	80088ce <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	0611      	lsls	r1, r2, #24
 80087fe:	d502      	bpl.n	8008806 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	0612      	lsls	r2, r2, #24
 8008804:	d46b      	bmi.n	80088de <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	05d0      	lsls	r0, r2, #23
 800880a:	d502      	bpl.n	8008812 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	0611      	lsls	r1, r2, #24
 8008810:	d46d      	bmi.n	80088ee <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	0652      	lsls	r2, r2, #25
 8008816:	d502      	bpl.n	800881e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	0650      	lsls	r0, r2, #25
 800881c:	d46f      	bmi.n	80088fe <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	0691      	lsls	r1, r2, #26
 8008822:	d502      	bpl.n	800882a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	0692      	lsls	r2, r2, #26
 8008828:	d449      	bmi.n	80088be <HAL_TIM_IRQHandler+0x106>
}
 800882a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800882c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008830:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8008832:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008834:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008836:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008838:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800883a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800883e:	d16f      	bne.n	8008920 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008840:	f7ff ffb2 	bl	80087a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008844:	4620      	mov	r0, r4
 8008846:	f7ff ffb3 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884a:	2200      	movs	r2, #0
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	7722      	strb	r2, [r4, #28]
 8008850:	e7cd      	b.n	80087ee <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008852:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008856:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8008858:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800885a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800885c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800885e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008860:	079b      	lsls	r3, r3, #30
 8008862:	d15a      	bne.n	800891a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008864:	f7ff ffa0 	bl	80087a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008868:	4620      	mov	r0, r4
 800886a:	f7ff ffa1 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886e:	2200      	movs	r2, #0
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	7722      	strb	r2, [r4, #28]
 8008874:	e7b5      	b.n	80087e2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008876:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800887a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800887c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800887e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008880:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008882:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008884:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008888:	d144      	bne.n	8008914 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800888a:	f7ff ff8d 	bl	80087a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff ff8e 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008894:	2200      	movs	r2, #0
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	7722      	strb	r2, [r4, #28]
 800889a:	e79c      	b.n	80087d6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800889c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088a0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088a2:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088a4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088a6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088a8:	0799      	lsls	r1, r3, #30
 80088aa:	d130      	bne.n	800890e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ac:	f7ff ff7c 	bl	80087a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b0:	4620      	mov	r0, r4
 80088b2:	f7ff ff7d 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b6:	2200      	movs	r2, #0
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	7722      	strb	r2, [r4, #28]
 80088bc:	e785      	b.n	80087ca <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80088c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088c4:	611a      	str	r2, [r3, #16]
}
 80088c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80088ca:	f000 b82d 	b.w	8008928 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088ce:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80088d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80088d6:	f7ff fb0b 	bl	8007ef0 <HAL_TIM_PeriodElapsedCallback>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	e78d      	b.n	80087fa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088de:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80088e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80088e6:	f000 f821 	bl	800892c <HAL_TIMEx_BreakCallback>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	e78b      	b.n	8008806 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80088f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80088f6:	f000 f81b 	bl	8008930 <HAL_TIMEx_Break2Callback>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	e789      	b.n	8008812 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8008902:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008904:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008906:	f7ff ff55 	bl	80087b4 <HAL_TIM_TriggerCallback>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	e787      	b.n	800881e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800890e:	f7ff ff4d 	bl	80087ac <HAL_TIM_IC_CaptureCallback>
 8008912:	e7d0      	b.n	80088b6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8008914:	f7ff ff4a 	bl	80087ac <HAL_TIM_IC_CaptureCallback>
 8008918:	e7bc      	b.n	8008894 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800891a:	f7ff ff47 	bl	80087ac <HAL_TIM_IC_CaptureCallback>
 800891e:	e7a6      	b.n	800886e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8008920:	f7ff ff44 	bl	80087ac <HAL_TIM_IC_CaptureCallback>
 8008924:	e791      	b.n	800884a <HAL_TIM_IRQHandler+0x92>
 8008926:	bf00      	nop

08008928 <HAL_TIMEx_CommutCallback>:
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop

0800892c <HAL_TIMEx_BreakCallback>:
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop

08008930 <HAL_TIMEx_Break2Callback>:
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop

08008934 <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 8008934:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008936:	4c0e      	ldr	r4, [pc, #56]	; (8008970 <_tx_initialize_kernel_enter+0x3c>)
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800893e:	d00a      	beq.n	8008956 <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate
		 initialization is in progress.  Note that this variable is
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 8008940:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8008944:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 8008946:	f7f7 fc73 	bl	8000230 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the
		 ThreadX components and the application's initialization
		 function.  */
		_tx_initialize_high_level();
 800894a:	f001 f95d 	bl	8009c08 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <_tx_initialize_kernel_enter+0x40>)
 8008950:	6813      	ldr	r3, [r2, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 8008956:	4a08      	ldr	r2, [pc, #32]	; (8008978 <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 8008958:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 800895c:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 800895e:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 8008960:	f7f8 fa08 	bl	8000d74 <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 8008964:	2300      	movs	r3, #0
 8008966:	6023      	str	r3, [r4, #0]

#ifdef TX_SAFETY_CRITICAL
    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 800896c:	f7f7 bcb0 	b.w	80002d0 <_tx_thread_schedule>
 8008970:	2000019c 	.word	0x2000019c
 8008974:	20002cf0 	.word	0x20002cf0
 8008978:	200032a0 	.word	0x200032a0

0800897c <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	460d      	mov	r5, r1
 8008980:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8008982:	2100      	movs	r1, #0
 8008984:	2234      	movs	r2, #52	; 0x34
 8008986:	f001 fd4a 	bl	800a41e <memset>
 800898a:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800898c:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800898e:	6104      	str	r4, [r0, #16]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008990:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008994:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8008996:	490c      	ldr	r1, [pc, #48]	; (80089c8 <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8008998:	480c      	ldr	r0, [pc, #48]	; (80089cc <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800899a:	4e0d      	ldr	r6, [pc, #52]	; (80089d0 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 800899c:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800899e:	4d0d      	ldr	r5, [pc, #52]	; (80089d4 <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80089a0:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80089a2:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80089a4:	480c      	ldr	r0, [pc, #48]	; (80089d8 <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 80089a6:	b15a      	cbz	r2, 80089c0 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80089a8:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80089aa:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80089ac:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80089ae:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80089b0:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80089b4:	3201      	adds	r2, #1
 80089b6:	600a      	str	r2, [r1, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80089b8:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 80089bc:	2000      	movs	r0, #0
 80089be:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80089c0:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	e7f5      	b.n	80089b4 <_tx_mutex_create+0x38>
 80089c8:	2000328c 	.word	0x2000328c
 80089cc:	20002cd8 	.word	0x20002cd8
 80089d0:	4d555445 	.word	0x4d555445
 80089d4:	08009cf9 	.word	0x08009cf9
 80089d8:	20003290 	.word	0x20003290

080089dc <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80089de:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80089e2:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80089e4:	4a3b      	ldr	r2, [pc, #236]	; (8008ad4 <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80089e6:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 80089e8:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80089ea:	b9e3      	cbnz	r3, 8008a26 <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80089ec:	2301      	movs	r3, #1
 80089ee:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80089f2:	b1a4      	cbz	r4, 8008a1e <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80089f4:	6903      	ldr	r3, [r0, #16]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d103      	bne.n	8008a02 <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80089fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80089fc:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80089fe:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8008a00:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8008a02:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d044      	beq.n	8008a94 <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8008a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008a0c:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8008a0e:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8008a10:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8008a14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008a18:	3301      	adds	r3, #1
 8008a1a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a1e:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8008a22:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 8008a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8008a26:	68c2      	ldr	r2, [r0, #12]
 8008a28:	42a2      	cmp	r2, r4
 8008a2a:	d029      	beq.n	8008a80 <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 8008a2c:	b371      	cbz	r1, 8008a8c <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8008a2e:	4e2a      	ldr	r6, [pc, #168]	; (8008ad8 <_tx_mutex_get+0xfc>)
 8008a30:	6833      	ldr	r3, [r6, #0]
 8008a32:	bb5b      	cbnz	r3, 8008a8c <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 8008a34:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8008a38:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8008adc <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 8008a3c:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8008a3e:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8008a40:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 8008a42:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8008a46:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8008a4a:	bb43      	cbnz	r3, 8008a9e <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8008a4c:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008a4e:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 8008a52:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 8008a54:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8008a56:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 8008a5a:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 8008a5c:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008a5e:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008a60:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 8008a62:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8008a64:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008a68:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a6a:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008a6e:	6903      	ldr	r3, [r0, #16]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d01d      	beq.n	8008ab0 <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fbe1 	bl	800923c <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 8008a7a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8008a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 8008a80:	3301      	adds	r3, #1
 8008a82:	6083      	str	r3, [r0, #8]
 8008a84:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7cb      	b.n	8008a24 <_tx_mutex_get+0x48>
 8008a8c:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 8008a90:	201d      	movs	r0, #29
}
 8008a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8008a94:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8008a98:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 8008a9c:	e7ba      	b.n	8008a14 <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8008a9e:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008aa0:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008aa4:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008aa8:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008aac:	677c      	str	r4, [r7, #116]	; 0x74
 8008aae:	e7d0      	b.n	8008a52 <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8008ab0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008ab2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008ab4:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8008ab6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8008aba:	bf88      	it	hi
 8008abc:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8008abe:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8008ac0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8008ac2:	bf38      	it	cc
 8008ac4:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	d2d3      	bcs.n	8008a74 <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 f807 	bl	8008ae0 <_tx_mutex_priority_change>
 8008ad2:	e7cf      	b.n	8008a74 <_tx_mutex_get+0x98>
 8008ad4:	20002cf4 	.word	0x20002cf4
 8008ad8:	20002cf0 	.word	0x20002cf0
 8008adc:	08009c79 	.word	0x08009c79

08008ae0 <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ae6:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008aea:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8008aec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008aee:	b152      	cbz	r2, 8008b06 <_tx_mutex_priority_change+0x26>
 8008af0:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8008af4:	62c1      	str	r1, [r0, #44]	; 0x2c
 8008af6:	428a      	cmp	r2, r1
 8008af8:	bf28      	it	cs
 8008afa:	460a      	movcs	r2, r1
 8008afc:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008afe:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b06:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008b08:	4925      	ldr	r1, [pc, #148]	; (8008ba0 <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8008b0a:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 8008b0e:	4f25      	ldr	r7, [pc, #148]	; (8008ba4 <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008b10:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008b12:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008b16:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008b18:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8008b1a:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008b1e:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008b22:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 8008b24:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 8008b28:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 8008b2c:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 8008b30:	f000 fb84 	bl	800923c <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008b34:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008b38:	b672      	cpsid	i
 8008b3a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 8008b3e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	bf28      	it	cs
 8008b44:	462b      	movcs	r3, r5
 8008b46:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008b48:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 faef 	bl	8009130 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008b52:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008b56:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 8008b58:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 8008b5a:	429c      	cmp	r4, r3
 8008b5c:	d007      	beq.n	8008b6e <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 8008b5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008b60:	b92a      	cbnz	r2, 8008b6e <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d805      	bhi.n	8008b76 <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 8008b6a:	4544      	cmp	r4, r8
 8008b6c:	d010      	beq.n	8008b90 <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008b6e:	f381 8810 	msr	PRIMASK, r1
}
 8008b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8008b76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008b78:	4283      	cmp	r3, r0
 8008b7a:	d9f8      	bls.n	8008b6e <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8008b7c:	4282      	cmp	r2, r0
 8008b7e:	d207      	bcs.n	8008b90 <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008b80:	4809      	ldr	r0, [pc, #36]	; (8008ba8 <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 8008b82:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008b86:	6803      	ldr	r3, [r0, #0]
 8008b88:	ea43 030a 	orr.w	r3, r3, sl
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	e7ee      	b.n	8008b6e <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 8008b90:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 8008b92:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 8008b94:	d2eb      	bcs.n	8008b6e <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8008b96:	4a05      	ldr	r2, [pc, #20]	; (8008bac <_tx_mutex_priority_change+0xcc>)
 8008b98:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8008b9c:	e7e7      	b.n	8008b6e <_tx_mutex_priority_change+0x8e>
 8008b9e:	bf00      	nop
 8008ba0:	20002cf0 	.word	0x20002cf0
 8008ba4:	20002cf8 	.word	0x20002cf8
 8008ba8:	20002d00 	.word	0x20002d00
 8008bac:	20002c58 	.word	0x20002c58

08008bb0 <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8008bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008bb4:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008bb8:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008bba:	6882      	ldr	r2, [r0, #8]
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	d056      	beq.n	8008c6e <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008bc0:	497e      	ldr	r1, [pc, #504]	; (8008dbc <_tx_mutex_put+0x20c>)
 8008bc2:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8008bc4:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8008bc6:	6809      	ldr	r1, [r1, #0]
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	d003      	beq.n	8008bd4 <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8008bcc:	4e7c      	ldr	r6, [pc, #496]	; (8008dc0 <_tx_mutex_put+0x210>)
 8008bce:	6831      	ldr	r1, [r6, #0]
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	d04c      	beq.n	8008c6e <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8008bd4:	3a01      	subs	r2, #1
 8008bd6:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	d143      	bne.n	8008c64 <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d041      	beq.n	8008c64 <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8008be0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008be4:	3a01      	subs	r2, #1
 8008be6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d144      	bne.n	8008c78 <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8008bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008bf2:	6987      	ldr	r7, [r0, #24]
 8008bf4:	6902      	ldr	r2, [r0, #16]
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	f000 8082 	beq.w	8008d00 <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008bfc:	2a01      	cmp	r2, #1
 8008bfe:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8008c00:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008c04:	f000 8084 	beq.w	8008d10 <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008c08:	69c3      	ldr	r3, [r0, #28]
 8008c0a:	4e6d      	ldr	r6, [pc, #436]	; (8008dc0 <_tx_mutex_put+0x210>)
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d95d      	bls.n	8008ccc <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	f000 8097 	beq.w	8008d44 <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 8008c16:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8008c18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	d167      	bne.n	8008cf0 <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8008c20:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8008c24:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8008c28:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8008c2a:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8008c2c:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8008c2e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 8008c32:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8008c34:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d153      	bne.n	8008ce4 <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8008c3c:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008c3e:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008c40:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 8008c42:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008c44:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008c46:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8008c4a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c4c:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008c50:	692b      	ldr	r3, [r5, #16]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	f000 8097 	beq.w	8008d86 <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f000 fa69 	bl	8009130 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8008c5e:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 8008c68:	2000      	movs	r0, #0
}
 8008c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c6e:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 8008c72:	201e      	movs	r0, #30
}
 8008c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8008c78:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8008c7c:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8008c80:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8008c82:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8008c84:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8008c86:	d1b4      	bne.n	8008bf2 <_tx_mutex_put+0x42>
 8008c88:	e7b1      	b.n	8008bee <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008c8a:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008c8c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008c90:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8008c92:	6832      	ldr	r2, [r6, #0]
 8008c94:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8008c96:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008c9a:	69eb      	ldr	r3, [r5, #28]
 8008c9c:	bf28      	it	cs
 8008c9e:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 8008ca0:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008ca2:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 8008ca4:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008ca6:	d969      	bls.n	8008d7c <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008ca8:	692a      	ldr	r2, [r5, #16]
 8008caa:	2a01      	cmp	r2, #1
 8008cac:	d176      	bne.n	8008d9c <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 8008cae:	6833      	ldr	r3, [r6, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008cb4:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f001 f83f 	bl	8009d3c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008cbe:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008cc2:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	69af      	ldr	r7, [r5, #24]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	d039      	beq.n	8008d44 <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008cd0:	692b      	ldr	r3, [r5, #16]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d154      	bne.n	8008d80 <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008cd8:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8008cda:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008cdc:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008cde:	616a      	str	r2, [r5, #20]
 8008ce0:	69eb      	ldr	r3, [r5, #28]
 8008ce2:	e799      	b.n	8008c18 <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008ce4:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8008ce8:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008cea:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8008cec:	6713      	str	r3, [r2, #112]	; 0x70
 8008cee:	e7a6      	b.n	8008c3e <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8008cf0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8008cf4:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008cf6:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8008cf8:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8008cfa:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 8008cfe:	e793      	b.n	8008c28 <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	f47f af7b 	bne.w	8008bfc <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008d06:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d08:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	e7ac      	b.n	8008c6a <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 8008d10:	4e2b      	ldr	r6, [pc, #172]	; (8008dc0 <_tx_mutex_put+0x210>)
 8008d12:	6832      	ldr	r2, [r6, #0]
 8008d14:	3201      	adds	r2, #1
 8008d16:	6032      	str	r2, [r6, #0]
 8008d18:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8008d1c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 8008d20:	2900      	cmp	r1, #0
 8008d22:	d0b2      	beq.n	8008c8a <_tx_mutex_put+0xda>
 8008d24:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008d26:	2420      	movs	r4, #32
 8008d28:	e001      	b.n	8008d2e <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 8008d2a:	2a00      	cmp	r2, #0
 8008d2c:	d0ae      	beq.n	8008c8c <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8008d2e:	6910      	ldr	r0, [r2, #16]
 8008d30:	2801      	cmp	r0, #1
 8008d32:	d103      	bne.n	8008d3c <_tx_mutex_put+0x18c>
 8008d34:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8008d36:	4284      	cmp	r4, r0
 8008d38:	bf28      	it	cs
 8008d3a:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8008d3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8008d3e:	4291      	cmp	r1, r2
 8008d40:	d1f3      	bne.n	8008d2a <_tx_mutex_put+0x17a>
 8008d42:	e7a3      	b.n	8008c8c <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 8008d44:	6833      	ldr	r3, [r6, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	6033      	str	r3, [r6, #0]
 8008d4a:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8008d4e:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008d50:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8008d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008d54:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8008d56:	4543      	cmp	r3, r8
 8008d58:	d002      	beq.n	8008d60 <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8008d5a:	4641      	mov	r1, r8
 8008d5c:	f7ff fec0 	bl	8008ae0 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008d60:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008d64:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8008d66:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008d68:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 8008d6a:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008d6c:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 8008d6e:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d70:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 8008d74:	f000 f9be 	bl	80090f4 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 8008d78:	4620      	mov	r0, r4
 8008d7a:	e776      	b.n	8008c6a <_tx_mutex_put+0xba>
 8008d7c:	69af      	ldr	r7, [r5, #24]
 8008d7e:	e7a5      	b.n	8008ccc <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 8008d80:	2400      	movs	r4, #0
 8008d82:	69eb      	ldr	r3, [r5, #28]
 8008d84:	e748      	b.n	8008c18 <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8008d86:	69eb      	ldr	r3, [r5, #28]
 8008d88:	b953      	cbnz	r3, 8008da0 <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 8008d8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d8c:	4543      	cmp	r3, r8
 8008d8e:	f43f af63 	beq.w	8008c58 <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8008d92:	4641      	mov	r1, r8
 8008d94:	4620      	mov	r0, r4
 8008d96:	f7ff fea3 	bl	8008ae0 <_tx_mutex_priority_change>
 8008d9a:	e75d      	b.n	8008c58 <_tx_mutex_put+0xa8>
 8008d9c:	69af      	ldr	r7, [r5, #24]
 8008d9e:	e737      	b.n	8008c10 <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 8008da0:	4628      	mov	r0, r5
 8008da2:	f000 ffcb 	bl	8009d3c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008da6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008daa:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8008dac:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 8008dae:	b10b      	cbz	r3, 8008db4 <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008db4:	f382 8810 	msr	PRIMASK, r2
 8008db8:	e7e7      	b.n	8008d8a <_tx_mutex_put+0x1da>
 8008dba:	bf00      	nop
 8008dbc:	20002cf4 	.word	0x20002cf4
 8008dc0:	20002cf0 	.word	0x20002cf0

08008dc4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr, VOID (*entry_function)(ULONG id),
		ULONG entry_input, VOID* stack_start, ULONG stack_size, UINT priority,
		UINT preempt_threshold, ULONG time_slice, UINT auto_start)
{
 8008dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008dca:	4604      	mov	r4, r0
 8008dcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008dce:	468b      	mov	fp, r1
 8008dd0:	4692      	mov	sl, r2
#endif

#ifndef TX_DISABLE_STACK_FILLING
	/* Set the thread stack to a pattern prior to creating the initial stack frame.
	 * This pattern is used by the stack checking routines to see how much has been used. */
	TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	21ef      	movs	r1, #239	; 0xef
{
 8008dd8:	4698      	mov	r8, r3
 8008dda:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8008dde:	f001 fb1e 	bl	800a41e <memset>
#endif

	/* Prepare the thread control block prior to placing it on the created list. */

	/* Initialize thread control block to all zeros. */
	TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8008de2:	4620      	mov	r0, r4
 8008de4:	22c8      	movs	r2, #200	; 0xc8
 8008de6:	2100      	movs	r1, #0
 8008de8:	f001 fb19 	bl	800a41e <memset>
	thread_ptr->tx_thread_entry_parameter = entry_input;
	thread_ptr->tx_thread_stack_start = stack_start;
	thread_ptr->tx_thread_stack_size = stack_size;
	thread_ptr->tx_thread_priority = priority;
	thread_ptr->tx_thread_user_priority = priority;
	thread_ptr->tx_thread_time_slice = time_slice;
 8008dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_ptr->tx_thread_new_time_slice = time_slice;
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);

	/* Calculate the end of the thread's stack area. */
	temp_ptr = TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
	temp_ptr = (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG ) 1))));
 8008dee:	1e6a      	subs	r2, r5, #1
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);
 8008df0:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

	/* Now fill in the values that are required for thread initialization. */
	thread_ptr->tx_thread_state = TX_SUSPENDED;
 8008df4:	2103      	movs	r1, #3

	/* Setup the necessary fields in the thread timer block. */
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8008df6:	4f36      	ldr	r7, [pc, #216]	; (8008ed0 <_tx_thread_create+0x10c>)
	temp_ptr = (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG ) 1))));
 8008df8:	4432      	add	r2, r6
	thread_ptr->tx_thread_name = name_ptr;
 8008dfa:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
	thread_ptr->tx_thread_state = TX_SUSPENDED;
 8008dfe:	6321      	str	r1, [r4, #48]	; 0x30
	TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

	/* Call the target specific stack frame building routine to build the 
	 thread's initial stack and to setup the actual stack pointer in the
	 control block. */
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8008e00:	4620      	mov	r0, r4
	thread_ptr->tx_thread_stack_start = stack_start;
 8008e02:	60e6      	str	r6, [r4, #12]
	thread_ptr->tx_thread_priority = priority;
 8008e04:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	thread_ptr->tx_thread_user_priority = priority;
 8008e08:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8008e0c:	65a4      	str	r4, [r4, #88]	; 0x58
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);
 8008e0e:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8008e12:	6567      	str	r7, [r4, #84]	; 0x54
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8008e14:	492f      	ldr	r1, [pc, #188]	; (8008ed4 <_tx_thread_create+0x110>)
	thread_ptr->tx_thread_new_time_slice = time_slice;
 8008e16:	e9c4 3306 	strd	r3, r3, [r4, #24]
	thread_ptr->tx_thread_preempt_threshold = preempt_threshold;
 8008e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	thread_ptr->tx_thread_entry_parameter = entry_input;
 8008e1c:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
	thread_ptr->tx_thread_stack_end = TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8008e20:	e9c4 2504 	strd	r2, r5, [r4, #16]
	thread_ptr->tx_thread_preempt_threshold = preempt_threshold;
 8008e24:	63e3      	str	r3, [r4, #60]	; 0x3c
	thread_ptr->tx_thread_user_preempt_threshold = preempt_threshold;
 8008e26:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8008e2a:	f7f7 faa1 	bl	8000370 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008e2e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008e32:	b672      	cpsid	i
	/* Load the thread ID field in the thread control block. */
	thread_ptr->tx_thread_id = TX_THREAD_ID;

	/* Place the thread on the list of created threads.  First,
	 check for an empty list. */
	if (_tx_thread_created_count == TX_EMPTY)
 8008e34:	4828      	ldr	r0, [pc, #160]	; (8008ed8 <_tx_thread_create+0x114>)
	thread_ptr->tx_thread_id = TX_THREAD_ID;
 8008e36:	4a29      	ldr	r2, [pc, #164]	; (8008edc <_tx_thread_create+0x118>)
	if (_tx_thread_created_count == TX_EMPTY)
 8008e38:	6803      	ldr	r3, [r0, #0]
	thread_ptr->tx_thread_id = TX_THREAD_ID;
 8008e3a:	6022      	str	r2, [r4, #0]
	{
		/* The created thread list is empty.  Add thread to empty list. */
		_tx_thread_created_ptr = thread_ptr;
 8008e3c:	4a28      	ldr	r2, [pc, #160]	; (8008ee0 <_tx_thread_create+0x11c>)
	if (_tx_thread_created_count == TX_EMPTY)
 8008e3e:	b9db      	cbnz	r3, 8008e78 <_tx_thread_create+0xb4>
		_tx_thread_created_ptr = thread_ptr;
 8008e40:	6014      	str	r4, [r2, #0]
		thread_ptr->tx_thread_created_next = thread_ptr;
		thread_ptr->tx_thread_created_previous = thread_ptr;
 8008e42:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
	/* Log this kernel call. */
	TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE
	/* Temporarily disable preemption. */
	_tx_thread_preempt_disable++;
 8008e46:	4927      	ldr	r1, [pc, #156]	; (8008ee4 <_tx_thread_create+0x120>)
	_tx_thread_created_count++;
 8008e48:	3301      	adds	r3, #1
	_tx_thread_preempt_disable++;
 8008e4a:	680a      	ldr	r2, [r1, #0]
	_tx_thread_created_count++;
 8008e4c:	6003      	str	r3, [r0, #0]
#endif

	/* Determine if an automatic start was requested. If so, call the resume thread function
	 * and then check for a preemption condition. */
	if (auto_start == TX_AUTO_START)
 8008e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	_tx_thread_preempt_disable++;
 8008e50:	3201      	adds	r2, #1
	if (auto_start == TX_AUTO_START)
 8008e52:	2b01      	cmp	r3, #1
	_tx_thread_preempt_disable++;
 8008e54:	600a      	str	r2, [r1, #0]
	if (auto_start == TX_AUTO_START)
 8008e56:	d12a      	bne.n	8008eae <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e58:	f3ef 8205 	mrs	r2, IPSR
	{
		/* Determine if the create call is being called from initialization. */
		if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8008e5c:	4b22      	ldr	r3, [pc, #136]	; (8008ee8 <_tx_thread_create+0x124>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008e66:	d211      	bcs.n	8008e8c <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e68:	f385 8810 	msr	PRIMASK, r5

		/* Perform any additional activities for tool or user purpose. */
		TX_THREAD_CREATE_EXTENSION(thread_ptr)

		/* Call the resume thread function to make this thread ready. */
		_tx_thread_system_resume(thread_ptr);
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 f95f 	bl	8009130 <_tx_thread_system_resume>
#endif
	}

	/* Always return a success. */
	return (TX_SUCCESS);
}
 8008e72:	2000      	movs	r0, #0
 8008e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		next_thread = _tx_thread_created_ptr;
 8008e78:	6812      	ldr	r2, [r2, #0]
		previous_thread = next_thread->tx_thread_created_previous;
 8008e7a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
		next_thread->tx_thread_created_previous = thread_ptr;
 8008e7e:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
		previous_thread->tx_thread_created_next = thread_ptr;
 8008e82:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
		thread_ptr->tx_thread_created_next = next_thread;
 8008e86:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 8008e8a:	e7dc      	b.n	8008e46 <_tx_thread_create+0x82>
			saved_thread_ptr = _tx_thread_execute_ptr;
 8008e8c:	4b17      	ldr	r3, [pc, #92]	; (8008eec <_tx_thread_create+0x128>)
 8008e8e:	681e      	ldr	r6, [r3, #0]
			if (saved_thread_ptr != TX_NULL)
 8008e90:	b1e6      	cbz	r6, 8008ecc <_tx_thread_create+0x108>
				saved_thread_ptr->tx_thread_preempt_threshold =
 8008e92:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				saved_threshold = saved_thread_ptr->tx_thread_preempt_threshold;
 8008e94:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
				saved_thread_ptr->tx_thread_preempt_threshold =
 8008e96:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008e98:	f385 8810 	msr	PRIMASK, r5
		_tx_thread_system_resume(thread_ptr);
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 f947 	bl	8009130 <_tx_thread_system_resume>
		if (saved_thread_ptr != TX_NULL)
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d0e5      	beq.n	8008e72 <_tx_thread_create+0xae>
			saved_thread_ptr->tx_thread_preempt_threshold = saved_threshold;
 8008ea6:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008eb2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008eb6:	b672      	cpsid	i
		_tx_thread_preempt_disable--;
 8008eb8:	680b      	ldr	r3, [r1, #0]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008ebe:	f382 8810 	msr	PRIMASK, r2
		_tx_thread_system_preempt_check();
 8008ec2:	f000 f917 	bl	80090f4 <_tx_thread_system_preempt_check>
}
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UINT saved_threshold = ((UINT)0);
 8008ecc:	4637      	mov	r7, r6
 8008ece:	e7e3      	b.n	8008e98 <_tx_thread_create+0xd4>
 8008ed0:	080093c5 	.word	0x080093c5
 8008ed4:	08009021 	.word	0x08009021
 8008ed8:	20002ce8 	.word	0x20002ce8
 8008edc:	54485244 	.word	0x54485244
 8008ee0:	20002ce0 	.word	0x20002ce0
 8008ee4:	20002cf0 	.word	0x20002cf0
 8008ee8:	2000019c 	.word	0x2000019c
 8008eec:	20002cf8 	.word	0x20002cf8

08008ef0 <_tx_thread_identify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ef0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008ef4:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008ef6:	4a02      	ldr	r2, [pc, #8]	; (8008f00 <_tx_thread_identify+0x10>)
 8008ef8:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008efa:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 8008efe:	4770      	bx	lr
 8008f00:	20002cf4 	.word	0x20002cf4

08008f04 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_thread_initialize(VOID)
{
 8008f04:	b538      	push	{r3, r4, r5, lr}
#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Set current thread pointer to NULL. */
	TX_THREAD_SET_CURRENT(TX_NULL)

	/* Initialize the execute thread pointer to NULL. */
	_tx_thread_execute_ptr = TX_NULL;
 8008f06:	480f      	ldr	r0, [pc, #60]	; (8008f44 <_tx_thread_initialize+0x40>)
	TX_THREAD_SET_CURRENT(TX_NULL)
 8008f08:	2400      	movs	r4, #0

	/* Initialize the priority information. */
	TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <_tx_thread_initialize+0x44>)
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
#endif
#endif
	/* Setup the highest priority variable to the max, indicating no thread is currently
	 ready. */
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8008f0c:	2520      	movs	r5, #32
	_tx_thread_execute_ptr = TX_NULL;
 8008f0e:	6004      	str	r4, [r0, #0]

#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Initialize the array of priority head pointers. */
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008f10:	4621      	mov	r1, r4
	TX_THREAD_SET_CURRENT(TX_NULL)
 8008f12:	4a0e      	ldr	r2, [pc, #56]	; (8008f4c <_tx_thread_initialize+0x48>)
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8008f14:	480e      	ldr	r0, [pc, #56]	; (8008f50 <_tx_thread_initialize+0x4c>)
	TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8008f16:	601c      	str	r4, [r3, #0]
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8008f18:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <_tx_thread_initialize+0x50>)
	TX_THREAD_SET_CURRENT(TX_NULL)
 8008f1a:	6014      	str	r4, [r2, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008f1c:	2280      	movs	r2, #128	; 0x80
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8008f1e:	6004      	str	r4, [r0, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008f20:	480d      	ldr	r0, [pc, #52]	; (8008f58 <_tx_thread_initialize+0x54>)
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8008f22:	601d      	str	r5, [r3, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008f24:	f001 fa7b 	bl	800a41e <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

	/* Setup the build options flag. This is used to identify how the ThreadX library was constructed. */
	_tx_build_options = _tx_build_options | (((ULONG)(TX_MAX_PRIORITIES / 32)) << 24)
 8008f28:	4a0c      	ldr	r2, [pc, #48]	; (8008f5c <_tx_thread_initialize+0x58>)
	_tx_thread_created_ptr = TX_NULL;
 8008f2a:	490d      	ldr	r1, [pc, #52]	; (8008f60 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
			| (((ULONG)1) << 7)
 8008f2c:	6810      	ldr	r0, [r2, #0]
 8008f2e:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <_tx_thread_initialize+0x60>)
	_tx_thread_created_ptr = TX_NULL;
 8008f30:	600c      	str	r4, [r1, #0]
			| (((ULONG)1) << 7)
 8008f32:	4303      	orrs	r3, r0
	_tx_thread_created_count = TX_EMPTY;
 8008f34:	4d0c      	ldr	r5, [pc, #48]	; (8008f68 <_tx_thread_initialize+0x64>)
	_tx_thread_preempt_disable = ((UINT)0);
 8008f36:	480d      	ldr	r0, [pc, #52]	; (8008f6c <_tx_thread_initialize+0x68>)
	_tx_thread_mutex_release = TX_NULL;
 8008f38:	490d      	ldr	r1, [pc, #52]	; (8008f70 <_tx_thread_initialize+0x6c>)
	_tx_thread_created_count = TX_EMPTY;
 8008f3a:	602c      	str	r4, [r5, #0]
	_tx_thread_preempt_disable = ((UINT)0);
 8008f3c:	6004      	str	r4, [r0, #0]
	_tx_thread_mutex_release = TX_NULL;
 8008f3e:	600c      	str	r4, [r1, #0]
	_tx_build_options = _tx_build_options | (((ULONG)(TX_MAX_PRIORITIES / 32)) << 24)
 8008f40:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
			;
}
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20002cf8 	.word	0x20002cf8
 8008f48:	20002cdc 	.word	0x20002cdc
 8008f4c:	20002cf4 	.word	0x20002cf4
 8008f50:	20002d00 	.word	0x20002d00
 8008f54:	20002cfc 	.word	0x20002cfc
 8008f58:	20002c58 	.word	0x20002c58
 8008f5c:	20002ce4 	.word	0x20002ce4
 8008f60:	20002ce0 	.word	0x20002ce0
 8008f64:	01000080 	.word	0x01000080
 8008f68:	20002ce8 	.word	0x20002ce8
 8008f6c:	20002cf0 	.word	0x20002cf0
 8008f70:	20002cd8 	.word	0x20002cd8

08008f74 <_tx_thread_preemption_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f76:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f7a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8008f7c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8008f80:	428b      	cmp	r3, r1
 8008f82:	d341      	bcc.n	8009008 <_tx_thread_preemption_change+0x94>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 8008f84:	d017      	beq.n	8008fb6 <_tx_thread_preemption_change+0x42>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8008f86:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8008f8a:	4d21      	ldr	r5, [pc, #132]	; (8009010 <_tx_thread_preemption_change+0x9c>)
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8008f92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008f94:	428b      	cmp	r3, r1
 8008f96:	682d      	ldr	r5, [r5, #0]
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8008f98:	4616      	mov	r6, r2
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8008f9a:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 8008f9e:	bf28      	it	cs
 8008fa0:	460b      	movcs	r3, r1
            if (_tx_thread_highest_priority < new_threshold)
 8008fa2:	428a      	cmp	r2, r1
 8008fa4:	bf28      	it	cs
 8008fa6:	460e      	movcs	r6, r1
 8008fa8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008faa:	42b5      	cmp	r5, r6
 8008fac:	d312      	bcc.n	8008fd4 <_tx_thread_preemption_change+0x60>
    status =  TX_SUCCESS;
 8008fae:	2000      	movs	r0, #0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008fb0:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
}
 8008fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 8008fb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008fb8:	4d16      	ldr	r5, [pc, #88]	; (8009014 <_tx_thread_preemption_change+0xa0>)
 8008fba:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8008fbe:	4285      	cmp	r5, r0
 8008fc0:	d1e1      	bne.n	8008f86 <_tx_thread_preemption_change+0x12>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8008fc2:	4f15      	ldr	r7, [pc, #84]	; (8009018 <_tx_thread_preemption_change+0xa4>)
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8008fc4:	2601      	movs	r6, #1
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8008fc6:	683d      	ldr	r5, [r7, #0]
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8008fc8:	fa06 f303 	lsl.w	r3, r6, r3
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8008fcc:	ea25 0503 	bic.w	r5, r5, r3
 8008fd0:	603d      	str	r5, [r7, #0]
 8008fd2:	e7d8      	b.n	8008f86 <_tx_thread_preemption_change+0x12>
                if (_tx_thread_execute_ptr == thread_ptr)
 8008fd4:	4911      	ldr	r1, [pc, #68]	; (800901c <_tx_thread_preemption_change+0xa8>)
 8008fd6:	680e      	ldr	r6, [r1, #0]
 8008fd8:	4286      	cmp	r6, r0
 8008fda:	d1e8      	bne.n	8008fae <_tx_thread_preemption_change+0x3a>
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d006      	beq.n	8008fee <_tx_thread_preemption_change+0x7a>
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008fe0:	4e0d      	ldr	r6, [pc, #52]	; (8009018 <_tx_thread_preemption_change+0xa4>)
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8008fe2:	2001      	movs	r0, #1
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008fe4:	6833      	ldr	r3, [r6, #0]
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8008fe6:	fa00 f202 	lsl.w	r2, r0, r2
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008fea:	4313      	orrs	r3, r2
 8008fec:	6033      	str	r3, [r6, #0]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <_tx_thread_preemption_change+0xa0>)
 8008ff0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008ff4:	600b      	str	r3, [r1, #0]
 8008ff6:	f384 8810 	msr	PRIMASK, r4
                    _tx_thread_system_preempt_check();
 8008ffa:	f000 f87b 	bl	80090f4 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ffe:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009002:	b672      	cpsid	i
    status =  TX_SUCCESS;
 8009004:	2000      	movs	r0, #0
 8009006:	e7d3      	b.n	8008fb0 <_tx_thread_preemption_change+0x3c>
        status =  TX_THRESH_ERROR;
 8009008:	2018      	movs	r0, #24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800900a:	f384 8810 	msr	PRIMASK, r4
}
 800900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009010:	20002cfc 	.word	0x20002cfc
 8009014:	20002c58 	.word	0x20002c58
 8009018:	20002d00 	.word	0x20002d00
 800901c:	20002cf8 	.word	0x20002cf8

08009020 <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009020:	4b16      	ldr	r3, [pc, #88]	; (800907c <_tx_thread_shell_entry+0x5c>)
{
 8009022:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009024:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009026:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800902a:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800902c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009030:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8009034:	b113      	cbz	r3, 800903c <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8009036:	2100      	movs	r1, #0
 8009038:	4620      	mov	r0, r4
 800903a:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800903c:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 8009040:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <_tx_thread_shell_entry+0x60>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	b10b      	cbz	r3, 800904c <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8009048:	4620      	mov	r0, r4
 800904a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800904c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009050:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009052:	4a0c      	ldr	r2, [pc, #48]	; (8009084 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009054:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009056:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8009058:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 800905c:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800905e:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 8009060:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009062:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009064:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 8009066:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009068:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800906c:	b10d      	cbz	r5, 8009072 <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800906e:	4620      	mov	r0, r4
 8009070:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8009072:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 8009078:	f000 b8e0 	b.w	800923c <_tx_thread_system_suspend>
 800907c:	20002cf4 	.word	0x20002cf4
 8009080:	20002cd8 	.word	0x20002cd8
 8009084:	20002cf0 	.word	0x20002cf0

08009088 <_tx_thread_sleep>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800908a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800908e:	b672      	cpsid	i

	/* Lockout interrupts while the thread is being resumed. */
	TX_DISABLE

	/* Pickup thread pointer. */
	TX_THREAD_GET_CURRENT(thread_ptr)
 8009090:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <_tx_thread_sleep+0x5c>)
 8009092:	681c      	ldr	r4, [r3, #0]

	/* Determine if this is a legal request. */

	/* Is there a current thread?  */
	if (thread_ptr == TX_NULL)
 8009094:	b1f4      	cbz	r4, 80090d4 <_tx_thread_sleep+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009096:	f3ef 8305 	mrs	r3, IPSR

		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
	/* Is the caller an ISR or Initialization?  */
	else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG)0))
 800909a:	4913      	ldr	r1, [pc, #76]	; (80090e8 <_tx_thread_sleep+0x60>)
 800909c:	6809      	ldr	r1, [r1, #0]
 800909e:	430b      	orrs	r3, r1
 80090a0:	d118      	bne.n	80090d4 <_tx_thread_sleep+0x4c>
		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
#ifndef TX_TIMER_PROCESS_IN_ISR
	/* Is the caller the system timer thread?  */
	else if (thread_ptr == &_tx_timer_thread)
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <_tx_thread_sleep+0x64>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	d015      	beq.n	80090d4 <_tx_thread_sleep+0x4c>
		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
#endif
	/* Determine if the requested number of ticks is zero. */
	else if (timer_ticks == ((ULONG)0))
 80090a8:	b1c0      	cbz	r0, 80090dc <_tx_thread_sleep+0x54>
		status = TX_SUCCESS;
	}
	else
	{
		/* Determine if the preempt disable flag is non-zero. */
		if (_tx_thread_preempt_disable != ((UINT)0))
 80090aa:	4b11      	ldr	r3, [pc, #68]	; (80090f0 <_tx_thread_sleep+0x68>)
 80090ac:	6819      	ldr	r1, [r3, #0]
 80090ae:	b989      	cbnz	r1, 80090d4 <_tx_thread_sleep+0x4c>

			/* Setup the timeout period. */
			thread_ptr->tx_thread_timer.tx_timer_internal_remaining_ticks = timer_ticks;

			/* Temporarily disable preemption. */
			_tx_thread_preempt_disable++;
 80090b0:	681d      	ldr	r5, [r3, #0]
			thread_ptr->tx_thread_suspending = TX_TRUE;
 80090b2:	2601      	movs	r6, #1
			thread_ptr->tx_thread_state = TX_SLEEP;
 80090b4:	2704      	movs	r7, #4
			thread_ptr->tx_thread_suspend_status = TX_SUCCESS;
 80090b6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
			_tx_thread_preempt_disable++;
 80090ba:	4435      	add	r5, r6
			thread_ptr->tx_thread_timer.tx_timer_internal_remaining_ticks = timer_ticks;
 80090bc:	64e0      	str	r0, [r4, #76]	; 0x4c
			thread_ptr->tx_thread_state = TX_SLEEP;
 80090be:	6327      	str	r7, [r4, #48]	; 0x30
			_tx_thread_preempt_disable++;
 80090c0:	601d      	str	r5, [r3, #0]
			thread_ptr->tx_thread_suspending = TX_TRUE;
 80090c2:	63a6      	str	r6, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80090c4:	f382 8810 	msr	PRIMASK, r2

			/* Restore interrupts. */
			TX_RESTORE

			/* Call actual thread suspension routine. */
			_tx_thread_system_suspend(thread_ptr);
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 f8b7 	bl	800923c <_tx_thread_system_suspend>
#endif

			/* Return status to the caller. */
			status = thread_ptr->tx_thread_suspend_status;
 80090ce:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
		}
	}

	/* Return completion status. */
	return (status);
}
 80090d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d4:	f382 8810 	msr	PRIMASK, r2
			status = TX_CALLER_ERROR;
 80090d8:	2013      	movs	r0, #19
}
 80090da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090dc:	f382 8810 	msr	PRIMASK, r2
 80090e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20002cf4 	.word	0x20002cf4
 80090e8:	2000019c 	.word	0x2000019c
 80090ec:	20002da0 	.word	0x20002da0
 80090f0:	20002cf0 	.word	0x20002cf0

080090f4 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <_tx_thread_system_preempt_check+0x2c>)
 80090f6:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80090f8:	b98b      	cbnz	r3, 800911e <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80090fa:	4a0a      	ldr	r2, [pc, #40]	; (8009124 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80090fe:	6812      	ldr	r2, [r2, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d00b      	beq.n	800911e <_tx_thread_system_preempt_check+0x2a>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009106:	4b09      	ldr	r3, [pc, #36]	; (800912c <_tx_thread_system_preempt_check+0x38>)
 8009108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800910e:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8009112:	b923      	cbnz	r3, 800911e <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009114:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8009118:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800911a:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800911e:	4770      	bx	lr
 8009120:	20002cf0 	.word	0x20002cf0
 8009124:	20002cf4 	.word	0x20002cf4
 8009128:	20002cf8 	.word	0x20002cf8
 800912c:	e000ed04 	.word	0xe000ed04

08009130 <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009134:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009138:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800913a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800913c:	2b00      	cmp	r3, #0
 800913e:	d03f      	beq.n	80091c0 <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009140:	304c      	adds	r0, #76	; 0x4c
 8009142:	f000 fa3d 	bl	80095c0 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009146:	4a35      	ldr	r2, [pc, #212]	; (800921c <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800914e:	3b01      	subs	r3, #1
 8009150:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009152:	b9b8      	cbnz	r0, 8009184 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8009154:	b9f9      	cbnz	r1, 8009196 <_tx_thread_system_resume+0x66>
 8009156:	4b32      	ldr	r3, [pc, #200]	; (8009220 <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009158:	4932      	ldr	r1, [pc, #200]	; (8009224 <_tx_thread_system_resume+0xf4>)
 800915a:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800915c:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	428b      	cmp	r3, r1
 8009164:	d00d      	beq.n	8009182 <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009166:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8009168:	b95b      	cbnz	r3, 8009182 <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800916a:	4b2f      	ldr	r3, [pc, #188]	; (8009228 <_tx_thread_system_resume+0xf8>)
 800916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009170:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009172:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8009176:	b923      	cbnz	r3, 8009182 <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009178:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800917c:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800917e:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009184:	3901      	subs	r1, #1
 8009186:	2901      	cmp	r1, #1
 8009188:	d9e5      	bls.n	8009156 <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800918a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918c:	b991      	cbnz	r1, 80091b4 <_tx_thread_system_resume+0x84>
 800918e:	4b24      	ldr	r3, [pc, #144]	; (8009220 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8009190:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009192:	6321      	str	r1, [r4, #48]	; 0x30
 8009194:	e7e0      	b.n	8009158 <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009198:	b963      	cbnz	r3, 80091b4 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 800919a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 800919c:	4e23      	ldr	r6, [pc, #140]	; (800922c <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 800919e:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 80091a0:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 80091a4:	b171      	cbz	r1, 80091c4 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80091a6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80091a8:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80091aa:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80091ac:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80091ae:	e9c4 1008 	strd	r1, r0, [r4, #32]
 80091b2:	e7d1      	b.n	8009158 <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80091b4:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80091b6:	2103      	movs	r1, #3
 80091b8:	4b19      	ldr	r3, [pc, #100]	; (8009220 <_tx_thread_system_resume+0xf0>)
 80091ba:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 80091be:	e7cb      	b.n	8009158 <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80091c0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80091c2:	e7c0      	b.n	8009146 <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80091c4:	491a      	ldr	r1, [pc, #104]	; (8009230 <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80091c6:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 80091ca:	4f1a      	ldr	r7, [pc, #104]	; (8009234 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80091cc:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80091ce:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80091d2:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 80091d6:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80091d8:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 80091dc:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80091de:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80091e2:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 80091e6:	d9b7      	bls.n	8009158 <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 80091e8:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 80091ea:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 80091ec:	b199      	cbz	r1, 8009216 <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80091ee:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80091f0:	4286      	cmp	r6, r0
 80091f2:	d9b1      	bls.n	8009158 <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 80091f4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80091f6:	428e      	cmp	r6, r1
 80091f8:	d006      	beq.n	8009208 <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80091fa:	480f      	ldr	r0, [pc, #60]	; (8009238 <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 80091fc:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8009200:	6801      	ldr	r1, [r0, #0]
 8009202:	ea41 010c 	orr.w	r1, r1, ip
 8009206:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 8009208:	601c      	str	r4, [r3, #0]
 800920a:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800920e:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0aa      	beq.n	800916a <_tx_thread_system_resume+0x3a>
}
 8009214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 8009216:	601c      	str	r4, [r3, #0]
 8009218:	e79e      	b.n	8009158 <_tx_thread_system_resume+0x28>
 800921a:	bf00      	nop
 800921c:	20002cf0 	.word	0x20002cf0
 8009220:	20002cf8 	.word	0x20002cf8
 8009224:	20002cf4 	.word	0x20002cf4
 8009228:	e000ed04 	.word	0xe000ed04
 800922c:	20002c58 	.word	0x20002c58
 8009230:	20002cdc 	.word	0x20002cdc
 8009234:	20002cfc 	.word	0x20002cfc
 8009238:	20002d00 	.word	0x20002d00

0800923c <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800923c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009240:	4b57      	ldr	r3, [pc, #348]	; (80093a0 <_tx_thread_system_suspend+0x164>)
{
 8009242:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 8009244:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009246:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800924a:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800924c:	4285      	cmp	r5, r0
 800924e:	d060      	beq.n	8009312 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009250:	4a54      	ldr	r2, [pc, #336]	; (80093a4 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009252:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8009254:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009256:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 8009258:	f103 33ff 	add.w	r3, r3, #4294967295
 800925c:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800925e:	d015      	beq.n	800928c <_tx_thread_system_suspend+0x50>
 8009260:	4b51      	ldr	r3, [pc, #324]	; (80093a8 <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009262:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	42ab      	cmp	r3, r5
 800926a:	d00d      	beq.n	8009288 <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800926c:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 800926e:	b95b      	cbnz	r3, 8009288 <_tx_thread_system_suspend+0x4c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009270:	4b4e      	ldr	r3, [pc, #312]	; (80093ac <_tx_thread_system_suspend+0x170>)
 8009272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009276:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009278:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800927c:	b923      	cbnz	r3, 8009288 <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800927e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8009282:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009284:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 8009288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800928c:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800928e:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 8009292:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 8009294:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009296:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 800929a:	d050      	beq.n	800933e <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800929c:	4f44      	ldr	r7, [pc, #272]	; (80093b0 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800929e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80092a2:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80092a6:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80092aa:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 80092ac:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80092b0:	d037      	beq.n	8009322 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 80092b2:	4b3d      	ldr	r3, [pc, #244]	; (80093a8 <_tx_thread_system_suspend+0x16c>)
 80092b4:	6819      	ldr	r1, [r3, #0]
 80092b6:	42a1      	cmp	r1, r4
 80092b8:	d1d3      	bne.n	8009262 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80092ba:	483e      	ldr	r0, [pc, #248]	; (80093b4 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80092bc:	493e      	ldr	r1, [pc, #248]	; (80093b8 <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80092be:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80092c0:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80092c2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80092c6:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80092c8:	b1ec      	cbz	r4, 8009306 <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 80092ca:	6814      	ldr	r4, [r2, #0]
 80092cc:	3401      	adds	r4, #1
 80092ce:	6014      	str	r4, [r2, #0]
 80092d0:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80092d4:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80092d8:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 80092da:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 80092dc:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 80092de:	3c01      	subs	r4, #1
 80092e0:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80092e2:	fa95 f4a5 	rbit	r4, r5
 80092e6:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 80092ea:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 80092ee:	f8d0 c000 	ldr.w	ip, [r0]
 80092f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092f4:	4560      	cmp	r0, ip
 80092f6:	d806      	bhi.n	8009306 <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80092f8:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 80092fa:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80092fc:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8009300:	ea25 0504 	bic.w	r5, r5, r4
 8009304:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009306:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800930a:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0af      	beq.n	8009270 <_tx_thread_system_suspend+0x34>
 8009310:	e7ba      	b.n	8009288 <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 8009312:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009314:	3b01      	subs	r3, #1
 8009316:	3303      	adds	r3, #3
 8009318:	d935      	bls.n	8009386 <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800931a:	4b28      	ldr	r3, [pc, #160]	; (80093bc <_tx_thread_system_suspend+0x180>)
 800931c:	69e2      	ldr	r2, [r4, #28]
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	e796      	b.n	8009250 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8009322:	f8df c094 	ldr.w	ip, [pc, #148]	; 80093b8 <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 8009326:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800932a:	f8dc 3000 	ldr.w	r3, [ip]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0bf      	beq.n	80092b2 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8009332:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8009334:	ea23 0301 	bic.w	r3, r3, r1
 8009338:	f8cc 3000 	str.w	r3, [ip]
 800933c:	e7b9      	b.n	80092b2 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800933e:	f8df e080 	ldr.w	lr, [pc, #128]	; 80093c0 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009342:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8009344:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80093b8 <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8009348:	f8de 3000 	ldr.w	r3, [lr]
 800934c:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 800934e:	4f18      	ldr	r7, [pc, #96]	; (80093b0 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8009350:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8009352:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009356:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800935a:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800935e:	f1b9 0f00 	cmp.w	r9, #0
 8009362:	d003      	beq.n	800936c <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8009364:	ea01 0109 	and.w	r1, r1, r9
 8009368:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 800936c:	b983      	cbnz	r3, 8009390 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800936e:	4811      	ldr	r0, [pc, #68]	; (80093b4 <_tx_thread_system_suspend+0x178>)
 8009370:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 8009372:	490d      	ldr	r1, [pc, #52]	; (80093a8 <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009374:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8009376:	600b      	str	r3, [r1, #0]
 8009378:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800937c:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 800937e:	2b00      	cmp	r3, #0
 8009380:	f43f af76 	beq.w	8009270 <_tx_thread_system_suspend+0x34>
 8009384:	e780      	b.n	8009288 <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009386:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800938a:	f000 f8ef 	bl	800956c <_tx_timer_system_activate>
 800938e:	e7c4      	b.n	800931a <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009390:	fa93 f3a3 	rbit	r3, r3
 8009394:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009398:	4906      	ldr	r1, [pc, #24]	; (80093b4 <_tx_thread_system_suspend+0x178>)
 800939a:	600b      	str	r3, [r1, #0]
 800939c:	e789      	b.n	80092b2 <_tx_thread_system_suspend+0x76>
 800939e:	bf00      	nop
 80093a0:	20002cf4 	.word	0x20002cf4
 80093a4:	20002cf0 	.word	0x20002cf0
 80093a8:	20002cf8 	.word	0x20002cf8
 80093ac:	e000ed04 	.word	0xe000ed04
 80093b0:	20002c58 	.word	0x20002c58
 80093b4:	20002cfc 	.word	0x20002cfc
 80093b8:	20002d00 	.word	0x20002d00
 80093bc:	20002d90 	.word	0x20002d90
 80093c0:	20002cdc 	.word	0x20002cdc

080093c4 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80093c4:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80093c6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80093ca:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80093cc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80093ce:	2a04      	cmp	r2, #4
 80093d0:	d008      	beq.n	80093e4 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80093d2:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80093d4:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80093d8:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 80093dc:	b162      	cbz	r2, 80093f8 <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80093de:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80093e2:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 80093e4:	4a06      	ldr	r2, [pc, #24]	; (8009400 <_tx_thread_timeout+0x3c>)
 80093e6:	6813      	ldr	r3, [r2, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	f384 8810 	msr	PRIMASK, r4
}
 80093f0:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 80093f4:	f7ff be9c 	b.w	8009130 <_tx_thread_system_resume>
}
 80093f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	20002cf0 	.word	0x20002cf0

08009404 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	460f      	mov	r7, r1
 8009408:	4616      	mov	r6, r2
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800940a:	2100      	movs	r1, #0
 800940c:	222c      	movs	r2, #44	; 0x2c
{
 800940e:	4604      	mov	r4, r0
 8009410:	461d      	mov	r5, r3
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8009412:	f001 f804 	bl	800a41e <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8009416:	9b06      	ldr	r3, [sp, #24]
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8009418:	6067      	str	r7, [r4, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800941a:	60a3      	str	r3, [r4, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800941c:	9b07      	ldr	r3, [sp, #28]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800941e:	6165      	str	r5, [r4, #20]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8009420:	e9c4 3603 	strd	r3, r6, [r4, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009424:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009428:	b672      	cpsid	i
    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800942a:	4a12      	ldr	r2, [pc, #72]	; (8009474 <_tx_timer_create+0x70>)
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800942c:	4912      	ldr	r1, [pc, #72]	; (8009478 <_tx_timer_create+0x74>)
    if (_tx_timer_created_count == TX_EMPTY)
 800942e:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8009430:	6021      	str	r1, [r4, #0]
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8009432:	4912      	ldr	r1, [pc, #72]	; (800947c <_tx_timer_create+0x78>)
    if (_tx_timer_created_count == TX_EMPTY)
 8009434:	b95b      	cbnz	r3, 800944e <_tx_timer_create+0x4a>
        timer_ptr -> tx_timer_created_previous =  previous_timer;
        timer_ptr -> tx_timer_created_next =      next_timer;
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8009436:	3301      	adds	r3, #1
        _tx_timer_created_ptr =                   timer_ptr;
 8009438:	600c      	str	r4, [r1, #0]
    _tx_timer_created_count++;
 800943a:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800943c:	9b08      	ldr	r3, [sp, #32]
 800943e:	2b01      	cmp	r3, #1
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8009440:	e9c4 4409 	strd	r4, r4, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 8009444:	d00e      	beq.n	8009464 <_tx_timer_create+0x60>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009446:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800944a:	2000      	movs	r0, #0
 800944c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _tx_timer_created_count++;
 800944e:	3301      	adds	r3, #1
        next_timer =  _tx_timer_created_ptr;
 8009450:	6809      	ldr	r1, [r1, #0]
    _tx_timer_created_count++;
 8009452:	6013      	str	r3, [r2, #0]
    if (auto_activate == TX_AUTO_ACTIVATE)
 8009454:	9b08      	ldr	r3, [sp, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8009456:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if (auto_activate == TX_AUTO_ACTIVATE)
 8009458:	2b01      	cmp	r3, #1
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800945a:	628c      	str	r4, [r1, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800945c:	6244      	str	r4, [r0, #36]	; 0x24
        timer_ptr -> tx_timer_created_next =      next_timer;
 800945e:	e9c4 1009 	strd	r1, r0, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 8009462:	d1f0      	bne.n	8009446 <_tx_timer_create+0x42>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8009464:	f104 0008 	add.w	r0, r4, #8
 8009468:	f000 f880 	bl	800956c <_tx_timer_system_activate>
 800946c:	f386 8810 	msr	PRIMASK, r6
}
 8009470:	2000      	movs	r0, #0
 8009472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009474:	2000327c 	.word	0x2000327c
 8009478:	4154494d 	.word	0x4154494d
 800947c:	20002e70 	.word	0x20002e70

08009480 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009484:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009486:	4c26      	ldr	r4, [pc, #152]	; (8009520 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8009488:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8009558 <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800948c:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 800948e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 800955c <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009492:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009494:	4b23      	ldr	r3, [pc, #140]	; (8009524 <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009496:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009498:	4f23      	ldr	r7, [pc, #140]	; (8009528 <_tx_timer_initialize+0xa8>)
{
 800949a:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 800949c:	4e23      	ldr	r6, [pc, #140]	; (800952c <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 800949e:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 80094a2:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 80094a6:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 80094a8:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80094aa:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80094ac:	f000 ffb7 	bl	800a41e <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80094b0:	4e1f      	ldr	r6, [pc, #124]	; (8009530 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80094b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 80094b6:	4a1f      	ldr	r2, [pc, #124]	; (8009534 <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80094b8:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80094bc:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80094be:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80094c0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8009560 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80094c4:	4f1c      	ldr	r7, [pc, #112]	; (8009538 <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 80094c6:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80094c8:	4661      	mov	r1, ip
 80094ca:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009564 <_tx_timer_initialize+0xe4>
 80094ce:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80094d0:	4e1a      	ldr	r6, [pc, #104]	; (800953c <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80094d2:	4c1b      	ldr	r4, [pc, #108]	; (8009540 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80094d4:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80094d8:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 80094dc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009568 <_tx_timer_initialize+0xe8>
 80094e0:	4f18      	ldr	r7, [pc, #96]	; (8009544 <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80094e2:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 80094e6:	4d18      	ldr	r5, [pc, #96]	; (8009548 <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80094e8:	6020      	str	r0, [r4, #0]
 80094ea:	e003      	b.n	80094f4 <_tx_timer_initialize+0x74>
 80094ec:	6831      	ldr	r1, [r6, #0]
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 80094f4:	2000      	movs	r0, #0
 80094f6:	9201      	str	r2, [sp, #4]
 80094f8:	9100      	str	r1, [sp, #0]
 80094fa:	463a      	mov	r2, r7
 80094fc:	4629      	mov	r1, r5
 80094fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009502:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8009506:	464b      	mov	r3, r9
 8009508:	4810      	ldr	r0, [pc, #64]	; (800954c <_tx_timer_initialize+0xcc>)
 800950a:	f7ff fc5b 	bl	8008dc4 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800950e:	2800      	cmp	r0, #0
 8009510:	d1ec      	bne.n	80094ec <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009512:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009514:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 8009516:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 8009518:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800951a:	b007      	add	sp, #28
 800951c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009520:	20002d0c 	.word	0x20002d0c
 8009524:	20002e68 	.word	0x20002e68
 8009528:	20003280 	.word	0x20003280
 800952c:	20002d8c 	.word	0x20002d8c
 8009530:	20002d08 	.word	0x20002d08
 8009534:	20002e6c 	.word	0x20002e6c
 8009538:	20002d98 	.word	0x20002d98
 800953c:	20003278 	.word	0x20003278
 8009540:	20002e74 	.word	0x20002e74
 8009544:	080095f1 	.word	0x080095f1
 8009548:	0800b524 	.word	0x0800b524
 800954c:	20002da0 	.word	0x20002da0
 8009550:	20002e70 	.word	0x20002e70
 8009554:	2000327c 	.word	0x2000327c
 8009558:	20003284 	.word	0x20003284
 800955c:	20002d90 	.word	0x20002d90
 8009560:	20002e78 	.word	0x20002e78
 8009564:	20002d94 	.word	0x20002d94
 8009568:	4154494d 	.word	0x4154494d

0800956c <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800956c:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800956e:	1e53      	subs	r3, r2, #1
 8009570:	1cd9      	adds	r1, r3, #3
 8009572:	d900      	bls.n	8009576 <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 8009574:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009576:	6981      	ldr	r1, [r0, #24]
 8009578:	2900      	cmp	r1, #0
 800957a:	d1fb      	bne.n	8009574 <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800957c:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800957e:	4a0d      	ldr	r2, [pc, #52]	; (80095b4 <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009580:	490d      	ldr	r1, [pc, #52]	; (80095b8 <_tx_timer_system_activate+0x4c>)
 8009582:	bf94      	ite	ls
 8009584:	009b      	lslls	r3, r3, #2
 8009586:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009588:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800958a:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800958c:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800958e:	4299      	cmp	r1, r3
 8009590:	d803      	bhi.n	800959a <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009592:	4a0a      	ldr	r2, [pc, #40]	; (80095bc <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009594:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	b132      	cbz	r2, 80095ac <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800959e:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80095a0:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80095a2:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80095a4:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80095a8:	6183      	str	r3, [r0, #24]
}
 80095aa:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80095ac:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 80095b0:	6018      	str	r0, [r3, #0]
 80095b2:	e7f9      	b.n	80095a8 <_tx_timer_system_activate+0x3c>
 80095b4:	20002d08 	.word	0x20002d08
 80095b8:	20002d98 	.word	0x20002d98
 80095bc:	20002e6c 	.word	0x20002e6c

080095c0 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80095c0:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80095c2:	b153      	cbz	r3, 80095da <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80095c4:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80095c6:	4290      	cmp	r0, r2
 80095c8:	d008      	beq.n	80095dc <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80095ca:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80095cc:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80095ce:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80095d0:	6819      	ldr	r1, [r3, #0]
 80095d2:	4281      	cmp	r1, r0
 80095d4:	d008      	beq.n	80095e8 <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	6183      	str	r3, [r0, #24]
    }
}
 80095da:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	4282      	cmp	r2, r0
 80095e0:	d1f9      	bne.n	80095d6 <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e7f6      	b.n	80095d6 <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 80095e8:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	e7f3      	b.n	80095d6 <_tx_timer_system_deactivate+0x16>
 80095ee:	bf00      	nop

080095f0 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80095f0:	4b40      	ldr	r3, [pc, #256]	; (80096f4 <_tx_timer_thread_entry+0x104>)
 80095f2:	4298      	cmp	r0, r3
 80095f4:	d000      	beq.n	80095f8 <_tx_timer_thread_entry+0x8>
 80095f6:	4770      	bx	lr
{
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	b083      	sub	sp, #12
 80095fe:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800970c <_tx_timer_thread_entry+0x11c>
 8009602:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009710 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8009606:	2600      	movs	r6, #0
 8009608:	ad01      	add	r5, sp, #4
 800960a:	4c3b      	ldr	r4, [pc, #236]	; (80096f8 <_tx_timer_thread_entry+0x108>)
 800960c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8009704 <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009610:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009614:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 8009616:	f8db 3000 	ldr.w	r3, [fp]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 800961e:	b10a      	cbz	r2, 8009624 <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009620:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009624:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 8009628:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800962c:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800962e:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009632:	d059      	beq.n	80096e8 <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8009634:	4b31      	ldr	r3, [pc, #196]	; (80096fc <_tx_timer_thread_entry+0x10c>)
 8009636:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009638:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800963c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009640:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009642:	9f00      	ldr	r7, [sp, #0]
 8009644:	b9b7      	cbnz	r7, 8009674 <_tx_timer_thread_entry+0x84>
 8009646:	e034      	b.n	80096b2 <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009648:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800964a:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800964c:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800964e:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009650:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009652:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009654:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009658:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800965c:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800965e:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8009660:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 8009662:	42b8      	cmp	r0, r7
 8009664:	d02b      	beq.n	80096be <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009666:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800966a:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800966e:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8009670:	9f00      	ldr	r7, [sp, #0]
 8009672:	b1f7      	cbz	r7, 80096b2 <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009674:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 8009676:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 8009678:	42ba      	cmp	r2, r7
 800967a:	d018      	beq.n	80096ae <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800967c:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 800967e:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009680:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009682:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009684:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	2a20      	cmp	r2, #32
 800968c:	d8dc      	bhi.n	8009648 <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800968e:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009690:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009694:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009696:	b113      	cbz	r3, 800969e <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009698:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800969a:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 800969c:	9701      	str	r7, [sp, #4]
 800969e:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 80096a0:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80096a2:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	d0d6      	beq.n	8009658 <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 80096aa:	4790      	blx	r2
 80096ac:	e7d4      	b.n	8009658 <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 80096ae:	9600      	str	r6, [sp, #0]
 80096b0:	e7ea      	b.n	8009688 <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <_tx_timer_thread_entry+0x10c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	b13b      	cbz	r3, 80096c8 <_tx_timer_thread_entry+0xd8>
 80096b8:	f38c 8810 	msr	PRIMASK, ip
 80096bc:	e7a8      	b.n	8009610 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80096be:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ff53 	bl	800956c <_tx_timer_system_activate>
 80096c6:	e7ce      	b.n	8009666 <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80096c8:	490d      	ldr	r1, [pc, #52]	; (8009700 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80096ca:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80096cc:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 80096ce:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80096d0:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 80096d4:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80096d6:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 80096da:	600b      	str	r3, [r1, #0]
 80096dc:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80096e0:	4808      	ldr	r0, [pc, #32]	; (8009704 <_tx_timer_thread_entry+0x114>)
 80096e2:	f7ff fdab 	bl	800923c <_tx_thread_system_suspend>
 80096e6:	e793      	b.n	8009610 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <_tx_timer_thread_entry+0x118>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f8cb 3000 	str.w	r3, [fp]
 80096f0:	e7a0      	b.n	8009634 <_tx_timer_thread_entry+0x44>
 80096f2:	bf00      	nop
 80096f4:	4154494d 	.word	0x4154494d
 80096f8:	20002e68 	.word	0x20002e68
 80096fc:	20002d8c 	.word	0x20002d8c
 8009700:	20002cf0 	.word	0x20002cf0
 8009704:	20002da0 	.word	0x20002da0
 8009708:	20002e6c 	.word	0x20002e6c
 800970c:	20002d08 	.word	0x20002d08
 8009710:	20002d98 	.word	0x20002d98

08009714 <_txe_mutex_create>:
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8009714:	b108      	cbz	r0, 800971a <_txe_mutex_create+0x6>
 8009716:	2b34      	cmp	r3, #52	; 0x34
 8009718:	d001      	beq.n	800971e <_txe_mutex_create+0xa>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800971a:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 800971c:	4770      	bx	lr
{
 800971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009722:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009726:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8009728:	4f29      	ldr	r7, [pc, #164]	; (80097d0 <_txe_mutex_create+0xbc>)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	3301      	adds	r3, #1
 800972e:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009730:	f384 8810 	msr	PRIMASK, r4
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8009734:	4c27      	ldr	r4, [pc, #156]	; (80097d4 <_txe_mutex_create+0xc0>)
        next_mutex =   _tx_mutex_created_ptr;
 8009736:	4b28      	ldr	r3, [pc, #160]	; (80097d8 <_txe_mutex_create+0xc4>)
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8009738:	6825      	ldr	r5, [r4, #0]
        next_mutex =   _tx_mutex_created_ptr;
 800973a:	681c      	ldr	r4, [r3, #0]
            if (mutex_ptr == next_mutex)
 800973c:	b15d      	cbz	r5, 8009756 <_txe_mutex_create+0x42>
 800973e:	1b03      	subs	r3, r0, r4
 8009740:	fab3 f383 	clz	r3, r3
 8009744:	095b      	lsrs	r3, r3, #5
 8009746:	b113      	cbz	r3, 800974e <_txe_mutex_create+0x3a>
 8009748:	e005      	b.n	8009756 <_txe_mutex_create+0x42>
 800974a:	42ab      	cmp	r3, r5
 800974c:	d203      	bcs.n	8009756 <_txe_mutex_create+0x42>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800974e:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8009750:	3301      	adds	r3, #1
            if (mutex_ptr == next_mutex)
 8009752:	42a0      	cmp	r0, r4
 8009754:	d1f9      	bne.n	800974a <_txe_mutex_create+0x36>
 8009756:	4605      	mov	r5, r0
 8009758:	4616      	mov	r6, r2
 800975a:	4688      	mov	r8, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800975c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009760:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	3b01      	subs	r3, #1
 8009766:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009768:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 800976c:	f7ff fcc2 	bl	80090f4 <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 8009770:	42a5      	cmp	r5, r4
 8009772:	d015      	beq.n	80097a0 <_txe_mutex_create+0x8c>
                if (inherit != TX_NO_INHERIT)
 8009774:	2e01      	cmp	r6, #1
 8009776:	d81d      	bhi.n	80097b4 <_txe_mutex_create+0xa0>
        TX_THREAD_GET_CURRENT(thread_ptr)
 8009778:	4a18      	ldr	r2, [pc, #96]	; (80097dc <_txe_mutex_create+0xc8>)
        if (thread_ptr == &_tx_timer_thread)
 800977a:	4b19      	ldr	r3, [pc, #100]	; (80097e0 <_txe_mutex_create+0xcc>)
 800977c:	6812      	ldr	r2, [r2, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d01a      	beq.n	80097b8 <_txe_mutex_create+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009782:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009786:	4b17      	ldr	r3, [pc, #92]	; (80097e4 <_txe_mutex_create+0xd0>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	d00b      	beq.n	80097a6 <_txe_mutex_create+0x92>
 800978e:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4313      	orrs	r3, r2
 8009796:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800979a:	d204      	bcs.n	80097a6 <_txe_mutex_create+0x92>
            status =  TX_CALLER_ERROR;
 800979c:	2013      	movs	r0, #19
    return(status);
 800979e:	e000      	b.n	80097a2 <_txe_mutex_create+0x8e>
        status =  TX_MUTEX_ERROR;
 80097a0:	201c      	movs	r0, #28
}
 80097a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80097a6:	4632      	mov	r2, r6
 80097a8:	4641      	mov	r1, r8
 80097aa:	4628      	mov	r0, r5
}
 80097ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80097b0:	f7ff b8e4 	b.w	800897c <_tx_mutex_create>
                    status =  TX_INHERIT_ERROR;
 80097b4:	201f      	movs	r0, #31
 80097b6:	e7f4      	b.n	80097a2 <_txe_mutex_create+0x8e>
 80097b8:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <_txe_mutex_create+0xd0>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	d0eb      	beq.n	800979c <_txe_mutex_create+0x88>
 80097c4:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 80097c8:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	e7e9      	b.n	80097a2 <_txe_mutex_create+0x8e>
 80097ce:	bf00      	nop
 80097d0:	20002cf0 	.word	0x20002cf0
 80097d4:	2000328c 	.word	0x2000328c
 80097d8:	20003290 	.word	0x20003290
 80097dc:	20002cf4 	.word	0x20002cf4
 80097e0:	20002da0 	.word	0x20002da0
 80097e4:	2000019c 	.word	0x2000019c

080097e8 <_txe_mutex_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80097e8:	b118      	cbz	r0, 80097f2 <_txe_mutex_get+0xa>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80097ea:	4b15      	ldr	r3, [pc, #84]	; (8009840 <_txe_mutex_get+0x58>)
 80097ec:	6802      	ldr	r2, [r0, #0]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d001      	beq.n	80097f6 <_txe_mutex_get+0xe>
        status =  TX_MUTEX_ERROR;
 80097f2:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 80097f4:	4770      	bx	lr
{
 80097f6:	b410      	push	{r4}
        if (wait_option != TX_NO_WAIT)
 80097f8:	b981      	cbnz	r1, 800981c <_txe_mutex_get+0x34>
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <_txe_mutex_get+0x5c>)
 80097fc:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009800:	681c      	ldr	r4, [r3, #0]
 8009802:	4322      	orrs	r2, r4
 8009804:	d006      	beq.n	8009814 <_txe_mutex_get+0x2c>
 8009806:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4313      	orrs	r3, r2
 800980e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009812:	d312      	bcc.n	800983a <_txe_mutex_get+0x52>
}
 8009814:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8009818:	f7ff b8e0 	b.w	80089dc <_tx_mutex_get>
 800981c:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009820:	4b08      	ldr	r3, [pc, #32]	; (8009844 <_txe_mutex_get+0x5c>)
 8009822:	681c      	ldr	r4, [r3, #0]
 8009824:	4322      	orrs	r2, r4
 8009826:	d104      	bne.n	8009832 <_txe_mutex_get+0x4a>
                TX_THREAD_GET_CURRENT(current_thread)
 8009828:	4c07      	ldr	r4, [pc, #28]	; (8009848 <_txe_mutex_get+0x60>)
                if (current_thread == &_tx_timer_thread)
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <_txe_mutex_get+0x64>)
 800982c:	6824      	ldr	r4, [r4, #0]
 800982e:	4294      	cmp	r4, r2
 8009830:	d1e4      	bne.n	80097fc <_txe_mutex_get+0x14>
                status =  TX_WAIT_ERROR;
 8009832:	2004      	movs	r0, #4
}
 8009834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009838:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 800983a:	2013      	movs	r0, #19
    return(status);
 800983c:	e7fa      	b.n	8009834 <_txe_mutex_get+0x4c>
 800983e:	bf00      	nop
 8009840:	4d555445 	.word	0x4d555445
 8009844:	2000019c 	.word	0x2000019c
 8009848:	20002cf4 	.word	0x20002cf4
 800984c:	20002da0 	.word	0x20002da0

08009850 <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8009850:	b190      	cbz	r0, 8009878 <_txe_mutex_put+0x28>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8009852:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <_txe_mutex_put+0x30>)
 8009854:	6802      	ldr	r2, [r0, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d10e      	bne.n	8009878 <_txe_mutex_put+0x28>
 800985a:	f3ef 8305 	mrs	r3, IPSR
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800985e:	4a09      	ldr	r2, [pc, #36]	; (8009884 <_txe_mutex_put+0x34>)
 8009860:	6811      	ldr	r1, [r2, #0]
 8009862:	430b      	orrs	r3, r1
 8009864:	d006      	beq.n	8009874 <_txe_mutex_put+0x24>
 8009866:	f3ef 8105 	mrs	r1, IPSR
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800986a:	6813      	ldr	r3, [r2, #0]
 800986c:	430b      	orrs	r3, r1
 800986e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009872:	d303      	bcc.n	800987c <_txe_mutex_put+0x2c>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8009874:	f7ff b99c 	b.w	8008bb0 <_tx_mutex_put>
        status =  TX_MUTEX_ERROR;
 8009878:	201c      	movs	r0, #28
 800987a:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 800987c:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 800987e:	4770      	bx	lr
 8009880:	4d555445 	.word	0x4d555445
 8009884:	2000019c 	.word	0x2000019c

08009888 <_txe_semaphore_create>:
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8009888:	2b20      	cmp	r3, #32
 800988a:	d100      	bne.n	800988e <_txe_semaphore_create+0x6>
 800988c:	b908      	cbnz	r0, 8009892 <_txe_semaphore_create+0xa>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800988e:	200c      	movs	r0, #12
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
    }

    /* Return completion status.  */
    return(status);
}
 8009890:	4770      	bx	lr
{
 8009892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009896:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800989a:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 800989c:	4e21      	ldr	r6, [pc, #132]	; (8009924 <_txe_semaphore_create+0x9c>)
 800989e:	6833      	ldr	r3, [r6, #0]
 80098a0:	3301      	adds	r3, #1
 80098a2:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80098a4:	f384 8810 	msr	PRIMASK, r4
        next_semaphore =  _tx_semaphore_created_ptr;
 80098a8:	4c1f      	ldr	r4, [pc, #124]	; (8009928 <_txe_semaphore_create+0xa0>)
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80098aa:	4b20      	ldr	r3, [pc, #128]	; (800992c <_txe_semaphore_create+0xa4>)
        next_semaphore =  _tx_semaphore_created_ptr;
 80098ac:	6824      	ldr	r4, [r4, #0]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80098ae:	681d      	ldr	r5, [r3, #0]
            if (semaphore_ptr == next_semaphore)
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d00a      	beq.n	80098ca <_txe_semaphore_create+0x42>
 80098b4:	fab5 f385 	clz	r3, r5
 80098b8:	095b      	lsrs	r3, r3, #5
 80098ba:	b113      	cbz	r3, 80098c2 <_txe_semaphore_create+0x3a>
 80098bc:	e005      	b.n	80098ca <_txe_semaphore_create+0x42>
 80098be:	42a0      	cmp	r0, r4
 80098c0:	d003      	beq.n	80098ca <_txe_semaphore_create+0x42>
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80098c2:	3301      	adds	r3, #1
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80098c4:	6964      	ldr	r4, [r4, #20]
            if (semaphore_ptr == next_semaphore)
 80098c6:	42ab      	cmp	r3, r5
 80098c8:	d3f9      	bcc.n	80098be <_txe_semaphore_create+0x36>
 80098ca:	4615      	mov	r5, r2
 80098cc:	4688      	mov	r8, r1
 80098ce:	4607      	mov	r7, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80098d0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80098d4:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 80098d6:	6833      	ldr	r3, [r6, #0]
 80098d8:	3b01      	subs	r3, #1
 80098da:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80098dc:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 80098e0:	f7ff fc08 	bl	80090f4 <_tx_thread_system_preempt_check>
        if (semaphore_ptr == next_semaphore)
 80098e4:	42a7      	cmp	r7, r4
 80098e6:	d018      	beq.n	800991a <_txe_semaphore_create+0x92>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80098e8:	4a11      	ldr	r2, [pc, #68]	; (8009930 <_txe_semaphore_create+0xa8>)
            if (thread_ptr == &_tx_timer_thread)
 80098ea:	4b12      	ldr	r3, [pc, #72]	; (8009934 <_txe_semaphore_create+0xac>)
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d016      	beq.n	8009920 <_txe_semaphore_create+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80098f2:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80098f6:	4b10      	ldr	r3, [pc, #64]	; (8009938 <_txe_semaphore_create+0xb0>)
 80098f8:	6819      	ldr	r1, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	d006      	beq.n	800990c <_txe_semaphore_create+0x84>
 80098fe:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4313      	orrs	r3, r2
 8009906:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800990a:	d309      	bcc.n	8009920 <_txe_semaphore_create+0x98>
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800990c:	462a      	mov	r2, r5
 800990e:	4641      	mov	r1, r8
 8009910:	4638      	mov	r0, r7
}
 8009912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8009916:	f000 ba63 	b.w	8009de0 <_tx_semaphore_create>
        status =  TX_SEMAPHORE_ERROR;
 800991a:	200c      	movs	r0, #12
}
 800991c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                status =  TX_CALLER_ERROR;
 8009920:	2013      	movs	r0, #19
    return(status);
 8009922:	e7fb      	b.n	800991c <_txe_semaphore_create+0x94>
 8009924:	20002cf0 	.word	0x20002cf0
 8009928:	20003298 	.word	0x20003298
 800992c:	200032a8 	.word	0x200032a8
 8009930:	20002cf4 	.word	0x20002cf4
 8009934:	20002da0 	.word	0x20002da0
 8009938:	2000019c 	.word	0x2000019c

0800993c <_txe_semaphore_delete>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800993c:	b180      	cbz	r0, 8009960 <_txe_semaphore_delete+0x24>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800993e:	6802      	ldr	r2, [r0, #0]
 8009940:	4b09      	ldr	r3, [pc, #36]	; (8009968 <_txe_semaphore_delete+0x2c>)
 8009942:	429a      	cmp	r2, r3
 8009944:	d10c      	bne.n	8009960 <_txe_semaphore_delete+0x24>
 8009946:	f3ef 8305 	mrs	r3, IPSR
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800994a:	4a08      	ldr	r2, [pc, #32]	; (800996c <_txe_semaphore_delete+0x30>)
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	4313      	orrs	r3, r2
 8009950:	d108      	bne.n	8009964 <_txe_semaphore_delete+0x28>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009952:	4a07      	ldr	r2, [pc, #28]	; (8009970 <_txe_semaphore_delete+0x34>)

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8009954:	4b07      	ldr	r3, [pc, #28]	; (8009974 <_txe_semaphore_delete+0x38>)
 8009956:	6812      	ldr	r2, [r2, #0]
 8009958:	429a      	cmp	r2, r3
 800995a:	d003      	beq.n	8009964 <_txe_semaphore_delete+0x28>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800995c:	f000 ba6a 	b.w	8009e34 <_tx_semaphore_delete>
        status =  TX_SEMAPHORE_ERROR;
 8009960:	200c      	movs	r0, #12
 8009962:	4770      	bx	lr
            status =  TX_CALLER_ERROR;
 8009964:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 8009966:	4770      	bx	lr
 8009968:	53454d41 	.word	0x53454d41
 800996c:	2000019c 	.word	0x2000019c
 8009970:	20002cf4 	.word	0x20002cf4
 8009974:	20002da0 	.word	0x20002da0

08009978 <_txe_semaphore_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8009978:	b188      	cbz	r0, 800999e <_txe_semaphore_get+0x26>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <_txe_semaphore_get+0x30>)
 800997c:	6802      	ldr	r2, [r0, #0]
 800997e:	429a      	cmp	r2, r3
 8009980:	d10d      	bne.n	800999e <_txe_semaphore_get+0x26>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009982:	b151      	cbz	r1, 800999a <_txe_semaphore_get+0x22>
 8009984:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009988:	4a08      	ldr	r2, [pc, #32]	; (80099ac <_txe_semaphore_get+0x34>)
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	4313      	orrs	r3, r2
 800998e:	d108      	bne.n	80099a2 <_txe_semaphore_get+0x2a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8009990:	4a07      	ldr	r2, [pc, #28]	; (80099b0 <_txe_semaphore_get+0x38>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8009992:	4b08      	ldr	r3, [pc, #32]	; (80099b4 <_txe_semaphore_get+0x3c>)
 8009994:	6812      	ldr	r2, [r2, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d003      	beq.n	80099a2 <_txe_semaphore_get+0x2a>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800999a:	f000 ba99 	b.w	8009ed0 <_tx_semaphore_get>
        status =  TX_SEMAPHORE_ERROR;
 800999e:	200c      	movs	r0, #12
 80099a0:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 80099a2:	2004      	movs	r0, #4
    }

    /* Return completion status.  */
    return(status);
}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	53454d41 	.word	0x53454d41
 80099ac:	2000019c 	.word	0x2000019c
 80099b0:	20002cf4 	.word	0x20002cf4
 80099b4:	20002da0 	.word	0x20002da0

080099b8 <_txe_semaphore_put>:

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80099b8:	b118      	cbz	r0, 80099c2 <_txe_semaphore_put+0xa>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80099ba:	6802      	ldr	r2, [r0, #0]
 80099bc:	4b03      	ldr	r3, [pc, #12]	; (80099cc <_txe_semaphore_put+0x14>)
 80099be:	429a      	cmp	r2, r3
 80099c0:	d001      	beq.n	80099c6 <_txe_semaphore_put+0xe>
        status =  _tx_semaphore_put(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 80099c2:	200c      	movs	r0, #12
 80099c4:	4770      	bx	lr
        status =  _tx_semaphore_put(semaphore_ptr);
 80099c6:	f000 bac5 	b.w	8009f54 <_tx_semaphore_put>
 80099ca:	bf00      	nop
 80099cc:	53454d41 	.word	0x53454d41

080099d0 <_txe_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr, VOID (*entry_function)(ULONG id),
		ULONG entry_input, VOID* stack_start, ULONG stack_size, UINT priority,
		UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	b085      	sub	sp, #20
 80099d6:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 80099da:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 80099de:	9401      	str	r4, [sp, #4]
 80099e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80099e2:	9403      	str	r4, [sp, #12]
 80099e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80099e6:	9402      	str	r4, [sp, #8]
 80099e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
	{
		/* Thread pointer is invalid, return appropriate error code.  */
		status = TX_THREAD_ERROR;
	}
	/* Now check for invalid thread control block size.  */
	else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d079      	beq.n	8009ae2 <_txe_thread_create+0x112>
 80099ee:	2cc8      	cmp	r4, #200	; 0xc8
 80099f0:	d177      	bne.n	8009ae2 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80099f2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80099f6:	b672      	cpsid	i
	{
		/* Disable interrupts.  */
		TX_DISABLE

		/* Increment the preempt disable flag.  */
		_tx_thread_preempt_disable++;
 80099f8:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009b3c <_txe_thread_create+0x16c>
 80099fc:	f8de 4000 	ldr.w	r4, [lr]
 8009a00:	3401      	adds	r4, #1
 8009a02:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009a06:	f385 8810 	msr	PRIMASK, r5
		/* Restore interrupts.  */
		TX_RESTORE

		/* Next see if it is already in the created list.  */
		break_flag = TX_FALSE;
		next_thread = _tx_thread_created_ptr;
 8009a0a:	4c47      	ldr	r4, [pc, #284]	; (8009b28 <_txe_thread_create+0x158>)
		work_ptr = TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
		work_ptr = TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG ) 1)));
 8009a0c:	f108 3cff 	add.w	ip, r8, #4294967295
		stack_end = TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 8009a10:	4d46      	ldr	r5, [pc, #280]	; (8009b2c <_txe_thread_create+0x15c>)
		next_thread = _tx_thread_created_ptr;
 8009a12:	6824      	ldr	r4, [r4, #0]
		work_ptr = TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG ) 1)));
 8009a14:	44bc      	add	ip, r7
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 8009a16:	f8d5 b000 	ldr.w	fp, [r5]
		{
			/* Determine if this thread matches the thread in the list.  */
			if (thread_ptr == next_thread)
 8009a1a:	1b05      	subs	r5, r0, r4
 8009a1c:	fab5 f585 	clz	r5, r5
 8009a20:	096d      	lsrs	r5, r5, #5
 8009a22:	f1bb 0f00 	cmp.w	fp, #0
 8009a26:	bf08      	it	eq
 8009a28:	2501      	moveq	r5, #1
				/* Set the break flag.  */
				break_flag = TX_TRUE;
			}

			/* Determine if we need to break the loop.  */
			if (break_flag == TX_TRUE)
 8009a2a:	b985      	cbnz	r5, 8009a4e <_txe_thread_create+0x7e>
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 8009a2c:	469a      	mov	sl, r3
				/* Yes, break out of the loop.  */
				break;
			}

			/* Check the stack pointer to see if it overlaps with this thread's stack.  */
			if (stack_start >= next_thread->tx_thread_stack_start)
 8009a2e:	68e6      	ldr	r6, [r4, #12]
 8009a30:	42be      	cmp	r6, r7
 8009a32:	d865      	bhi.n	8009b00 <_txe_thread_create+0x130>
			{
				if (stack_start < next_thread->tx_thread_stack_end)
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	42bb      	cmp	r3, r7
 8009a38:	d962      	bls.n	8009b00 <_txe_thread_create+0x130>
					break_flag = TX_TRUE;
				}
			}

			/* Check the end of the stack to see if it is inside this thread's stack area as well.  */
			if (stack_end >= next_thread->tx_thread_stack_start)
 8009a3a:	4566      	cmp	r6, ip
 8009a3c:	d803      	bhi.n	8009a46 <_txe_thread_create+0x76>
 8009a3e:	2601      	movs	r6, #1
					stack_start = TX_NULL;
 8009a40:	2700      	movs	r7, #0
			{
				if (stack_end < next_thread->tx_thread_stack_end)
 8009a42:	4563      	cmp	r3, ip
 8009a44:	d951      	bls.n	8009aea <_txe_thread_create+0x11a>
 8009a46:	4653      	mov	r3, sl
					break_flag = TX_TRUE;
				}
			}

			/* Move to the next thread.  */
			next_thread = next_thread->tx_thread_created_next;
 8009a48:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
					stack_start = TX_NULL;
 8009a4c:	2700      	movs	r7, #0
 8009a4e:	4605      	mov	r5, r0
 8009a50:	469a      	mov	sl, r3
 8009a52:	4616      	mov	r6, r2
 8009a54:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009a56:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009a5a:	b672      	cpsid	i

		/* Disable interrupts.  */
		TX_DISABLE

		/* Decrement the preempt disable flag.  */
		_tx_thread_preempt_disable--;
 8009a5c:	f8de 3000 	ldr.w	r3, [lr]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009a66:	f382 8810 	msr	PRIMASK, r2

		/* Restore interrupts.  */
		TX_RESTORE

		/* Check for preemption.  */
		_tx_thread_system_preempt_check();
 8009a6a:	f7ff fb43 	bl	80090f4 <_tx_thread_system_preempt_check>

		/* At this point, check to see if there is a duplicate thread.  */
		if (thread_ptr == next_thread)
 8009a6e:	42a5      	cmp	r5, r4
 8009a70:	d037      	beq.n	8009ae2 <_txe_thread_create+0x112>
		{
			/* Invalid stack or entry point, return appropriate error code.  */
			status = TX_PTR_ERROR;
		}
		/* Check for invalid thread entry point.  */
		else if (entry_function == TX_NULL)
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d04c      	beq.n	8009b10 <_txe_thread_create+0x140>
 8009a76:	2f00      	cmp	r7, #0
 8009a78:	d04a      	beq.n	8009b10 <_txe_thread_create+0x140>
		{
			/* Invalid stack or entry point, return appropriate error code.  */
			status = TX_PTR_ERROR;
		}
		/* Check the stack size.  */
		else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8009a7a:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 8009a7e:	d945      	bls.n	8009b0c <_txe_thread_create+0x13c>
		{
			/* Stack is not big enough, return appropriate error code.  */
			status = TX_SIZE_ERROR;
		}
		/* Check the priority specified.  */
		else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8009a80:	f1b9 0f1f 	cmp.w	r9, #31
 8009a84:	d848      	bhi.n	8009b18 <_txe_thread_create+0x148>
		{
			/* Invalid priority selected, return appropriate error code.  */
			status = TX_PRIORITY_ERROR;
		}
		/* Check preemption threshold. */
		else if (preempt_threshold > priority)
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	4599      	cmp	r9, r3
 8009a8a:	d34b      	bcc.n	8009b24 <_txe_thread_create+0x154>
		{
			/* Invalid preempt threshold, return appropriate error code.  */
			status = TX_THRESH_ERROR;
		}
		/* Check the start selection.  */
		else if (auto_start > TX_AUTO_START)
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d844      	bhi.n	8009b1c <_txe_thread_create+0x14c>
		}
		else
		{
#ifndef TX_TIMER_PROCESS_IN_ISR
			/* Pickup thread pointer.  */
			TX_THREAD_GET_CURRENT(current_thread)
 8009a92:	4a27      	ldr	r2, [pc, #156]	; (8009b30 <_txe_thread_create+0x160>)

			/* Check for invalid caller of this function.  First check for a calling thread.  */
			if (current_thread == &_tx_timer_thread)
 8009a94:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <_txe_thread_create+0x164>)
 8009a96:	6810      	ldr	r0, [r2, #0]
	status = TX_SUCCESS;
 8009a98:	4298      	cmp	r0, r3
 8009a9a:	bf0c      	ite	eq
 8009a9c:	2013      	moveq	r0, #19
 8009a9e:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009aa0:	f3ef 8205 	mrs	r2, IPSR
				status = TX_CALLER_ERROR;
			}
#endif

			/* Check for interrupt call.  */
			if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG)0))
 8009aa4:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <_txe_thread_create+0x168>)
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	d006      	beq.n	8009aba <_txe_thread_create+0xea>
 8009aac:	f3ef 8205 	mrs	r2, IPSR
			{
				/* Now, make sure the call is from an interrupt and not initialization.  */
				if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009ab8:	d332      	bcc.n	8009b20 <_txe_thread_create+0x150>
			}
		}
	}

	/* Determine if everything is okay.  */
	if (status == TX_SUCCESS)
 8009aba:	b998      	cbnz	r0, 8009ae4 <_txe_thread_create+0x114>
	{
		/* Call actual thread create function.  */
		status = _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input, stack_start,
 8009abc:	9b02      	ldr	r3, [sp, #8]
 8009abe:	4628      	mov	r0, r5
 8009ac0:	9a03      	ldr	r2, [sp, #12]
 8009ac2:	9901      	ldr	r1, [sp, #4]
 8009ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ac6:	4653      	mov	r3, sl
 8009ac8:	9212      	str	r2, [sp, #72]	; 0x48
 8009aca:	4632      	mov	r2, r6
 8009acc:	9111      	str	r1, [sp, #68]	; 0x44
 8009ace:	4659      	mov	r1, fp
 8009ad0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8009ad4:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
				stack_size, priority, preempt_threshold, time_slice, auto_start);
	}

	/* Return completion status.  */
	return (status);
}
 8009ad8:	b005      	add	sp, #20
 8009ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status = _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input, stack_start,
 8009ade:	f7ff b971 	b.w	8008dc4 <_tx_thread_create>
		status = TX_THREAD_ERROR;
 8009ae2:	200e      	movs	r0, #14
}
 8009ae4:	b005      	add	sp, #20
 8009ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			next_thread = next_thread->tx_thread_created_next;
 8009aea:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 8009aee:	3501      	adds	r5, #1
			if (break_flag == TX_TRUE)
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	bf18      	it	ne
 8009af4:	455d      	cmpne	r5, fp
 8009af6:	d201      	bcs.n	8009afc <_txe_thread_create+0x12c>
 8009af8:	2e00      	cmp	r6, #0
 8009afa:	d098      	beq.n	8009a2e <_txe_thread_create+0x5e>
 8009afc:	4653      	mov	r3, sl
 8009afe:	e7a6      	b.n	8009a4e <_txe_thread_create+0x7e>
			if (stack_end >= next_thread->tx_thread_stack_start)
 8009b00:	4566      	cmp	r6, ip
 8009b02:	f04f 0600 	mov.w	r6, #0
 8009b06:	d8f0      	bhi.n	8009aea <_txe_thread_create+0x11a>
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	e79a      	b.n	8009a42 <_txe_thread_create+0x72>
			status = TX_SIZE_ERROR;
 8009b0c:	2005      	movs	r0, #5
 8009b0e:	e7e9      	b.n	8009ae4 <_txe_thread_create+0x114>
			status = TX_PTR_ERROR;
 8009b10:	2003      	movs	r0, #3
}
 8009b12:	b005      	add	sp, #20
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = TX_PRIORITY_ERROR;
 8009b18:	200f      	movs	r0, #15
 8009b1a:	e7e3      	b.n	8009ae4 <_txe_thread_create+0x114>
			status = TX_START_ERROR;
 8009b1c:	2010      	movs	r0, #16
 8009b1e:	e7e1      	b.n	8009ae4 <_txe_thread_create+0x114>
					status = TX_CALLER_ERROR;
 8009b20:	2013      	movs	r0, #19
	return (status);
 8009b22:	e7df      	b.n	8009ae4 <_txe_thread_create+0x114>
			status = TX_THRESH_ERROR;
 8009b24:	2018      	movs	r0, #24
 8009b26:	e7dd      	b.n	8009ae4 <_txe_thread_create+0x114>
 8009b28:	20002ce0 	.word	0x20002ce0
 8009b2c:	20002ce8 	.word	0x20002ce8
 8009b30:	20002cf4 	.word	0x20002cf4
 8009b34:	20002da0 	.word	0x20002da0
 8009b38:	2000019c 	.word	0x2000019c
 8009b3c:	20002cf0 	.word	0x20002cf0

08009b40 <_txe_thread_delete>:
 8009b40:	f3ef 8205 	mrs	r2, IPSR

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009b44:	4907      	ldr	r1, [pc, #28]	; (8009b64 <_txe_thread_delete+0x24>)
 8009b46:	6809      	ldr	r1, [r1, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	d108      	bne.n	8009b5e <_txe_thread_delete+0x1e>
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8009b4c:	b118      	cbz	r0, 8009b56 <_txe_thread_delete+0x16>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009b4e:	6802      	ldr	r2, [r0, #0]
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <_txe_thread_delete+0x28>)
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d001      	beq.n	8009b5a <_txe_thread_delete+0x1a>
        status =  TX_THREAD_ERROR;
 8009b56:	200e      	movs	r0, #14
        status =  _tx_thread_delete(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8009b58:	4770      	bx	lr
        status =  _tx_thread_delete(thread_ptr);
 8009b5a:	f000 ba2d 	b.w	8009fb8 <_tx_thread_delete>
        status =  TX_CALLER_ERROR;
 8009b5e:	2013      	movs	r0, #19
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	2000019c 	.word	0x2000019c
 8009b68:	54485244 	.word	0x54485244

08009b6c <_txe_thread_info_get>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009b6c:	b150      	cbz	r0, 8009b84 <_txe_thread_info_get+0x18>
{
 8009b6e:	b430      	push	{r4, r5}
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009b70:	6805      	ldr	r5, [r0, #0]
 8009b72:	4c05      	ldr	r4, [pc, #20]	; (8009b88 <_txe_thread_info_get+0x1c>)
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d002      	beq.n	8009b7e <_txe_thread_info_get+0x12>
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
}
 8009b78:	200e      	movs	r0, #14
 8009b7a:	bc30      	pop	{r4, r5}
 8009b7c:	4770      	bx	lr
 8009b7e:	bc30      	pop	{r4, r5}
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold, 
 8009b80:	f000 ba48 	b.w	800a014 <_tx_thread_info_get>
}
 8009b84:	200e      	movs	r0, #14
 8009b86:	4770      	bx	lr
 8009b88:	54485244 	.word	0x54485244

08009b8c <_txe_thread_relinquish>:

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <_txe_thread_relinquish+0x18>)

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	b12b      	cbz	r3, 8009b9e <_txe_thread_relinquish+0x12>
 8009b92:	f3ef 8305 	mrs	r3, IPSR
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8009b96:	4a04      	ldr	r2, [pc, #16]	; (8009ba8 <_txe_thread_relinquish+0x1c>)
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	d000      	beq.n	8009ba0 <_txe_thread_relinquish+0x14>
        
            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
        }
    }
}
 8009b9e:	4770      	bx	lr
            _tx_thread_relinquish();
 8009ba0:	f000 ba6a 	b.w	800a078 <_tx_thread_relinquish>
 8009ba4:	20002cf4 	.word	0x20002cf4
 8009ba8:	2000019c 	.word	0x2000019c

08009bac <_txe_thread_resume>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009bac:	b118      	cbz	r0, 8009bb6 <_txe_thread_resume+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009bae:	6802      	ldr	r2, [r0, #0]
 8009bb0:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <_txe_thread_resume+0x14>)
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d001      	beq.n	8009bba <_txe_thread_resume+0xe>
        status =  _tx_thread_resume(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8009bb6:	200e      	movs	r0, #14
 8009bb8:	4770      	bx	lr
        status =  _tx_thread_resume(thread_ptr);
 8009bba:	f000 ba99 	b.w	800a0f0 <_tx_thread_resume>
 8009bbe:	bf00      	nop
 8009bc0:	54485244 	.word	0x54485244

08009bc4 <_txe_thread_suspend>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009bc4:	b118      	cbz	r0, 8009bce <_txe_thread_suspend+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009bc6:	6802      	ldr	r2, [r0, #0]
 8009bc8:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <_txe_thread_suspend+0x14>)
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d001      	beq.n	8009bd2 <_txe_thread_suspend+0xe>
        status =  _tx_thread_suspend(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8009bce:	200e      	movs	r0, #14
 8009bd0:	4770      	bx	lr
        status =  _tx_thread_suspend(thread_ptr);
 8009bd2:	f000 bacf 	b.w	800a174 <_tx_thread_suspend>
 8009bd6:	bf00      	nop
 8009bd8:	54485244 	.word	0x54485244

08009bdc <_txe_thread_terminate>:

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009bdc:	b158      	cbz	r0, 8009bf6 <_txe_thread_terminate+0x1a>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009bde:	6802      	ldr	r2, [r0, #0]
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <_txe_thread_terminate+0x24>)
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d107      	bne.n	8009bf6 <_txe_thread_terminate+0x1a>
 8009be6:	f3ef 8305 	mrs	r3, IPSR
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009bea:	4a06      	ldr	r2, [pc, #24]	; (8009c04 <_txe_thread_terminate+0x28>)
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	d103      	bne.n	8009bfa <_txe_thread_terminate+0x1e>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 8009bf2:	f000 bafb 	b.w	800a1ec <_tx_thread_terminate>
        status =  TX_THREAD_ERROR;
 8009bf6:	200e      	movs	r0, #14
 8009bf8:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8009bfa:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	54485244 	.word	0x54485244
 8009c04:	2000019c 	.word	0x2000019c

08009c08 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_high_level(VOID)
{
 8009c08:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the event log, if enabled.  */
	TX_EL_INITIALIZE

	/* Call the thread control initialization function.  */
	_tx_thread_initialize();
 8009c0a:	f7ff f97b 	bl	8008f04 <_tx_thread_initialize>
#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Call the semaphore initialization function.  */
	_tx_semaphore_initialize();

	/* Call the queue initialization function.  */
	_tx_queue_initialize();
 8009c0e:	4d0e      	ldr	r5, [pc, #56]	; (8009c48 <_tx_initialize_high_level+0x40>)
	_tx_timer_initialize();
 8009c10:	f7ff fc36 	bl	8009480 <_tx_timer_initialize>
	_tx_semaphore_initialize();
 8009c14:	2300      	movs	r3, #0
 8009c16:	490d      	ldr	r1, [pc, #52]	; (8009c4c <_tx_initialize_high_level+0x44>)
 8009c18:	4a0d      	ldr	r2, [pc, #52]	; (8009c50 <_tx_initialize_high_level+0x48>)
 8009c1a:	600b      	str	r3, [r1, #0]
 8009c1c:	6013      	str	r3, [r2, #0]
	_tx_queue_initialize();
 8009c1e:	4c0d      	ldr	r4, [pc, #52]	; (8009c54 <_tx_initialize_high_level+0x4c>)

	/* Call the event flag initialization function.  */
	_tx_event_flags_initialize();
 8009c20:	480d      	ldr	r0, [pc, #52]	; (8009c58 <_tx_initialize_high_level+0x50>)
 8009c22:	490e      	ldr	r1, [pc, #56]	; (8009c5c <_tx_initialize_high_level+0x54>)

	/* Call the block pool initialization function.  */
	_tx_block_pool_initialize();
 8009c24:	4a0e      	ldr	r2, [pc, #56]	; (8009c60 <_tx_initialize_high_level+0x58>)
	_tx_queue_initialize();
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	6023      	str	r3, [r4, #0]
	_tx_event_flags_initialize();
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	600b      	str	r3, [r1, #0]
	_tx_block_pool_initialize();
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	4d0c      	ldr	r5, [pc, #48]	; (8009c64 <_tx_initialize_high_level+0x5c>)

	/* Call the byte pool initialization function.  */
	_tx_byte_pool_initialize();
 8009c32:	4c0d      	ldr	r4, [pc, #52]	; (8009c68 <_tx_initialize_high_level+0x60>)
 8009c34:	480d      	ldr	r0, [pc, #52]	; (8009c6c <_tx_initialize_high_level+0x64>)

	/* Call the mutex initialization function.  */
	_tx_mutex_initialize();
 8009c36:	490e      	ldr	r1, [pc, #56]	; (8009c70 <_tx_initialize_high_level+0x68>)
 8009c38:	4a0e      	ldr	r2, [pc, #56]	; (8009c74 <_tx_initialize_high_level+0x6c>)
	_tx_block_pool_initialize();
 8009c3a:	602b      	str	r3, [r5, #0]
	_tx_byte_pool_initialize();
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	6003      	str	r3, [r0, #0]
	_tx_mutex_initialize();
 8009c40:	600b      	str	r3, [r1, #0]
 8009c42:	6013      	str	r3, [r2, #0]
#endif
}
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	200032b4 	.word	0x200032b4
 8009c4c:	20003298 	.word	0x20003298
 8009c50:	200032a8 	.word	0x200032a8
 8009c54:	20003294 	.word	0x20003294
 8009c58:	20003288 	.word	0x20003288
 8009c5c:	200032ac 	.word	0x200032ac
 8009c60:	200032b0 	.word	0x200032b0
 8009c64:	200032a4 	.word	0x200032a4
 8009c68:	2000329c 	.word	0x2000329c
 8009c6c:	200032b8 	.word	0x200032b8
 8009c70:	20003290 	.word	0x20003290
 8009c74:	2000328c 	.word	0x2000328c

08009c78 <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8009c78:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009c7a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009c7e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8009c80:	4a1a      	ldr	r2, [pc, #104]	; (8009cec <_tx_mutex_cleanup+0x74>)
 8009c82:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8009c84:	4294      	cmp	r4, r2
 8009c86:	d002      	beq.n	8009c8e <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009c88:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009c8e:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8009c92:	428a      	cmp	r2, r1
 8009c94:	d1f8      	bne.n	8009c88 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009c96:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	d0f5      	beq.n	8009c88 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8009c9c:	4914      	ldr	r1, [pc, #80]	; (8009cf0 <_tx_mutex_cleanup+0x78>)
 8009c9e:	6814      	ldr	r4, [r2, #0]
 8009ca0:	428c      	cmp	r4, r1
 8009ca2:	d1f1      	bne.n	8009c88 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8009ca4:	69d1      	ldr	r1, [r2, #28]
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	d0ee      	beq.n	8009c88 <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 8009caa:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009cac:	2400      	movs	r4, #0
 8009cae:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 8009cb0:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009cb2:	b1c1      	cbz	r1, 8009ce6 <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009cb4:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009cb6:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009cba:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009cbc:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009cbe:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009cc0:	d011      	beq.n	8009ce6 <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8009cc2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009cc4:	2a0d      	cmp	r2, #13
 8009cc6:	d1df      	bne.n	8009c88 <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8009cc8:	490a      	ldr	r1, [pc, #40]	; (8009cf4 <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009cca:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 8009ccc:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009cce:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	600a      	str	r2, [r1, #0]
 8009cd6:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8009cda:	f7ff fa29 	bl	8009130 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009cde:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009ce2:	b672      	cpsid	i
 8009ce4:	e7d0      	b.n	8009c88 <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8009ce6:	6191      	str	r1, [r2, #24]
 8009ce8:	e7eb      	b.n	8009cc2 <_tx_mutex_cleanup+0x4a>
 8009cea:	bf00      	nop
 8009cec:	08009c79 	.word	0x08009c79
 8009cf0:	4d555445 	.word	0x4d555445
 8009cf4:	20002cf0 	.word	0x20002cf0

08009cf8 <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009cfc:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009d00:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009d02:	4d0d      	ldr	r5, [pc, #52]	; (8009d38 <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009d04:	2601      	movs	r6, #1
 8009d06:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 8009d0a:	682a      	ldr	r2, [r5, #0]
 8009d0c:	4432      	add	r2, r6
 8009d0e:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 8009d10:	b158      	cbz	r0, 8009d2a <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009d12:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009d14:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8009d18:	f7fe ff4a 	bl	8008bb0 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009d1c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009d20:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8009d22:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d1f2      	bne.n	8009d10 <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8009d2a:	682a      	ldr	r2, [r5, #0]
 8009d2c:	3a01      	subs	r2, #1
 8009d2e:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009d30:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
 8009d36:	bf00      	nop
 8009d38:	20002cf0 	.word	0x20002cf0

08009d3c <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009d3e:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009d42:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8009d44:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8009d46:	2f01      	cmp	r7, #1
 8009d48:	d92a      	bls.n	8009da0 <_tx_mutex_prioritize+0x64>
 8009d4a:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8009d4c:	2f02      	cmp	r7, #2
 8009d4e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009d50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d52:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8009d54:	d021      	beq.n	8009d9a <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8009d56:	f8df c084 	ldr.w	ip, [pc, #132]	; 8009ddc <_tx_mutex_prioritize+0xa0>
 8009d5a:	4616      	mov	r6, r2
 8009d5c:	f8dc e000 	ldr.w	lr, [ip]
 8009d60:	f10e 0e01 	add.w	lr, lr, #1
 8009d64:	f8cc e000 	str.w	lr, [ip]
 8009d68:	e007      	b.n	8009d7a <_tx_mutex_prioritize+0x3e>
 8009d6a:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8009d6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009d6e:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 8009d70:	428b      	cmp	r3, r1
 8009d72:	461e      	mov	r6, r3
 8009d74:	d018      	beq.n	8009da8 <_tx_mutex_prioritize+0x6c>
 8009d76:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8009d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d7a:	42ab      	cmp	r3, r5
 8009d7c:	bf88      	it	hi
 8009d7e:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009d80:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009d84:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009d88:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8009d8a:	6983      	ldr	r3, [r0, #24]
 8009d8c:	42b3      	cmp	r3, r6
 8009d8e:	d1ec      	bne.n	8009d6a <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8009d90:	69c5      	ldr	r5, [r0, #28]
 8009d92:	42bd      	cmp	r5, r7
 8009d94:	d020      	beq.n	8009dd8 <_tx_mutex_prioritize+0x9c>
 8009d96:	462f      	mov	r7, r5
 8009d98:	e7e8      	b.n	8009d6c <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8009d9a:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8009d9c:	bf38      	it	cc
 8009d9e:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009da0:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 8009da4:	2000      	movs	r0, #0
 8009da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 8009da8:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 8009dac:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 8009dae:	f101 31ff 	add.w	r1, r1, #4294967295
 8009db2:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 8009db6:	d009      	beq.n	8009dcc <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8009db8:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8009dbc:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8009dbe:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8009dc0:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8009dc2:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8009dc6:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8009dc8:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8009dca:	6182      	str	r2, [r0, #24]
 8009dcc:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 8009dd0:	f7ff f990 	bl	80090f4 <_tx_thread_system_preempt_check>
}
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009dd8:	6f09      	ldr	r1, [r1, #112]	; 0x70
 8009dda:	e7c9      	b.n	8009d70 <_tx_mutex_prioritize+0x34>
 8009ddc:	20002cf0 	.word	0x20002cf0

08009de0 <_tx_semaphore_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	460d      	mov	r5, r1
 8009de4:	4614      	mov	r4, r2
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8009de6:	2100      	movs	r1, #0
 8009de8:	2220      	movs	r2, #32
 8009dea:	f000 fb18 	bl	800a41e <memset>
 8009dee:	4603      	mov	r3, r0

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8009df0:	e9c0 5401 	strd	r5, r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009df4:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009df8:	b672      	cpsid	i
    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009dfa:	490b      	ldr	r1, [pc, #44]	; (8009e28 <_tx_semaphore_create+0x48>)
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8009dfc:	480b      	ldr	r0, [pc, #44]	; (8009e2c <_tx_semaphore_create+0x4c>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009dfe:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8009e00:	6018      	str	r0, [r3, #0]
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8009e02:	480b      	ldr	r0, [pc, #44]	; (8009e30 <_tx_semaphore_create+0x50>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009e04:	b15a      	cbz	r2, 8009e1e <_tx_semaphore_create+0x3e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8009e06:	6800      	ldr	r0, [r0, #0]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8009e08:	6985      	ldr	r5, [r0, #24]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8009e0a:	6183      	str	r3, [r0, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8009e0c:	616b      	str	r3, [r5, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8009e0e:	e9c3 0505 	strd	r0, r5, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8009e12:	3201      	adds	r2, #1
 8009e14:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009e16:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8009e1e:	e9c3 3305 	strd	r3, r3, [r3, #20]
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8009e22:	6003      	str	r3, [r0, #0]
 8009e24:	e7f5      	b.n	8009e12 <_tx_semaphore_create+0x32>
 8009e26:	bf00      	nop
 8009e28:	200032a8 	.word	0x200032a8
 8009e2c:	53454d41 	.word	0x53454d41
 8009e30:	20003298 	.word	0x20003298

08009e34 <_tx_semaphore_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8009e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009e3a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009e3e:	b672      	cpsid	i

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8009e40:	4920      	ldr	r1, [pc, #128]	; (8009ec4 <_tx_semaphore_delete+0x90>)
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8009e42:	2000      	movs	r0, #0
    _tx_semaphore_created_count--;
 8009e44:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8009e46:	6018      	str	r0, [r3, #0]
    _tx_semaphore_created_count--;
 8009e48:	3a01      	subs	r2, #1
 8009e4a:	600a      	str	r2, [r1, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d12e      	bne.n	8009eae <_tx_semaphore_delete+0x7a>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8009e50:	491d      	ldr	r1, [pc, #116]	; (8009ec8 <_tx_semaphore_delete+0x94>)
 8009e52:	600a      	str	r2, [r1, #0]
            _tx_semaphore_created_ptr =  next_semaphore;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009e54:	4d1d      	ldr	r5, [pc, #116]	; (8009ecc <_tx_semaphore_delete+0x98>)

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009e56:	2700      	movs	r7, #0
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8009e58:	68d8      	ldr	r0, [r3, #12]
    _tx_thread_preempt_disable++;
 8009e5a:	682a      	ldr	r2, [r5, #0]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8009e5c:	691c      	ldr	r4, [r3, #16]
    _tx_thread_preempt_disable++;
 8009e5e:	3201      	adds	r2, #1
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009e60:	60df      	str	r7, [r3, #12]
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8009e62:	611f      	str	r7, [r3, #16]
    _tx_thread_preempt_disable++;
 8009e64:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009e66:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8009e6a:	b19c      	cbz	r4, 8009e94 <_tx_semaphore_delete+0x60>
        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8009e6c:	f04f 0801 	mov.w	r8, #1
        suspended_count--;
 8009e70:	3c01      	subs	r4, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009e72:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009e76:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8009e78:	682b      	ldr	r3, [r5, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009e7a:	6687      	str	r7, [r0, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8009e7c:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8009e7e:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8009e82:	6f06      	ldr	r6, [r0, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8009e84:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009e86:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009e8a:	f7ff f951 	bl	8009130 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8009e8e:	4630      	mov	r0, r6
    while (suspended_count != TX_NO_SUSPENSIONS)
 8009e90:	2c00      	cmp	r4, #0
 8009e92:	d1ed      	bne.n	8009e70 <_tx_semaphore_delete+0x3c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009e94:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009e98:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8009e9a:	682b      	ldr	r3, [r5, #0]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ea0:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009ea4:	f7ff f926 	bl	80090f4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8009eae:	4806      	ldr	r0, [pc, #24]	; (8009ec8 <_tx_semaphore_delete+0x94>)
 8009eb0:	6804      	ldr	r4, [r0, #0]
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8009eb2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8009eb6:	429c      	cmp	r4, r3
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8009eb8:	6191      	str	r1, [r2, #24]
            _tx_semaphore_created_ptr =  next_semaphore;
 8009eba:	bf08      	it	eq
 8009ebc:	6002      	streq	r2, [r0, #0]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8009ebe:	614a      	str	r2, [r1, #20]
 8009ec0:	e7c8      	b.n	8009e54 <_tx_semaphore_delete+0x20>
 8009ec2:	bf00      	nop
 8009ec4:	200032a8 	.word	0x200032a8
 8009ec8:	20003298 	.word	0x20003298
 8009ecc:	20002cf0 	.word	0x20002cf0

08009ed0 <_tx_semaphore_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009ed2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009ed6:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8009ed8:	6883      	ldr	r3, [r0, #8]
 8009eda:	bb5b      	cbnz	r3, 8009f34 <_tx_semaphore_get+0x64>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8009edc:	b331      	cbz	r1, 8009f2c <_tx_semaphore_get+0x5c>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009ede:	4d1a      	ldr	r5, [pc, #104]	; (8009f48 <_tx_semaphore_get+0x78>)
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	bb1b      	cbnz	r3, 8009f2c <_tx_semaphore_get+0x5c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <_tx_semaphore_get+0x7c>)

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8009ee6:	4f1a      	ldr	r7, [pc, #104]	; (8009f50 <_tx_semaphore_get+0x80>)
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009ee8:	681c      	ldr	r4, [r3, #0]
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8009eea:	6903      	ldr	r3, [r0, #16]
            thread_ptr -> tx_thread_suspension_sequence++;
 8009eec:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8009ef0:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 8009ef2:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8009ef4:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspension_sequence++;
 8009ef6:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8009efa:	b30b      	cbz	r3, 8009f40 <_tx_semaphore_get+0x70>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8009efc:	68c6      	ldr	r6, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009efe:	6f77      	ldr	r7, [r6, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009f00:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009f04:	673c      	str	r4, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009f06:	6774      	str	r4, [r6, #116]	; 0x74

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009f08:	682e      	ldr	r6, [r5, #0]
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8009f0a:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8009f0c:	2706      	movs	r7, #6
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8009f0e:	6103      	str	r3, [r0, #16]
            _tx_thread_preempt_disable++;
 8009f10:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009f12:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009f14:	64e1      	str	r1, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 8009f16:	602e      	str	r6, [r5, #0]
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8009f18:	6327      	str	r7, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009f1a:	63a3      	str	r3, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009f1c:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009f20:	4620      	mov	r0, r4
 8009f22:	f7ff f98b 	bl	800923c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009f26:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status =  TX_NO_INSTANCE;
    }

    /* Return completion status.  */
    return(status);
}
 8009f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f2c:	f382 8810 	msr	PRIMASK, r2
        status =  TX_NO_INSTANCE;
 8009f30:	200d      	movs	r0, #13
}
 8009f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        semaphore_ptr -> tx_semaphore_count--;
 8009f34:	3b01      	subs	r3, #1
 8009f36:	6083      	str	r3, [r0, #8]
 8009f38:	f382 8810 	msr	PRIMASK, r2
    status =  TX_SUCCESS;
 8009f3c:	2000      	movs	r0, #0
}
 8009f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8009f40:	60c4      	str	r4, [r0, #12]
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8009f42:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8009f46:	e7df      	b.n	8009f08 <_tx_semaphore_get+0x38>
 8009f48:	20002cf0 	.word	0x20002cf0
 8009f4c:	20002cf4 	.word	0x20002cf4
 8009f50:	0800a341 	.word	0x0800a341

08009f54 <_tx_semaphore_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009f58:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009f5c:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009f5e:	6903      	ldr	r3, [r0, #16]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8009f60:	b94b      	cbnz	r3, 8009f76 <_tx_semaphore_put+0x22>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8009f62:	6883      	ldr	r3, [r0, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8009f64:	69c1      	ldr	r1, [r0, #28]
        semaphore_ptr -> tx_semaphore_count++;
 8009f66:	3301      	adds	r3, #1
 8009f68:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009f6a:	f382 8810 	msr	PRIMASK, r2
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8009f6e:	b101      	cbz	r1, 8009f72 <_tx_semaphore_put+0x1e>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8009f70:	4788      	blx	r1
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
}
 8009f72:	2000      	movs	r0, #0
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009f76:	3b01      	subs	r3, #1
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009f78:	68c0      	ldr	r0, [r0, #12]
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009f7a:	d018      	beq.n	8009fae <_tx_semaphore_put+0x5a>
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009f7c:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009f80:	60e1      	str	r1, [r4, #12]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009f82:	674d      	str	r5, [r1, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009f84:	6729      	str	r1, [r5, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8009f86:	490b      	ldr	r1, [pc, #44]	; (8009fb4 <_tx_semaphore_put+0x60>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009f88:	2500      	movs	r5, #0
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8009f8a:	6123      	str	r3, [r4, #16]
        _tx_thread_preempt_disable++;
 8009f8c:	680b      	ldr	r3, [r1, #0]
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8009f8e:	69e6      	ldr	r6, [r4, #28]
        _tx_thread_preempt_disable++;
 8009f90:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009f92:	6685      	str	r5, [r0, #104]	; 0x68
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009f94:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
        _tx_thread_preempt_disable++;
 8009f98:	600b      	str	r3, [r1, #0]
 8009f9a:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8009f9e:	f7ff f8c7 	bl	8009130 <_tx_thread_system_resume>
        if (semaphore_put_notify != TX_NULL)
 8009fa2:	2e00      	cmp	r6, #0
 8009fa4:	d0e5      	beq.n	8009f72 <_tx_semaphore_put+0x1e>
            (semaphore_put_notify)(semaphore_ptr);
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	47b0      	blx	r6
}
 8009faa:	2000      	movs	r0, #0
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009fae:	60e3      	str	r3, [r4, #12]
 8009fb0:	e7e9      	b.n	8009f86 <_tx_semaphore_put+0x32>
 8009fb2:	bf00      	nop
 8009fb4:	20002cf0 	.word	0x20002cf0

08009fb8 <_tx_thread_delete>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009fb8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009fbc:	b672      	cpsid	i
    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009fbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d81e      	bhi.n	800a004 <_tx_thread_delete+0x4c>

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8009fc6:	4a11      	ldr	r2, [pc, #68]	; (800a00c <_tx_thread_delete+0x54>)
 8009fc8:	6813      	ldr	r3, [r2, #0]
{
 8009fca:	b430      	push	{r4, r5}
        _tx_thread_created_count--;
 8009fcc:	3b01      	subs	r3, #1
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8009fce:	2400      	movs	r4, #0
 8009fd0:	6004      	str	r4, [r0, #0]
        _tx_thread_created_count--;
 8009fd2:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8009fd4:	b17b      	cbz	r3, 8009ff6 <_tx_thread_delete+0x3e>
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
            next_thread -> tx_thread_created_previous =  previous_thread;
            previous_thread -> tx_thread_created_next =  next_thread;

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8009fd6:	4c0e      	ldr	r4, [pc, #56]	; (800a010 <_tx_thread_delete+0x58>)
 8009fd8:	6825      	ldr	r5, [r4, #0]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8009fda:	e9d0 3222 	ldrd	r3, r2, [r0, #136]	; 0x88
            if (_tx_thread_created_ptr == thread_ptr)
 8009fde:	4285      	cmp	r5, r0
            next_thread -> tx_thread_created_previous =  previous_thread;
 8009fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8009fe4:	bf08      	it	eq
 8009fe6:	6023      	streq	r3, [r4, #0]
            previous_thread -> tx_thread_created_next =  next_thread;
 8009fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009fec:	f381 8810 	msr	PRIMASK, r1
 8009ff0:	2000      	movs	r0, #0
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
}
 8009ff2:	bc30      	pop	{r4, r5}
 8009ff4:	4770      	bx	lr
            _tx_thread_created_ptr =  TX_NULL;
 8009ff6:	4a06      	ldr	r2, [pc, #24]	; (800a010 <_tx_thread_delete+0x58>)
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	f381 8810 	msr	PRIMASK, r1
 8009ffe:	2000      	movs	r0, #0
}
 800a000:	bc30      	pop	{r4, r5}
 800a002:	4770      	bx	lr
 800a004:	f381 8810 	msr	PRIMASK, r1
            status =  TX_DELETE_ERROR;
 800a008:	2011      	movs	r0, #17
}
 800a00a:	4770      	bx	lr
 800a00c:	20002ce8 	.word	0x20002ce8
 800a010:	20002ce0 	.word	0x20002ce0

0800a014 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	469c      	mov	ip, r3
 800a01a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a01c:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 800a020:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a024:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a028:	b672      	cpsid	i

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800a02a:	b109      	cbz	r1, 800a030 <_tx_thread_info_get+0x1c>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 800a02c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a02e:	600b      	str	r3, [r1, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800a030:	b10a      	cbz	r2, 800a036 <_tx_thread_info_get+0x22>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 800a032:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a034:	6011      	str	r1, [r2, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 800a036:	f1bc 0f00 	cmp.w	ip, #0
 800a03a:	d002      	beq.n	800a042 <_tx_thread_info_get+0x2e>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 800a03c:	6842      	ldr	r2, [r0, #4]
 800a03e:	f8cc 2000 	str.w	r2, [ip]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 800a042:	f1b8 0f00 	cmp.w	r8, #0
 800a046:	d003      	beq.n	800a050 <_tx_thread_info_get+0x3c>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 800a048:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800a04c:	f8c8 2000 	str.w	r2, [r8]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 800a050:	b117      	cbz	r7, 800a058 <_tx_thread_info_get+0x44>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a052:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 800a056:	603b      	str	r3, [r7, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 800a058:	b10e      	cbz	r6, 800a05e <_tx_thread_info_get+0x4a>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 800a05a:	6983      	ldr	r3, [r0, #24]
 800a05c:	6033      	str	r3, [r6, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 800a05e:	b115      	cbz	r5, 800a066 <_tx_thread_info_get+0x52>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 800a060:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a064:	602b      	str	r3, [r5, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 800a066:	b10c      	cbz	r4, 800a06c <_tx_thread_info_get+0x58>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 800a068:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a06a:	6023      	str	r3, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a06c:	f38e 8810 	msr	PRIMASK, lr
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 800a070:	2000      	movs	r0, #0
 800a072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a076:	bf00      	nop

0800a078 <_tx_thread_relinquish>:
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <_tx_thread_relinquish+0x60>)
{
 800a07a:	b430      	push	{r4, r5}
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a07c:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a07e:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a082:	b672      	cpsid	i

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a084:	e9d3 0207 	ldrd	r0, r2, [r3, #28]
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a088:	4914      	ldr	r1, [pc, #80]	; (800a0dc <_tx_thread_relinquish+0x64>)
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a08a:	429a      	cmp	r2, r3
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a08c:	6008      	str	r0, [r1, #0]
    priority =  thread_ptr -> tx_thread_priority;
 800a08e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a090:	d01f      	beq.n	800a0d2 <_tx_thread_relinquish+0x5a>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800a092:	4d13      	ldr	r5, [pc, #76]	; (800a0e0 <_tx_thread_relinquish+0x68>)
    
        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800a094:	4913      	ldr	r1, [pc, #76]	; (800a0e4 <_tx_thread_relinquish+0x6c>)
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800a096:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800a09a:	600a      	str	r2, [r1, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800a09c:	4a12      	ldr	r2, [pc, #72]	; (800a0e8 <_tx_thread_relinquish+0x70>)
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	4282      	cmp	r2, r0
 800a0a2:	d203      	bcs.n	800a0ac <_tx_thread_relinquish+0x34>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a0a4:	480e      	ldr	r0, [pc, #56]	; (800a0e0 <_tx_thread_relinquish+0x68>)
 800a0a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a0aa:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a0ac:	f384 8810 	msr	PRIMASK, r4

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800a0b0:	680a      	ldr	r2, [r1, #0]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d00b      	beq.n	800a0ce <_tx_thread_relinquish+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a0b6:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <_tx_thread_relinquish+0x74>)
 800a0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a0be:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800a0c2:	b923      	cbnz	r3, 800a0ce <_tx_thread_relinquish+0x56>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a0c4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a0c8:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a0ca:	f383 8810 	msr	PRIMASK, r3

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800a0ce:	bc30      	pop	{r4, r5}
 800a0d0:	4770      	bx	lr
 800a0d2:	4904      	ldr	r1, [pc, #16]	; (800a0e4 <_tx_thread_relinquish+0x6c>)
 800a0d4:	e7e2      	b.n	800a09c <_tx_thread_relinquish+0x24>
 800a0d6:	bf00      	nop
 800a0d8:	20002cf4 	.word	0x20002cf4
 800a0dc:	20002d90 	.word	0x20002d90
 800a0e0:	20002c58 	.word	0x20002c58
 800a0e4:	20002cf8 	.word	0x20002cf8
 800a0e8:	20002cfc 	.word	0x20002cfc
 800a0ec:	e000ed04 	.word	0xe000ed04

0800a0f0 <_tx_thread_resume>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a0f4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a0f8:	b672      	cpsid	i
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800a0fa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a0fc:	2903      	cmp	r1, #3
 800a0fe:	d00a      	beq.n	800a116 <_tx_thread_resume+0x26>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800a100:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a102:	2901      	cmp	r1, #1
 800a104:	d003      	beq.n	800a10e <_tx_thread_resume+0x1e>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800a106:	2012      	movs	r0, #18
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a108:	f382 8810 	msr	PRIMASK, r2
    }
#endif

    /* Return completion status. */
    return(status);
}
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a10e:	2100      	movs	r1, #0
        status =  TX_SUSPEND_LIFTED;
 800a110:	2019      	movs	r0, #25
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a112:	6359      	str	r1, [r3, #52]	; 0x34
 800a114:	e7f8      	b.n	800a108 <_tx_thread_resume+0x18>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a116:	f3ef 8405 	mrs	r4, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800a11a:	4913      	ldr	r1, [pc, #76]	; (800a168 <_tx_thread_resume+0x78>)
 800a11c:	6809      	ldr	r1, [r1, #0]
 800a11e:	4321      	orrs	r1, r4
 800a120:	f1b1 3ff0 	cmp.w	r1, #4042322160	; 0xf0f0f0f0
 800a124:	d312      	bcc.n	800a14c <_tx_thread_resume+0x5c>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800a126:	4911      	ldr	r1, [pc, #68]	; (800a16c <_tx_thread_resume+0x7c>)
 800a128:	680c      	ldr	r4, [r1, #0]
            if (saved_thread_ptr != TX_NULL)
 800a12a:	b1cc      	cbz	r4, 800a160 <_tx_thread_resume+0x70>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800a12c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800a12e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800a130:	63e1      	str	r1, [r4, #60]	; 0x3c
        _tx_thread_preempt_disable++;
 800a132:	480f      	ldr	r0, [pc, #60]	; (800a170 <_tx_thread_resume+0x80>)
 800a134:	6801      	ldr	r1, [r0, #0]
 800a136:	3101      	adds	r1, #1
 800a138:	6001      	str	r1, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a13a:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fff6 	bl	8009130 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 800a144:	b174      	cbz	r4, 800a164 <_tx_thread_resume+0x74>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800a146:	63e5      	str	r5, [r4, #60]	; 0x3c
        return(TX_SUCCESS);
 800a148:	2000      	movs	r0, #0
}
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
        _tx_thread_preempt_disable++;
 800a14c:	4908      	ldr	r1, [pc, #32]	; (800a170 <_tx_thread_resume+0x80>)
 800a14e:	680b      	ldr	r3, [r1, #0]
 800a150:	3301      	adds	r3, #1
 800a152:	600b      	str	r3, [r1, #0]
 800a154:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800a158:	f7fe ffea 	bl	8009130 <_tx_thread_system_resume>
        return(TX_SUCCESS);
 800a15c:	2000      	movs	r0, #0
}
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
UINT        saved_threshold =  ((UINT) 0);
 800a160:	4625      	mov	r5, r4
 800a162:	e7e6      	b.n	800a132 <_tx_thread_resume+0x42>
        return(TX_SUCCESS);
 800a164:	4620      	mov	r0, r4
}
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	2000019c 	.word	0x2000019c
 800a16c:	20002cf8 	.word	0x20002cf8
 800a170:	20002cf0 	.word	0x20002cf0

0800a174 <_tx_thread_suspend>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 800a174:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a176:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a17a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 800a17c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a17e:	b9cc      	cbnz	r4, 800a1b4 <_tx_thread_suspend+0x40>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a180:	f3ef 8205 	mrs	r2, IPSR

        /* Initialize status to success.  */
        status =  TX_SUCCESS;

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == 0)
 800a184:	4916      	ldr	r1, [pc, #88]	; (800a1e0 <_tx_thread_suspend+0x6c>)
 800a186:	6809      	ldr	r1, [r1, #0]
        {
        
            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 800a188:	430a      	orrs	r2, r1
 800a18a:	d121      	bne.n	800a1d0 <_tx_thread_suspend+0x5c>
    TX_THREAD_GET_CURRENT(current_thread)
 800a18c:	4a15      	ldr	r2, [pc, #84]	; (800a1e4 <_tx_thread_suspend+0x70>)
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 800a18e:	4916      	ldr	r1, [pc, #88]	; (800a1e8 <_tx_thread_suspend+0x74>)
            if (current_thread == thread_ptr)
 800a190:	6812      	ldr	r2, [r2, #0]
 800a192:	4282      	cmp	r2, r0
 800a194:	d01e      	beq.n	800a1d4 <_tx_thread_suspend+0x60>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a196:	680a      	ldr	r2, [r1, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a198:	2501      	movs	r5, #1
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800a19a:	2603      	movs	r6, #3
            _tx_thread_preempt_disable++;
 800a19c:	442a      	add	r2, r5
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a19e:	6385      	str	r5, [r0, #56]	; 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a1a0:	2500      	movs	r5, #0
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800a1a2:	6306      	str	r6, [r0, #48]	; 0x30
            _tx_thread_preempt_disable++;
 800a1a4:	600a      	str	r2, [r1, #0]
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a1a6:	64c5      	str	r5, [r0, #76]	; 0x4c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a1a8:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a1ac:	f7ff f846 	bl	800923c <_tx_thread_system_suspend>
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 800a1b4:	1e62      	subs	r2, r4, #1
 800a1b6:	2a01      	cmp	r2, #1
 800a1b8:	d804      	bhi.n	800a1c4 <_tx_thread_suspend+0x50>
                    status =  TX_SUSPEND_ERROR;
 800a1ba:	2414      	movs	r4, #20
 800a1bc:	f383 8810 	msr	PRIMASK, r3
}
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800a1c4:	2c03      	cmp	r4, #3
 800a1c6:	d009      	beq.n	800a1dc <_tx_thread_suspend+0x68>
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800a1c8:	2201      	movs	r2, #1
        status =  TX_SUCCESS;
 800a1ca:	2400      	movs	r4, #0
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800a1cc:	6342      	str	r2, [r0, #52]	; 0x34
 800a1ce:	e7f5      	b.n	800a1bc <_tx_thread_suspend+0x48>
 800a1d0:	4905      	ldr	r1, [pc, #20]	; (800a1e8 <_tx_thread_suspend+0x74>)
 800a1d2:	e7e0      	b.n	800a196 <_tx_thread_suspend+0x22>
                if (_tx_thread_preempt_disable != ((UINT) 0))
 800a1d4:	680a      	ldr	r2, [r1, #0]
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	d1ef      	bne.n	800a1ba <_tx_thread_suspend+0x46>
 800a1da:	e7dc      	b.n	800a196 <_tx_thread_suspend+0x22>
        status =  TX_SUCCESS;
 800a1dc:	2400      	movs	r4, #0
 800a1de:	e7ed      	b.n	800a1bc <_tx_thread_suspend+0x48>
 800a1e0:	2000019c 	.word	0x2000019c
 800a1e4:	20002cf4 	.word	0x20002cf4
 800a1e8:	20002cf0 	.word	0x20002cf0

0800a1ec <_tx_thread_terminate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a1f0:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a1f4:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 800a1f6:	304c      	adds	r0, #76	; 0x4c
 800a1f8:	f7ff f9e2 	bl	80095c0 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800a1fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d02e      	beq.n	800a260 <_tx_thread_terminate+0x74>
        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800a202:	2b01      	cmp	r3, #1
 800a204:	d02c      	beq.n	800a260 <_tx_thread_terminate+0x74>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800a206:	4d27      	ldr	r5, [pc, #156]	; (800a2a4 <_tx_thread_terminate+0xb8>)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800a208:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
        _tx_thread_preempt_disable++;
 800a20c:	682a      	ldr	r2, [r5, #0]
 800a20e:	3201      	adds	r2, #1
 800a210:	602a      	str	r2, [r5, #0]
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800a212:	bb5b      	cbnz	r3, 800a26c <_tx_thread_terminate+0x80>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 800a214:	682a      	ldr	r2, [r5, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a216:	2101      	movs	r1, #1
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 800a218:	2002      	movs	r0, #2
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a21a:	64e3      	str	r3, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 800a21c:	440a      	add	r2, r1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a21e:	63a1      	str	r1, [r4, #56]	; 0x38
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 800a220:	6320      	str	r0, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 800a222:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a224:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 800a228:	b10f      	cbz	r7, 800a22e <_tx_thread_terminate+0x42>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800a22a:	4620      	mov	r0, r4
 800a22c:	47b8      	blx	r7
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a22e:	4620      	mov	r0, r4
 800a230:	f7ff f804 	bl	800923c <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a234:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a238:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a23a:	f383 8810 	msr	PRIMASK, r3
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 800a23e:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <_tx_thread_terminate+0xbc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	b10b      	cbz	r3, 800a248 <_tx_thread_terminate+0x5c>
        {

            /* Yes, call the mutex release function via a function pointer that 
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 800a244:	4620      	mov	r0, r4
 800a246:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a248:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a24c:	b672      	cpsid	i
        /* Disable interrupts.  */
        TX_DISABLE
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 800a24e:	682b      	ldr	r3, [r5, #0]
 800a250:	3b01      	subs	r3, #1
 800a252:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a254:	f382 8810 	msr	PRIMASK, r2
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a258:	f7fe ff4c 	bl	80090f4 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
}
 800a25c:	2000      	movs	r0, #0
 800a25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a260:	f386 8810 	msr	PRIMASK, r6
    _tx_thread_system_preempt_check();
 800a264:	f7fe ff46 	bl	80090f4 <_tx_thread_system_preempt_check>
}
 800a268:	2000      	movs	r0, #0
 800a26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 800a26c:	2102      	movs	r1, #2
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a26e:	2201      	movs	r2, #1
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800a270:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 800a272:	6321      	str	r1, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a274:	63a2      	str	r2, [r4, #56]	; 0x38
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800a276:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 800a27a:	f386 8810 	msr	PRIMASK, r6
            if (suspend_cleanup != TX_NULL)
 800a27e:	b10b      	cbz	r3, 800a284 <_tx_thread_terminate+0x98>
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 800a280:	4620      	mov	r0, r4
 800a282:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a284:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a288:	b672      	cpsid	i
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800a28a:	2200      	movs	r2, #0
 800a28c:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a28e:	f383 8810 	msr	PRIMASK, r3
            if (entry_exit_notify != TX_NULL)
 800a292:	b117      	cbz	r7, 800a29a <_tx_thread_terminate+0xae>
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800a294:	2101      	movs	r1, #1
 800a296:	4620      	mov	r0, r4
 800a298:	47b8      	blx	r7
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a29a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a29e:	b672      	cpsid	i
 800a2a0:	e7cb      	b.n	800a23a <_tx_thread_terminate+0x4e>
 800a2a2:	bf00      	nop
 800a2a4:	20002cf0 	.word	0x20002cf0
 800a2a8:	20002cd8 	.word	0x20002cd8

0800a2ac <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a2ac:	4b16      	ldr	r3, [pc, #88]	; (800a308 <_tx_thread_time_slice+0x5c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a2b0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a2b4:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a2b6:	4915      	ldr	r1, [pc, #84]	; (800a30c <_tx_thread_time_slice+0x60>)
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800a2bc:	b193      	cbz	r3, 800a2e4 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800a2be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a2c0:	b981      	cbnz	r1, 800a2e4 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a2c2:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a2c4:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a2c6:	4298      	cmp	r0, r3
{
 800a2c8:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800a2ca:	4c11      	ldr	r4, [pc, #68]	; (800a310 <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a2cc:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800a2ce:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a2d0:	d003      	beq.n	800a2da <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800a2d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	4299      	cmp	r1, r3
 800a2d8:	d007      	beq.n	800a2ea <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a2da:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800a2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	f382 8810 	msr	PRIMASK, r2
 800a2e8:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a2ea:	4c0a      	ldr	r4, [pc, #40]	; (800a314 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a2ee:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800a2f0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a2f4:	4909      	ldr	r1, [pc, #36]	; (800a31c <_tx_thread_time_slice+0x70>)
 800a2f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a2fa:	600b      	str	r3, [r1, #0]
 800a2fc:	f382 8810 	msr	PRIMASK, r2
}
 800a300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	20002cf4 	.word	0x20002cf4
 800a30c:	20003280 	.word	0x20003280
 800a310:	20002d90 	.word	0x20002d90
 800a314:	20002cfc 	.word	0x20002cfc
 800a318:	20002c58 	.word	0x20002c58
 800a31c:	20002cf8 	.word	0x20002cf8

0800a320 <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a320:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a324:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800a326:	4a04      	ldr	r2, [pc, #16]	; (800a338 <_tx_timer_expiration_process+0x18>)
 800a328:	6813      	ldr	r3, [r2, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a32e:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800a332:	4802      	ldr	r0, [pc, #8]	; (800a33c <_tx_timer_expiration_process+0x1c>)
 800a334:	f7fe befc 	b.w	8009130 <_tx_thread_system_resume>
 800a338:	20002cf0 	.word	0x20002cf0
 800a33c:	20002da0 	.word	0x20002da0

0800a340 <_tx_semaphore_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a340:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a342:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a346:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800a348:	4a1a      	ldr	r2, [pc, #104]	; (800a3b4 <_tx_semaphore_cleanup+0x74>)
 800a34a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800a34c:	4294      	cmp	r4, r2
 800a34e:	d002      	beq.n	800a356 <_tx_semaphore_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a350:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a354:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a356:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800a35a:	428a      	cmp	r2, r1
 800a35c:	d1f8      	bne.n	800a350 <_tx_semaphore_cleanup+0x10>
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a35e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (semaphore_ptr != TX_NULL)
 800a360:	2a00      	cmp	r2, #0
 800a362:	d0f5      	beq.n	800a350 <_tx_semaphore_cleanup+0x10>
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800a364:	4914      	ldr	r1, [pc, #80]	; (800a3b8 <_tx_semaphore_cleanup+0x78>)
 800a366:	6814      	ldr	r4, [r2, #0]
 800a368:	428c      	cmp	r4, r1
 800a36a:	d1f1      	bne.n	800a350 <_tx_semaphore_cleanup+0x10>
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800a36c:	6911      	ldr	r1, [r2, #16]
 800a36e:	2900      	cmp	r1, #0
 800a370:	d0ee      	beq.n	800a350 <_tx_semaphore_cleanup+0x10>
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a372:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a374:	2400      	movs	r4, #0
 800a376:	6684      	str	r4, [r0, #104]	; 0x68
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a378:	6111      	str	r1, [r2, #16]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a37a:	b1c1      	cbz	r1, 800a3ae <_tx_semaphore_cleanup+0x6e>
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a37c:	68d5      	ldr	r5, [r2, #12]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a37e:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a382:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a384:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a386:	6721      	str	r1, [r4, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a388:	d011      	beq.n	800a3ae <_tx_semaphore_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800a38a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800a38c:	2a06      	cmp	r2, #6
 800a38e:	d1df      	bne.n	800a350 <_tx_semaphore_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800a390:	490a      	ldr	r1, [pc, #40]	; (800a3bc <_tx_semaphore_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a392:	240d      	movs	r4, #13
                            _tx_thread_preempt_disable++;
 800a394:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a396:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800a39a:	3201      	adds	r2, #1
 800a39c:	600a      	str	r2, [r1, #0]
 800a39e:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800a3a2:	f7fe fec5 	bl	8009130 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a3a6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a3aa:	b672      	cpsid	i
 800a3ac:	e7d0      	b.n	800a350 <_tx_semaphore_cleanup+0x10>
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a3ae:	60d1      	str	r1, [r2, #12]
 800a3b0:	e7eb      	b.n	800a38a <_tx_semaphore_cleanup+0x4a>
 800a3b2:	bf00      	nop
 800a3b4:	0800a341 	.word	0x0800a341
 800a3b8:	53454d41 	.word	0x53454d41
 800a3bc:	20002cf0 	.word	0x20002cf0

0800a3c0 <__libc_init_array>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	4e0d      	ldr	r6, [pc, #52]	; (800a3f8 <__libc_init_array+0x38>)
 800a3c4:	4c0d      	ldr	r4, [pc, #52]	; (800a3fc <__libc_init_array+0x3c>)
 800a3c6:	1ba4      	subs	r4, r4, r6
 800a3c8:	10a4      	asrs	r4, r4, #2
 800a3ca:	2500      	movs	r5, #0
 800a3cc:	42a5      	cmp	r5, r4
 800a3ce:	d109      	bne.n	800a3e4 <__libc_init_array+0x24>
 800a3d0:	4e0b      	ldr	r6, [pc, #44]	; (800a400 <__libc_init_array+0x40>)
 800a3d2:	4c0c      	ldr	r4, [pc, #48]	; (800a404 <__libc_init_array+0x44>)
 800a3d4:	f000 ffaa 	bl	800b32c <_init>
 800a3d8:	1ba4      	subs	r4, r4, r6
 800a3da:	10a4      	asrs	r4, r4, #2
 800a3dc:	2500      	movs	r5, #0
 800a3de:	42a5      	cmp	r5, r4
 800a3e0:	d105      	bne.n	800a3ee <__libc_init_array+0x2e>
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3e8:	4798      	blx	r3
 800a3ea:	3501      	adds	r5, #1
 800a3ec:	e7ee      	b.n	800a3cc <__libc_init_array+0xc>
 800a3ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3f2:	4798      	blx	r3
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	e7f2      	b.n	800a3de <__libc_init_array+0x1e>
 800a3f8:	0800b5d8 	.word	0x0800b5d8
 800a3fc:	0800b5d8 	.word	0x0800b5d8
 800a400:	0800b5d8 	.word	0x0800b5d8
 800a404:	0800b5dc 	.word	0x0800b5dc

0800a408 <memcpy>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	1e43      	subs	r3, r0, #1
 800a40c:	440a      	add	r2, r1
 800a40e:	4291      	cmp	r1, r2
 800a410:	d100      	bne.n	800a414 <memcpy+0xc>
 800a412:	bd10      	pop	{r4, pc}
 800a414:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a41c:	e7f7      	b.n	800a40e <memcpy+0x6>

0800a41e <memset>:
 800a41e:	4402      	add	r2, r0
 800a420:	4603      	mov	r3, r0
 800a422:	4293      	cmp	r3, r2
 800a424:	d100      	bne.n	800a428 <memset+0xa>
 800a426:	4770      	bx	lr
 800a428:	f803 1b01 	strb.w	r1, [r3], #1
 800a42c:	e7f9      	b.n	800a422 <memset+0x4>
	...

0800a430 <iprintf>:
 800a430:	b40f      	push	{r0, r1, r2, r3}
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <iprintf+0x2c>)
 800a434:	b513      	push	{r0, r1, r4, lr}
 800a436:	681c      	ldr	r4, [r3, #0]
 800a438:	b124      	cbz	r4, 800a444 <iprintf+0x14>
 800a43a:	69a3      	ldr	r3, [r4, #24]
 800a43c:	b913      	cbnz	r3, 800a444 <iprintf+0x14>
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fa22 	bl	800a888 <__sinit>
 800a444:	ab05      	add	r3, sp, #20
 800a446:	9a04      	ldr	r2, [sp, #16]
 800a448:	68a1      	ldr	r1, [r4, #8]
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 fbdb 	bl	800ac08 <_vfiprintf_r>
 800a452:	b002      	add	sp, #8
 800a454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a458:	b004      	add	sp, #16
 800a45a:	4770      	bx	lr
 800a45c:	200001a0 	.word	0x200001a0

0800a460 <_puts_r>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	460e      	mov	r6, r1
 800a464:	4605      	mov	r5, r0
 800a466:	b118      	cbz	r0, 800a470 <_puts_r+0x10>
 800a468:	6983      	ldr	r3, [r0, #24]
 800a46a:	b90b      	cbnz	r3, 800a470 <_puts_r+0x10>
 800a46c:	f000 fa0c 	bl	800a888 <__sinit>
 800a470:	69ab      	ldr	r3, [r5, #24]
 800a472:	68ac      	ldr	r4, [r5, #8]
 800a474:	b913      	cbnz	r3, 800a47c <_puts_r+0x1c>
 800a476:	4628      	mov	r0, r5
 800a478:	f000 fa06 	bl	800a888 <__sinit>
 800a47c:	4b23      	ldr	r3, [pc, #140]	; (800a50c <_puts_r+0xac>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	d117      	bne.n	800a4b2 <_puts_r+0x52>
 800a482:	686c      	ldr	r4, [r5, #4]
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	071b      	lsls	r3, r3, #28
 800a488:	d51d      	bpl.n	800a4c6 <_puts_r+0x66>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	b1db      	cbz	r3, 800a4c6 <_puts_r+0x66>
 800a48e:	3e01      	subs	r6, #1
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a496:	3b01      	subs	r3, #1
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	b9e9      	cbnz	r1, 800a4d8 <_puts_r+0x78>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	da2e      	bge.n	800a4fe <_puts_r+0x9e>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	210a      	movs	r1, #10
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f83f 	bl	800a528 <__swbuf_r>
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d011      	beq.n	800a4d2 <_puts_r+0x72>
 800a4ae:	200a      	movs	r0, #10
 800a4b0:	e011      	b.n	800a4d6 <_puts_r+0x76>
 800a4b2:	4b17      	ldr	r3, [pc, #92]	; (800a510 <_puts_r+0xb0>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	d101      	bne.n	800a4bc <_puts_r+0x5c>
 800a4b8:	68ac      	ldr	r4, [r5, #8]
 800a4ba:	e7e3      	b.n	800a484 <_puts_r+0x24>
 800a4bc:	4b15      	ldr	r3, [pc, #84]	; (800a514 <_puts_r+0xb4>)
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	bf08      	it	eq
 800a4c2:	68ec      	ldreq	r4, [r5, #12]
 800a4c4:	e7de      	b.n	800a484 <_puts_r+0x24>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 f87f 	bl	800a5cc <__swsetup_r>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d0dd      	beq.n	800a48e <_puts_r+0x2e>
 800a4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da04      	bge.n	800a4e6 <_puts_r+0x86>
 800a4dc:	69a2      	ldr	r2, [r4, #24]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	dc06      	bgt.n	800a4f0 <_puts_r+0x90>
 800a4e2:	290a      	cmp	r1, #10
 800a4e4:	d004      	beq.n	800a4f0 <_puts_r+0x90>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	6022      	str	r2, [r4, #0]
 800a4ec:	7019      	strb	r1, [r3, #0]
 800a4ee:	e7cf      	b.n	800a490 <_puts_r+0x30>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 f818 	bl	800a528 <__swbuf_r>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d1c9      	bne.n	800a490 <_puts_r+0x30>
 800a4fc:	e7e9      	b.n	800a4d2 <_puts_r+0x72>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	200a      	movs	r0, #10
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	6022      	str	r2, [r4, #0]
 800a506:	7018      	strb	r0, [r3, #0]
 800a508:	e7e5      	b.n	800a4d6 <_puts_r+0x76>
 800a50a:	bf00      	nop
 800a50c:	0800b55c 	.word	0x0800b55c
 800a510:	0800b57c 	.word	0x0800b57c
 800a514:	0800b53c 	.word	0x0800b53c

0800a518 <puts>:
 800a518:	4b02      	ldr	r3, [pc, #8]	; (800a524 <puts+0xc>)
 800a51a:	4601      	mov	r1, r0
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f7ff bf9f 	b.w	800a460 <_puts_r>
 800a522:	bf00      	nop
 800a524:	200001a0 	.word	0x200001a0

0800a528 <__swbuf_r>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	460e      	mov	r6, r1
 800a52c:	4614      	mov	r4, r2
 800a52e:	4605      	mov	r5, r0
 800a530:	b118      	cbz	r0, 800a53a <__swbuf_r+0x12>
 800a532:	6983      	ldr	r3, [r0, #24]
 800a534:	b90b      	cbnz	r3, 800a53a <__swbuf_r+0x12>
 800a536:	f000 f9a7 	bl	800a888 <__sinit>
 800a53a:	4b21      	ldr	r3, [pc, #132]	; (800a5c0 <__swbuf_r+0x98>)
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d12a      	bne.n	800a596 <__swbuf_r+0x6e>
 800a540:	686c      	ldr	r4, [r5, #4]
 800a542:	69a3      	ldr	r3, [r4, #24]
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	071a      	lsls	r2, r3, #28
 800a54a:	d52e      	bpl.n	800a5aa <__swbuf_r+0x82>
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	b363      	cbz	r3, 800a5aa <__swbuf_r+0x82>
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	6820      	ldr	r0, [r4, #0]
 800a554:	1ac0      	subs	r0, r0, r3
 800a556:	6963      	ldr	r3, [r4, #20]
 800a558:	b2f6      	uxtb	r6, r6
 800a55a:	4283      	cmp	r3, r0
 800a55c:	4637      	mov	r7, r6
 800a55e:	dc04      	bgt.n	800a56a <__swbuf_r+0x42>
 800a560:	4621      	mov	r1, r4
 800a562:	4628      	mov	r0, r5
 800a564:	f000 f926 	bl	800a7b4 <_fflush_r>
 800a568:	bb28      	cbnz	r0, 800a5b6 <__swbuf_r+0x8e>
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	60a3      	str	r3, [r4, #8]
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	6022      	str	r2, [r4, #0]
 800a576:	701e      	strb	r6, [r3, #0]
 800a578:	6963      	ldr	r3, [r4, #20]
 800a57a:	3001      	adds	r0, #1
 800a57c:	4283      	cmp	r3, r0
 800a57e:	d004      	beq.n	800a58a <__swbuf_r+0x62>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	07db      	lsls	r3, r3, #31
 800a584:	d519      	bpl.n	800a5ba <__swbuf_r+0x92>
 800a586:	2e0a      	cmp	r6, #10
 800a588:	d117      	bne.n	800a5ba <__swbuf_r+0x92>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 f911 	bl	800a7b4 <_fflush_r>
 800a592:	b190      	cbz	r0, 800a5ba <__swbuf_r+0x92>
 800a594:	e00f      	b.n	800a5b6 <__swbuf_r+0x8e>
 800a596:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <__swbuf_r+0x9c>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	d101      	bne.n	800a5a0 <__swbuf_r+0x78>
 800a59c:	68ac      	ldr	r4, [r5, #8]
 800a59e:	e7d0      	b.n	800a542 <__swbuf_r+0x1a>
 800a5a0:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <__swbuf_r+0xa0>)
 800a5a2:	429c      	cmp	r4, r3
 800a5a4:	bf08      	it	eq
 800a5a6:	68ec      	ldreq	r4, [r5, #12]
 800a5a8:	e7cb      	b.n	800a542 <__swbuf_r+0x1a>
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 f80d 	bl	800a5cc <__swsetup_r>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d0cc      	beq.n	800a550 <__swbuf_r+0x28>
 800a5b6:	f04f 37ff 	mov.w	r7, #4294967295
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800b55c 	.word	0x0800b55c
 800a5c4:	0800b57c 	.word	0x0800b57c
 800a5c8:	0800b53c 	.word	0x0800b53c

0800a5cc <__swsetup_r>:
 800a5cc:	4b32      	ldr	r3, [pc, #200]	; (800a698 <__swsetup_r+0xcc>)
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	681d      	ldr	r5, [r3, #0]
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	b125      	cbz	r5, 800a5e2 <__swsetup_r+0x16>
 800a5d8:	69ab      	ldr	r3, [r5, #24]
 800a5da:	b913      	cbnz	r3, 800a5e2 <__swsetup_r+0x16>
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f000 f953 	bl	800a888 <__sinit>
 800a5e2:	4b2e      	ldr	r3, [pc, #184]	; (800a69c <__swsetup_r+0xd0>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d10f      	bne.n	800a608 <__swsetup_r+0x3c>
 800a5e8:	686c      	ldr	r4, [r5, #4]
 800a5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	0715      	lsls	r5, r2, #28
 800a5f2:	d42c      	bmi.n	800a64e <__swsetup_r+0x82>
 800a5f4:	06d0      	lsls	r0, r2, #27
 800a5f6:	d411      	bmi.n	800a61c <__swsetup_r+0x50>
 800a5f8:	2209      	movs	r2, #9
 800a5fa:	6032      	str	r2, [r6, #0]
 800a5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	f04f 30ff 	mov.w	r0, #4294967295
 800a606:	e03e      	b.n	800a686 <__swsetup_r+0xba>
 800a608:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <__swsetup_r+0xd4>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d101      	bne.n	800a612 <__swsetup_r+0x46>
 800a60e:	68ac      	ldr	r4, [r5, #8]
 800a610:	e7eb      	b.n	800a5ea <__swsetup_r+0x1e>
 800a612:	4b24      	ldr	r3, [pc, #144]	; (800a6a4 <__swsetup_r+0xd8>)
 800a614:	429c      	cmp	r4, r3
 800a616:	bf08      	it	eq
 800a618:	68ec      	ldreq	r4, [r5, #12]
 800a61a:	e7e6      	b.n	800a5ea <__swsetup_r+0x1e>
 800a61c:	0751      	lsls	r1, r2, #29
 800a61e:	d512      	bpl.n	800a646 <__swsetup_r+0x7a>
 800a620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a622:	b141      	cbz	r1, 800a636 <__swsetup_r+0x6a>
 800a624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a628:	4299      	cmp	r1, r3
 800a62a:	d002      	beq.n	800a632 <__swsetup_r+0x66>
 800a62c:	4630      	mov	r0, r6
 800a62e:	f000 fa19 	bl	800aa64 <_free_r>
 800a632:	2300      	movs	r3, #0
 800a634:	6363      	str	r3, [r4, #52]	; 0x34
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	2300      	movs	r3, #0
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f043 0308 	orr.w	r3, r3, #8
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	b94b      	cbnz	r3, 800a666 <__swsetup_r+0x9a>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a65c:	d003      	beq.n	800a666 <__swsetup_r+0x9a>
 800a65e:	4621      	mov	r1, r4
 800a660:	4630      	mov	r0, r6
 800a662:	f000 f9bf 	bl	800a9e4 <__smakebuf_r>
 800a666:	89a2      	ldrh	r2, [r4, #12]
 800a668:	f012 0301 	ands.w	r3, r2, #1
 800a66c:	d00c      	beq.n	800a688 <__swsetup_r+0xbc>
 800a66e:	2300      	movs	r3, #0
 800a670:	60a3      	str	r3, [r4, #8]
 800a672:	6963      	ldr	r3, [r4, #20]
 800a674:	425b      	negs	r3, r3
 800a676:	61a3      	str	r3, [r4, #24]
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	b953      	cbnz	r3, 800a692 <__swsetup_r+0xc6>
 800a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a680:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a684:	d1ba      	bne.n	800a5fc <__swsetup_r+0x30>
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	0792      	lsls	r2, r2, #30
 800a68a:	bf58      	it	pl
 800a68c:	6963      	ldrpl	r3, [r4, #20]
 800a68e:	60a3      	str	r3, [r4, #8]
 800a690:	e7f2      	b.n	800a678 <__swsetup_r+0xac>
 800a692:	2000      	movs	r0, #0
 800a694:	e7f7      	b.n	800a686 <__swsetup_r+0xba>
 800a696:	bf00      	nop
 800a698:	200001a0 	.word	0x200001a0
 800a69c:	0800b55c 	.word	0x0800b55c
 800a6a0:	0800b57c 	.word	0x0800b57c
 800a6a4:	0800b53c 	.word	0x0800b53c

0800a6a8 <__sflush_r>:
 800a6a8:	898a      	ldrh	r2, [r1, #12]
 800a6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	0710      	lsls	r0, r2, #28
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	d458      	bmi.n	800a768 <__sflush_r+0xc0>
 800a6b6:	684b      	ldr	r3, [r1, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	dc05      	bgt.n	800a6c8 <__sflush_r+0x20>
 800a6bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dc02      	bgt.n	800a6c8 <__sflush_r+0x20>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d0f9      	beq.n	800a6c2 <__sflush_r+0x1a>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6d4:	682f      	ldr	r7, [r5, #0]
 800a6d6:	6a21      	ldr	r1, [r4, #32]
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	d032      	beq.n	800a742 <__sflush_r+0x9a>
 800a6dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	075a      	lsls	r2, r3, #29
 800a6e2:	d505      	bpl.n	800a6f0 <__sflush_r+0x48>
 800a6e4:	6863      	ldr	r3, [r4, #4]
 800a6e6:	1ac0      	subs	r0, r0, r3
 800a6e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6ea:	b10b      	cbz	r3, 800a6f0 <__sflush_r+0x48>
 800a6ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ee:	1ac0      	subs	r0, r0, r3
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6f6:	6a21      	ldr	r1, [r4, #32]
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	47b0      	blx	r6
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	d106      	bne.n	800a710 <__sflush_r+0x68>
 800a702:	6829      	ldr	r1, [r5, #0]
 800a704:	291d      	cmp	r1, #29
 800a706:	d848      	bhi.n	800a79a <__sflush_r+0xf2>
 800a708:	4a29      	ldr	r2, [pc, #164]	; (800a7b0 <__sflush_r+0x108>)
 800a70a:	40ca      	lsrs	r2, r1
 800a70c:	07d6      	lsls	r6, r2, #31
 800a70e:	d544      	bpl.n	800a79a <__sflush_r+0xf2>
 800a710:	2200      	movs	r2, #0
 800a712:	6062      	str	r2, [r4, #4]
 800a714:	04d9      	lsls	r1, r3, #19
 800a716:	6922      	ldr	r2, [r4, #16]
 800a718:	6022      	str	r2, [r4, #0]
 800a71a:	d504      	bpl.n	800a726 <__sflush_r+0x7e>
 800a71c:	1c42      	adds	r2, r0, #1
 800a71e:	d101      	bne.n	800a724 <__sflush_r+0x7c>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b903      	cbnz	r3, 800a726 <__sflush_r+0x7e>
 800a724:	6560      	str	r0, [r4, #84]	; 0x54
 800a726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a728:	602f      	str	r7, [r5, #0]
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d0c9      	beq.n	800a6c2 <__sflush_r+0x1a>
 800a72e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a732:	4299      	cmp	r1, r3
 800a734:	d002      	beq.n	800a73c <__sflush_r+0x94>
 800a736:	4628      	mov	r0, r5
 800a738:	f000 f994 	bl	800aa64 <_free_r>
 800a73c:	2000      	movs	r0, #0
 800a73e:	6360      	str	r0, [r4, #52]	; 0x34
 800a740:	e7c0      	b.n	800a6c4 <__sflush_r+0x1c>
 800a742:	2301      	movs	r3, #1
 800a744:	4628      	mov	r0, r5
 800a746:	47b0      	blx	r6
 800a748:	1c41      	adds	r1, r0, #1
 800a74a:	d1c8      	bne.n	800a6de <__sflush_r+0x36>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0c5      	beq.n	800a6de <__sflush_r+0x36>
 800a752:	2b1d      	cmp	r3, #29
 800a754:	d001      	beq.n	800a75a <__sflush_r+0xb2>
 800a756:	2b16      	cmp	r3, #22
 800a758:	d101      	bne.n	800a75e <__sflush_r+0xb6>
 800a75a:	602f      	str	r7, [r5, #0]
 800a75c:	e7b1      	b.n	800a6c2 <__sflush_r+0x1a>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	e7ad      	b.n	800a6c4 <__sflush_r+0x1c>
 800a768:	690f      	ldr	r7, [r1, #16]
 800a76a:	2f00      	cmp	r7, #0
 800a76c:	d0a9      	beq.n	800a6c2 <__sflush_r+0x1a>
 800a76e:	0793      	lsls	r3, r2, #30
 800a770:	680e      	ldr	r6, [r1, #0]
 800a772:	bf08      	it	eq
 800a774:	694b      	ldreq	r3, [r1, #20]
 800a776:	600f      	str	r7, [r1, #0]
 800a778:	bf18      	it	ne
 800a77a:	2300      	movne	r3, #0
 800a77c:	eba6 0807 	sub.w	r8, r6, r7
 800a780:	608b      	str	r3, [r1, #8]
 800a782:	f1b8 0f00 	cmp.w	r8, #0
 800a786:	dd9c      	ble.n	800a6c2 <__sflush_r+0x1a>
 800a788:	4643      	mov	r3, r8
 800a78a:	463a      	mov	r2, r7
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a790:	4628      	mov	r0, r5
 800a792:	47b0      	blx	r6
 800a794:	2800      	cmp	r0, #0
 800a796:	dc06      	bgt.n	800a7a6 <__sflush_r+0xfe>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	e78e      	b.n	800a6c4 <__sflush_r+0x1c>
 800a7a6:	4407      	add	r7, r0
 800a7a8:	eba8 0800 	sub.w	r8, r8, r0
 800a7ac:	e7e9      	b.n	800a782 <__sflush_r+0xda>
 800a7ae:	bf00      	nop
 800a7b0:	20400001 	.word	0x20400001

0800a7b4 <_fflush_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	690b      	ldr	r3, [r1, #16]
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b1db      	cbz	r3, 800a7f6 <_fflush_r+0x42>
 800a7be:	b118      	cbz	r0, 800a7c8 <_fflush_r+0x14>
 800a7c0:	6983      	ldr	r3, [r0, #24]
 800a7c2:	b90b      	cbnz	r3, 800a7c8 <_fflush_r+0x14>
 800a7c4:	f000 f860 	bl	800a888 <__sinit>
 800a7c8:	4b0c      	ldr	r3, [pc, #48]	; (800a7fc <_fflush_r+0x48>)
 800a7ca:	429c      	cmp	r4, r3
 800a7cc:	d109      	bne.n	800a7e2 <_fflush_r+0x2e>
 800a7ce:	686c      	ldr	r4, [r5, #4]
 800a7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d4:	b17b      	cbz	r3, 800a7f6 <_fflush_r+0x42>
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4628      	mov	r0, r5
 800a7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7de:	f7ff bf63 	b.w	800a6a8 <__sflush_r>
 800a7e2:	4b07      	ldr	r3, [pc, #28]	; (800a800 <_fflush_r+0x4c>)
 800a7e4:	429c      	cmp	r4, r3
 800a7e6:	d101      	bne.n	800a7ec <_fflush_r+0x38>
 800a7e8:	68ac      	ldr	r4, [r5, #8]
 800a7ea:	e7f1      	b.n	800a7d0 <_fflush_r+0x1c>
 800a7ec:	4b05      	ldr	r3, [pc, #20]	; (800a804 <_fflush_r+0x50>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	bf08      	it	eq
 800a7f2:	68ec      	ldreq	r4, [r5, #12]
 800a7f4:	e7ec      	b.n	800a7d0 <_fflush_r+0x1c>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	0800b55c 	.word	0x0800b55c
 800a800:	0800b57c 	.word	0x0800b57c
 800a804:	0800b53c 	.word	0x0800b53c

0800a808 <std>:
 800a808:	2300      	movs	r3, #0
 800a80a:	b510      	push	{r4, lr}
 800a80c:	4604      	mov	r4, r0
 800a80e:	e9c0 3300 	strd	r3, r3, [r0]
 800a812:	6083      	str	r3, [r0, #8]
 800a814:	8181      	strh	r1, [r0, #12]
 800a816:	6643      	str	r3, [r0, #100]	; 0x64
 800a818:	81c2      	strh	r2, [r0, #14]
 800a81a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a81e:	6183      	str	r3, [r0, #24]
 800a820:	4619      	mov	r1, r3
 800a822:	2208      	movs	r2, #8
 800a824:	305c      	adds	r0, #92	; 0x5c
 800a826:	f7ff fdfa 	bl	800a41e <memset>
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <std+0x38>)
 800a82c:	6263      	str	r3, [r4, #36]	; 0x24
 800a82e:	4b05      	ldr	r3, [pc, #20]	; (800a844 <std+0x3c>)
 800a830:	62a3      	str	r3, [r4, #40]	; 0x28
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <std+0x40>)
 800a834:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <std+0x44>)
 800a838:	6224      	str	r4, [r4, #32]
 800a83a:	6323      	str	r3, [r4, #48]	; 0x30
 800a83c:	bd10      	pop	{r4, pc}
 800a83e:	bf00      	nop
 800a840:	0800b165 	.word	0x0800b165
 800a844:	0800b187 	.word	0x0800b187
 800a848:	0800b1bf 	.word	0x0800b1bf
 800a84c:	0800b1e3 	.word	0x0800b1e3

0800a850 <_cleanup_r>:
 800a850:	4901      	ldr	r1, [pc, #4]	; (800a858 <_cleanup_r+0x8>)
 800a852:	f000 b885 	b.w	800a960 <_fwalk_reent>
 800a856:	bf00      	nop
 800a858:	0800a7b5 	.word	0x0800a7b5

0800a85c <__sfmoreglue>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	1e4a      	subs	r2, r1, #1
 800a860:	2568      	movs	r5, #104	; 0x68
 800a862:	4355      	muls	r5, r2
 800a864:	460e      	mov	r6, r1
 800a866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a86a:	f000 f949 	bl	800ab00 <_malloc_r>
 800a86e:	4604      	mov	r4, r0
 800a870:	b140      	cbz	r0, 800a884 <__sfmoreglue+0x28>
 800a872:	2100      	movs	r1, #0
 800a874:	e9c0 1600 	strd	r1, r6, [r0]
 800a878:	300c      	adds	r0, #12
 800a87a:	60a0      	str	r0, [r4, #8]
 800a87c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a880:	f7ff fdcd 	bl	800a41e <memset>
 800a884:	4620      	mov	r0, r4
 800a886:	bd70      	pop	{r4, r5, r6, pc}

0800a888 <__sinit>:
 800a888:	6983      	ldr	r3, [r0, #24]
 800a88a:	b510      	push	{r4, lr}
 800a88c:	4604      	mov	r4, r0
 800a88e:	bb33      	cbnz	r3, 800a8de <__sinit+0x56>
 800a890:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a894:	6503      	str	r3, [r0, #80]	; 0x50
 800a896:	4b12      	ldr	r3, [pc, #72]	; (800a8e0 <__sinit+0x58>)
 800a898:	4a12      	ldr	r2, [pc, #72]	; (800a8e4 <__sinit+0x5c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6282      	str	r2, [r0, #40]	; 0x28
 800a89e:	4298      	cmp	r0, r3
 800a8a0:	bf04      	itt	eq
 800a8a2:	2301      	moveq	r3, #1
 800a8a4:	6183      	streq	r3, [r0, #24]
 800a8a6:	f000 f81f 	bl	800a8e8 <__sfp>
 800a8aa:	6060      	str	r0, [r4, #4]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 f81b 	bl	800a8e8 <__sfp>
 800a8b2:	60a0      	str	r0, [r4, #8]
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 f817 	bl	800a8e8 <__sfp>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	60e0      	str	r0, [r4, #12]
 800a8be:	2104      	movs	r1, #4
 800a8c0:	6860      	ldr	r0, [r4, #4]
 800a8c2:	f7ff ffa1 	bl	800a808 <std>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	2109      	movs	r1, #9
 800a8ca:	68a0      	ldr	r0, [r4, #8]
 800a8cc:	f7ff ff9c 	bl	800a808 <std>
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	2112      	movs	r1, #18
 800a8d4:	68e0      	ldr	r0, [r4, #12]
 800a8d6:	f7ff ff97 	bl	800a808 <std>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	61a3      	str	r3, [r4, #24]
 800a8de:	bd10      	pop	{r4, pc}
 800a8e0:	0800b538 	.word	0x0800b538
 800a8e4:	0800a851 	.word	0x0800a851

0800a8e8 <__sfp>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	4b1b      	ldr	r3, [pc, #108]	; (800a958 <__sfp+0x70>)
 800a8ec:	681e      	ldr	r6, [r3, #0]
 800a8ee:	69b3      	ldr	r3, [r6, #24]
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	b913      	cbnz	r3, 800a8fa <__sfp+0x12>
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7ff ffc7 	bl	800a888 <__sinit>
 800a8fa:	3648      	adds	r6, #72	; 0x48
 800a8fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a900:	3b01      	subs	r3, #1
 800a902:	d503      	bpl.n	800a90c <__sfp+0x24>
 800a904:	6833      	ldr	r3, [r6, #0]
 800a906:	b133      	cbz	r3, 800a916 <__sfp+0x2e>
 800a908:	6836      	ldr	r6, [r6, #0]
 800a90a:	e7f7      	b.n	800a8fc <__sfp+0x14>
 800a90c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a910:	b16d      	cbz	r5, 800a92e <__sfp+0x46>
 800a912:	3468      	adds	r4, #104	; 0x68
 800a914:	e7f4      	b.n	800a900 <__sfp+0x18>
 800a916:	2104      	movs	r1, #4
 800a918:	4638      	mov	r0, r7
 800a91a:	f7ff ff9f 	bl	800a85c <__sfmoreglue>
 800a91e:	6030      	str	r0, [r6, #0]
 800a920:	2800      	cmp	r0, #0
 800a922:	d1f1      	bne.n	800a908 <__sfp+0x20>
 800a924:	230c      	movs	r3, #12
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	4604      	mov	r4, r0
 800a92a:	4620      	mov	r0, r4
 800a92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92e:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <__sfp+0x74>)
 800a930:	6665      	str	r5, [r4, #100]	; 0x64
 800a932:	e9c4 5500 	strd	r5, r5, [r4]
 800a936:	60a5      	str	r5, [r4, #8]
 800a938:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a93c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a940:	2208      	movs	r2, #8
 800a942:	4629      	mov	r1, r5
 800a944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a948:	f7ff fd69 	bl	800a41e <memset>
 800a94c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a954:	e7e9      	b.n	800a92a <__sfp+0x42>
 800a956:	bf00      	nop
 800a958:	0800b538 	.word	0x0800b538
 800a95c:	ffff0001 	.word	0xffff0001

0800a960 <_fwalk_reent>:
 800a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a96c:	2600      	movs	r6, #0
 800a96e:	b914      	cbnz	r4, 800a976 <_fwalk_reent+0x16>
 800a970:	4630      	mov	r0, r6
 800a972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a976:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a97a:	3f01      	subs	r7, #1
 800a97c:	d501      	bpl.n	800a982 <_fwalk_reent+0x22>
 800a97e:	6824      	ldr	r4, [r4, #0]
 800a980:	e7f5      	b.n	800a96e <_fwalk_reent+0xe>
 800a982:	89ab      	ldrh	r3, [r5, #12]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d907      	bls.n	800a998 <_fwalk_reent+0x38>
 800a988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a98c:	3301      	adds	r3, #1
 800a98e:	d003      	beq.n	800a998 <_fwalk_reent+0x38>
 800a990:	4629      	mov	r1, r5
 800a992:	4640      	mov	r0, r8
 800a994:	47c8      	blx	r9
 800a996:	4306      	orrs	r6, r0
 800a998:	3568      	adds	r5, #104	; 0x68
 800a99a:	e7ee      	b.n	800a97a <_fwalk_reent+0x1a>

0800a99c <__swhatbuf_r>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	460e      	mov	r6, r1
 800a9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	b096      	sub	sp, #88	; 0x58
 800a9a8:	4614      	mov	r4, r2
 800a9aa:	461d      	mov	r5, r3
 800a9ac:	da07      	bge.n	800a9be <__swhatbuf_r+0x22>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	89b3      	ldrh	r3, [r6, #12]
 800a9b4:	061a      	lsls	r2, r3, #24
 800a9b6:	d410      	bmi.n	800a9da <__swhatbuf_r+0x3e>
 800a9b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9bc:	e00e      	b.n	800a9dc <__swhatbuf_r+0x40>
 800a9be:	466a      	mov	r2, sp
 800a9c0:	f000 fc36 	bl	800b230 <_fstat_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	dbf2      	blt.n	800a9ae <__swhatbuf_r+0x12>
 800a9c8:	9a01      	ldr	r2, [sp, #4]
 800a9ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9d2:	425a      	negs	r2, r3
 800a9d4:	415a      	adcs	r2, r3
 800a9d6:	602a      	str	r2, [r5, #0]
 800a9d8:	e7ee      	b.n	800a9b8 <__swhatbuf_r+0x1c>
 800a9da:	2340      	movs	r3, #64	; 0x40
 800a9dc:	2000      	movs	r0, #0
 800a9de:	6023      	str	r3, [r4, #0]
 800a9e0:	b016      	add	sp, #88	; 0x58
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}

0800a9e4 <__smakebuf_r>:
 800a9e4:	898b      	ldrh	r3, [r1, #12]
 800a9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9e8:	079d      	lsls	r5, r3, #30
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	d507      	bpl.n	800aa00 <__smakebuf_r+0x1c>
 800a9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	6163      	str	r3, [r4, #20]
 800a9fc:	b002      	add	sp, #8
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	ab01      	add	r3, sp, #4
 800aa02:	466a      	mov	r2, sp
 800aa04:	f7ff ffca 	bl	800a99c <__swhatbuf_r>
 800aa08:	9900      	ldr	r1, [sp, #0]
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f000 f877 	bl	800ab00 <_malloc_r>
 800aa12:	b948      	cbnz	r0, 800aa28 <__smakebuf_r+0x44>
 800aa14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa18:	059a      	lsls	r2, r3, #22
 800aa1a:	d4ef      	bmi.n	800a9fc <__smakebuf_r+0x18>
 800aa1c:	f023 0303 	bic.w	r3, r3, #3
 800aa20:	f043 0302 	orr.w	r3, r3, #2
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	e7e3      	b.n	800a9f0 <__smakebuf_r+0xc>
 800aa28:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <__smakebuf_r+0x7c>)
 800aa2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	6020      	str	r0, [r4, #0]
 800aa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	9b00      	ldr	r3, [sp, #0]
 800aa38:	6163      	str	r3, [r4, #20]
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	6120      	str	r0, [r4, #16]
 800aa3e:	b15b      	cbz	r3, 800aa58 <__smakebuf_r+0x74>
 800aa40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa44:	4630      	mov	r0, r6
 800aa46:	f000 fc05 	bl	800b254 <_isatty_r>
 800aa4a:	b128      	cbz	r0, 800aa58 <__smakebuf_r+0x74>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	f043 0301 	orr.w	r3, r3, #1
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	431d      	orrs	r5, r3
 800aa5c:	81a5      	strh	r5, [r4, #12]
 800aa5e:	e7cd      	b.n	800a9fc <__smakebuf_r+0x18>
 800aa60:	0800a851 	.word	0x0800a851

0800aa64 <_free_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4605      	mov	r5, r0
 800aa68:	2900      	cmp	r1, #0
 800aa6a:	d045      	beq.n	800aaf8 <_free_r+0x94>
 800aa6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa70:	1f0c      	subs	r4, r1, #4
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bfb8      	it	lt
 800aa76:	18e4      	addlt	r4, r4, r3
 800aa78:	f000 fc0e 	bl	800b298 <__malloc_lock>
 800aa7c:	4a1f      	ldr	r2, [pc, #124]	; (800aafc <_free_r+0x98>)
 800aa7e:	6813      	ldr	r3, [r2, #0]
 800aa80:	4610      	mov	r0, r2
 800aa82:	b933      	cbnz	r3, 800aa92 <_free_r+0x2e>
 800aa84:	6063      	str	r3, [r4, #4]
 800aa86:	6014      	str	r4, [r2, #0]
 800aa88:	4628      	mov	r0, r5
 800aa8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa8e:	f000 bc04 	b.w	800b29a <__malloc_unlock>
 800aa92:	42a3      	cmp	r3, r4
 800aa94:	d90c      	bls.n	800aab0 <_free_r+0x4c>
 800aa96:	6821      	ldr	r1, [r4, #0]
 800aa98:	1862      	adds	r2, r4, r1
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	bf04      	itt	eq
 800aa9e:	681a      	ldreq	r2, [r3, #0]
 800aaa0:	685b      	ldreq	r3, [r3, #4]
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	bf04      	itt	eq
 800aaa6:	1852      	addeq	r2, r2, r1
 800aaa8:	6022      	streq	r2, [r4, #0]
 800aaaa:	6004      	str	r4, [r0, #0]
 800aaac:	e7ec      	b.n	800aa88 <_free_r+0x24>
 800aaae:	4613      	mov	r3, r2
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	b10a      	cbz	r2, 800aab8 <_free_r+0x54>
 800aab4:	42a2      	cmp	r2, r4
 800aab6:	d9fa      	bls.n	800aaae <_free_r+0x4a>
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	1858      	adds	r0, r3, r1
 800aabc:	42a0      	cmp	r0, r4
 800aabe:	d10b      	bne.n	800aad8 <_free_r+0x74>
 800aac0:	6820      	ldr	r0, [r4, #0]
 800aac2:	4401      	add	r1, r0
 800aac4:	1858      	adds	r0, r3, r1
 800aac6:	4282      	cmp	r2, r0
 800aac8:	6019      	str	r1, [r3, #0]
 800aaca:	d1dd      	bne.n	800aa88 <_free_r+0x24>
 800aacc:	6810      	ldr	r0, [r2, #0]
 800aace:	6852      	ldr	r2, [r2, #4]
 800aad0:	605a      	str	r2, [r3, #4]
 800aad2:	4401      	add	r1, r0
 800aad4:	6019      	str	r1, [r3, #0]
 800aad6:	e7d7      	b.n	800aa88 <_free_r+0x24>
 800aad8:	d902      	bls.n	800aae0 <_free_r+0x7c>
 800aada:	230c      	movs	r3, #12
 800aadc:	602b      	str	r3, [r5, #0]
 800aade:	e7d3      	b.n	800aa88 <_free_r+0x24>
 800aae0:	6820      	ldr	r0, [r4, #0]
 800aae2:	1821      	adds	r1, r4, r0
 800aae4:	428a      	cmp	r2, r1
 800aae6:	bf04      	itt	eq
 800aae8:	6811      	ldreq	r1, [r2, #0]
 800aaea:	6852      	ldreq	r2, [r2, #4]
 800aaec:	6062      	str	r2, [r4, #4]
 800aaee:	bf04      	itt	eq
 800aaf0:	1809      	addeq	r1, r1, r0
 800aaf2:	6021      	streq	r1, [r4, #0]
 800aaf4:	605c      	str	r4, [r3, #4]
 800aaf6:	e7c7      	b.n	800aa88 <_free_r+0x24>
 800aaf8:	bd38      	pop	{r3, r4, r5, pc}
 800aafa:	bf00      	nop
 800aafc:	200002b0 	.word	0x200002b0

0800ab00 <_malloc_r>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	1ccd      	adds	r5, r1, #3
 800ab04:	f025 0503 	bic.w	r5, r5, #3
 800ab08:	3508      	adds	r5, #8
 800ab0a:	2d0c      	cmp	r5, #12
 800ab0c:	bf38      	it	cc
 800ab0e:	250c      	movcc	r5, #12
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	4606      	mov	r6, r0
 800ab14:	db01      	blt.n	800ab1a <_malloc_r+0x1a>
 800ab16:	42a9      	cmp	r1, r5
 800ab18:	d903      	bls.n	800ab22 <_malloc_r+0x22>
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	6033      	str	r3, [r6, #0]
 800ab1e:	2000      	movs	r0, #0
 800ab20:	bd70      	pop	{r4, r5, r6, pc}
 800ab22:	f000 fbb9 	bl	800b298 <__malloc_lock>
 800ab26:	4a21      	ldr	r2, [pc, #132]	; (800abac <_malloc_r+0xac>)
 800ab28:	6814      	ldr	r4, [r2, #0]
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	b991      	cbnz	r1, 800ab54 <_malloc_r+0x54>
 800ab2e:	4c20      	ldr	r4, [pc, #128]	; (800abb0 <_malloc_r+0xb0>)
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	b91b      	cbnz	r3, 800ab3c <_malloc_r+0x3c>
 800ab34:	4630      	mov	r0, r6
 800ab36:	f000 fb05 	bl	800b144 <_sbrk_r>
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f000 fb00 	bl	800b144 <_sbrk_r>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d124      	bne.n	800ab92 <_malloc_r+0x92>
 800ab48:	230c      	movs	r3, #12
 800ab4a:	6033      	str	r3, [r6, #0]
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 fba4 	bl	800b29a <__malloc_unlock>
 800ab52:	e7e4      	b.n	800ab1e <_malloc_r+0x1e>
 800ab54:	680b      	ldr	r3, [r1, #0]
 800ab56:	1b5b      	subs	r3, r3, r5
 800ab58:	d418      	bmi.n	800ab8c <_malloc_r+0x8c>
 800ab5a:	2b0b      	cmp	r3, #11
 800ab5c:	d90f      	bls.n	800ab7e <_malloc_r+0x7e>
 800ab5e:	600b      	str	r3, [r1, #0]
 800ab60:	50cd      	str	r5, [r1, r3]
 800ab62:	18cc      	adds	r4, r1, r3
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 fb98 	bl	800b29a <__malloc_unlock>
 800ab6a:	f104 000b 	add.w	r0, r4, #11
 800ab6e:	1d23      	adds	r3, r4, #4
 800ab70:	f020 0007 	bic.w	r0, r0, #7
 800ab74:	1ac3      	subs	r3, r0, r3
 800ab76:	d0d3      	beq.n	800ab20 <_malloc_r+0x20>
 800ab78:	425a      	negs	r2, r3
 800ab7a:	50e2      	str	r2, [r4, r3]
 800ab7c:	e7d0      	b.n	800ab20 <_malloc_r+0x20>
 800ab7e:	428c      	cmp	r4, r1
 800ab80:	684b      	ldr	r3, [r1, #4]
 800ab82:	bf16      	itet	ne
 800ab84:	6063      	strne	r3, [r4, #4]
 800ab86:	6013      	streq	r3, [r2, #0]
 800ab88:	460c      	movne	r4, r1
 800ab8a:	e7eb      	b.n	800ab64 <_malloc_r+0x64>
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	6849      	ldr	r1, [r1, #4]
 800ab90:	e7cc      	b.n	800ab2c <_malloc_r+0x2c>
 800ab92:	1cc4      	adds	r4, r0, #3
 800ab94:	f024 0403 	bic.w	r4, r4, #3
 800ab98:	42a0      	cmp	r0, r4
 800ab9a:	d005      	beq.n	800aba8 <_malloc_r+0xa8>
 800ab9c:	1a21      	subs	r1, r4, r0
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f000 fad0 	bl	800b144 <_sbrk_r>
 800aba4:	3001      	adds	r0, #1
 800aba6:	d0cf      	beq.n	800ab48 <_malloc_r+0x48>
 800aba8:	6025      	str	r5, [r4, #0]
 800abaa:	e7db      	b.n	800ab64 <_malloc_r+0x64>
 800abac:	200002b0 	.word	0x200002b0
 800abb0:	200002b4 	.word	0x200002b4

0800abb4 <__sfputc_r>:
 800abb4:	6893      	ldr	r3, [r2, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	b410      	push	{r4}
 800abbc:	6093      	str	r3, [r2, #8]
 800abbe:	da08      	bge.n	800abd2 <__sfputc_r+0x1e>
 800abc0:	6994      	ldr	r4, [r2, #24]
 800abc2:	42a3      	cmp	r3, r4
 800abc4:	db01      	blt.n	800abca <__sfputc_r+0x16>
 800abc6:	290a      	cmp	r1, #10
 800abc8:	d103      	bne.n	800abd2 <__sfputc_r+0x1e>
 800abca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abce:	f7ff bcab 	b.w	800a528 <__swbuf_r>
 800abd2:	6813      	ldr	r3, [r2, #0]
 800abd4:	1c58      	adds	r0, r3, #1
 800abd6:	6010      	str	r0, [r2, #0]
 800abd8:	7019      	strb	r1, [r3, #0]
 800abda:	4608      	mov	r0, r1
 800abdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <__sfputs_r>:
 800abe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe4:	4606      	mov	r6, r0
 800abe6:	460f      	mov	r7, r1
 800abe8:	4614      	mov	r4, r2
 800abea:	18d5      	adds	r5, r2, r3
 800abec:	42ac      	cmp	r4, r5
 800abee:	d101      	bne.n	800abf4 <__sfputs_r+0x12>
 800abf0:	2000      	movs	r0, #0
 800abf2:	e007      	b.n	800ac04 <__sfputs_r+0x22>
 800abf4:	463a      	mov	r2, r7
 800abf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7ff ffda 	bl	800abb4 <__sfputc_r>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d1f3      	bne.n	800abec <__sfputs_r+0xa>
 800ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac08 <_vfiprintf_r>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	b09d      	sub	sp, #116	; 0x74
 800ac10:	4617      	mov	r7, r2
 800ac12:	461d      	mov	r5, r3
 800ac14:	4606      	mov	r6, r0
 800ac16:	b118      	cbz	r0, 800ac20 <_vfiprintf_r+0x18>
 800ac18:	6983      	ldr	r3, [r0, #24]
 800ac1a:	b90b      	cbnz	r3, 800ac20 <_vfiprintf_r+0x18>
 800ac1c:	f7ff fe34 	bl	800a888 <__sinit>
 800ac20:	4b7c      	ldr	r3, [pc, #496]	; (800ae14 <_vfiprintf_r+0x20c>)
 800ac22:	429c      	cmp	r4, r3
 800ac24:	d158      	bne.n	800acd8 <_vfiprintf_r+0xd0>
 800ac26:	6874      	ldr	r4, [r6, #4]
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	0718      	lsls	r0, r3, #28
 800ac2c:	d55e      	bpl.n	800acec <_vfiprintf_r+0xe4>
 800ac2e:	6923      	ldr	r3, [r4, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d05b      	beq.n	800acec <_vfiprintf_r+0xe4>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	; 0x24
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac3e:	2330      	movs	r3, #48	; 0x30
 800ac40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac44:	9503      	str	r5, [sp, #12]
 800ac46:	f04f 0b01 	mov.w	fp, #1
 800ac4a:	46b8      	mov	r8, r7
 800ac4c:	4645      	mov	r5, r8
 800ac4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac52:	b10b      	cbz	r3, 800ac58 <_vfiprintf_r+0x50>
 800ac54:	2b25      	cmp	r3, #37	; 0x25
 800ac56:	d154      	bne.n	800ad02 <_vfiprintf_r+0xfa>
 800ac58:	ebb8 0a07 	subs.w	sl, r8, r7
 800ac5c:	d00b      	beq.n	800ac76 <_vfiprintf_r+0x6e>
 800ac5e:	4653      	mov	r3, sl
 800ac60:	463a      	mov	r2, r7
 800ac62:	4621      	mov	r1, r4
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff ffbc 	bl	800abe2 <__sfputs_r>
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	f000 80c2 	beq.w	800adf4 <_vfiprintf_r+0x1ec>
 800ac70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac72:	4453      	add	r3, sl
 800ac74:	9309      	str	r3, [sp, #36]	; 0x24
 800ac76:	f898 3000 	ldrb.w	r3, [r8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 80ba 	beq.w	800adf4 <_vfiprintf_r+0x1ec>
 800ac80:	2300      	movs	r3, #0
 800ac82:	f04f 32ff 	mov.w	r2, #4294967295
 800ac86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac8a:	9304      	str	r3, [sp, #16]
 800ac8c:	9307      	str	r3, [sp, #28]
 800ac8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac92:	931a      	str	r3, [sp, #104]	; 0x68
 800ac94:	46a8      	mov	r8, r5
 800ac96:	2205      	movs	r2, #5
 800ac98:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ac9c:	485e      	ldr	r0, [pc, #376]	; (800ae18 <_vfiprintf_r+0x210>)
 800ac9e:	f7f5 fbf7 	bl	8000490 <memchr>
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	bb78      	cbnz	r0, 800ad06 <_vfiprintf_r+0xfe>
 800aca6:	06d9      	lsls	r1, r3, #27
 800aca8:	bf44      	itt	mi
 800acaa:	2220      	movmi	r2, #32
 800acac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800acb0:	071a      	lsls	r2, r3, #28
 800acb2:	bf44      	itt	mi
 800acb4:	222b      	movmi	r2, #43	; 0x2b
 800acb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800acba:	782a      	ldrb	r2, [r5, #0]
 800acbc:	2a2a      	cmp	r2, #42	; 0x2a
 800acbe:	d02a      	beq.n	800ad16 <_vfiprintf_r+0x10e>
 800acc0:	9a07      	ldr	r2, [sp, #28]
 800acc2:	46a8      	mov	r8, r5
 800acc4:	2000      	movs	r0, #0
 800acc6:	250a      	movs	r5, #10
 800acc8:	4641      	mov	r1, r8
 800acca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acce:	3b30      	subs	r3, #48	; 0x30
 800acd0:	2b09      	cmp	r3, #9
 800acd2:	d969      	bls.n	800ada8 <_vfiprintf_r+0x1a0>
 800acd4:	b360      	cbz	r0, 800ad30 <_vfiprintf_r+0x128>
 800acd6:	e024      	b.n	800ad22 <_vfiprintf_r+0x11a>
 800acd8:	4b50      	ldr	r3, [pc, #320]	; (800ae1c <_vfiprintf_r+0x214>)
 800acda:	429c      	cmp	r4, r3
 800acdc:	d101      	bne.n	800ace2 <_vfiprintf_r+0xda>
 800acde:	68b4      	ldr	r4, [r6, #8]
 800ace0:	e7a2      	b.n	800ac28 <_vfiprintf_r+0x20>
 800ace2:	4b4f      	ldr	r3, [pc, #316]	; (800ae20 <_vfiprintf_r+0x218>)
 800ace4:	429c      	cmp	r4, r3
 800ace6:	bf08      	it	eq
 800ace8:	68f4      	ldreq	r4, [r6, #12]
 800acea:	e79d      	b.n	800ac28 <_vfiprintf_r+0x20>
 800acec:	4621      	mov	r1, r4
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff fc6c 	bl	800a5cc <__swsetup_r>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d09d      	beq.n	800ac34 <_vfiprintf_r+0x2c>
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	b01d      	add	sp, #116	; 0x74
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad02:	46a8      	mov	r8, r5
 800ad04:	e7a2      	b.n	800ac4c <_vfiprintf_r+0x44>
 800ad06:	4a44      	ldr	r2, [pc, #272]	; (800ae18 <_vfiprintf_r+0x210>)
 800ad08:	1a80      	subs	r0, r0, r2
 800ad0a:	fa0b f000 	lsl.w	r0, fp, r0
 800ad0e:	4318      	orrs	r0, r3
 800ad10:	9004      	str	r0, [sp, #16]
 800ad12:	4645      	mov	r5, r8
 800ad14:	e7be      	b.n	800ac94 <_vfiprintf_r+0x8c>
 800ad16:	9a03      	ldr	r2, [sp, #12]
 800ad18:	1d11      	adds	r1, r2, #4
 800ad1a:	6812      	ldr	r2, [r2, #0]
 800ad1c:	9103      	str	r1, [sp, #12]
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	db01      	blt.n	800ad26 <_vfiprintf_r+0x11e>
 800ad22:	9207      	str	r2, [sp, #28]
 800ad24:	e004      	b.n	800ad30 <_vfiprintf_r+0x128>
 800ad26:	4252      	negs	r2, r2
 800ad28:	f043 0302 	orr.w	r3, r3, #2
 800ad2c:	9207      	str	r2, [sp, #28]
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	f898 3000 	ldrb.w	r3, [r8]
 800ad34:	2b2e      	cmp	r3, #46	; 0x2e
 800ad36:	d10e      	bne.n	800ad56 <_vfiprintf_r+0x14e>
 800ad38:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ad3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad3e:	d138      	bne.n	800adb2 <_vfiprintf_r+0x1aa>
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	1d1a      	adds	r2, r3, #4
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	9203      	str	r2, [sp, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bfb8      	it	lt
 800ad4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad50:	f108 0802 	add.w	r8, r8, #2
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	4d33      	ldr	r5, [pc, #204]	; (800ae24 <_vfiprintf_r+0x21c>)
 800ad58:	f898 1000 	ldrb.w	r1, [r8]
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f7f5 fb96 	bl	8000490 <memchr>
 800ad64:	b140      	cbz	r0, 800ad78 <_vfiprintf_r+0x170>
 800ad66:	2340      	movs	r3, #64	; 0x40
 800ad68:	1b40      	subs	r0, r0, r5
 800ad6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	4303      	orrs	r3, r0
 800ad72:	f108 0801 	add.w	r8, r8, #1
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	f898 1000 	ldrb.w	r1, [r8]
 800ad7c:	482a      	ldr	r0, [pc, #168]	; (800ae28 <_vfiprintf_r+0x220>)
 800ad7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad82:	2206      	movs	r2, #6
 800ad84:	f108 0701 	add.w	r7, r8, #1
 800ad88:	f7f5 fb82 	bl	8000490 <memchr>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d037      	beq.n	800ae00 <_vfiprintf_r+0x1f8>
 800ad90:	4b26      	ldr	r3, [pc, #152]	; (800ae2c <_vfiprintf_r+0x224>)
 800ad92:	bb1b      	cbnz	r3, 800addc <_vfiprintf_r+0x1d4>
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	3307      	adds	r3, #7
 800ad98:	f023 0307 	bic.w	r3, r3, #7
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	9303      	str	r3, [sp, #12]
 800ada0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada2:	444b      	add	r3, r9
 800ada4:	9309      	str	r3, [sp, #36]	; 0x24
 800ada6:	e750      	b.n	800ac4a <_vfiprintf_r+0x42>
 800ada8:	fb05 3202 	mla	r2, r5, r2, r3
 800adac:	2001      	movs	r0, #1
 800adae:	4688      	mov	r8, r1
 800adb0:	e78a      	b.n	800acc8 <_vfiprintf_r+0xc0>
 800adb2:	2300      	movs	r3, #0
 800adb4:	f108 0801 	add.w	r8, r8, #1
 800adb8:	9305      	str	r3, [sp, #20]
 800adba:	4619      	mov	r1, r3
 800adbc:	250a      	movs	r5, #10
 800adbe:	4640      	mov	r0, r8
 800adc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adc4:	3a30      	subs	r2, #48	; 0x30
 800adc6:	2a09      	cmp	r2, #9
 800adc8:	d903      	bls.n	800add2 <_vfiprintf_r+0x1ca>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0c3      	beq.n	800ad56 <_vfiprintf_r+0x14e>
 800adce:	9105      	str	r1, [sp, #20]
 800add0:	e7c1      	b.n	800ad56 <_vfiprintf_r+0x14e>
 800add2:	fb05 2101 	mla	r1, r5, r1, r2
 800add6:	2301      	movs	r3, #1
 800add8:	4680      	mov	r8, r0
 800adda:	e7f0      	b.n	800adbe <_vfiprintf_r+0x1b6>
 800addc:	ab03      	add	r3, sp, #12
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	4622      	mov	r2, r4
 800ade2:	4b13      	ldr	r3, [pc, #76]	; (800ae30 <_vfiprintf_r+0x228>)
 800ade4:	a904      	add	r1, sp, #16
 800ade6:	4630      	mov	r0, r6
 800ade8:	f3af 8000 	nop.w
 800adec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800adf0:	4681      	mov	r9, r0
 800adf2:	d1d5      	bne.n	800ada0 <_vfiprintf_r+0x198>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	065b      	lsls	r3, r3, #25
 800adf8:	f53f af7e 	bmi.w	800acf8 <_vfiprintf_r+0xf0>
 800adfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adfe:	e77d      	b.n	800acfc <_vfiprintf_r+0xf4>
 800ae00:	ab03      	add	r3, sp, #12
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	4622      	mov	r2, r4
 800ae06:	4b0a      	ldr	r3, [pc, #40]	; (800ae30 <_vfiprintf_r+0x228>)
 800ae08:	a904      	add	r1, sp, #16
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f000 f888 	bl	800af20 <_printf_i>
 800ae10:	e7ec      	b.n	800adec <_vfiprintf_r+0x1e4>
 800ae12:	bf00      	nop
 800ae14:	0800b55c 	.word	0x0800b55c
 800ae18:	0800b59c 	.word	0x0800b59c
 800ae1c:	0800b57c 	.word	0x0800b57c
 800ae20:	0800b53c 	.word	0x0800b53c
 800ae24:	0800b5a2 	.word	0x0800b5a2
 800ae28:	0800b5a6 	.word	0x0800b5a6
 800ae2c:	00000000 	.word	0x00000000
 800ae30:	0800abe3 	.word	0x0800abe3

0800ae34 <_printf_common>:
 800ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae38:	4691      	mov	r9, r2
 800ae3a:	461f      	mov	r7, r3
 800ae3c:	688a      	ldr	r2, [r1, #8]
 800ae3e:	690b      	ldr	r3, [r1, #16]
 800ae40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	bfb8      	it	lt
 800ae48:	4613      	movlt	r3, r2
 800ae4a:	f8c9 3000 	str.w	r3, [r9]
 800ae4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae52:	4606      	mov	r6, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	b112      	cbz	r2, 800ae5e <_printf_common+0x2a>
 800ae58:	3301      	adds	r3, #1
 800ae5a:	f8c9 3000 	str.w	r3, [r9]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	0699      	lsls	r1, r3, #26
 800ae62:	bf42      	ittt	mi
 800ae64:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ae68:	3302      	addmi	r3, #2
 800ae6a:	f8c9 3000 	strmi.w	r3, [r9]
 800ae6e:	6825      	ldr	r5, [r4, #0]
 800ae70:	f015 0506 	ands.w	r5, r5, #6
 800ae74:	d107      	bne.n	800ae86 <_printf_common+0x52>
 800ae76:	f104 0a19 	add.w	sl, r4, #25
 800ae7a:	68e3      	ldr	r3, [r4, #12]
 800ae7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae80:	1a9b      	subs	r3, r3, r2
 800ae82:	42ab      	cmp	r3, r5
 800ae84:	dc28      	bgt.n	800aed8 <_printf_common+0xa4>
 800ae86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ae8a:	6822      	ldr	r2, [r4, #0]
 800ae8c:	3300      	adds	r3, #0
 800ae8e:	bf18      	it	ne
 800ae90:	2301      	movne	r3, #1
 800ae92:	0692      	lsls	r2, r2, #26
 800ae94:	d42d      	bmi.n	800aef2 <_printf_common+0xbe>
 800ae96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	47c0      	blx	r8
 800aea0:	3001      	adds	r0, #1
 800aea2:	d020      	beq.n	800aee6 <_printf_common+0xb2>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	68e5      	ldr	r5, [r4, #12]
 800aea8:	f8d9 2000 	ldr.w	r2, [r9]
 800aeac:	f003 0306 	and.w	r3, r3, #6
 800aeb0:	2b04      	cmp	r3, #4
 800aeb2:	bf08      	it	eq
 800aeb4:	1aad      	subeq	r5, r5, r2
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	6922      	ldr	r2, [r4, #16]
 800aeba:	bf0c      	ite	eq
 800aebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aec0:	2500      	movne	r5, #0
 800aec2:	4293      	cmp	r3, r2
 800aec4:	bfc4      	itt	gt
 800aec6:	1a9b      	subgt	r3, r3, r2
 800aec8:	18ed      	addgt	r5, r5, r3
 800aeca:	f04f 0900 	mov.w	r9, #0
 800aece:	341a      	adds	r4, #26
 800aed0:	454d      	cmp	r5, r9
 800aed2:	d11a      	bne.n	800af0a <_printf_common+0xd6>
 800aed4:	2000      	movs	r0, #0
 800aed6:	e008      	b.n	800aeea <_printf_common+0xb6>
 800aed8:	2301      	movs	r3, #1
 800aeda:	4652      	mov	r2, sl
 800aedc:	4639      	mov	r1, r7
 800aede:	4630      	mov	r0, r6
 800aee0:	47c0      	blx	r8
 800aee2:	3001      	adds	r0, #1
 800aee4:	d103      	bne.n	800aeee <_printf_common+0xba>
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeee:	3501      	adds	r5, #1
 800aef0:	e7c3      	b.n	800ae7a <_printf_common+0x46>
 800aef2:	18e1      	adds	r1, r4, r3
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	2030      	movs	r0, #48	; 0x30
 800aef8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aefc:	4422      	add	r2, r4
 800aefe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af06:	3302      	adds	r3, #2
 800af08:	e7c5      	b.n	800ae96 <_printf_common+0x62>
 800af0a:	2301      	movs	r3, #1
 800af0c:	4622      	mov	r2, r4
 800af0e:	4639      	mov	r1, r7
 800af10:	4630      	mov	r0, r6
 800af12:	47c0      	blx	r8
 800af14:	3001      	adds	r0, #1
 800af16:	d0e6      	beq.n	800aee6 <_printf_common+0xb2>
 800af18:	f109 0901 	add.w	r9, r9, #1
 800af1c:	e7d8      	b.n	800aed0 <_printf_common+0x9c>
	...

0800af20 <_printf_i>:
 800af20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800af28:	460c      	mov	r4, r1
 800af2a:	7e09      	ldrb	r1, [r1, #24]
 800af2c:	b085      	sub	sp, #20
 800af2e:	296e      	cmp	r1, #110	; 0x6e
 800af30:	4617      	mov	r7, r2
 800af32:	4606      	mov	r6, r0
 800af34:	4698      	mov	r8, r3
 800af36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af38:	f000 80b3 	beq.w	800b0a2 <_printf_i+0x182>
 800af3c:	d822      	bhi.n	800af84 <_printf_i+0x64>
 800af3e:	2963      	cmp	r1, #99	; 0x63
 800af40:	d036      	beq.n	800afb0 <_printf_i+0x90>
 800af42:	d80a      	bhi.n	800af5a <_printf_i+0x3a>
 800af44:	2900      	cmp	r1, #0
 800af46:	f000 80b9 	beq.w	800b0bc <_printf_i+0x19c>
 800af4a:	2958      	cmp	r1, #88	; 0x58
 800af4c:	f000 8083 	beq.w	800b056 <_printf_i+0x136>
 800af50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800af58:	e032      	b.n	800afc0 <_printf_i+0xa0>
 800af5a:	2964      	cmp	r1, #100	; 0x64
 800af5c:	d001      	beq.n	800af62 <_printf_i+0x42>
 800af5e:	2969      	cmp	r1, #105	; 0x69
 800af60:	d1f6      	bne.n	800af50 <_printf_i+0x30>
 800af62:	6820      	ldr	r0, [r4, #0]
 800af64:	6813      	ldr	r3, [r2, #0]
 800af66:	0605      	lsls	r5, r0, #24
 800af68:	f103 0104 	add.w	r1, r3, #4
 800af6c:	d52a      	bpl.n	800afc4 <_printf_i+0xa4>
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6011      	str	r1, [r2, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	da03      	bge.n	800af7e <_printf_i+0x5e>
 800af76:	222d      	movs	r2, #45	; 0x2d
 800af78:	425b      	negs	r3, r3
 800af7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800af7e:	486f      	ldr	r0, [pc, #444]	; (800b13c <_printf_i+0x21c>)
 800af80:	220a      	movs	r2, #10
 800af82:	e039      	b.n	800aff8 <_printf_i+0xd8>
 800af84:	2973      	cmp	r1, #115	; 0x73
 800af86:	f000 809d 	beq.w	800b0c4 <_printf_i+0x1a4>
 800af8a:	d808      	bhi.n	800af9e <_printf_i+0x7e>
 800af8c:	296f      	cmp	r1, #111	; 0x6f
 800af8e:	d020      	beq.n	800afd2 <_printf_i+0xb2>
 800af90:	2970      	cmp	r1, #112	; 0x70
 800af92:	d1dd      	bne.n	800af50 <_printf_i+0x30>
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	f043 0320 	orr.w	r3, r3, #32
 800af9a:	6023      	str	r3, [r4, #0]
 800af9c:	e003      	b.n	800afa6 <_printf_i+0x86>
 800af9e:	2975      	cmp	r1, #117	; 0x75
 800afa0:	d017      	beq.n	800afd2 <_printf_i+0xb2>
 800afa2:	2978      	cmp	r1, #120	; 0x78
 800afa4:	d1d4      	bne.n	800af50 <_printf_i+0x30>
 800afa6:	2378      	movs	r3, #120	; 0x78
 800afa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800afac:	4864      	ldr	r0, [pc, #400]	; (800b140 <_printf_i+0x220>)
 800afae:	e055      	b.n	800b05c <_printf_i+0x13c>
 800afb0:	6813      	ldr	r3, [r2, #0]
 800afb2:	1d19      	adds	r1, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6011      	str	r1, [r2, #0]
 800afb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afc0:	2301      	movs	r3, #1
 800afc2:	e08c      	b.n	800b0de <_printf_i+0x1be>
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6011      	str	r1, [r2, #0]
 800afc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afcc:	bf18      	it	ne
 800afce:	b21b      	sxthne	r3, r3
 800afd0:	e7cf      	b.n	800af72 <_printf_i+0x52>
 800afd2:	6813      	ldr	r3, [r2, #0]
 800afd4:	6825      	ldr	r5, [r4, #0]
 800afd6:	1d18      	adds	r0, r3, #4
 800afd8:	6010      	str	r0, [r2, #0]
 800afda:	0628      	lsls	r0, r5, #24
 800afdc:	d501      	bpl.n	800afe2 <_printf_i+0xc2>
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	e002      	b.n	800afe8 <_printf_i+0xc8>
 800afe2:	0668      	lsls	r0, r5, #25
 800afe4:	d5fb      	bpl.n	800afde <_printf_i+0xbe>
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	4854      	ldr	r0, [pc, #336]	; (800b13c <_printf_i+0x21c>)
 800afea:	296f      	cmp	r1, #111	; 0x6f
 800afec:	bf14      	ite	ne
 800afee:	220a      	movne	r2, #10
 800aff0:	2208      	moveq	r2, #8
 800aff2:	2100      	movs	r1, #0
 800aff4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aff8:	6865      	ldr	r5, [r4, #4]
 800affa:	60a5      	str	r5, [r4, #8]
 800affc:	2d00      	cmp	r5, #0
 800affe:	f2c0 8095 	blt.w	800b12c <_printf_i+0x20c>
 800b002:	6821      	ldr	r1, [r4, #0]
 800b004:	f021 0104 	bic.w	r1, r1, #4
 800b008:	6021      	str	r1, [r4, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d13d      	bne.n	800b08a <_printf_i+0x16a>
 800b00e:	2d00      	cmp	r5, #0
 800b010:	f040 808e 	bne.w	800b130 <_printf_i+0x210>
 800b014:	4665      	mov	r5, ip
 800b016:	2a08      	cmp	r2, #8
 800b018:	d10b      	bne.n	800b032 <_printf_i+0x112>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	07db      	lsls	r3, r3, #31
 800b01e:	d508      	bpl.n	800b032 <_printf_i+0x112>
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	6862      	ldr	r2, [r4, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	bfde      	ittt	le
 800b028:	2330      	movle	r3, #48	; 0x30
 800b02a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b02e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b032:	ebac 0305 	sub.w	r3, ip, r5
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	f8cd 8000 	str.w	r8, [sp]
 800b03c:	463b      	mov	r3, r7
 800b03e:	aa03      	add	r2, sp, #12
 800b040:	4621      	mov	r1, r4
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff fef6 	bl	800ae34 <_printf_common>
 800b048:	3001      	adds	r0, #1
 800b04a:	d14d      	bne.n	800b0e8 <_printf_i+0x1c8>
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	b005      	add	sp, #20
 800b052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b056:	4839      	ldr	r0, [pc, #228]	; (800b13c <_printf_i+0x21c>)
 800b058:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b05c:	6813      	ldr	r3, [r2, #0]
 800b05e:	6821      	ldr	r1, [r4, #0]
 800b060:	1d1d      	adds	r5, r3, #4
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6015      	str	r5, [r2, #0]
 800b066:	060a      	lsls	r2, r1, #24
 800b068:	d50b      	bpl.n	800b082 <_printf_i+0x162>
 800b06a:	07ca      	lsls	r2, r1, #31
 800b06c:	bf44      	itt	mi
 800b06e:	f041 0120 	orrmi.w	r1, r1, #32
 800b072:	6021      	strmi	r1, [r4, #0]
 800b074:	b91b      	cbnz	r3, 800b07e <_printf_i+0x15e>
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	f022 0220 	bic.w	r2, r2, #32
 800b07c:	6022      	str	r2, [r4, #0]
 800b07e:	2210      	movs	r2, #16
 800b080:	e7b7      	b.n	800aff2 <_printf_i+0xd2>
 800b082:	064d      	lsls	r5, r1, #25
 800b084:	bf48      	it	mi
 800b086:	b29b      	uxthmi	r3, r3
 800b088:	e7ef      	b.n	800b06a <_printf_i+0x14a>
 800b08a:	4665      	mov	r5, ip
 800b08c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b090:	fb02 3311 	mls	r3, r2, r1, r3
 800b094:	5cc3      	ldrb	r3, [r0, r3]
 800b096:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b09a:	460b      	mov	r3, r1
 800b09c:	2900      	cmp	r1, #0
 800b09e:	d1f5      	bne.n	800b08c <_printf_i+0x16c>
 800b0a0:	e7b9      	b.n	800b016 <_printf_i+0xf6>
 800b0a2:	6813      	ldr	r3, [r2, #0]
 800b0a4:	6825      	ldr	r5, [r4, #0]
 800b0a6:	6961      	ldr	r1, [r4, #20]
 800b0a8:	1d18      	adds	r0, r3, #4
 800b0aa:	6010      	str	r0, [r2, #0]
 800b0ac:	0628      	lsls	r0, r5, #24
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	d501      	bpl.n	800b0b6 <_printf_i+0x196>
 800b0b2:	6019      	str	r1, [r3, #0]
 800b0b4:	e002      	b.n	800b0bc <_printf_i+0x19c>
 800b0b6:	066a      	lsls	r2, r5, #25
 800b0b8:	d5fb      	bpl.n	800b0b2 <_printf_i+0x192>
 800b0ba:	8019      	strh	r1, [r3, #0]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6123      	str	r3, [r4, #16]
 800b0c0:	4665      	mov	r5, ip
 800b0c2:	e7b9      	b.n	800b038 <_printf_i+0x118>
 800b0c4:	6813      	ldr	r3, [r2, #0]
 800b0c6:	1d19      	adds	r1, r3, #4
 800b0c8:	6011      	str	r1, [r2, #0]
 800b0ca:	681d      	ldr	r5, [r3, #0]
 800b0cc:	6862      	ldr	r2, [r4, #4]
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f7f5 f9dd 	bl	8000490 <memchr>
 800b0d6:	b108      	cbz	r0, 800b0dc <_printf_i+0x1bc>
 800b0d8:	1b40      	subs	r0, r0, r5
 800b0da:	6060      	str	r0, [r4, #4]
 800b0dc:	6863      	ldr	r3, [r4, #4]
 800b0de:	6123      	str	r3, [r4, #16]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e6:	e7a7      	b.n	800b038 <_printf_i+0x118>
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	47c0      	blx	r8
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d0aa      	beq.n	800b04c <_printf_i+0x12c>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	079b      	lsls	r3, r3, #30
 800b0fa:	d413      	bmi.n	800b124 <_printf_i+0x204>
 800b0fc:	68e0      	ldr	r0, [r4, #12]
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	4298      	cmp	r0, r3
 800b102:	bfb8      	it	lt
 800b104:	4618      	movlt	r0, r3
 800b106:	e7a3      	b.n	800b050 <_printf_i+0x130>
 800b108:	2301      	movs	r3, #1
 800b10a:	464a      	mov	r2, r9
 800b10c:	4639      	mov	r1, r7
 800b10e:	4630      	mov	r0, r6
 800b110:	47c0      	blx	r8
 800b112:	3001      	adds	r0, #1
 800b114:	d09a      	beq.n	800b04c <_printf_i+0x12c>
 800b116:	3501      	adds	r5, #1
 800b118:	68e3      	ldr	r3, [r4, #12]
 800b11a:	9a03      	ldr	r2, [sp, #12]
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	42ab      	cmp	r3, r5
 800b120:	dcf2      	bgt.n	800b108 <_printf_i+0x1e8>
 800b122:	e7eb      	b.n	800b0fc <_printf_i+0x1dc>
 800b124:	2500      	movs	r5, #0
 800b126:	f104 0919 	add.w	r9, r4, #25
 800b12a:	e7f5      	b.n	800b118 <_printf_i+0x1f8>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1ac      	bne.n	800b08a <_printf_i+0x16a>
 800b130:	7803      	ldrb	r3, [r0, #0]
 800b132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b13a:	e76c      	b.n	800b016 <_printf_i+0xf6>
 800b13c:	0800b5ad 	.word	0x0800b5ad
 800b140:	0800b5be 	.word	0x0800b5be

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4c06      	ldr	r4, [pc, #24]	; (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4605      	mov	r5, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	f000 f8de 	bl	800b310 <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	200032bc 	.word	0x200032bc

0800b164 <__sread>:
 800b164:	b510      	push	{r4, lr}
 800b166:	460c      	mov	r4, r1
 800b168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16c:	f000 f896 	bl	800b29c <_read_r>
 800b170:	2800      	cmp	r0, #0
 800b172:	bfab      	itete	ge
 800b174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b176:	89a3      	ldrhlt	r3, [r4, #12]
 800b178:	181b      	addge	r3, r3, r0
 800b17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b17e:	bfac      	ite	ge
 800b180:	6563      	strge	r3, [r4, #84]	; 0x54
 800b182:	81a3      	strhlt	r3, [r4, #12]
 800b184:	bd10      	pop	{r4, pc}

0800b186 <__swrite>:
 800b186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18a:	461f      	mov	r7, r3
 800b18c:	898b      	ldrh	r3, [r1, #12]
 800b18e:	05db      	lsls	r3, r3, #23
 800b190:	4605      	mov	r5, r0
 800b192:	460c      	mov	r4, r1
 800b194:	4616      	mov	r6, r2
 800b196:	d505      	bpl.n	800b1a4 <__swrite+0x1e>
 800b198:	2302      	movs	r3, #2
 800b19a:	2200      	movs	r2, #0
 800b19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a0:	f000 f868 	bl	800b274 <_lseek_r>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	463b      	mov	r3, r7
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ba:	f000 b817 	b.w	800b1ec <_write_r>

0800b1be <__sseek>:
 800b1be:	b510      	push	{r4, lr}
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c6:	f000 f855 	bl	800b274 <_lseek_r>
 800b1ca:	1c43      	adds	r3, r0, #1
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	bf15      	itete	ne
 800b1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1da:	81a3      	strheq	r3, [r4, #12]
 800b1dc:	bf18      	it	ne
 800b1de:	81a3      	strhne	r3, [r4, #12]
 800b1e0:	bd10      	pop	{r4, pc}

0800b1e2 <__sclose>:
 800b1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e6:	f000 b813 	b.w	800b210 <_close_r>
	...

0800b1ec <_write_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4c07      	ldr	r4, [pc, #28]	; (800b20c <_write_r+0x20>)
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	4608      	mov	r0, r1
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	6022      	str	r2, [r4, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f7f5 fb8a 	bl	8000914 <_write>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_write_r+0x1e>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	b103      	cbz	r3, 800b20a <_write_r+0x1e>
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	200032bc 	.word	0x200032bc

0800b210 <_close_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4c06      	ldr	r4, [pc, #24]	; (800b22c <_close_r+0x1c>)
 800b214:	2300      	movs	r3, #0
 800b216:	4605      	mov	r5, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	6023      	str	r3, [r4, #0]
 800b21c:	f000 f850 	bl	800b2c0 <_close>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_close_r+0x1a>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	b103      	cbz	r3, 800b22a <_close_r+0x1a>
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	200032bc 	.word	0x200032bc

0800b230 <_fstat_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4c07      	ldr	r4, [pc, #28]	; (800b250 <_fstat_r+0x20>)
 800b234:	2300      	movs	r3, #0
 800b236:	4605      	mov	r5, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	4611      	mov	r1, r2
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	f000 f847 	bl	800b2d0 <_fstat>
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	d102      	bne.n	800b24c <_fstat_r+0x1c>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	b103      	cbz	r3, 800b24c <_fstat_r+0x1c>
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	bd38      	pop	{r3, r4, r5, pc}
 800b24e:	bf00      	nop
 800b250:	200032bc 	.word	0x200032bc

0800b254 <_isatty_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4c06      	ldr	r4, [pc, #24]	; (800b270 <_isatty_r+0x1c>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4605      	mov	r5, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	f000 f83e 	bl	800b2e0 <_isatty>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_isatty_r+0x1a>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_isatty_r+0x1a>
 800b26c:	602b      	str	r3, [r5, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	200032bc 	.word	0x200032bc

0800b274 <_lseek_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4c07      	ldr	r4, [pc, #28]	; (800b294 <_lseek_r+0x20>)
 800b278:	4605      	mov	r5, r0
 800b27a:	4608      	mov	r0, r1
 800b27c:	4611      	mov	r1, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	6022      	str	r2, [r4, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	f000 f834 	bl	800b2f0 <_lseek>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_lseek_r+0x1e>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_lseek_r+0x1e>
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	200032bc 	.word	0x200032bc

0800b298 <__malloc_lock>:
 800b298:	4770      	bx	lr

0800b29a <__malloc_unlock>:
 800b29a:	4770      	bx	lr

0800b29c <_read_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4c07      	ldr	r4, [pc, #28]	; (800b2bc <_read_r+0x20>)
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	6022      	str	r2, [r4, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f000 f828 	bl	800b300 <_read>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_read_r+0x1e>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_read_r+0x1e>
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	200032bc 	.word	0x200032bc

0800b2c0 <_close>:
 800b2c0:	4b02      	ldr	r3, [pc, #8]	; (800b2cc <_close+0xc>)
 800b2c2:	2258      	movs	r2, #88	; 0x58
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ca:	4770      	bx	lr
 800b2cc:	200032bc 	.word	0x200032bc

0800b2d0 <_fstat>:
 800b2d0:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <_fstat+0xc>)
 800b2d2:	2258      	movs	r2, #88	; 0x58
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2da:	4770      	bx	lr
 800b2dc:	200032bc 	.word	0x200032bc

0800b2e0 <_isatty>:
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <_isatty+0xc>)
 800b2e2:	2258      	movs	r2, #88	; 0x58
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	200032bc 	.word	0x200032bc

0800b2f0 <_lseek>:
 800b2f0:	4b02      	ldr	r3, [pc, #8]	; (800b2fc <_lseek+0xc>)
 800b2f2:	2258      	movs	r2, #88	; 0x58
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fa:	4770      	bx	lr
 800b2fc:	200032bc 	.word	0x200032bc

0800b300 <_read>:
 800b300:	4b02      	ldr	r3, [pc, #8]	; (800b30c <_read+0xc>)
 800b302:	2258      	movs	r2, #88	; 0x58
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	f04f 30ff 	mov.w	r0, #4294967295
 800b30a:	4770      	bx	lr
 800b30c:	200032bc 	.word	0x200032bc

0800b310 <_sbrk>:
 800b310:	4b04      	ldr	r3, [pc, #16]	; (800b324 <_sbrk+0x14>)
 800b312:	6819      	ldr	r1, [r3, #0]
 800b314:	4602      	mov	r2, r0
 800b316:	b909      	cbnz	r1, 800b31c <_sbrk+0xc>
 800b318:	4903      	ldr	r1, [pc, #12]	; (800b328 <_sbrk+0x18>)
 800b31a:	6019      	str	r1, [r3, #0]
 800b31c:	6818      	ldr	r0, [r3, #0]
 800b31e:	4402      	add	r2, r0
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	4770      	bx	lr
 800b324:	200002b8 	.word	0x200002b8
 800b328:	200032c0 	.word	0x200032c0

0800b32c <_init>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr

0800b338 <_fini>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	bf00      	nop
 800b33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33e:	bc08      	pop	{r3}
 800b340:	469e      	mov	lr, r3
 800b342:	4770      	bx	lr
