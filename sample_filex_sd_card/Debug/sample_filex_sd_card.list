
sample_filex_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b250  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b420  0800b420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f0  0800b4f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4f8  0800b4f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4fc  0800b4fc  0001b4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000411c  20000070  20000070  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000418c  2000418c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007d451  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000d726  00000000  00000000  0009d4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  000aac18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003538  00000000  00000000  000ac4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a159  00000000  00000000  000af9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000303a4  00000000  00000000  000e9b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00134ca5  00000000  00000000  00119edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0024eb82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  0024ec7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0001e1c7  00000000  00000000  00253124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b408 	.word	0x0800b408

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800b408 	.word	0x0800b408

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000212:	481d      	ldr	r0, [pc, #116]	; (8000288 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000214:	491d      	ldr	r1, [pc, #116]	; (800028c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000216:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800021a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000220:	491b      	ldr	r1, [pc, #108]	; (8000290 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000222:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000228:	4919      	ldr	r1, [pc, #100]	; (8000290 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800022a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000230:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000232:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000236:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000238:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800023c:	4917      	ldr	r1, [pc, #92]	; (800029c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800023e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000240:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000244:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000246:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800024a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800024e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000252:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000256:	4912      	ldr	r1, [pc, #72]	; (80002a0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000258:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800025c:	4770      	bx	lr

0800025e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_BadHandler>

08000262 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000262:	f7ff bffe 	b.w	8000262 <__tx_HardfaultHandler>

08000266 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000266:	f7ff bffe 	b.w	8000266 <__tx_SVCallHandler>

0800026a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800026c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000270:	4770      	bx	lr

08000272 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000272:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000274:	f000 f86c 	bl	8000350 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000278:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800027c:	4770      	bx	lr

0800027e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800027e:	f7ff bffe 	b.w	800027e <__tx_NMIHandler>

08000282 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000282:	f7ff bffe 	b.w	8000282 <__tx_DBGHandler>
 8000286:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000288:	20004170 	.word	0x20004170
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 800028c:	20004790 	.word	0x20004790
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000290:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000294:	20003bc0 	.word	0x20003bc0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000298:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800029c:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002a0:	40ff0000 	.word	0x40ff0000
	...

080002b0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002b0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002b4:	4a22      	ldr	r2, [pc, #136]	; (8000340 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002b6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002b8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002be:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002c2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002c6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002ca:	f3bf 8f6f 	isb	sy

080002ce <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002ce:	e7fe      	b.n	80002ce <__tx_wait_here>

080002d0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002d0:	481c      	ldr	r0, [pc, #112]	; (8000344 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002d4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002d8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002da:	b169      	cbz	r1, 80002f8 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002dc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002de:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 80002e2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80002e6:	4c19      	ldr	r4, [pc, #100]	; (800034c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 80002e8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 80002ec:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 80002ee:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 80002f2:	b10d      	cbz	r5, 80002f8 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80002f4:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 80002f6:	6023      	str	r3, [r4, #0]

080002f8 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80002f8:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80002fa:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 80002fc:	b189      	cbz	r1, 8000322 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80002fe:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000300:	b662      	cpsie	i

08000302 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000302:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000304:	4c11      	ldr	r4, [pc, #68]	; (800034c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000306:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000308:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800030c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800030e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000310:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000314:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800033c:	e7e1      	b.n	8000302 <__tx_ts_restore>
 800033e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000340:	20003bc4 	.word	0x20003bc4
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000344:	20003bc8 	.word	0x20003bc8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000348:	20003bcc 	.word	0x20003bcc
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800034c:	20003c60 	.word	0x20003c60

08000350 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000350:	4926      	ldr	r1, [pc, #152]	; (80003ec <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 8000352:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 8000354:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 8000358:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 800035c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 800035e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 8000360:	d008      	beq.n	8000374 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 8000362:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 8000366:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 8000368:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 800036a:	d103      	bne.n	8000374 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 800036e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 8000372:	6018      	str	r0, [r3, #0]

08000374 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000374:	4920      	ldr	r1, [pc, #128]	; (80003f8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 8000376:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 8000378:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 800037a:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 800037c:	d004      	beq.n	8000388 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 8000380:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 8000384:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 8000386:	e008      	b.n	800039a <__tx_timer_done>

08000388 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 8000388:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 800038e:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 8000390:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 8000392:	d101      	bne.n	8000398 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 8000396:	6818      	ldr	r0, [r3, #0]

08000398 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 8000398:	6008      	str	r0, [r1, #0]

0800039a <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 800039c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 800039e:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80003a0:	d103      	bne.n	80003aa <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80003a2:	4916      	ldr	r1, [pc, #88]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003a4:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80003a6:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80003a8:	d01c      	beq.n	80003e4 <__tx_timer_nothing_expired>

080003aa <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 80003aa:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 80003ae:	4913      	ldr	r1, [pc, #76]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003b0:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 80003b2:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 80003b4:	d001      	beq.n	80003ba <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 80003b6:	f00a ff9f 	bl	800b2f8 <_tx_timer_expiration_process>

080003ba <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 80003bc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 80003be:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 80003c0:	d00e      	beq.n	80003e0 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 80003c2:	f00a ff3f 	bl	800b244 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 80003c8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 80003ca:	b949      	cbnz	r1, 80003e0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 80003ce:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 80003d2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 80003d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 80003da:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 80003dc:	d000      	beq.n	80003e0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 80003de:	6002      	str	r2, [r0, #0]

080003e0 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 80003e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003e4 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 80003e4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 80003e8:	4770      	bx	lr
 80003ea:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003ec:	20004154 	.word	0x20004154
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003f0:	20003c60 	.word	0x20003c60
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003f4:	20004150 	.word	0x20004150
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003f8:	20003bd8 	.word	0x20003bd8
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003fc:	20003c5c 	.word	0x20003c5c
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000400:	20003c68 	.word	0x20003c68
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000404:	20003d3c 	.word	0x20003d3c
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000408:	20003bc4 	.word	0x20003bc4
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800040c:	20003bc8 	.word	0x20003bc8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000410:	20003bcc 	.word	0x20003bcc
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000414:	e000ed04 	.word	0xe000ed04
	...

08000420 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800042e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000440:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000442:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000444:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000448:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800044a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800044c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800044e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000452:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000458:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800045a:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 800045c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000460:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000462:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <__aeabi_uldivmod>:
 8000468:	b953      	cbnz	r3, 8000480 <__aeabi_uldivmod+0x18>
 800046a:	b94a      	cbnz	r2, 8000480 <__aeabi_uldivmod+0x18>
 800046c:	2900      	cmp	r1, #0
 800046e:	bf08      	it	eq
 8000470:	2800      	cmpeq	r0, #0
 8000472:	bf1c      	itt	ne
 8000474:	f04f 31ff 	movne.w	r1, #4294967295
 8000478:	f04f 30ff 	movne.w	r0, #4294967295
 800047c:	f000 b972 	b.w	8000764 <__aeabi_idiv0>
 8000480:	f1ad 0c08 	sub.w	ip, sp, #8
 8000484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000488:	f000 f806 	bl	8000498 <__udivmoddi4>
 800048c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr

08000498 <__udivmoddi4>:
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	9e08      	ldr	r6, [sp, #32]
 800049e:	4604      	mov	r4, r0
 80004a0:	4688      	mov	r8, r1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d14b      	bne.n	800053e <__udivmoddi4+0xa6>
 80004a6:	428a      	cmp	r2, r1
 80004a8:	4615      	mov	r5, r2
 80004aa:	d967      	bls.n	800057c <__udivmoddi4+0xe4>
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	b14a      	cbz	r2, 80004c6 <__udivmoddi4+0x2e>
 80004b2:	f1c2 0720 	rsb	r7, r2, #32
 80004b6:	fa01 f302 	lsl.w	r3, r1, r2
 80004ba:	fa20 f707 	lsr.w	r7, r0, r7
 80004be:	4095      	lsls	r5, r2
 80004c0:	ea47 0803 	orr.w	r8, r7, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	0c23      	lsrs	r3, r4, #16
 80004cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80004d0:	fa1f fc85 	uxth.w	ip, r5
 80004d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004dc:	fb07 f10c 	mul.w	r1, r7, ip
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d909      	bls.n	80004f8 <__udivmoddi4+0x60>
 80004e4:	18eb      	adds	r3, r5, r3
 80004e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ea:	f080 811b 	bcs.w	8000724 <__udivmoddi4+0x28c>
 80004ee:	4299      	cmp	r1, r3
 80004f0:	f240 8118 	bls.w	8000724 <__udivmoddi4+0x28c>
 80004f4:	3f02      	subs	r7, #2
 80004f6:	442b      	add	r3, r5
 80004f8:	1a5b      	subs	r3, r3, r1
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000500:	fb0e 3310 	mls	r3, lr, r0, r3
 8000504:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000508:	fb00 fc0c 	mul.w	ip, r0, ip
 800050c:	45a4      	cmp	ip, r4
 800050e:	d909      	bls.n	8000524 <__udivmoddi4+0x8c>
 8000510:	192c      	adds	r4, r5, r4
 8000512:	f100 33ff 	add.w	r3, r0, #4294967295
 8000516:	f080 8107 	bcs.w	8000728 <__udivmoddi4+0x290>
 800051a:	45a4      	cmp	ip, r4
 800051c:	f240 8104 	bls.w	8000728 <__udivmoddi4+0x290>
 8000520:	3802      	subs	r0, #2
 8000522:	442c      	add	r4, r5
 8000524:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000528:	eba4 040c 	sub.w	r4, r4, ip
 800052c:	2700      	movs	r7, #0
 800052e:	b11e      	cbz	r6, 8000538 <__udivmoddi4+0xa0>
 8000530:	40d4      	lsrs	r4, r2
 8000532:	2300      	movs	r3, #0
 8000534:	e9c6 4300 	strd	r4, r3, [r6]
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	428b      	cmp	r3, r1
 8000540:	d909      	bls.n	8000556 <__udivmoddi4+0xbe>
 8000542:	2e00      	cmp	r6, #0
 8000544:	f000 80eb 	beq.w	800071e <__udivmoddi4+0x286>
 8000548:	2700      	movs	r7, #0
 800054a:	e9c6 0100 	strd	r0, r1, [r6]
 800054e:	4638      	mov	r0, r7
 8000550:	4639      	mov	r1, r7
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	fab3 f783 	clz	r7, r3
 800055a:	2f00      	cmp	r7, #0
 800055c:	d147      	bne.n	80005ee <__udivmoddi4+0x156>
 800055e:	428b      	cmp	r3, r1
 8000560:	d302      	bcc.n	8000568 <__udivmoddi4+0xd0>
 8000562:	4282      	cmp	r2, r0
 8000564:	f200 80fa 	bhi.w	800075c <__udivmoddi4+0x2c4>
 8000568:	1a84      	subs	r4, r0, r2
 800056a:	eb61 0303 	sbc.w	r3, r1, r3
 800056e:	2001      	movs	r0, #1
 8000570:	4698      	mov	r8, r3
 8000572:	2e00      	cmp	r6, #0
 8000574:	d0e0      	beq.n	8000538 <__udivmoddi4+0xa0>
 8000576:	e9c6 4800 	strd	r4, r8, [r6]
 800057a:	e7dd      	b.n	8000538 <__udivmoddi4+0xa0>
 800057c:	b902      	cbnz	r2, 8000580 <__udivmoddi4+0xe8>
 800057e:	deff      	udf	#255	; 0xff
 8000580:	fab2 f282 	clz	r2, r2
 8000584:	2a00      	cmp	r2, #0
 8000586:	f040 808f 	bne.w	80006a8 <__udivmoddi4+0x210>
 800058a:	1b49      	subs	r1, r1, r5
 800058c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000590:	fa1f f885 	uxth.w	r8, r5
 8000594:	2701      	movs	r7, #1
 8000596:	fbb1 fcfe 	udiv	ip, r1, lr
 800059a:	0c23      	lsrs	r3, r4, #16
 800059c:	fb0e 111c 	mls	r1, lr, ip, r1
 80005a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a4:	fb08 f10c 	mul.w	r1, r8, ip
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d907      	bls.n	80005bc <__udivmoddi4+0x124>
 80005ac:	18eb      	adds	r3, r5, r3
 80005ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005b2:	d202      	bcs.n	80005ba <__udivmoddi4+0x122>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	f200 80cd 	bhi.w	8000754 <__udivmoddi4+0x2bc>
 80005ba:	4684      	mov	ip, r0
 80005bc:	1a59      	subs	r1, r3, r1
 80005be:	b2a3      	uxth	r3, r4
 80005c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80005c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005cc:	fb08 f800 	mul.w	r8, r8, r0
 80005d0:	45a0      	cmp	r8, r4
 80005d2:	d907      	bls.n	80005e4 <__udivmoddi4+0x14c>
 80005d4:	192c      	adds	r4, r5, r4
 80005d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005da:	d202      	bcs.n	80005e2 <__udivmoddi4+0x14a>
 80005dc:	45a0      	cmp	r8, r4
 80005de:	f200 80b6 	bhi.w	800074e <__udivmoddi4+0x2b6>
 80005e2:	4618      	mov	r0, r3
 80005e4:	eba4 0408 	sub.w	r4, r4, r8
 80005e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ec:	e79f      	b.n	800052e <__udivmoddi4+0x96>
 80005ee:	f1c7 0c20 	rsb	ip, r7, #32
 80005f2:	40bb      	lsls	r3, r7
 80005f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005fc:	fa01 f407 	lsl.w	r4, r1, r7
 8000600:	fa20 f50c 	lsr.w	r5, r0, ip
 8000604:	fa21 f30c 	lsr.w	r3, r1, ip
 8000608:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800060c:	4325      	orrs	r5, r4
 800060e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000612:	0c2c      	lsrs	r4, r5, #16
 8000614:	fb08 3319 	mls	r3, r8, r9, r3
 8000618:	fa1f fa8e 	uxth.w	sl, lr
 800061c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000620:	fb09 f40a 	mul.w	r4, r9, sl
 8000624:	429c      	cmp	r4, r3
 8000626:	fa02 f207 	lsl.w	r2, r2, r7
 800062a:	fa00 f107 	lsl.w	r1, r0, r7
 800062e:	d90b      	bls.n	8000648 <__udivmoddi4+0x1b0>
 8000630:	eb1e 0303 	adds.w	r3, lr, r3
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	f080 8087 	bcs.w	800074a <__udivmoddi4+0x2b2>
 800063c:	429c      	cmp	r4, r3
 800063e:	f240 8084 	bls.w	800074a <__udivmoddi4+0x2b2>
 8000642:	f1a9 0902 	sub.w	r9, r9, #2
 8000646:	4473      	add	r3, lr
 8000648:	1b1b      	subs	r3, r3, r4
 800064a:	b2ad      	uxth	r5, r5
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3310 	mls	r3, r8, r0, r3
 8000654:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000658:	fb00 fa0a 	mul.w	sl, r0, sl
 800065c:	45a2      	cmp	sl, r4
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x1da>
 8000660:	eb1e 0404 	adds.w	r4, lr, r4
 8000664:	f100 33ff 	add.w	r3, r0, #4294967295
 8000668:	d26b      	bcs.n	8000742 <__udivmoddi4+0x2aa>
 800066a:	45a2      	cmp	sl, r4
 800066c:	d969      	bls.n	8000742 <__udivmoddi4+0x2aa>
 800066e:	3802      	subs	r0, #2
 8000670:	4474      	add	r4, lr
 8000672:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	eba4 040a 	sub.w	r4, r4, sl
 800067e:	454c      	cmp	r4, r9
 8000680:	46c2      	mov	sl, r8
 8000682:	464b      	mov	r3, r9
 8000684:	d354      	bcc.n	8000730 <__udivmoddi4+0x298>
 8000686:	d051      	beq.n	800072c <__udivmoddi4+0x294>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d069      	beq.n	8000760 <__udivmoddi4+0x2c8>
 800068c:	ebb1 050a 	subs.w	r5, r1, sl
 8000690:	eb64 0403 	sbc.w	r4, r4, r3
 8000694:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000698:	40fd      	lsrs	r5, r7
 800069a:	40fc      	lsrs	r4, r7
 800069c:	ea4c 0505 	orr.w	r5, ip, r5
 80006a0:	e9c6 5400 	strd	r5, r4, [r6]
 80006a4:	2700      	movs	r7, #0
 80006a6:	e747      	b.n	8000538 <__udivmoddi4+0xa0>
 80006a8:	f1c2 0320 	rsb	r3, r2, #32
 80006ac:	fa20 f703 	lsr.w	r7, r0, r3
 80006b0:	4095      	lsls	r5, r2
 80006b2:	fa01 f002 	lsl.w	r0, r1, r2
 80006b6:	fa21 f303 	lsr.w	r3, r1, r3
 80006ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006be:	4338      	orrs	r0, r7
 80006c0:	0c01      	lsrs	r1, r0, #16
 80006c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80006c6:	fa1f f885 	uxth.w	r8, r5
 80006ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80006ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d2:	fb07 f308 	mul.w	r3, r7, r8
 80006d6:	428b      	cmp	r3, r1
 80006d8:	fa04 f402 	lsl.w	r4, r4, r2
 80006dc:	d907      	bls.n	80006ee <__udivmoddi4+0x256>
 80006de:	1869      	adds	r1, r5, r1
 80006e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006e4:	d22f      	bcs.n	8000746 <__udivmoddi4+0x2ae>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d92d      	bls.n	8000746 <__udivmoddi4+0x2ae>
 80006ea:	3f02      	subs	r7, #2
 80006ec:	4429      	add	r1, r5
 80006ee:	1acb      	subs	r3, r1, r3
 80006f0:	b281      	uxth	r1, r0
 80006f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006fe:	fb00 f308 	mul.w	r3, r0, r8
 8000702:	428b      	cmp	r3, r1
 8000704:	d907      	bls.n	8000716 <__udivmoddi4+0x27e>
 8000706:	1869      	adds	r1, r5, r1
 8000708:	f100 3cff 	add.w	ip, r0, #4294967295
 800070c:	d217      	bcs.n	800073e <__udivmoddi4+0x2a6>
 800070e:	428b      	cmp	r3, r1
 8000710:	d915      	bls.n	800073e <__udivmoddi4+0x2a6>
 8000712:	3802      	subs	r0, #2
 8000714:	4429      	add	r1, r5
 8000716:	1ac9      	subs	r1, r1, r3
 8000718:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800071c:	e73b      	b.n	8000596 <__udivmoddi4+0xfe>
 800071e:	4637      	mov	r7, r6
 8000720:	4630      	mov	r0, r6
 8000722:	e709      	b.n	8000538 <__udivmoddi4+0xa0>
 8000724:	4607      	mov	r7, r0
 8000726:	e6e7      	b.n	80004f8 <__udivmoddi4+0x60>
 8000728:	4618      	mov	r0, r3
 800072a:	e6fb      	b.n	8000524 <__udivmoddi4+0x8c>
 800072c:	4541      	cmp	r1, r8
 800072e:	d2ab      	bcs.n	8000688 <__udivmoddi4+0x1f0>
 8000730:	ebb8 0a02 	subs.w	sl, r8, r2
 8000734:	eb69 020e 	sbc.w	r2, r9, lr
 8000738:	3801      	subs	r0, #1
 800073a:	4613      	mov	r3, r2
 800073c:	e7a4      	b.n	8000688 <__udivmoddi4+0x1f0>
 800073e:	4660      	mov	r0, ip
 8000740:	e7e9      	b.n	8000716 <__udivmoddi4+0x27e>
 8000742:	4618      	mov	r0, r3
 8000744:	e795      	b.n	8000672 <__udivmoddi4+0x1da>
 8000746:	4667      	mov	r7, ip
 8000748:	e7d1      	b.n	80006ee <__udivmoddi4+0x256>
 800074a:	4681      	mov	r9, r0
 800074c:	e77c      	b.n	8000648 <__udivmoddi4+0x1b0>
 800074e:	3802      	subs	r0, #2
 8000750:	442c      	add	r4, r5
 8000752:	e747      	b.n	80005e4 <__udivmoddi4+0x14c>
 8000754:	f1ac 0c02 	sub.w	ip, ip, #2
 8000758:	442b      	add	r3, r5
 800075a:	e72f      	b.n	80005bc <__udivmoddi4+0x124>
 800075c:	4638      	mov	r0, r7
 800075e:	e708      	b.n	8000572 <__udivmoddi4+0xda>
 8000760:	4637      	mov	r7, r6
 8000762:	e6e9      	b.n	8000538 <__udivmoddi4+0xa0>

08000764 <__aeabi_idiv0>:
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SCB_EnableICache+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800077c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000780:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <SCB_EnableICache+0x3c>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <SCB_EnableICache+0x3c>)
 800078a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000794:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007c0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0b5b      	lsrs	r3, r3, #13
 80007c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ca:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007d4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	015a      	lsls	r2, r3, #5
 80007da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007e4:	490f      	ldr	r1, [pc, #60]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1ef      	bne.n	80007d6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	60fa      	str	r2, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1e5      	bne.n	80007cc <SCB_EnableDCache+0x24>
 8000800:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <SCB_EnableDCache+0x7c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <SCB_EnableDCache+0x7c>)
 800080a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000814:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <hardware_rand_initialize>:

	return len;
}

void hardware_rand_initialize(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <hardware_rand_initialize+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <hardware_rand_initialize+0x20>)
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <hardware_rand_initialize+0x24>)
 800083a:	2204      	movs	r2, #4
 800083c:	601a      	str	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023834 	.word	0x40023834
 800084c:	50060800 	.word	0x50060800

08000850 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a3c      	ldr	r2, [pc, #240]	; (8000960 <HAL_UART_MspInit+0x110>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d145      	bne.n	80008fe <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <HAL_UART_MspInit+0x114>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PB7     ------> USART1_RX
		 PA9     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ca:	2307      	movs	r3, #7
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4824      	ldr	r0, [pc, #144]	; (8000968 <HAL_UART_MspInit+0x118>)
 80008d6:	f006 fde7 	bl	80074a8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008de:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ec:	2307      	movs	r3, #7
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <HAL_UART_MspInit+0x11c>)
 80008f8:	f006 fdd6 	bl	80074a8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 80008fc:	e02c      	b.n	8000958 <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x120>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d127      	bne.n	8000958 <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_UART_MspInit+0x114>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <HAL_UART_MspInit+0x114>)
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	6453      	str	r3, [r2, #68]	; 0x44
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_UART_MspInit+0x114>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000948:	2308      	movs	r3, #8
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <HAL_UART_MspInit+0x124>)
 8000954:	f006 fda8 	bl	80074a8 <HAL_GPIO_Init>
}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40011000 	.word	0x40011000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40020000 	.word	0x40020000
 8000970:	40011400 	.word	0x40011400
 8000974:	40020800 	.word	0x40020800

08000978 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 8000980:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009bc:	f008 f92c 	bl	8008c18 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <MX_USART1_UART_Init+0x50>
	{
		while (1);
 80009c6:	e7fe      	b.n	80009c6 <MX_USART1_UART_Init+0x4e>
	}
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200001f8 	.word	0x200001f8
 80009d0:	40011000 	.word	0x40011000

080009d4 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b092      	sub	sp, #72	; 0x48
 80009d8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 80009f4:	2319      	movs	r3, #25
 80009f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 80009f8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a02:	2309      	movs	r3, #9
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a06:	463b      	mov	r3, r7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f006 fe95 	bl	8007738 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d000      	beq.n	8000a1e <SystemClock_Config+0x4a>
	{
		while (1)
 8000a1c:	e7fe      	b.n	8000a1c <SystemClock_Config+0x48>
			;
		}
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000a1e:	f006 fe4f 	bl	80076c0 <HAL_PWREx_EnableOverDrive>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d000      	beq.n	8000a32 <SystemClock_Config+0x5e>
	{
		while (1)
 8000a30:	e7fe      	b.n	8000a30 <SystemClock_Config+0x5c>
			;
		}
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000a32:	230f      	movs	r3, #15
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2302      	movs	r3, #2
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4e:	2107      	movs	r1, #7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f007 f86b 	bl	8007b2c <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d000      	beq.n	8000a66 <SystemClock_Config+0x92>
	{
		while (1)
 8000a64:	e7fe      	b.n	8000a64 <SystemClock_Config+0x90>
		{
			;
		}
	}
}
 8000a66:	bf00      	nop
 8000a68:	3748      	adds	r7, #72	; 0x48
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000a76:	f006 fabd 	bl	8006ff4 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MPU_Config+0x84>)
 8000a80:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000a82:	2311      	movs	r3, #17
 8000a84:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a86:	2303      	movs	r3, #3
 8000a88:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f006 fac5 	bl	8007038 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000ab2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ab6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000ab8:	2316      	movs	r3, #22
 8000aba:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000abc:	2303      	movs	r3, #3
 8000abe:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000adc:	463b      	mov	r3, r7
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f006 faaa 	bl	8007038 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f006 fa95 	bl	8007014 <HAL_MPU_Enable>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20010000 	.word	0x20010000

08000af8 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000afc:	f7ff fe34 	bl	8000768 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000b00:	f7ff fe52 	bl	80007a8 <SCB_EnableDCache>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <hardware_setup>:

void hardware_setup(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000b0c:	f7ff ffb0 	bl	8000a70 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000b10:	f7ff fff2 	bl	8000af8 <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000b14:	f006 f9e0 	bl	8006ed8 <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000b18:	f7ff ff5c 	bl	80009d4 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000b1c:	f006 f952 	bl	8006dc4 <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000b20:	f7ff ff2a 	bl	8000978 <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000b24:	f7ff fe80 	bl	8000828 <hardware_rand_initialize>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <main>:
ULONG           thread_0_counter;

VOID hardware_setup(void);

int main(int argc, char ** argv)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    /* Setup the hardware. */
    hardware_setup();
 8000b36:	f7ff ffe7 	bl	8000b08 <hardware_setup>
    
    /* Enter the ThreadX kernel.  */
    tx_kernel_enter();
 8000b3a:	f009 f95b 	bl	8009df4 <_tx_initialize_kernel_enter>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <tx_application_define>:


/* Define what the initial system looks like.  */

void    tx_application_define(void *first_unused_memory)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af08      	add	r7, sp, #32
 8000b4e:	6078      	str	r0, [r7, #4]

CHAR    *pointer;

    /* Put first available memory address into a character pointer.  */
    pointer =  (CHAR *) first_unused_memory;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60fb      	str	r3, [r7, #12]

    /* Put system definition stuff in here, e.g. thread creates and other assorted
       create information.  */

    /* Create the main thread.  */
    tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0,  
 8000b54:	23c8      	movs	r3, #200	; 0xc8
 8000b56:	9306      	str	r3, [sp, #24]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <tx_application_define+0x4c>)
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <tx_application_define+0x50>)
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <tx_application_define+0x54>)
 8000b7a:	f00a f809 	bl	800ab90 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);
    pointer = pointer + DEMO_STACK_SIZE;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000b84:	60fb      	str	r3, [r7, #12]

    /* Initialize FileX.  */
    fx_system_initialize();
 8000b86:	f000 faad 	bl	80010e4 <_fx_system_initialize>
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08000ba1 	.word	0x08000ba1
 8000b98:	0800b420 	.word	0x0800b420
 8000b9c:	20003918 	.word	0x20003918

08000ba0 <thread_0_entry>:



void    thread_0_entry(ULONG thread_input)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	; 0x40
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	6078      	str	r0, [r7, #4]
    /* Loop to repeat the demo over and over!  */
    do
    {

        /* Open the RAM disk.  */
        status =  fx_media_open(&sdio_disk, "STM32 SDIO DISK", _fx_stm32_sdio_driver, 0, media_memory, sizeof(media_memory));
 8000ba8:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8000bac:	9302      	str	r3, [sp, #8]
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <thread_0_entry+0xfc>)
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <thread_0_entry+0x100>)
 8000bbc:	4939      	ldr	r1, [pc, #228]	; (8000ca4 <thread_0_entry+0x104>)
 8000bbe:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <thread_0_entry+0x108>)
 8000bc0:	f000 fcbc 	bl	800153c <_fxe_media_open>
 8000bc4:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the media open status.  */
        if (status != FX_SUCCESS)
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d153      	bne.n	8000c74 <thread_0_entry+0xd4>
            /* Error, break the loop!  */
            break;
        }

        /* Create a file called TEST.TXT in the root directory.  */
        status =  fx_file_create(&sdio_disk, "TEST.TXT");
 8000bcc:	4937      	ldr	r1, [pc, #220]	; (8000cac <thread_0_entry+0x10c>)
 8000bce:	4836      	ldr	r0, [pc, #216]	; (8000ca8 <thread_0_entry+0x108>)
 8000bd0:	f000 fbce 	bl	8001370 <_fxe_file_create>
 8000bd4:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the create status.  */
        if (status != FX_SUCCESS)
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <thread_0_entry+0x42>
        {

            /* Check for an already created status. This is expected on the
               second pass of this loop!  */
            if (status != FX_ALREADY_CREATED)
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	2b0b      	cmp	r3, #11
 8000be0:	d14a      	bne.n	8000c78 <thread_0_entry+0xd8>
                break;
            }
        }

        /* Open the test file.  */
        status =  fx_file_open(&sdio_disk, &my_file, "TEST.TXT", FX_OPEN_FOR_WRITE);
 8000be2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <thread_0_entry+0x10c>)
 8000bec:	4930      	ldr	r1, [pc, #192]	; (8000cb0 <thread_0_entry+0x110>)
 8000bee:	482e      	ldr	r0, [pc, #184]	; (8000ca8 <thread_0_entry+0x108>)
 8000bf0:	f000 fbd8 	bl	80013a4 <_fxe_file_open>
 8000bf4:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file open status.  */
        if (status != FX_SUCCESS)
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d13f      	bne.n	8000c7c <thread_0_entry+0xdc>
            /* Error opening file, break the loop.  */
            break;
        }

        /* Seek to the beginning of the test file.  */
        status =  fx_file_seek(&my_file, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	482c      	ldr	r0, [pc, #176]	; (8000cb0 <thread_0_entry+0x110>)
 8000c00:	f000 fc48 	bl	8001494 <_fxe_file_seek>
 8000c04:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file seek status.  */
        if (status != FX_SUCCESS)
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d139      	bne.n	8000c80 <thread_0_entry+0xe0>
            /* Error performing file seek, break the loop.  */
            break;
        }

        /* Write a string to the test file.  */
        status =  fx_file_write(&my_file, " ABCDEFGHIJKLMNOPQRSTUVWXYZ\n", 28);
 8000c0c:	221c      	movs	r2, #28
 8000c0e:	4929      	ldr	r1, [pc, #164]	; (8000cb4 <thread_0_entry+0x114>)
 8000c10:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <thread_0_entry+0x110>)
 8000c12:	f000 fc59 	bl	80014c8 <_fxe_file_write>
 8000c16:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file write status.  */
        if (status != FX_SUCCESS)
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d132      	bne.n	8000c84 <thread_0_entry+0xe4>
            /* Error writing to a file, break the loop.  */
            break;
        }

        /* Seek to the beginning of the test file.  */
        status =  fx_file_seek(&my_file, 0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <thread_0_entry+0x110>)
 8000c22:	f000 fc37 	bl	8001494 <_fxe_file_seek>
 8000c26:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file seek status.  */
        if (status != FX_SUCCESS)
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d12c      	bne.n	8000c88 <thread_0_entry+0xe8>
            /* Error performing file seek, break the loop.  */
            break;
        }

        /* Read the first 28 bytes of the test file.  */
        status =  fx_file_read(&my_file, local_buffer, 28, &actual);
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	f107 0108 	add.w	r1, r7, #8
 8000c36:	221c      	movs	r2, #28
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <thread_0_entry+0x110>)
 8000c3a:	f000 fc07 	bl	800144c <_fxe_file_read>
 8000c3e:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file read status.  */
        if ((status != FX_SUCCESS) || (actual != 28))
 8000c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d126      	bne.n	8000c94 <thread_0_entry+0xf4>
 8000c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c48:	2b1c      	cmp	r3, #28
 8000c4a:	d123      	bne.n	8000c94 <thread_0_entry+0xf4>
            /* Error reading file, break the loop.  */
            break;
        }

        /* Close the test file.  */
        status =  fx_file_close(&my_file);
 8000c4c:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <thread_0_entry+0x110>)
 8000c4e:	f000 fb75 	bl	800133c <_fxe_file_close>
 8000c52:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file close status.  */
        if (status != FX_SUCCESS)
 8000c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d118      	bne.n	8000c8c <thread_0_entry+0xec>
            /* Error closing the file, break the loop.  */
            break;
        }

        /* Close the media.  */
        status =  fx_media_close(&sdio_disk);
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <thread_0_entry+0x108>)
 8000c5c:	f000 fc54 	bl	8001508 <_fxe_media_close>
 8000c60:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the media close status.  */
        if (status != FX_SUCCESS)
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d113      	bne.n	8000c90 <thread_0_entry+0xf0>
            break;
        }

        /* Increment the thread counter, which represents the number
           of successful passes through this loop.  */
        thread_0_counter++;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <thread_0_entry+0x118>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <thread_0_entry+0x118>)
 8000c70:	6013      	str	r3, [r2, #0]
        status =  fx_media_open(&sdio_disk, "STM32 SDIO DISK", _fx_stm32_sdio_driver, 0, media_memory, sizeof(media_memory));
 8000c72:	e799      	b.n	8000ba8 <thread_0_entry+0x8>
            break;
 8000c74:	bf00      	nop
 8000c76:	e00c      	b.n	8000c92 <thread_0_entry+0xf2>
                break;
 8000c78:	bf00      	nop
 8000c7a:	e00a      	b.n	8000c92 <thread_0_entry+0xf2>
            break;
 8000c7c:	bf00      	nop
 8000c7e:	e008      	b.n	8000c92 <thread_0_entry+0xf2>
            break;
 8000c80:	bf00      	nop
 8000c82:	e006      	b.n	8000c92 <thread_0_entry+0xf2>
            break;
 8000c84:	bf00      	nop
 8000c86:	e004      	b.n	8000c92 <thread_0_entry+0xf2>
            break;
 8000c88:	bf00      	nop
 8000c8a:	e002      	b.n	8000c92 <thread_0_entry+0xf2>
            break;
 8000c8c:	bf00      	nop
 8000c8e:	e000      	b.n	8000c92 <thread_0_entry+0xf2>
            break;
 8000c90:	bf00      	nop

    } while (1);

    /* If we get here the FileX test failed!  */
    return;
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
}
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000278 	.word	0x20000278
 8000ca0:	08000d55 	.word	0x08000d55
 8000ca4:	0800b42c 	.word	0x0800b42c
 8000ca8:	20001278 	.word	0x20001278
 8000cac:	0800b43c 	.word	0x0800b43c
 8000cb0:	20003738 	.word	0x20003738
 8000cb4:	0800b448 	.word	0x0800b448
 8000cb8:	20003730 	.word	0x20003730

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ce6:	f008 ff15 	bl	8009b14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cea:	f00a fb55 	bl	800b398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff ff1d 	bl	8000b2c <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d00:	0800b500 	.word	0x0800b500
  ldr r2, =_sbss
 8000d04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d08:	2000418c 	.word	0x2000418c

08000d0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>

08000d0e <HardFault_Handler>:
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler>

08000d10 <MemManage_Handler>:

MemManage_Handler:
  b MemManage_Handler
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler>

08000d12 <BusFault_Handler>:

BusFault_Handler:
  b BusFault_Handler
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler>

08000d14 <UsageFault_Handler>:

UsageFault_Handler:
  b UsageFault_Handler
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler>
	...

08000d18 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <DMA2_Stream3_IRQHandler+0x8>)
 8000d1a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000d1c:	f006 baec 	b.w	80072f8 <HAL_DMA_IRQHandler>
 8000d20:	20003a30 	.word	0x20003a30

08000d24 <DMA2_Stream6_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
   HAL_DMA_IRQHandler(uSdHandle.hdmatx); 
 8000d24:	4b01      	ldr	r3, [pc, #4]	; (8000d2c <DMA2_Stream6_IRQHandler+0x8>)
 8000d26:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000d28:	f006 bae6 	b.w	80072f8 <HAL_DMA_IRQHandler>
 8000d2c:	20003a30 	.word	0x20003a30

08000d30 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDIO_IRQHandler(void)
{
   HAL_SD_IRQHandler(&uSdHandle);
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <SDMMC1_IRQHandler+0x8>)
 8000d32:	f007 ba9f 	b.w	8008274 <HAL_SD_IRQHandler>
 8000d36:	bf00      	nop
 8000d38:	20003a30 	.word	0x20003a30

08000d3c <BSP_SD_WriteCpltCallback>:

void BSP_SD_WriteCpltCallback(void)
{
    
    /* Put semaphore for transfer completion.  */
    tx_semaphore_put(&semaphore_transfer);
 8000d3c:	4801      	ldr	r0, [pc, #4]	; (8000d44 <BSP_SD_WriteCpltCallback+0x8>)
 8000d3e:	f009 bf1b 	b.w	800ab78 <_txe_semaphore_put>
 8000d42:	bf00      	nop
 8000d44:	2000008c 	.word	0x2000008c

08000d48 <BSP_SD_ReadCpltCallback>:
 8000d48:	4801      	ldr	r0, [pc, #4]	; (8000d50 <BSP_SD_ReadCpltCallback+0x8>)
 8000d4a:	f009 bf15 	b.w	800ab78 <_txe_semaphore_put>
 8000d4e:	bf00      	nop
 8000d50:	2000008c 	.word	0x2000008c

08000d54 <_fx_stm32_sdio_driver>:
                                                    FX_DIRECTORY_SECTOR
                                                    FX_DATA_SECTOR  
    */

    /* Process the driver request specified in the media control block.  */
    switch(media_ptr -> fx_media_driver_request)
 8000d54:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	b085      	sub	sp, #20
    switch(media_ptr -> fx_media_driver_request)
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d832      	bhi.n	8000dc8 <_fx_stm32_sdio_driver+0x74>
 8000d62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000d66:	0009      	.short	0x0009
 8000d68:	01540159 	.word	0x01540159
 8000d6c:	01830154 	.word	0x01830154
 8000d70:	00310093 	.word	0x00310093
 8000d74:	01b00036 	.word	0x01b00036
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8000d78:	f005 ff52 	bl	8006c20 <BSP_SD_GetCardState>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d1fb      	bne.n	8000d78 <_fx_stm32_sdio_driver+0x24>
        {

            wait_transfer_ok();

            /* Invalidate cache before DMA read.  */
            SCB_CleanInvalidateDCache_by_Addr((uint32_t*)media_ptr -> fx_media_driver_buffer, media_ptr -> fx_media_driver_sectors * 512);
 8000d80:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
*/
__STATIC_INLINE void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
 8000d84:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d88:	0249      	lsls	r1, r1, #9
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8a:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	dd0a      	ble.n	8000da8 <_fx_stm32_sdio_driver+0x54>
 8000d92:	4411      	add	r1, r2
 8000d94:	f102 0320 	add.w	r3, r2, #32
      SCB->DCCIMVAC = op_addr;
 8000d98:	48ce      	ldr	r0, [pc, #824]	; (80010d4 <_fx_stm32_sdio_driver+0x380>)
    while (op_size > 0) {
 8000d9a:	428b      	cmp	r3, r1
      SCB->DCCIMVAC = op_addr;
 8000d9c:	f8c0 2270 	str.w	r2, [r0, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000da0:	461a      	mov	r2, r3
 8000da2:	f103 0320 	add.w	r3, r3, #32
    while (op_size > 0) {
 8000da6:	d1f8      	bne.n	8000d9a <_fx_stm32_sdio_driver+0x46>
 8000da8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dac:	f3bf 8f6f 	isb	sy

            /* Use the STM32 SDIO library to ready one or more sectors.  */
            SDIO_Status = BSP_SD_ReadBlocks_DMA((uint32_t*)media_ptr -> fx_media_driver_buffer,                                         /* Destination buffer  */
 8000db0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8000db4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000db6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8000dba:	4419      	add	r1, r3
 8000dbc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8000dc0:	f005 fdea 	bl	8006998 <BSP_SD_ReadBlocks_DMA>
                                                media_ptr -> fx_media_driver_logical_sector + media_ptr -> fx_media_hidden_sectors,     /* SD card address     */
                                                media_ptr -> fx_media_driver_sectors);                                                  /* Number of sectors   */

            /* Check status of SDIO Read.  */
            if (SDIO_Status == MSD_OK)
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d057      	beq.n	8000e78 <_fx_stm32_sdio_driver+0x124>

        default:
        {

            /* Invalid driver request.  */
            media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8000dc8:	2390      	movs	r3, #144	; 0x90
 8000dca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
            break;
        }
    }
}
 8000dce:	b005      	add	sp, #20
 8000dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8000dd2:	f005 ff25 	bl	8006c20 <BSP_SD_GetCardState>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d1fb      	bne.n	8000dd2 <_fx_stm32_sdio_driver+0x7e>
    uint32_t op_addr = (uint32_t) addr;
 8000dda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8000dde:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8000de2:	4abc      	ldr	r2, [pc, #752]	; (80010d4 <_fx_stm32_sdio_driver+0x380>)
      op_addr += (uint32_t)linesize;
 8000de4:	f103 0020 	add.w	r0, r3, #32
 8000de8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000dec:	f103 0660 	add.w	r6, r3, #96	; 0x60
      SCB->DCCMVAC = op_addr;
 8000df0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000df4:	f103 0580 	add.w	r5, r3, #128	; 0x80
      SCB->DCCMVAC = op_addr;
 8000df8:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000dfc:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
      SCB->DCCMVAC = op_addr;
 8000e00:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e04:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
      SCB->DCCMVAC = op_addr;
 8000e08:	f8c2 6268 	str.w	r6, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e0c:	f103 06e0 	add.w	r6, r3, #224	; 0xe0
      SCB->DCCMVAC = op_addr;
 8000e10:	f8c2 5268 	str.w	r5, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e14:	f503 7580 	add.w	r5, r3, #256	; 0x100
      SCB->DCCMVAC = op_addr;
 8000e18:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e1c:	f503 7090 	add.w	r0, r3, #288	; 0x120
      SCB->DCCMVAC = op_addr;
 8000e20:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e24:	f503 71a0 	add.w	r1, r3, #320	; 0x140
      SCB->DCCMVAC = op_addr;
 8000e28:	f8c2 6268 	str.w	r6, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e2c:	f503 76b0 	add.w	r6, r3, #352	; 0x160
      SCB->DCCMVAC = op_addr;
 8000e30:	f8c2 5268 	str.w	r5, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e34:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      SCB->DCCMVAC = op_addr;
 8000e38:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e3c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
      SCB->DCCMVAC = op_addr;
 8000e40:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e44:	f503 71e0 	add.w	r1, r3, #448	; 0x1c0
 8000e48:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
      SCB->DCCMVAC = op_addr;
 8000e4c:	f8c2 6268 	str.w	r6, [r2, #616]	; 0x268
 8000e50:	f8c2 5268 	str.w	r5, [r2, #616]	; 0x268
 8000e54:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
 8000e58:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
 8000e5c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 8000e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e64:	f3bf 8f6f 	isb	sy
            SDIO_Status = BSP_SD_WriteBlocks_DMA((uint32_t*)media_ptr -> fx_media_driver_buffer, media_ptr -> fx_media_hidden_sectors, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000e6c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8000e70:	f005 fda0 	bl	80069b4 <BSP_SD_WriteBlocks_DMA>
            if (SDIO_Status == MSD_OK)
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d1a7      	bne.n	8000dc8 <_fx_stm32_sdio_driver+0x74>
    tx_semaphore_get(&semaphore_transfer,TX_WAIT_FOREVER);
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	4896      	ldr	r0, [pc, #600]	; (80010d8 <_fx_stm32_sdio_driver+0x384>)
 8000e7e:	f009 fe5b 	bl	800ab38 <_txe_semaphore_get>
                media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8000e88:	b005      	add	sp, #20
 8000e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8000e8c:	f005 fec8 	bl	8006c20 <BSP_SD_GetCardState>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d1fb      	bne.n	8000e8c <_fx_stm32_sdio_driver+0x138>
    uint32_t op_addr = (uint32_t) addr;
 8000e94:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8000e98:	f3bf 8f4f 	dsb	sy
      SCB->DCCIMVAC = op_addr;
 8000e9c:	4a8d      	ldr	r2, [pc, #564]	; (80010d4 <_fx_stm32_sdio_driver+0x380>)
      op_addr += (uint32_t)linesize;
 8000e9e:	f103 0520 	add.w	r5, r3, #32
 8000ea2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000ea6:	f103 0760 	add.w	r7, r3, #96	; 0x60
      SCB->DCCIMVAC = op_addr;
 8000eaa:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000eae:	f103 0680 	add.w	r6, r3, #128	; 0x80
      SCB->DCCIMVAC = op_addr;
 8000eb2:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000eb6:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
      SCB->DCCIMVAC = op_addr;
 8000eba:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ebe:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
      SCB->DCCIMVAC = op_addr;
 8000ec2:	f8c2 7270 	str.w	r7, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ec6:	f103 07e0 	add.w	r7, r3, #224	; 0xe0
      SCB->DCCIMVAC = op_addr;
 8000eca:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ece:	f503 7680 	add.w	r6, r3, #256	; 0x100
      SCB->DCCIMVAC = op_addr;
 8000ed2:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ed6:	f503 7590 	add.w	r5, r3, #288	; 0x120
      SCB->DCCIMVAC = op_addr;
 8000eda:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ede:	f503 71a0 	add.w	r1, r3, #320	; 0x140
      SCB->DCCIMVAC = op_addr;
 8000ee2:	f8c2 7270 	str.w	r7, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ee6:	f503 77b0 	add.w	r7, r3, #352	; 0x160
      SCB->DCCIMVAC = op_addr;
 8000eea:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000eee:	f503 76c0 	add.w	r6, r3, #384	; 0x180
      SCB->DCCIMVAC = op_addr;
 8000ef2:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000ef6:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
      SCB->DCCIMVAC = op_addr;
 8000efa:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000efe:	f503 71e0 	add.w	r1, r3, #448	; 0x1c0
 8000f02:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
      SCB->DCCIMVAC = op_addr;
 8000f06:	f8c2 7270 	str.w	r7, [r2, #624]	; 0x270
 8000f0a:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
 8000f0e:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
 8000f12:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
 8000f16:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
 8000f1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f1e:	f3bf 8f6f 	isb	sy
            SDIO_Status = BSP_SD_ReadBlocks_DMA((uint32_t*)media_ptr -> fx_media_driver_buffer, 0, 1);
 8000f22:	2201      	movs	r2, #1
 8000f24:	4601      	mov	r1, r0
 8000f26:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8000f2a:	f005 fd35 	bl	8006998 <BSP_SD_ReadBlocks_DMA>
            if (SDIO_Status != MSD_OK)
 8000f2e:	4605      	mov	r5, r0
 8000f30:	2800      	cmp	r0, #0
 8000f32:	f47f af49 	bne.w	8000dc8 <_fx_stm32_sdio_driver+0x74>
    tx_semaphore_get(&semaphore_transfer,TX_WAIT_FOREVER);
 8000f36:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3a:	4867      	ldr	r0, [pc, #412]	; (80010d8 <_fx_stm32_sdio_driver+0x384>)
 8000f3c:	f009 fdfc 	bl	800ab38 <_txe_semaphore_get>
            status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8000f40:	4629      	mov	r1, r5
 8000f42:	ab02      	add	r3, sp, #8
 8000f44:	aa01      	add	r2, sp, #4
 8000f46:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
            partition_start =  0;
 8000f4a:	9501      	str	r5, [sp, #4]
            status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8000f4c:	f000 fb6e 	bl	800162c <_fx_partition_offset_calculate>
            if (status)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	f47f af39 	bne.w	8000dc8 <_fx_stm32_sdio_driver+0x74>
            if (partition_start)
 8000f56:	9b01      	ldr	r3, [sp, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d058      	beq.n	800100e <_fx_stm32_sdio_driver+0x2ba>
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8000f5c:	f005 fe60 	bl	8006c20 <BSP_SD_GetCardState>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d1fb      	bne.n	8000f5c <_fx_stm32_sdio_driver+0x208>
    uint32_t op_addr = (uint32_t) addr;
 8000f64:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8000f68:	f3bf 8f4f 	dsb	sy
      SCB->DCCIMVAC = op_addr;
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <_fx_stm32_sdio_driver+0x380>)
      op_addr += (uint32_t)linesize;
 8000f6e:	f103 0020 	add.w	r0, r3, #32
 8000f72:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000f76:	f103 0660 	add.w	r6, r3, #96	; 0x60
      SCB->DCCIMVAC = op_addr;
 8000f7a:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000f7e:	f103 0580 	add.w	r5, r3, #128	; 0x80
      SCB->DCCIMVAC = op_addr;
 8000f82:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000f86:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
      SCB->DCCIMVAC = op_addr;
 8000f8a:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000f8e:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
      SCB->DCCIMVAC = op_addr;
 8000f92:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000f96:	f103 06e0 	add.w	r6, r3, #224	; 0xe0
      SCB->DCCIMVAC = op_addr;
 8000f9a:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000f9e:	f503 7580 	add.w	r5, r3, #256	; 0x100
      SCB->DCCIMVAC = op_addr;
 8000fa2:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000fa6:	f503 7090 	add.w	r0, r3, #288	; 0x120
      SCB->DCCIMVAC = op_addr;
 8000faa:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000fae:	f503 71a0 	add.w	r1, r3, #320	; 0x140
      SCB->DCCIMVAC = op_addr;
 8000fb2:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000fb6:	f503 76b0 	add.w	r6, r3, #352	; 0x160
      SCB->DCCIMVAC = op_addr;
 8000fba:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000fbe:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      SCB->DCCIMVAC = op_addr;
 8000fc2:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000fc6:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
      SCB->DCCIMVAC = op_addr;
 8000fca:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000fce:	f503 71e0 	add.w	r1, r3, #448	; 0x1c0
 8000fd2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
      SCB->DCCIMVAC = op_addr;
 8000fd6:	f8c2 6270 	str.w	r6, [r2, #624]	; 0x270
 8000fda:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
 8000fde:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
 8000fe2:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
 8000fe6:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
 8000fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fee:	f3bf 8f6f 	isb	sy
                SDIO_Status = BSP_SD_ReadBlocks_DMA((uint32_t*)media_ptr -> fx_media_driver_buffer, partition_start , 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	9901      	ldr	r1, [sp, #4]
 8000ff6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8000ffa:	f005 fccd 	bl	8006998 <BSP_SD_ReadBlocks_DMA>
                if (SDIO_Status != MSD_OK)
 8000ffe:	2800      	cmp	r0, #0
 8001000:	f47f aee2 	bne.w	8000dc8 <_fx_stm32_sdio_driver+0x74>
    tx_semaphore_get(&semaphore_transfer,TX_WAIT_FOREVER);
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <_fx_stm32_sdio_driver+0x384>)
 800100a:	f009 fd95 	bl	800ab38 <_txe_semaphore_get>
            media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8001014:	b005      	add	sp, #20
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8001018:	f005 fe02 	bl	8006c20 <BSP_SD_GetCardState>
 800101c:	2800      	cmp	r0, #0
 800101e:	d1fb      	bne.n	8001018 <_fx_stm32_sdio_driver+0x2c4>
            SCB_CleanDCache_by_Addr((uint32_t*)media_ptr -> fx_media_driver_buffer, media_ptr -> fx_media_driver_sectors * 512);
 8001020:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    uint32_t op_addr = (uint32_t) addr;
 8001024:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001028:	0249      	lsls	r1, r1, #9
  __ASM volatile ("dsb 0xF":::"memory");
 800102a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800102e:	2900      	cmp	r1, #0
 8001030:	dd0a      	ble.n	8001048 <_fx_stm32_sdio_driver+0x2f4>
 8001032:	4411      	add	r1, r2
 8001034:	f102 0320 	add.w	r3, r2, #32
      SCB->DCCMVAC = op_addr;
 8001038:	4826      	ldr	r0, [pc, #152]	; (80010d4 <_fx_stm32_sdio_driver+0x380>)
    while (op_size > 0) {
 800103a:	428b      	cmp	r3, r1
      SCB->DCCMVAC = op_addr;
 800103c:	f8c0 2268 	str.w	r2, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001040:	461a      	mov	r2, r3
 8001042:	f103 0320 	add.w	r3, r3, #32
    while (op_size > 0) {
 8001046:	d1f8      	bne.n	800103a <_fx_stm32_sdio_driver+0x2e6>
 8001048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800104c:	f3bf 8f6f 	isb	sy
            SDIO_Status = BSP_SD_WriteBlocks_DMA((uint32_t*)media_ptr -> fx_media_driver_buffer,                                        /* Source buffer        */
 8001050:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8001054:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001056:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800105a:	4419      	add	r1, r3
 800105c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8001060:	f005 fca8 	bl	80069b4 <BSP_SD_WriteBlocks_DMA>
            if (SDIO_Status == MSD_OK)
 8001064:	2800      	cmp	r0, #0
 8001066:	f47f aeaf 	bne.w	8000dc8 <_fx_stm32_sdio_driver+0x74>
 800106a:	e705      	b.n	8000e78 <_fx_stm32_sdio_driver+0x124>
            if(tx_semaphore_create(&semaphore_transfer, "SD transfer semaphore", 0) != TX_SUCCESS)
 800106c:	2320      	movs	r3, #32
 800106e:	2200      	movs	r2, #0
 8001070:	491a      	ldr	r1, [pc, #104]	; (80010dc <_fx_stm32_sdio_driver+0x388>)
 8001072:	4819      	ldr	r0, [pc, #100]	; (80010d8 <_fx_stm32_sdio_driver+0x384>)
 8001074:	f009 fce8 	bl	800aa48 <_txe_semaphore_create>
 8001078:	4605      	mov	r5, r0
 800107a:	2800      	cmp	r0, #0
 800107c:	f47f aea4 	bne.w	8000dc8 <_fx_stm32_sdio_driver+0x74>
            __HAL_RCC_SDIO_CLK_ENABLE();
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <_fx_stm32_sdio_driver+0x38c>)
 8001082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
 800108a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001090:	9203      	str	r2, [sp, #12]
 8001092:	9a03      	ldr	r2, [sp, #12]
            __HAL_RCC_SDIO_FORCE_RESET();
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
            __HAL_RCC_SDIO_RELEASE_RESET();
 800109c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
            SDIO_Status = BSP_SD_Init();
 80010a4:	f005 fd7c 	bl	8006ba0 <BSP_SD_Init>
            HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0E, 0);
 80010a8:	462a      	mov	r2, r5
            SDIO_Status = BSP_SD_Init();
 80010aa:	4606      	mov	r6, r0
            HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0E, 0);
 80010ac:	210e      	movs	r1, #14
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f005 ff5c 	bl	8006f6c <HAL_NVIC_SetPriority>
            HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0E, 0);
 80010b4:	462a      	mov	r2, r5
 80010b6:	210e      	movs	r1, #14
 80010b8:	2045      	movs	r0, #69	; 0x45
 80010ba:	f005 ff57 	bl	8006f6c <HAL_NVIC_SetPriority>
            if (SDIO_Status == MSD_OK)
 80010be:	2e00      	cmp	r6, #0
 80010c0:	f47f ae82 	bne.w	8000dc8 <_fx_stm32_sdio_driver+0x74>
 80010c4:	e7a3      	b.n	800100e <_fx_stm32_sdio_driver+0x2ba>
            tx_semaphore_delete(&semaphore_transfer);
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <_fx_stm32_sdio_driver+0x384>)
 80010c8:	f009 fd18 	bl	800aafc <_txe_semaphore_delete>
            media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80010d2:	e79f      	b.n	8001014 <_fx_stm32_sdio_driver+0x2c0>
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	0800b468 	.word	0x0800b468
 80010e0:	40023800 	.word	0x40023800

080010e4 <_fx_system_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 80010e4:	b570      	push	{r4, r5, r6, lr}
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 80010e6:	2300      	movs	r3, #0
{
 80010e8:	b084      	sub	sp, #16
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80010ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ee:	2001      	movs	r0, #1
    _fx_system_media_opened_ptr =       FX_NULL;
 80010f0:	4917      	ldr	r1, [pc, #92]	; (8001150 <_fx_system_initialize+0x6c>)
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 80010f2:	2510      	movs	r5, #16
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80010f4:	9002      	str	r0, [sp, #8]
    _fx_system_date =   FX_INITIAL_DATE;
 80010f6:	f644 2621 	movw	r6, #18977	; 0x4a21
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80010fa:	9201      	str	r2, [sp, #4]
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 80010fc:	f44f 7080 	mov.w	r0, #256	; 0x100
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8001100:	9200      	str	r2, [sp, #0]
    _fx_system_media_opened_count =     0;
 8001102:	4c14      	ldr	r4, [pc, #80]	; (8001154 <_fx_system_initialize+0x70>)
    _fx_system_media_opened_ptr =       FX_NULL;
 8001104:	600b      	str	r3, [r1, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8001106:	4914      	ldr	r1, [pc, #80]	; (8001158 <_fx_system_initialize+0x74>)
    _fx_system_media_opened_count =     0;
 8001108:	6023      	str	r3, [r4, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800110a:	600b      	str	r3, [r1, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800110c:	f103 438e 	add.w	r3, r3, #1191182336	; 0x47000000
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8001110:	4c12      	ldr	r4, [pc, #72]	; (800115c <_fx_system_initialize+0x78>)
    _fx_system_date =   FX_INITIAL_DATE;
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <_fx_system_initialize+0x7c>)
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8001114:	f1a3 13a7 	sub.w	r3, r3, #10944679	; 0xa700a7
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8001118:	4912      	ldr	r1, [pc, #72]	; (8001164 <_fx_system_initialize+0x80>)
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800111a:	6025      	str	r5, [r4, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800111c:	f5a3 432c 	sub.w	r3, r3, #44032	; 0xac00
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8001120:	4d11      	ldr	r5, [pc, #68]	; (8001168 <_fx_system_initialize+0x84>)
    _fx_system_date =   FX_INITIAL_DATE;
 8001122:	6016      	str	r6, [r2, #0]
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8001124:	6008      	str	r0, [r1, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <_fx_system_initialize+0x88>)
 8001128:	4911      	ldr	r1, [pc, #68]	; (8001170 <_fx_system_initialize+0x8c>)
 800112a:	4812      	ldr	r0, [pc, #72]	; (8001174 <_fx_system_initialize+0x90>)
 800112c:	f009 fb04 	bl	800a738 <_tx_timer_create>
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8001130:	4c11      	ldr	r4, [pc, #68]	; (8001178 <_fx_system_initialize+0x94>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8001132:	682a      	ldr	r2, [r5, #0]
 8001134:	4911      	ldr	r1, [pc, #68]	; (800117c <_fx_system_initialize+0x98>)
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8001136:	6823      	ldr	r3, [r4, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <_fx_system_initialize+0x9c>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800113a:	4311      	orrs	r1, r2
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <_fx_system_initialize+0xa0>)
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800113e:	6806      	ldr	r6, [r0, #0]
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8001140:	431a      	orrs	r2, r3
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_fx_system_initialize+0xa4>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8001144:	6029      	str	r1, [r5, #0]
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8001146:	4333      	orrs	r3, r6
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8001148:	6022      	str	r2, [r4, #0]
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800114a:	6003      	str	r3, [r0, #0]
    }
}
 800114c:	b004      	add	sp, #16
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	20003a20 	.word	0x20003a20
 8001154:	20003a18 	.word	0x20003a18
 8001158:	20003a2c 	.word	0x20003a2c
 800115c:	20003a1c 	.word	0x20003a1c
 8001160:	20003a14 	.word	0x20003a14
 8001164:	20003a10 	.word	0x20003a10
 8001168:	20003a24 	.word	0x20003a24
 800116c:	0800118d 	.word	0x0800118d
 8001170:	0800b480 	.word	0x0800b480
 8001174:	200039e4 	.word	0x200039e4
 8001178:	200039e0 	.word	0x200039e0
 800117c:	ffff0000 	.word	0xffff0000
 8001180:	20003a28 	.word	0x20003a28
 8001184:	01008010 	.word	0x01008010
 8001188:	000a03e8 	.word	0x000a03e8

0800118c <_fx_system_timer_entry>:
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800118c:	4b67      	ldr	r3, [pc, #412]	; (800132c <_fx_system_timer_entry+0x1a0>)
 800118e:	4298      	cmp	r0, r3
 8001190:	d000      	beq.n	8001194 <_fx_system_timer_entry+0x8>
 8001192:	4770      	bx	lr
{
 8001194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8001198:	4d65      	ldr	r5, [pc, #404]	; (8001330 <_fx_system_timer_entry+0x1a4>)
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
        day =     _fx_system_date & FX_DAY_MASK;
 800119a:	4e66      	ldr	r6, [pc, #408]	; (8001334 <_fx_system_timer_entry+0x1a8>)
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800119c:	6829      	ldr	r1, [r5, #0]
        day =     _fx_system_date & FX_DAY_MASK;
 800119e:	6834      	ldr	r4, [r6, #0]
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80011a0:	f001 001f 	and.w	r0, r1, #31
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 80011a4:	f3c1 1745 	ubfx	r7, r1, #5, #6
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 80011a8:	f3c4 2e46 	ubfx	lr, r4, #9, #7
        day =     _fx_system_date & FX_DAY_MASK;
 80011ac:	f004 021f 	and.w	r2, r4, #31
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80011b0:	0040      	lsls	r0, r0, #1
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 80011b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 80011b6:	f20e 7cbc 	addw	ip, lr, #1980	; 0x7bc
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 80011ba:	f3c4 1443 	ubfx	r4, r4, #5, #4

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 80011be:	f100 030a 	add.w	r3, r0, #10

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 80011c2:	2b3b      	cmp	r3, #59	; 0x3b
 80011c4:	d80e      	bhi.n	80011e4 <_fx_system_timer_entry+0x58>
 80011c6:	02c9      	lsls	r1, r1, #11
 80011c8:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
                            (month << FX_MONTH_SHIFT) | day;

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80011cc:	085b      	lsrs	r3, r3, #1
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80011ce:	f2ac 7cbc 	subw	ip, ip, #1980	; 0x7bc
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80011d2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
                            (month << FX_MONTH_SHIFT) | day;
 80011d6:	ea42 224c 	orr.w	r2, r2, ip, lsl #9
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80011da:	430b      	orrs	r3, r1
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80011dc:	6032      	str	r2, [r6, #0]
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80011de:	602b      	str	r3, [r5, #0]
    }
}
 80011e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            second =  second % 60;
 80011e4:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001338 <_fx_system_timer_entry+0x1ac>
            minute =  minute + second / 60;
 80011e8:	3701      	adds	r7, #1
            second =  second % 60;
 80011ea:	fba8 9003 	umull	r9, r0, r8, r3
            if (minute > FX_MAXIMUM_MINUTE)
 80011ee:	2f3b      	cmp	r7, #59	; 0x3b
            second =  second % 60;
 80011f0:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80011f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80011f8:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
            if (minute > FX_MAXIMUM_MINUTE)
 80011fc:	d9e3      	bls.n	80011c6 <_fx_system_timer_entry+0x3a>
                minute =  minute % 60;
 80011fe:	fba8 0807 	umull	r0, r8, r8, r7
                hour =    hour + minute / 60;
 8001202:	3101      	adds	r1, #1
                minute =  minute % 60;
 8001204:	ea4f 1858 	mov.w	r8, r8, lsr #5
                if (hour > FX_MAXIMUM_HOUR)
 8001208:	2917      	cmp	r1, #23
                minute =  minute % 60;
 800120a:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800120e:	eba7 0788 	sub.w	r7, r7, r8, lsl #2
                if (hour > FX_MAXIMUM_HOUR)
 8001212:	d9d8      	bls.n	80011c6 <_fx_system_timer_entry+0x3a>
                    switch (month)
 8001214:	3c01      	subs	r4, #1
                    day++;
 8001216:	3201      	adds	r2, #1
                    switch (month)
 8001218:	2c0b      	cmp	r4, #11
 800121a:	d8e1      	bhi.n	80011e0 <_fx_system_timer_entry+0x54>
 800121c:	e8df f004 	tbb	[pc, r4]
 8001220:	243e304a 	.word	0x243e304a
 8001224:	1e382a44 	.word	0x1e382a44
 8001228:	060c1218 	.word	0x060c1218
                        if (day > 31)
 800122c:	2a20      	cmp	r2, #32
 800122e:	d04b      	beq.n	80012c8 <_fx_system_timer_entry+0x13c>
 8001230:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8001234:	2100      	movs	r1, #0
 8001236:	e7c9      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8001238:	2a1e      	cmp	r2, #30
 800123a:	d841      	bhi.n	80012c0 <_fx_system_timer_entry+0x134>
 800123c:	f442 72b0 	orr.w	r2, r2, #352	; 0x160
 8001240:	2100      	movs	r1, #0
 8001242:	e7c3      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8001244:	2a20      	cmp	r2, #32
 8001246:	d04b      	beq.n	80012e0 <_fx_system_timer_entry+0x154>
 8001248:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 800124c:	2100      	movs	r1, #0
 800124e:	e7bd      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8001250:	2a1e      	cmp	r2, #30
 8001252:	d841      	bhi.n	80012d8 <_fx_system_timer_entry+0x14c>
 8001254:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001258:	2100      	movs	r1, #0
 800125a:	e7b7      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 31)
 800125c:	2a20      	cmp	r2, #32
 800125e:	d052      	beq.n	8001306 <_fx_system_timer_entry+0x17a>
 8001260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001264:	2100      	movs	r1, #0
 8001266:	e7b1      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8001268:	2a1e      	cmp	r2, #30
 800126a:	d846      	bhi.n	80012fa <_fx_system_timer_entry+0x16e>
 800126c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001270:	2100      	movs	r1, #0
 8001272:	e7ab      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8001274:	2a1e      	cmp	r2, #30
 8001276:	d84e      	bhi.n	8001316 <_fx_system_timer_entry+0x18a>
 8001278:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800127c:	2100      	movs	r1, #0
 800127e:	e7a5      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if ((year % 4) == 0)
 8001280:	f01c 0103 	ands.w	r1, ip, #3
 8001284:	d133      	bne.n	80012ee <_fx_system_timer_entry+0x162>
                            if (day > 29)
 8001286:	2a1d      	cmp	r2, #29
 8001288:	d84b      	bhi.n	8001322 <_fx_system_timer_entry+0x196>
 800128a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800128e:	e79d      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8001290:	2a20      	cmp	r2, #32
 8001292:	d03c      	beq.n	800130e <_fx_system_timer_entry+0x182>
 8001294:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001298:	2100      	movs	r1, #0
 800129a:	e797      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 31)
 800129c:	2a20      	cmp	r2, #32
 800129e:	d02f      	beq.n	8001300 <_fx_system_timer_entry+0x174>
 80012a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80012a4:	2100      	movs	r1, #0
 80012a6:	e791      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 31)
 80012a8:	2a20      	cmp	r2, #32
 80012aa:	d037      	beq.n	800131c <_fx_system_timer_entry+0x190>
 80012ac:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80012b0:	2100      	movs	r1, #0
 80012b2:	e78b      	b.n	80011cc <_fx_system_timer_entry+0x40>
                        if (day > 31)
 80012b4:	2a20      	cmp	r2, #32
 80012b6:	d017      	beq.n	80012e8 <_fx_system_timer_entry+0x15c>
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	2100      	movs	r1, #0
 80012be:	e785      	b.n	80011cc <_fx_system_timer_entry+0x40>
 80012c0:	f240 1281 	movw	r2, #385	; 0x181
 80012c4:	2100      	movs	r1, #0
 80012c6:	e781      	b.n	80011cc <_fx_system_timer_entry+0x40>
                            if (year > FX_MAXIMUM_YEAR)
 80012c8:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 80012cc:	f20e 7cbd 	addw	ip, lr, #1981	; 0x7bd
 80012d0:	d086      	beq.n	80011e0 <_fx_system_timer_entry+0x54>
 80012d2:	2221      	movs	r2, #33	; 0x21
 80012d4:	2100      	movs	r1, #0
 80012d6:	e779      	b.n	80011cc <_fx_system_timer_entry+0x40>
 80012d8:	f240 1241 	movw	r2, #321	; 0x141
 80012dc:	2100      	movs	r1, #0
 80012de:	e775      	b.n	80011cc <_fx_system_timer_entry+0x40>
 80012e0:	f240 1261 	movw	r2, #353	; 0x161
 80012e4:	2100      	movs	r1, #0
 80012e6:	e771      	b.n	80011cc <_fx_system_timer_entry+0x40>
 80012e8:	2241      	movs	r2, #65	; 0x41
 80012ea:	2100      	movs	r1, #0
 80012ec:	e76e      	b.n	80011cc <_fx_system_timer_entry+0x40>
                            if (day > 28)
 80012ee:	2a1c      	cmp	r2, #28
 80012f0:	d819      	bhi.n	8001326 <_fx_system_timer_entry+0x19a>
 80012f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012f6:	2100      	movs	r1, #0
 80012f8:	e768      	b.n	80011cc <_fx_system_timer_entry+0x40>
 80012fa:	22a1      	movs	r2, #161	; 0xa1
 80012fc:	2100      	movs	r1, #0
 80012fe:	e765      	b.n	80011cc <_fx_system_timer_entry+0x40>
 8001300:	2281      	movs	r2, #129	; 0x81
 8001302:	2100      	movs	r1, #0
 8001304:	e762      	b.n	80011cc <_fx_system_timer_entry+0x40>
 8001306:	f240 1221 	movw	r2, #289	; 0x121
 800130a:	2100      	movs	r1, #0
 800130c:	e75e      	b.n	80011cc <_fx_system_timer_entry+0x40>
 800130e:	f240 1201 	movw	r2, #257	; 0x101
 8001312:	2100      	movs	r1, #0
 8001314:	e75a      	b.n	80011cc <_fx_system_timer_entry+0x40>
 8001316:	22e1      	movs	r2, #225	; 0xe1
 8001318:	2100      	movs	r1, #0
 800131a:	e757      	b.n	80011cc <_fx_system_timer_entry+0x40>
 800131c:	22c1      	movs	r2, #193	; 0xc1
 800131e:	2100      	movs	r1, #0
 8001320:	e754      	b.n	80011cc <_fx_system_timer_entry+0x40>
 8001322:	2261      	movs	r2, #97	; 0x61
 8001324:	e752      	b.n	80011cc <_fx_system_timer_entry+0x40>
 8001326:	2261      	movs	r2, #97	; 0x61
 8001328:	2100      	movs	r1, #0
 800132a:	e74f      	b.n	80011cc <_fx_system_timer_entry+0x40>
 800132c:	46585359 	.word	0x46585359
 8001330:	20003a2c 	.word	0x20003a2c
 8001334:	20003a14 	.word	0x20003a14
 8001338:	88888889 	.word	0x88888889

0800133c <_fxe_file_close>:

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 800133c:	b178      	cbz	r0, 800135e <_fxe_file_close+0x22>
__attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
{

unsigned int  ipsr_value;

    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800133e:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <_fxe_file_close+0x28>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	4313      	orrs	r3, r2
 8001348:	d107      	bne.n	800135a <_fxe_file_close+0x1e>
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_fxe_file_close+0x2c>)
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <_fxe_file_close+0x30>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4293      	cmp	r3, r2
 8001352:	d002      	beq.n	800135a <_fxe_file_close+0x1e>
 8001354:	b10b      	cbz	r3, 800135a <_fxe_file_close+0x1e>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8001356:	f000 ba75 	b.w	8001844 <_fx_file_close>
    FX_CALLER_CHECKING_CODE
 800135a:	2020      	movs	r0, #32

    /* Return status to the caller.  */
    return(status);
}
 800135c:	4770      	bx	lr
        return(FX_PTR_ERROR);
 800135e:	2018      	movs	r0, #24
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000006c 	.word	0x2000006c
 8001368:	20003bc8 	.word	0x20003bc8
 800136c:	20003c70 	.word	0x20003c70

08001370 <_fxe_file_create>:

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8001370:	b178      	cbz	r0, 8001392 <_fxe_file_create+0x22>
 8001372:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <_fxe_file_create+0x28>)
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	4313      	orrs	r3, r2
 800137c:	d107      	bne.n	800138e <_fxe_file_create+0x1e>
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_fxe_file_create+0x2c>)
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <_fxe_file_create+0x30>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4293      	cmp	r3, r2
 8001386:	d002      	beq.n	800138e <_fxe_file_create+0x1e>
 8001388:	b10b      	cbz	r3, 800138e <_fxe_file_create+0x1e>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 800138a:	f000 bac9 	b.w	8001920 <_fx_file_create>
    FX_CALLER_CHECKING_CODE
 800138e:	2020      	movs	r0, #32

    /* File create is complete, return status.  */
    return(status);
}
 8001390:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8001392:	2018      	movs	r0, #24
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000006c 	.word	0x2000006c
 800139c:	20003bc8 	.word	0x20003bc8
 80013a0:	20003c70 	.word	0x20003c70

080013a4 <_fxe_file_open>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 80013a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a8:	9e06      	ldr	r6, [sp, #24]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 80013aa:	b388      	cbz	r0, 8001410 <_fxe_file_open+0x6c>
 80013ac:	4c23      	ldr	r4, [pc, #140]	; (800143c <_fxe_file_open+0x98>)
 80013ae:	6805      	ldr	r5, [r0, #0]
 80013b0:	42a5      	cmp	r5, r4
 80013b2:	d12d      	bne.n	8001410 <_fxe_file_open+0x6c>
 80013b4:	b361      	cbz	r1, 8001410 <_fxe_file_open+0x6c>
 80013b6:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 80013ba:	d129      	bne.n	8001410 <_fxe_file_open+0x6c>
    {
        return(FX_PTR_ERROR);
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d82d      	bhi.n	800141c <_fxe_file_open+0x78>
 80013c0:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_ACCESS_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80013c4:	4d1e      	ldr	r5, [pc, #120]	; (8001440 <_fxe_file_open+0x9c>)
 80013c6:	682d      	ldr	r5, [r5, #0]
 80013c8:	432c      	orrs	r4, r5
 80013ca:	d124      	bne.n	8001416 <_fxe_file_open+0x72>
 80013cc:	4c1d      	ldr	r4, [pc, #116]	; (8001444 <_fxe_file_open+0xa0>)
 80013ce:	4d1e      	ldr	r5, [pc, #120]	; (8001448 <_fxe_file_open+0xa4>)
 80013d0:	6824      	ldr	r4, [r4, #0]
 80013d2:	42ac      	cmp	r4, r5
 80013d4:	d01f      	beq.n	8001416 <_fxe_file_open+0x72>
 80013d6:	b1f4      	cbz	r4, 8001416 <_fxe_file_open+0x72>

    /* Get protection.  */
    FX_PROTECT
 80013d8:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 80013dc:	4604      	mov	r4, r0
 80013de:	460d      	mov	r5, r1
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	4630      	mov	r0, r6
 80013e6:	461f      	mov	r7, r3
 80013e8:	4690      	mov	r8, r2
 80013ea:	f008 fdb1 	bl	8009f50 <_tx_mutex_get>
 80013ee:	bb10      	cbnz	r0, 8001436 <_fxe_file_open+0x92>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 80013f0:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
    open_count =    media_ptr -> fx_media_opened_file_count;

    while (open_count--)
 80013f4:	1e51      	subs	r1, r2, #1
 80013f6:	b922      	cbnz	r2, 8001402 <_fxe_file_open+0x5e>
 80013f8:	e012      	b.n	8001420 <_fxe_file_open+0x7c>
 80013fa:	3901      	subs	r1, #1
            /* Return error.  */
            return(FX_PTR_ERROR);
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    while (open_count--)
 80013fe:	1c4a      	adds	r2, r1, #1
 8001400:	d00e      	beq.n	8001420 <_fxe_file_open+0x7c>
        if (file_ptr == current_file)
 8001402:	429d      	cmp	r5, r3
 8001404:	d1f9      	bne.n	80013fa <_fxe_file_open+0x56>
            FX_UNPROTECT
 8001406:	4630      	mov	r0, r6
 8001408:	f008 fe8c 	bl	800a124 <_tx_mutex_put>
            return(FX_PTR_ERROR);
 800140c:	2018      	movs	r0, #24
 800140e:	e000      	b.n	8001412 <_fxe_file_open+0x6e>
        return(FX_PTR_ERROR);
 8001410:	2018      	movs	r0, #24
    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);

    /* Open is complete, return status.  */
    return(status);
}
 8001412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FX_CALLER_CHECKING_CODE
 8001416:	2020      	movs	r0, #32
}
 8001418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(FX_ACCESS_ERROR);
 800141c:	2006      	movs	r0, #6
 800141e:	e7f8      	b.n	8001412 <_fxe_file_open+0x6e>
    FX_UNPROTECT
 8001420:	4630      	mov	r0, r6
 8001422:	f008 fe7f 	bl	800a124 <_tx_mutex_put>
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8001426:	463b      	mov	r3, r7
 8001428:	4642      	mov	r2, r8
 800142a:	4629      	mov	r1, r5
 800142c:	4620      	mov	r0, r4
}
 800142e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8001432:	f000 bb11 	b.w	8001a58 <_fx_file_open>
    FX_PROTECT
 8001436:	2011      	movs	r0, #17
 8001438:	e7eb      	b.n	8001412 <_fxe_file_open+0x6e>
 800143a:	bf00      	nop
 800143c:	4d454449 	.word	0x4d454449
 8001440:	2000006c 	.word	0x2000006c
 8001444:	20003bc8 	.word	0x20003bc8
 8001448:	20003c70 	.word	0x20003c70

0800144c <_fxe_file_read>:

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf18      	it	ne
 8001450:	2900      	cmpne	r1, #0
 8001452:	d016      	beq.n	8001482 <_fxe_file_read+0x36>
{
 8001454:	b430      	push	{r4, r5}
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8001456:	b188      	cbz	r0, 800147c <_fxe_file_read+0x30>
 8001458:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800145c:	4d0a      	ldr	r5, [pc, #40]	; (8001488 <_fxe_file_read+0x3c>)
 800145e:	682d      	ldr	r5, [r5, #0]
 8001460:	432c      	orrs	r4, r5
 8001462:	d108      	bne.n	8001476 <_fxe_file_read+0x2a>
 8001464:	4c09      	ldr	r4, [pc, #36]	; (800148c <_fxe_file_read+0x40>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	b12c      	cbz	r4, 8001476 <_fxe_file_read+0x2a>
 800146a:	4d09      	ldr	r5, [pc, #36]	; (8001490 <_fxe_file_read+0x44>)
 800146c:	42ac      	cmp	r4, r5
 800146e:	d002      	beq.n	8001476 <_fxe_file_read+0x2a>
    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);

    /* Return status to the caller.  */
    return(status);
}
 8001470:	bc30      	pop	{r4, r5}
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8001472:	f000 bd2f 	b.w	8001ed4 <_fx_file_read>
    FX_CALLER_CHECKING_CODE
 8001476:	2020      	movs	r0, #32
}
 8001478:	bc30      	pop	{r4, r5}
 800147a:	4770      	bx	lr
        return(FX_PTR_ERROR);
 800147c:	2018      	movs	r0, #24
}
 800147e:	bc30      	pop	{r4, r5}
 8001480:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8001482:	2018      	movs	r0, #24
}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000006c 	.word	0x2000006c
 800148c:	20003bc8 	.word	0x20003bc8
 8001490:	20003c70 	.word	0x20003c70

08001494 <_fxe_file_seek>:

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8001494:	b178      	cbz	r0, 80014b6 <_fxe_file_seek+0x22>
 8001496:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <_fxe_file_seek+0x28>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4313      	orrs	r3, r2
 80014a0:	d107      	bne.n	80014b2 <_fxe_file_seek+0x1e>
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_fxe_file_seek+0x2c>)
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <_fxe_file_seek+0x30>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d002      	beq.n	80014b2 <_fxe_file_seek+0x1e>
 80014ac:	b10b      	cbz	r3, 80014b2 <_fxe_file_seek+0x1e>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 80014ae:	f000 be9b 	b.w	80021e8 <_fx_file_seek>
    FX_CALLER_CHECKING_CODE
 80014b2:	2020      	movs	r0, #32

    /* Seek is complete, return status.  */
    return(status);
}
 80014b4:	4770      	bx	lr
        return(FX_PTR_ERROR);
 80014b6:	2018      	movs	r0, #24
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000006c 	.word	0x2000006c
 80014c0:	20003bc8 	.word	0x20003bc8
 80014c4:	20003c70 	.word	0x20003c70

080014c8 <_fxe_file_write>:

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 80014c8:	b1a8      	cbz	r0, 80014f6 <_fxe_file_write+0x2e>
 80014ca:	b1a1      	cbz	r1, 80014f6 <_fxe_file_write+0x2e>
{
 80014cc:	b410      	push	{r4}
 80014ce:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80014d2:	4c0a      	ldr	r4, [pc, #40]	; (80014fc <_fxe_file_write+0x34>)
 80014d4:	6824      	ldr	r4, [r4, #0]
 80014d6:	4323      	orrs	r3, r4
 80014d8:	d109      	bne.n	80014ee <_fxe_file_write+0x26>
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <_fxe_file_write+0x38>)
 80014dc:	4c09      	ldr	r4, [pc, #36]	; (8001504 <_fxe_file_write+0x3c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	42a3      	cmp	r3, r4
 80014e2:	d004      	beq.n	80014ee <_fxe_file_write+0x26>
 80014e4:	b11b      	cbz	r3, 80014ee <_fxe_file_write+0x26>
    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);

    /* Return status to the caller.  */
    return(status);
}
 80014e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 80014ea:	f000 be81 	b.w	80021f0 <_fx_file_write>
    FX_CALLER_CHECKING_CODE
 80014ee:	2020      	movs	r0, #32
}
 80014f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f4:	4770      	bx	lr
        return(FX_PTR_ERROR);
 80014f6:	2018      	movs	r0, #24
}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000006c 	.word	0x2000006c
 8001500:	20003bc8 	.word	0x20003bc8
 8001504:	20003c70 	.word	0x20003c70

08001508 <_fxe_media_close>:

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8001508:	b178      	cbz	r0, 800152a <_fxe_media_close+0x22>
 800150a:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <_fxe_media_close+0x28>)
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	d107      	bne.n	8001526 <_fxe_media_close+0x1e>
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_fxe_media_close+0x2c>)
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <_fxe_media_close+0x30>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4293      	cmp	r3, r2
 800151e:	d002      	beq.n	8001526 <_fxe_media_close+0x1e>
 8001520:	b10b      	cbz	r3, 8001526 <_fxe_media_close+0x1e>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8001522:	f001 b939 	b.w	8002798 <_fx_media_close>
    FX_CALLER_CHECKING_CODE
 8001526:	2020      	movs	r0, #32

    /* Return status to the caller.  */
    return(status);
}
 8001528:	4770      	bx	lr
        return(FX_PTR_ERROR);
 800152a:	2018      	movs	r0, #24
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000006c 	.word	0x2000006c
 8001534:	20003bc8 	.word	0x20003bc8
 8001538:	20003c70 	.word	0x20003c70

0800153c <_fxe_media_open>:
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 800153c:	2800      	cmp	r0, #0
 800153e:	d031      	beq.n	80015a4 <_fxe_media_open+0x68>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d02f      	beq.n	80015a4 <_fxe_media_open+0x68>
{
 8001544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001548:	b085      	sub	sp, #20
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 800154a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800154c:	b334      	cbz	r4, 800159c <_fxe_media_open+0x60>
 800154e:	f242 44b8 	movw	r4, #9400	; 0x24b8
 8001552:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001554:	42a5      	cmp	r5, r4
 8001556:	d121      	bne.n	800159c <_fxe_media_open+0x60>
 8001558:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800155c:	4d2c      	ldr	r5, [pc, #176]	; (8001610 <_fxe_media_open+0xd4>)
 800155e:	682d      	ldr	r5, [r5, #0]
 8001560:	432c      	orrs	r4, r5
 8001562:	d121      	bne.n	80015a8 <_fxe_media_open+0x6c>
 8001564:	4c2b      	ldr	r4, [pc, #172]	; (8001614 <_fxe_media_open+0xd8>)
 8001566:	4d2c      	ldr	r5, [pc, #176]	; (8001618 <_fxe_media_open+0xdc>)
 8001568:	6824      	ldr	r4, [r4, #0]
 800156a:	42ac      	cmp	r4, r5
 800156c:	d01c      	beq.n	80015a8 <_fxe_media_open+0x6c>
 800156e:	b1dc      	cbz	r4, 80015a8 <_fxe_media_open+0x6c>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8001570:	4c2a      	ldr	r4, [pc, #168]	; (800161c <_fxe_media_open+0xe0>)
 8001572:	6825      	ldr	r5, [r4, #0]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8001574:	426c      	negs	r4, r5
 8001576:	402c      	ands	r4, r5

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8001578:	2c01      	cmp	r4, #1
 800157a:	d00b      	beq.n	8001594 <_fxe_media_open+0x58>
 800157c:	42a5      	cmp	r5, r4
 800157e:	d109      	bne.n	8001594 <_fxe_media_open+0x58>
        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8001580:	4c27      	ldr	r4, [pc, #156]	; (8001620 <_fxe_media_open+0xe4>)
 8001582:	6824      	ldr	r4, [r4, #0]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8001584:	4265      	negs	r5, r4
 8001586:	4025      	ands	r5, r4

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8001588:	2d01      	cmp	r5, #1
 800158a:	d003      	beq.n	8001594 <_fxe_media_open+0x58>
 800158c:	1b64      	subs	r4, r4, r5
 800158e:	bf18      	it	ne
 8001590:	2401      	movne	r4, #1
 8001592:	b16c      	cbz	r4, 80015b0 <_fxe_media_open+0x74>
        return(FX_MEDIA_INVALID);
 8001594:	2002      	movs	r0, #2
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
}
 8001596:	b005      	add	sp, #20
 8001598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 800159c:	2018      	movs	r0, #24
}
 800159e:	b005      	add	sp, #20
 80015a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 80015a4:	2018      	movs	r0, #24
}
 80015a6:	4770      	bx	lr
    FX_CALLER_CHECKING_CODE
 80015a8:	2020      	movs	r0, #32
}
 80015aa:	b005      	add	sp, #20
 80015ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015b0:	461e      	mov	r6, r3
 80015b2:	4617      	mov	r7, r2
 80015b4:	4688      	mov	r8, r1
 80015b6:	4605      	mov	r5, r0
    current_thread =  tx_thread_identify();
 80015b8:	f008 febe 	bl	800a338 <_tx_thread_identify>
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 80015bc:	4621      	mov	r1, r4
 80015be:	aa03      	add	r2, sp, #12
    current_thread =  tx_thread_identify();
 80015c0:	4681      	mov	r9, r0
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 80015c2:	f008 fefb 	bl	800a3bc <_tx_thread_preemption_change>
    open_count =     _fx_system_media_opened_count;
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <_fxe_media_open+0xe8>)
    current_media =  _fx_system_media_opened_ptr;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <_fxe_media_open+0xec>)
    open_count =     _fx_system_media_opened_count;
 80015ca:	6811      	ldr	r1, [r2, #0]
    current_media =  _fx_system_media_opened_ptr;
 80015cc:	681b      	ldr	r3, [r3, #0]
    while (open_count--)
 80015ce:	1e4a      	subs	r2, r1, #1
 80015d0:	b929      	cbnz	r1, 80015de <_fxe_media_open+0xa2>
 80015d2:	e00d      	b.n	80015f0 <_fxe_media_open+0xb4>
 80015d4:	3a01      	subs	r2, #1
        current_media =  current_media -> fx_media_opened_next;
 80015d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    while (open_count--)
 80015da:	1c51      	adds	r1, r2, #1
 80015dc:	d008      	beq.n	80015f0 <_fxe_media_open+0xb4>
        if (media_ptr == current_media)
 80015de:	429d      	cmp	r5, r3
 80015e0:	d1f8      	bne.n	80015d4 <_fxe_media_open+0x98>
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80015e2:	aa03      	add	r2, sp, #12
 80015e4:	4648      	mov	r0, r9
 80015e6:	9903      	ldr	r1, [sp, #12]
 80015e8:	f008 fee8 	bl	800a3bc <_tx_thread_preemption_change>
            return(FX_PTR_ERROR);
 80015ec:	2018      	movs	r0, #24
 80015ee:	e7d6      	b.n	800159e <_fxe_media_open+0x62>
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80015f0:	aa03      	add	r2, sp, #12
 80015f2:	9903      	ldr	r1, [sp, #12]
 80015f4:	4648      	mov	r0, r9
 80015f6:	f008 fee1 	bl	800a3bc <_tx_thread_preemption_change>
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 80015fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80015fc:	463a      	mov	r2, r7
 80015fe:	4641      	mov	r1, r8
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	4628      	mov	r0, r5
 8001604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	4633      	mov	r3, r6
 800160a:	f001 f9eb 	bl	80029e4 <_fx_media_open>
    return(status);
 800160e:	e7c6      	b.n	800159e <_fxe_media_open+0x62>
 8001610:	2000006c 	.word	0x2000006c
 8001614:	20003bc8 	.word	0x20003bc8
 8001618:	20003c70 	.word	0x20003c70
 800161c:	20003a10 	.word	0x20003a10
 8001620:	20003a1c 	.word	0x20003a1c
 8001624:	20003a18 	.word	0x20003a18
 8001628:	20003a20 	.word	0x20003a20

0800162c <_fx_partition_offset_calculate>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800162c:	b4f0      	push	{r4, r5, r6, r7}
    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
    count =  0;

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800162e:	f890 41fe 	ldrb.w	r4, [r0, #510]	; 0x1fe
{
 8001632:	b088      	sub	sp, #32
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 8001634:	2c55      	cmp	r4, #85	; 0x55
 8001636:	d138      	bne.n	80016aa <_fx_partition_offset_calculate+0x7e>
 8001638:	f890 41ff 	ldrb.w	r4, [r0, #511]	; 0x1ff
 800163c:	2caa      	cmp	r4, #170	; 0xaa
 800163e:	d134      	bne.n	80016aa <_fx_partition_offset_calculate+0x7e>
        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
    }

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 8001640:	7804      	ldrb	r4, [r0, #0]
 8001642:	2ce9      	cmp	r4, #233	; 0xe9
 8001644:	d038      	beq.n	80016b8 <_fx_partition_offset_calculate+0x8c>
 8001646:	2ceb      	cmp	r4, #235	; 0xeb
 8001648:	d033      	beq.n	80016b2 <_fx_partition_offset_calculate+0x86>
        }
    }

    for(i = 446; i <= 494; i+=16)
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800164a:	f890 41c2 	ldrb.w	r4, [r0, #450]	; 0x1c2
 800164e:	2c00      	cmp	r4, #0
 8001650:	f040 80d9 	bne.w	8001806 <_fx_partition_offset_calculate+0x1da>
        {

            partition_table[*count].fx_media_part_start = 0;
            partition_table[*count].fx_media_part_size  = 0;
 8001654:	e9cd 4400 	strd	r4, r4, [sp]
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 8001658:	f890 41d2 	ldrb.w	r4, [r0, #466]	; 0x1d2
 800165c:	2c00      	cmp	r4, #0
 800165e:	d16d      	bne.n	800173c <_fx_partition_offset_calculate+0x110>
            partition_table[*count].fx_media_part_size  = 0;
 8001660:	e9cd 4402 	strd	r4, r4, [sp, #8]
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 8001664:	f890 41e2 	ldrb.w	r4, [r0, #482]	; 0x1e2
 8001668:	2c00      	cmp	r4, #0
 800166a:	f040 808a 	bne.w	8001782 <_fx_partition_offset_calculate+0x156>
            partition_table[*count].fx_media_part_size  = 0;
 800166e:	e9cd 4404 	strd	r4, r4, [sp, #16]
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 8001672:	f890 41f2 	ldrb.w	r4, [r0, #498]	; 0x1f2
 8001676:	2c00      	cmp	r4, #0
 8001678:	f040 80a6 	bne.w	80017c8 <_fx_partition_offset_calculate+0x19c>
            partition_table[*count].fx_media_part_size  = 0;
 800167c:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if (partition >= count)
 8001680:	2903      	cmp	r1, #3
 8001682:	d812      	bhi.n	80016aa <_fx_partition_offset_calculate+0x7e>
    if (partition_start != FX_NULL)
 8001684:	b12a      	cbz	r2, 8001692 <_fx_partition_offset_calculate+0x66>
        *partition_start =  partition_table[partition].fx_media_part_start;
 8001686:	a808      	add	r0, sp, #32
 8001688:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800168c:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8001690:	6010      	str	r0, [r2, #0]
    if (partition_size != FX_NULL)
 8001692:	2b00      	cmp	r3, #0
 8001694:	d050      	beq.n	8001738 <_fx_partition_offset_calculate+0x10c>
        *partition_size =  partition_table[partition].fx_media_part_size;
 8001696:	aa08      	add	r2, sp, #32
    return(FX_SUCCESS);
 8001698:	2000      	movs	r0, #0
        *partition_size =  partition_table[partition].fx_media_part_size;
 800169a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800169e:	f851 2c1c 	ldr.w	r2, [r1, #-28]
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	b008      	add	sp, #32
 80016a6:	bcf0      	pop	{r4, r5, r6, r7}
 80016a8:	4770      	bx	lr
        return(FX_NOT_FOUND);
 80016aa:	2004      	movs	r0, #4
}
 80016ac:	b008      	add	sp, #32
 80016ae:	bcf0      	pop	{r4, r5, r6, r7}
 80016b0:	4770      	bx	lr
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 80016b2:	7884      	ldrb	r4, [r0, #2]
 80016b4:	2c90      	cmp	r4, #144	; 0x90
 80016b6:	d1c8      	bne.n	800164a <_fx_partition_offset_calculate+0x1e>
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 80016b8:	7d84      	ldrb	r4, [r0, #22]
 80016ba:	b974      	cbnz	r4, 80016da <_fx_partition_offset_calculate+0xae>
 80016bc:	7dc4      	ldrb	r4, [r0, #23]
 80016be:	b964      	cbnz	r4, 80016da <_fx_partition_offset_calculate+0xae>
 80016c0:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80016c4:	b94c      	cbnz	r4, 80016da <_fx_partition_offset_calculate+0xae>
 80016c6:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80016ca:	b934      	cbnz	r4, 80016da <_fx_partition_offset_calculate+0xae>
 80016cc:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
 80016d0:	b91c      	cbnz	r4, 80016da <_fx_partition_offset_calculate+0xae>
 80016d2:	f890 4027 	ldrb.w	r4, [r0, #39]	; 0x27
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d0b7      	beq.n	800164a <_fx_partition_offset_calculate+0x1e>
            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 80016da:	7cc4      	ldrb	r4, [r0, #19]
 80016dc:	7d05      	ldrb	r5, [r0, #20]
 80016de:	b9ec      	cbnz	r4, 800171c <_fx_partition_offset_calculate+0xf0>
 80016e0:	b9e5      	cbnz	r5, 800171c <_fx_partition_offset_calculate+0xf0>
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 80016e2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80016e6:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
 80016ea:	f890 6022 	ldrb.w	r6, [r0, #34]	; 0x22
 80016ee:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
 80016f2:	b91c      	cbnz	r4, 80016fc <_fx_partition_offset_calculate+0xd0>
 80016f4:	b915      	cbnz	r5, 80016fc <_fx_partition_offset_calculate+0xd0>
 80016f6:	b90e      	cbnz	r6, 80016fc <_fx_partition_offset_calculate+0xd0>
 80016f8:	2f00      	cmp	r7, #0
 80016fa:	d0a6      	beq.n	800164a <_fx_partition_offset_calculate+0x1e>
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 80016fc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
 8001700:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001704:	f890 6022 	ldrb.w	r6, [r0, #34]	; 0x22
 8001708:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800170c:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8001710:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001714:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 8001718:	2500      	movs	r5, #0
 800171a:	e005      	b.n	8001728 <_fx_partition_offset_calculate+0xfc>
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800171c:	7d05      	ldrb	r5, [r0, #20]
 800171e:	7cc4      	ldrb	r4, [r0, #19]
 8001720:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001724:	2500      	movs	r5, #0
 8001726:	b2a4      	uxth	r4, r4
            if (total_sectors)
 8001728:	ea54 0605 	orrs.w	r6, r4, r5
 800172c:	d08d      	beq.n	800164a <_fx_partition_offset_calculate+0x1e>
                if (partition_start != FX_NULL)
 800172e:	b10a      	cbz	r2, 8001734 <_fx_partition_offset_calculate+0x108>
                    *partition_start =  0;
 8001730:	2100      	movs	r1, #0
 8001732:	6011      	str	r1, [r2, #0]
                if (partition_size != FX_NULL)
 8001734:	b103      	cbz	r3, 8001738 <_fx_partition_offset_calculate+0x10c>
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 8001736:	601c      	str	r4, [r3, #0]
                return(FX_SUCCESS);
 8001738:	2000      	movs	r0, #0
 800173a:	e7b7      	b.n	80016ac <_fx_partition_offset_calculate+0x80>
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800173c:	f890 51d8 	ldrb.w	r5, [r0, #472]	; 0x1d8
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
            partition_table[*count].fx_media_part_start = value + base_sector;

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001740:	f890 41dc 	ldrb.w	r4, [r0, #476]	; 0x1dc
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 8001744:	f890 71d7 	ldrb.w	r7, [r0, #471]	; 0x1d7
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8001748:	042d      	lsls	r5, r5, #16
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800174a:	f890 61db 	ldrb.w	r6, [r0, #475]	; 0x1db
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800174e:	0424      	lsls	r4, r4, #16
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8001750:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 8001754:	f890 71d6 	ldrb.w	r7, [r0, #470]	; 0x1d6
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001758:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800175c:	f890 61da 	ldrb.w	r6, [r0, #474]	; 0x1da
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8001760:	433d      	orrs	r5, r7
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 8001762:	f890 71d9 	ldrb.w	r7, [r0, #473]	; 0x1d9
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001766:	4334      	orrs	r4, r6
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 8001768:	f890 61dd 	ldrb.w	r6, [r0, #477]	; 0x1dd
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800176c:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 8001770:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
            partition_table[*count].fx_media_part_size = value;
 8001774:	e9cd 5402 	strd	r5, r4, [sp, #8]
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 8001778:	f890 41e2 	ldrb.w	r4, [r0, #482]	; 0x1e2
 800177c:	2c00      	cmp	r4, #0
 800177e:	f43f af76 	beq.w	800166e <_fx_partition_offset_calculate+0x42>
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8001782:	f890 51e8 	ldrb.w	r5, [r0, #488]	; 0x1e8
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001786:	f890 41ec 	ldrb.w	r4, [r0, #492]	; 0x1ec
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800178a:	f890 71e7 	ldrb.w	r7, [r0, #487]	; 0x1e7
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800178e:	042d      	lsls	r5, r5, #16
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 8001790:	f890 61eb 	ldrb.w	r6, [r0, #491]	; 0x1eb
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001794:	0424      	lsls	r4, r4, #16
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8001796:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800179a:	f890 71e6 	ldrb.w	r7, [r0, #486]	; 0x1e6
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800179e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 80017a2:	f890 61ea 	ldrb.w	r6, [r0, #490]	; 0x1ea
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 80017a6:	433d      	orrs	r5, r7
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 80017a8:	f890 71e9 	ldrb.w	r7, [r0, #489]	; 0x1e9
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80017ac:	4334      	orrs	r4, r6
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80017ae:	f890 61ed 	ldrb.w	r6, [r0, #493]	; 0x1ed
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 80017b2:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80017b6:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
            partition_table[*count].fx_media_part_size = value;
 80017ba:	e9cd 5404 	strd	r5, r4, [sp, #16]
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 80017be:	f890 41f2 	ldrb.w	r4, [r0, #498]	; 0x1f2
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	f43f af5a 	beq.w	800167c <_fx_partition_offset_calculate+0x50>
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 80017c8:	f890 51f8 	ldrb.w	r5, [r0, #504]	; 0x1f8
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80017cc:	f890 41fc 	ldrb.w	r4, [r0, #508]	; 0x1fc
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 80017d0:	f890 61f7 	ldrb.w	r6, [r0, #503]	; 0x1f7
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 80017d4:	042d      	lsls	r5, r5, #16
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 80017d6:	f890 71fb 	ldrb.w	r7, [r0, #507]	; 0x1fb
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80017da:	0424      	lsls	r4, r4, #16
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 80017dc:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 80017e0:	f890 61f6 	ldrb.w	r6, [r0, #502]	; 0x1f6
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80017e4:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 80017e8:	f890 71fa 	ldrb.w	r7, [r0, #506]	; 0x1fa
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 80017ec:	4335      	orrs	r5, r6
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 80017ee:	f890 61f9 	ldrb.w	r6, [r0, #505]	; 0x1f9
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80017f2:	433c      	orrs	r4, r7
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80017f4:	f890 01fd 	ldrb.w	r0, [r0, #509]	; 0x1fd
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 80017f8:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80017fc:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
            partition_table[*count].fx_media_part_size = value;
 8001800:	e9cd 5006 	strd	r5, r0, [sp, #24]
 8001804:	e73c      	b.n	8001680 <_fx_partition_offset_calculate+0x54>
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 8001806:	f890 51c7 	ldrb.w	r5, [r0, #455]	; 0x1c7
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800180a:	f890 41cb 	ldrb.w	r4, [r0, #459]	; 0x1cb
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800180e:	f890 71c8 	ldrb.w	r7, [r0, #456]	; 0x1c8
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 8001812:	022d      	lsls	r5, r5, #8
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001814:	f890 61cc 	ldrb.w	r6, [r0, #460]	; 0x1cc
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 8001818:	0224      	lsls	r4, r4, #8
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800181a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800181e:	f890 71c6 	ldrb.w	r7, [r0, #454]	; 0x1c6
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001822:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 8001826:	f890 61ca 	ldrb.w	r6, [r0, #458]	; 0x1ca
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800182a:	433d      	orrs	r5, r7
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800182c:	f890 71c9 	ldrb.w	r7, [r0, #457]	; 0x1c9
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8001830:	4334      	orrs	r4, r6
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 8001832:	f890 61cd 	ldrb.w	r6, [r0, #461]	; 0x1cd
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 8001836:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800183a:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
            partition_table[*count].fx_media_part_size = value;
 800183e:	e9cd 5400 	strd	r5, r4, [sp]
 8001842:	e709      	b.n	8001658 <_fx_partition_offset_calculate+0x2c>

08001844 <_fx_file_close>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <_fx_file_close+0xc8>)
 800184a:	429a      	cmp	r2, r3
 800184c:	d10c      	bne.n	8001868 <_fx_file_close+0x24>
        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800184e:	6d85      	ldr	r5, [r0, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8001850:	4a2f      	ldr	r2, [pc, #188]	; (8001910 <_fx_file_close+0xcc>)
    media_ptr -> fx_media_file_closes++;
 8001852:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    FX_PROTECT
 8001856:	6829      	ldr	r1, [r5, #0]
    media_ptr -> fx_media_file_closes++;
 8001858:	3301      	adds	r3, #1
    FX_PROTECT
 800185a:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_closes++;
 800185c:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
    FX_PROTECT
 8001860:	d005      	beq.n	800186e <_fx_file_close+0x2a>
 8001862:	2611      	movs	r6, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return status to the caller.  */
    return(FX_SUCCESS);
}
 8001864:	4630      	mov	r0, r6
 8001866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(FX_NOT_OPEN);
 8001868:	2607      	movs	r6, #7
}
 800186a:	4630      	mov	r0, r6
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FX_PROTECT
 800186e:	f505 77e4 	add.w	r7, r5, #456	; 0x1c8
 8001872:	4604      	mov	r4, r0
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	4638      	mov	r0, r7
 800187a:	f008 fb69 	bl	8009f50 <_tx_mutex_get>
 800187e:	4606      	mov	r6, r0
 8001880:	2800      	cmp	r0, #0
 8001882:	d1ee      	bne.n	8001862 <_fx_file_close+0x1e>
    if (file_ptr == file_ptr -> fx_file_opened_next)
 8001884:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001886:	42a3      	cmp	r3, r4
 8001888:	d038      	beq.n	80018fc <_fx_file_close+0xb8>
            file_ptr -> fx_file_opened_previous;
 800188a:	6e21      	ldr	r1, [r4, #96]	; 0x60
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800188c:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8001890:	6619      	str	r1, [r3, #96]	; 0x60
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8001892:	42a2      	cmp	r2, r4
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8001894:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001896:	65cb      	str	r3, [r1, #92]	; 0x5c
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8001898:	d033      	beq.n	8001902 <_fx_file_close+0xbe>
    media_ptr -> fx_media_opened_file_count--;
 800189a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800189e:	68a2      	ldr	r2, [r4, #8]
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 80018a0:	491c      	ldr	r1, [pc, #112]	; (8001914 <_fx_file_close+0xd0>)
    media_ptr -> fx_media_opened_file_count--;
 80018a2:	3b01      	subs	r3, #1
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80018a4:	2a01      	cmp	r2, #1
    media_ptr -> fx_media_opened_file_count--;
 80018a6:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 80018aa:	6021      	str	r1, [r4, #0]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80018ac:	d101      	bne.n	80018b2 <_fx_file_close+0x6e>
 80018ae:	7b23      	ldrb	r3, [r4, #12]
 80018b0:	b923      	cbnz	r3, 80018bc <_fx_file_close+0x78>
    FX_UNPROTECT
 80018b2:	4638      	mov	r0, r7
 80018b4:	f008 fc36 	bl	800a124 <_tx_mutex_put>
}
 80018b8:	4630      	mov	r0, r6
 80018ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80018bc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80018c0:	b672      	cpsid	i
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80018c2:	4915      	ldr	r1, [pc, #84]	; (8001918 <_fx_file_close+0xd4>)
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <_fx_file_close+0xd8>)
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80018c6:	6809      	ldr	r1, [r1, #0]
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80018c8:	681b      	ldr	r3, [r3, #0]
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80018ca:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80018ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 80018d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80018d6:	f382 8810 	msr	PRIMASK, r2
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80018da:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80018de:	4628      	mov	r0, r5
 80018e0:	f104 0168 	add.w	r1, r4, #104	; 0x68
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80018e4:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80018e8:	f002 fdd2 	bl	8004490 <_fx_directory_entry_write>
        if (status != FX_SUCCESS)
 80018ec:	4603      	mov	r3, r0
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d0df      	beq.n	80018b2 <_fx_file_close+0x6e>
            FX_UNPROTECT
 80018f2:	4638      	mov	r0, r7
            return(status);
 80018f4:	461e      	mov	r6, r3
            FX_UNPROTECT
 80018f6:	f008 fc15 	bl	800a124 <_tx_mutex_put>
            return(status);
 80018fa:	e7b3      	b.n	8001864 <_fx_file_close+0x20>
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 80018fc:	f8c5 00c8 	str.w	r0, [r5, #200]	; 0xc8
 8001900:	e7cb      	b.n	800189a <_fx_file_close+0x56>
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 8001902:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001904:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 8001908:	e7c7      	b.n	800189a <_fx_file_close+0x56>
 800190a:	bf00      	nop
 800190c:	46494c45 	.word	0x46494c45
 8001910:	4d454449 	.word	0x4d454449
 8001914:	46494c43 	.word	0x46494c43
 8001918:	20003a2c 	.word	0x20003a2c
 800191c:	20003a14 	.word	0x20003a14

08001920 <_fx_file_create>:


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 8001920:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8001924:	3301      	adds	r3, #1
{
 8001926:	b570      	push	{r4, r5, r6, lr}
    media_ptr -> fx_media_file_creates++;
 8001928:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
{
 800192c:	b0bc      	sub	sp, #240	; 0xf0

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
    work_ptr =  (CHAR *)file_name;
    while (*work_ptr)
 800192e:	780b      	ldrb	r3, [r1, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d04e      	beq.n	80019d2 <_fx_file_create+0xb2>
 8001934:	460c      	mov	r4, r1
    i =  0;
 8001936:	2200      	movs	r2, #0
 8001938:	e00b      	b.n	8001952 <_fx_file_create+0x32>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800193a:	2b2f      	cmp	r3, #47	; 0x2f
 800193c:	d00b      	beq.n	8001956 <_fx_file_create+0x36>
        {
            /* Yes, reset the name size.  */
            i =  0;
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800193e:	3b20      	subs	r3, #32
 8001940:	bf18      	it	ne
 8001942:	2301      	movne	r3, #1
 8001944:	b90a      	cbnz	r2, 800194a <_fx_file_create+0x2a>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d041      	beq.n	80019ce <_fx_file_create+0xae>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800194a:	3201      	adds	r2, #1
    while (*work_ptr)
 800194c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001950:	b133      	cbz	r3, 8001960 <_fx_file_create+0x40>
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8001952:	2b5c      	cmp	r3, #92	; 0x5c
 8001954:	d1f1      	bne.n	800193a <_fx_file_create+0x1a>
    while (*work_ptr)
 8001956:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            i =  0;
 800195a:	2200      	movs	r2, #0
    while (*work_ptr)
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f8      	bne.n	8001952 <_fx_file_create+0x32>
        /* Move to the next character.  */
        work_ptr++;
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 8001960:	3a01      	subs	r2, #1
 8001962:	2afe      	cmp	r2, #254	; 0xfe
 8001964:	d835      	bhi.n	80019d2 <_fx_file_create+0xb2>
    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
    search_directory.fx_dir_entry_short_name[0] = 0;

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001966:	4a39      	ldr	r2, [pc, #228]	; (8001a4c <_fx_file_create+0x12c>)
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8001968:	f600 159c 	addw	r5, r0, #2460	; 0x99c
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800196c:	f88d 3014 	strb.w	r3, [sp, #20]
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8001970:	f600 249c 	addw	r4, r0, #2716	; 0xa9c
    search_directory.fx_dir_entry_short_name[0] = 0;
 8001974:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001978:	6803      	ldr	r3, [r0, #0]
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800197a:	9504      	str	r5, [sp, #16]
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800197c:	4293      	cmp	r3, r2
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800197e:	9420      	str	r4, [sp, #128]	; 0x80
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001980:	d003      	beq.n	800198a <_fx_file_create+0x6a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8001982:	2411      	movs	r4, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* File create is complete, return status.  */
    return(status);
}
 8001984:	4620      	mov	r0, r4
 8001986:	b03c      	add	sp, #240	; 0xf0
 8001988:	bd70      	pop	{r4, r5, r6, pc}
    FX_PROTECT
 800198a:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 800198e:	460c      	mov	r4, r1
 8001990:	4605      	mov	r5, r0
 8001992:	f04f 31ff 	mov.w	r1, #4294967295
 8001996:	4630      	mov	r0, r6
 8001998:	f008 fada 	bl	8009f50 <_tx_mutex_get>
 800199c:	2800      	cmp	r0, #0
 800199e:	d1f0      	bne.n	8001982 <_fx_file_create+0x62>
    if (media_ptr -> fx_media_driver_write_protect)
 80019a0:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80019a4:	b9cb      	cbnz	r3, 80019da <_fx_file_create+0xba>
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 80019a6:	a803      	add	r0, sp, #12
 80019a8:	4621      	mov	r1, r4
 80019aa:	ab20      	add	r3, sp, #128	; 0x80
 80019ac:	aa04      	add	r2, sp, #16
 80019ae:	9000      	str	r0, [sp, #0]
 80019b0:	4628      	mov	r0, r5
 80019b2:	f003 fec1 	bl	8005738 <_fx_directory_search>
    if (status == FX_SUCCESS)
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d042      	beq.n	8001a40 <_fx_file_create+0x120>
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 80019ba:	9904      	ldr	r1, [sp, #16]
 80019bc:	9803      	ldr	r0, [sp, #12]
 80019be:	f003 fe6d 	bl	800569c <_fx_directory_name_extract>
 80019c2:	b178      	cbz	r0, 80019e4 <_fx_file_create+0xc4>
        FX_UNPROTECT
 80019c4:	4630      	mov	r0, r6
        return(FX_INVALID_PATH);
 80019c6:	240d      	movs	r4, #13
        FX_UNPROTECT
 80019c8:	f008 fbac 	bl	800a124 <_tx_mutex_put>
        return(FX_INVALID_PATH);
 80019cc:	e7da      	b.n	8001984 <_fx_file_create+0x64>
            i =  0;
 80019ce:	461a      	mov	r2, r3
 80019d0:	e7bc      	b.n	800194c <_fx_file_create+0x2c>
        return(FX_INVALID_NAME);
 80019d2:	240c      	movs	r4, #12
}
 80019d4:	4620      	mov	r0, r4
 80019d6:	b03c      	add	sp, #240	; 0xf0
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
        FX_UNPROTECT
 80019da:	4630      	mov	r0, r6
        return(FX_WRITE_PROTECT);
 80019dc:	2423      	movs	r4, #35	; 0x23
        FX_UNPROTECT
 80019de:	f008 fba1 	bl	800a124 <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 80019e2:	e7cf      	b.n	8001984 <_fx_file_create+0x64>
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 80019e4:	a920      	add	r1, sp, #128	; 0x80
 80019e6:	aa04      	add	r2, sp, #16
 80019e8:	4628      	mov	r0, r5
 80019ea:	f003 fbcf 	bl	800518c <_fx_directory_free_search>
    if (status != FX_SUCCESS)
 80019ee:	4604      	mov	r4, r0
 80019f0:	bb10      	cbnz	r0, 8001a38 <_fx_file_create+0x118>
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 80019f2:	9904      	ldr	r1, [sp, #16]
 80019f4:	9803      	ldr	r0, [sp, #12]
 80019f6:	f003 fe51 	bl	800569c <_fx_directory_name_extract>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80019fa:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80019fe:	b672      	cpsid	i
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8001a00:	4913      	ldr	r1, [pc, #76]	; (8001a50 <_fx_file_create+0x130>)
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8001a02:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_fx_file_create+0x134>)
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8001a04:	6809      	ldr	r1, [r1, #0]
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8001a06:	6812      	ldr	r2, [r2, #0]
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8001a08:	910f      	str	r1, [sp, #60]	; 0x3c
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8001a0a:	9210      	str	r2, [sp, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001a0c:	f383 8810 	msr	PRIMASK, r3
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 8001a10:	2220      	movs	r2, #32
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8001a12:	9b04      	ldr	r3, [sp, #16]
    dir_entry.fx_dir_entry_file_size =  0;
 8001a14:	2000      	movs	r0, #0
 8001a16:	2100      	movs	r1, #0
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 8001a18:	9411      	str	r4, [sp, #68]	; 0x44
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 8001a1a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    dir_entry.fx_dir_entry_file_size =  0;
 8001a1e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b2e      	cmp	r3, #46	; 0x2e
 8001a26:	d102      	bne.n	8001a2e <_fx_file_create+0x10e>
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 8001a28:	2322      	movs	r3, #34	; 0x22
 8001a2a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 8001a2e:	a904      	add	r1, sp, #16
 8001a30:	4628      	mov	r0, r5
 8001a32:	f002 fd2d 	bl	8004490 <_fx_directory_entry_write>
 8001a36:	4604      	mov	r4, r0
    FX_UNPROTECT
 8001a38:	4630      	mov	r0, r6
 8001a3a:	f008 fb73 	bl	800a124 <_tx_mutex_put>
    return(status);
 8001a3e:	e7a1      	b.n	8001984 <_fx_file_create+0x64>
        FX_UNPROTECT
 8001a40:	4630      	mov	r0, r6
        return(FX_ALREADY_CREATED);
 8001a42:	240b      	movs	r4, #11
        FX_UNPROTECT
 8001a44:	f008 fb6e 	bl	800a124 <_tx_mutex_put>
        return(FX_ALREADY_CREATED);
 8001a48:	e79c      	b.n	8001984 <_fx_file_create+0x64>
 8001a4a:	bf00      	nop
 8001a4c:	4d454449 	.word	0x4d454449
 8001a50:	20003a2c 	.word	0x20003a2c
 8001a54:	20003a14 	.word	0x20003a14

08001a58 <_fx_file_open>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	460d      	mov	r5, r1
UINT     fast_open;
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001a60:	486e      	ldr	r0, [pc, #440]	; (8001c1c <_fx_file_open+0x1c4>)
{
 8001a62:	b093      	sub	sp, #76	; 0x4c
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001a64:	6821      	ldr	r1, [r4, #0]
ULONG    contents = 0;
 8001a66:	2600      	movs	r6, #0
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001a68:	4281      	cmp	r1, r0
ULONG    contents = 0;
 8001a6a:	9611      	str	r6, [sp, #68]	; 0x44
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8001a6c:	f040 80bb 	bne.w	8001be6 <_fx_file_open+0x18e>
 8001a70:	4698      	mov	r8, r3
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 8001a72:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 8001a76:	f64f 70f8 	movw	r0, #65528	; 0xfff8
 8001a7a:	4617      	mov	r7, r2
    media_ptr -> fx_media_file_opens++;
 8001a7c:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_32_bit_FAT)
 8001a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
        fat_last        = FX_LAST_CLUSTER_1_32;
 8001a80:	4967      	ldr	r1, [pc, #412]	; (8001c20 <_fx_file_open+0x1c8>)
    media_ptr -> fx_media_file_opens++;
 8001a82:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        fat_last        = FX_LAST_CLUSTER_1_32;
 8001a86:	4603      	mov	r3, r0
    file_ptr -> fx_file_write_notify = FX_NULL;
 8001a88:	f8c5 61dc 	str.w	r6, [r5, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_1_32;
 8001a8c:	2a00      	cmp	r2, #0
 8001a8e:	bf18      	it	ne
 8001a90:	460b      	movne	r3, r1
        fat_last        = FX_LAST_CLUSTER_1;
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
    }

    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8001a92:	f1b8 0f02 	cmp.w	r8, #2
        fat_last        = FX_LAST_CLUSTER_1_32;
 8001a96:	9304      	str	r3, [sp, #16]
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8001a98:	f000 80aa 	beq.w	8001bf0 <_fx_file_open+0x198>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8001a9c:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	4658      	mov	r0, fp
 8001aa6:	f008 fa53 	bl	8009f50 <_tx_mutex_get>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	f040 809b 	bne.w	8001be6 <_fx_file_open+0x18e>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8001ab0:	f105 03d8 	add.w	r3, r5, #216	; 0xd8
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 8001ab4:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8001ab8:	4639      	mov	r1, r7
 8001aba:	9000      	str	r0, [sp, #0]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8001abc:	461a      	mov	r2, r3
 8001abe:	930b      	str	r3, [sp, #44]	; 0x2c
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4620      	mov	r0, r4
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8001ac4:	66aa      	str	r2, [r5, #104]	; 0x68
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8001ac6:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001aca:	f003 fe35 	bl	8005738 <_fx_directory_search>

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8001ace:	4607      	mov	r7, r0
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	f040 809a 	bne.w	8001c0a <_fx_file_open+0x1b2>
        /* Return the error code.  */
        return(status);
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8001ad6:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 8001ada:	f013 0f18 	tst.w	r3, #24
 8001ade:	f040 8181 	bne.w	8001de4 <_fx_file_open+0x38c>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 8001ae2:	f1b8 0f01 	cmp.w	r8, #1
 8001ae6:	f000 8134 	beq.w	8001d52 <_fx_file_open+0x2fa>
    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8001aea:	6d62      	ldr	r2, [r4, #84]	; 0x54
    file_ptr -> fx_file_current_physical_cluster =  0;
 8001aec:	f04f 0a00 	mov.w	sl, #0
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8001af0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8001af2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8001af6:	930e      	str	r3, [sp, #56]	; 0x38
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8001af8:	920c      	str	r2, [sp, #48]	; 0x30
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8001afe:	9109      	str	r1, [sp, #36]	; 0x24
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8001b00:	930a      	str	r3, [sp, #40]	; 0x28
    file_ptr -> fx_file_current_physical_cluster =  0;
 8001b02:	f8c5 a020 	str.w	sl, [r5, #32]
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8001b06:	e9d5 1228 	ldrd	r1, r2, [r5, #160]	; 0xa0
 8001b0a:	e9cd 1202 	strd	r1, r2, [sp, #8]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8170 	beq.w	8001df4 <_fx_file_open+0x39c>
    }

    last_cluster =      0;
    cluster_count =     0;
    leading_consecutive = 1;
    file_ptr -> fx_file_consecutive_cluster = 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61ab      	str	r3, [r5, #24]

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	f040 8083 	bne.w	8001c24 <_fx_file_open+0x1cc>
        else
        {
#endif /* FX_ENABLE_EXFAT */

            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8001b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b20:	4298      	cmp	r0, r3
 8001b22:	f240 81c6 	bls.w	8001eb2 <_fx_file_open+0x45a>
 8001b26:	f242 42a8 	movw	r2, #9384	; 0x24a8
 8001b2a:	58a1      	ldr	r1, [r4, r2]
 8001b2c:	4288      	cmp	r0, r1
 8001b2e:	f080 81c0 	bcs.w	8001eb2 <_fx_file_open+0x45a>
 8001b32:	eb04 0a02 	add.w	sl, r4, r2
                /* Setup for the next cluster.  */
                cluster =  contents;

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 8001b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b38:	2100      	movs	r1, #0
 8001b3a:	970e      	str	r7, [sp, #56]	; 0x38
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001b40:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8001b44:	4699      	mov	r9, r3
 8001b46:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8001b4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8001b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001b52:	e010      	b.n	8001b76 <_fx_file_open+0x11e>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8001b54:	ebbb 0909 	subs.w	r9, fp, r9
 8001b58:	eb6c 0a0a 	sbc.w	sl, ip, sl
 8001b5c:	e9cd 9a02 	strd	r9, sl, [sp, #8]
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8001b60:	2a01      	cmp	r2, #1
 8001b62:	f240 8158 	bls.w	8001e16 <_fx_file_open+0x3be>
 8001b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	f080 8153 	bcs.w	8001e16 <_fx_file_open+0x3be>
 8001b70:	4646      	mov	r6, r8
                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
                        file_ptr -> fx_file_current_relative_cluster++;

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 8001b72:	4617      	mov	r7, r2
 8001b74:	4681      	mov	r9, r0
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8001b76:	aa11      	add	r2, sp, #68	; 0x44
 8001b78:	4639      	mov	r1, r7
 8001b7a:	4620      	mov	r0, r4
                cluster_count++;
 8001b7c:	f106 0801 	add.w	r8, r6, #1
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8001b80:	f001 fae0 	bl	8003144 <_fx_utility_FAT_entry_read>
                if (status != FX_SUCCESS)
 8001b84:	2800      	cmp	r0, #0
 8001b86:	f040 8187 	bne.w	8001e98 <_fx_file_open+0x440>
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8001b8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001b8c:	42ba      	cmp	r2, r7
 8001b8e:	f000 813b 	beq.w	8001e08 <_fx_file_open+0x3b0>
 8001b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b94:	4543      	cmp	r3, r8
 8001b96:	f0c0 8137 	bcc.w	8001e08 <_fx_file_open+0x3b0>
                if (cluster + 1 == contents)
 8001b9a:	1c7b      	adds	r3, r7, #1
                    if (leading_consecutive)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <_fx_file_open+0x14e>
 8001ba0:	f019 0f01 	tst.w	r9, #1
 8001ba4:	d135      	bne.n	8001c12 <_fx_file_open+0x1ba>
                if (bytes_remaining > bytes_per_cluster)
 8001ba6:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 8001baa:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8001bae:	45e2      	cmp	sl, ip
 8001bb0:	bf08      	it	eq
 8001bb2:	45d9      	cmpeq	r9, fp
 8001bb4:	d3ce      	bcc.n	8001b54 <_fx_file_open+0xfc>
                else if (!file_ptr -> fx_file_current_physical_cluster)
 8001bb6:	6a2b      	ldr	r3, [r5, #32]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1d1      	bne.n	8001b60 <_fx_file_open+0x108>
                    if ((bytes_remaining == bytes_per_cluster) &&
 8001bbc:	45e2      	cmp	sl, ip
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8001bbe:	622f      	str	r7, [r5, #32]
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8001bc0:	636e      	str	r6, [r5, #52]	; 0x34
                    if ((bytes_remaining == bytes_per_cluster) &&
 8001bc2:	bf08      	it	eq
 8001bc4:	45d9      	cmpeq	r9, fp
 8001bc6:	d1cb      	bne.n	8001b60 <_fx_file_open+0x108>
 8001bc8:	2a01      	cmp	r2, #1
 8001bca:	d9c9      	bls.n	8001b60 <_fx_file_open+0x108>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8001bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f080 8120 	bcs.w	8001e16 <_fx_file_open+0x3be>
                        bytes_remaining =  0;
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	2700      	movs	r7, #0
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8001bda:	622a      	str	r2, [r5, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 8001bdc:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
                        bytes_remaining =  0;
 8001be0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001be4:	e7c4      	b.n	8001b70 <_fx_file_open+0x118>
        return(FX_MEDIA_NOT_OPEN);
 8001be6:	2711      	movs	r7, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
}
 8001be8:	4638      	mov	r0, r7
 8001bea:	b013      	add	sp, #76	; 0x4c
 8001bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8001bf0:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
        open_type =  FX_OPEN_FOR_READ;
 8001bf8:	46b0      	mov	r8, r6
        fast_open =  FX_TRUE;
 8001bfa:	2601      	movs	r6, #1
    FX_PROTECT
 8001bfc:	4658      	mov	r0, fp
 8001bfe:	f008 f9a7 	bl	8009f50 <_tx_mutex_get>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	f43f af54 	beq.w	8001ab0 <_fx_file_open+0x58>
 8001c08:	e7ed      	b.n	8001be6 <_fx_file_open+0x18e>
        FX_UNPROTECT
 8001c0a:	4658      	mov	r0, fp
 8001c0c:	f008 fa8a 	bl	800a124 <_tx_mutex_put>
        return(status);
 8001c10:	e7ea      	b.n	8001be8 <_fx_file_open+0x190>
                        file_ptr -> fx_file_consecutive_cluster++;
 8001c12:	69ab      	ldr	r3, [r5, #24]
 8001c14:	2001      	movs	r0, #1
 8001c16:	4403      	add	r3, r0
 8001c18:	61ab      	str	r3, [r5, #24]
 8001c1a:	e7c4      	b.n	8001ba6 <_fx_file_open+0x14e>
 8001c1c:	4d454449 	.word	0x4d454449
 8001c20:	0ffffff8 	.word	0x0ffffff8
 8001c24:	4608      	mov	r0, r1
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8001c26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001c28:	f110 30ff 	adds.w	r0, r0, #4294967295
 8001c2c:	f142 31ff 	adc.w	r1, r2, #4294967295
 8001c30:	2200      	movs	r2, #0
 8001c32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	4632      	mov	r2, r6
 8001c3e:	1980      	adds	r0, r0, r6
 8001c40:	4159      	adcs	r1, r3
 8001c42:	f7fe fc11 	bl	8000468 <__aeabi_uldivmod>
 8001c46:	fba0 2306 	umull	r2, r3, r0, r6
 8001c4a:	46d6      	mov	lr, sl
 8001c4c:	960a      	str	r6, [sp, #40]	; 0x28
 8001c4e:	469a      	mov	sl, r3
 8001c50:	4691      	mov	r9, r2
 8001c52:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    last_cluster =      0;
 8001c56:	4676      	mov	r6, lr
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8001c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8001c5c:	e9cd 9a06 	strd	r9, sl, [sp, #24]
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8001c60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8001c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c66:	fb03 a301 	mla	r3, r3, r1, sl
 8001c6a:	9307      	str	r3, [sp, #28]
    cluster_count =     0;
 8001c6c:	4673      	mov	r3, lr
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8001c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8001c70:	2200      	movs	r2, #0
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8001c72:	4897      	ldr	r0, [pc, #604]	; (8001ed0 <_fx_file_open+0x478>)
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8001c74:	6069      	str	r1, [r5, #4]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8001c76:	9909      	ldr	r1, [sp, #36]	; 0x24
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8001c78:	732a      	strb	r2, [r5, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 8001c7a:	612b      	str	r3, [r5, #16]
 8001c7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8001c7e:	6169      	str	r1, [r5, #20]
 8001c80:	2100      	movs	r1, #0
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8001c82:	6028      	str	r0, [r5, #0]
 8001c84:	4699      	mov	r9, r3
 8001c86:	468a      	mov	sl, r1
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 8001c88:	65ac      	str	r4, [r5, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 8001c8a:	f8c5 8008 	str.w	r8, [r5, #8]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 8001c8e:	61ee      	str	r6, [r5, #28]
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 8001c90:	f8c5 21d8 	str.w	r2, [r5, #472]	; 0x1d8
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8001c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001c98:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 8001c9c:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 8001ca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ca4:	e9c5 0114 	strd	r0, r1, [r5, #80]	; 0x50
    if (open_type == FX_OPEN_FOR_READ)
 8001ca8:	f1b8 0f00 	cmp.w	r8, #0
 8001cac:	d07a      	beq.n	8001da4 <_fx_file_open+0x34c>
        if (bytes_remaining == bytes_per_cluster)
 8001cae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cb0:	f04f 0900 	mov.w	r9, #0
 8001cb4:	6a2b      	ldr	r3, [r5, #32]
 8001cb6:	4688      	mov	r8, r1
 8001cb8:	1e98      	subs	r0, r3, #2
 8001cba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001cbe:	f04f 0900 	mov.w	r9, #0
 8001cc2:	fb00 fa0e 	mul.w	sl, r0, lr
 8001cc6:	f149 31ff 	adc.w	r1, r9, #4294967295
 8001cca:	fba0 890c 	umull	r8, r9, r0, ip
 8001cce:	fb0c aa01 	mla	sl, ip, r1, sl
 8001cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001cd6:	44d1      	add	r9, sl
 8001cd8:	eb10 0008 	adds.w	r0, r0, r8
 8001cdc:	eb41 0109 	adc.w	r1, r1, r9
 8001ce0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8001ce4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001cec:	4589      	cmp	r9, r1
 8001cee:	bf08      	it	eq
 8001cf0:	4580      	cmpeq	r8, r0
 8001cf2:	f000 80b9 	beq.w	8001e68 <_fx_file_open+0x410>
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8001cf6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001cf8:	4680      	mov	r8, r0
 8001cfa:	4689      	mov	r9, r1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	4632      	mov	r2, r6
 8001d00:	f7fe fbb2 	bl	8000468 <__aeabi_uldivmod>
 8001d04:	63a8      	str	r0, [r5, #56]	; 0x38
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8001d06:	fbb8 f3f6 	udiv	r3, r8, r6
 8001d0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d0e:	9902      	ldr	r1, [sp, #8]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8001d10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8001d14:	fb06 1313 	mls	r3, r6, r3, r1
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8001d18:	eb18 0800 	adds.w	r8, r8, r0
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8001d1c:	632b      	str	r3, [r5, #48]	; 0x30
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8001d1e:	f149 0900 	adc.w	r9, r9, #0
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8001d22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8001d26:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8001d2a:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
    if (media_ptr -> fx_media_opened_file_list)
 8001d2e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d063      	beq.n	8001dfe <_fx_file_open+0x3a6>
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 8001d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 8001d38:	661d      	str	r5, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 8001d3a:	65d5      	str	r5, [r2, #92]	; 0x5c
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 8001d3c:	662a      	str	r2, [r5, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 8001d3e:	65eb      	str	r3, [r5, #92]	; 0x5c
    media_ptr -> fx_media_opened_file_count++;
 8001d40:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    FX_UNPROTECT
 8001d44:	4658      	mov	r0, fp
    media_ptr -> fx_media_opened_file_count++;
 8001d46:	3301      	adds	r3, #1
 8001d48:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    FX_UNPROTECT
 8001d4c:	f008 f9ea 	bl	800a124 <_tx_mutex_put>
    return(FX_SUCCESS);
 8001d50:	e74a      	b.n	8001be8 <_fx_file_open+0x190>
        if (media_ptr -> fx_media_driver_write_protect)
 8001d52:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d13f      	bne.n	8001dda <_fx_file_open+0x382>
        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8001d5a:	07db      	lsls	r3, r3, #31
 8001d5c:	d41d      	bmi.n	8001d9a <_fx_file_open+0x342>
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8001d5e:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
        while (open_count)
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	f43f aec1 	beq.w	8001aea <_fx_file_open+0x92>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8001d68:	46dc      	mov	ip, fp
 8001d6a:	46a1      	mov	r9, r4
 8001d6c:	e9d5 012a 	ldrd	r0, r1, [r5, #168]	; 0xa8
 8001d70:	e002      	b.n	8001d78 <_fx_file_open+0x320>
        while (open_count)
 8001d72:	3a01      	subs	r2, #1
            search_ptr =  search_ptr -> fx_file_opened_next;
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        while (open_count)
 8001d76:	d03a      	beq.n	8001dee <_fx_file_open+0x396>
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8001d78:	e9d3 ab2a 	ldrd	sl, fp, [r3, #168]	; 0xa8
 8001d7c:	458b      	cmp	fp, r1
 8001d7e:	bf08      	it	eq
 8001d80:	4582      	cmpeq	sl, r0
 8001d82:	d1f6      	bne.n	8001d72 <_fx_file_open+0x31a>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8001d84:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001d88:	46a6      	mov	lr, r4
 8001d8a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 8001d8e:	45a6      	cmp	lr, r4
 8001d90:	d1ef      	bne.n	8001d72 <_fx_file_open+0x31a>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8001d92:	689c      	ldr	r4, [r3, #8]
 8001d94:	2c01      	cmp	r4, #1
 8001d96:	d1ec      	bne.n	8001d72 <_fx_file_open+0x31a>
 8001d98:	46e3      	mov	fp, ip
                FX_UNPROTECT
 8001d9a:	4658      	mov	r0, fp
                return(FX_ACCESS_ERROR);
 8001d9c:	2706      	movs	r7, #6
                FX_UNPROTECT
 8001d9e:	f008 f9c1 	bl	800a124 <_tx_mutex_put>
                return(FX_ACCESS_ERROR);
 8001da2:	e721      	b.n	8001be8 <_fx_file_open+0x190>
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8001da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        file_ptr -> fx_file_current_file_offset =       0;
 8001da6:	2000      	movs	r0, #0
        file_ptr -> fx_file_current_relative_cluster =  0;
 8001da8:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
        file_ptr -> fx_file_current_file_offset =       0;
 8001dac:	2100      	movs	r1, #0
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8001dae:	1e9e      	subs	r6, r3, #2
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8001db0:	622b      	str	r3, [r5, #32]
        file_ptr -> fx_file_current_relative_sector =   0;
 8001db2:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8001db6:	fba6 230c 	umull	r2, r3, r6, ip
        file_ptr -> fx_file_current_logical_offset =    0;
 8001dba:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8001dbe:	46c8      	mov	r8, r9
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8001dc0:	fb06 330e 	mla	r3, r6, lr, r3
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8001dc4:	eb18 0802 	adds.w	r8, r8, r2
 8001dc8:	eb4a 0903 	adc.w	r9, sl, r3
 8001dcc:	4642      	mov	r2, r8
 8001dce:	464b      	mov	r3, r9
        file_ptr -> fx_file_current_file_offset =       0;
 8001dd0:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8001dd4:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
 8001dd8:	e7a9      	b.n	8001d2e <_fx_file_open+0x2d6>
            FX_UNPROTECT
 8001dda:	4658      	mov	r0, fp
            return(FX_WRITE_PROTECT);
 8001ddc:	2723      	movs	r7, #35	; 0x23
            FX_UNPROTECT
 8001dde:	f008 f9a1 	bl	800a124 <_tx_mutex_put>
            return(FX_WRITE_PROTECT);
 8001de2:	e701      	b.n	8001be8 <_fx_file_open+0x190>
        FX_UNPROTECT
 8001de4:	4658      	mov	r0, fp
        return(FX_NOT_A_FILE);
 8001de6:	2705      	movs	r7, #5
        FX_UNPROTECT
 8001de8:	f008 f99c 	bl	800a124 <_tx_mutex_put>
        return(FX_NOT_A_FILE);
 8001dec:	e6fc      	b.n	8001be8 <_fx_file_open+0x190>
 8001dee:	46e3      	mov	fp, ip
 8001df0:	464c      	mov	r4, r9
 8001df2:	e67a      	b.n	8001aea <_fx_file_open+0x92>
        FX_UNPROTECT
 8001df4:	4658      	mov	r0, fp
        return(FX_MEDIA_INVALID);
 8001df6:	2702      	movs	r7, #2
        FX_UNPROTECT
 8001df8:	f008 f994 	bl	800a124 <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 8001dfc:	e6f4      	b.n	8001be8 <_fx_file_open+0x190>
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 8001dfe:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 8001e02:	65ed      	str	r5, [r5, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 8001e04:	662d      	str	r5, [r5, #96]	; 0x60
 8001e06:	e79b      	b.n	8001d40 <_fx_file_open+0x2e8>
 8001e08:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
                    return(FX_FAT_READ_ERROR);
 8001e0c:	2703      	movs	r7, #3
                    FX_UNPROTECT
 8001e0e:	4658      	mov	r0, fp
 8001e10:	f008 f988 	bl	800a124 <_tx_mutex_put>
                    return(FX_FAT_READ_ERROR);
 8001e14:	e6e8      	b.n	8001be8 <_fx_file_open+0x190>
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8001e16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e18:	4643      	mov	r3, r8
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 8001e1a:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8001e1e:	f04f 0e00 	mov.w	lr, #0
 8001e22:	9709      	str	r7, [sp, #36]	; 0x24
 8001e24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8001e26:	910e      	str	r1, [sp, #56]	; 0x38
 8001e28:	fba1 010c 	umull	r0, r1, r1, ip
 8001e2c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8001e30:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001e34:	fba0 9a03 	umull	r9, sl, r0, r3
 8001e38:	fb03 a101 	mla	r1, r3, r1, sl
 8001e3c:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 8001e40:	9107      	str	r1, [sp, #28]
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8001e42:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 8001e46:	e9d5 0128 	ldrd	r0, r1, [r5, #160]	; 0xa0
 8001e4a:	458a      	cmp	sl, r1
 8001e4c:	bf08      	it	eq
 8001e4e:	4581      	cmpeq	r9, r0
 8001e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001e54:	d328      	bcc.n	8001ea8 <_fx_file_open+0x450>
 8001e56:	b113      	cbz	r3, 8001e5e <_fx_file_open+0x406>
                ((cluster_count) && (contents < fat_last)))
 8001e58:	9904      	ldr	r1, [sp, #16]
 8001e5a:	428a      	cmp	r2, r1
 8001e5c:	d324      	bcc.n	8001ea8 <_fx_file_open+0x450>
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8001e5e:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 8001e62:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001e64:	9209      	str	r2, [sp, #36]	; 0x24
 8001e66:	e702      	b.n	8001c6e <_fx_file_open+0x216>
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8001e68:	f110 30ff 	adds.w	r0, r0, #4294967295
 8001e6c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001e6e:	4613      	mov	r3, r2
 8001e70:	f141 31ff 	adc.w	r1, r1, #4294967295
 8001e74:	4632      	mov	r2, r6
 8001e76:	f7fe faf7 	bl	8000468 <__aeabi_uldivmod>
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8001e7a:	632e      	str	r6, [r5, #48]	; 0x30
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8001e7c:	63a8      	str	r0, [r5, #56]	; 0x38
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8001e7e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8001e82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8001e86:	eb18 0800 	adds.w	r8, r8, r0
 8001e8a:	eb49 0901 	adc.w	r9, r9, r1
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8001e8e:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8001e92:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
 8001e96:	e74a      	b.n	8001d2e <_fx_file_open+0x2d6>
 8001e98:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8001e9c:	4601      	mov	r1, r0
                    FX_UNPROTECT
 8001e9e:	4658      	mov	r0, fp
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8001ea0:	460f      	mov	r7, r1
                    FX_UNPROTECT
 8001ea2:	f008 f93f 	bl	800a124 <_tx_mutex_put>
                    return(status);
 8001ea6:	e69f      	b.n	8001be8 <_fx_file_open+0x190>
                FX_UNPROTECT
 8001ea8:	4658      	mov	r0, fp
                return(FX_FILE_CORRUPT);
 8001eaa:	2708      	movs	r7, #8
                FX_UNPROTECT
 8001eac:	f008 f93a 	bl	800a124 <_tx_mutex_put>
                return(FX_FILE_CORRUPT);
 8001eb0:	e69a      	b.n	8001be8 <_fx_file_open+0x190>
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8001eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001eb6:	ea52 0103 	orrs.w	r1, r2, r3
 8001eba:	d1f5      	bne.n	8001ea8 <_fx_file_open+0x450>
 8001ebc:	f04f 0e00 	mov.w	lr, #0
 8001ec0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8001ec4:	e9cd 2306 	strd	r2, r3, [sp, #24]
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8001ec8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001ecc:	4673      	mov	r3, lr
 8001ece:	e6ce      	b.n	8001c6e <_fx_file_open+0x216>
 8001ed0:	46494c45 	.word	0x46494c45

08001ed4 <_fx_file_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8001ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed8:	4605      	mov	r5, r0
 8001eda:	b08f      	sub	sp, #60	; 0x3c
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8001edc:	48ac      	ldr	r0, [pc, #688]	; (8002190 <_fx_file_read+0x2bc>)
{
 8001ede:	9205      	str	r2, [sp, #20]
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8001ee0:	682a      	ldr	r2, [r5, #0]
{
 8001ee2:	9308      	str	r3, [sp, #32]
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8001ee4:	4282      	cmp	r2, r0
 8001ee6:	d10f      	bne.n	8001f08 <_fx_file_read+0x34>
        return(FX_NOT_OPEN);
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8001ee8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8001eea:	468a      	mov	sl, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8001eec:	4aa9      	ldr	r2, [pc, #676]	; (8002194 <_fx_file_read+0x2c0>)
    media_ptr -> fx_media_file_reads++;
 8001eee:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    FX_PROTECT
 8001ef2:	6821      	ldr	r1, [r4, #0]
    media_ptr -> fx_media_file_reads++;
 8001ef4:	3301      	adds	r3, #1
    FX_PROTECT
 8001ef6:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_reads++;
 8001ef8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    FX_PROTECT
 8001efc:	d009      	beq.n	8001f12 <_fx_file_read+0x3e>
 8001efe:	2211      	movs	r2, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
}
 8001f00:	4610      	mov	r0, r2
 8001f02:	b00f      	add	sp, #60	; 0x3c
 8001f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 8001f08:	2207      	movs	r2, #7
}
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	b00f      	add	sp, #60	; 0x3c
 8001f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8001f12:	f504 73e4 	add.w	r3, r4, #456	; 0x1c8
 8001f16:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f1e:	f008 f817 	bl	8009f50 <_tx_mutex_get>
 8001f22:	4680      	mov	r8, r0
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1ea      	bne.n	8001efe <_fx_file_read+0x2a>
    if (file_ptr -> fx_file_current_file_offset >=
 8001f28:	e9d5 bc10 	ldrd	fp, ip, [r5, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 8001f2c:	e9d5 6712 	ldrd	r6, r7, [r5, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 8001f30:	45bc      	cmp	ip, r7
 8001f32:	bf08      	it	eq
 8001f34:	45b3      	cmpeq	fp, r6
 8001f36:	f080 8131 	bcs.w	800219c <_fx_file_read+0x2c8>
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 8001f3a:	ebb6 080b 	subs.w	r8, r6, fp
    if ((ULONG64)request_size >
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	9b05      	ldr	r3, [sp, #20]
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 8001f44:	eb67 090c 	sbc.w	r9, r7, ip
    if ((ULONG64)request_size >
 8001f48:	4589      	cmp	r9, r1
 8001f4a:	bf08      	it	eq
 8001f4c:	4598      	cmpeq	r8, r3
 8001f4e:	d202      	bcs.n	8001f56 <_fx_file_read+0x82>
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 8001f50:	eba6 030b 	sub.w	r3, r6, fp
 8001f54:	9305      	str	r3, [sp, #20]
    while (bytes_remaining)
 8001f56:	9f05      	ldr	r7, [sp, #20]
 8001f58:	2f00      	cmp	r7, #0
 8001f5a:	d033      	beq.n	8001fc4 <_fx_file_read+0xf0>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8001f5c:	f242 48a8 	movw	r8, #9384	; 0x24a8
 8001f60:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001f62:	44a0      	add	r8, r4
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8001f64:	b91a      	cbnz	r2, 8001f6e <_fx_file_read+0x9a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8001f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8001f68:	42bb      	cmp	r3, r7
 8001f6a:	f240 80a5 	bls.w	80020b8 <_fx_file_read+0x1e4>
            status =  _fx_utility_logical_sector_read(media_ptr,
 8001f6e:	2204      	movs	r2, #4
 8001f70:	2301      	movs	r3, #1
 8001f72:	4620      	mov	r0, r4
 8001f74:	9202      	str	r2, [sp, #8]
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	68a1      	ldr	r1, [r4, #8]
 8001f7a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8001f7e:	9100      	str	r1, [sp, #0]
 8001f80:	f001 ffe4 	bl	8003f4c <_fx_utility_logical_sector_read>
            if (status !=  FX_SUCCESS)
 8001f84:	2800      	cmp	r0, #0
 8001f86:	f040 80c0 	bne.w	800210a <_fx_file_read+0x236>
                file_ptr -> fx_file_current_logical_offset;
 8001f8a:	6b28      	ldr	r0, [r5, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8001f8c:	4651      	mov	r1, sl
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8001f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8001f90:	68a3      	ldr	r3, [r4, #8]
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8001f92:	1a36      	subs	r6, r6, r0
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8001f94:	4418      	add	r0, r3
 8001f96:	42be      	cmp	r6, r7
 8001f98:	bf28      	it	cs
 8001f9a:	463e      	movcs	r6, r7
 8001f9c:	4632      	mov	r2, r6
            bytes_remaining =  bytes_remaining - copy_bytes;
 8001f9e:	1bbf      	subs	r7, r7, r6
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8001fa0:	f002 fa70 	bl	8004484 <_fx_utility_memory_copy>
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8001fa4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8001fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            destination_ptr =  destination_ptr + copy_bytes;
 8001fa8:	44b2      	add	sl, r6
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8001faa:	4432      	add	r2, r6
        if (file_ptr -> fx_file_current_logical_offset >=
 8001fac:	429a      	cmp	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 8001fae:	632a      	str	r2, [r5, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8001fb0:	d260      	bcs.n	8002074 <_fx_file_read+0x1a0>
    while (bytes_remaining)
 8001fb2:	2f00      	cmp	r7, #0
 8001fb4:	d1d6      	bne.n	8001f64 <_fx_file_read+0x90>
 8001fb6:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 8001fba:	9905      	ldr	r1, [sp, #20]
 8001fbc:	eb12 0b01 	adds.w	fp, r2, r1
 8001fc0:	f143 0c00 	adc.w	ip, r3, #0
    *actual_size =  request_size;
 8001fc4:	9b08      	ldr	r3, [sp, #32]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8001fc6:	4974      	ldr	r1, [pc, #464]	; (8002198 <_fx_file_read+0x2c4>)
    *actual_size =  request_size;
 8001fc8:	461a      	mov	r2, r3
 8001fca:	9b05      	ldr	r3, [sp, #20]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8001fcc:	6809      	ldr	r1, [r1, #0]
    FX_UNPROTECT
 8001fce:	9809      	ldr	r0, [sp, #36]	; 0x24
    file_ptr -> fx_file_current_file_offset =
 8001fd0:	e9c5 bc10 	strd	fp, ip, [r5, #64]	; 0x40
    *actual_size =  request_size;
 8001fd4:	6013      	str	r3, [r2, #0]
    return(FX_SUCCESS);
 8001fd6:	2200      	movs	r2, #0
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8001fd8:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
    return(FX_SUCCESS);
 8001fdc:	9205      	str	r2, [sp, #20]
    FX_UNPROTECT
 8001fde:	f008 f8a1 	bl	800a124 <_tx_mutex_put>
    return(FX_SUCCESS);
 8001fe2:	9a05      	ldr	r2, [sp, #20]
 8001fe4:	e78c      	b.n	8001f00 <_fx_file_read+0x2c>
 8001fe6:	9b06      	ldr	r3, [sp, #24]
 8001fe8:	4645      	mov	r5, r8
 8001fea:	464e      	mov	r6, r9
 8001fec:	46b8      	mov	r8, r7
 8001fee:	455b      	cmp	r3, fp
 8001ff0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001ff2:	bf28      	it	cs
 8001ff4:	465b      	movcs	r3, fp
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	9306      	str	r3, [sp, #24]
            if (sectors == 1)
 8001ffa:	2901      	cmp	r1, #1
 8001ffc:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8002000:	f000 80d6 	beq.w	80021b0 <_fx_file_read+0x2dc>
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 8002004:	f8d5 01d8 	ldr.w	r0, [r5, #472]	; 0x1d8
 8002008:	f242 4ba4 	movw	fp, #9380	; 0x24a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800200c:	f04f 0c04 	mov.w	ip, #4
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 8002010:	f844 000b 	str.w	r0, [r4, fp]
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8002014:	4620      	mov	r0, r4
 8002016:	9101      	str	r1, [sp, #4]
 8002018:	f8cd a000 	str.w	sl, [sp]
 800201c:	f8cd c008 	str.w	ip, [sp, #8]
 8002020:	f001 ff94 	bl	8003f4c <_fx_utility_logical_sector_read>
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 8002024:	2300      	movs	r3, #0
 8002026:	f844 300b 	str.w	r3, [r4, fp]
                if (status !=  FX_SUCCESS)
 800202a:	2800      	cmp	r0, #0
 800202c:	d16d      	bne.n	800210a <_fx_file_read+0x236>
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800202e:	6bab      	ldr	r3, [r5, #56]	; 0x38
                (sectors - 1);
 8002030:	9906      	ldr	r1, [sp, #24]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8002032:	3b01      	subs	r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8002034:	6d60      	ldr	r0, [r4, #84]	; 0x54
                media_ptr -> fx_media_bytes_per_sector;
 8002036:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                (sectors - 1);
 8002038:	f101 3cff 	add.w	ip, r1, #4294967295
            file_ptr -> fx_file_current_physical_cluster = cluster;
 800203c:	622e      	str	r6, [r5, #32]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800203e:	185e      	adds	r6, r3, r1
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8002040:	fb01 f902 	mul.w	r9, r1, r2
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8002044:	6b69      	ldr	r1, [r5, #52]	; 0x34
            file_ptr -> fx_file_current_logical_offset =
 8002046:	632a      	str	r2, [r5, #48]	; 0x30
            bytes_remaining =  bytes_remaining -
 8002048:	eba7 0709 	sub.w	r7, r7, r9
            destination_ptr =  destination_ptr +
 800204c:	44ca      	add	sl, r9
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800204e:	fbb6 fef0 	udiv	lr, r6, r0
                file_ptr -> fx_file_current_logical_sector +
 8002052:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 8002056:	fb00 691e 	mls	r9, r0, lr, r6
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800205a:	eb01 060e 	add.w	r6, r1, lr
                file_ptr -> fx_file_current_logical_sector +
 800205e:	eb12 000c 	adds.w	r0, r2, ip
            file_ptr -> fx_file_current_relative_sector =
 8002062:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
                file_ptr -> fx_file_current_logical_sector +
 8002066:	f143 0100 	adc.w	r1, r3, #0
 800206a:	4602      	mov	r2, r0
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800206c:	636e      	str	r6, [r5, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector +
 800206e:	460b      	mov	r3, r1
            file_ptr -> fx_file_current_logical_sector =
 8002070:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 8002074:	b967      	cbnz	r7, 8002090 <_fx_file_read+0x1bc>
 8002076:	9e05      	ldr	r6, [sp, #20]
 8002078:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 800207c:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	; 0x50
 8002080:	eb12 0b06 	adds.w	fp, r2, r6
 8002084:	f143 0c00 	adc.w	ip, r3, #0
 8002088:	458c      	cmp	ip, r1
 800208a:	bf08      	it	eq
 800208c:	4583      	cmpeq	fp, r0
 800208e:	d299      	bcs.n	8001fc4 <_fx_file_read+0xf0>
            file_ptr -> fx_file_current_relative_sector++;
 8002090:	6bab      	ldr	r3, [r5, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8002092:	6d62      	ldr	r2, [r4, #84]	; 0x54
            file_ptr -> fx_file_current_relative_sector++;
 8002094:	3301      	adds	r3, #1
            if (file_ptr -> fx_file_current_relative_sector >=
 8002096:	4293      	cmp	r3, r2
            file_ptr -> fx_file_current_relative_sector++;
 8002098:	63ab      	str	r3, [r5, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 800209a:	d23c      	bcs.n	8002116 <_fx_file_read+0x242>
                file_ptr -> fx_file_current_logical_sector++;
 800209c:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 80020a0:	1c50      	adds	r0, r2, #1
 80020a2:	f143 0100 	adc.w	r1, r3, #0
 80020a6:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =  0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	461a      	mov	r2, r3
 80020ae:	632b      	str	r3, [r5, #48]	; 0x30
    while (bytes_remaining)
 80020b0:	2f00      	cmp	r7, #0
 80020b2:	f47f af57 	bne.w	8001f64 <_fx_file_read+0x90>
 80020b6:	e77e      	b.n	8001fb6 <_fx_file_read+0xe2>
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80020b8:	fbb7 f3f3 	udiv	r3, r7, r3
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80020bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80020be:	6baa      	ldr	r2, [r5, #56]	; 0x38
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80020c0:	f8d5 9020 	ldr.w	r9, [r5, #32]
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80020c4:	eba1 0b02 	sub.w	fp, r1, r2
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80020c8:	9306      	str	r3, [sp, #24]
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80020ca:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80020ce:	455b      	cmp	r3, fp
 80020d0:	d97f      	bls.n	80021d2 <_fx_file_read+0x2fe>
 80020d2:	970a      	str	r7, [sp, #40]	; 0x28
 80020d4:	4647      	mov	r7, r8
 80020d6:	46a8      	mov	r8, r5
 80020d8:	461d      	mov	r5, r3
 80020da:	e00d      	b.n	80020f8 <_fx_file_read+0x224>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80020dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80020de:	2e01      	cmp	r6, #1
 80020e0:	d94a      	bls.n	8002178 <_fx_file_read+0x2a4>
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	428e      	cmp	r6, r1
 80020e6:	d847      	bhi.n	8002178 <_fx_file_read+0x2a4>
                    if (next_cluster != cluster + 1)
 80020e8:	4296      	cmp	r6, r2
 80020ea:	f47f af7c 	bne.w	8001fe6 <_fx_file_read+0x112>
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80020ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80020f0:	46b1      	mov	r9, r6
 80020f2:	4493      	add	fp, r2
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80020f4:	455d      	cmp	r5, fp
 80020f6:	d946      	bls.n	8002186 <_fx_file_read+0x2b2>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80020f8:	aa0d      	add	r2, sp, #52	; 0x34
 80020fa:	4649      	mov	r1, r9
 80020fc:	4620      	mov	r0, r4
 80020fe:	f001 f821 	bl	8003144 <_fx_utility_FAT_entry_read>
                    if (next_cluster != cluster + 1)
 8002102:	f109 0201 	add.w	r2, r9, #1
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8002106:	2800      	cmp	r0, #0
 8002108:	d0e8      	beq.n	80020dc <_fx_file_read+0x208>
 800210a:	9005      	str	r0, [sp, #20]
                        FX_UNPROTECT
 800210c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800210e:	f008 f809 	bl	800a124 <_tx_mutex_put>
 8002112:	9a05      	ldr	r2, [sp, #20]
 8002114:	e6f4      	b.n	8001f00 <_fx_file_read+0x2c>
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8002116:	aa0d      	add	r2, sp, #52	; 0x34
 8002118:	6a29      	ldr	r1, [r5, #32]
 800211a:	4620      	mov	r0, r4
 800211c:	f001 f812 	bl	8003144 <_fx_utility_FAT_entry_read>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8002120:	2800      	cmp	r0, #0
 8002122:	d1f2      	bne.n	800210a <_fx_file_read+0x236>
 8002124:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002126:	2901      	cmp	r1, #1
 8002128:	d956      	bls.n	80021d8 <_fx_file_read+0x304>
 800212a:	f8d8 3000 	ldr.w	r3, [r8]
 800212e:	4299      	cmp	r1, r3
 8002130:	d852      	bhi.n	80021d8 <_fx_file_read+0x304>
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8002132:	f1b1 0b02 	subs.w	fp, r1, #2
 8002136:	f04f 0300 	mov.w	r3, #0
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800213a:	6d66      	ldr	r6, [r4, #84]	; 0x54
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800213c:	f143 3cff 	adc.w	ip, r3, #4294967295
 8002140:	465a      	mov	r2, fp
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 8002142:	6229      	str	r1, [r5, #32]
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8002144:	4663      	mov	r3, ip
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002146:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
                file_ptr -> fx_file_current_relative_sector =  0;
 800214a:	63a8      	str	r0, [r5, #56]	; 0x38
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800214c:	fbab 0106 	umull	r0, r1, fp, r6
 8002150:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                file_ptr -> fx_file_current_relative_cluster++;
 8002156:	6b6a      	ldr	r2, [r5, #52]	; 0x34
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8002158:	fb06 1303 	mla	r3, r6, r3, r1
                file_ptr -> fx_file_current_relative_cluster++;
 800215c:	3201      	adds	r2, #1
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800215e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002162:	9307      	str	r3, [sp, #28]
                file_ptr -> fx_file_current_relative_cluster++;
 8002164:	636a      	str	r2, [r5, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800216a:	eb10 000c 	adds.w	r0, r0, ip
 800216e:	f141 0100 	adc.w	r1, r1, #0
 8002172:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
 8002176:	e798      	b.n	80020aa <_fx_file_read+0x1d6>
                            return(FX_FILE_CORRUPT);
 8002178:	2208      	movs	r2, #8
                        FX_UNPROTECT
 800217a:	9809      	ldr	r0, [sp, #36]	; 0x24
                            return(FX_FILE_CORRUPT);
 800217c:	9205      	str	r2, [sp, #20]
                        FX_UNPROTECT
 800217e:	f007 ffd1 	bl	800a124 <_tx_mutex_put>
 8002182:	9a05      	ldr	r2, [sp, #20]
 8002184:	e6bc      	b.n	8001f00 <_fx_file_read+0x2c>
 8002186:	4645      	mov	r5, r8
 8002188:	9906      	ldr	r1, [sp, #24]
 800218a:	46b8      	mov	r8, r7
 800218c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800218e:	e734      	b.n	8001ffa <_fx_file_read+0x126>
 8002190:	46494c45 	.word	0x46494c45
 8002194:	4d454449 	.word	0x4d454449
 8002198:	20003a14 	.word	0x20003a14
        return(FX_END_OF_FILE);
 800219c:	2209      	movs	r2, #9
        FX_UNPROTECT
 800219e:	9809      	ldr	r0, [sp, #36]	; 0x24
        return(FX_END_OF_FILE);
 80021a0:	9205      	str	r2, [sp, #20]
        FX_UNPROTECT
 80021a2:	f007 ffbf 	bl	800a124 <_tx_mutex_put>
        *actual_size =  0;
 80021a6:	9b08      	ldr	r3, [sp, #32]
        return(FX_END_OF_FILE);
 80021a8:	9a05      	ldr	r2, [sp, #20]
        *actual_size =  0;
 80021aa:	f8c3 8000 	str.w	r8, [r3]
        return(FX_END_OF_FILE);
 80021ae:	e6a7      	b.n	8001f00 <_fx_file_read+0x2c>
 80021b0:	4608      	mov	r0, r1
                status =  _fx_utility_logical_sector_read(media_ptr,
 80021b2:	2104      	movs	r1, #4
 80021b4:	9001      	str	r0, [sp, #4]
 80021b6:	4620      	mov	r0, r4
 80021b8:	9102      	str	r1, [sp, #8]
 80021ba:	68a1      	ldr	r1, [r4, #8]
 80021bc:	9100      	str	r1, [sp, #0]
 80021be:	f001 fec5 	bl	8003f4c <_fx_utility_logical_sector_read>
                if (status !=  FX_SUCCESS)
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d1a1      	bne.n	800210a <_fx_file_read+0x236>
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector);
 80021c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021c8:	4651      	mov	r1, sl
 80021ca:	68a0      	ldr	r0, [r4, #8]
 80021cc:	f002 f95a 	bl	8004484 <_fx_utility_memory_copy>
 80021d0:	e72d      	b.n	800202e <_fx_file_read+0x15a>
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80021d2:	464e      	mov	r6, r9
 80021d4:	4619      	mov	r1, r3
 80021d6:	e710      	b.n	8001ffa <_fx_file_read+0x126>
                            return(FX_FILE_CORRUPT);
 80021d8:	2208      	movs	r2, #8
                        FX_UNPROTECT
 80021da:	9809      	ldr	r0, [sp, #36]	; 0x24
                            return(FX_FILE_CORRUPT);
 80021dc:	9205      	str	r2, [sp, #20]
                        FX_UNPROTECT
 80021de:	f007 ffa1 	bl	800a124 <_tx_mutex_put>
 80021e2:	9a05      	ldr	r2, [sp, #20]
 80021e4:	e68c      	b.n	8001f00 <_fx_file_read+0x2c>
 80021e6:	bf00      	nop

080021e8 <_fx_file_seek>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 80021e8:	460a      	mov	r2, r1
 80021ea:	2300      	movs	r3, #0
 80021ec:	f003 bd74 	b.w	8005cd8 <_fx_file_extended_seek>

080021f0 <_fx_file_write>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 80021f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <_fx_file_write+0x1a8>)
{
 80021f6:	460f      	mov	r7, r1
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80021f8:	6801      	ldr	r1, [r0, #0]
{
 80021fa:	b08f      	sub	sp, #60	; 0x3c
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80021fc:	4299      	cmp	r1, r3
 80021fe:	d123      	bne.n	8002248 <_fx_file_write+0x58>
        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8002200:	6d85      	ldr	r5, [r0, #88]	; 0x58

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8002202:	4692      	mov	sl, r2
 8002204:	f04f 0b00 	mov.w	fp, #0
 8002208:	4604      	mov	r4, r0
 800220a:	f04f 0900 	mov.w	r9, #0
    media_ptr -> fx_media_file_writes++;
 800220e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8002212:	f04f 38ff 	mov.w	r8, #4294967295
    media_ptr -> fx_media_file_writes++;
 8002216:	3301      	adds	r3, #1
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8002218:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
 800221c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002220:	eb12 0a00 	adds.w	sl, r2, r0
    media_ptr -> fx_media_file_writes++;
 8002224:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8002228:	eb4b 0b01 	adc.w	fp, fp, r1
 800222c:	45d9      	cmp	r9, fp
 800222e:	bf08      	it	eq
 8002230:	45d0      	cmpeq	r8, sl
 8002232:	d30f      	bcc.n	8002254 <_fx_file_write+0x64>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <_fx_file_write+0x1ac>)
 8002236:	6829      	ldr	r1, [r5, #0]
 8002238:	4299      	cmp	r1, r3
 800223a:	d011      	beq.n	8002260 <_fx_file_write+0x70>
 800223c:	f04f 0b11 	mov.w	fp, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
}
 8002240:	4658      	mov	r0, fp
 8002242:	b00f      	add	sp, #60	; 0x3c
 8002244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 8002248:	f04f 0b07 	mov.w	fp, #7
}
 800224c:	4658      	mov	r0, fp
 800224e:	b00f      	add	sp, #60	; 0x3c
 8002250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NO_MORE_SPACE);
 8002254:	f04f 0b0a 	mov.w	fp, #10
}
 8002258:	4658      	mov	r0, fp
 800225a:	b00f      	add	sp, #60	; 0x3c
 800225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8002260:	f505 73e4 	add.w	r3, r5, #456	; 0x1c8
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	9206      	str	r2, [sp, #24]
 800226a:	4618      	mov	r0, r3
 800226c:	9308      	str	r3, [sp, #32]
 800226e:	f007 fe6f 	bl	8009f50 <_tx_mutex_get>
 8002272:	2800      	cmp	r0, #0
 8002274:	d1e2      	bne.n	800223c <_fx_file_write+0x4c>
    if (media_ptr -> fx_media_driver_write_protect)
 8002276:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800227a:	9a06      	ldr	r2, [sp, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 8221 	bne.w	80026c4 <_fx_file_write+0x4d4>
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 8002282:	68a1      	ldr	r1, [r4, #8]
 8002284:	2901      	cmp	r1, #1
 8002286:	f040 8081 	bne.w	800238c <_fx_file_write+0x19c>
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800228a:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
 800228e:	6d6e      	ldr	r6, [r5, #84]	; 0x54
 8002290:	fb06 f60e 	mul.w	r6, r6, lr
    if (bytes_per_cluster == 0)
 8002294:	2e00      	cmp	r6, #0
 8002296:	d073      	beq.n	8002380 <_fx_file_write+0x190>
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 8002298:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 800229c:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
 80022a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80022a4:	ebb0 0008 	subs.w	r0, r0, r8
 80022a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80022ac:	eb61 0109 	sbc.w	r1, r1, r9
 80022b0:	4559      	cmp	r1, fp
 80022b2:	bf08      	it	eq
 80022b4:	4550      	cmpeq	r0, sl
 80022b6:	f080 80c5 	bcs.w	8002444 <_fx_file_write+0x254>
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 80022ba:	1e50      	subs	r0, r2, #1
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 80022bc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 80022c0:	4430      	add	r0, r6
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 80022c2:	ebb8 0101 	subs.w	r1, r8, r1
 80022c6:	eb69 0202 	sbc.w	r2, r9, r2
 80022ca:	eb11 0800 	adds.w	r8, r1, r0
 80022ce:	4693      	mov	fp, r2
 80022d0:	4640      	mov	r0, r8
 80022d2:	4632      	mov	r2, r6
 80022d4:	f14b 0900 	adc.w	r9, fp, #0
 80022d8:	4649      	mov	r1, r9
 80022da:	f7fe f8c5 	bl	8000468 <__aeabi_uldivmod>
 80022de:	4682      	mov	sl, r0
        if (clusters > media_ptr -> fx_media_available_clusters)
 80022e0:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 80022e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
        if (clusters > media_ptr -> fx_media_available_clusters)
 80022e6:	4550      	cmp	r0, sl
 80022e8:	f0c0 8218 	bcc.w	800271c <_fx_file_write+0x52c>
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 80022ec:	4652      	mov	r2, sl
 80022ee:	2300      	movs	r3, #0
 80022f0:	fbaa 8906 	umull	r8, r9, sl, r6
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 80022f4:	6921      	ldr	r1, [r4, #16]
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 80022f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80022fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 80022fc:	4451      	add	r1, sl
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 80022fe:	fb06 9903 	mla	r9, r6, r3, r9
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8002302:	6121      	str	r1, [r4, #16]
 8002304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002308:	eb12 0208 	adds.w	r2, r2, r8
 800230c:	f04f 38ff 	mov.w	r8, #4294967295
 8002310:	eb43 0309 	adc.w	r3, r3, r9
 8002314:	f04f 0900 	mov.w	r9, #0
 8002318:	4599      	cmp	r9, r3
 800231a:	bf08      	it	eq
 800231c:	4590      	cmpeq	r8, r2
 800231e:	d201      	bcs.n	8002324 <_fx_file_write+0x134>
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 8002324:	eba0 000a 	sub.w	r0, r0, sl
        total_clusters =     media_ptr -> fx_media_total_clusters;
 8002328:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800232c:	f8d4 901c 	ldr.w	r9, [r4, #28]
        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8002330:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 8002334:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 8002338:	67e8      	str	r0, [r5, #124]	; 0x7c
        while (clusters)
 800233a:	f1ba 0f00 	cmp.w	sl, #0
 800233e:	d06f      	beq.n	8002420 <_fx_file_write+0x230>
 8002340:	4623      	mov	r3, r4
    first_new_cluster =  0;
 8002342:	f04f 0a00 	mov.w	sl, #0
 8002346:	4644      	mov	r4, r8
 8002348:	4698      	mov	r8, r3
                    if (!total_clusters)
 800234a:	b964      	cbnz	r4, 8002366 <_fx_file_write+0x176>
 800234c:	e1e6      	b.n	800271c <_fx_file_write+0x52c>
 800234e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002350:	1c71      	adds	r1, r6, #1
                    if (FAT_value == FX_FREE_CLUSTER)
 8002352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002354:	3302      	adds	r3, #2
 8002356:	b31a      	cbz	r2, 80023a0 <_fx_file_write+0x1b0>
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8002358:	428b      	cmp	r3, r1
 800235a:	bf8c      	ite	hi
 800235c:	460e      	movhi	r6, r1
 800235e:	2602      	movls	r6, #2
                    if (!total_clusters)
 8002360:	2c00      	cmp	r4, #0
 8002362:	f000 81db 	beq.w	800271c <_fx_file_write+0x52c>
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8002366:	aa0d      	add	r2, sp, #52	; 0x34
 8002368:	4631      	mov	r1, r6
 800236a:	4628      	mov	r0, r5
                    total_clusters--;
 800236c:	3c01      	subs	r4, #1
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800236e:	f000 fee9 	bl	8003144 <_fx_utility_FAT_entry_read>
                    if (status != FX_SUCCESS)
 8002372:	2800      	cmp	r0, #0
 8002374:	d0eb      	beq.n	800234e <_fx_file_write+0x15e>
 8002376:	4683      	mov	fp, r0
                        FX_UNPROTECT
 8002378:	9808      	ldr	r0, [sp, #32]
 800237a:	f007 fed3 	bl	800a124 <_tx_mutex_put>
 800237e:	e75f      	b.n	8002240 <_fx_file_write+0x50>
        FX_UNPROTECT
 8002380:	9808      	ldr	r0, [sp, #32]
        return(FX_MEDIA_INVALID);
 8002382:	f04f 0b02 	mov.w	fp, #2
        FX_UNPROTECT
 8002386:	f007 fecd 	bl	800a124 <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 800238a:	e759      	b.n	8002240 <_fx_file_write+0x50>
        FX_UNPROTECT
 800238c:	9808      	ldr	r0, [sp, #32]
        return(FX_ACCESS_ERROR);
 800238e:	f04f 0b06 	mov.w	fp, #6
        FX_UNPROTECT
 8002392:	f007 fec7 	bl	800a124 <_tx_mutex_put>
        return(FX_ACCESS_ERROR);
 8002396:	e753      	b.n	8002240 <_fx_file_write+0x50>
 8002398:	46494c45 	.word	0x46494c45
 800239c:	4d454449 	.word	0x4d454449
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80023a0:	428b      	cmp	r3, r1
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 80023a2:	bf98      	it	ls
 80023a4:	2102      	movls	r1, #2
 80023a6:	f1ba 0f00 	cmp.w	sl, #0
 80023aa:	bf08      	it	eq
 80023ac:	46b2      	moveq	sl, r6
 80023ae:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
            if (last_cluster)
 80023b2:	f1b9 0f00 	cmp.w	r9, #0
 80023b6:	f000 81c2 	beq.w	800273e <_fx_file_write+0x54e>
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 80023ba:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80023be:	454b      	cmp	r3, r9
 80023c0:	d006      	beq.n	80023d0 <_fx_file_write+0x1e0>
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 80023c2:	4649      	mov	r1, r9
 80023c4:	4632      	mov	r2, r6
 80023c6:	4628      	mov	r0, r5
 80023c8:	f001 f81c 	bl	8003404 <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d1d2      	bne.n	8002376 <_fx_file_write+0x186>
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 80023d0:	6d68      	ldr	r0, [r5, #84]	; 0x54
                if ((file_ptr -> fx_file_current_relative_sector >=
 80023d2:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 80023d6:	1e43      	subs	r3, r0, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 80023d8:	429a      	cmp	r2, r3
 80023da:	d317      	bcc.n	800240c <_fx_file_write+0x21c>
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 80023dc:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80023e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d312      	bcc.n	800240c <_fx_file_write+0x21c>
                    file_ptr -> fx_file_current_relative_cluster++;
 80023e6:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 80023ea:	f04f 0e00 	mov.w	lr, #0
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80023ee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 80023f0:	f1a6 0c02 	sub.w	ip, r6, #2
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80023f4:	2300      	movs	r3, #0
                    file_ptr -> fx_file_current_relative_cluster++;
 80023f6:	3101      	adds	r1, #1
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 80023f8:	f8c8 6020 	str.w	r6, [r8, #32]
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80023fc:	fbe0 230c 	umlal	r2, r3, r0, ip
                    file_ptr -> fx_file_current_relative_sector =   0;
 8002400:	f8c8 e038 	str.w	lr, [r8, #56]	; 0x38
                    file_ptr -> fx_file_current_relative_cluster++;
 8002404:	e9c8 e10c 	strd	lr, r1, [r8, #48]	; 0x30
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002408:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
        while (clusters)
 800240c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800240e:	46b1      	mov	r9, r6
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8002410:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
        while (clusters)
 8002414:	3b01      	subs	r3, #1
 8002416:	9309      	str	r3, [sp, #36]	; 0x24
 8002418:	d197      	bne.n	800234a <_fx_file_write+0x15a>
 800241a:	4644      	mov	r4, r8
 800241c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8002420:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8002424:	4649      	mov	r1, r9
 8002426:	4628      	mov	r0, r5
 8002428:	58ea      	ldr	r2, [r5, r3]
 800242a:	f000 ffeb 	bl	8003404 <_fx_utility_FAT_entry_write>
            if (status !=  FX_SUCCESS)
 800242e:	4683      	mov	fp, r0
 8002430:	2800      	cmp	r0, #0
 8002432:	d1a1      	bne.n	8002378 <_fx_file_write+0x188>
        if (file_ptr -> fx_file_last_physical_cluster)
 8002434:	69e1      	ldr	r1, [r4, #28]
 8002436:	2900      	cmp	r1, #0
 8002438:	f040 81a5 	bne.w	8002786 <_fx_file_write+0x596>
 800243c:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 8002440:	f8c4 901c 	str.w	r9, [r4, #28]
    if (file_ptr -> fx_file_current_logical_offset >=
 8002444:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002446:	4576      	cmp	r6, lr
 8002448:	d30c      	bcc.n	8002464 <_fx_file_write+0x274>
        file_ptr -> fx_file_current_relative_sector++;
 800244a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800244c:	2600      	movs	r6, #0
        file_ptr -> fx_file_current_logical_sector++;
 800244e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 8002452:	3101      	adds	r1, #1
        file_ptr -> fx_file_current_logical_offset =  0;
 8002454:	6326      	str	r6, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector++;
 8002456:	f112 0801 	adds.w	r8, r2, #1
        file_ptr -> fx_file_current_relative_sector++;
 800245a:	63a1      	str	r1, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_sector++;
 800245c:	f143 0900 	adc.w	r9, r3, #0
 8002460:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
    while (bytes_remaining)
 8002464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	d050      	beq.n	800250e <_fx_file_write+0x31e>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800246c:	f242 4aa8 	movw	sl, #9384	; 0x24a8
 8002470:	9706      	str	r7, [sp, #24]
    while (bytes_remaining)
 8002472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8002476:	44aa      	add	sl, r5
 8002478:	469b      	mov	fp, r3
 800247a:	4657      	mov	r7, sl
 800247c:	4692      	mov	sl, r2
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800247e:	b936      	cbnz	r6, 800248e <_fx_file_write+0x29e>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8002480:	2300      	movs	r3, #0
 8002482:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8002484:	459b      	cmp	fp, r3
 8002486:	bf08      	it	eq
 8002488:	4592      	cmpeq	sl, r2
 800248a:	f080 80f5 	bcs.w	8002678 <_fx_file_write+0x488>
                status =  _fx_utility_logical_sector_read(media_ptr,
 800248e:	f04f 0904 	mov.w	r9, #4
 8002492:	f04f 0801 	mov.w	r8, #1
 8002496:	4628      	mov	r0, r5
 8002498:	f8cd 9008 	str.w	r9, [sp, #8]
 800249c:	f8cd 8004 	str.w	r8, [sp, #4]
 80024a0:	68a9      	ldr	r1, [r5, #8]
 80024a2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80024a6:	9100      	str	r1, [sp, #0]
 80024a8:	f001 fd50 	bl	8003f4c <_fx_utility_logical_sector_read>
            if (status !=  FX_SUCCESS)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	f47f af62 	bne.w	8002376 <_fx_file_write+0x186>
                file_ptr -> fx_file_current_logical_offset;
 80024b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 80024b4:	6aae      	ldr	r6, [r5, #40]	; 0x28
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 80024b6:	68a9      	ldr	r1, [r5, #8]
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 80024b8:	1af6      	subs	r6, r6, r3
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 80024ba:	9806      	ldr	r0, [sp, #24]
 80024bc:	4419      	add	r1, r3
            if (copy_bytes > bytes_remaining)
 80024be:	2300      	movs	r3, #0
                copy_bytes =  (ULONG)bytes_remaining;
 80024c0:	459b      	cmp	fp, r3
 80024c2:	bf08      	it	eq
 80024c4:	45b2      	cmpeq	sl, r6
 80024c6:	bf38      	it	cc
 80024c8:	4656      	movcc	r6, sl
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 80024ca:	4632      	mov	r2, r6
 80024cc:	f001 ffda 	bl	8004484 <_fx_utility_memory_copy>
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80024d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80024d4:	f8cd 8004 	str.w	r8, [sp, #4]
 80024d8:	4628      	mov	r0, r5
 80024da:	68a9      	ldr	r1, [r5, #8]
 80024dc:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80024e0:	9100      	str	r1, [sp, #0]
 80024e2:	f001 fee1 	bl	80042a8 <_fx_utility_logical_sector_write>
            if (status !=  FX_SUCCESS)
 80024e6:	2800      	cmp	r0, #0
 80024e8:	f47f af45 	bne.w	8002376 <_fx_file_write+0x186>
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 80024ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
            bytes_remaining =  bytes_remaining - copy_bytes;
 80024ee:	ebba 0a06 	subs.w	sl, sl, r6
            source_ptr =  source_ptr + copy_bytes;
 80024f2:	9906      	ldr	r1, [sp, #24]
        if (file_ptr -> fx_file_current_logical_offset >=
 80024f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
            bytes_remaining =  bytes_remaining - copy_bytes;
 80024f6:	f16b 0b00 	sbc.w	fp, fp, #0
            source_ptr =  source_ptr + copy_bytes;
 80024fa:	4431      	add	r1, r6
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 80024fc:	4416      	add	r6, r2
        if (file_ptr -> fx_file_current_logical_offset >=
 80024fe:	429e      	cmp	r6, r3
            source_ptr =  source_ptr + copy_bytes;
 8002500:	9106      	str	r1, [sp, #24]
            file_ptr -> fx_file_current_logical_offset =
 8002502:	6326      	str	r6, [r4, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8002504:	f080 8094 	bcs.w	8002630 <_fx_file_write+0x440>
    while (bytes_remaining)
 8002508:	ea5a 030b 	orrs.w	r3, sl, fp
 800250c:	d1b7      	bne.n	800247e <_fx_file_write+0x28e>
 800250e:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
        file_ptr -> fx_file_current_file_offset + size;
 8002512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        file_ptr -> fx_file_current_file_size;
 8002516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
        file_ptr -> fx_file_current_file_offset + size;
 800251a:	eb12 0208 	adds.w	r2, r2, r8
 800251e:	eb43 0309 	adc.w	r3, r3, r9
    if (file_ptr -> fx_file_current_file_offset >
 8002522:	4299      	cmp	r1, r3
 8002524:	bf08      	it	eq
 8002526:	4290      	cmpeq	r0, r2
    file_ptr -> fx_file_current_file_offset =
 8002528:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800252c:	e9c4 0128 	strd	r0, r1, [r4, #160]	; 0xa0
    if (file_ptr -> fx_file_current_file_offset >
 8002530:	f080 811c 	bcs.w	800276c <_fx_file_write+0x57c>
        open_count =  media_ptr -> fx_media_opened_file_count;
 8002534:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8002538:	f8d5 60c8 	ldr.w	r6, [r5, #200]	; 0xc8
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800253c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        while (open_count)
 8002540:	b927      	cbnz	r7, 800254c <_fx_file_write+0x35c>
 8002542:	e113      	b.n	800276c <_fx_file_write+0x57c>
 8002544:	3f01      	subs	r7, #1
            search_ptr =  search_ptr -> fx_file_opened_next;
 8002546:	6df6      	ldr	r6, [r6, #92]	; 0x5c
        while (open_count)
 8002548:	f000 8110 	beq.w	800276c <_fx_file_write+0x57c>
            if ((search_ptr != file_ptr) &&
 800254c:	42b4      	cmp	r4, r6
 800254e:	d0f9      	beq.n	8002544 <_fx_file_write+0x354>
 8002550:	e9d6 012a 	ldrd	r0, r1, [r6, #168]	; 0xa8
 8002554:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 8002558:	4299      	cmp	r1, r3
 800255a:	bf08      	it	eq
 800255c:	4290      	cmpeq	r0, r2
 800255e:	d1f1      	bne.n	8002544 <_fx_file_write+0x354>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8002560:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8002564:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <_fx_file_write+0x354>
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800256c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8002570:	69e0      	ldr	r0, [r4, #28]
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8002572:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8002576:	f8c6 109c 	str.w	r1, [r6, #156]	; 0x9c
                if (search_ptr -> fx_file_total_clusters == 0)
 800257a:	6931      	ldr	r1, [r6, #16]
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800257c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8002580:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8002584:	61f0      	str	r0, [r6, #28]
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8002586:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800258a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 800258e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
                if (search_ptr -> fx_file_total_clusters == 0)
 8002592:	2900      	cmp	r1, #0
 8002594:	d1d6      	bne.n	8002544 <_fx_file_write+0x354>
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8002596:	f8d4 c014 	ldr.w	ip, [r4, #20]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800259a:	f04f 0900 	mov.w	r9, #0
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800259e:	6923      	ldr	r3, [r4, #16]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80025a0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 80025a2:	f1ac 0a02 	sub.w	sl, ip, #2
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80025a6:	6d68      	ldr	r0, [r5, #84]	; 0x54
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 80025a8:	6133      	str	r3, [r6, #16]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80025aa:	464b      	mov	r3, r9
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 80025ac:	f8c6 c020 	str.w	ip, [r6, #32]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80025b0:	fbe0 230a 	umlal	r2, r3, r0, sl
                    search_ptr -> fx_file_current_relative_cluster =  0;
 80025b4:	6371      	str	r1, [r6, #52]	; 0x34
                    search_ptr -> fx_file_current_relative_sector =   0;
 80025b6:	63b1      	str	r1, [r6, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 80025b8:	6331      	str	r1, [r6, #48]	; 0x30
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80025ba:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
                    search_ptr -> fx_file_current_file_offset =       0;
 80025be:	2200      	movs	r2, #0
 80025c0:	2300      	movs	r3, #0
 80025c2:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
 80025c6:	e7bd      	b.n	8002544 <_fx_file_write+0x354>
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80025c8:	4649      	mov	r1, r9
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80025ca:	9a06      	ldr	r2, [sp, #24]
 80025cc:	2304      	movs	r3, #4
 80025ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80025d2:	4628      	mov	r0, r5
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	9109      	str	r1, [sp, #36]	; 0x24
 80025da:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80025de:	f001 fe63 	bl	80042a8 <_fx_utility_logical_sector_write>
            if (status !=  FX_SUCCESS)
 80025e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025e4:	2800      	cmp	r0, #0
 80025e6:	f47f aec6 	bne.w	8002376 <_fx_file_write+0x186>
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80025ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                (sectors - 1);
 80025ec:	f108 36ff 	add.w	r6, r8, #4294967295
                media_ptr -> fx_media_bytes_per_sector;
 80025f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80025f2:	3b01      	subs	r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 80025f4:	6d68      	ldr	r0, [r5, #84]	; 0x54
            file_ptr -> fx_file_current_logical_offset =
 80025f6:	6322      	str	r2, [r4, #48]	; 0x30
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80025f8:	eb03 0c08 	add.w	ip, r3, r8
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80025fc:	fb08 f802 	mul.w	r8, r8, r2
            source_ptr =  source_ptr +
 8002600:	9b06      	ldr	r3, [sp, #24]
            bytes_remaining =  bytes_remaining -
 8002602:	ebba 0a08 	subs.w	sl, sl, r8
            file_ptr -> fx_file_current_physical_cluster = cluster;
 8002606:	6221      	str	r1, [r4, #32]
            source_ptr =  source_ptr +
 8002608:	4443      	add	r3, r8
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800260a:	6b61      	ldr	r1, [r4, #52]	; 0x34
            bytes_remaining =  bytes_remaining -
 800260c:	f16b 0b00 	sbc.w	fp, fp, #0
            source_ptr =  source_ptr +
 8002610:	9306      	str	r3, [sp, #24]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8002612:	fbbc fef0 	udiv	lr, ip, r0
                file_ptr -> fx_file_current_logical_sector +
 8002616:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800261a:	fb00 c01e 	mls	r0, r0, lr, ip
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800261e:	4471      	add	r1, lr
                file_ptr -> fx_file_current_logical_sector +
 8002620:	eb12 0806 	adds.w	r8, r2, r6
            file_ptr -> fx_file_current_relative_sector =
 8002624:	63a0      	str	r0, [r4, #56]	; 0x38
                file_ptr -> fx_file_current_logical_sector +
 8002626:	f143 0900 	adc.w	r9, r3, #0
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800262a:	6361      	str	r1, [r4, #52]	; 0x34
            file_ptr -> fx_file_current_logical_sector =
 800262c:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
            if ((bytes_remaining == 0) &&
 8002630:	ea5a 030b 	orrs.w	r3, sl, fp
 8002634:	d110      	bne.n	8002658 <_fx_file_write+0x468>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 8002636:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 800263a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	eb10 0008 	adds.w	r0, r0, r8
            if ((bytes_remaining == 0) &&
 8002646:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800264a:	eb41 0109 	adc.w	r1, r1, r9
            if ((bytes_remaining == 0) &&
 800264e:	4299      	cmp	r1, r3
 8002650:	bf08      	it	eq
 8002652:	4290      	cmpeq	r0, r2
 8002654:	f4bf af5d 	bcs.w	8002512 <_fx_file_write+0x322>
            file_ptr -> fx_file_current_relative_sector++;
 8002658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 800265a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
            file_ptr -> fx_file_current_relative_sector++;
 800265c:	3301      	adds	r3, #1
            if (file_ptr -> fx_file_current_relative_sector >=
 800265e:	4293      	cmp	r3, r2
            file_ptr -> fx_file_current_relative_sector++;
 8002660:	63a3      	str	r3, [r4, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8002662:	d235      	bcs.n	80026d0 <_fx_file_write+0x4e0>
                file_ptr -> fx_file_current_logical_sector++;
 8002664:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002668:	1c50      	adds	r0, r2, #1
 800266a:	f143 0100 	adc.w	r1, r3, #0
 800266e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =  0;
 8002672:	2600      	movs	r6, #0
 8002674:	6326      	str	r6, [r4, #48]	; 0x30
 8002676:	e747      	b.n	8002508 <_fx_file_write+0x318>
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8002678:	4650      	mov	r0, sl
 800267a:	4659      	mov	r1, fp
 800267c:	f7fd fef4 	bl	8000468 <__aeabi_uldivmod>
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8002680:	6d6e      	ldr	r6, [r5, #84]	; 0x54
 8002682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8002684:	4680      	mov	r8, r0
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8002686:	f8d4 9020 	ldr.w	r9, [r4, #32]
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800268a:	1af6      	subs	r6, r6, r3
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800268c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8002690:	42b0      	cmp	r0, r6
 8002692:	d80d      	bhi.n	80026b0 <_fx_file_write+0x4c0>
 8002694:	e798      	b.n	80025c8 <_fx_file_write+0x3d8>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8002696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002698:	2901      	cmp	r1, #1
 800269a:	d945      	bls.n	8002728 <_fx_file_write+0x538>
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4291      	cmp	r1, r2
 80026a0:	d842      	bhi.n	8002728 <_fx_file_write+0x538>
                    if (next_cluster != cluster + 1)
 80026a2:	4299      	cmp	r1, r3
 80026a4:	d146      	bne.n	8002734 <_fx_file_write+0x544>
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80026a6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80026a8:	4689      	mov	r9, r1
 80026aa:	441e      	add	r6, r3
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80026ac:	45b0      	cmp	r8, r6
 80026ae:	d98c      	bls.n	80025ca <_fx_file_write+0x3da>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80026b0:	aa0c      	add	r2, sp, #48	; 0x30
 80026b2:	4649      	mov	r1, r9
 80026b4:	4628      	mov	r0, r5
 80026b6:	f000 fd45 	bl	8003144 <_fx_utility_FAT_entry_read>
                    if (next_cluster != cluster + 1)
 80026ba:	f109 0301 	add.w	r3, r9, #1
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80026be:	2800      	cmp	r0, #0
 80026c0:	d0e9      	beq.n	8002696 <_fx_file_write+0x4a6>
 80026c2:	e658      	b.n	8002376 <_fx_file_write+0x186>
        FX_UNPROTECT
 80026c4:	9808      	ldr	r0, [sp, #32]
        return(FX_WRITE_PROTECT);
 80026c6:	f04f 0b23 	mov.w	fp, #35	; 0x23
        FX_UNPROTECT
 80026ca:	f007 fd2b 	bl	800a124 <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 80026ce:	e5b7      	b.n	8002240 <_fx_file_write+0x50>
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 80026d0:	aa0c      	add	r2, sp, #48	; 0x30
 80026d2:	6a21      	ldr	r1, [r4, #32]
 80026d4:	4628      	mov	r0, r5
 80026d6:	f000 fd35 	bl	8003144 <_fx_utility_FAT_entry_read>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80026da:	2800      	cmp	r0, #0
 80026dc:	f47f ae4b 	bne.w	8002376 <_fx_file_write+0x186>
 80026e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d920      	bls.n	8002728 <_fx_file_write+0x538>
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d81d      	bhi.n	8002728 <_fx_file_write+0x538>
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80026ec:	6d69      	ldr	r1, [r5, #84]	; 0x54
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80026ee:	1e9a      	subs	r2, r3, #2
 80026f0:	f04f 0900 	mov.w	r9, #0
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80026f4:	6d2e      	ldr	r6, [r5, #80]	; 0x50
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 80026f6:	6223      	str	r3, [r4, #32]
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80026f8:	f149 33ff 	adc.w	r3, r9, #4294967295
 80026fc:	fba2 8901 	umull	r8, r9, r2, r1
                file_ptr -> fx_file_current_relative_sector =  0;
 8002700:	63a0      	str	r0, [r4, #56]	; 0x38
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8002702:	fb01 9903 	mla	r9, r1, r3, r9
                file_ptr -> fx_file_current_relative_cluster++;
 8002706:	6b60      	ldr	r0, [r4, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002708:	eb18 0206 	adds.w	r2, r8, r6
                file_ptr -> fx_file_current_relative_cluster++;
 800270c:	f100 0101 	add.w	r1, r0, #1
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002710:	f149 0300 	adc.w	r3, r9, #0
                file_ptr -> fx_file_current_relative_cluster++;
 8002714:	6361      	str	r1, [r4, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002716:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 800271a:	e7aa      	b.n	8002672 <_fx_file_write+0x482>
                        FX_UNPROTECT
 800271c:	9808      	ldr	r0, [sp, #32]
                        return(FX_NO_MORE_SPACE);
 800271e:	f04f 0b0a 	mov.w	fp, #10
                        FX_UNPROTECT
 8002722:	f007 fcff 	bl	800a124 <_tx_mutex_put>
                        return(FX_NO_MORE_SPACE);
 8002726:	e58b      	b.n	8002240 <_fx_file_write+0x50>
                        FX_UNPROTECT
 8002728:	9808      	ldr	r0, [sp, #32]
                            return(FX_FILE_CORRUPT);
 800272a:	f04f 0b08 	mov.w	fp, #8
                        FX_UNPROTECT
 800272e:	f007 fcf9 	bl	800a124 <_tx_mutex_put>
 8002732:	e585      	b.n	8002240 <_fx_file_write+0x50>
 8002734:	45b0      	cmp	r8, r6
 8002736:	4649      	mov	r1, r9
 8002738:	bf28      	it	cs
 800273a:	46b0      	movcs	r8, r6
 800273c:	e745      	b.n	80025ca <_fx_file_write+0x3da>
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800273e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8002740:	1eb1      	subs	r1, r6, #2
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8002742:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8002744:	2300      	movs	r3, #0
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 8002746:	f8c8 6014 	str.w	r6, [r8, #20]
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800274a:	fbe0 2301 	umlal	r2, r3, r0, r1
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800274e:	f8c8 6020 	str.w	r6, [r8, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 8002752:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
                    file_ptr -> fx_file_current_logical_offset =    0;
 8002756:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800275a:	f8c8 609c 	str.w	r6, [r8, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800275e:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
                    file_ptr -> fx_file_current_file_offset =       0;
 8002762:	2200      	movs	r2, #0
 8002764:	2300      	movs	r3, #0
 8002766:	e9c8 2310 	strd	r2, r3, [r8, #64]	; 0x40
 800276a:	e64f      	b.n	800240c <_fx_file_write+0x21c>
    file_ptr -> fx_file_modified =  FX_TRUE;
 800276c:	2201      	movs	r2, #1
    if (file_ptr -> fx_file_write_notify)
 800276e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
    file_ptr -> fx_file_modified =  FX_TRUE;
 8002772:	7322      	strb	r2, [r4, #12]
    if (file_ptr -> fx_file_write_notify)
 8002774:	b10b      	cbz	r3, 800277a <_fx_file_write+0x58a>
        file_ptr -> fx_file_write_notify(file_ptr);
 8002776:	4620      	mov	r0, r4
 8002778:	4798      	blx	r3
    FX_UNPROTECT
 800277a:	9808      	ldr	r0, [sp, #32]
    return(FX_SUCCESS);
 800277c:	f04f 0b00 	mov.w	fp, #0
    FX_UNPROTECT
 8002780:	f007 fcd0 	bl	800a124 <_tx_mutex_put>
    return(FX_SUCCESS);
 8002784:	e55c      	b.n	8002240 <_fx_file_write+0x50>
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 8002786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002788:	4628      	mov	r0, r5
 800278a:	f000 fe3b 	bl	8003404 <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 800278e:	4683      	mov	fp, r0
 8002790:	2800      	cmp	r0, #0
 8002792:	f43f ae53 	beq.w	800243c <_fx_file_write+0x24c>
 8002796:	e5ef      	b.n	8002378 <_fx_file_write+0x188>

08002798 <_fx_media_close>:
FX_FILE *file_ptr;
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002798:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <_fx_media_close+0x228>)
 800279a:	6802      	ldr	r2, [r0, #0]
 800279c:	429a      	cmp	r2, r3
{
 800279e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a2:	b084      	sub	sp, #16
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80027a4:	d004      	beq.n	80027b0 <_fx_media_close+0x18>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80027a6:	2411      	movs	r4, #17
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
}
 80027a8:	4620      	mov	r0, r4
 80027aa:	b004      	add	sp, #16
 80027ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FX_PROTECT
 80027b0:	f500 78e4 	add.w	r8, r0, #456	; 0x1c8
 80027b4:	4606      	mov	r6, r0
 80027b6:	f04f 31ff 	mov.w	r1, #4294967295
 80027ba:	4640      	mov	r0, r8
 80027bc:	f007 fbc8 	bl	8009f50 <_tx_mutex_get>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d1f0      	bne.n	80027a6 <_fx_media_close+0xe>
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 80027c4:	e9d6 4532 	ldrd	r4, r5, [r6, #200]	; 0xc8
    while (open_count)
 80027c8:	b365      	cbz	r5, 8002824 <_fx_media_close+0x8c>
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80027ca:	f8df a210 	ldr.w	sl, [pc, #528]	; 80029dc <_fx_media_close+0x244>
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80027ce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80029e0 <_fx_media_close+0x248>
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 80027d2:	4f7c      	ldr	r7, [pc, #496]	; (80029c4 <_fx_media_close+0x22c>)
 80027d4:	e003      	b.n	80027de <_fx_media_close+0x46>
    while (open_count)
 80027d6:	3d01      	subs	r5, #1
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 80027d8:	6027      	str	r7, [r4, #0]
        file_ptr =  file_ptr -> fx_file_opened_next;
 80027da:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    while (open_count)
 80027dc:	d022      	beq.n	8002824 <_fx_media_close+0x8c>
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80027de:	68a3      	ldr	r3, [r4, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d1f8      	bne.n	80027d6 <_fx_media_close+0x3e>
 80027e4:	7b23      	ldrb	r3, [r4, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f5      	beq.n	80027d6 <_fx_media_close+0x3e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80027ea:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80027ee:	b672      	cpsid	i
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80027f0:	f8da 2000 	ldr.w	r2, [sl]
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80027f4:	f8d9 3000 	ldr.w	r3, [r9]
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 80027f8:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80027fc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002800:	f381 8810 	msr	PRIMASK, r1
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8002804:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8002808:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800280c:	4630      	mov	r0, r6
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800280e:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8002812:	f001 fe3d 	bl	8004490 <_fx_directory_entry_write>
            if (status != FX_SUCCESS)
 8002816:	2800      	cmp	r0, #0
 8002818:	d158      	bne.n	80028cc <_fx_media_close+0x134>
    while (open_count)
 800281a:	3d01      	subs	r5, #1
            file_ptr -> fx_file_modified =  FX_FALSE;
 800281c:	7320      	strb	r0, [r4, #12]
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800281e:	6027      	str	r7, [r4, #0]
        file_ptr =  file_ptr -> fx_file_opened_next;
 8002820:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    while (open_count)
 8002822:	d1dc      	bne.n	80027de <_fx_media_close+0x46>
    _fx_utility_FAT_flush(media_ptr);
 8002824:	4630      	mov	r0, r6
 8002826:	f000 fe77 	bl	8003518 <_fx_utility_FAT_flush>
    _fx_utility_FAT_map_flush(media_ptr);
 800282a:	4630      	mov	r0, r6
 800282c:	f000 fff0 	bl	8003810 <_fx_utility_FAT_map_flush>
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 8002830:	2100      	movs	r1, #0
 8002832:	2201      	movs	r2, #1
 8002834:	2300      	movs	r3, #0
 8002836:	9102      	str	r1, [sp, #8]
 8002838:	4630      	mov	r0, r6
 800283a:	e9d6 450e 	ldrd	r4, r5, [r6, #56]	; 0x38
 800283e:	e9cd 4500 	strd	r4, r5, [sp]
 8002842:	f001 f85f 	bl	8003904 <_fx_utility_logical_sector_flush>
    if (status != FX_SUCCESS)
 8002846:	4604      	mov	r4, r0
 8002848:	2800      	cmp	r0, #0
 800284a:	d13f      	bne.n	80028cc <_fx_media_close+0x134>
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800284c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800284e:	2b00      	cmp	r3, #0
 8002850:	d14c      	bne.n	80028ec <_fx_media_close+0x154>
    media_ptr -> fx_media_driver_flush_requests++;
 8002852:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 8002856:	2102      	movs	r1, #2
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002858:	2590      	movs	r5, #144	; 0x90
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800285a:	f8d6 20bc 	ldr.w	r2, [r6, #188]	; 0xbc
    media_ptr -> fx_media_driver_flush_requests++;
 800285e:	3301      	adds	r3, #1
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002860:	4630      	mov	r0, r6
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002862:	e9c6 1522 	strd	r1, r5, [r6, #136]	; 0x88
    media_ptr -> fx_media_driver_flush_requests++;
 8002866:	f8c6 31c0 	str.w	r3, [r6, #448]	; 0x1c0
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800286a:	4790      	blx	r2
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800286c:	2308      	movs	r3, #8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800286e:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002872:	4630      	mov	r0, r6
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002874:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002878:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 800287c:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800287e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002882:	b672      	cpsid	i
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <_fx_media_close+0x230>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d027      	beq.n	80028dc <_fx_media_close+0x144>
        if (_fx_system_media_opened_ptr == media_ptr)
 800288c:	484f      	ldr	r0, [pc, #316]	; (80029cc <_fx_media_close+0x234>)
            media_ptr -> fx_media_opened_previous;
 800288e:	e9d6 7534 	ldrd	r7, r5, [r6, #208]	; 0xd0
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8002892:	f8c7 50d4 	str.w	r5, [r7, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8002896:	f8d6 50d4 	ldr.w	r5, [r6, #212]	; 0xd4
 800289a:	f8c5 70d0 	str.w	r7, [r5, #208]	; 0xd0
        if (_fx_system_media_opened_ptr == media_ptr)
 800289e:	6805      	ldr	r5, [r0, #0]
 80028a0:	42b5      	cmp	r5, r6
 80028a2:	d01f      	beq.n	80028e4 <_fx_media_close+0x14c>
    _fx_system_media_opened_count--;
 80028a4:	3b01      	subs	r3, #1
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 80028a6:	484a      	ldr	r0, [pc, #296]	; (80029d0 <_fx_media_close+0x238>)
    _fx_system_media_opened_count--;
 80028a8:	6013      	str	r3, [r2, #0]
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 80028aa:	6030      	str	r0, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80028ac:	f381 8810 	msr	PRIMASK, r1
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 80028b0:	4640      	mov	r0, r8
 80028b2:	f007 faf3 	bl	8009e9c <_tx_mutex_delete>
    if (media_ptr -> fx_media_close_notify)
 80028b6:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f43f af74 	beq.w	80027a8 <_fx_media_close+0x10>
        media_ptr -> fx_media_close_notify(media_ptr);
 80028c0:	4630      	mov	r0, r6
 80028c2:	4798      	blx	r3
}
 80028c4:	4620      	mov	r0, r4
 80028c6:	b004      	add	sp, #16
 80028c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        FX_UNPROTECT
 80028cc:	4640      	mov	r0, r8
        return(FX_IO_ERROR);
 80028ce:	2490      	movs	r4, #144	; 0x90
        FX_UNPROTECT
 80028d0:	f007 fc28 	bl	800a124 <_tx_mutex_put>
        _fx_media_abort(media_ptr);
 80028d4:	4630      	mov	r0, r6
 80028d6:	f003 fb29 	bl	8005f2c <_fx_media_abort>
        return(FX_IO_ERROR);
 80028da:	e765      	b.n	80027a8 <_fx_media_close+0x10>
        _fx_system_media_opened_ptr =  FX_NULL;
 80028dc:	483b      	ldr	r0, [pc, #236]	; (80029cc <_fx_media_close+0x234>)
 80028de:	2500      	movs	r5, #0
 80028e0:	6005      	str	r5, [r0, #0]
 80028e2:	e7df      	b.n	80028a4 <_fx_media_close+0x10c>
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 80028e4:	f8d6 50d0 	ldr.w	r5, [r6, #208]	; 0xd0
 80028e8:	6005      	str	r5, [r0, #0]
 80028ea:	e7db      	b.n	80028a4 <_fx_media_close+0x10c>
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80028ec:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80028ee:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d0ae      	beq.n	8002852 <_fx_media_close+0xba>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 80028f4:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1aa      	bne.n	8002852 <_fx_media_close+0xba>
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80028fc:	69f0      	ldr	r0, [r6, #28]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
        media_ptr -> fx_media_driver_sectors =          1;
 8002906:	2701      	movs	r7, #1
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8002908:	7444      	strb	r4, [r0, #17]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800290a:	2590      	movs	r5, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 800290c:	f8d6 11ac 	ldr.w	r1, [r6, #428]	; 0x1ac
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8002910:	f04f 0903 	mov.w	r9, #3
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 8002914:	e9c0 2302 	strd	r2, r3, [r0, #8]
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8002918:	6803      	ldr	r3, [r0, #0]
        media_ptr -> fx_media_driver_read_requests++;
 800291a:	4439      	add	r1, r7
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800291c:	4630      	mov	r0, r6
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800291e:	f8c6 4088 	str.w	r4, [r6, #136]	; 0x88
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8002922:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8002926:	6eb3      	ldr	r3, [r6, #104]	; 0x68
        media_ptr -> fx_media_driver_read_requests++;
 8002928:	f8c6 11ac 	str.w	r1, [r6, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800292c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8002930:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002934:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
        media_ptr -> fx_media_driver_sectors =          1;
 8002938:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800293c:	f8c6 90b8 	str.w	r9, [r6, #184]	; 0xb8
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002940:	4798      	blx	r3
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8002942:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1c0      	bne.n	80028cc <_fx_media_close+0x134>
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800294a:	f8d6 a090 	ldr.w	sl, [r6, #144]	; 0x90
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800294e:	4650      	mov	r0, sl
 8002950:	f000 fbe4 	bl	800311c <_fx_utility_32_unsigned_read>
        if (signature == 0x41615252)
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <_fx_media_close+0x23c>)
 8002956:	4298      	cmp	r0, r3
 8002958:	f47f af7b 	bne.w	8002852 <_fx_media_close+0xba>
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800295c:	f50a 70f2 	add.w	r0, sl, #484	; 0x1e4
 8002960:	f000 fbdc 	bl	800311c <_fx_utility_32_unsigned_read>
            if (signature == 0x61417272)
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <_fx_media_close+0x240>)
 8002966:	4298      	cmp	r0, r3
 8002968:	f47f af73 	bne.w	8002852 <_fx_media_close+0xba>
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800296c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800296e:	f50a 70f4 	add.w	r0, sl, #488	; 0x1e8
 8002972:	f000 fbdf 	bl	8003134 <_fx_utility_32_unsigned_write>
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 8002976:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 800297a:	f50a 70f6 	add.w	r0, sl, #492	; 0x1ec
 800297e:	f000 fbd9 	bl	8003134 <_fx_utility_32_unsigned_write>
                media_ptr -> fx_media_driver_write_requests++;
 8002982:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8002986:	6eb2      	ldr	r2, [r6, #104]	; 0x68
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002988:	4630      	mov	r0, r6
                media_ptr -> fx_media_driver_write_requests++;
 800298a:	3301      	adds	r3, #1
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800298c:	f8c6 a090 	str.w	sl, [r6, #144]	; 0x90
                media_ptr -> fx_media_driver_sectors =          1;
 8002990:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
                media_ptr -> fx_media_driver_write_requests++;
 8002994:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8002998:	f8c6 90b8 	str.w	r9, [r6, #184]	; 0xb8
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800299c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80029a0:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 80029a4:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80029a8:	e9c6 7522 	strd	r7, r5, [r6, #136]	; 0x88
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80029ac:	4798      	blx	r3
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80029ae:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80029b2:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d188      	bne.n	80028cc <_fx_media_close+0x134>
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 80029ba:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 80029bc:	66f3      	str	r3, [r6, #108]	; 0x6c
 80029be:	e748      	b.n	8002852 <_fx_media_close+0xba>
 80029c0:	4d454449 	.word	0x4d454449
 80029c4:	46494c43 	.word	0x46494c43
 80029c8:	20003a18 	.word	0x20003a18
 80029cc:	20003a20 	.word	0x20003a20
 80029d0:	4d454443 	.word	0x4d454443
 80029d4:	41615252 	.word	0x41615252
 80029d8:	61417272 	.word	0x61417272
 80029dc:	20003a2c 	.word	0x20003a2c
 80029e0:	20003a14 	.word	0x20003a14

080029e4 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 80029e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             bytes_in_buffer;
FX_INT_SAVE_AREA


    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80029e8:	4d78      	ldr	r5, [pc, #480]	; (8002bcc <_fx_media_open+0x1e8>)
{
 80029ea:	b087      	sub	sp, #28
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80029ec:	4c78      	ldr	r4, [pc, #480]	; (8002bd0 <_fx_media_open+0x1ec>)
 80029ee:	4e79      	ldr	r6, [pc, #484]	; (8002bd4 <_fx_media_open+0x1f0>)
 80029f0:	6827      	ldr	r7, [r4, #0]
 80029f2:	682d      	ldr	r5, [r5, #0]
 80029f4:	433d      	orrs	r5, r7
 80029f6:	6837      	ldr	r7, [r6, #0]
{
 80029f8:	9e10      	ldr	r6, [sp, #64]	; 0x40
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80029fa:	433d      	orrs	r5, r7
 80029fc:	f000 80b8 	beq.w	8002b70 <_fx_media_open+0x18c>
        _fx_version_id[0] == 0)
 8002a00:	4d75      	ldr	r5, [pc, #468]	; (8002bd8 <_fx_media_open+0x1f4>)
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8002a02:	782d      	ldrb	r5, [r5, #0]
 8002a04:	2d00      	cmp	r5, #0
 8002a06:	f000 80b3 	beq.w	8002b70 <_fx_media_open+0x18c>
    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
    media_ptr -> fx_media_driver_entry =                media_driver;
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
    media_ptr -> fx_media_memory_size =                 memory_size;
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 8002a0a:	2500      	movs	r5, #0
    media_ptr -> fx_media_name =                        media_name;
 8002a0c:	6041      	str	r1, [r0, #4]
 8002a0e:	4698      	mov	r8, r3
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 8002a10:	f242 4ea4 	movw	lr, #9380	; 0x24a4
    media_ptr -> fx_media_memory_size =                 memory_size;
 8002a14:	9b11      	ldr	r3, [sp, #68]	; 0x44
    media_ptr -> fx_media_FAT_type =                    0;
 8002a16:	f242 4cb0 	movw	ip, #9392	; 0x24b0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 8002a1a:	2104      	movs	r1, #4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8002a1c:	2790      	movs	r7, #144	; 0x90
 8002a1e:	4604      	mov	r4, r0
    media_ptr -> fx_media_memory_size =                 memory_size;
 8002a20:	60c3      	str	r3, [r0, #12]
    media_ptr -> fx_media_driver_entry =                media_driver;
 8002a22:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8002a26:	6086      	str	r6, [r0, #8]
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 8002a28:	f840 500e 	str.w	r5, [r0, lr]
    media_ptr -> fx_media_directory_local_path_gets =  0;
 8002a2c:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 8002a30:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 8002a34:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 8002a38:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 8002a3c:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 8002a40:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 8002a44:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 8002a48:	f8c0 511c 	str.w	r5, [r0, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 8002a4c:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 8002a50:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 8002a54:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 8002a58:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 8002a5c:	f8c0 5130 	str.w	r5, [r0, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 8002a60:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 8002a64:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 8002a68:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
    media_ptr -> fx_media_directory_attributes_sets =  0;
 8002a6c:	e9c0 5536 	strd	r5, r5, [r0, #216]	; 0xd8
    media_ptr -> fx_media_directory_default_gets =  0;
 8002a70:	e9c0 5538 	strd	r5, r5, [r0, #224]	; 0xe0
    media_ptr -> fx_media_directory_deletes =  0;
 8002a74:	e9c0 553a 	strd	r5, r5, [r0, #232]	; 0xe8
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 8002a78:	e9c0 553c 	strd	r5, r5, [r0, #240]	; 0xf0
    media_ptr -> fx_media_directory_local_path_clears =  0;
 8002a7c:	e9c0 553e 	strd	r5, r5, [r0, #248]	; 0xf8
    media_ptr -> fx_media_FAT_type =                    0;
 8002a80:	f800 500c 	strb.w	r5, [r0, ip]
    media_ptr -> fx_media_file_relative_seeks =  0;
 8002a84:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 8002a88:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 8002a8c:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 8002a90:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 8002a94:	f8c0 5150 	str.w	r5, [r0, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 8002a98:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 8002a9c:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 8002aa0:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 8002aa4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 8002aa8:	f8c0 5164 	str.w	r5, [r0, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 8002aac:	f8c0 5168 	str.w	r5, [r0, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 8002ab0:	f8c0 516c 	str.w	r5, [r0, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 8002ab4:	f8c0 5170 	str.w	r5, [r0, #368]	; 0x170
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 8002ab8:	f8c0 51c4 	str.w	r5, [r0, #452]	; 0x1c4
    media_ptr -> fx_media_directory_free_searches =  0;
 8002abc:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 8002ac0:	f8c0 5178 	str.w	r5, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 8002ac4:	f8c0 517c 	str.w	r5, [r0, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 8002ac8:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 8002acc:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 8002ad0:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 8002ad4:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 8002ad8:	f8c0 5190 	str.w	r5, [r0, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 8002adc:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 8002ae0:	f8c0 5198 	str.w	r5, [r0, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 8002ae4:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 8002ae8:	f8c0 51a0 	str.w	r5, [r0, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 8002aec:	f8c0 51a4 	str.w	r5, [r0, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 8002af0:	f8c0 51a8 	str.w	r5, [r0, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 8002af4:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 8002af8:	f8c0 51b0 	str.w	r5, [r0, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 8002afc:	f8c0 51b4 	str.w	r5, [r0, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 8002b00:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 8002b04:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 8002b08:	f8c0 51c0 	str.w	r5, [r0, #448]	; 0x1c0
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8002b0c:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 8002b10:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8002b14:	e9c0 552a 	strd	r5, r5, [r0, #168]	; 0xa8
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8002b18:	e9c0 1722 	strd	r1, r7, [r0, #136]	; 0x88

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b1c:	4790      	blx	r2

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8002b1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d150      	bne.n	8002bc8 <_fx_media_open+0x1e4>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 8002b26:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
    media_ptr -> fx_media_driver_sectors =          1;
 8002b2a:	2501      	movs	r5, #1
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 8002b2c:	2205      	movs	r2, #5
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8002b2e:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    media_ptr -> fx_media_driver_boot_read_requests++;
 8002b32:	442b      	add	r3, r5
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 8002b34:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 8002b38:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b3c:	4620      	mov	r0, r4
    media_ptr -> fx_media_driver_boot_read_requests++;
 8002b3e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    media_ptr -> fx_media_driver_sectors =          1;
 8002b42:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b46:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 8002b4a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b4e:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8002b50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002b54:	b18b      	cbz	r3, 8002b7a <_fx_media_open+0x196>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002b56:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002b58:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b5c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8002b60:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002b62:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b66:	4798      	blx	r3
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
}
 8002b68:	4628      	mov	r0, r5
 8002b6a:	b007      	add	sp, #28
 8002b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_IMPLEMENTED);
 8002b70:	2522      	movs	r5, #34	; 0x22
}
 8002b72:	4628      	mov	r0, r5
 8002b74:	b007      	add	sp, #28
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f003 fa34 	bl	8005fe8 <_fx_media_boot_info_extract>
 8002b80:	4605      	mov	r5, r0
 8002b82:	b150      	cbz	r0, 8002b9a <_fx_media_open+0x1b6>
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002b84:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002b86:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b8a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8002b8e:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002b90:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        return(FX_MEDIA_INVALID);
 8002b94:	2502      	movs	r5, #2
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002b96:	4798      	blx	r3
        return(FX_MEDIA_INVALID);
 8002b98:	e7e6      	b.n	8002b68 <_fx_media_open+0x184>
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 8002b9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002b9e:	3030      	adds	r0, #48	; 0x30
 8002ba0:	f000 fab6 	bl	8003110 <_fx_utility_16_unsigned_read>
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 8002ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 8002ba8:	4680      	mov	r8, r0
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	6163      	str	r3, [r4, #20]
    if (media_ptr -> fx_media_sector_cache_size == 0)
 8002bb0:	b9a3      	cbnz	r3, 8002bdc <_fx_media_open+0x1f8>
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002bb2:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002bb4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002bb8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8002bbc:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002bbe:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        return(FX_BUFFER_ERROR);
 8002bc2:	2521      	movs	r5, #33	; 0x21
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002bc4:	4798      	blx	r3
        return(FX_BUFFER_ERROR);
 8002bc6:	e7cf      	b.n	8002b68 <_fx_media_open+0x184>
        return(FX_IO_ERROR);
 8002bc8:	463d      	mov	r5, r7
 8002bca:	e7cd      	b.n	8002b68 <_fx_media_open+0x184>
 8002bcc:	20003a24 	.word	0x20003a24
 8002bd0:	200039e0 	.word	0x200039e0
 8002bd4:	20003a28 	.word	0x20003a28
 8002bd8:	20000000 	.word	0x20000000
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be0:	f240 817e 	bls.w	8002ee0 <_fx_media_open+0x4fc>
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 8002be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be8:	23ff      	movs	r3, #255	; 0xff
 8002bea:	6162      	str	r2, [r4, #20]
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 8002bec:	f504 6e4a 	add.w	lr, r4, #3232	; 0xca0
 8002bf0:	f604 42b8 	addw	r2, r4, #3256	; 0xcb8
    while (i--)
 8002bf4:	469a      	mov	sl, r3
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 8002bf6:	46b1      	mov	r9, r6
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 8002c00:	f04f 0c00 	mov.w	ip, #0
    while (i--)
 8002c04:	f10a 3aff 	add.w	sl, sl, #4294967295
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 8002c08:	f802 cc08 	strb.w	ip, [r2, #-8]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 8002c0c:	f802 cc07 	strb.w	ip, [r2, #-7]
    while (i--)
 8002c10:	f1ba 3fff 	cmp.w	sl, #4294967295
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 8002c14:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 8002c16:	f842 9c18 	str.w	r9, [r2, #-24]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 8002c1a:	f842 2c04 	str.w	r2, [r2, #-4]
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 8002c1e:	44b9      	add	r9, r7
 8002c20:	f102 0218 	add.w	r2, r2, #24
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 8002c24:	e942 010a 	strd	r0, r1, [r2, #-40]	; 0x28
    while (i--)
 8002c28:	d1ec      	bne.n	8002c04 <_fx_media_open+0x220>
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8002c2a:	3301      	adds	r3, #1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8002c2c:	6961      	ldr	r1, [r4, #20]
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 8002c2e:	f109 32ff 	add.w	r2, r9, #4294967295
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8002c32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8002c36:	290f      	cmp	r1, #15
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8002c38:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8002c3c:	f843 cc04 	str.w	ip, [r3, #-4]
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 8002c40:	e9c4 2e06 	strd	r2, lr, [r4, #24]
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 8002c44:	e9c4 cc08 	strd	ip, ip, [r4, #32]
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8002c48:	d906      	bls.n	8002c58 <_fx_media_open+0x274>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 8002c4a:	1e4b      	subs	r3, r1, #1
 8002c4c:	ea81 0203 	eor.w	r2, r1, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 8002c50:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8002c52:	429a      	cmp	r2, r3
 8002c54:	f000 81cb 	beq.w	8002fee <_fx_media_open+0x60a>
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 8002c58:	2200      	movs	r2, #0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002c5a:	f04f 0900 	mov.w	r9, #0
 8002c5e:	6122      	str	r2, [r4, #16]
 8002c60:	f604 0018 	addw	r0, r4, #2072	; 0x818
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	4649      	mov	r1, r9
 8002c68:	f8c4 9758 	str.w	r9, [r4, #1880]	; 0x758
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002c6c:	f8c4 975c 	str.w	r9, [r4, #1884]	; 0x75c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002c70:	f8c4 9760 	str.w	r9, [r4, #1888]	; 0x760
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002c74:	f8c4 9764 	str.w	r9, [r4, #1892]	; 0x764
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002c78:	f8c4 9768 	str.w	r9, [r4, #1896]	; 0x768
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002c7c:	f8c4 976c 	str.w	r9, [r4, #1900]	; 0x76c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002c80:	f8c4 9770 	str.w	r9, [r4, #1904]	; 0x770
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002c84:	f8c4 9774 	str.w	r9, [r4, #1908]	; 0x774
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002c88:	f8c4 9778 	str.w	r9, [r4, #1912]	; 0x778
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002c8c:	f8c4 977c 	str.w	r9, [r4, #1916]	; 0x77c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002c90:	f8c4 9780 	str.w	r9, [r4, #1920]	; 0x780
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002c94:	f8c4 9784 	str.w	r9, [r4, #1924]	; 0x784
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002c98:	f8c4 9788 	str.w	r9, [r4, #1928]	; 0x788
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002c9c:	f8c4 978c 	str.w	r9, [r4, #1932]	; 0x78c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002ca0:	f8c4 9790 	str.w	r9, [r4, #1936]	; 0x790
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002ca4:	f8c4 9794 	str.w	r9, [r4, #1940]	; 0x794
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002ca8:	f8c4 9798 	str.w	r9, [r4, #1944]	; 0x798
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002cac:	f8c4 979c 	str.w	r9, [r4, #1948]	; 0x79c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002cb0:	f8c4 97a0 	str.w	r9, [r4, #1952]	; 0x7a0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002cb4:	f8c4 97a4 	str.w	r9, [r4, #1956]	; 0x7a4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002cb8:	f8c4 97a8 	str.w	r9, [r4, #1960]	; 0x7a8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002cbc:	f8c4 97ac 	str.w	r9, [r4, #1964]	; 0x7ac
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002cc0:	f8c4 97b0 	str.w	r9, [r4, #1968]	; 0x7b0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002cc4:	f8c4 97b4 	str.w	r9, [r4, #1972]	; 0x7b4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002cc8:	f8c4 97b8 	str.w	r9, [r4, #1976]	; 0x7b8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002ccc:	f8c4 97bc 	str.w	r9, [r4, #1980]	; 0x7bc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002cd0:	f8c4 97c0 	str.w	r9, [r4, #1984]	; 0x7c0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002cd4:	f8c4 97c4 	str.w	r9, [r4, #1988]	; 0x7c4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002cd8:	f8c4 97c8 	str.w	r9, [r4, #1992]	; 0x7c8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002cdc:	f8c4 97cc 	str.w	r9, [r4, #1996]	; 0x7cc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002ce0:	f8c4 97d0 	str.w	r9, [r4, #2000]	; 0x7d0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002ce4:	f8c4 97d4 	str.w	r9, [r4, #2004]	; 0x7d4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002ce8:	f8c4 97d8 	str.w	r9, [r4, #2008]	; 0x7d8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002cec:	f8c4 97dc 	str.w	r9, [r4, #2012]	; 0x7dc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002cf0:	f8c4 97e0 	str.w	r9, [r4, #2016]	; 0x7e0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002cf4:	f8c4 97e4 	str.w	r9, [r4, #2020]	; 0x7e4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002cf8:	f8c4 97e8 	str.w	r9, [r4, #2024]	; 0x7e8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002cfc:	f8c4 97ec 	str.w	r9, [r4, #2028]	; 0x7ec
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002d00:	f8c4 97f0 	str.w	r9, [r4, #2032]	; 0x7f0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002d04:	f8c4 97f4 	str.w	r9, [r4, #2036]	; 0x7f4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002d08:	f8c4 97f8 	str.w	r9, [r4, #2040]	; 0x7f8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002d0c:	f8c4 97fc 	str.w	r9, [r4, #2044]	; 0x7fc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002d10:	f8c4 9800 	str.w	r9, [r4, #2048]	; 0x800
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002d14:	f8c4 9804 	str.w	r9, [r4, #2052]	; 0x804
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002d18:	f8c4 9808 	str.w	r9, [r4, #2056]	; 0x808
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8002d1c:	f8c4 980c 	str.w	r9, [r4, #2060]	; 0x80c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8002d20:	f8c4 9810 	str.w	r9, [r4, #2064]	; 0x810
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8002d24:	f8c4 9814 	str.w	r9, [r4, #2068]	; 0x814
 8002d28:	f008 fb65 	bl	800b3f6 <memset>
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8002d2c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8002d2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8002d30:	464b      	mov	r3, r9
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8002d32:	eb07 1242 	add.w	r2, r7, r2, lsl #5
            (media_ptr -> fx_media_number_of_FATs *
 8002d36:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                                                            media_ptr -> fx_media_sectors_per_cluster);
 8002d38:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8002d3c:	f102 3cff 	add.w	ip, r2, #4294967295
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8002d40:	6da2      	ldr	r2, [r4, #88]	; 0x58
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8002d42:	fbbc f7f7 	udiv	r7, ip, r7
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8002d46:	fb02 0101 	mla	r1, r2, r1, r0
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8002d4a:	4652      	mov	r2, sl
        media_ptr -> fx_media_root_sectors =
 8002d4c:	64e7      	str	r7, [r4, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8002d4e:	eb01 0b07 	add.w	fp, r1, r7
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8002d52:	64a1      	str	r1, [r4, #72]	; 0x48
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8002d54:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8002d58:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8002d5c:	ebb0 000b 	subs.w	r0, r0, fp
 8002d60:	f161 0100 	sbc.w	r1, r1, #0
 8002d64:	f7fd fb80 	bl	8000468 <__aeabi_uldivmod>
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8002d68:	f640 73f5 	movw	r3, #4085	; 0xff5
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8002d6c:	6420      	str	r0, [r4, #64]	; 0x40
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	f200 80b8 	bhi.w	8002ee4 <_fx_media_open+0x500>
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8002d74:	2201      	movs	r2, #1
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8002d76:	f242 41a8 	movw	r1, #9384	; 0x24a8
 8002d7a:	f64f 70f0 	movw	r0, #65520	; 0xfff0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8002d7e:	f242 43ac 	movw	r3, #9388	; 0x24ac
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8002d82:	6622      	str	r2, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8002d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8002d88:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8002d8c:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8002d90:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8002d92:	50e2      	str	r2, [r4, r3]
    media_ptr -> fx_media_available_clusters =  0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	67e3      	str	r3, [r4, #124]	; 0x7c
    media_ptr -> fx_media_cluster_search_start =  0;
 8002d98:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (media_ptr -> fx_media_12_bit_FAT)
 8002d9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 80b3 	bne.w	8002f0a <_fx_media_open+0x526>
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 8002da4:	2101      	movs	r1, #1
 8002da6:	2300      	movs	r3, #0
 8002da8:	2201      	movs	r2, #1
 8002daa:	4620      	mov	r0, r4
 8002dac:	9102      	str	r1, [sp, #8]
 8002dae:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 8002db2:	e9cd 8900 	strd	r8, r9, [sp]
 8002db6:	f000 fda5 	bl	8003904 <_fx_utility_logical_sector_flush>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8002dba:	6da3      	ldr	r3, [r4, #88]	; 0x58
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 8002dbc:	60a6      	str	r6, [r4, #8]
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d051      	beq.n	8002e66 <_fx_media_open+0x482>
 8002dc2:	2700      	movs	r7, #0
 8002dc4:	6960      	ldr	r0, [r4, #20]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8002dc6:	f04f 0890 	mov.w	r8, #144	; 0x90
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8002dca:	f04f 0902 	mov.w	r9, #2
        cluster_number =  0;
 8002dce:	463e      	mov	r6, r7
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8002dd0:	46ba      	mov	sl, r7
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8002dd2:	1bd9      	subs	r1, r3, r7
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8002dd4:	6c62      	ldr	r2, [r4, #68]	; 0x44
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	4281      	cmp	r1, r0
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8002dda:	443a      	add	r2, r7
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8002ddc:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 8002de0:	bf28      	it	cs
 8002de2:	4601      	movcs	r1, r0
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8002de4:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002de8:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8002dea:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 8002dee:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 8002df2:	468b      	mov	fp, r1
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8002df4:	e9c4 3224 	strd	r3, r2, [r4, #144]	; 0x90
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002df8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8002dfc:	4798      	blx	r3
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8002dfe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 80fe 	bne.w	8003004 <_fx_media_open+0x620>
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 8002e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e0a:	fb00 f00b 	mul.w	r0, r0, fp
            for (j = 0; j < bytes_in_buffer;)
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f000 80eb 	beq.w	8002fea <_fx_media_open+0x606>
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8002e14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e18:	f103 0c02 	add.w	ip, r3, #2
 8002e1c:	68a1      	ldr	r1, [r4, #8]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	f040 80cd 	bne.w	8002fbe <_fx_media_open+0x5da>
            for (j = 0; j < bytes_in_buffer;)
 8002e24:	4696      	mov	lr, r2
 8002e26:	e002      	b.n	8002e2e <_fx_media_open+0x44a>
 8002e28:	4570      	cmp	r0, lr
 8002e2a:	f240 80de 	bls.w	8002fea <_fx_media_open+0x606>
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 8002e2e:	eb01 020e 	add.w	r2, r1, lr
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8002e32:	f811 300e 	ldrb.w	r3, [r1, lr]
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 8002e36:	f10e 0e02 	add.w	lr, lr, #2
 8002e3a:	7852      	ldrb	r2, [r2, #1]
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8002e3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e40:	9305      	str	r3, [sp, #20]
                if (FAT_entry == FX_FREE_CLUSTER)
 8002e42:	b93b      	cbnz	r3, 8002e54 <_fx_media_open+0x470>
                    media_ptr -> fx_media_available_clusters++;
 8002e44:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8002e46:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    media_ptr -> fx_media_available_clusters++;
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	67e3      	str	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8002e4e:	b90a      	cbnz	r2, 8002e54 <_fx_media_open+0x470>
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8002e50:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
                cluster_number++;
 8002e54:	3601      	adds	r6, #1
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8002e56:	45b4      	cmp	ip, r6
 8002e58:	d8e6      	bhi.n	8002e28 <_fx_media_open+0x444>
                    i = media_ptr -> fx_media_sectors_per_FAT;
 8002e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e5c:	461f      	mov	r7, r3
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8002e5e:	6960      	ldr	r0, [r4, #20]
 8002e60:	4407      	add	r7, r0
 8002e62:	42bb      	cmp	r3, r7
 8002e64:	d8b5      	bhi.n	8002dd2 <_fx_media_open+0x3ee>
    if (media_ptr -> fx_media_cluster_search_start == 0)
 8002e66:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002e6a:	b913      	cbnz	r3, 8002e72 <_fx_media_open+0x48e>
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8002e72:	2300      	movs	r3, #0
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 8002e74:	f504 62ca 	add.w	r2, r4, #1616	; 0x650
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8002e78:	499d      	ldr	r1, [pc, #628]	; (80030f0 <_fx_media_open+0x70c>)
 8002e7a:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 8002e7e:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8002e82:	461a      	mov	r2, r3
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8002e84:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 8002e88:	f884 3650 	strb.w	r3, [r4, #1616]	; 0x650
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 8002e8c:	f884 3550 	strb.w	r3, [r4, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 8002e90:	f884 364f 	strb.w	r3, [r4, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 8002e94:	f8c4 3750 	str.w	r3, [r4, #1872]	; 0x750
    media_ptr -> fx_media_last_found_name[0] =  0;
 8002e98:	f884 33e0 	strb.w	r3, [r4, #992]	; 0x3e0
    media_ptr -> fx_media_opened_file_count =     0;
 8002e9c:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8002ea0:	f006 ffcc 	bl	8009e3c <_tx_mutex_create>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002ea4:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002ea8:	b672      	cpsid	i
    if (_fx_system_media_opened_ptr)
 8002eaa:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <_fx_media_open+0x710>)
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 8002eac:	4992      	ldr	r1, [pc, #584]	; (80030f8 <_fx_media_open+0x714>)
    if (_fx_system_media_opened_ptr)
 8002eae:	6813      	ldr	r3, [r2, #0]
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 8002eb0:	6021      	str	r1, [r4, #0]
    if (_fx_system_media_opened_ptr)
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a2 	beq.w	8002ffc <_fx_media_open+0x618>
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 8002eb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 8002ebc:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 8002ec0:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 8002ec4:	e9c4 3234 	strd	r3, r2, [r4, #208]	; 0xd0
    _fx_system_media_opened_count++;
 8002ec8:	498c      	ldr	r1, [pc, #560]	; (80030fc <_fx_media_open+0x718>)
    if (media_ptr -> fx_media_open_notify)
 8002eca:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    _fx_system_media_opened_count++;
 8002ece:	680b      	ldr	r3, [r1, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	600b      	str	r3, [r1, #0]
    if (media_ptr -> fx_media_open_notify)
 8002ed4:	b10a      	cbz	r2, 8002eda <_fx_media_open+0x4f6>
        media_ptr -> fx_media_open_notify(media_ptr);
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4790      	blx	r2
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002eda:	f386 8810 	msr	PRIMASK, r6
    return(FX_SUCCESS);
 8002ede:	e643      	b.n	8002b68 <_fx_media_open+0x184>
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	e683      	b.n	8002bec <_fx_media_open+0x208>
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 8002ee4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8002ee8:	4298      	cmp	r0, r3
 8002eea:	d837      	bhi.n	8002f5c <_fx_media_open+0x578>
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8002eec:	f242 41a8 	movw	r1, #9384	; 0x24a8
 8002ef0:	f64f 70f0 	movw	r0, #65520	; 0xfff0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8002ef4:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8002ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8002efc:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 8002f00:	e9c4 9918 	strd	r9, r9, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8002f04:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8002f06:	50e2      	str	r2, [r4, r3]
 8002f08:	e744      	b.n	8002d94 <_fx_media_open+0x3b0>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8002f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f0c:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d9a9      	bls.n	8002e66 <_fx_media_open+0x482>
 8002f12:	2602      	movs	r6, #2
 8002f14:	af05      	add	r7, sp, #20
 8002f16:	e00e      	b.n	8002f36 <_fx_media_open+0x552>
            if (FAT_entry == FX_FREE_CLUSTER)
 8002f18:	9b05      	ldr	r3, [sp, #20]
 8002f1a:	b93b      	cbnz	r3, 8002f2c <_fx_media_open+0x548>
                media_ptr -> fx_media_available_clusters++;
 8002f1c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                if (media_ptr -> fx_media_cluster_search_start == 0)
 8002f1e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                media_ptr -> fx_media_available_clusters++;
 8002f22:	3301      	adds	r3, #1
 8002f24:	67e3      	str	r3, [r4, #124]	; 0x7c
                if (media_ptr -> fx_media_cluster_search_start == 0)
 8002f26:	b90a      	cbnz	r2, 8002f2c <_fx_media_open+0x548>
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8002f28:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8002f2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
             cluster_number++)
 8002f2e:	3601      	adds	r6, #1
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8002f30:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 8002f32:	42b3      	cmp	r3, r6
 8002f34:	d997      	bls.n	8002e66 <_fx_media_open+0x482>
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8002f36:	463a      	mov	r2, r7
 8002f38:	4631      	mov	r1, r6
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 f902 	bl	8003144 <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d0e9      	beq.n	8002f18 <_fx_media_open+0x534>
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002f44:	2108      	movs	r1, #8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002f46:	2290      	movs	r2, #144	; 0x90
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002f48:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8002f4c:	4620      	mov	r0, r4
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8002f4e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
                return(FX_FAT_READ_ERROR);
 8002f52:	2503      	movs	r5, #3
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8002f54:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8002f58:	4798      	blx	r3
                return(FX_FAT_READ_ERROR);
 8002f5a:	e605      	b.n	8002b68 <_fx_media_open+0x184>
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 8002f5c:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8002f60:	2201      	movs	r2, #1
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8002f62:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8002f66:	f242 43a8 	movw	r3, #9384	; 0x24a8
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8002f6a:	6662      	str	r2, [r4, #100]	; 0x64
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 8002f6c:	f242 41ac 	movw	r1, #9388	; 0x24ac
 8002f70:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8002f74:	4a62      	ldr	r2, [pc, #392]	; (8003100 <_fx_media_open+0x71c>)
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8002f76:	f1b8 0f01 	cmp.w	r8, #1
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8002f7a:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 8002f7e:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8002f80:	50e2      	str	r2, [r4, r3]
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8002f82:	f240 80b3 	bls.w	80030ec <_fx_media_open+0x708>
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8002f86:	f1a8 0302 	sub.w	r3, r8, #2
 8002f8a:	af05      	add	r7, sp, #20
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8002f8c:	fb0a b303 	mla	r3, sl, r3, fp
            if (FAT_entry >= FX_RESERVED_1_32)
 8002f90:	f8df a178 	ldr.w	sl, [pc, #376]	; 800310c <_fx_media_open+0x728>
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8002f94:	64a3      	str	r3, [r4, #72]	; 0x48
 8002f96:	e008      	b.n	8002faa <_fx_media_open+0x5c6>
            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 8002f98:	9b05      	ldr	r3, [sp, #20]
 8002f9a:	4543      	cmp	r3, r8
 8002f9c:	4698      	mov	r8, r3
 8002f9e:	d0d1      	beq.n	8002f44 <_fx_media_open+0x560>
 8002fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa2:	454b      	cmp	r3, r9
 8002fa4:	d3ce      	bcc.n	8002f44 <_fx_media_open+0x560>
            if (FAT_entry >= FX_RESERVED_1_32)
 8002fa6:	45d0      	cmp	r8, sl
 8002fa8:	d837      	bhi.n	800301a <_fx_media_open+0x636>
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8002faa:	463a      	mov	r2, r7
 8002fac:	4641      	mov	r1, r8
 8002fae:	4620      	mov	r0, r4
            i++;
 8002fb0:	f109 0901 	add.w	r9, r9, #1
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8002fb4:	f000 f8c6 	bl	8003144 <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d0ed      	beq.n	8002f98 <_fx_media_open+0x5b4>
 8002fbc:	e7c2      	b.n	8002f44 <_fx_media_open+0x560>
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8002fbe:	468e      	mov	lr, r1
 8002fc0:	e001      	b.n	8002fc6 <_fx_media_open+0x5e2>
            for (j = 0; j < bytes_in_buffer;)
 8002fc2:	4558      	cmp	r0, fp
 8002fc4:	d911      	bls.n	8002fea <_fx_media_open+0x606>
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 8002fc6:	f85e 3b04 	ldr.w	r3, [lr], #4
            for (j = 0; j < bytes_in_buffer;)
 8002fca:	ebae 0b01 	sub.w	fp, lr, r1
 8002fce:	9305      	str	r3, [sp, #20]
                if (FAT_entry == FX_FREE_CLUSTER)
 8002fd0:	b93b      	cbnz	r3, 8002fe2 <_fx_media_open+0x5fe>
                    media_ptr -> fx_media_available_clusters++;
 8002fd2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8002fd4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    media_ptr -> fx_media_available_clusters++;
 8002fd8:	3301      	adds	r3, #1
 8002fda:	67e3      	str	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8002fdc:	b90a      	cbnz	r2, 8002fe2 <_fx_media_open+0x5fe>
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8002fde:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
                cluster_number++;
 8002fe2:	3601      	adds	r6, #1
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8002fe4:	45b4      	cmp	ip, r6
 8002fe6:	d8ec      	bhi.n	8002fc2 <_fx_media_open+0x5de>
 8002fe8:	e737      	b.n	8002e5a <_fx_media_open+0x476>
 8002fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fec:	e737      	b.n	8002e5e <_fx_media_open+0x47a>
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8002fee:	088b      	lsrs	r3, r1, #2
        media_ptr -> fx_media_sector_cache_hash_mask =
 8002ff0:	f242 41a0 	movw	r1, #9376	; 0x24a0
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 8002ff4:	2201      	movs	r2, #1
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8002ff6:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 8002ff8:	5063      	str	r3, [r4, r1]
 8002ffa:	e62e      	b.n	8002c5a <_fx_media_open+0x276>
        _fx_system_media_opened_ptr =           media_ptr;
 8002ffc:	6014      	str	r4, [r2, #0]
        media_ptr -> fx_media_opened_previous = media_ptr;
 8002ffe:	e9c4 4434 	strd	r4, r4, [r4, #208]	; 0xd0
 8003002:	e761      	b.n	8002ec8 <_fx_media_open+0x4e4>
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8003004:	2208      	movs	r2, #8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8003006:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800300a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800300e:	4620      	mov	r0, r4
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8003010:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
                return(FX_FAT_READ_ERROR);
 8003014:	2503      	movs	r5, #3
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003016:	4798      	blx	r3
                return(FX_FAT_READ_ERROR);
 8003018:	e5a6      	b.n	8002b68 <_fx_media_open+0x184>
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800301a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800301c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    media_ptr -> fx_media_available_clusters =  0;
 800301e:	67e0      	str	r0, [r4, #124]	; 0x7c
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8003020:	fb03 f302 	mul.w	r3, r3, r2
 8003024:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    media_ptr -> fx_media_cluster_search_start =  0;
 8003026:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800302a:	fb09 f903 	mul.w	r9, r9, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800302e:	ea4f 1359 	mov.w	r3, r9, lsr #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8003032:	67a3      	str	r3, [r4, #120]	; 0x78
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 8003034:	2a00      	cmp	r2, #0
 8003036:	f43f aeb1 	beq.w	8002d9c <_fx_media_open+0x3b8>
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800303a:	69e2      	ldr	r2, [r4, #28]
        media_ptr -> fx_media_driver_sectors =          1;
 800303c:	2101      	movs	r1, #1
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800303e:	f04f 38ff 	mov.w	r8, #4294967295
 8003042:	f04f 39ff 	mov.w	r9, #4294967295
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8003046:	7450      	strb	r0, [r2, #17]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003048:	2790      	movs	r7, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 800304a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800304e:	e9c2 8902 	strd	r8, r9, [r2, #8]
        media_ptr -> fx_media_driver_read_requests++;
 8003052:	440b      	add	r3, r1
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8003054:	6812      	ldr	r2, [r2, #0]
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8003056:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800305a:	4620      	mov	r0, r4
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800305c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8003060:	2203      	movs	r2, #3
        media_ptr -> fx_media_driver_read_requests++;
 8003062:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8003066:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003068:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800306c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8003070:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003074:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8003078:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800307c:	4798      	blx	r3
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800307e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003082:	b153      	cbz	r3, 800309a <_fx_media_open+0x6b6>
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8003084:	2300      	movs	r3, #0
 8003086:	66a3      	str	r3, [r4, #104]	; 0x68
    if (media_ptr -> fx_media_12_bit_FAT)
 8003088:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800308a:	2b00      	cmp	r3, #0
 800308c:	f47f af3d 	bne.w	8002f0a <_fx_media_open+0x526>
    else if (media_ptr -> fx_media_available_clusters == 0)
 8003090:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003092:	2b00      	cmp	r3, #0
 8003094:	f47f aee7 	bne.w	8002e66 <_fx_media_open+0x482>
 8003098:	e684      	b.n	8002da4 <_fx_media_open+0x3c0>
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800309a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800309e:	4638      	mov	r0, r7
 80030a0:	f000 f83c 	bl	800311c <_fx_utility_32_unsigned_read>
            if (signature == 0x41615252)
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <_fx_media_open+0x720>)
 80030a6:	4298      	cmp	r0, r3
 80030a8:	d1ec      	bne.n	8003084 <_fx_media_open+0x6a0>
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80030aa:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 80030ae:	f000 f835 	bl	800311c <_fx_utility_32_unsigned_read>
                if (signature == 0x61417272)
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <_fx_media_open+0x724>)
 80030b4:	4298      	cmp	r0, r3
 80030b6:	d1e5      	bne.n	8003084 <_fx_media_open+0x6a0>
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 80030b8:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 80030bc:	f000 f82e 	bl	800311c <_fx_utility_32_unsigned_read>
 80030c0:	4603      	mov	r3, r0
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 80030c2:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 80030c6:	67e3      	str	r3, [r4, #124]	; 0x7c
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 80030c8:	66e3      	str	r3, [r4, #108]	; 0x6c
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 80030ca:	f000 f827 	bl	800311c <_fx_utility_32_unsigned_read>
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 80030ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030d0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 80030d2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	f63f ae5c 	bhi.w	8002d94 <_fx_media_open+0x3b0>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 80030dc:	3302      	adds	r3, #2
 80030de:	4298      	cmp	r0, r3
 80030e0:	f63f ae58 	bhi.w	8002d94 <_fx_media_open+0x3b0>
 80030e4:	2801      	cmp	r0, #1
 80030e6:	f67f ae55 	bls.w	8002d94 <_fx_media_open+0x3b0>
 80030ea:	e7cd      	b.n	8003088 <_fx_media_open+0x6a4>
                return(FX_MEDIA_INVALID);
 80030ec:	2502      	movs	r5, #2
 80030ee:	e53b      	b.n	8002b68 <_fx_media_open+0x184>
 80030f0:	0800b494 	.word	0x0800b494
 80030f4:	20003a20 	.word	0x20003a20
 80030f8:	4d454449 	.word	0x4d454449
 80030fc:	20003a18 	.word	0x20003a18
 8003100:	0ffffff0 	.word	0x0ffffff0
 8003104:	41615252 	.word	0x41615252
 8003108:	61417272 	.word	0x61417272
 800310c:	0fffffef 	.word	0x0fffffef

08003110 <_fx_utility_16_unsigned_read>:
{

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8003110:	7803      	ldrb	r3, [r0, #0]
 8003112:	7840      	ldrb	r0, [r0, #1]
              ((UINT)*(source_ptr) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8003114:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <_fx_utility_32_unsigned_read>:
{

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800311c:	7803      	ldrb	r3, [r0, #0]
 800311e:	7841      	ldrb	r1, [r0, #1]
 8003120:	7882      	ldrb	r2, [r0, #2]
 8003122:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003126:	78c0      	ldrb	r0, [r0, #3]
 8003128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
              (((ULONG) *(source_ptr)) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 800312c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <_fx_utility_32_unsigned_write>:
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8003134:	0a0a      	lsrs	r2, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8003136:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8003138:	0c0b      	lsrs	r3, r1, #16
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800313a:	0e09      	lsrs	r1, r1, #24
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800313c:	7042      	strb	r2, [r0, #1]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800313e:	7083      	strb	r3, [r0, #2]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8003140:	70c1      	strb	r1, [r0, #3]
}
 8003142:	4770      	bx	lr

08003144 <_fx_utility_FAT_entry_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 8003144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8003148:	f001 0403 	and.w	r4, r1, #3
    media_ptr -> fx_media_fat_entry_reads++;
 800314c:	f8d0 6178 	ldr.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8003150:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
{
 8003154:	b089      	sub	sp, #36	; 0x24
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8003156:	00a7      	lsls	r7, r4, #2
    media_ptr -> fx_media_fat_entry_reads++;
 8003158:	3601      	adds	r6, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800315a:	3301      	adds	r3, #1
    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];

    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800315c:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    media_ptr -> fx_media_fat_entry_reads++;
 8003160:	f8c0 6178 	str.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8003164:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8003168:	00a4      	lsls	r4, r4, #2
 800316a:	eb00 0c04 	add.w	ip, r0, r4
 800316e:	f8dc 6758 	ldr.w	r6, [ip, #1880]	; 0x758
 8003172:	428e      	cmp	r6, r1
 8003174:	d05f      	beq.n	8003236 <_fx_utility_FAT_entry_read+0xf2>
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8003176:	f504 64eb 	add.w	r4, r4, #1880	; 0x758
 800317a:	4605      	mov	r5, r0
 800317c:	f50c 6eeb 	add.w	lr, ip, #1880	; 0x758
 8003180:	4404      	add	r4, r0
        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 8003182:	68e6      	ldr	r6, [r4, #12]
 8003184:	428e      	cmp	r6, r1
 8003186:	d041      	beq.n	800320c <_fx_utility_FAT_entry_read+0xc8>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8003188:	69a6      	ldr	r6, [r4, #24]
 800318a:	428e      	cmp	r6, r1
 800318c:	d063      	beq.n	8003256 <_fx_utility_FAT_entry_read+0x112>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800318e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003190:	428e      	cmp	r6, r1
 8003192:	d07b      	beq.n	800328c <_fx_utility_FAT_entry_read+0x148>
 8003194:	4690      	mov	r8, r2
        return(FX_SUCCESS);
    }

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8003196:	1cfa      	adds	r2, r7, #3
 8003198:	460e      	mov	r6, r1
 800319a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800319e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80031a2:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80031a6:	2a00      	cmp	r2, #0
 80031a8:	d14d      	bne.n	8003246 <_fx_utility_FAT_entry_read+0x102>

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 80031aa:	f8d5 1184 	ldr.w	r1, [r5, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 80031ae:	1e5a      	subs	r2, r3, #1
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 80031b0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 80031b2:	3101      	adds	r1, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 80031b4:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
 80031b8:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 80031bc:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
 80031c0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80031c2:	68a8      	ldr	r0, [r5, #8]
    if (media_ptr -> fx_media_12_bit_FAT)
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 809d 	bne.w	8003304 <_fx_utility_FAT_entry_read+0x1c0>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 80031ca:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d17e      	bne.n	80032ce <_fx_utility_FAT_entry_read+0x18a>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 80031d0:	ea4f 0a46 	mov.w	sl, r6, lsl #1
        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
            (ULONG)media_ptr -> fx_media_reserved_sectors;

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80031d4:	460b      	mov	r3, r1
 80031d6:	9000      	str	r0, [sp, #0]
 80031d8:	2101      	movs	r1, #1
 80031da:	2002      	movs	r0, #2
 80031dc:	9101      	str	r1, [sp, #4]
 80031de:	9002      	str	r0, [sp, #8]
 80031e0:	4628      	mov	r0, r5
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80031e2:	fbba f9f9 	udiv	r9, sl, r9
 80031e6:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80031e8:	464a      	mov	r2, r9
 80031ea:	f000 feaf 	bl	8003f4c <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80031ee:	4603      	mov	r3, r0
 80031f0:	b9e8      	cbnz	r0, 800322e <_fx_utility_FAT_entry_read+0xea>
            return(status);
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80031f2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80031f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80031f6:	eba9 0902 	sub.w	r9, r9, r2
             media_ptr -> fx_media_bytes_per_sector);

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80031fa:	68a8      	ldr	r0, [r5, #8]
        byte_offset =  byte_offset -
 80031fc:	fb03 aa19 	mls	sl, r3, r9, sl

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8003200:	4450      	add	r0, sl
 8003202:	f7ff ff85 	bl	8003110 <_fx_utility_16_unsigned_read>

        *entry_ptr =  entry;
 8003206:	f8c8 0000 	str.w	r0, [r8]
 800320a:	e0b2      	b.n	8003372 <_fx_utility_FAT_entry_read+0x22e>
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800320c:	6921      	ldr	r1, [r4, #16]
        temp_cache_entry =        *(cache_entry_ptr);
 800320e:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8003210:	340c      	adds	r4, #12
        return(FX_SUCCESS);
 8003212:	2300      	movs	r3, #0
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8003214:	6011      	str	r1, [r2, #0]
        temp_cache_entry =        *(cache_entry_ptr);
 8003216:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800321a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800321e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003222:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8003226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800322a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 800322e:	4618      	mov	r0, r3
 8003230:	b009      	add	sp, #36	; 0x24
 8003232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_SUCCESS);
 8003236:	2300      	movs	r3, #0
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8003238:	f8dc 175c 	ldr.w	r1, [ip, #1884]	; 0x75c
}
 800323c:	4618      	mov	r0, r3
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800323e:	6011      	str	r1, [r2, #0]
}
 8003240:	b009      	add	sp, #36	; 0x24
 8003242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status = _fx_utility_FAT_flush(media_ptr);
 8003246:	f000 f967 	bl	8003518 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 800324a:	4603      	mov	r3, r0
 800324c:	2800      	cmp	r0, #0
 800324e:	d1ee      	bne.n	800322e <_fx_utility_FAT_entry_read+0xea>
 8003250:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 8003254:	e7a9      	b.n	80031aa <_fx_utility_FAT_entry_read+0x66>
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8003256:	69e3      	ldr	r3, [r4, #28]
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8003258:	f104 0718 	add.w	r7, r4, #24
        temp_cache_entry =        *(cache_entry_ptr);
 800325c:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800325e:	340c      	adds	r4, #12
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8003260:	6013      	str	r3, [r2, #0]
        return(FX_SUCCESS);
 8003262:	2300      	movs	r3, #0
        temp_cache_entry =        *(cache_entry_ptr);
 8003264:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003268:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800326c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003270:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8003274:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003278:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800327c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003284:	4618      	mov	r0, r3
 8003286:	b009      	add	sp, #36	; 0x24
 8003288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800328c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        temp_cache_entry =        *(cache_entry_ptr);
 800328e:	ab05      	add	r3, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8003290:	f104 0724 	add.w	r7, r4, #36	; 0x24
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8003294:	f104 0518 	add.w	r5, r4, #24
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8003298:	6011      	str	r1, [r2, #0]
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800329a:	340c      	adds	r4, #12
        temp_cache_entry =        *(cache_entry_ptr);
 800329c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80032a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 80032a4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80032a8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80032ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032b0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80032b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80032bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
        return(FX_SUCCESS);
 80032c0:	2300      	movs	r3, #0
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80032c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	b009      	add	sp, #36	; 0x24
 80032ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byte_offset =  (((ULONG)cluster) * 4);
 80032ce:	ea4f 0a86 	mov.w	sl, r6, lsl #2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80032d2:	f04f 0c02 	mov.w	ip, #2
 80032d6:	2101      	movs	r1, #1
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80032d8:	fbba fbf9 	udiv	fp, sl, r9
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80032dc:	e88d 1003 	stmia.w	sp, {r0, r1, ip}
 80032e0:	445a      	add	r2, fp
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 fe32 	bl	8003f4c <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 80032e8:	4603      	mov	r3, r0
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d19f      	bne.n	800322e <_fx_utility_FAT_entry_read+0xea>
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 80032ee:	68a8      	ldr	r0, [r5, #8]
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 80032f0:	fb09 a91b 	mls	r9, r9, fp, sl
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 80032f4:	4448      	add	r0, r9
 80032f6:	f7ff ff11 	bl	800311c <_fx_utility_32_unsigned_read>
            entry32 = entry32 & 0x0FFFFFFF;
 80032fa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
        *entry_ptr =  entry32;
 80032fe:	f8c8 0000 	str.w	r0, [r8]
 8003302:	e036      	b.n	8003372 <_fx_utility_FAT_entry_read+0x22e>
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8003304:	f04f 0b01 	mov.w	fp, #1
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8003308:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800330c:	2302      	movs	r3, #2
 800330e:	9000      	str	r0, [sp, #0]
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8003310:	fa2a fa0b 	lsr.w	sl, sl, fp
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8003314:	f8cd b004 	str.w	fp, [sp, #4]
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	4628      	mov	r0, r5
 800331c:	2300      	movs	r3, #0
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800331e:	fbba f9f9 	udiv	r9, sl, r9
 8003322:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8003324:	464a      	mov	r2, r9
 8003326:	f000 fe11 	bl	8003f4c <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 800332a:	4603      	mov	r3, r0
 800332c:	2800      	cmp	r0, #0
 800332e:	f47f af7e 	bne.w	800322e <_fx_utility_FAT_entry_read+0xea>
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8003332:	6c6a      	ldr	r2, [r5, #68]	; 0x44
             media_ptr -> fx_media_bytes_per_sector);
 8003334:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8003336:	eba9 0202 	sub.w	r2, r9, r2
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800333a:	68a8      	ldr	r0, [r5, #8]
 800333c:	f101 3cff 	add.w	ip, r1, #4294967295
        byte_offset =  byte_offset -
 8003340:	fb01 a212 	mls	r2, r1, r2, sl
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8003344:	eb00 0e02 	add.w	lr, r0, r2
 8003348:	f810 a002 	ldrb.w	sl, [r0, r2]
 800334c:	eb0e 010b 	add.w	r1, lr, fp
        if (cluster & 1)
 8003350:	ea16 0e0b 	ands.w	lr, r6, fp
 8003354:	d02c      	beq.n	80033b0 <_fx_utility_FAT_entry_read+0x26c>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8003356:	4562      	cmp	r2, ip
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8003358:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800335c:	d031      	beq.n	80033c2 <_fx_utility_FAT_entry_read+0x27e>
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800335e:	780b      	ldrb	r3, [r1, #0]
 8003360:	ea4a 1303 	orr.w	r3, sl, r3, lsl #4
        if (entry >= FX_MAX_12BIT_CLUST)
 8003364:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
            entry =  entry | FX_SIGN_EXTEND;
 8003368:	bf28      	it	cs
 800336a:	f443 4370 	orrcs.w	r3, r3, #61440	; 0xf000
        *entry_ptr =  entry;
 800336e:	f8c8 3000 	str.w	r3, [r8]
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8003372:	f104 0c18 	add.w	ip, r4, #24
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8003376:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800337a:	f104 0e24 	add.w	lr, r4, #36	; 0x24
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800337e:	340c      	adds	r4, #12
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8003380:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    return(FX_SUCCESS);
 8003384:	2300      	movs	r3, #0
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8003386:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800338a:	f505 67eb 	add.w	r7, r5, #1880	; 0x758
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800338e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8003392:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003396:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800339a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800339e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 80033a2:	f8c5 6758 	str.w	r6, [r5, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 80033a6:	f8d8 2000 	ldr.w	r2, [r8]
 80033aa:	f8c5 275c 	str.w	r2, [r5, #1884]	; 0x75c
    return(FX_SUCCESS);
 80033ae:	e73e      	b.n	800322e <_fx_utility_FAT_entry_read+0xea>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80033b0:	4562      	cmp	r2, ip
 80033b2:	d015      	beq.n	80033e0 <_fx_utility_FAT_entry_read+0x29c>
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 80033b4:	780b      	ldrb	r3, [r1, #0]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033bc:	ea43 030a 	orr.w	r3, r3, sl
 80033c0:	e7d0      	b.n	8003364 <_fx_utility_FAT_entry_read+0x220>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80033c2:	2202      	movs	r2, #2
 80033c4:	e9cd 0b00 	strd	r0, fp, [sp]
 80033c8:	9202      	str	r2, [sp, #8]
 80033ca:	4628      	mov	r0, r5
 80033cc:	eb09 020b 	add.w	r2, r9, fp
 80033d0:	f000 fdbc 	bl	8003f4c <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 80033d4:	4603      	mov	r3, r0
 80033d6:	2800      	cmp	r0, #0
 80033d8:	f47f af29 	bne.w	800322e <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80033dc:	68a9      	ldr	r1, [r5, #8]
 80033de:	e7be      	b.n	800335e <_fx_utility_FAT_entry_read+0x21a>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80033e0:	2302      	movs	r3, #2
 80033e2:	9000      	str	r0, [sp, #0]
 80033e4:	f109 0201 	add.w	r2, r9, #1
 80033e8:	f8cd b004 	str.w	fp, [sp, #4]
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	4628      	mov	r0, r5
 80033f0:	4673      	mov	r3, lr
 80033f2:	f000 fdab 	bl	8003f4c <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 80033f6:	4603      	mov	r3, r0
 80033f8:	2800      	cmp	r0, #0
 80033fa:	f47f af18 	bne.w	800322e <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80033fe:	68a9      	ldr	r1, [r5, #8]
 8003400:	e7d8      	b.n	80033b4 <_fx_utility_FAT_entry_read+0x270>
 8003402:	bf00      	nop

08003404 <_fx_utility_FAT_entry_write>:

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8003404:	f001 0303 	and.w	r3, r1, #3
{
 8003408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800340c:	009e      	lsls	r6, r3, #2
{
 800340e:	4691      	mov	r9, r2
    media_ptr -> fx_media_fat_entry_writes++;
 8003410:	f8d0 217c 	ldr.w	r2, [r0, #380]	; 0x17c
{
 8003414:	460f      	mov	r7, r1

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8003416:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 800341a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_writes++;
 800341e:	3201      	adds	r2, #1
{
 8003420:	4605      	mov	r5, r0
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8003422:	009b      	lsls	r3, r3, #2
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8003424:	1c4c      	adds	r4, r1, #1
    media_ptr -> fx_media_fat_entry_writes++;
 8003426:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800342a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 800342e:	f8c0 4188 	str.w	r4, [r0, #392]	; 0x188
    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8003432:	58c2      	ldr	r2, [r0, r3]
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8003434:	4403      	add	r3, r0
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8003436:	4297      	cmp	r7, r2
 8003438:	d058      	beq.n	80034ec <_fx_utility_FAT_entry_write+0xe8>
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	f103 080c 	add.w	r8, r3, #12
 8003440:	4297      	cmp	r7, r2
 8003442:	d064      	beq.n	800350e <_fx_utility_FAT_entry_write+0x10a>
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	f103 0a18 	add.w	sl, r3, #24
 800344a:	4297      	cmp	r7, r2
 800344c:	d04d      	beq.n	80034ea <_fx_utility_FAT_entry_write+0xe6>
 800344e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003450:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003454:	42ba      	cmp	r2, r7
 8003456:	d05c      	beq.n	8003512 <_fx_utility_FAT_entry_write+0x10e>
    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8003458:	1cf2      	adds	r2, r6, #3
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 800345a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 800345e:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8003462:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8003466:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8003468:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 800346c:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8003470:	f8d2 3760 	ldr.w	r3, [r2, #1888]	; 0x760
 8003474:	2b01      	cmp	r3, #1
 8003476:	d045      	beq.n	8003504 <_fx_utility_FAT_entry_write+0x100>
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8003478:	eb06 0646 	add.w	r6, r6, r6, lsl #1

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 800347c:	f04f 0c01 	mov.w	ip, #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8003480:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8003484:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8003488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800348c:	f506 63eb 	add.w	r3, r6, #1880	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8003490:	f8d5 40ac 	ldr.w	r4, [r5, #172]	; 0xac
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8003494:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003498:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800349c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 80034a4:	f8c6 7758 	str.w	r7, [r6, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 80034a8:	f8c6 975c 	str.w	r9, [r6, #1884]	; 0x75c
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 80034ac:	f8c6 c760 	str.w	ip, [r6, #1888]	; 0x760
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 80034b0:	b1c4      	cbz	r4, 80034e4 <_fx_utility_FAT_entry_write+0xe0>
 80034b2:	f1b9 0f00 	cmp.w	r9, #0
 80034b6:	d115      	bne.n	80034e4 <_fx_utility_FAT_entry_write+0xe0>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 80034b8:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80034bc:	3f02      	subs	r7, #2
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80034be:	2406      	movs	r4, #6

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80034c0:	4628      	mov	r0, r5
        media_ptr -> fx_media_driver_release_sectors_requests++;
 80034c2:	3301      	adds	r3, #1
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80034c4:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
        media_ptr -> fx_media_driver_release_sectors_requests++;
 80034c8:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80034cc:	fb02 1707 	mla	r7, r2, r7, r1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80034d0:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80034d2:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80034d6:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80034da:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80034de:	e9c5 4122 	strd	r4, r1, [r5, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80034e2:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 80034e4:	2000      	movs	r0, #0
}
 80034e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 80034ea:	4653      	mov	r3, sl
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 80034ec:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 80034f0:	2101      	movs	r1, #1
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 80034f2:	f8c3 9004 	str.w	r9, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 80034f6:	6099      	str	r1, [r3, #8]
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	d0f3      	beq.n	80034e4 <_fx_utility_FAT_entry_write+0xe0>
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 80034fc:	f1b9 0f00 	cmp.w	r9, #0
 8003500:	d0da      	beq.n	80034b8 <_fx_utility_FAT_entry_write+0xb4>
 8003502:	e7ef      	b.n	80034e4 <_fx_utility_FAT_entry_write+0xe0>
        status = _fx_utility_FAT_flush(media_ptr);
 8003504:	f000 f808 	bl	8003518 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 8003508:	2800      	cmp	r0, #0
 800350a:	d0b5      	beq.n	8003478 <_fx_utility_FAT_entry_write+0x74>
 800350c:	e7eb      	b.n	80034e6 <_fx_utility_FAT_entry_write+0xe2>
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 800350e:	4643      	mov	r3, r8
 8003510:	e7ec      	b.n	80034ec <_fx_utility_FAT_entry_write+0xe8>
 8003512:	4623      	mov	r3, r4
 8003514:	e7ea      	b.n	80034ec <_fx_utility_FAT_entry_write+0xe8>
 8003516:	bf00      	nop

08003518 <_fx_utility_FAT_flush>:
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8003518:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
{
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_fat_cache_flushes++;
 8003520:	3301      	adds	r3, #1
{
 8003522:	b085      	sub	sp, #20
 8003524:	4604      	mov	r4, r0
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8003526:	2700      	movs	r7, #0
 8003528:	4606      	mov	r6, r0
    media_ptr -> fx_media_fat_cache_flushes++;
 800352a:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 800352e:	f8d6 3760 	ldr.w	r3, [r6, #1888]	; 0x760
 8003532:	2b00      	cmp	r3, #0
 8003534:	d064      	beq.n	8003600 <_fx_utility_FAT_flush+0xe8>

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8003536:	6e23      	ldr	r3, [r4, #96]	; 0x60
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8003538:	f8d6 2758 	ldr.w	r2, [r6, #1880]	; 0x758
 800353c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003540:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003542:	68a0      	ldr	r0, [r4, #8]
        if (media_ptr -> fx_media_12_bit_FAT)
 8003544:	2b00      	cmp	r3, #0
 8003546:	d163      	bne.n	8003610 <_fx_utility_FAT_flush+0xf8>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8003548:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 800354c:	f1be 0f00 	cmp.w	lr, #0
 8003550:	f040 8124 	bne.w	800379c <_fx_utility_FAT_flush+0x284>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8003554:	0055      	lsls	r5, r2, #1
            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
                (ULONG)media_ptr -> fx_media_reserved_sectors;

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8003556:	9000      	str	r0, [sp, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	2002      	movs	r0, #2
 800355c:	4673      	mov	r3, lr
 800355e:	9002      	str	r0, [sp, #8]
 8003560:	4620      	mov	r0, r4
 8003562:	9201      	str	r2, [sp, #4]
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8003564:	fbb5 f5fc 	udiv	r5, r5, ip
 8003568:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800356a:	462a      	mov	r2, r5
 800356c:	f000 fcee 	bl	8003f4c <_fx_utility_logical_sector_read>
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8003570:	2800      	cmp	r0, #0
 8003572:	d14a      	bne.n	800360a <_fx_utility_FAT_flush+0xf2>
 8003574:	68a0      	ldr	r0, [r4, #8]
 8003576:	46b0      	mov	r8, r6
 8003578:	46b9      	mov	r9, r7
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800357a:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800357e:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8003582:	b1b3      	cbz	r3, 80035b2 <_fx_utility_FAT_flush+0x9a>

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8003584:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8003588:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 2);
 800358c:	005b      	lsls	r3, r3, #1
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800358e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8003590:	fbb3 f2fc 	udiv	r2, r3, ip
 8003594:	440a      	add	r2, r1

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8003596:	4295      	cmp	r5, r2
 8003598:	d10b      	bne.n	80035b2 <_fx_utility_FAT_flush+0x9a>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800359a:	1a6a      	subs	r2, r5, r1

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 800359c:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 80035a0:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 80035a4:	4418      	add	r0, r3
 80035a6:	f002 fd77 	bl	8006098 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	68a0      	ldr	r0, [r4, #8]
 80035ae:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80035b2:	f1b9 0f10 	cmp.w	r9, #16
 80035b6:	f108 080c 	add.w	r8, r8, #12
 80035ba:	d1de      	bne.n	800357a <_fx_utility_FAT_flush+0x62>
                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80035bc:	2302      	movs	r3, #2
 80035be:	2101      	movs	r1, #1
 80035c0:	9000      	str	r0, [sp, #0]
 80035c2:	462a      	mov	r2, r5
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	4620      	mov	r0, r4
 80035c8:	2300      	movs	r3, #0
 80035ca:	9101      	str	r1, [sp, #4]
 80035cc:	f000 fe6c 	bl	80042a8 <_fx_utility_logical_sector_write>
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80035d0:	b9d8      	cbnz	r0, 800360a <_fx_utility_FAT_flush+0xf2>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80035d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80035d4:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80035d8:	f3c2 2287 	ubfx	r2, r2, #10, #8
 80035dc:	b10b      	cbz	r3, 80035e2 <_fx_utility_FAT_flush+0xca>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 80035de:	3201      	adds	r2, #1
 80035e0:	b2d2      	uxtb	r2, r2
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80035e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 80035e4:	2301      	movs	r3, #1
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80035e6:	1a6d      	subs	r5, r5, r1
 80035e8:	fbb5 f5f2 	udiv	r5, r5, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80035ec:	eb04 02d5 	add.w	r2, r4, r5, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 80035f0:	40ab      	lsls	r3, r5
 80035f2:	f892 1818 	ldrb.w	r1, [r2, #2072]	; 0x818
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	430b      	orrs	r3, r1
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80035fc:	f882 3818 	strb.w	r3, [r2, #2072]	; 0x818
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8003600:	3701      	adds	r7, #1
 8003602:	360c      	adds	r6, #12
 8003604:	2f10      	cmp	r7, #16
 8003606:	d192      	bne.n	800352e <_fx_utility_FAT_flush+0x16>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8003608:	2000      	movs	r0, #0
}
 800360a:	b005      	add	sp, #20
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8003610:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            multi_sector_entry = -1;
 8003614:	f04f 38ff 	mov.w	r8, #4294967295
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8003618:	0855      	lsrs	r5, r2, #1
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800361a:	fbb5 f5fc 	udiv	r5, r5, ip
 800361e:	440d      	add	r5, r1
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8003620:	2301      	movs	r3, #1
 8003622:	2202      	movs	r2, #2
 8003624:	9000      	str	r0, [sp, #0]
 8003626:	4620      	mov	r0, r4
 8003628:	9202      	str	r2, [sp, #8]
 800362a:	462a      	mov	r2, r5
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2300      	movs	r3, #0
 8003630:	f000 fc8c 	bl	8003f4c <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8003634:	2800      	cmp	r0, #0
 8003636:	d1e8      	bne.n	800360a <_fx_utility_FAT_flush+0xf2>
                if (multi_sector_entry != -1)
 8003638:	f1b8 3fff 	cmp.w	r8, #4294967295
 800363c:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8003640:	d00f      	beq.n	8003662 <_fx_utility_FAT_flush+0x14a>
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8003642:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8003646:	eb04 0888 	add.w	r8, r4, r8, lsl #2
                    if (cluster & 1)
 800364a:	f8d8 2758 	ldr.w	r2, [r8, #1880]	; 0x758
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800364e:	f8d8 375c 	ldr.w	r3, [r8, #1884]	; 0x75c
                    if (cluster & 1)
 8003652:	07d2      	lsls	r2, r2, #31
 8003654:	f140 808a 	bpl.w	800376c <_fx_utility_FAT_flush+0x254>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f88e 3000 	strb.w	r3, [lr]
 800365e:	f8d4 e008 	ldr.w	lr, [r4, #8]
            multi_sector_entry = -1;
 8003662:	4631      	mov	r1, r6
 8003664:	4638      	mov	r0, r7
 8003666:	f04f 38ff 	mov.w	r8, #4294967295
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 800366a:	f8d1 3760 	ldr.w	r3, [r1, #1888]	; 0x760
 800366e:	b38b      	cbz	r3, 80036d4 <_fx_utility_FAT_flush+0x1bc>
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8003670:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8003674:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8003678:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 800367c:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800367e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8003682:	fbbc f9fa 	udiv	r9, ip, sl
 8003686:	4499      	add	r9, r3
                    if (sector != FAT_sector)
 8003688:	454d      	cmp	r5, r9
 800368a:	d123      	bne.n	80036d4 <_fx_utility_FAT_flush+0x1bc>
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800368c:	1aeb      	subs	r3, r5, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800368e:	f10a 3bff 	add.w	fp, sl, #4294967295
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8003692:	f8d1 975c 	ldr.w	r9, [r1, #1884]	; 0x75c
 8003696:	f002 0201 	and.w	r2, r2, #1
                    byte_offset =  byte_offset -
 800369a:	fb0a c313 	mls	r3, sl, r3, ip
 800369e:	fa5f fc89 	uxtb.w	ip, r9
 80036a2:	449e      	add	lr, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80036a4:	459b      	cmp	fp, r3
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f8c1 3760 	str.w	r3, [r1, #1888]	; 0x760
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80036ae:	d056      	beq.n	800375e <_fx_utility_FAT_flush+0x246>
                    if (cluster & 1)
 80036b0:	2a00      	cmp	r2, #0
 80036b2:	d043      	beq.n	800373c <_fx_utility_FAT_flush+0x224>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80036b4:	f89e 3000 	ldrb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 80036b8:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80036c2:	f88e 3000 	strb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 80036c6:	d047      	beq.n	8003758 <_fx_utility_FAT_flush+0x240>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80036c8:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80036cc:	f88e 9001 	strb.w	r9, [lr, #1]
 80036d0:	f8d4 e008 	ldr.w	lr, [r4, #8]
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80036d4:	3001      	adds	r0, #1
 80036d6:	310c      	adds	r1, #12
 80036d8:	2810      	cmp	r0, #16
 80036da:	d1c6      	bne.n	800366a <_fx_utility_FAT_flush+0x152>
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80036dc:	2301      	movs	r3, #1
 80036de:	2202      	movs	r2, #2
 80036e0:	f8cd e000 	str.w	lr, [sp]
 80036e4:	4620      	mov	r0, r4
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	462a      	mov	r2, r5
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2300      	movs	r3, #0
 80036ee:	f000 fddb 	bl	80042a8 <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d189      	bne.n	800360a <_fx_utility_FAT_flush+0xf2>
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80036f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036fc:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8003700:	b10a      	cbz	r2, 8003706 <_fx_utility_FAT_flush+0x1ee>
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8003702:	3301      	adds	r3, #1
 8003704:	b2db      	uxtb	r3, r3
                if (sectors_per_bit == 0)
 8003706:	2b00      	cmp	r3, #0
 8003708:	d07d      	beq.n	8003806 <_fx_utility_FAT_flush+0x2ee>
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800370a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 800370c:	2201      	movs	r2, #1
                if (multi_sector_entry != -1)
 800370e:	f1b8 3fff 	cmp.w	r8, #4294967295
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8003712:	eba5 0101 	sub.w	r1, r5, r1
 8003716:	fbb1 f3f3 	udiv	r3, r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800371a:	eb04 01d3 	add.w	r1, r4, r3, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	f891 2818 	ldrb.w	r2, [r1, #2072]	; 0x818
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	ea43 0302 	orr.w	r3, r3, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800372e:	f881 3818 	strb.w	r3, [r1, #2072]	; 0x818
                if (multi_sector_entry != -1)
 8003732:	f43f af65 	beq.w	8003600 <_fx_utility_FAT_flush+0xe8>
                    FAT_sector++;
 8003736:	3501      	adds	r5, #1
 8003738:	68a0      	ldr	r0, [r4, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800373a:	e771      	b.n	8003620 <_fx_utility_FAT_flush+0x108>
                        if ((multi_sector_entry) == (INT)i)
 800373c:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 800373e:	f88e c000 	strb.w	ip, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8003742:	d00f      	beq.n	8003764 <_fx_utility_FAT_flush+0x24c>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8003744:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8003748:	f3c9 2903 	ubfx	r9, r9, #8, #4
 800374c:	f023 030f 	bic.w	r3, r3, #15
 8003750:	ea49 0903 	orr.w	r9, r9, r3
 8003754:	f88e 9001 	strb.w	r9, [lr, #1]
 8003758:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800375c:	e7ba      	b.n	80036d4 <_fx_utility_FAT_flush+0x1bc>
                    if (cluster & 1)
 800375e:	b98a      	cbnz	r2, 8003784 <_fx_utility_FAT_flush+0x26c>
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8003760:	f88e c000 	strb.w	ip, [lr]
 8003764:	f8d4 e008 	ldr.w	lr, [r4, #8]
                        if ((multi_sector_entry) == (INT)i)
 8003768:	4680      	mov	r8, r0
 800376a:	e7b3      	b.n	80036d4 <_fx_utility_FAT_flush+0x1bc>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800376c:	f89e 2000 	ldrb.w	r2, [lr]
 8003770:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003774:	f022 020f 	bic.w	r2, r2, #15
 8003778:	4313      	orrs	r3, r2
 800377a:	f88e 3000 	strb.w	r3, [lr]
 800377e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8003782:	e76e      	b.n	8003662 <_fx_utility_FAT_flush+0x14a>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8003784:	f89e 3000 	ldrb.w	r3, [lr]
 8003788:	4680      	mov	r8, r0
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8003792:	f88e 3000 	strb.w	r3, [lr]
 8003796:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800379a:	e79b      	b.n	80036d4 <_fx_utility_FAT_flush+0x1bc>
            byte_offset =  (((ULONG)cluster) * 4);
 800379c:	0092      	lsls	r2, r2, #2
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800379e:	2501      	movs	r5, #1
 80037a0:	9000      	str	r0, [sp, #0]
 80037a2:	2002      	movs	r0, #2
 80037a4:	9501      	str	r5, [sp, #4]
 80037a6:	9002      	str	r0, [sp, #8]
 80037a8:	4620      	mov	r0, r4
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80037aa:	fbb2 f5fc 	udiv	r5, r2, ip
 80037ae:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80037b0:	462a      	mov	r2, r5
 80037b2:	f000 fbcb 	bl	8003f4c <_fx_utility_logical_sector_read>
            if (status != FX_SUCCESS)
 80037b6:	2800      	cmp	r0, #0
 80037b8:	f47f af27 	bne.w	800360a <_fx_utility_FAT_flush+0xf2>
 80037bc:	68a0      	ldr	r0, [r4, #8]
 80037be:	46b0      	mov	r8, r6
 80037c0:	46b9      	mov	r9, r7
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 80037c2:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80037c6:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 80037ca:	b1b3      	cbz	r3, 80037fa <_fx_utility_FAT_flush+0x2e2>
                byte_offset =  (((ULONG)cluster) * 4);
 80037cc:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80037d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 4);
 80037d4:	009b      	lsls	r3, r3, #2
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 80037d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80037d8:	fbb3 f2fc 	udiv	r2, r3, ip
 80037dc:	440a      	add	r2, r1
                if (sector != FAT_sector)
 80037de:	4295      	cmp	r5, r2
 80037e0:	d10b      	bne.n	80037fa <_fx_utility_FAT_flush+0x2e2>
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80037e2:	1a6a      	subs	r2, r5, r1
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 80037e4:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 80037e8:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 80037ec:	4418      	add	r0, r3
 80037ee:	f7ff fca1 	bl	8003134 <_fx_utility_32_unsigned_write>
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	68a0      	ldr	r0, [r4, #8]
 80037f6:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80037fa:	f1b9 0f10 	cmp.w	r9, #16
 80037fe:	f108 080c 	add.w	r8, r8, #12
 8003802:	d1de      	bne.n	80037c2 <_fx_utility_FAT_flush+0x2aa>
 8003804:	e6da      	b.n	80035bc <_fx_utility_FAT_flush+0xa4>
                    return(FX_MEDIA_INVALID);
 8003806:	2002      	movs	r0, #2
}
 8003808:	b005      	add	sp, #20
 800380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380e:	bf00      	nop

08003810 <_fx_utility_FAT_map_flush>:
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8003810:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 8003812:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8003816:	f3c3 0209 	ubfx	r2, r3, #0, #10
{
 800381a:	b08b      	sub	sp, #44	; 0x2c
 800381c:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8003820:	4682      	mov	sl, r0
 8003822:	9308      	str	r3, [sp, #32]
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8003824:	b112      	cbz	r2, 800382c <_fx_utility_FAT_map_flush+0x1c>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8003826:	3301      	adds	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	9308      	str	r3, [sp, #32]
{
 800382c:	2300      	movs	r3, #0
        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800382e:	f04f 0902 	mov.w	r9, #2
 8003832:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8003836:	469b      	mov	fp, r3
{
 8003838:	9307      	str	r3, [sp, #28]
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 800383a:	eb0a 02db 	add.w	r2, sl, fp, lsr #3
 800383e:	f00b 0307 	and.w	r3, fp, #7
 8003842:	f892 2818 	ldrb.w	r2, [r2, #2072]	; 0x818
 8003846:	fa42 f303 	asr.w	r3, r2, r3
 800384a:	07db      	lsls	r3, r3, #31
 800384c:	d548      	bpl.n	80038e0 <_fx_utility_FAT_map_flush+0xd0>
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 800384e:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 8003852:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8003856:	9907      	ldr	r1, [sp, #28]
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 8003858:	441a      	add	r2, r3
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 800385a:	185e      	adds	r6, r3, r1
        last_sector =   FAT_sector + sectors_per_bit;
 800385c:	9b08      	ldr	r3, [sp, #32]
 800385e:	18f3      	adds	r3, r6, r3
 8003860:	429a      	cmp	r2, r3
 8003862:	bf28      	it	cs
 8003864:	461a      	movcs	r2, r3
        for (; FAT_sector < last_sector; FAT_sector++)
 8003866:	4296      	cmp	r6, r2
 8003868:	9209      	str	r2, [sp, #36]	; 0x24
 800386a:	d239      	bcs.n	80038e0 <_fx_utility_FAT_map_flush+0xd0>
 800386c:	2700      	movs	r7, #0
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800386e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8003872:	4632      	mov	r2, r6
 8003874:	463b      	mov	r3, r7
 8003876:	f8cd 9008 	str.w	r9, [sp, #8]
 800387a:	4650      	mov	r0, sl
 800387c:	e9cd 1800 	strd	r1, r8, [sp]
 8003880:	f000 fb64 	bl	8003f4c <_fx_utility_logical_sector_read>
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8003884:	bb18      	cbnz	r0, 80038ce <_fx_utility_FAT_map_flush+0xbe>
                /* Return the error status.  */
                return(status);
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8003886:	f8da 405c 	ldr.w	r4, [sl, #92]	; 0x5c

            /* Loop to update additional FAT entries.  */
            while (FATs)
 800388a:	3c01      	subs	r4, #1
 800388c:	d022      	beq.n	80038d4 <_fx_utility_FAT_map_flush+0xc4>
 800388e:	2500      	movs	r5, #0
 8003890:	e000      	b.n	8003894 <_fx_utility_FAT_map_flush+0x84>
 8003892:	b1fc      	cbz	r4, 80038d4 <_fx_utility_FAT_map_flush+0xc4>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 8003894:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
                status =  _fx_utility_logical_sector_write(media_ptr,
 8003898:	4650      	mov	r0, sl
 800389a:	f8cd 9008 	str.w	r9, [sp, #8]
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 800389e:	fba1 2304 	umull	r2, r3, r1, r4
 80038a2:	f114 34ff 	adds.w	r4, r4, #4294967295
 80038a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
                status =  _fx_utility_logical_sector_write(media_ptr,
 80038aa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80038ae:	e9cd 3800 	strd	r3, r8, [sp]
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80038b2:	9b05      	ldr	r3, [sp, #20]
 80038b4:	fb01 3305 	mla	r3, r1, r5, r3
 80038b8:	f145 35ff 	adc.w	r5, r5, #4294967295
 80038bc:	9305      	str	r3, [sp, #20]
                status =  _fx_utility_logical_sector_write(media_ptr,
 80038be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038c2:	1992      	adds	r2, r2, r6
 80038c4:	417b      	adcs	r3, r7
 80038c6:	f000 fcef 	bl	80042a8 <_fx_utility_logical_sector_write>
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d0e1      	beq.n	8003892 <_fx_utility_FAT_map_flush+0x82>
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
}
 80038ce:	b00b      	add	sp, #44	; 0x2c
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	3601      	adds	r6, #1
        for (; FAT_sector < last_sector; FAT_sector++)
 80038d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d8:	f147 0700 	adc.w	r7, r7, #0
 80038dc:	42b3      	cmp	r3, r6
 80038de:	d8c6      	bhi.n	800386e <_fx_utility_FAT_map_flush+0x5e>
 80038e0:	9b07      	ldr	r3, [sp, #28]
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 80038e2:	f10b 0b01 	add.w	fp, fp, #1
 80038e6:	9a08      	ldr	r2, [sp, #32]
 80038e8:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 80038ec:	4413      	add	r3, r2
 80038ee:	9307      	str	r3, [sp, #28]
 80038f0:	d1a3      	bne.n	800383a <_fx_utility_FAT_map_flush+0x2a>
 80038f2:	f60a 0018 	addw	r0, sl, #2072	; 0x818
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	2100      	movs	r1, #0
 80038fa:	f007 fd7c 	bl	800b3f6 <memset>
    return(FX_SUCCESS);
 80038fe:	2000      	movs	r0, #0
 8003900:	e7e5      	b.n	80038ce <_fx_utility_FAT_map_flush+0xbe>
 8003902:	bf00      	nop

08003904 <_fx_utility_logical_sector_flush>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	b08b      	sub	sp, #44	; 0x2c
 800390a:	461e      	mov	r6, r3
 800390c:	4615      	mov	r5, r2
 800390e:	4681      	mov	r9, r0
 8003910:	2000      	movs	r0, #0
 8003912:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8003916:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
 800391a:	4601      	mov	r1, r0
 800391c:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
{
 8003920:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8003924:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003928:	f144 34ff 	adc.w	r4, r4, #4294967295
 800392c:	18ef      	adds	r7, r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 800392e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003932:	eb56 0804 	adcs.w	r8, r6, r4
 8003936:	bf28      	it	cs
 8003938:	2001      	movcs	r0, #1
 800393a:	4602      	mov	r2, r0
 800393c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8003940:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8003944:	9007      	str	r0, [sp, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 8097 	bne.w	8003a7a <_fx_utility_logical_sector_flush+0x176>
        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800394c:	f8d9 401c 	ldr.w	r4, [r9, #28]

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8003950:	1e45      	subs	r5, r0, #1
 8003952:	2800      	cmp	r0, #0
 8003954:	f000 808d 	beq.w	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 8003958:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800395c:	ea52 0103 	orrs.w	r1, r2, r3
 8003960:	f000 8087 	beq.w	8003a72 <_fx_utility_logical_sector_flush+0x16e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8003964:	ea5a 010b 	orrs.w	r1, sl, fp
 8003968:	f000 8083 	beq.w	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 800396c:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
 8003970:	4301      	orrs	r1, r0
 8003972:	bf0c      	ite	eq
 8003974:	2601      	moveq	r6, #1
 8003976:	2600      	movne	r6, #0
 8003978:	2e00      	cmp	r6, #0
 800397a:	d17a      	bne.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
                /* Determine if the invalidate option is specified.  */
                if (invalidate)
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800397c:	9600      	str	r6, [sp, #0]
 800397e:	4649      	mov	r1, r9
 8003980:	4616      	mov	r6, r2
 8003982:	461f      	mov	r7, r3
 8003984:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8003988:	e00f      	b.n	80039aa <_fx_utility_logical_sector_flush+0xa6>
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 800398a:	3d01      	subs	r5, #1
                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 800398c:	6964      	ldr	r4, [r4, #20]
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 800398e:	1c6e      	adds	r6, r5, #1
 8003990:	d06f      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 8003992:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003996:	461f      	mov	r7, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	4616      	mov	r6, r2
 800399c:	d069      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
            if (sectors == 0)
 800399e:	ea5a 030b 	orrs.w	r3, sl, fp
 80039a2:	d066      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 80039a4:	ea58 0309 	orrs.w	r3, r8, r9
 80039a8:	d063      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
            if ((cache_entry -> fx_cached_sector_valid) &&
 80039aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039ae:	429f      	cmp	r7, r3
 80039b0:	bf08      	it	eq
 80039b2:	4296      	cmpeq	r6, r2
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80039b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
            if ((cache_entry -> fx_cached_sector_valid) &&
 80039b8:	bf2c      	ite	cs
 80039ba:	2001      	movcs	r0, #1
 80039bc:	2000      	movcc	r0, #0
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80039be:	42bb      	cmp	r3, r7
 80039c0:	f000 0001 	and.w	r0, r0, #1
 80039c4:	bf08      	it	eq
 80039c6:	42b2      	cmpeq	r2, r6
 80039c8:	bf38      	it	cc
 80039ca:	2000      	movcc	r0, #0
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0dc      	beq.n	800398a <_fx_utility_logical_sector_flush+0x86>
            if ((cache_entry -> fx_cached_sector_valid) &&
 80039d0:	7c60      	ldrb	r0, [r4, #17]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d0d9      	beq.n	800398a <_fx_utility_logical_sector_flush+0x86>
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 80039d6:	7c20      	ldrb	r0, [r4, #16]
 80039d8:	b370      	cbz	r0, 8003a38 <_fx_utility_logical_sector_flush+0x134>
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80039da:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
 80039de:	bb58      	cbnz	r0, 8003a38 <_fx_utility_logical_sector_flush+0x134>
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80039e0:	2201      	movs	r2, #1
                        media_ptr -> fx_media_driver_write_requests++;
 80039e2:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80039e6:	2090      	movs	r0, #144	; 0x90
                        media_ptr -> fx_media_driver_write_requests++;
 80039e8:	4413      	add	r3, r2
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80039ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80039ee:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80039f2:	6820      	ldr	r0, [r4, #0]
                        media_ptr -> fx_media_driver_write_requests++;
 80039f4:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80039f8:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80039fc:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
                        media_ptr -> fx_media_driver_sectors =          1;
 8003a00:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8003a04:	7ca3      	ldrb	r3, [r4, #18]
 8003a06:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8003a0a:	7ca3      	ldrb	r3, [r4, #18]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d001      	beq.n	8003a14 <_fx_utility_logical_sector_flush+0x110>
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8003a10:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003a14:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8003a18:	4608      	mov	r0, r1
 8003a1a:	9106      	str	r1, [sp, #24]
 8003a1c:	4798      	blx	r3
                        if (media_ptr -> fx_media_driver_status)
 8003a1e:	9906      	ldr	r1, [sp, #24]
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003a20:	9b00      	ldr	r3, [sp, #0]
                        if (media_ptr -> fx_media_driver_status)
 8003a22:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003a26:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
                        if (media_ptr -> fx_media_driver_status)
 8003a2a:	bb18      	cbnz	r0, 8003a74 <_fx_utility_logical_sector_flush+0x170>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003a2c:	7420      	strb	r0, [r4, #16]
                        remaining_dirty--;
 8003a2e:	f10a 3aff 	add.w	sl, sl, #4294967295
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8003a32:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003a34:	3b01      	subs	r3, #1
 8003a36:	624b      	str	r3, [r1, #36]	; 0x24
                if (invalidate)
 8003a38:	f1bb 0f00 	cmp.w	fp, #0
 8003a3c:	d010      	beq.n	8003a60 <_fx_utility_logical_sector_flush+0x15c>
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003a3e:	9b00      	ldr	r3, [sp, #0]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003a40:	f04f 32ff 	mov.w	r2, #4294967295
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003a44:	7c20      	ldrb	r0, [r4, #16]
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003a46:	7463      	strb	r3, [r4, #17]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e9c4 2302 	strd	r2, r3, [r4, #8]
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003a50:	b130      	cbz	r0, 8003a60 <_fx_utility_logical_sector_flush+0x15c>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003a52:	9b00      	ldr	r3, [sp, #0]
                        remaining_dirty--;
 8003a54:	f10a 3aff 	add.w	sl, sl, #4294967295
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003a58:	7423      	strb	r3, [r4, #16]
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8003a5a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	624b      	str	r3, [r1, #36]	; 0x24
                sectors--;
 8003a60:	f118 38ff 	adds.w	r8, r8, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8003a64:	f105 35ff 	add.w	r5, r5, #4294967295
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8003a68:	6964      	ldr	r4, [r4, #20]
                sectors--;
 8003a6a:	f149 39ff 	adc.w	r9, r9, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8003a6e:	1c6e      	adds	r6, r5, #1
 8003a70:	d18f      	bne.n	8003992 <_fx_utility_logical_sector_flush+0x8e>
            }
        }
    }

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8003a72:	2000      	movs	r0, #0
}
 8003a74:	b00b      	add	sp, #44	; 0x2c
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8003a7a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8003a7e:	9309      	str	r3, [sp, #36]	; 0x24
        while (valid_bit_map)
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f6      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8003a84:	fabb f38b 	clz	r3, fp
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	9306      	str	r3, [sp, #24]
 8003a8c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a90:	d0ef      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 8003a92:	e9dd 3014 	ldrd	r3, r0, [sp, #80]	; 0x50
 8003a96:	4303      	orrs	r3, r0
 8003a98:	d0eb      	beq.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 8003a9a:	ea52 0301 	orrs.w	r3, r2, r1
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 8003aa8:	9308      	str	r3, [sp, #32]
            if (use_starting_sector)
 8003aaa:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
            if ((sectors == 0) || (starting_sector > ending_sector))
 8003aae:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
            if (use_starting_sector)
 8003ab2:	2c00      	cmp	r4, #0
 8003ab4:	bf08      	it	eq
 8003ab6:	2b20      	cmpeq	r3, #32
 8003ab8:	f080 80b4 	bcs.w	8003c24 <_fx_utility_logical_sector_flush+0x320>
                bit_set =  (index % 32);
 8003abc:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8003ac0:	9a02      	ldr	r2, [sp, #8]
 8003ac2:	f859 3003 	ldr.w	r3, [r9, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	4013      	ands	r3, r2
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8003acc:	009e      	lsls	r6, r3, #2
                bit_set =  (index % 32);
 8003ace:	9308      	str	r3, [sp, #32]
 8003ad0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
            remaining_valid =  0;
 8003ad4:	2500      	movs	r5, #0
 8003ad6:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 8003ada:	f504 644a 	add.w	r4, r4, #3232	; 0xca0
 8003ade:	e9cd 7800 	strd	r7, r8, [sp]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8003ae2:	7c63      	ldrb	r3, [r4, #17]
 8003ae4:	b183      	cbz	r3, 8003b08 <_fx_utility_logical_sector_flush+0x204>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8003ae6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aee:	4607      	mov	r7, r0
 8003af0:	4299      	cmp	r1, r3
 8003af2:	bf08      	it	eq
 8003af4:	4290      	cmpeq	r0, r2
 8003af6:	d306      	bcc.n	8003b06 <_fx_utility_logical_sector_flush+0x202>
 8003af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003afc:	428b      	cmp	r3, r1
 8003afe:	bf08      	it	eq
 8003b00:	4282      	cmpeq	r2, r0
 8003b02:	f080 809f 	bcs.w	8003c44 <_fx_utility_logical_sector_flush+0x340>
                            remaining_valid++;
 8003b06:	3501      	adds	r5, #1
 8003b08:	ea4b 030a 	orr.w	r3, fp, sl
 8003b0c:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8096 	beq.w	8003c40 <_fx_utility_logical_sector_flush+0x33c>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8003b14:	e9dd 2000 	ldrd	r2, r0, [sp]
 8003b18:	4310      	orrs	r0, r2
 8003b1a:	d103      	bne.n	8003b24 <_fx_utility_logical_sector_flush+0x220>
 8003b1c:	9a06      	ldr	r2, [sp, #24]
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	f040 81a6 	bne.w	8003e70 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8003b24:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003b28:	b17b      	cbz	r3, 8003b4a <_fx_utility_logical_sector_flush+0x246>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8003b2a:	e9d4 7808 	ldrd	r7, r8, [r4, #32]
 8003b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b32:	4598      	cmp	r8, r3
 8003b34:	bf08      	it	eq
 8003b36:	4297      	cmpeq	r7, r2
 8003b38:	d306      	bcc.n	8003b48 <_fx_utility_logical_sector_flush+0x244>
 8003b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b3e:	4543      	cmp	r3, r8
 8003b40:	bf08      	it	eq
 8003b42:	42ba      	cmpeq	r2, r7
 8003b44:	f080 80d0 	bcs.w	8003ce8 <_fx_utility_logical_sector_flush+0x3e4>
                            remaining_valid++;
 8003b48:	3501      	adds	r5, #1
 8003b4a:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8003b4c:	b918      	cbnz	r0, 8003b56 <_fx_utility_logical_sector_flush+0x252>
 8003b4e:	9a06      	ldr	r2, [sp, #24]
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	f040 818d 	bne.w	8003e70 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8003b56:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003b5a:	b17b      	cbz	r3, 8003b7c <_fx_utility_logical_sector_flush+0x278>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8003b5c:	e9d4 780e 	ldrd	r7, r8, [r4, #56]	; 0x38
 8003b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b64:	4598      	cmp	r8, r3
 8003b66:	bf08      	it	eq
 8003b68:	4297      	cmpeq	r7, r2
 8003b6a:	d306      	bcc.n	8003b7a <_fx_utility_logical_sector_flush+0x276>
 8003b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b70:	4543      	cmp	r3, r8
 8003b72:	bf08      	it	eq
 8003b74:	42ba      	cmpeq	r2, r7
 8003b76:	f080 8119 	bcs.w	8003dac <_fx_utility_logical_sector_flush+0x4a8>
                            remaining_valid++;
 8003b7a:	3501      	adds	r5, #1
 8003b7c:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8003b7e:	b918      	cbnz	r0, 8003b88 <_fx_utility_logical_sector_flush+0x284>
 8003b80:	9a06      	ldr	r2, [sp, #24]
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	f040 8174 	bne.w	8003e70 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8003b88:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8003b8c:	b17b      	cbz	r3, 8003bae <_fx_utility_logical_sector_flush+0x2aa>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8003b8e:	e9d4 7814 	ldrd	r7, r8, [r4, #80]	; 0x50
 8003b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b96:	4598      	cmp	r8, r3
 8003b98:	bf08      	it	eq
 8003b9a:	4297      	cmpeq	r7, r2
 8003b9c:	d306      	bcc.n	8003bac <_fx_utility_logical_sector_flush+0x2a8>
 8003b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ba2:	4543      	cmp	r3, r8
 8003ba4:	bf08      	it	eq
 8003ba6:	42ba      	cmpeq	r2, r7
 8003ba8:	f080 8167 	bcs.w	8003e7a <_fx_utility_logical_sector_flush+0x576>
                            remaining_valid++;
 8003bac:	3501      	adds	r5, #1
 8003bae:	460b      	mov	r3, r1
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8003bb0:	3680      	adds	r6, #128	; 0x80
            } while (index < cache_size);
 8003bb2:	9a07      	ldr	r2, [sp, #28]
 8003bb4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003bb8:	4296      	cmp	r6, r2
 8003bba:	d392      	bcc.n	8003ae2 <_fx_utility_logical_sector_flush+0x1de>
 8003bbc:	e9dd 7800 	ldrd	r7, r8, [sp]
            if ((invalidate) && (remaining_valid == 0))
 8003bc0:	f1bb 0f00 	cmp.w	fp, #0
 8003bc4:	d009      	beq.n	8003bda <_fx_utility_logical_sector_flush+0x2d6>
 8003bc6:	b945      	cbnz	r5, 8003bda <_fx_utility_logical_sector_flush+0x2d6>
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8003bc8:	2101      	movs	r1, #1
 8003bca:	9808      	ldr	r0, [sp, #32]
 8003bcc:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8003bd0:	4081      	lsls	r1, r0
 8003bd2:	ea22 0201 	bic.w	r2, r2, r1
 8003bd6:	f8c9 2020 	str.w	r2, [r9, #32]
            if (use_starting_sector)
 8003bda:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	bf08      	it	eq
 8003be2:	2920      	cmpeq	r1, #32
 8003be4:	f080 81a6 	bcs.w	8003f34 <_fx_utility_logical_sector_flush+0x630>
                starting_sector++;
 8003be8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003bec:	3101      	adds	r1, #1
 8003bee:	f142 0200 	adc.w	r2, r2, #0
 8003bf2:	e9cd 1202 	strd	r1, r2, [sp, #8]
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f43f af3b 	beq.w	8003a72 <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 8003bfc:	ea57 0308 	orrs.w	r3, r7, r8
 8003c00:	f43f af37 	beq.w	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 8003c04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c08:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003c0c:	4294      	cmp	r4, r2
 8003c0e:	bf08      	it	eq
 8003c10:	428b      	cmpeq	r3, r1
 8003c12:	f4ff af2e 	bcc.w	8003a72 <_fx_utility_logical_sector_flush+0x16e>
            if (use_starting_sector)
 8003c16:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8003c1a:	2c00      	cmp	r4, #0
 8003c1c:	bf08      	it	eq
 8003c1e:	2b20      	cmpeq	r3, #32
 8003c20:	f4ff af4c 	bcc.w	8003abc <_fx_utility_logical_sector_flush+0x1b8>
                while ((valid_bit_map & 1) == 0)
 8003c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c26:	07d8      	lsls	r0, r3, #31
 8003c28:	f100 818d 	bmi.w	8003f46 <_fx_utility_logical_sector_flush+0x642>
 8003c2c:	9a08      	ldr	r2, [sp, #32]
                    valid_bit_map =  valid_bit_map >> 1;
 8003c2e:	085b      	lsrs	r3, r3, #1
                    bit_set++;
 8003c30:	3201      	adds	r2, #1
                while ((valid_bit_map & 1) == 0)
 8003c32:	07d9      	lsls	r1, r3, #31
 8003c34:	d5fb      	bpl.n	8003c2e <_fx_utility_logical_sector_flush+0x32a>
 8003c36:	9309      	str	r3, [sp, #36]	; 0x24
 8003c38:	4613      	mov	r3, r2
 8003c3a:	9208      	str	r2, [sp, #32]
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8003c3c:	009e      	lsls	r6, r3, #2
 8003c3e:	e747      	b.n	8003ad0 <_fx_utility_logical_sector_flush+0x1cc>
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8003c40:	469a      	mov	sl, r3
 8003c42:	e7b5      	b.n	8003bb0 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003c44:	7c21      	ldrb	r1, [r4, #16]
 8003c46:	b389      	cbz	r1, 8003cac <_fx_utility_logical_sector_flush+0x3a8>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8003c48:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8003c4c:	bb71      	cbnz	r1, 8003cac <_fx_utility_logical_sector_flush+0x3a8>
                                media_ptr -> fx_media_driver_write_requests++;
 8003c4e:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003c52:	f04f 0801 	mov.w	r8, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003c56:	6821      	ldr	r1, [r4, #0]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003c58:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003c5a:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8003c5c:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003c60:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003c64:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8003c68:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003c6a:	e9c9 8222 	strd	r8, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8003c6e:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8003c72:	7ca3      	ldrb	r3, [r4, #18]
 8003c74:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8003c78:	7ca3      	ldrb	r3, [r4, #18]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d002      	beq.n	8003c84 <_fx_utility_logical_sector_flush+0x380>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003c84:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8003c88:	4648      	mov	r0, r9
 8003c8a:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003c8c:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8003c8e:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003c92:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8003c96:	2800      	cmp	r0, #0
 8003c98:	f47f aeec 	bne.w	8003a74 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003c9c:	7420      	strb	r0, [r4, #16]
                                remaining_dirty--;
 8003c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003ca2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8003cac:	f1bb 0f00 	cmp.w	fp, #0
 8003cb0:	d011      	beq.n	8003cd6 <_fx_utility_logical_sector_flush+0x3d2>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003cb2:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003cbc:	7c22      	ldrb	r2, [r4, #16]
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003cbe:	7463      	strb	r3, [r4, #17]
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003cc0:	e9c4 0102 	strd	r0, r1, [r4, #8]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003cc4:	b13a      	cbz	r2, 8003cd6 <_fx_utility_logical_sector_flush+0x3d2>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003cc6:	7423      	strb	r3, [r4, #16]
                                remaining_dirty--;
 8003cc8:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003ccc:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 8003cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cda:	f112 32ff 	adds.w	r2, r2, #4294967295
 8003cde:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8003ce6:	e70f      	b.n	8003b08 <_fx_utility_logical_sector_flush+0x204>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003ce8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8003cec:	b3a1      	cbz	r1, 8003d58 <_fx_utility_logical_sector_flush+0x454>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8003cee:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8003cf2:	bb89      	cbnz	r1, 8003d58 <_fx_utility_logical_sector_flush+0x454>
                                media_ptr -> fx_media_driver_write_requests++;
 8003cf4:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003cf8:	f04f 0e01 	mov.w	lr, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003cfc:	69a1      	ldr	r1, [r4, #24]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003cfe:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003d00:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8003d02:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003d06:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003d0a:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8003d0e:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003d10:	e9c9 e222 	strd	lr, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8003d14:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8003d18:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003d1c:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8003d20:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d002      	beq.n	8003d2e <_fx_utility_logical_sector_flush+0x42a>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003d2e:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8003d32:	4648      	mov	r0, r9
 8003d34:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003d36:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8003d38:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003d3c:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	f47f ae97 	bne.w	8003a74 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003d46:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
                                remaining_dirty--;
 8003d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003d4e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003d52:	3b01      	subs	r3, #1
 8003d54:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8003d58:	f1bb 0f00 	cmp.w	fp, #0
 8003d5c:	d014      	beq.n	8003d88 <_fx_utility_logical_sector_flush+0x484>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003d5e:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003d68:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003d6c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003d70:	e9c4 0108 	strd	r0, r1, [r4, #32]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003d74:	b142      	cbz	r2, 8003d88 <_fx_utility_logical_sector_flush+0x484>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003d76:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                                remaining_dirty--;
 8003d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003d7e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8003d88:	ea4b 030a 	orr.w	r3, fp, sl
                        sectors--;
 8003d8c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d90:	f111 31ff 	adds.w	r1, r1, #4294967295
 8003d94:	f142 32ff 	adc.w	r2, r2, #4294967295
 8003d98:	e9cd 1200 	strd	r1, r2, [sp]
 8003d9c:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f43f af4e 	beq.w	8003c40 <_fx_utility_logical_sector_flush+0x33c>
 8003da4:	e9dd 2000 	ldrd	r2, r0, [sp]
 8003da8:	4310      	orrs	r0, r2
 8003daa:	e6cf      	b.n	8003b4c <_fx_utility_logical_sector_flush+0x248>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003dac:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8003db0:	b3a1      	cbz	r1, 8003e1c <_fx_utility_logical_sector_flush+0x518>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8003db2:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8003db6:	bb89      	cbnz	r1, 8003e1c <_fx_utility_logical_sector_flush+0x518>
                                media_ptr -> fx_media_driver_write_requests++;
 8003db8:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003dbc:	f04f 0c01 	mov.w	ip, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003dc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003dc2:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003dc4:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8003dc6:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003dca:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003dce:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8003dd2:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003dd4:	e9c9 c222 	strd	ip, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8003dd8:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8003ddc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003de0:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8003de4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d002      	beq.n	8003df2 <_fx_utility_logical_sector_flush+0x4ee>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003df2:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8003df6:	4648      	mov	r0, r9
 8003df8:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003dfa:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8003dfc:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003e00:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f47f ae35 	bne.w	8003a74 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003e0a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
                                remaining_dirty--;
 8003e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003e12:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8003e1c:	f1bb 0f00 	cmp.w	fp, #0
 8003e20:	d014      	beq.n	8003e4c <_fx_utility_logical_sector_flush+0x548>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003e22:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003e2c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003e30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003e34:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003e38:	b142      	cbz	r2, 8003e4c <_fx_utility_logical_sector_flush+0x548>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003e3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                                remaining_dirty--;
 8003e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003e42:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003e46:	3b01      	subs	r3, #1
 8003e48:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8003e4c:	ea4a 030b 	orr.w	r3, sl, fp
                        sectors--;
 8003e50:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003e54:	f111 31ff 	adds.w	r1, r1, #4294967295
 8003e58:	f142 32ff 	adc.w	r2, r2, #4294967295
 8003e5c:	e9cd 1200 	strd	r1, r2, [sp]
 8003e60:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f43f aeec 	beq.w	8003c40 <_fx_utility_logical_sector_flush+0x33c>
 8003e68:	e9dd 2000 	ldrd	r2, r0, [sp]
 8003e6c:	4310      	orrs	r0, r2
 8003e6e:	e686      	b.n	8003b7e <_fx_utility_logical_sector_flush+0x27a>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8003e70:	2100      	movs	r1, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	e9cd 1200 	strd	r1, r2, [sp]
 8003e78:	e69a      	b.n	8003bb0 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003e7a:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8003e7e:	b399      	cbz	r1, 8003ee8 <_fx_utility_logical_sector_flush+0x5e4>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8003e80:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8003e84:	bb81      	cbnz	r1, 8003ee8 <_fx_utility_logical_sector_flush+0x5e4>
                                media_ptr -> fx_media_driver_write_requests++;
 8003e86:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003e8a:	2001      	movs	r0, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003e8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003e8e:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003e90:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8003e92:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8003e96:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8003e9a:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8003e9e:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003ea0:	e9c9 0222 	strd	r0, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8003ea4:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8003ea8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8003eac:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8003eb0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d002      	beq.n	8003ebe <_fx_utility_logical_sector_flush+0x5ba>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003ebe:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8003ec2:	4648      	mov	r0, r9
 8003ec4:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003ec6:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8003ec8:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003ecc:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f47f adcf 	bne.w	8003a74 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003ed6:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
                                remaining_dirty--;
 8003eda:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003ede:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8003ee8:	f1bb 0f00 	cmp.w	fp, #0
 8003eec:	d014      	beq.n	8003f18 <_fx_utility_logical_sector_flush+0x614>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003eee:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003ef8:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8003efc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8003f00:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8003f04:	b142      	cbz	r2, 8003f18 <_fx_utility_logical_sector_flush+0x614>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8003f06:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                                remaining_dirty--;
 8003f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8003f0e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 8003f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f1c:	f112 32ff 	adds.w	r2, r2, #4294967295
 8003f20:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003f24:	e9cd 2300 	strd	r2, r3, [sp]
 8003f28:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f2c:	bf08      	it	eq
 8003f2e:	f04f 0a00 	moveq.w	sl, #0
 8003f32:	e63d      	b.n	8003bb0 <_fx_utility_logical_sector_flush+0x2ac>
                bit_set++;
 8003f34:	9a08      	ldr	r2, [sp, #32]
 8003f36:	3201      	adds	r2, #1
 8003f38:	9208      	str	r2, [sp, #32]
        while (valid_bit_map)
 8003f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f3c:	0852      	lsrs	r2, r2, #1
 8003f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f40:	f47f ae59 	bne.w	8003bf6 <_fx_utility_logical_sector_flush+0x2f2>
 8003f44:	e595      	b.n	8003a72 <_fx_utility_logical_sector_flush+0x16e>
 8003f46:	9b08      	ldr	r3, [sp, #32]
 8003f48:	e678      	b.n	8003c3c <_fx_utility_logical_sector_flush+0x338>
 8003f4a:	bf00      	nop

08003f4c <_fx_utility_logical_sector_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8003f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	b08b      	sub	sp, #44	; 0x2c
 8003f52:	4604      	mov	r4, r0
 8003f54:	4616      	mov	r6, r2
 8003f56:	461f      	mov	r7, r3
 8003f58:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8003f5c:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8003f60:	2902      	cmp	r1, #2
{
 8003f62:	9106      	str	r1, [sp, #24]
 8003f64:	9d15      	ldr	r5, [sp, #84]	; 0x54
    if (sector_type == FX_FAT_SECTOR)
 8003f66:	d104      	bne.n	8003f72 <_fx_utility_logical_sector_read+0x26>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8003f68:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8003f72:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8003f76:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_reads++;
 8003f78:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8003f7a:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_reads++;
 8003f7c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8003f80:	d803      	bhi.n	8003f8a <_fx_utility_logical_sector_read+0x3e>
 8003f82:	69a3      	ldr	r3, [r4, #24]
 8003f84:	4553      	cmp	r3, sl
 8003f86:	f080 80fa 	bcs.w	800417e <_fx_utility_logical_sector_read+0x232>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8003f8a:	eb16 0805 	adds.w	r8, r6, r5
 8003f8e:	f147 0900 	adc.w	r9, r7, #0
 8003f92:	f118 30ff 	adds.w	r0, r8, #4294967295
 8003f96:	f149 31ff 	adc.w	r1, r9, #4294967295
 8003f9a:	f04f 0900 	mov.w	r9, #0
 8003f9e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8003fa2:	4589      	cmp	r9, r1
 8003fa4:	bf08      	it	eq
 8003fa6:	4282      	cmpeq	r2, r0
 8003fa8:	f0c0 80e5 	bcc.w	8004176 <_fx_utility_logical_sector_read+0x22a>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
 8003fac:	2d00      	cmp	r5, #0
 8003fae:	f000 80de 	beq.w	800416e <_fx_utility_logical_sector_read+0x222>
 8003fb2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8003fb6:	e00b      	b.n	8003fd0 <_fx_utility_logical_sector_read+0x84>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8003fb8:	3601      	adds	r6, #1
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8003fba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fbc:	68a0      	ldr	r0, [r4, #8]
            logical_sector++;
 8003fbe:	f147 0700 	adc.w	r7, r7, #0
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8003fc2:	f000 fa5f 	bl	8004484 <_fx_utility_memory_copy>
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8003fc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        while (sectors)
 8003fc8:	3d01      	subs	r5, #1
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8003fca:	449a      	add	sl, r3
        while (sectors)
 8003fcc:	f000 80cf 	beq.w	800416e <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8003fd0:	f8cd b000 	str.w	fp, [sp]
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f002 f861 	bl	80060a0 <_fx_utility_logical_sector_cache_entry_read>
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8003fde:	4651      	mov	r1, sl
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d0e9      	beq.n	8003fb8 <_fx_utility_logical_sector_read+0x6c>
            sectors--;
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8003fe4:	f116 38ff 	adds.w	r8, r6, #4294967295
 8003fe8:	f147 39ff 	adc.w	r9, r7, #4294967295
 8003fec:	eb18 0205 	adds.w	r2, r8, r5
 8003ff0:	f149 0300 	adc.w	r3, r9, #0
 8003ff4:	4690      	mov	r8, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	e009      	b.n	800400e <_fx_utility_logical_sector_read+0xc2>
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8003ffa:	3d01      	subs	r5, #1
 8003ffc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
 8003ffe:	68a0      	ldr	r0, [r4, #8]
 8004000:	fb02 a105 	mla	r1, r2, r5, sl
 8004004:	f000 fa3e 	bl	8004484 <_fx_utility_memory_copy>
        while (sectors)
 8004008:	2d00      	cmp	r5, #0
 800400a:	f000 80b0 	beq.w	800416e <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 800400e:	4642      	mov	r2, r8
                                    media_ptr -> fx_media_bytes_per_sector);

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8004010:	f118 38ff 	adds.w	r8, r8, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8004014:	464b      	mov	r3, r9
 8004016:	f8cd b000 	str.w	fp, [sp]
 800401a:	4620      	mov	r0, r4
            end_sector--;
 800401c:	f149 39ff 	adc.w	r9, r9, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8004020:	f002 f83e 	bl	80060a0 <_fx_utility_logical_sector_cache_entry_read>
 8004024:	2800      	cmp	r0, #0
 8004026:	d0e8      	beq.n	8003ffa <_fx_utility_logical_sector_read+0xae>
            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8004028:	f04f 0901 	mov.w	r9, #1
 800402c:	f04f 0800 	mov.w	r8, #0
 8004030:	4632      	mov	r2, r6
 8004032:	463b      	mov	r3, r7
 8004034:	9500      	str	r5, [sp, #0]
 8004036:	4620      	mov	r0, r4
 8004038:	f8cd 9008 	str.w	r9, [sp, #8]
 800403c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004040:	f7ff fc60 	bl	8003904 <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8004044:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8004048:	9906      	ldr	r1, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800404a:	2290      	movs	r2, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 800404c:	444b      	add	r3, r9
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800404e:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8004052:	2904      	cmp	r1, #4
        media_ptr -> fx_media_driver_sectors =          sectors;
 8004054:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8004058:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_read_requests++;
 800405c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004060:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8004064:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90
        if (sector_type == FX_DATA_SECTOR)
 8004068:	f000 80fc 	beq.w	8004264 <_fx_utility_logical_sector_read+0x318>

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800406c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004070:	4620      	mov	r0, r4
 8004072:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8004074:	2300      	movs	r3, #0

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8004076:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 800407a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 800407e:	2800      	cmp	r0, #0
 8004080:	d176      	bne.n	8004170 <_fx_utility_logical_sector_read+0x224>
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	ebb5 0f93 	cmp.w	r5, r3, lsr #2
 8004088:	d272      	bcs.n	8004170 <_fx_utility_logical_sector_read+0x224>
 800408a:	f116 0801 	adds.w	r8, r6, #1
 800408e:	f105 31ff 	add.w	r1, r5, #4294967295

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004092:	9007      	str	r0, [sp, #28]
 8004094:	f147 0900 	adc.w	r9, r7, #0
 8004098:	eb18 0201 	adds.w	r2, r8, r1
 800409c:	f149 0300 	adc.w	r3, r9, #0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80040a0:	46d1      	mov	r9, sl
 80040a2:	46a2      	mov	sl, r4
 80040a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 80040a8:	f8cd b000 	str.w	fp, [sp]
 80040ac:	4632      	mov	r2, r6
 80040ae:	463b      	mov	r3, r7
 80040b0:	4650      	mov	r0, sl
 80040b2:	f001 fff5 	bl	80060a0 <_fx_utility_logical_sector_cache_entry_read>
                if (cache_entry == FX_NULL)
 80040b6:	4604      	mov	r4, r0
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d058      	beq.n	800416e <_fx_utility_logical_sector_read+0x222>
                if ((cache_entry -> fx_cached_sector_valid) &&
 80040bc:	7c42      	ldrb	r2, [r0, #17]
 80040be:	6803      	ldr	r3, [r0, #0]
 80040c0:	b372      	cbz	r2, 8004120 <_fx_utility_logical_sector_read+0x1d4>
 80040c2:	7c22      	ldrb	r2, [r4, #16]
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80040c4:	4650      	mov	r0, sl
                if ((cache_entry -> fx_cached_sector_valid) &&
 80040c6:	b35a      	cbz	r2, 8004120 <_fx_utility_logical_sector_read+0x1d4>
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80040c8:	2101      	movs	r1, #1
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80040ca:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
                    media_ptr -> fx_media_driver_write_requests++;
 80040ce:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80040d2:	68a3      	ldr	r3, [r4, #8]
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80040d4:	f8ca 1088 	str.w	r1, [sl, #136]	; 0x88
                    media_ptr -> fx_media_driver_write_requests++;
 80040d8:	440a      	add	r2, r1
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80040da:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80040de:	2190      	movs	r1, #144	; 0x90
                    media_ptr -> fx_media_driver_sectors =          1;
 80040e0:	2301      	movs	r3, #1
                    media_ptr -> fx_media_driver_write_requests++;
 80040e2:	f8ca 21b0 	str.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80040e6:	f8ca 108c 	str.w	r1, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_sectors =          1;
 80040ea:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80040ee:	7ca3      	ldrb	r3, [r4, #18]
 80040f0:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80040f4:	7ca3      	ldrb	r3, [r4, #18]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d002      	beq.n	8004100 <_fx_utility_logical_sector_read+0x1b4>
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004100:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 8004104:	4798      	blx	r3
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004106:	9b07      	ldr	r3, [sp, #28]

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8004108:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800410c:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    if (media_ptr -> fx_media_driver_status)
 8004110:	bb70      	cbnz	r0, 8004170 <_fx_utility_logical_sector_read+0x224>
                        return(media_ptr -> fx_media_driver_status);
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8004112:	7420      	strb	r0, [r4, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8004114:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	3a01      	subs	r2, #1
 800411c:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8004120:	f04f 0501 	mov.w	r5, #1

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8004124:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        media_ptr -> fx_media_sector_cache_list_ptr;
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr,
 8004126:	4648      	mov	r0, r9
 8004128:	4619      	mov	r1, r3
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800412a:	7465      	strb	r5, [r4, #17]
                cache_entry -> fx_cached_sector_type =  sector_type;
 800412c:	9d06      	ldr	r5, [sp, #24]
                cache_entry -> fx_cached_sector =  logical_sector;
 800412e:	e9c4 6702 	strd	r6, r7, [r4, #8]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8004132:	74a5      	strb	r5, [r4, #18]
                if (previous_cache_entry)
 8004134:	2a00      	cmp	r2, #0
 8004136:	f000 8098 	beq.w	800426a <_fx_utility_logical_sector_read+0x31e>
                    cache_entry -> fx_cached_sector_next_used =
 800413a:	f8da 301c 	ldr.w	r3, [sl, #28]

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 800413e:	3601      	adds	r6, #1
                    previous_cache_entry -> fx_cached_sector_next_used =
 8004140:	6965      	ldr	r5, [r4, #20]
                logical_sector++;
 8004142:	f147 0700 	adc.w	r7, r7, #0
                    previous_cache_entry -> fx_cached_sector_next_used =
 8004146:	6155      	str	r5, [r2, #20]
                _fx_utility_memory_copy(buffer_ptr,
 8004148:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                    cache_entry -> fx_cached_sector_next_used =
 800414c:	6163      	str	r3, [r4, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800414e:	f8ca 401c 	str.w	r4, [sl, #28]
                _fx_utility_memory_copy(buffer_ptr,
 8004152:	f000 f997 	bl	8004484 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8004156:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800415a:	4499      	add	r9, r3
            while (sectors)
 800415c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004160:	42a7      	cmp	r7, r4
 8004162:	bf08      	it	eq
 8004164:	429e      	cmpeq	r6, r3
 8004166:	d19f      	bne.n	80040a8 <_fx_utility_logical_sector_read+0x15c>
 8004168:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800416c:	e000      	b.n	8004170 <_fx_utility_logical_sector_read+0x224>
            return(FX_SUCCESS);
 800416e:	2000      	movs	r0, #0
    }
}
 8004170:	b00b      	add	sp, #44	; 0x2c
 8004172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 8004176:	2089      	movs	r0, #137	; 0x89
}
 8004178:	b00b      	add	sp, #44	; 0x2c
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 800417e:	a909      	add	r1, sp, #36	; 0x24
 8004180:	4632      	mov	r2, r6
 8004182:	463b      	mov	r3, r7
 8004184:	4620      	mov	r0, r4
 8004186:	9100      	str	r1, [sp, #0]
 8004188:	f001 ff8a 	bl	80060a0 <_fx_utility_logical_sector_cache_entry_read>
        if (cache_entry == FX_NULL)
 800418c:	4605      	mov	r5, r0
 800418e:	2800      	cmp	r0, #0
 8004190:	d0ed      	beq.n	800416e <_fx_utility_logical_sector_read+0x222>
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8004192:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8004196:	3301      	adds	r3, #1
 8004198:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
        if ((cache_entry -> fx_cached_sector_valid) &&
 800419c:	7c43      	ldrb	r3, [r0, #17]
 800419e:	b35b      	cbz	r3, 80041f8 <_fx_utility_logical_sector_read+0x2ac>
 80041a0:	7c03      	ldrb	r3, [r0, #16]
 80041a2:	b34b      	cbz	r3, 80041f8 <_fx_utility_logical_sector_read+0x2ac>
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80041a4:	2101      	movs	r1, #1
            media_ptr -> fx_media_driver_write_requests++;
 80041a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80041aa:	6802      	ldr	r2, [r0, #0]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80041ac:	2090      	movs	r0, #144	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 80041ae:	440b      	add	r3, r1
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80041b0:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80041b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 80041b8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80041bc:	68ab      	ldr	r3, [r5, #8]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80041be:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 80041c2:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sectors =          1;
 80041c4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80041c8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80041cc:	7cab      	ldrb	r3, [r5, #18]
 80041ce:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80041d2:	7cab      	ldrb	r3, [r5, #18]
 80041d4:	2b04      	cmp	r3, #4
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 80041d6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80041da:	bf18      	it	ne
 80041dc:	f8c4 10b0 	strne.w	r1, [r4, #176]	; 0xb0
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 80041e0:	4798      	blx	r3
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80041e2:	2300      	movs	r3, #0
            if (media_ptr -> fx_media_driver_status)
 80041e4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80041e8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
            if (media_ptr -> fx_media_driver_status)
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d1bf      	bne.n	8004170 <_fx_utility_logical_sector_read+0x224>
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80041f0:	7428      	strb	r0, [r5, #16]
            media_ptr -> fx_media_sector_cache_dirty_count--;
 80041f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041f4:	3b01      	subs	r3, #1
 80041f6:	6263      	str	r3, [r4, #36]	; 0x24
        if (logical_sector >= (ULONG)media_ptr -> fx_media_total_sectors)
 80041f8:	2100      	movs	r1, #0
 80041fa:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80041fe:	428f      	cmp	r7, r1
 8004200:	bf08      	it	eq
 8004202:	4296      	cmpeq	r6, r2
 8004204:	d2b7      	bcs.n	8004176 <_fx_utility_logical_sector_read+0x22a>
        media_ptr -> fx_media_driver_read_requests++;
 8004206:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800420a:	2100      	movs	r1, #0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800420c:	2290      	movs	r2, #144	; 0x90
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800420e:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_read_requests++;
 8004210:	3301      	adds	r3, #1
 8004212:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8004216:	682b      	ldr	r3, [r5, #0]
 8004218:	e9c4 3624 	strd	r3, r6, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800421c:	9b06      	ldr	r3, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800421e:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
        if (sector_type == FX_DATA_SECTOR)
 8004222:	2b04      	cmp	r3, #4
        media_ptr -> fx_media_driver_sectors =          1;
 8004224:	f04f 0201 	mov.w	r2, #1
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8004228:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_sectors =          1;
 800422c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8004230:	bf08      	it	eq
 8004232:	f8c4 20b4 	streq.w	r2, [r4, #180]	; 0xb4
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004236:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800423a:	4798      	blx	r3
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 800423c:	2300      	movs	r3, #0
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800423e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8004242:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8004246:	bb12      	cbnz	r2, 800428e <_fx_utility_logical_sector_read+0x342>
            cache_entry -> fx_cached_sector_type =  sector_type;
 8004248:	9b06      	ldr	r3, [sp, #24]
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800424a:	2201      	movs	r2, #1
            cache_entry -> fx_cached_sector_type =  sector_type;
 800424c:	74ab      	strb	r3, [r5, #18]
            if (previous_cache_entry)
 800424e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8004250:	746a      	strb	r2, [r5, #17]
            cache_entry -> fx_cached_sector =  logical_sector;
 8004252:	e9c5 6702 	strd	r6, r7, [r5, #8]
            if (previous_cache_entry)
 8004256:	b30b      	cbz	r3, 800429c <_fx_utility_logical_sector_read+0x350>
                    cache_entry -> fx_cached_sector_next_used;
 8004258:	6969      	ldr	r1, [r5, #20]
                cache_entry -> fx_cached_sector_next_used =
 800425a:	69e2      	ldr	r2, [r4, #28]
                previous_cache_entry -> fx_cached_sector_next_used =
 800425c:	6159      	str	r1, [r3, #20]
                cache_entry -> fx_cached_sector_next_used =
 800425e:	616a      	str	r2, [r5, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8004260:	61e5      	str	r5, [r4, #28]
 8004262:	e01b      	b.n	800429c <_fx_utility_logical_sector_read+0x350>
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8004264:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
 8004268:	e700      	b.n	800406c <_fx_utility_logical_sector_read+0x120>
                logical_sector++;
 800426a:	3601      	adds	r6, #1
                _fx_utility_memory_copy(buffer_ptr,
 800426c:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                logical_sector++;
 8004270:	f147 0700 	adc.w	r7, r7, #0
                _fx_utility_memory_copy(buffer_ptr,
 8004274:	f000 f906 	bl	8004484 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8004278:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800427c:	4499      	add	r9, r3
            while (sectors)
 800427e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004282:	42bc      	cmp	r4, r7
 8004284:	bf08      	it	eq
 8004286:	42b3      	cmpeq	r3, r6
 8004288:	f47f af0e 	bne.w	80040a8 <_fx_utility_logical_sector_read+0x15c>
 800428c:	e76c      	b.n	8004168 <_fx_utility_logical_sector_read+0x21c>
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800428e:	f04f 30ff 	mov.w	r0, #4294967295
 8004292:	f04f 31ff 	mov.w	r1, #4294967295
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8004296:	746b      	strb	r3, [r5, #17]
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8004298:	e9c5 0102 	strd	r0, r1, [r5, #8]
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800429c:	682b      	ldr	r3, [r5, #0]
        return(media_ptr -> fx_media_driver_status);
 800429e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80042a2:	60a3      	str	r3, [r4, #8]
        return(media_ptr -> fx_media_driver_status);
 80042a4:	e764      	b.n	8004170 <_fx_utility_logical_sector_read+0x224>
 80042a6:	bf00      	nop

080042a8 <_fx_utility_logical_sector_write>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	b085      	sub	sp, #20
 80042ae:	4604      	mov	r4, r0
 80042b0:	4616      	mov	r6, r2
 80042b2:	461f      	mov	r7, r3
 80042b4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80042b8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80042bc:	2d02      	cmp	r5, #2
 80042be:	d104      	bne.n	80042ca <_fx_utility_logical_sector_write+0x22>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 80042c0:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 80042c4:	3301      	adds	r3, #1
 80042c6:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 80042ca:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80042ce:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_writes++;
 80042d0:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80042d2:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_writes++;
 80042d4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80042d8:	d802      	bhi.n	80042e0 <_fx_utility_logical_sector_write+0x38>
 80042da:	69a3      	ldr	r3, [r4, #24]
 80042dc:	4553      	cmp	r3, sl
 80042de:	d24b      	bcs.n	8004378 <_fx_utility_logical_sector_write+0xd0>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80042e0:	ea56 0307 	orrs.w	r3, r6, r7
 80042e4:	d044      	beq.n	8004370 <_fx_utility_logical_sector_write+0xc8>
 80042e6:	2f00      	cmp	r7, #0
 80042e8:	bf08      	it	eq
 80042ea:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 80042ee:	d03f      	beq.n	8004370 <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 80042f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042f2:	f04f 0900 	mov.w	r9, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	4698      	mov	r8, r3
 80042fa:	eb18 0b06 	adds.w	fp, r8, r6
 80042fe:	eb49 0c07 	adc.w	ip, r9, r7
 8004302:	f11b 30ff 	adds.w	r0, fp, #4294967295
 8004306:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800430a:	460b      	mov	r3, r1
 800430c:	f14c 31ff 	adc.w	r1, ip, #4294967295
 8004310:	4299      	cmp	r1, r3
 8004312:	bf08      	it	eq
 8004314:	4290      	cmpeq	r0, r2
 8004316:	d22b      	bcs.n	8004370 <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8004318:	f04f 0b01 	mov.w	fp, #1
 800431c:	4632      	mov	r2, r6
 800431e:	463b      	mov	r3, r7
 8004320:	4620      	mov	r0, r4
 8004322:	f8cd b008 	str.w	fp, [sp, #8]
 8004326:	e9cd 8900 	strd	r8, r9, [sp]
 800432a:	f7ff faeb 	bl	8003904 <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 800432e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004332:	2290      	movs	r2, #144	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8004334:	990f      	ldr	r1, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 8004336:	445b      	add	r3, fp
        media_ptr -> fx_media_driver_sector_type =      sector_type;

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8004338:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800433a:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
        media_ptr -> fx_media_driver_sectors =          sectors;
 800433e:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8004342:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8004346:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800434a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800434e:	bf18      	it	ne
 8004350:	f8c4 b0b0 	strne.w	fp, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8004354:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004358:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800435c:	4620      	mov	r0, r4
 800435e:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004360:	2300      	movs	r3, #0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8004362:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004366:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    }
}
 800436a:	b005      	add	sp, #20
 800436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 8004370:	2089      	movs	r0, #137	; 0x89
}
 8004372:	b005      	add	sp, #20
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_sector_cache_hashed)
 8004378:	6923      	ldr	r3, [r4, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d062      	beq.n	8004444 <_fx_utility_logical_sector_write+0x19c>
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 800437e:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8004382:	58e1      	ldr	r1, [r4, r3]
 8004384:	4031      	ands	r1, r6
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8004386:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800438a:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800438e:	f501 614a 	add.w	r1, r1, #3232	; 0xca0
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8004392:	7c4b      	ldrb	r3, [r1, #17]
 8004394:	b12b      	cbz	r3, 80043a2 <_fx_utility_logical_sector_write+0xfa>
 8004396:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800439a:	429f      	cmp	r7, r3
 800439c:	bf08      	it	eq
 800439e:	4296      	cmpeq	r6, r2
 80043a0:	d063      	beq.n	800446a <_fx_utility_logical_sector_write+0x1c2>
 80043a2:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 80043a6:	f101 0018 	add.w	r0, r1, #24
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80043aa:	b12b      	cbz	r3, 80043b8 <_fx_utility_logical_sector_write+0x110>
 80043ac:	e9d1 2308 	ldrd	r2, r3, [r1, #32]
 80043b0:	429f      	cmp	r7, r3
 80043b2:	bf08      	it	eq
 80043b4:	4296      	cmpeq	r6, r2
 80043b6:	d062      	beq.n	800447e <_fx_utility_logical_sector_write+0x1d6>
 80043b8:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 80043bc:	f101 0030 	add.w	r0, r1, #48	; 0x30
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80043c0:	b12b      	cbz	r3, 80043ce <_fx_utility_logical_sector_write+0x126>
 80043c2:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 80043c6:	429f      	cmp	r7, r3
 80043c8:	bf08      	it	eq
 80043ca:	4296      	cmpeq	r6, r2
 80043cc:	d057      	beq.n	800447e <_fx_utility_logical_sector_write+0x1d6>
 80043ce:	f891 3059 	ldrb.w	r3, [r1, #89]	; 0x59
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 80043d2:	f101 0248 	add.w	r2, r1, #72	; 0x48
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80043d6:	b12b      	cbz	r3, 80043e4 <_fx_utility_logical_sector_write+0x13c>
 80043d8:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 80043dc:	42b9      	cmp	r1, r7
 80043de:	bf08      	it	eq
 80043e0:	42b0      	cmpeq	r0, r6
 80043e2:	d041      	beq.n	8004468 <_fx_utility_logical_sector_write+0x1c0>
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80043e4:	ea56 0307 	orrs.w	r3, r6, r7
 80043e8:	d0c2      	beq.n	8004370 <_fx_utility_logical_sector_write+0xc8>
 80043ea:	2f00      	cmp	r7, #0
 80043ec:	bf08      	it	eq
 80043ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 80043f2:	d0bd      	beq.n	8004370 <_fx_utility_logical_sector_write+0xc8>
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 80043f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043f6:	eb16 0803 	adds.w	r8, r6, r3
 80043fa:	f147 0900 	adc.w	r9, r7, #0
 80043fe:	f118 30ff 	adds.w	r0, r8, #4294967295
 8004402:	f149 31ff 	adc.w	r1, r9, #4294967295
 8004406:	f04f 0900 	mov.w	r9, #0
 800440a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800440e:	4549      	cmp	r1, r9
 8004410:	bf08      	it	eq
 8004412:	4290      	cmpeq	r0, r2
 8004414:	d2ac      	bcs.n	8004370 <_fx_utility_logical_sector_write+0xc8>
        media_ptr -> fx_media_driver_write_requests++;
 8004416:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800441a:	2201      	movs	r2, #1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800441c:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          sectors;
 800441e:	980f      	ldr	r0, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 8004420:	4413      	add	r3, r2
        if (sector_type != FX_DATA_SECTOR)
 8004422:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8004424:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8004428:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          sectors;
 800442c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8004430:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8004434:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004438:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
        if (sector_type != FX_DATA_SECTOR)
 800443c:	d08c      	beq.n	8004358 <_fx_utility_logical_sector_write+0xb0>
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800443e:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8004442:	e789      	b.n	8004358 <_fx_utility_logical_sector_write+0xb0>
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8004444:	6960      	ldr	r0, [r4, #20]
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8004446:	69e1      	ldr	r1, [r4, #28]
            while (cache_size--)
 8004448:	2800      	cmp	r0, #0
 800444a:	d0cb      	beq.n	80043e4 <_fx_utility_logical_sector_write+0x13c>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800444c:	7c4b      	ldrb	r3, [r1, #17]
 800444e:	3801      	subs	r0, #1
 8004450:	b12b      	cbz	r3, 800445e <_fx_utility_logical_sector_write+0x1b6>
 8004452:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004456:	42bb      	cmp	r3, r7
 8004458:	bf08      	it	eq
 800445a:	42b2      	cmpeq	r2, r6
 800445c:	d005      	beq.n	800446a <_fx_utility_logical_sector_write+0x1c2>
                if (cache_entry -> fx_cached_sector_next_used)
 800445e:	694b      	ldr	r3, [r1, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf18      	it	ne
 8004464:	4619      	movne	r1, r3
 8004466:	e7ef      	b.n	8004448 <_fx_utility_logical_sector_write+0x1a0>
 8004468:	4611      	mov	r1, r2
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 800446a:	7c08      	ldrb	r0, [r1, #16]
 800446c:	b108      	cbz	r0, 8004472 <_fx_utility_logical_sector_write+0x1ca>
            return(FX_SUCCESS);
 800446e:	2000      	movs	r0, #0
 8004470:	e77f      	b.n	8004372 <_fx_utility_logical_sector_write+0xca>
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8004472:	6a63      	ldr	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8004474:	2201      	movs	r2, #1
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8004476:	4413      	add	r3, r2
 8004478:	6263      	str	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 800447a:	740a      	strb	r2, [r1, #16]
 800447c:	e779      	b.n	8004372 <_fx_utility_logical_sector_write+0xca>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800447e:	4601      	mov	r1, r0
 8004480:	e7f3      	b.n	800446a <_fx_utility_logical_sector_write+0x1c2>
 8004482:	bf00      	nop

08004484 <_fx_utility_memory_copy>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8004484:	460b      	mov	r3, r1

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size);
 8004486:	4601      	mov	r1, r0
 8004488:	4618      	mov	r0, r3
 800448a:	f006 bfa9 	b.w	800b3e0 <memcpy>
 800448e:	bf00      	nop

08004490 <_fx_directory_entry_write>:


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8004490:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8004494:	680a      	ldr	r2, [r1, #0]
    media_ptr -> fx_media_directory_entry_writes++;
 8004496:	3301      	adds	r3, #1
{
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_directory_entry_writes++;
 800449c:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
{
 80044a0:	b095      	sub	sp, #84	; 0x54
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 80044a2:	7813      	ldrb	r3, [r2, #0]
{
 80044a4:	4606      	mov	r6, r0
 80044a6:	460d      	mov	r5, r1
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 80044a8:	2be5      	cmp	r3, #229	; 0xe5
 80044aa:	f000 848c 	beq.w	8004dc6 <_fx_directory_entry_write+0x936>
 80044ae:	2301      	movs	r3, #1
 80044b0:	9307      	str	r3, [sp, #28]

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80044b2:	6d33      	ldr	r3, [r6, #80]	; 0x50
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 80044b4:	f8d5 b048 	ldr.w	fp, [r5, #72]	; 0x48
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80044b8:	e9d5 8910 	ldrd	r8, r9, [r5, #64]	; 0x40
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80044bc:	4543      	cmp	r3, r8
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80044be:	f8cd 8018 	str.w	r8, [sp, #24]
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80044c2:	f200 8388 	bhi.w	8004bd6 <_fx_directory_entry_write+0x746>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 80044c6:	eba8 0303 	sub.w	r3, r8, r3
 80044ca:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80044cc:	fbb3 f2f1 	udiv	r2, r3, r1
 80044d0:	fb01 3312 	mls	r3, r1, r2, r3
 80044d4:	9309      	str	r3, [sp, #36]	; 0x24
 80044d6:	1c93      	adds	r3, r2, #2
 80044d8:	930b      	str	r3, [sp, #44]	; 0x2c
        cluster =  0;
        relative_sector =  0;
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 80044da:	68b4      	ldr	r4, [r6, #8]
 80044dc:	2101      	movs	r1, #1
 80044de:	f04f 0a03 	mov.w	sl, #3
 80044e2:	4642      	mov	r2, r8
 80044e4:	4630      	mov	r0, r6
 80044e6:	464b      	mov	r3, r9
 80044e8:	f8cd a008 	str.w	sl, [sp, #8]
 80044ec:	9101      	str	r1, [sp, #4]
 80044ee:	9400      	str	r4, [sp, #0]
 80044f0:	f7ff fd2c 	bl	8003f4c <_fx_utility_logical_sector_read>
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 80044f4:	4602      	mov	r2, r0
 80044f6:	900a      	str	r0, [sp, #40]	; 0x28
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f040 8368 	bne.w	8004bce <_fx_directory_entry_write+0x73e>
        /* Return the error status.  */
        return(status);
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80044fe:	68b3      	ldr	r3, [r6, #8]
 8004500:	4640      	mov	r0, r8
 8004502:	2100      	movs	r1, #0
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8004504:	6cac      	ldr	r4, [r5, #72]	; 0x48
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8004506:	696f      	ldr	r7, [r5, #20]
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8004508:	9308      	str	r3, [sp, #32]
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800450a:	441c      	add	r4, r3
 800450c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8004510:	2f00      	cmp	r7, #0
 8004512:	f000 8364 	beq.w	8004bde <_fx_directory_entry_write+0x74e>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	f893 9000 	ldrb.w	r9, [r3]
 800451c:	f1b9 0f00 	cmp.w	r9, #0
 8004520:	f000 85a5 	beq.w	800506e <_fx_directory_entry_write+0xbde>
 8004524:	9205      	str	r2, [sp, #20]
 8004526:	4611      	mov	r1, r2
 8004528:	920e      	str	r2, [sp, #56]	; 0x38
 800452a:	4690      	mov	r8, r2
 800452c:	1c5f      	adds	r7, r3, #1
 800452e:	464a      	mov	r2, r9
 8004530:	e00e      	b.n	8004550 <_fx_directory_entry_write+0xc0>
                dotpos   = len + 1;
                continue;
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8004532:	f1b8 0f07 	cmp.w	r8, #7
 8004536:	d807      	bhi.n	8004548 <_fx_directory_entry_write+0xb8>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8004538:	a914      	add	r1, sp, #80	; 0x50
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800453a:	2a20      	cmp	r2, #32
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800453c:	4441      	add	r1, r8
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800453e:	d003      	beq.n	8004548 <_fx_directory_entry_write+0xb8>
                i++;
 8004540:	f108 0801 	add.w	r8, r8, #1
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8004544:	f801 2c0c 	strb.w	r2, [r1, #-12]
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8004548:	f817 2b01 	ldrb.w	r2, [r7], #1
 800454c:	4601      	mov	r1, r0
 800454e:	b16a      	cbz	r2, 800456c <_fx_directory_entry_write+0xdc>
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8004550:	2a2e      	cmp	r2, #46	; 0x2e
 8004552:	f101 0001 	add.w	r0, r1, #1
 8004556:	d1ec      	bne.n	8004532 <_fx_directory_entry_write+0xa2>
                if (len == 0)
 8004558:	2900      	cmp	r1, #0
 800455a:	d0f5      	beq.n	8004548 <_fx_directory_entry_write+0xb8>
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800455c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8004560:	4601      	mov	r1, r0
 8004562:	9005      	str	r0, [sp, #20]
 8004564:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004568:	2a00      	cmp	r2, #0
 800456a:	d1f1      	bne.n	8004550 <_fx_directory_entry_write+0xc0>
 800456c:	4abc      	ldr	r2, [pc, #752]	; (8004860 <_fx_directory_entry_write+0x3d0>)
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800456e:	f1b8 0f0a 	cmp.w	r8, #10
 8004572:	fba2 2a00 	umull	r2, sl, r2, r0
 8004576:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800457a:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 800457e:	4657      	mov	r7, sl
 8004580:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8004584:	eba0 0a02 	sub.w	sl, r0, r2
 8004588:	d80f      	bhi.n	80045aa <_fx_directory_entry_write+0x11a>
        {
            shortname[j] =  ' ';
 800458a:	f108 0001 	add.w	r0, r8, #1
 800458e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004590:	ab11      	add	r3, sp, #68	; 0x44
 8004592:	f1c8 020b 	rsb	r2, r8, #11
 8004596:	280b      	cmp	r0, #11
 8004598:	f04f 0120 	mov.w	r1, #32
 800459c:	eb03 0008 	add.w	r0, r3, r8
 80045a0:	bf88      	it	hi
 80045a2:	2201      	movhi	r2, #1
 80045a4:	f006 ff27 	bl	800b3f6 <memset>
 80045a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 80045aa:	9905      	ldr	r1, [sp, #20]
 80045ac:	b331      	cbz	r1, 80045fc <_fx_directory_entry_write+0x16c>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80045ae:	5c5a      	ldrb	r2, [r3, r1]
 80045b0:	b19a      	cbz	r2, 80045da <_fx_directory_entry_write+0x14a>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80045b2:	3101      	adds	r1, #1
 80045b4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80045b8:	5c58      	ldrb	r0, [r3, r1]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	f000 85dc 	beq.w	8005178 <_fx_directory_entry_write+0xce8>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80045c0:	9905      	ldr	r1, [sp, #20]
 80045c2:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
 80045c6:	1c8a      	adds	r2, r1, #2
 80045c8:	5c99      	ldrb	r1, [r3, r2]
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80045ca:	2900      	cmp	r1, #0
 80045cc:	f000 85d1 	beq.w	8005172 <_fx_directory_entry_write+0xce2>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80045d0:	9a05      	ldr	r2, [sp, #20]
 80045d2:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
 80045d6:	3203      	adds	r2, #3
 80045d8:	9205      	str	r2, [sp, #20]
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;

            for (; dotfound <= 7; dotfound++)
 80045da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045dc:	f893 9000 	ldrb.w	r9, [r3]
 80045e0:	2a07      	cmp	r2, #7
 80045e2:	f200 8552 	bhi.w	800508a <_fx_directory_entry_write+0xbfa>
 80045e6:	930e      	str	r3, [sp, #56]	; 0x38
 80045e8:	a811      	add	r0, sp, #68	; 0x44
 80045ea:	4613      	mov	r3, r2
 80045ec:	2120      	movs	r1, #32
 80045ee:	f1c2 0208 	rsb	r2, r2, #8
 80045f2:	4418      	add	r0, r3
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 80045f4:	4698      	mov	r8, r3
 80045f6:	f006 fefe 	bl	800b3f6 <memset>
 80045fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 80045fc:	f1ba 0f00 	cmp.w	sl, #0
 8004600:	f040 846b 	bne.w	8004eda <_fx_directory_entry_write+0xa4a>
        /* Default the name match to true.  */
        match =  TX_TRUE;

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 8004604:	2100      	movs	r1, #0
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 8004606:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
        k =  0;
 800460a:	460a      	mov	r2, r1
            if (shortname[k] == ' ')
 800460c:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8004610:	4494      	add	ip, r2
 8004612:	f81c cc0c 	ldrb.w	ip, [ip, #-12]
 8004616:	f1bc 0f20 	cmp.w	ip, #32
 800461a:	f040 853c 	bne.w	8005096 <_fx_directory_entry_write+0xc06>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800461e:	f1b9 0f00 	cmp.w	r9, #0
 8004622:	f000 8548 	beq.w	80050b6 <_fx_directory_entry_write+0xc26>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8004626:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800462a:	f000 84fd 	beq.w	8005028 <_fx_directory_entry_write+0xb98>
            l++;
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800462e:	9a05      	ldr	r2, [sp, #20]
 8004630:	2a00      	cmp	r2, #0
 8004632:	f040 8457 	bne.w	8004ee4 <_fx_directory_entry_write+0xa54>
 8004636:	f1b8 0f03 	cmp.w	r8, #3
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800463a:	f8d5 904c 	ldr.w	r9, [r5, #76]	; 0x4c
            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
            {
                i = 3;
            }
            shortname[i++] = '~';
 800463e:	aa14      	add	r2, sp, #80	; 0x50
 8004640:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8004644:	bf28      	it	cs
 8004646:	f04f 0803 	movcs.w	r8, #3
            entry = entry % 0x10000;
 800464a:	fa1f f389 	uxth.w	r3, r9
                {
                     temp = ((entry >> 4) & 0xf);
                }
                else
                {
                     temp = ((entry) & 0xf);
 800464e:	f009 090f 	and.w	r9, r9, #15
            shortname[i++] = '~';
 8004652:	eb02 0108 	add.w	r1, r2, r8
                    temp =  ((entry >> 12) & 0xf);
 8004656:	0b18      	lsrs	r0, r3, #12
                     temp = ((entry >> 4) & 0xf);
 8004658:	f3c3 1c03 	ubfx	ip, r3, #4, #4
            shortname[i++] = '~';
 800465c:	f108 0201 	add.w	r2, r8, #1
 8004660:	f801 ec0c 	strb.w	lr, [r1, #-12]
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 8004664:	2809      	cmp	r0, #9
 8004666:	fa5f fe80 	uxtb.w	lr, r0
                     temp = ((entry >> 8) & 0xf);
 800466a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800466e:	a814      	add	r0, sp, #80	; 0x50
 8004670:	f108 0102 	add.w	r1, r8, #2
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8004674:	bf8c      	ite	hi
 8004676:	f10e 0e37 	addhi.w	lr, lr, #55	; 0x37
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800467a:	f10e 0e30 	addls.w	lr, lr, #48	; 0x30
 800467e:	4402      	add	r2, r0
                if (temp > 9)
 8004680:	2b09      	cmp	r3, #9
 8004682:	b2d8      	uxtb	r0, r3
 8004684:	ab14      	add	r3, sp, #80	; 0x50
 8004686:	f802 ec0c 	strb.w	lr, [r2, #-12]
 800468a:	f108 0203 	add.w	r2, r8, #3
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800468e:	bf8c      	ite	hi
 8004690:	3037      	addhi	r0, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 8004692:	3030      	addls	r0, #48	; 0x30
 8004694:	4419      	add	r1, r3
                if (temp > 9)
 8004696:	f1bc 0f09 	cmp.w	ip, #9
 800469a:	fa5f f38c 	uxtb.w	r3, ip
 800469e:	f108 0804 	add.w	r8, r8, #4
 80046a2:	f801 0c0c 	strb.w	r0, [r1, #-12]
 80046a6:	a914      	add	r1, sp, #80	; 0x50
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80046a8:	bf8c      	ite	hi
 80046aa:	3337      	addhi	r3, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 80046ac:	3330      	addls	r3, #48	; 0x30
 80046ae:	440a      	add	r2, r1
                if (temp > 9)
 80046b0:	f1b9 0f09 	cmp.w	r9, #9
 80046b4:	f802 3c0c 	strb.w	r3, [r2, #-12]
 80046b8:	fa5f f389 	uxtb.w	r3, r9
 80046bc:	aa14      	add	r2, sp, #80	; 0x50
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80046be:	bf8c      	ite	hi
 80046c0:	3337      	addhi	r3, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 80046c2:	3330      	addls	r3, #48	; 0x30
 80046c4:	4490      	add	r8, r2
 80046c6:	f808 3c0c 	strb.w	r3, [r8, #-12]
 80046ca:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
        /* Set end of short string to NULL.   */
        shortname[11] = 0;

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 80046ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        shortname[11] = 0;
 80046d2:	2200      	movs	r2, #0
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 80046d4:	2be5      	cmp	r3, #229	; 0xe5
        shortname[11] = 0;
 80046d6:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 80046da:	f040 837d 	bne.w	8004dd8 <_fx_directory_entry_write+0x948>
 80046de:	9a07      	ldr	r2, [sp, #28]
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	f000 8379 	beq.w	8004dd8 <_fx_directory_entry_write+0x948>
        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 80046e6:	238f      	movs	r3, #143	; 0x8f
 80046e8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 80046ec:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            if ((alpha >= 'a') && (alpha <= 'z'))
 80046f0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80046f4:	2b19      	cmp	r3, #25
 80046f6:	d801      	bhi.n	80046fc <_fx_directory_entry_write+0x26c>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80046f8:	3a20      	subs	r2, #32
 80046fa:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 80046fc:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
            shortname[i] =  alpha;
 8004700:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004704:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004708:	2a19      	cmp	r2, #25
 800470a:	d801      	bhi.n	8004710 <_fx_directory_entry_write+0x280>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800470c:	3b20      	subs	r3, #32
 800470e:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8004710:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
            shortname[i] =  alpha;
 8004714:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004718:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800471c:	2b19      	cmp	r3, #25
 800471e:	d801      	bhi.n	8004724 <_fx_directory_entry_write+0x294>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004720:	3a20      	subs	r2, #32
 8004722:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8004724:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
            shortname[i] =  alpha;
 8004728:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
            if ((alpha >= 'a') && (alpha <= 'z'))
 800472c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004730:	2a19      	cmp	r2, #25
 8004732:	d801      	bhi.n	8004738 <_fx_directory_entry_write+0x2a8>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004734:	3b20      	subs	r3, #32
 8004736:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8004738:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
            shortname[i] =  alpha;
 800473c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004740:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8004744:	2b19      	cmp	r3, #25
 8004746:	d801      	bhi.n	800474c <_fx_directory_entry_write+0x2bc>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004748:	3a20      	subs	r2, #32
 800474a:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 800474c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
            shortname[i] =  alpha;
 8004750:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004754:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004758:	2a19      	cmp	r2, #25
 800475a:	d801      	bhi.n	8004760 <_fx_directory_entry_write+0x2d0>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800475c:	3b20      	subs	r3, #32
 800475e:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8004760:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
            shortname[i] =  alpha;
 8004764:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004768:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800476c:	2b19      	cmp	r3, #25
 800476e:	d801      	bhi.n	8004774 <_fx_directory_entry_write+0x2e4>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004770:	3a20      	subs	r2, #32
 8004772:	b2d2      	uxtb	r2, r2
            shortname[i] =  alpha;
 8004774:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004778:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
            alpha = shortname[i];
 800477c:	4603      	mov	r3, r0
            if ((alpha >= 'a') && (alpha <= 'z'))
 800477e:	2a19      	cmp	r2, #25
 8004780:	d802      	bhi.n	8004788 <_fx_directory_entry_write+0x2f8>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004782:	f1a0 0320 	sub.w	r3, r0, #32
 8004786:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8004788:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
            shortname[i] =  alpha;
 800478c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004790:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8004794:	2b19      	cmp	r3, #25
 8004796:	d801      	bhi.n	800479c <_fx_directory_entry_write+0x30c>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004798:	3a20      	subs	r2, #32
 800479a:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 800479c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            shortname[i] =  alpha;
 80047a0:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
            if ((alpha >= 'a') && (alpha <= 'z'))
 80047a4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80047a8:	2a19      	cmp	r2, #25
 80047aa:	d801      	bhi.n	80047b0 <_fx_directory_entry_write+0x320>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80047ac:	3b20      	subs	r3, #32
 80047ae:	b2db      	uxtb	r3, r3
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 80047b0:	792a      	ldrb	r2, [r5, #4]
            shortname[i] =  alpha;
 80047b2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	f000 80c7 	beq.w	800494a <_fx_directory_entry_write+0x4ba>
 80047bc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80047c0:	2a2e      	cmp	r2, #46	; 0x2e
 80047c2:	9312      	str	r3, [sp, #72]	; 0x48
 80047c4:	9311      	str	r3, [sp, #68]	; 0x44
 80047c6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80047ca:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 80047ce:	f000 83fd 	beq.w	8004fcc <_fx_directory_entry_write+0xb3c>
 80047d2:	796b      	ldrb	r3, [r5, #5]

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];

                /* Copy file name character.  */
                shortname[j] =  alpha;
 80047d4:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8475 	beq.w	80050c8 <_fx_directory_entry_write+0xc38>
 80047de:	2b2e      	cmp	r3, #46	; 0x2e
 80047e0:	f000 8472 	beq.w	80050c8 <_fx_directory_entry_write+0xc38>
                shortname[j] =  alpha;
 80047e4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 80047e8:	79ab      	ldrb	r3, [r5, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8469 	beq.w	80050c2 <_fx_directory_entry_write+0xc32>
 80047f0:	2b2e      	cmp	r3, #46	; 0x2e
 80047f2:	f000 8466 	beq.w	80050c2 <_fx_directory_entry_write+0xc32>
                shortname[j] =  alpha;
 80047f6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80047fa:	79eb      	ldrb	r3, [r5, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 846a 	beq.w	80050d6 <_fx_directory_entry_write+0xc46>
 8004802:	2b2e      	cmp	r3, #46	; 0x2e
 8004804:	f000 8467 	beq.w	80050d6 <_fx_directory_entry_write+0xc46>
                shortname[j] =  alpha;
 8004808:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 800480c:	7a2b      	ldrb	r3, [r5, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8484 	beq.w	800511c <_fx_directory_entry_write+0xc8c>
 8004814:	2b2e      	cmp	r3, #46	; 0x2e
 8004816:	f000 8481 	beq.w	800511c <_fx_directory_entry_write+0xc8c>
                shortname[j] =  alpha;
 800481a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800481e:	7a6b      	ldrb	r3, [r5, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8478 	beq.w	8005116 <_fx_directory_entry_write+0xc86>
 8004826:	2b2e      	cmp	r3, #46	; 0x2e
 8004828:	f000 8475 	beq.w	8005116 <_fx_directory_entry_write+0xc86>
                shortname[j] =  alpha;
 800482c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8004830:	7aab      	ldrb	r3, [r5, #10]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 846c 	beq.w	8005110 <_fx_directory_entry_write+0xc80>
 8004838:	2b2e      	cmp	r3, #46	; 0x2e
 800483a:	f000 8469 	beq.w	8005110 <_fx_directory_entry_write+0xc80>
                shortname[j] =  alpha;
 800483e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8004842:	7aeb      	ldrb	r3, [r5, #11]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004844:	2b2e      	cmp	r3, #46	; 0x2e
 8004846:	f000 8460 	beq.w	800510a <_fx_directory_entry_write+0xc7a>
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 845d 	beq.w	800510a <_fx_directory_entry_write+0xc7a>
                shortname[j] =  alpha;
 8004850:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8004854:	2208      	movs	r2, #8
 8004856:	7b2b      	ldrb	r3, [r5, #12]
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 83b8 	bne.w	8004fce <_fx_directory_entry_write+0xb3e>
 800485e:	e001      	b.n	8004864 <_fx_directory_entry_write+0x3d4>
 8004860:	4ec4ec4f 	.word	0x4ec4ec4f
            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 8004864:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004868:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800486c:	2a19      	cmp	r2, #25
 800486e:	d801      	bhi.n	8004874 <_fx_directory_entry_write+0x3e4>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004870:	3b20      	subs	r3, #32
 8004872:	b2db      	uxtb	r3, r3
                alpha =  shortname[j];
 8004874:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8004878:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                if ((alpha >= 'a') && (alpha <= 'z'))
 800487c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8004880:	2a19      	cmp	r2, #25
 8004882:	d801      	bhi.n	8004888 <_fx_directory_entry_write+0x3f8>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004884:	3920      	subs	r1, #32
 8004886:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8004888:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
                shortname[j] =  alpha;
 800488c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004890:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8004894:	2919      	cmp	r1, #25
 8004896:	d801      	bhi.n	800489c <_fx_directory_entry_write+0x40c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004898:	3a20      	subs	r2, #32
 800489a:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 800489c:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
                shortname[j] =  alpha;
 80048a0:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
                if ((alpha >= 'a') && (alpha <= 'z'))
 80048a4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80048a8:	2a19      	cmp	r2, #25
 80048aa:	d801      	bhi.n	80048b0 <_fx_directory_entry_write+0x420>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80048ac:	3920      	subs	r1, #32
 80048ae:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 80048b0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
                shortname[j] =  alpha;
 80048b4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
                if ((alpha >= 'a') && (alpha <= 'z'))
 80048b8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80048bc:	2919      	cmp	r1, #25
 80048be:	d801      	bhi.n	80048c4 <_fx_directory_entry_write+0x434>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80048c0:	3a20      	subs	r2, #32
 80048c2:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 80048c4:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
                shortname[j] =  alpha;
 80048c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
                if ((alpha >= 'a') && (alpha <= 'z'))
 80048cc:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80048d0:	2a19      	cmp	r2, #25
 80048d2:	d801      	bhi.n	80048d8 <_fx_directory_entry_write+0x448>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80048d4:	3920      	subs	r1, #32
 80048d6:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 80048d8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
                shortname[j] =  alpha;
 80048dc:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
                if ((alpha >= 'a') && (alpha <= 'z'))
 80048e0:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80048e4:	2919      	cmp	r1, #25
 80048e6:	d801      	bhi.n	80048ec <_fx_directory_entry_write+0x45c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80048e8:	3a20      	subs	r2, #32
 80048ea:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 80048ec:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
                shortname[j] =  alpha;
 80048f0:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if ((alpha >= 'a') && (alpha <= 'z'))
 80048f4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80048f8:	2a19      	cmp	r2, #25
 80048fa:	d801      	bhi.n	8004900 <_fx_directory_entry_write+0x470>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80048fc:	3920      	subs	r1, #32
 80048fe:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8004900:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
                shortname[j] =  alpha;
 8004904:	f88d 104b 	strb.w	r1, [sp, #75]	; 0x4b
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004908:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 800490c:	2919      	cmp	r1, #25
 800490e:	d801      	bhi.n	8004914 <_fx_directory_entry_write+0x484>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004910:	3a20      	subs	r2, #32
 8004912:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8004914:	f89d 104d 	ldrb.w	r1, [sp, #77]	; 0x4d
                shortname[j] =  alpha;
 8004918:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
                if ((alpha >= 'a') && (alpha <= 'z'))
 800491c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8004920:	2a19      	cmp	r2, #25
 8004922:	d801      	bhi.n	8004928 <_fx_directory_entry_write+0x498>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004924:	3920      	subs	r1, #32
 8004926:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8004928:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
                shortname[j] =  alpha;
 800492c:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004930:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8004934:	2919      	cmp	r1, #25
 8004936:	d801      	bhi.n	800493c <_fx_directory_entry_write+0x4ac>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004938:	3a20      	subs	r2, #32
 800493a:	b2d2      	uxtb	r2, r2
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800493c:	2be5      	cmp	r3, #229	; 0xe5
                shortname[j] =  alpha;
 800493e:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 8004942:	d102      	bne.n	800494a <_fx_directory_entry_write+0x4ba>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 8004944:	238f      	movs	r3, #143	; 0x8f
 8004946:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800494a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800494e:	f047 0040 	orr.w	r0, r7, #64	; 0x40
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 8004952:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 8004956:	01da      	lsls	r2, r3, #7
 8004958:	f89d c046 	ldrb.w	ip, [sp, #70]	; 0x46
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800495c:	7020      	strb	r0, [r4, #0]
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800495e:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8004962:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 8004966:	440a      	add	r2, r1
 8004968:	b2d1      	uxtb	r1, r2
 800496a:	01ca      	lsls	r2, r1, #7
 800496c:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 8004970:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8004974:	fa5c f282 	uxtab	r2, ip, r2
 8004978:	fa5f fc82 	uxtb.w	ip, r2
 800497c:	ea4f 12cc 	mov.w	r2, ip, lsl #7
 8004980:	ea42 025c 	orr.w	r2, r2, ip, lsr #1
 8004984:	f89d c049 	ldrb.w	ip, [sp, #73]	; 0x49
 8004988:	fa50 f282 	uxtab	r2, r0, r2
 800498c:	b2d0      	uxtb	r0, r2
 800498e:	01c2      	lsls	r2, r0, #7
 8004990:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8004994:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
 8004998:	fa51 f282 	uxtab	r2, r1, r2
 800499c:	b2d1      	uxtb	r1, r2
 800499e:	01ca      	lsls	r2, r1, #7
 80049a0:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 80049a4:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80049a8:	fa5c f282 	uxtab	r2, ip, r2
 80049ac:	fa5f fc82 	uxtb.w	ip, r2
 80049b0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80049b4:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 80049b8:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 80049bc:	fa50 f282 	uxtab	r2, r0, r2
 80049c0:	b2d0      	uxtb	r0, r2
 80049c2:	0842      	lsrs	r2, r0, #1
 80049c4:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 80049c8:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
 80049cc:	fa51 f282 	uxtab	r2, r1, r2
 80049d0:	b2d1      	uxtb	r1, r2
 80049d2:	084a      	lsrs	r2, r1, #1
 80049d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80049d8:	f89d 104e 	ldrb.w	r1, [sp, #78]	; 0x4e
 80049dc:	fa5c f282 	uxtab	r2, ip, r2
 80049e0:	fa5f fc82 	uxtb.w	ip, r2
 80049e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80049e8:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 80049ec:	fa50 f282 	uxtab	r2, r0, r2
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	0850      	lsrs	r0, r2, #1
 80049f4:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
 80049f8:	fa51 f182 	uxtab	r1, r1, r2
 80049fc:	b2ca      	uxtb	r2, r1
 80049fe:	9207      	str	r2, [sp, #28]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 8241 	beq.w	8004e88 <_fx_directory_entry_write+0x9f8>
 8004a06:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 8004a0a:	9906      	ldr	r1, [sp, #24]
 8004a0c:	f04f 0a00 	mov.w	sl, #0
 8004a10:	4622      	mov	r2, r4
 8004a12:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 8004a16:	460c      	mov	r4, r1

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
                {

                    work_ptr[i] = eof_marker;
 8004a18:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8004a1c:	4658      	mov	r0, fp
 8004a1e:	f1a8 080d 	sub.w	r8, r8, #13
 8004a22:	4651      	mov	r1, sl
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8004a24:	2be5      	cmp	r3, #229	; 0xe5
            work_ptr[12] = 0;
 8004a26:	f04f 0a00 	mov.w	sl, #0
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8004a2a:	46c6      	mov	lr, r8
 8004a2c:	9105      	str	r1, [sp, #20]
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8004a2e:	bf08      	it	eq
 8004a30:	7013      	strbeq	r3, [r2, #0]
            work_ptr[11] = FX_LONG_NAME;
 8004a32:	f04f 030f 	mov.w	r3, #15
            eof_marker = 0;
 8004a36:	46d4      	mov	ip, sl
            work_ptr[12] = 0;
 8004a38:	f882 a00c 	strb.w	sl, [r2, #12]
            work_ptr[11] = FX_LONG_NAME;
 8004a3c:	72d3      	strb	r3, [r2, #11]
            work_ptr[13] = checksum;
 8004a3e:	9b07      	ldr	r3, [sp, #28]
            work_ptr[26] = 0;
 8004a40:	f882 a01a 	strb.w	sl, [r2, #26]
            work_ptr[13] = checksum;
 8004a44:	7353      	strb	r3, [r2, #13]
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8004a46:	2301      	movs	r3, #1
            work_ptr[27] = 0;
 8004a48:	f882 a01b 	strb.w	sl, [r2, #27]
                if ((i == 11) || (i == 26))
 8004a4c:	2b0b      	cmp	r3, #11
 8004a4e:	f103 0a01 	add.w	sl, r3, #1
 8004a52:	d016      	beq.n	8004a82 <_fx_directory_entry_write+0x5f2>
 8004a54:	2b1a      	cmp	r3, #26
 8004a56:	d014      	beq.n	8004a82 <_fx_directory_entry_write+0x5f2>
                if (i == 13)
 8004a58:	2b0d      	cmp	r3, #13
 8004a5a:	f000 81d6 	beq.w	8004e0a <_fx_directory_entry_write+0x97a>
                if (eof_marker)
 8004a5e:	f1bc 0f00 	cmp.w	ip, #0
 8004a62:	f000 81ca 	beq.w	8004dfa <_fx_directory_entry_write+0x96a>
                    work_ptr[i] = eof_marker;
 8004a66:	f802 9003 	strb.w	r9, [r2, r3]
                    work_ptr[i + 1] = eof_marker;
 8004a6a:	f802 900a 	strb.w	r9, [r2, sl]
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
                    work_ptr[i + 1] = 0;
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 8004a6e:	6829      	ldr	r1, [r5, #0]
 8004a70:	f811 a00e 	ldrb.w	sl, [r1, lr]

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
                }

                j++;
 8004a74:	f10e 0e01 	add.w	lr, lr, #1
                    eof_marker =  (UCHAR)0xff;
 8004a78:	f1ba 0f00 	cmp.w	sl, #0
 8004a7c:	bf08      	it	eq
 8004a7e:	f04f 0cff 	moveq.w	ip, #255	; 0xff
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8004a82:	3302      	adds	r3, #2
 8004a84:	2b1f      	cmp	r3, #31
 8004a86:	d9e1      	bls.n	8004a4c <_fx_directory_entry_write+0x5bc>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
            byte_offset += FX_DIR_ENTRY_SIZE;
 8004a88:	3020      	adds	r0, #32
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 8004a8a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004a8c:	9905      	ldr	r1, [sp, #20]
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	4283      	cmp	r3, r0
 8004a92:	468b      	mov	fp, r1
 8004a94:	f240 81bb 	bls.w	8004e0e <_fx_directory_entry_write+0x97e>
            work_ptr += FX_DIR_ENTRY_SIZE;
 8004a98:	3220      	adds	r2, #32
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 8004a9a:	3f01      	subs	r7, #1
 8004a9c:	f1a8 080d 	sub.w	r8, r8, #13
            work_ptr[0] = (UCHAR)card;
 8004aa0:	7017      	strb	r7, [r2, #0]
        while (card > 0)
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	f000 81ed 	beq.w	8004e82 <_fx_directory_entry_write+0x9f2>
 8004aa8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8004aac:	e7ba      	b.n	8004a24 <_fx_directory_entry_write+0x594>
        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8004aae:	2304      	movs	r3, #4
                work_ptr[j] =  (UCHAR)alpha;
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8004ab0:	b1f9      	cbz	r1, 8004af2 <_fx_directory_entry_write+0x662>
            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004ab2:	441a      	add	r2, r3
 8004ab4:	7852      	ldrb	r2, [r2, #1]
 8004ab6:	b1e2      	cbz	r2, 8004af2 <_fx_directory_entry_write+0x662>

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004ab8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8004abc:	2919      	cmp	r1, #25
 8004abe:	d801      	bhi.n	8004ac4 <_fx_directory_entry_write+0x634>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004ac0:	3a20      	subs	r2, #32
 8004ac2:	b2d2      	uxtb	r2, r2
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8004ac4:	7222      	strb	r2, [r4, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004ac6:	682a      	ldr	r2, [r5, #0]
 8004ac8:	441a      	add	r2, r3
 8004aca:	7892      	ldrb	r2, [r2, #2]
 8004acc:	b18a      	cbz	r2, 8004af2 <_fx_directory_entry_write+0x662>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004ace:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8004ad2:	2919      	cmp	r1, #25
 8004ad4:	d801      	bhi.n	8004ada <_fx_directory_entry_write+0x64a>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004ad6:	3a20      	subs	r2, #32
 8004ad8:	b2d2      	uxtb	r2, r2
                work_ptr[j] =  (UCHAR)alpha;
 8004ada:	7262      	strb	r2, [r4, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004adc:	682a      	ldr	r2, [r5, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	78db      	ldrb	r3, [r3, #3]
 8004ae2:	b133      	cbz	r3, 8004af2 <_fx_directory_entry_write+0x662>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004ae4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004ae8:	2a19      	cmp	r2, #25
 8004aea:	d801      	bhi.n	8004af0 <_fx_directory_entry_write+0x660>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004aec:	3b20      	subs	r3, #32
 8004aee:	b2db      	uxtb	r3, r3
                work_ptr[j] =  (UCHAR)alpha;
 8004af0:	72a3      	strb	r3, [r4, #10]
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8004af2:	340b      	adds	r4, #11
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8004af4:	7f2b      	ldrb	r3, [r5, #28]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8004af6:	1ce0      	adds	r0, r4, #3
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8004af8:	7023      	strb	r3, [r4, #0]
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 8004afa:	7f6b      	ldrb	r3, [r5, #29]
 8004afc:	7063      	strb	r3, [r4, #1]
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 8004afe:	7fab      	ldrb	r3, [r5, #30]
 8004b00:	70a3      	strb	r3, [r4, #2]
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8004b02:	6a29      	ldr	r1, [r5, #32]
 8004b04:	f001 fac8 	bl	8006098 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 8004b08:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004b0a:	1d60      	adds	r0, r4, #5
 8004b0c:	f001 fac4 	bl	8006098 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 8004b10:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004b12:	1de0      	adds	r0, r4, #7
 8004b14:	f001 fac0 	bl	8006098 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 8004b18:	6e71      	ldr	r1, [r6, #100]	; 0x64
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8004b1a:	f104 0009 	add.w	r0, r4, #9
    if (media_ptr -> fx_media_32_bit_FAT)
 8004b1e:	2900      	cmp	r1, #0
 8004b20:	f000 81ef 	beq.w	8004f02 <_fx_directory_entry_write+0xa72>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
        _fx_utility_16_unsigned_write(work_ptr, temp);
 8004b24:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 8004b26:	f001 fab7 	bl	8006098 <_fx_utility_16_unsigned_write>

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 8004b2a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004b2c:	f104 000b 	add.w	r0, r4, #11
 8004b30:	f001 fab2 	bl	8006098 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 8004b34:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004b36:	f104 000d 	add.w	r0, r4, #13
 8004b3a:	f001 faad 	bl	8006098 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 8004b3e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8004b40:	f104 000f 	add.w	r0, r4, #15
 8004b44:	f001 faa8 	bl	8006098 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 8004b48:	f104 0011 	add.w	r0, r4, #17
 8004b4c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004b4e:	f7fe faf1 	bl	8003134 <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8004b52:	9b08      	ldr	r3, [sp, #32]
 8004b54:	2003      	movs	r0, #3
 8004b56:	2101      	movs	r1, #1
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	9002      	str	r0, [sp, #8]
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	9101      	str	r1, [sp, #4]
 8004b60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b64:	f7ff fba0 	bl	80042a8 <_fx_utility_logical_sector_write>
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8004b68:	900a      	str	r0, [sp, #40]	; 0x28
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d12f      	bne.n	8004bce <_fx_directory_entry_write+0x73e>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8004b6e:	f896 33e0 	ldrb.w	r3, [r6, #992]	; 0x3e0
 8004b72:	b363      	cbz	r3, 8004bce <_fx_directory_entry_write+0x73e>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8004b74:	f506 712c 	add.w	r1, r6, #688	; 0x2b0
 8004b78:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 8004b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf08      	it	eq
 8004b84:	4282      	cmpeq	r2, r0
 8004b86:	d122      	bne.n	8004bce <_fx_directory_entry_write+0x73e>
 8004b88:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8004b8a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d11d      	bne.n	8004bce <_fx_directory_entry_write+0x73e>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 8004b92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8004b94:	f506 702a 	add.w	r0, r6, #680	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8004b98:	f506 7124 	add.w	r1, r6, #656	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 8004b9c:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8004ba0:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 8004ba4:	e9c0 2300 	strd	r2, r3, [r0]
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 8004ba8:	7f2b      	ldrb	r3, [r5, #28]
 8004baa:	f886 328c 	strb.w	r3, [r6, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 8004bae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8004bb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 8004bb2:	f8c6 229c 	str.w	r2, [r6, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8004bb6:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 8004bba:	7f6b      	ldrb	r3, [r5, #29]
 8004bbc:	f886 328d 	strb.w	r3, [r6, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 8004bc0:	7fab      	ldrb	r3, [r5, #30]
 8004bc2:	f886 328e 	strb.w	r3, [r6, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8004bc6:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8004bca:	e9c1 2300 	strd	r2, r3, [r1]
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8004bce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004bd0:	b015      	add	sp, #84	; 0x54
 8004bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cluster =  0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	930b      	str	r3, [sp, #44]	; 0x2c
        relative_sector =  0;
 8004bda:	9309      	str	r3, [sp, #36]	; 0x24
 8004bdc:	e47d      	b.n	80044da <_fx_directory_entry_write+0x4a>
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 8004bde:	69ab      	ldr	r3, [r5, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d062      	beq.n	8004caa <_fx_directory_entry_write+0x81a>
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 8004be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be8:	7822      	ldrb	r2, [r4, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d15c      	bne.n	8004caa <_fx_directory_entry_write+0x81a>
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8004bf0:	f242 49a8 	movw	r9, #9384	; 0x24a8
 8004bf4:	9a06      	ldr	r2, [sp, #24]
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8004bf6:	46d0      	mov	r8, sl
 8004bf8:	f04f 0a00 	mov.w	sl, #0
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8004bfc:	44b1      	add	r9, r6
 8004bfe:	4658      	mov	r0, fp
 8004c00:	4651      	mov	r1, sl
 8004c02:	4623      	mov	r3, r4
 8004c04:	f8cd 9018 	str.w	r9, [sp, #24]
 8004c08:	4693      	mov	fp, r2
 8004c0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004c0e:	4691      	mov	r9, r2
 8004c10:	46aa      	mov	sl, r5
 8004c12:	e005      	b.n	8004c20 <_fx_directory_entry_write+0x790>
                    work_ptr += FX_DIR_ENTRY_SIZE;
 8004c14:	3320      	adds	r3, #32
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 8004c16:	3701      	adds	r7, #1
 8004c18:	f8da 2018 	ldr.w	r2, [sl, #24]
 8004c1c:	42ba      	cmp	r2, r7
 8004c1e:	d93e      	bls.n	8004c9e <_fx_directory_entry_write+0x80e>
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8004c20:	f8da 2000 	ldr.w	r2, [sl]
                    byte_offset += FX_DIR_ENTRY_SIZE;
 8004c24:	3020      	adds	r0, #32
 8004c26:	464c      	mov	r4, r9
 8004c28:	460d      	mov	r5, r1
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8004c2a:	7812      	ldrb	r2, [r2, #0]
 8004c2c:	2ae5      	cmp	r2, #229	; 0xe5
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8004c2e:	bf08      	it	eq
 8004c30:	701a      	strbeq	r2, [r3, #0]
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 8004c32:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004c34:	4282      	cmp	r2, r0
 8004c36:	d8ed      	bhi.n	8004c14 <_fx_directory_entry_write+0x784>
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c3e:	f8cd c000 	str.w	ip, [sp]
 8004c42:	464a      	mov	r2, r9
 8004c44:	9001      	str	r0, [sp, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7ff fb2d 	bl	80042a8 <_fx_utility_logical_sector_write>
                        if (status != FX_SUCCESS)
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	f040 8160 	bne.w	8004f14 <_fx_directory_entry_write+0xa84>
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8004c54:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004c56:	455b      	cmp	r3, fp
 8004c58:	f200 8156 	bhi.w	8004f08 <_fx_directory_entry_write+0xa78>
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8004c5c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c60:	3b01      	subs	r3, #1
 8004c62:	4293      	cmp	r3, r2
 8004c64:	f240 81c7 	bls.w	8004ff6 <_fx_directory_entry_write+0xb66>
                                relative_sector++;
 8004c68:	3201      	adds	r2, #1
                                logical_sector++;
 8004c6a:	f10b 0b01 	add.w	fp, fp, #1
                                relative_sector++;
 8004c6e:	9209      	str	r2, [sp, #36]	; 0x24
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8004c70:	68b3      	ldr	r3, [r6, #8]
 8004c72:	2100      	movs	r1, #0
 8004c74:	2001      	movs	r0, #1
 8004c76:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	465a      	mov	r2, fp
 8004c7e:	9001      	str	r0, [sp, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	4630      	mov	r0, r6
 8004c84:	46d9      	mov	r9, fp
 8004c86:	465c      	mov	r4, fp
 8004c88:	460d      	mov	r5, r1
 8004c8a:	9105      	str	r1, [sp, #20]
 8004c8c:	f7ff f95e 	bl	8003f4c <_fx_utility_logical_sector_read>
                        if (status != FX_SUCCESS)
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f040 813f 	bne.w	8004f14 <_fx_directory_entry_write+0xa84>
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8004c96:	68b3      	ldr	r3, [r6, #8]
 8004c98:	9905      	ldr	r1, [sp, #20]
 8004c9a:	469c      	mov	ip, r3
 8004c9c:	e7bb      	b.n	8004c16 <_fx_directory_entry_write+0x786>
 8004c9e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8004ca2:	461c      	mov	r4, r3
 8004ca4:	4655      	mov	r5, sl
 8004ca6:	f8cd c020 	str.w	ip, [sp, #32]
 8004caa:	220b      	movs	r2, #11
 8004cac:	2120      	movs	r1, #32
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f006 fba1 	bl	800b3f6 <memset>
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8004cb4:	682a      	ldr	r2, [r5, #0]
 8004cb6:	7811      	ldrb	r1, [r2, #0]
 8004cb8:	292e      	cmp	r1, #46	; 0x2e
 8004cba:	f040 81e1 	bne.w	8005080 <_fx_directory_entry_write+0xbf0>
            work_ptr[i] = '.';
 8004cbe:	460f      	mov	r7, r1
 8004cc0:	1e60      	subs	r0, r4, #1
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8004cc2:	2300      	movs	r3, #0
            work_ptr[i] = '.';
 8004cc4:	f800 7f01 	strb.w	r7, [r0, #1]!
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8004cc8:	3301      	adds	r3, #1
 8004cca:	682a      	ldr	r2, [r5, #0]
 8004ccc:	5cd1      	ldrb	r1, [r2, r3]
 8004cce:	292e      	cmp	r1, #46	; 0x2e
 8004cd0:	d0f8      	beq.n	8004cc4 <_fx_directory_entry_write+0x834>
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	f000 8104 	beq.w	8004ee0 <_fx_directory_entry_write+0xa50>
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004cd8:	7811      	ldrb	r1, [r2, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	f000 81f9 	beq.w	80050d2 <_fx_directory_entry_write+0xc42>
 8004ce0:	292e      	cmp	r1, #46	; 0x2e
 8004ce2:	f000 81f6 	beq.w	80050d2 <_fx_directory_entry_write+0xc42>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004ce6:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004cea:	2b19      	cmp	r3, #25
 8004cec:	d801      	bhi.n	8004cf2 <_fx_directory_entry_write+0x862>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004cee:	3920      	subs	r1, #32
 8004cf0:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 8004cf2:	7021      	strb	r1, [r4, #0]
 8004cf4:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004cf6:	7851      	ldrb	r1, [r2, #1]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	f000 81e8 	beq.w	80050ce <_fx_directory_entry_write+0xc3e>
 8004cfe:	292e      	cmp	r1, #46	; 0x2e
 8004d00:	f000 81e5 	beq.w	80050ce <_fx_directory_entry_write+0xc3e>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004d04:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004d08:	2b19      	cmp	r3, #25
 8004d0a:	d801      	bhi.n	8004d10 <_fx_directory_entry_write+0x880>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004d0c:	3920      	subs	r1, #32
 8004d0e:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 8004d10:	7061      	strb	r1, [r4, #1]
 8004d12:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004d14:	7891      	ldrb	r1, [r2, #2]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004d16:	2900      	cmp	r1, #0
 8004d18:	f000 81e2 	beq.w	80050e0 <_fx_directory_entry_write+0xc50>
 8004d1c:	292e      	cmp	r1, #46	; 0x2e
 8004d1e:	f000 81df 	beq.w	80050e0 <_fx_directory_entry_write+0xc50>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004d22:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004d26:	2b19      	cmp	r3, #25
 8004d28:	d801      	bhi.n	8004d2e <_fx_directory_entry_write+0x89e>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004d2a:	3920      	subs	r1, #32
 8004d2c:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 8004d2e:	70a1      	strb	r1, [r4, #2]
 8004d30:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004d32:	78d1      	ldrb	r1, [r2, #3]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004d34:	2900      	cmp	r1, #0
 8004d36:	f000 81d1 	beq.w	80050dc <_fx_directory_entry_write+0xc4c>
 8004d3a:	292e      	cmp	r1, #46	; 0x2e
 8004d3c:	f000 81ce 	beq.w	80050dc <_fx_directory_entry_write+0xc4c>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004d40:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004d44:	2b19      	cmp	r3, #25
 8004d46:	f240 8180 	bls.w	800504a <_fx_directory_entry_write+0xbba>
                work_ptr[j] =  (UCHAR)alpha;
 8004d4a:	70e1      	strb	r1, [r4, #3]
 8004d4c:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004d4e:	7911      	ldrb	r1, [r2, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004d50:	2900      	cmp	r1, #0
 8004d52:	f43f aeac 	beq.w	8004aae <_fx_directory_entry_write+0x61e>
 8004d56:	292e      	cmp	r1, #46	; 0x2e
 8004d58:	f43f aea9 	beq.w	8004aae <_fx_directory_entry_write+0x61e>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004d5c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004d60:	2b19      	cmp	r3, #25
 8004d62:	f240 8175 	bls.w	8005050 <_fx_directory_entry_write+0xbc0>
                work_ptr[j] =  (UCHAR)alpha;
 8004d66:	7121      	strb	r1, [r4, #4]
 8004d68:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004d6a:	7951      	ldrb	r1, [r2, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	f000 81b9 	beq.w	80050e4 <_fx_directory_entry_write+0xc54>
 8004d72:	292e      	cmp	r1, #46	; 0x2e
 8004d74:	f000 81b6 	beq.w	80050e4 <_fx_directory_entry_write+0xc54>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004d78:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004d7c:	2b19      	cmp	r3, #25
 8004d7e:	f240 816a 	bls.w	8005056 <_fx_directory_entry_write+0xbc6>
                work_ptr[j] =  (UCHAR)alpha;
 8004d82:	7161      	strb	r1, [r4, #5]
 8004d84:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004d86:	7991      	ldrb	r1, [r2, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	f000 81ad 	beq.w	80050e8 <_fx_directory_entry_write+0xc58>
 8004d8e:	292e      	cmp	r1, #46	; 0x2e
 8004d90:	f000 81aa 	beq.w	80050e8 <_fx_directory_entry_write+0xc58>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004d94:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004d98:	2b19      	cmp	r3, #25
 8004d9a:	f240 815f 	bls.w	800505c <_fx_directory_entry_write+0xbcc>
                work_ptr[j] =  (UCHAR)alpha;
 8004d9e:	71a1      	strb	r1, [r4, #6]
 8004da0:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8004da2:	79d1      	ldrb	r1, [r2, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8004da4:	292e      	cmp	r1, #46	; 0x2e
 8004da6:	f000 81bc 	beq.w	8005122 <_fx_directory_entry_write+0xc92>
 8004daa:	2900      	cmp	r1, #0
 8004dac:	f000 81b9 	beq.w	8005122 <_fx_directory_entry_write+0xc92>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8004db0:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8004db4:	2b19      	cmp	r3, #25
 8004db6:	d801      	bhi.n	8004dbc <_fx_directory_entry_write+0x92c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004db8:	3920      	subs	r1, #32
 8004dba:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 8004dbc:	71e1      	strb	r1, [r4, #7]
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	682a      	ldr	r2, [r5, #0]
 8004dc2:	7a11      	ldrb	r1, [r2, #8]
 8004dc4:	e674      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8004dc6:	790b      	ldrb	r3, [r1, #4]
 8004dc8:	2be5      	cmp	r3, #229	; 0xe5
 8004dca:	f47f ab70 	bne.w	80044ae <_fx_directory_entry_write+0x1e>
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	710b      	strb	r3, [r1, #4]
 8004dd2:	9307      	str	r3, [sp, #28]
 8004dd4:	f7ff bb6d 	b.w	80044b2 <_fx_directory_entry_write+0x22>
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004dd8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004ddc:	2a19      	cmp	r2, #25
 8004dde:	f63f ac83 	bhi.w	80046e8 <_fx_directory_entry_write+0x258>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004de2:	3b20      	subs	r3, #32
            alpha = shortname[i];
 8004de4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8004de8:	b2db      	uxtb	r3, r3
            shortname[i] =  alpha;
 8004dea:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            if ((alpha >= 'a') && (alpha <= 'z'))
 8004dee:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8004df2:	2b19      	cmp	r3, #25
 8004df4:	f63f ac82 	bhi.w	80046fc <_fx_directory_entry_write+0x26c>
 8004df8:	e47e      	b.n	80046f8 <_fx_directory_entry_write+0x268>
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 8004dfa:	6829      	ldr	r1, [r5, #0]
 8004dfc:	f811 b00e 	ldrb.w	fp, [r1, lr]
 8004e00:	f802 b003 	strb.w	fp, [r2, r3]
                    work_ptr[i + 1] = 0;
 8004e04:	f802 c00a 	strb.w	ip, [r2, sl]
 8004e08:	e631      	b.n	8004a6e <_fx_directory_entry_write+0x5de>
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8004e0a:	230e      	movs	r3, #14
 8004e0c:	e61e      	b.n	8004a4c <_fx_directory_entry_write+0x5bc>
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8004e0e:	9b08      	ldr	r3, [sp, #32]
 8004e10:	2001      	movs	r0, #1
 8004e12:	f04f 0c03 	mov.w	ip, #3
 8004e16:	4622      	mov	r2, r4
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	9001      	str	r0, [sp, #4]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f8cd c008 	str.w	ip, [sp, #8]
 8004e24:	f7ff fa40 	bl	80042a8 <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d173      	bne.n	8004f14 <_fx_directory_entry_write+0xa84>
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8004e2c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004e2e:	9a06      	ldr	r2, [sp, #24]
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d833      	bhi.n	8004e9c <_fx_directory_entry_write+0xa0c>
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8004e34:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	428b      	cmp	r3, r1
 8004e3c:	d935      	bls.n	8004eaa <_fx_directory_entry_write+0xa1a>
                        logical_sector++;
 8004e3e:	3201      	adds	r2, #1
                        relative_sector++;
 8004e40:	3101      	adds	r1, #1
                        logical_sector++;
 8004e42:	9206      	str	r2, [sp, #24]
                        relative_sector++;
 8004e44:	9109      	str	r1, [sp, #36]	; 0x24
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8004e46:	68b3      	ldr	r3, [r6, #8]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	9c06      	ldr	r4, [sp, #24]
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f04f 0c03 	mov.w	ip, #3
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	9001      	str	r0, [sp, #4]
 8004e56:	4622      	mov	r2, r4
 8004e58:	460b      	mov	r3, r1
 8004e5a:	f8cd c008 	str.w	ip, [sp, #8]
 8004e5e:	4630      	mov	r0, r6
 8004e60:	46a2      	mov	sl, r4
 8004e62:	468b      	mov	fp, r1
 8004e64:	9105      	str	r1, [sp, #20]
 8004e66:	f7ff f871 	bl	8003f4c <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d152      	bne.n	8004f14 <_fx_directory_entry_write+0xa84>
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8004e6e:	68b2      	ldr	r2, [r6, #8]
            card--;
 8004e70:	3f01      	subs	r7, #1
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8004e72:	9905      	ldr	r1, [sp, #20]
 8004e74:	f1a8 080d 	sub.w	r8, r8, #13
 8004e78:	9208      	str	r2, [sp, #32]
            work_ptr[0] = (UCHAR)card;
 8004e7a:	7017      	strb	r7, [r2, #0]
        while (card > 0)
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	f47f ae13 	bne.w	8004aa8 <_fx_directory_entry_write+0x618>
 8004e82:	4614      	mov	r4, r2
 8004e84:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 8004e88:	792b      	ldrb	r3, [r5, #4]
 8004e8a:	220b      	movs	r2, #11
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d146      	bne.n	8004f1e <_fx_directory_entry_write+0xa8e>
 8004e90:	a911      	add	r1, sp, #68	; 0x44
 8004e92:	4620      	mov	r0, r4
 8004e94:	4414      	add	r4, r2
 8004e96:	f006 faa3 	bl	800b3e0 <memcpy>
 8004e9a:	e62b      	b.n	8004af4 <_fx_directory_entry_write+0x664>
                    logical_sector++;
 8004e9c:	3201      	adds	r2, #1
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8004e9e:	4293      	cmp	r3, r2
                    logical_sector++;
 8004ea0:	9206      	str	r2, [sp, #24]
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8004ea2:	d8d0      	bhi.n	8004e46 <_fx_directory_entry_write+0x9b6>
                            return(FX_FILE_CORRUPT);
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ea8:	e691      	b.n	8004bce <_fx_directory_entry_write+0x73e>
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8004eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eac:	aa10      	add	r2, sp, #64	; 0x40
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f7fe f948 	bl	8003144 <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 8004eb4:	bb70      	cbnz	r0, 8004f14 <_fx_directory_entry_write+0xa84>
                        cluster =  next_cluster;
 8004eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8004eb8:	2b01      	cmp	r3, #1
                        cluster =  next_cluster;
 8004eba:	930b      	str	r3, [sp, #44]	; 0x2c
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8004ebc:	d9f2      	bls.n	8004ea4 <_fx_directory_entry_write+0xa14>
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8004ec4:	58f3      	ldr	r3, [r6, r3]
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d9ec      	bls.n	8004ea4 <_fx_directory_entry_write+0xa14>
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8004eca:	1e93      	subs	r3, r2, #2
                        relative_sector =  0;
 8004ecc:	9009      	str	r0, [sp, #36]	; 0x24
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8004ece:	e9d6 2114 	ldrd	r2, r1, [r6, #80]	; 0x50
 8004ed2:	fb01 2303 	mla	r3, r1, r3, r2
 8004ed6:	9306      	str	r3, [sp, #24]
 8004ed8:	e7b5      	b.n	8004e46 <_fx_directory_entry_write+0x9b6>
            card =  len / 13 + 1;
 8004eda:	3701      	adds	r7, #1
 8004edc:	f7ff bb92 	b.w	8004604 <_fx_directory_entry_write+0x174>
 8004ee0:	5cd1      	ldrb	r1, [r2, r3]
 8004ee2:	e5e5      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
        if ((dotpos) && (shortname[8] == ' '))
 8004ee4:	f04f 0c01 	mov.w	ip, #1
 8004ee8:	2820      	cmp	r0, #32
 8004eea:	f43f aba4 	beq.w	8004636 <_fx_directory_entry_write+0x1a6>
 8004eee:	5c5b      	ldrb	r3, [r3, r1]
        if (match == FX_FALSE)
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f47f aba0 	bne.w	8004636 <_fx_directory_entry_write+0x1a6>
 8004ef6:	f1bc 0f00 	cmp.w	ip, #0
 8004efa:	f43f abe8 	beq.w	80046ce <_fx_directory_entry_write+0x23e>
 8004efe:	f7ff bb9a 	b.w	8004636 <_fx_directory_entry_write+0x1a6>
        _fx_utility_16_unsigned_write(work_ptr, 0);
 8004f02:	f001 f8c9 	bl	8006098 <_fx_utility_16_unsigned_write>
 8004f06:	e610      	b.n	8004b2a <_fx_directory_entry_write+0x69a>
                            logical_sector++;
 8004f08:	f10b 0b01 	add.w	fp, fp, #1
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8004f0c:	455b      	cmp	r3, fp
 8004f0e:	f63f aeaf 	bhi.w	8004c70 <_fx_directory_entry_write+0x7e0>
 8004f12:	e7c7      	b.n	8004ea4 <_fx_directory_entry_write+0xa14>
 8004f14:	900a      	str	r0, [sp, #40]	; 0x28
}
 8004f16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f18:	b015      	add	sp, #84	; 0x54
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	2120      	movs	r1, #32
 8004f20:	4620      	mov	r0, r4
 8004f22:	f006 fa68 	bl	800b3f6 <memset>
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f26:	792b      	ldrb	r3, [r5, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f28:	2b2e      	cmp	r3, #46	; 0x2e
 8004f2a:	d03b      	beq.n	8004fa4 <_fx_directory_entry_write+0xb14>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d039      	beq.n	8004fa4 <_fx_directory_entry_write+0xb14>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f30:	7023      	strb	r3, [r4, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f32:	796b      	ldrb	r3, [r5, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f34:	2b2e      	cmp	r3, #46	; 0x2e
 8004f36:	f000 80fc 	beq.w	8005132 <_fx_directory_entry_write+0xca2>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80f9 	beq.w	8005132 <_fx_directory_entry_write+0xca2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f40:	7063      	strb	r3, [r4, #1]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f42:	79ab      	ldrb	r3, [r5, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f44:	2b2e      	cmp	r3, #46	; 0x2e
 8004f46:	f000 8102 	beq.w	800514e <_fx_directory_entry_write+0xcbe>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80ff 	beq.w	800514e <_fx_directory_entry_write+0xcbe>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f50:	70a3      	strb	r3, [r4, #2]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f52:	79eb      	ldrb	r3, [r5, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f54:	2b2e      	cmp	r3, #46	; 0x2e
 8004f56:	f000 80f4 	beq.w	8005142 <_fx_directory_entry_write+0xcb2>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80f1 	beq.w	8005142 <_fx_directory_entry_write+0xcb2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f60:	70e3      	strb	r3, [r4, #3]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f62:	7a2b      	ldrb	r3, [r5, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f64:	2b2e      	cmp	r3, #46	; 0x2e
 8004f66:	d07c      	beq.n	8005062 <_fx_directory_entry_write+0xbd2>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07a      	beq.n	8005062 <_fx_directory_entry_write+0xbd2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f6c:	7123      	strb	r3, [r4, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f6e:	7a6b      	ldrb	r3, [r5, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f70:	2b2e      	cmp	r3, #46	; 0x2e
 8004f72:	f000 80f8 	beq.w	8005166 <_fx_directory_entry_write+0xcd6>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80f5 	beq.w	8005166 <_fx_directory_entry_write+0xcd6>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f7c:	7163      	strb	r3, [r4, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f7e:	7aab      	ldrb	r3, [r5, #10]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f80:	2b2e      	cmp	r3, #46	; 0x2e
 8004f82:	f000 80ea 	beq.w	800515a <_fx_directory_entry_write+0xcca>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80e7 	beq.w	800515a <_fx_directory_entry_write+0xcca>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f8c:	71a3      	strb	r3, [r4, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8004f8e:	7aeb      	ldrb	r3, [r5, #11]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004f90:	2b2e      	cmp	r3, #46	; 0x2e
 8004f92:	f000 80c8 	beq.w	8005126 <_fx_directory_entry_write+0xc96>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80c5 	beq.w	8005126 <_fx_directory_entry_write+0xc96>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004f9c:	71e3      	strb	r3, [r4, #7]
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa2:	7b2b      	ldrb	r3, [r5, #12]
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f43f ada4 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fac:	442b      	add	r3, r5
 8004fae:	795a      	ldrb	r2, [r3, #5]
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	f43f ad9e 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004fb6:	7222      	strb	r2, [r4, #8]
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004fb8:	799a      	ldrb	r2, [r3, #6]
 8004fba:	2a00      	cmp	r2, #0
 8004fbc:	f43f ad99 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8004fc0:	7262      	strb	r2, [r4, #9]
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004fc2:	79db      	ldrb	r3, [r3, #7]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f47f ad93 	bne.w	8004af0 <_fx_directory_entry_write+0x660>
 8004fca:	e592      	b.n	8004af2 <_fx_directory_entry_write+0x662>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8004fcc:	2200      	movs	r2, #0
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004fce:	442a      	add	r2, r5
 8004fd0:	7953      	ldrb	r3, [r2, #5]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f43f ac46 	beq.w	8004864 <_fx_directory_entry_write+0x3d4>
 8004fd8:	7991      	ldrb	r1, [r2, #6]
                    shortname[j] =  alpha;
 8004fda:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	f43f ac40 	beq.w	8004864 <_fx_directory_entry_write+0x3d4>
 8004fe4:	79d3      	ldrb	r3, [r2, #7]
                    shortname[j] =  alpha;
 8004fe6:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f43f ac3a 	beq.w	8004864 <_fx_directory_entry_write+0x3d4>
                    shortname[j] =  alpha;
 8004ff0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8004ff4:	e436      	b.n	8004864 <_fx_directory_entry_write+0x3d4>
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8004ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ff8:	aa10      	add	r2, sp, #64	; 0x40
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f7fe f8a2 	bl	8003144 <_fx_utility_FAT_entry_read>
                                if (status != FX_SUCCESS)
 8005000:	2800      	cmp	r0, #0
 8005002:	d187      	bne.n	8004f14 <_fx_directory_entry_write+0xa84>
                                cluster =  next_cluster;
 8005004:	9a10      	ldr	r2, [sp, #64]	; 0x40
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8005006:	2a01      	cmp	r2, #1
                                cluster =  next_cluster;
 8005008:	920b      	str	r2, [sp, #44]	; 0x2c
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800500a:	f67f af4b 	bls.w	8004ea4 <_fx_directory_entry_write+0xa14>
 800500e:	9b06      	ldr	r3, [sp, #24]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4293      	cmp	r3, r2
 8005014:	f67f af46 	bls.w	8004ea4 <_fx_directory_entry_write+0xa14>
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8005018:	f1a2 0b02 	sub.w	fp, r2, #2
                                relative_sector =  0;
 800501c:	9009      	str	r0, [sp, #36]	; 0x24
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800501e:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8005022:	fb02 3b0b 	mla	fp, r2, fp, r3
 8005026:	e623      	b.n	8004c70 <_fx_directory_entry_write+0x7e0>
 8005028:	2820      	cmp	r0, #32
 800502a:	d15f      	bne.n	80050ec <_fx_directory_entry_write+0xc5c>
 800502c:	4419      	add	r1, r3
 800502e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8083 	beq.w	800513e <_fx_directory_entry_write+0xcae>
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8005038:	2b2e      	cmp	r3, #46	; 0x2e
 800503a:	d0f8      	beq.n	800502e <_fx_directory_entry_write+0xb9e>
 800503c:	f04f 0c01 	mov.w	ip, #1
        if ((dotpos) && (shortname[8] == ' '))
 8005040:	9a05      	ldr	r2, [sp, #20]
 8005042:	2a00      	cmp	r2, #0
 8005044:	f47f aaf7 	bne.w	8004636 <_fx_directory_entry_write+0x1a6>
 8005048:	e752      	b.n	8004ef0 <_fx_directory_entry_write+0xa60>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800504a:	3920      	subs	r1, #32
 800504c:	b2c9      	uxtb	r1, r1
 800504e:	e67c      	b.n	8004d4a <_fx_directory_entry_write+0x8ba>
 8005050:	3920      	subs	r1, #32
 8005052:	b2c9      	uxtb	r1, r1
 8005054:	e687      	b.n	8004d66 <_fx_directory_entry_write+0x8d6>
 8005056:	3920      	subs	r1, #32
 8005058:	b2c9      	uxtb	r1, r1
 800505a:	e692      	b.n	8004d82 <_fx_directory_entry_write+0x8f2>
 800505c:	3920      	subs	r1, #32
 800505e:	b2c9      	uxtb	r1, r1
 8005060:	e69d      	b.n	8004d9e <_fx_directory_entry_write+0x90e>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8005062:	2204      	movs	r2, #4
 8005064:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8005066:	2b00      	cmp	r3, #0
 8005068:	f43f ad43 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 800506c:	e79d      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800506e:	464f      	mov	r7, r9
 8005070:	46ca      	mov	sl, r9
 8005072:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005076:	46c8      	mov	r8, r9
 8005078:	f8cd 9014 	str.w	r9, [sp, #20]
 800507c:	f7ff ba85 	b.w	800458a <_fx_directory_entry_write+0xfa>
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8005080:	2300      	movs	r3, #0
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8005082:	2900      	cmp	r1, #0
 8005084:	f43f af2c 	beq.w	8004ee0 <_fx_directory_entry_write+0xa50>
 8005088:	e626      	b.n	8004cd8 <_fx_directory_entry_write+0x848>
 800508a:	4690      	mov	r8, r2
        if (len % 13 == 0)
 800508c:	f1ba 0f00 	cmp.w	sl, #0
 8005090:	f43f aab8 	beq.w	8004604 <_fx_directory_entry_write+0x174>
 8005094:	e721      	b.n	8004eda <_fx_directory_entry_write+0xa4a>
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 8005096:	2a08      	cmp	r2, #8
 8005098:	d02c      	beq.n	80050f4 <_fx_directory_entry_write+0xc64>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800509a:	45cc      	cmp	ip, r9
 800509c:	f47f aac7 	bne.w	800462e <_fx_directory_entry_write+0x19e>
            k++;
 80050a0:	3201      	adds	r2, #1
            l++;
 80050a2:	3101      	adds	r1, #1
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 80050a4:	2a0b      	cmp	r2, #11
 80050a6:	d12c      	bne.n	8005102 <_fx_directory_entry_write+0xc72>
 80050a8:	f04f 0c00 	mov.w	ip, #0
        if ((dotpos) && (shortname[8] == ' '))
 80050ac:	9a05      	ldr	r2, [sp, #20]
 80050ae:	2a00      	cmp	r2, #0
 80050b0:	f47f af1a 	bne.w	8004ee8 <_fx_directory_entry_write+0xa58>
 80050b4:	e71b      	b.n	8004eee <_fx_directory_entry_write+0xa5e>
 80050b6:	9a05      	ldr	r2, [sp, #20]
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	f43f ab08 	beq.w	80046ce <_fx_directory_entry_write+0x23e>
 80050be:	46cc      	mov	ip, r9
 80050c0:	e712      	b.n	8004ee8 <_fx_directory_entry_write+0xa58>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80050c2:	2202      	movs	r2, #2
 80050c4:	f7ff bbc8 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
 80050c8:	2201      	movs	r2, #1
 80050ca:	f7ff bbc5 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80050ce:	2301      	movs	r3, #1
 80050d0:	e4ee      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
 80050d2:	2300      	movs	r3, #0
 80050d4:	e4ec      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80050d6:	2203      	movs	r2, #3
 80050d8:	f7ff bbbe 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80050dc:	2303      	movs	r3, #3
 80050de:	e4e7      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e4e5      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
 80050e4:	2305      	movs	r3, #5
 80050e6:	e4e3      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
 80050e8:	2306      	movs	r3, #6
 80050ea:	e4e1      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
                l++;
 80050ec:	3101      	adds	r1, #1
 80050ee:	4684      	mov	ip, r0
 80050f0:	f813 9001 	ldrb.w	r9, [r3, r1]
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 80050f4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80050f8:	d044      	beq.n	8005184 <_fx_directory_entry_write+0xcf4>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 80050fa:	45cc      	cmp	ip, r9
 80050fc:	d13f      	bne.n	800517e <_fx_directory_entry_write+0xcee>
            l++;
 80050fe:	3101      	adds	r1, #1
            k++;
 8005100:	2209      	movs	r2, #9
 8005102:	f813 9001 	ldrb.w	r9, [r3, r1]
 8005106:	f7ff ba81 	b.w	800460c <_fx_directory_entry_write+0x17c>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800510a:	2207      	movs	r2, #7
 800510c:	f7ff bba4 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
 8005110:	2206      	movs	r2, #6
 8005112:	f7ff bba1 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
 8005116:	2205      	movs	r2, #5
 8005118:	f7ff bb9e 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
 800511c:	2204      	movs	r2, #4
 800511e:	f7ff bb9b 	b.w	8004858 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8005122:	2307      	movs	r3, #7
 8005124:	e4c4      	b.n	8004ab0 <_fx_directory_entry_write+0x620>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8005126:	2207      	movs	r2, #7
 8005128:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800512a:	2b00      	cmp	r3, #0
 800512c:	f43f ace1 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 8005130:	e73b      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8005132:	2201      	movs	r2, #1
 8005134:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8005136:	2b00      	cmp	r3, #0
 8005138:	f43f acdb 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 800513c:	e735      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
 800513e:	469c      	mov	ip, r3
 8005140:	e77e      	b.n	8005040 <_fx_directory_entry_write+0xbb0>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8005142:	2203      	movs	r2, #3
 8005144:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8005146:	2b00      	cmp	r3, #0
 8005148:	f43f acd3 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 800514c:	e72d      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800514e:	2202      	movs	r2, #2
 8005150:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8005152:	2b00      	cmp	r3, #0
 8005154:	f43f accd 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 8005158:	e727      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800515a:	2206      	movs	r2, #6
 800515c:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800515e:	2b00      	cmp	r3, #0
 8005160:	f43f acc7 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 8005164:	e721      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8005166:	2205      	movs	r2, #5
 8005168:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800516a:	2b00      	cmp	r3, #0
 800516c:	f43f acc1 	beq.w	8004af2 <_fx_directory_entry_write+0x662>
 8005170:	e71b      	b.n	8004faa <_fx_directory_entry_write+0xb1a>
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8005172:	9205      	str	r2, [sp, #20]
 8005174:	f7ff ba31 	b.w	80045da <_fx_directory_entry_write+0x14a>
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8005178:	9105      	str	r1, [sp, #20]
 800517a:	f7ff ba2e 	b.w	80045da <_fx_directory_entry_write+0x14a>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800517e:	f04f 0c01 	mov.w	ip, #1
 8005182:	e793      	b.n	80050ac <_fx_directory_entry_write+0xc1c>
                l++;
 8005184:	3101      	adds	r1, #1
 8005186:	f813 9001 	ldrb.w	r9, [r3, r1]
 800518a:	e7b6      	b.n	80050fa <_fx_directory_entry_write+0xc6a>

0800518c <_fx_directory_free_search>:
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800518c:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
{
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_directory_free_searches++;
 8005194:	3301      	adds	r3, #1

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 8005196:	6814      	ldr	r4, [r2, #0]
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8005198:	2500      	movs	r5, #0
{
 800519a:	b095      	sub	sp, #84	; 0x54
    media_ptr -> fx_media_directory_free_searches++;
 800519c:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 80051a0:	6155      	str	r5, [r2, #20]
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 80051a2:	7823      	ldrb	r3, [r4, #0]
 80051a4:	2b2e      	cmp	r3, #46	; 0x2e
 80051a6:	f000 8147 	beq.w	8005438 <_fx_directory_free_search+0x2ac>
            return(FX_INVALID_NAME);
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 81df 	beq.w	800556e <_fx_directory_free_search+0x3e2>
{
 80051b0:	f04f 0c00 	mov.w	ip, #0
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 80051b4:	2701      	movs	r7, #1
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 80051b6:	f8df 8324 	ldr.w	r8, [pc, #804]	; 80054dc <_fx_directory_free_search+0x350>
{
 80051ba:	4665      	mov	r5, ip
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 80051bc:	f8df e320 	ldr.w	lr, [pc, #800]	; 80054e0 <_fx_directory_free_search+0x354>
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 80051c0:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 80051c4:	2e19      	cmp	r6, #25
 80051c6:	d92e      	bls.n	8005226 <_fx_directory_free_search+0x9a>
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 80051c8:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80051cc:	2e09      	cmp	r6, #9
 80051ce:	d92a      	bls.n	8005226 <_fx_directory_free_search+0x9a>
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 80051d0:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 80051d4:	2e19      	cmp	r6, #25
 80051d6:	f240 80cf 	bls.w	8005378 <_fx_directory_free_search+0x1ec>
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 80051da:	2b20      	cmp	r3, #32
 80051dc:	f000 80cc 	beq.w	8005378 <_fx_directory_free_search+0x1ec>
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 80051e0:	2b2e      	cmp	r3, #46	; 0x2e
 80051e2:	f000 80cb 	beq.w	800537c <_fx_directory_free_search+0x1f0>
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 80051e6:	2be5      	cmp	r3, #229	; 0xe5
 80051e8:	f000 80c6 	beq.w	8005378 <_fx_directory_free_search+0x1ec>
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 80051ec:	061e      	lsls	r6, r3, #24
 80051ee:	d41a      	bmi.n	8005226 <_fx_directory_free_search+0x9a>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 80051f0:	f1a3 097d 	sub.w	r9, r3, #125	; 0x7d
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 80051f4:	f1a3 0621 	sub.w	r6, r3, #33	; 0x21
 80051f8:	2b7b      	cmp	r3, #123	; 0x7b
 80051fa:	bf18      	it	ne
 80051fc:	f1b9 0f01 	cmpne.w	r9, #1
 8005200:	b2f6      	uxtb	r6, r6
 8005202:	bf94      	ite	ls
 8005204:	f04f 0901 	movls.w	r9, #1
 8005208:	f04f 0900 	movhi.w	r9, #0
 800520c:	2e1f      	cmp	r6, #31
 800520e:	f240 809b 	bls.w	8005348 <_fx_directory_free_search+0x1bc>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8005212:	f1a3 065e 	sub.w	r6, r3, #94	; 0x5e
 8005216:	2e02      	cmp	r6, #2
 8005218:	bf8c      	ite	hi
 800521a:	464e      	movhi	r6, r9
 800521c:	f049 0601 	orrls.w	r6, r9, #1
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8005220:	2e00      	cmp	r6, #0
 8005222:	f000 8098 	beq.w	8005356 <_fx_directory_free_search+0x1ca>
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8005226:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800522a:	3501      	adds	r5, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1c7      	bne.n	80051c0 <_fx_directory_free_search+0x34>
            return(FX_INVALID_NAME);
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 8005230:	f1bc 0f00 	cmp.w	ip, #0
 8005234:	d06f      	beq.n	8005316 <_fx_directory_free_search+0x18a>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 8005236:	eba5 030c 	sub.w	r3, r5, ip
 800523a:	2b04      	cmp	r3, #4
 800523c:	d96b      	bls.n	8005316 <_fx_directory_free_search+0x18a>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	6153      	str	r3, [r2, #20]
 8005242:	4ba5      	ldr	r3, [pc, #660]	; (80054d8 <_fx_directory_free_search+0x34c>)
 8005244:	fba3 4305 	umull	r4, r3, r3, r5
 8005248:	089b      	lsrs	r3, r3, #2
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800524a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800524e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005252:	42a5      	cmp	r5, r4
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 8005254:	bf0c      	ite	eq
 8005256:	3301      	addeq	r3, #1
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 8005258:	3302      	addne	r3, #2
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	015b      	lsls	r3, r3, #5
 800525e:	9307      	str	r3, [sp, #28]
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 8005260:	680b      	ldr	r3, [r1, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d169      	bne.n	800533c <_fx_directory_free_search+0x1b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8005268:	6f87      	ldr	r7, [r0, #120]	; 0x78

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800526a:	9304      	str	r3, [sp, #16]
 800526c:	4682      	mov	sl, r0
 800526e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8005272:	910f      	str	r1, [sp, #60]	; 0x3c
 8005274:	4693      	mov	fp, r2
                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8005276:	f242 41ac 	movw	r1, #9388	; 0x24ac
    entry_sector = entry_offset = 0;
 800527a:	2200      	movs	r2, #0
 800527c:	f848 3d04 	str.w	r3, [r8, #-4]!
 8005280:	f242 40a8 	movw	r0, #9384	; 0x24a8
 8005284:	4643      	mov	r3, r8
 8005286:	9209      	str	r2, [sp, #36]	; 0x24
 8005288:	9208      	str	r2, [sp, #32]
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800528a:	eb0a 0201 	add.w	r2, sl, r1
        search_dir_ptr =  FX_NULL;
 800528e:	46b9      	mov	r9, r7
 8005290:	46b8      	mov	r8, r7
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8005292:	920d      	str	r2, [sp, #52]	; 0x34
 8005294:	461f      	mov	r7, r3
 8005296:	eb0a 0200 	add.w	r2, sl, r0
 800529a:	920e      	str	r2, [sp, #56]	; 0x38
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800529c:	465b      	mov	r3, fp
 800529e:	463a      	mov	r2, r7
 80052a0:	9904      	ldr	r1, [sp, #16]
 80052a2:	4650      	mov	r0, sl
 80052a4:	f001 f89a 	bl	80063dc <_fx_directory_entry_read>
        if (status != FX_SUCCESS)
 80052a8:	4604      	mov	r4, r0
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f040 8158 	bne.w	8005560 <_fx_directory_free_search+0x3d4>
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 80052b0:	f8db 2000 	ldr.w	r2, [fp]
 80052b4:	7813      	ldrb	r3, [r2, #0]
 80052b6:	2be5      	cmp	r3, #229	; 0xe5
 80052b8:	d069      	beq.n	800538e <_fx_directory_free_search+0x202>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d16f      	bne.n	800539e <_fx_directory_free_search+0x212>
            if (total_entries > 1)
 80052be:	9b05      	ldr	r3, [sp, #20]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f040 80a6 	bne.w	8005412 <_fx_directory_free_search+0x286>
 80052c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052c8:	1c53      	adds	r3, r2, #1
            if (free_entry_start == directory_entries)
 80052ca:	45c1      	cmp	r9, r8
 80052cc:	d06b      	beq.n	80053a6 <_fx_directory_free_search+0x21a>
 80052ce:	eba3 0208 	sub.w	r2, r3, r8
            if ((directory_index - free_entry_start + 1) >= total_entries)
 80052d2:	9905      	ldr	r1, [sp, #20]
 80052d4:	4291      	cmp	r1, r2
 80052d6:	f240 814f 	bls.w	8005578 <_fx_directory_free_search+0x3ec>
        if (directory_index >= directory_entries)
 80052da:	4599      	cmp	r9, r3
        directory_index++;
 80052dc:	9313      	str	r3, [sp, #76]	; 0x4c
        if (directory_index >= directory_entries)
 80052de:	d8dd      	bhi.n	800529c <_fx_directory_free_search+0x110>
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80052e0:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80052e4:	9c07      	ldr	r4, [sp, #28]
 80052e6:	1e4b      	subs	r3, r1, #1
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80052e8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80052ec:	4423      	add	r3, r4
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80052ee:	1e50      	subs	r0, r2, #1
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80052f0:	fbb3 f3f1 	udiv	r3, r3, r1
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80052f4:	4403      	add	r3, r0
 80052f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80052fa:	9306      	str	r3, [sp, #24]
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d05a      	beq.n	80053b8 <_fx_directory_free_search+0x22c>
 8005302:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 8005306:	9a06      	ldr	r2, [sp, #24]
 8005308:	4293      	cmp	r3, r2
 800530a:	d85e      	bhi.n	80053ca <_fx_directory_free_search+0x23e>
            }
        }
    } while (directory_index < directory_entries);

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800530c:	230a      	movs	r3, #10
}
 800530e:	4618      	mov	r0, r3
 8005310:	b015      	add	sp, #84	; 0x54
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 8005316:	2d0c      	cmp	r5, #12
 8005318:	d893      	bhi.n	8005242 <_fx_directory_free_search+0xb6>
 800531a:	6953      	ldr	r3, [r2, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d190      	bne.n	8005242 <_fx_directory_free_search+0xb6>
        if ((j >= 9) || ((i - j) >= 9))
 8005320:	f1bc 0f08 	cmp.w	ip, #8
 8005324:	f240 811e 	bls.w	8005564 <_fx_directory_free_search+0x3d8>
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8005328:	2301      	movs	r3, #1
 800532a:	2440      	movs	r4, #64	; 0x40
 800532c:	6153      	str	r3, [r2, #20]
    if (directory_ptr -> fx_dir_entry_name[0])
 800532e:	680b      	ldr	r3, [r1, #0]
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8005330:	9407      	str	r4, [sp, #28]
            total_entries = 2;
 8005332:	2402      	movs	r4, #2
    if (directory_ptr -> fx_dir_entry_name[0])
 8005334:	781b      	ldrb	r3, [r3, #0]
            total_entries = 2;
 8005336:	9405      	str	r4, [sp, #20]
    if (directory_ptr -> fx_dir_entry_name[0])
 8005338:	2b00      	cmp	r3, #0
 800533a:	d095      	beq.n	8005268 <_fx_directory_free_search+0xdc>
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800533c:	2400      	movs	r4, #0
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800533e:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8005340:	9104      	str	r1, [sp, #16]
        directory_index =  2;
 8005342:	2302      	movs	r3, #2
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8005344:	650c      	str	r4, [r1, #80]	; 0x50
 8005346:	e791      	b.n	800526c <_fx_directory_free_search+0xe0>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8005348:	fa2e f606 	lsr.w	r6, lr, r6
 800534c:	f006 0601 	and.w	r6, r6, #1
 8005350:	ea49 0906 	orr.w	r9, r9, r6
 8005354:	e75d      	b.n	8005212 <_fx_directory_free_search+0x86>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8005356:	f1a3 092b 	sub.w	r9, r3, #43	; 0x2b
 800535a:	fa5f f989 	uxtb.w	r9, r9
 800535e:	f1b9 0f12 	cmp.w	r9, #18
 8005362:	d803      	bhi.n	800536c <_fx_directory_free_search+0x1e0>
 8005364:	fa28 f909 	lsr.w	r9, r8, r9
 8005368:	f009 0601 	and.w	r6, r9, #1
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800536c:	2b5d      	cmp	r3, #93	; 0x5d
 800536e:	bf18      	it	ne
 8005370:	2b5b      	cmpne	r3, #91	; 0x5b
 8005372:	d001      	beq.n	8005378 <_fx_directory_free_search+0x1ec>
 8005374:	2e00      	cmp	r6, #0
 8005376:	d063      	beq.n	8005440 <_fx_directory_free_search+0x2b4>
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8005378:	6157      	str	r7, [r2, #20]
 800537a:	e754      	b.n	8005226 <_fx_directory_free_search+0x9a>
            if (j == 0)
 800537c:	f1bc 0f00 	cmp.w	ip, #0
 8005380:	d1fa      	bne.n	8005378 <_fx_directory_free_search+0x1ec>
                if (i == 0)
 8005382:	2d00      	cmp	r5, #0
 8005384:	f040 80a5 	bne.w	80054d2 <_fx_directory_free_search+0x346>
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8005388:	6157      	str	r7, [r2, #20]
 800538a:	46ac      	mov	ip, r5
 800538c:	e74b      	b.n	8005226 <_fx_directory_free_search+0x9a>
 800538e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8005390:	f89b 1004 	ldrb.w	r1, [fp, #4]
 8005394:	1c53      	adds	r3, r2, #1
 8005396:	2900      	cmp	r1, #0
 8005398:	d097      	beq.n	80052ca <_fx_directory_free_search+0x13e>
 800539a:	46c8      	mov	r8, r9
 800539c:	e79d      	b.n	80052da <_fx_directory_free_search+0x14e>
 800539e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053a0:	46c8      	mov	r8, r9
 80053a2:	3301      	adds	r3, #1
 80053a4:	e799      	b.n	80052da <_fx_directory_free_search+0x14e>
                free_entry_start =  directory_index;
 80053a6:	4690      	mov	r8, r2
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80053a8:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 80053ac:	9208      	str	r2, [sp, #32]
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 80053ae:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 80053b2:	9209      	str	r2, [sp, #36]	; 0x24
 80053b4:	2201      	movs	r2, #1
 80053b6:	e78c      	b.n	80052d2 <_fx_directory_free_search+0x146>
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 80053b8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0a5      	beq.n	800530c <_fx_directory_free_search+0x180>
 80053c0:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 80053c4:	9a06      	ldr	r2, [sp, #24]
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d9a0      	bls.n	800530c <_fx_directory_free_search+0x180>
                total_clusters =     media_ptr -> fx_media_total_clusters;
 80053ca:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
                while (clusters)
 80053ce:	4613      	mov	r3, r2
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 80053d0:	f8da 6080 	ldr.w	r6, [sl, #128]	; 0x80
                while (clusters)
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	f000 80f1 	beq.w	80055bc <_fx_directory_free_search+0x430>
                last_cluster =       0;
 80053da:	2200      	movs	r2, #0
                while (clusters)
 80053dc:	930c      	str	r3, [sp, #48]	; 0x30
 80053de:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
                last_cluster =       0;
 80053e2:	920a      	str	r2, [sp, #40]	; 0x28
                first_new_cluster =  0;
 80053e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80053e6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
                        if (!total_clusters)
 80053ea:	2d00      	cmp	r5, #0
 80053ec:	d08e      	beq.n	800530c <_fx_directory_free_search+0x180>
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 80053ee:	aa12      	add	r2, sp, #72	; 0x48
 80053f0:	4631      	mov	r1, r6
 80053f2:	4650      	mov	r0, sl
                        total_clusters--;
 80053f4:	3d01      	subs	r5, #1
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 80053f6:	f7fd fea5 	bl	8003144 <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 80053fa:	b9c0      	cbnz	r0, 800542e <_fx_directory_free_search+0x2a2>
 80053fc:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8005400:	1c72      	adds	r2, r6, #1
                        if (FAT_value == FX_FREE_CLUSTER)
 8005402:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005404:	3302      	adds	r3, #2
 8005406:	b1e9      	cbz	r1, 8005444 <_fx_directory_free_search+0x2b8>
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8005408:	4293      	cmp	r3, r2
 800540a:	bf8c      	ite	hi
 800540c:	4616      	movhi	r6, r2
 800540e:	2602      	movls	r6, #2
 8005410:	e7eb      	b.n	80053ea <_fx_directory_free_search+0x25e>
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 8005412:	23e5      	movs	r3, #229	; 0xe5
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8005414:	f8cb 4014 	str.w	r4, [fp, #20]
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8005418:	4659      	mov	r1, fp
 800541a:	4650      	mov	r0, sl
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800541c:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800541e:	f8db 3000 	ldr.w	r3, [fp]
 8005422:	705c      	strb	r4, [r3, #1]
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8005424:	f7ff f834 	bl	8004490 <_fx_directory_entry_write>
                    if(status != FX_SUCCESS)
 8005428:	2800      	cmp	r0, #0
 800542a:	f43f af4c 	beq.w	80052c6 <_fx_directory_free_search+0x13a>
 800542e:	4603      	mov	r3, r0
}
 8005430:	4618      	mov	r0, r3
 8005432:	b015      	add	sp, #84	; 0x54
 8005434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 8005438:	7865      	ldrb	r5, [r4, #1]
 800543a:	2d2e      	cmp	r5, #46	; 0x2e
 800543c:	f47f aeb8 	bne.w	80051b0 <_fx_directory_free_search+0x24>
            return(FX_INVALID_NAME);
 8005440:	230c      	movs	r3, #12
 8005442:	e764      	b.n	800530e <_fx_directory_free_search+0x182>
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8005444:	4293      	cmp	r3, r2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 8005446:	f8da 8054 	ldr.w	r8, [sl, #84]	; 0x54
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800544a:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800544e:	f1a6 0902 	sub.w	r9, r6, #2
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8005452:	bf98      	it	ls
 8005454:	2202      	movls	r2, #2
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005456:	f8da 1008 	ldr.w	r1, [sl, #8]
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800545a:	fb08 3909 	mla	r9, r8, r9, r3
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800545e:	2401      	movs	r4, #1
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8005460:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005464:	2203      	movs	r2, #3
 8005466:	2300      	movs	r3, #0
 8005468:	4650      	mov	r0, sl
 800546a:	9202      	str	r2, [sp, #8]
 800546c:	464a      	mov	r2, r9
 800546e:	e9cd 1400 	strd	r1, r4, [sp]
 8005472:	f7fe fd6b 	bl	8003f4c <_fx_utility_logical_sector_read>
                    if (status != FX_SUCCESS)
 8005476:	2800      	cmp	r0, #0
 8005478:	d1d9      	bne.n	800542e <_fx_directory_free_search+0x2a2>
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800547a:	f8da 4028 	ldr.w	r4, [sl, #40]	; 0x28
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800547e:	f8da 1008 	ldr.w	r1, [sl, #8]
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8005482:	b12c      	cbz	r4, 8005490 <_fx_directory_free_search+0x304>
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8005484:	460b      	mov	r3, r1
                        *((ULONG *)work_ptr) =  (ULONG)0;
 8005486:	f843 0b04 	str.w	r0, [r3], #4
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800548a:	1a5a      	subs	r2, r3, r1
 800548c:	4294      	cmp	r4, r2
 800548e:	d8fa      	bhi.n	8005486 <_fx_directory_free_search+0x2fa>
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8005490:	2303      	movs	r3, #3
 8005492:	2401      	movs	r4, #1
 8005494:	9100      	str	r1, [sp, #0]
 8005496:	464a      	mov	r2, r9
 8005498:	9302      	str	r3, [sp, #8]
 800549a:	4650      	mov	r0, sl
 800549c:	9401      	str	r4, [sp, #4]
 800549e:	2300      	movs	r3, #0
 80054a0:	f7fe ff02 	bl	80042a8 <_fx_utility_logical_sector_write>
                    if (status != FX_SUCCESS)
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d1c2      	bne.n	800542e <_fx_directory_free_search+0x2a2>
                    if (sectors > 1)
 80054a8:	45a0      	cmp	r8, r4
 80054aa:	d81b      	bhi.n	80054e4 <_fx_directory_free_search+0x358>
 80054ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ae:	461a      	mov	r2, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf08      	it	eq
 80054b4:	4632      	moveq	r2, r6
                    if (last_cluster)
 80054b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d147      	bne.n	800554e <_fx_directory_free_search+0x3c2>
                while (clusters)
 80054be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80054c0:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
                while (clusters)
 80054c4:	3a01      	subs	r2, #1
 80054c6:	960a      	str	r6, [sp, #40]	; 0x28
 80054c8:	920c      	str	r2, [sp, #48]	; 0x30
 80054ca:	f000 80d2 	beq.w	8005672 <_fx_directory_free_search+0x4e6>
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80054ce:	461e      	mov	r6, r3
 80054d0:	e78b      	b.n	80053ea <_fx_directory_free_search+0x25e>
 80054d2:	46ac      	mov	ip, r5
 80054d4:	e6a7      	b.n	8005226 <_fx_directory_free_search+0x9a>
 80054d6:	bf00      	nop
 80054d8:	4ec4ec4f 	.word	0x4ec4ec4f
 80054dc:	00050003 	.word	0x00050003
 80054e0:	800011fd 	.word	0x800011fd
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 80054e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80054e8:	9001      	str	r0, [sp, #4]
 80054ea:	4603      	mov	r3, r0
 80054ec:	9402      	str	r4, [sp, #8]
 80054ee:	f8cd 8000 	str.w	r8, [sp]
 80054f2:	eb09 0204 	add.w	r2, r9, r4
 80054f6:	4650      	mov	r0, sl
 80054f8:	f7fe fa04 	bl	8003904 <_fx_utility_logical_sector_flush>
                        if (status != FX_SUCCESS)
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d196      	bne.n	800542e <_fx_directory_free_search+0x2a2>
                            media_ptr -> fx_media_driver_write_requests++;
 8005500:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005504:	2090      	movs	r0, #144	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8005506:	eb09 0108 	add.w	r1, r9, r8
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800550a:	f8da 2008 	ldr.w	r2, [sl, #8]
                            media_ptr -> fx_media_driver_write_requests++;
 800550e:	3301      	adds	r3, #1
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005510:	f8ca 008c 	str.w	r0, [sl, #140]	; 0x8c
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8005514:	2003      	movs	r0, #3
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005516:	f8ca 4088 	str.w	r4, [sl, #136]	; 0x88
                            media_ptr -> fx_media_driver_write_requests++;
 800551a:	f8ca 31b0 	str.w	r3, [sl, #432]	; 0x1b0
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800551e:	f8ca 00b8 	str.w	r0, [sl, #184]	; 0xb8
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005522:	4650      	mov	r0, sl
 8005524:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
                            media_ptr -> fx_media_driver_sectors =          1;
 8005528:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800552c:	f8ca 40b0 	str.w	r4, [sl, #176]	; 0xb0
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8005530:	e9ca 2124 	strd	r2, r1, [sl, #144]	; 0x90
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005534:	4798      	blx	r3
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005536:	2300      	movs	r3, #0
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8005538:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800553c:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8005540:	2800      	cmp	r0, #0
 8005542:	f47f af74 	bne.w	800542e <_fx_directory_free_search+0x2a2>
                        while (sectors)
 8005546:	f1b8 0801 	subs.w	r8, r8, #1
 800554a:	d1d9      	bne.n	8005500 <_fx_directory_free_search+0x374>
 800554c:	e7ae      	b.n	80054ac <_fx_directory_free_search+0x320>
 800554e:	4619      	mov	r1, r3
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8005550:	4632      	mov	r2, r6
 8005552:	4650      	mov	r0, sl
 8005554:	f7fd ff56 	bl	8003404 <_fx_utility_FAT_entry_write>
                        if (status !=  FX_SUCCESS)
 8005558:	2800      	cmp	r0, #0
 800555a:	d0b0      	beq.n	80054be <_fx_directory_free_search+0x332>
 800555c:	4603      	mov	r3, r0
 800555e:	e767      	b.n	8005430 <_fx_directory_free_search+0x2a4>
 8005560:	4623      	mov	r3, r4
 8005562:	e6d4      	b.n	800530e <_fx_directory_free_search+0x182>
        if ((j >= 9) || ((i - j) >= 9))
 8005564:	eba5 050c 	sub.w	r5, r5, ip
 8005568:	2d08      	cmp	r5, #8
 800556a:	f63f aedd 	bhi.w	8005328 <_fx_directory_free_search+0x19c>
 800556e:	2320      	movs	r3, #32
 8005570:	9307      	str	r3, [sp, #28]
        total_entries = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	e673      	b.n	8005260 <_fx_directory_free_search+0xd4>
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8005578:	9908      	ldr	r1, [sp, #32]
 800557a:	2200      	movs	r2, #0
 800557c:	4623      	mov	r3, r4
 800557e:	f8cb 1040 	str.w	r1, [fp, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8005582:	9909      	ldr	r1, [sp, #36]	; 0x24
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8005584:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8005588:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
                entry_ptr -> fx_dir_entry_reserved =            0;
 800558c:	f88b 201d 	strb.w	r2, [fp, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 8005590:	f88b 201e 	strb.w	r2, [fp, #30]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005594:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005598:	b672      	cpsid	i
                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800559a:	4c3e      	ldr	r4, [pc, #248]	; (8005694 <_fx_directory_free_search+0x508>)
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800559c:	493e      	ldr	r1, [pc, #248]	; (8005698 <_fx_directory_free_search+0x50c>)
                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800559e:	6824      	ldr	r4, [r4, #0]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 80055a0:	6809      	ldr	r1, [r1, #0]
 80055a2:	e9cb 4108 	strd	r4, r1, [fp, #32]
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 80055a6:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80055aa:	f380 8810 	msr	PRIMASK, r0
                if (total_entries == 1)
 80055ae:	9905      	ldr	r1, [sp, #20]
 80055b0:	2901      	cmp	r1, #1
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 80055b2:	bf18      	it	ne
 80055b4:	2201      	movne	r2, #1
 80055b6:	f8cb 2014 	str.w	r2, [fp, #20]
 80055ba:	e6a8      	b.n	800530e <_fx_directory_free_search+0x182>
                last_cluster =       0;
 80055bc:	4616      	mov	r6, r2
                first_new_cluster =  0;
 80055be:	920b      	str	r2, [sp, #44]	; 0x2c
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80055c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055c2:	4631      	mov	r1, r6
 80055c4:	4650      	mov	r0, sl
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	f7fd ff1c 	bl	8003404 <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 80055cc:	4604      	mov	r4, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d1c6      	bne.n	8005560 <_fx_directory_free_search+0x3d4>
                if (search_dir_ptr)
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d051      	beq.n	800567c <_fx_directory_free_search+0x4f0>
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 80055d8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                first_new_cluster =  0;
 80055da:	f04f 0c00 	mov.w	ip, #0
 80055de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055e0:	4666      	mov	r6, ip
 80055e2:	e00f      	b.n	8005604 <_fx_directory_free_search+0x478>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 80055e4:	f7fd fdae 	bl	8003144 <_fx_utility_FAT_entry_read>
 80055e8:	46ac      	mov	ip, r5
                    if (status != FX_SUCCESS)
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f47f af1f 	bne.w	800542e <_fx_directory_free_search+0x2a2>
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 80055f0:	2d01      	cmp	r5, #1
 80055f2:	d93c      	bls.n	800566e <_fx_directory_free_search+0x4e2>
 80055f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055f6:	42ab      	cmp	r3, r5
 80055f8:	461d      	mov	r5, r3
 80055fa:	d038      	beq.n	800566e <_fx_directory_free_search+0x4e2>
 80055fc:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8005600:	42b3      	cmp	r3, r6
 8005602:	d334      	bcc.n	800566e <_fx_directory_free_search+0x4e2>
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8005604:	6823      	ldr	r3, [r4, #0]
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 8005606:	4629      	mov	r1, r5
 8005608:	aa12      	add	r2, sp, #72	; 0x48
 800560a:	4650      	mov	r0, sl
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800560c:	42ab      	cmp	r3, r5
                    i++;
 800560e:	f106 0601 	add.w	r6, r6, #1
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8005612:	d8e7      	bhi.n	80055e4 <_fx_directory_free_search+0x458>
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8005614:	f8da 207c 	ldr.w	r2, [sl, #124]	; 0x7c
 8005618:	9c06      	ldr	r4, [sp, #24]
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800561a:	f8db 0000 	ldr.w	r0, [fp]
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800561e:	1b12      	subs	r2, r2, r4
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8005620:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 8005624:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8005628:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800562c:	fb03 f301 	mul.w	r3, r3, r1
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8005630:	7802      	ldrb	r2, [r0, #0]
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8005632:	fb04 f303 	mul.w	r3, r4, r3
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8005636:	2ae5      	cmp	r2, #229	; 0xe5
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8005638:	eb09 1953 	add.w	r9, r9, r3, lsr #5
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800563c:	d021      	beq.n	8005682 <_fx_directory_free_search+0x4f6>
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800563e:	46c8      	mov	r8, r9
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8005640:	2200      	movs	r2, #0
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 8005642:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8005646:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005648:	e9c1 920e 	strd	r9, r2, [r1, #56]	; 0x38
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800564c:	b10b      	cbz	r3, 8005652 <_fx_directory_free_search+0x4c6>
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	b1eb      	cbz	r3, 800568e <_fx_directory_free_search+0x502>
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 8005652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005654:	4661      	mov	r1, ip
 8005656:	4650      	mov	r0, sl
 8005658:	f7fd fed4 	bl	8003404 <_fx_utility_FAT_entry_write>
                if (status != FX_SUCCESS)
 800565c:	4604      	mov	r4, r0
 800565e:	2800      	cmp	r0, #0
 8005660:	f47f af7e 	bne.w	8005560 <_fx_directory_free_search+0x3d4>
    } while (directory_index < directory_entries);
 8005664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005666:	454b      	cmp	r3, r9
 8005668:	f4ff ae18 	bcc.w	800529c <_fx_directory_free_search+0x110>
 800566c:	e64e      	b.n	800530c <_fx_directory_free_search+0x180>
                        return(FX_FAT_READ_ERROR);
 800566e:	2303      	movs	r3, #3
 8005670:	e64d      	b.n	800530e <_fx_directory_free_search+0x182>
 8005672:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005676:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800567a:	e7a1      	b.n	80055c0 <_fx_directory_free_search+0x434>
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800567c:	f8da 5074 	ldr.w	r5, [sl, #116]	; 0x74
 8005680:	e7ab      	b.n	80055da <_fx_directory_free_search+0x44e>
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8005682:	f89b 3004 	ldrb.w	r3, [fp, #4]
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf18      	it	ne
 800568a:	46c8      	movne	r8, r9
 800568c:	e7d8      	b.n	8005640 <_fx_directory_free_search+0x4b4>
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800568e:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
 8005692:	e7de      	b.n	8005652 <_fx_directory_free_search+0x4c6>
 8005694:	20003a2c 	.word	0x20003a2c
 8005698:	20003a14 	.word	0x20003a14

0800569c <_fx_directory_name_extract>:

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800569c:	2300      	movs	r3, #0
{
 800569e:	b4f0      	push	{r4, r5, r6, r7}
    dest_ptr[0] = 0;
 80056a0:	700b      	strb	r3, [r1, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 80056a2:	7803      	ldrb	r3, [r0, #0]
 80056a4:	2b5c      	cmp	r3, #92	; 0x5c
 80056a6:	d03b      	beq.n	8005720 <_fx_directory_name_extract+0x84>
 80056a8:	2b2f      	cmp	r3, #47	; 0x2f
 80056aa:	d102      	bne.n	80056b2 <_fx_directory_name_extract+0x16>
 80056ac:	e038      	b.n	8005720 <_fx_directory_name_extract+0x84>
        /* Advance the string pointer.  */
        source_ptr++;
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 80056ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d0fb      	beq.n	80056ae <_fx_directory_name_extract+0x12>
        source_ptr++;
    }

    /* Loop to extract the name.  */
    i = 0;
    while (*source_ptr)
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d039      	beq.n	800572e <_fx_directory_name_extract+0x92>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 80056ba:	2b5c      	cmp	r3, #92	; 0x5c
 80056bc:	d039      	beq.n	8005732 <_fx_directory_name_extract+0x96>
 80056be:	f1a3 022f 	sub.w	r2, r3, #47	; 0x2f
 80056c2:	fab2 f282 	clz	r2, r2
 80056c6:	0952      	lsrs	r2, r2, #5
 80056c8:	bb9a      	cbnz	r2, 8005732 <_fx_directory_name_extract+0x96>
 80056ca:	1e4d      	subs	r5, r1, #1
 80056cc:	e00b      	b.n	80056e6 <_fx_directory_name_extract+0x4a>
 80056ce:	2b5c      	cmp	r3, #92	; 0x5c
 80056d0:	d010      	beq.n	80056f4 <_fx_directory_name_extract+0x58>
 80056d2:	f1a3 072f 	sub.w	r7, r3, #47	; 0x2f
 80056d6:	fab7 f787 	clz	r7, r7
 80056da:	097f      	lsrs	r7, r7, #5
 80056dc:	b957      	cbnz	r7, 80056f4 <_fx_directory_name_extract+0x58>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 80056de:	2eff      	cmp	r6, #255	; 0xff
 80056e0:	4632      	mov	r2, r6
 80056e2:	d020      	beq.n	8005726 <_fx_directory_name_extract+0x8a>
 80056e4:	4620      	mov	r0, r4
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 80056e6:	f805 3f01 	strb.w	r3, [r5, #1]!
 80056ea:	1c44      	adds	r4, r0, #1
    while (*source_ptr)
 80056ec:	7843      	ldrb	r3, [r0, #1]

        /* Increment the character counter.  */
        i++;
 80056ee:	1c56      	adds	r6, r2, #1
    while (*source_ptr)
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ec      	bne.n	80056ce <_fx_directory_name_extract+0x32>
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	558b      	strb	r3, [r1, r6]
        /* Yes, we can move backwards.  */
        i--;
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 80056f8:	5c8d      	ldrb	r5, [r1, r2]
 80056fa:	188b      	adds	r3, r1, r2
 80056fc:	2d20      	cmp	r5, #32
 80056fe:	d108      	bne.n	8005712 <_fx_directory_name_extract+0x76>
 8005700:	3a01      	subs	r2, #1
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 8005702:	2500      	movs	r5, #0
 8005704:	4411      	add	r1, r2
 8005706:	701d      	strb	r5, [r3, #0]
    while (dest_ptr[i] == ' ')
 8005708:	460b      	mov	r3, r1
 800570a:	3901      	subs	r1, #1
 800570c:	781a      	ldrb	r2, [r3, #0]
 800570e:	2a20      	cmp	r2, #32
 8005710:	d0f9      	beq.n	8005706 <_fx_directory_name_extract+0x6a>
 8005712:	7843      	ldrb	r3, [r0, #1]
    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf08      	it	eq
 8005718:	2400      	moveq	r4, #0
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
}
 800571a:	4620      	mov	r0, r4
 800571c:	bcf0      	pop	{r4, r5, r6, r7}
 800571e:	4770      	bx	lr
 8005720:	7843      	ldrb	r3, [r0, #1]
        source_ptr++;
 8005722:	3001      	adds	r0, #1
 8005724:	e7c5      	b.n	80056b2 <_fx_directory_name_extract+0x16>
    dest_ptr[i] =  0;
 8005726:	f881 70ff 	strb.w	r7, [r1, #255]	; 0xff
 800572a:	22fe      	movs	r2, #254	; 0xfe
 800572c:	e7e4      	b.n	80056f8 <_fx_directory_name_extract+0x5c>
        source_ptr = FX_NULL;
 800572e:	461c      	mov	r4, r3
 8005730:	e7f3      	b.n	800571a <_fx_directory_name_extract+0x7e>
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8005732:	4604      	mov	r4, r0
 8005734:	e7f1      	b.n	800571a <_fx_directory_name_extract+0x7e>
 8005736:	bf00      	nop

08005738 <_fx_directory_search>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	4607      	mov	r7, r0
 800573e:	b0ab      	sub	sp, #172	; 0xac

ULONG         i, n;
UINT          found;
UINT          status;
UINT          v, j;
ULONG         cluster, next_cluster = 0;
 8005740:	2000      	movs	r0, #0
{
 8005742:	9208      	str	r2, [sp, #32]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 8005744:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
{
 8005748:	9107      	str	r1, [sp, #28]
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800574a:	f607 019c 	addw	r1, r7, #2204	; 0x89c
    media_ptr -> fx_media_directory_searches++;
 800574e:	3201      	adds	r2, #1
ULONG         cluster, next_cluster = 0;
 8005750:	900d      	str	r0, [sp, #52]	; 0x34
    name =  media_ptr -> fx_media_name_buffer;
 8005752:	9103      	str	r1, [sp, #12]

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 8005754:	930a      	str	r3, [sp, #40]	; 0x28
    media_ptr -> fx_media_directory_searches++;
 8005756:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
    if (last_dir_ptr)
 800575a:	b10b      	cbz	r3, 8005760 <_fx_directory_search+0x28>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	7018      	strb	r0, [r3, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	f897 53e0 	ldrb.w	r5, [r7, #992]	; 0x3e0
 8005766:	781c      	ldrb	r4, [r3, #0]
 8005768:	2c5c      	cmp	r4, #92	; 0x5c
 800576a:	d019      	beq.n	80057a0 <_fx_directory_search+0x68>
 800576c:	2c2f      	cmp	r4, #47	; 0x2f
 800576e:	d017      	beq.n	80057a0 <_fx_directory_search+0x68>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 8005770:	4bad      	ldr	r3, [pc, #692]	; (8005a28 <_fx_directory_search+0x2f0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005778:	2900      	cmp	r1, #0
 800577a:	f000 81f1 	beq.w	8005b60 <_fx_directory_search+0x428>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800577e:	680b      	ldr	r3, [r1, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 81b1 	beq.w	8005aea <_fx_directory_search+0x3b2>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 8005788:	2270      	movs	r2, #112	; 0x70
 800578a:	ae0e      	add	r6, sp, #56	; 0x38

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800578c:	188b      	adds	r3, r1, r2
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800578e:	4630      	mov	r0, r6
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 8005790:	930b      	str	r3, [sp, #44]	; 0x2c
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 8005792:	f005 fe25 	bl	800b3e0 <memcpy>
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8005796:	2d00      	cmp	r5, #0
 8005798:	f040 81fe 	bne.w	8005b98 <_fx_directory_search+0x460>
 800579c:	9601      	str	r6, [sp, #4]
 800579e:	e005      	b.n	80057ac <_fx_directory_search+0x74>
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	f040 8143 	bne.w	8005a2c <_fx_directory_search+0x2f4>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 80057a6:	2300      	movs	r3, #0
 80057a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	f242 42a8 	movw	r2, #9384	; 0x24a8
            return(FX_SUCCESS);
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	9907      	ldr	r1, [sp, #28]
 80057b4:	18ba      	adds	r2, r7, r2
 80057b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057ba:	9106      	str	r1, [sp, #24]
 80057bc:	9209      	str	r2, [sp, #36]	; 0x24
 80057be:	f887 33e0 	strb.w	r3, [r7, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 80057c2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80057c4:	b113      	cbz	r3, 80057cc <_fx_directory_search+0x94>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 80057c6:	461a      	mov	r2, r3
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 80057cc:	9806      	ldr	r0, [sp, #24]
 80057ce:	9903      	ldr	r1, [sp, #12]
 80057d0:	f7ff ff64 	bl	800569c <_fx_directory_name_extract>

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 80057d4:	9a01      	ldr	r2, [sp, #4]
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 80057d6:	9006      	str	r0, [sp, #24]
        if (search_dir_ptr)
 80057d8:	2a00      	cmp	r2, #0
 80057da:	d04f      	beq.n	800587c <_fx_directory_search+0x144>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 80057dc:	2300      	movs	r3, #0

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 80057de:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80057e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 80057e4:	6513      	str	r3, [r2, #80]	; 0x50
                while (cluster < media_ptr -> fx_media_fat_reserved)
 80057e6:	461c      	mov	r4, r3
                i =        0;
 80057e8:	930c      	str	r3, [sp, #48]	; 0x30
                while (cluster < media_ptr -> fx_media_fat_reserved)
 80057ea:	e012      	b.n	8005812 <_fx_directory_search+0xda>
                {

                    /* Increment the cluster count.  */
                    i++;
 80057ec:	950c      	str	r5, [sp, #48]	; 0x30

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80057ee:	f7fd fca9 	bl	8003144 <_fx_utility_FAT_entry_read>

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 80057f2:	2800      	cmp	r0, #0
 80057f4:	f040 81af 	bne.w	8005b56 <_fx_directory_search+0x41e>
                        /* Return the bad status.  */
                        return(status);
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 80057f8:	2e01      	cmp	r6, #1
 80057fa:	f240 81a7 	bls.w	8005b4c <_fx_directory_search+0x414>
 80057fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005800:	42b3      	cmp	r3, r6
 8005802:	461e      	mov	r6, r3
 8005804:	f000 81a2 	beq.w	8005b4c <_fx_directory_search+0x414>
 8005808:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800580a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580c:	42a3      	cmp	r3, r4
 800580e:	f0c0 819d 	bcc.w	8005b4c <_fx_directory_search+0x414>
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8005812:	f8d9 3000 	ldr.w	r3, [r9]
                    i++;
 8005816:	1c65      	adds	r5, r4, #1
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8005818:	4631      	mov	r1, r6
 800581a:	aa0d      	add	r2, sp, #52	; 0x34
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800581c:	42b3      	cmp	r3, r6
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800581e:	4638      	mov	r0, r7
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8005820:	d8e4      	bhi.n	80057ec <_fx_directory_search+0xb4>

                    cluster = next_cluster;
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8005826:	9e01      	ldr	r6, [sp, #4]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8005828:	fba0 0103 	umull	r0, r1, r0, r3
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800582c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800582e:	fba0 2304 	umull	r2, r3, r0, r4
            if (last_dir_ptr)
 8005832:	4628      	mov	r0, r5
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8005834:	fb04 3301 	mla	r3, r4, r1, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8005838:	0951      	lsrs	r1, r2, #5
 800583a:	ea41 61c3 	orr.w	r1, r1, r3, lsl #27
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	9104      	str	r1, [sp, #16]
 8005842:	9305      	str	r3, [sp, #20]
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8005844:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8005848:	e9c6 120e 	strd	r1, r2, [r6, #56]	; 0x38
            if (last_dir_ptr)
 800584c:	b1dd      	cbz	r5, 8005886 <_fx_directory_search+0x14e>

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800584e:	2270      	movs	r2, #112	; 0x70
 8005850:	4631      	mov	r1, r6
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8005852:	682c      	ldr	r4, [r5, #0]
                *last_dir_ptr =  *search_dir_ptr;
 8005854:	f005 fdc4 	bl	800b3e0 <memcpy>
 8005858:	6833      	ldr	r3, [r6, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800585a:	2200      	movs	r2, #0
 800585c:	1e61      	subs	r1, r4, #1
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800585e:	602c      	str	r4, [r5, #0]
 8005860:	3b01      	subs	r3, #1
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 8005862:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005866:	f801 0f01 	strb.w	r0, [r1, #1]!

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800586a:	7818      	ldrb	r0, [r3, #0]
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800586c:	b908      	cbnz	r0, 8005872 <_fx_directory_search+0x13a>
 800586e:	2aff      	cmp	r2, #255	; 0xff
 8005870:	d109      	bne.n	8005886 <_fx_directory_search+0x14e>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8005872:	3201      	adds	r2, #1
 8005874:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005878:	d1f3      	bne.n	8005862 <_fx_directory_search+0x12a>
 800587a:	e004      	b.n	8005886 <_fx_directory_search+0x14e>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	2200      	movs	r2, #0
 8005880:	4619      	mov	r1, r3
 8005882:	e9cd 1204 	strd	r1, r2, [sp, #16]
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 8005886:	aa2a      	add	r2, sp, #168	; 0xa8
 8005888:	2300      	movs	r3, #0
 800588a:	f842 3d78 	str.w	r3, [r2, #-120]!
 800588e:	9202      	str	r2, [sp, #8]

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 8005890:	4643      	mov	r3, r8
 8005892:	9a02      	ldr	r2, [sp, #8]
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	4638      	mov	r0, r7
 8005898:	f000 fda0 	bl	80063dc <_fx_directory_entry_read>
#endif /* FX_ENABLE_EXFAT */

            i++;
 800589c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800589e:	3501      	adds	r5, #1
 80058a0:	950c      	str	r5, [sp, #48]	; 0x30

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f040 8157 	bne.w	8005b56 <_fx_directory_search+0x41e>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 80058a8:	f8d8 4000 	ldr.w	r4, [r8]
 80058ac:	7823      	ldrb	r3, [r4, #0]
 80058ae:	b373      	cbz	r3, 800590e <_fx_directory_search+0x1d6>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 80058b0:	2be5      	cmp	r3, #229	; 0xe5
 80058b2:	d102      	bne.n	80058ba <_fx_directory_search+0x182>
 80058b4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80058b8:	b313      	cbz	r3, 8005900 <_fx_directory_search+0x1c8>
 80058ba:	9e03      	ldr	r6, [sp, #12]
 80058bc:	46b2      	mov	sl, r6
 80058be:	e002      	b.n	80058c6 <_fx_directory_search+0x18e>
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
                dir_name_ptr++;
            } while (*dir_name_ptr);
 80058c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80058c4:	b343      	cbz	r3, 8005918 <_fx_directory_search+0x1e0>
                alpha =  *dir_name_ptr;
 80058c6:	7822      	ldrb	r2, [r4, #0]
 80058c8:	46b3      	mov	fp, r6
                name_alpha =  *work_ptr;
 80058ca:	f816 3b01 	ldrb.w	r3, [r6], #1
                if ((alpha >= 'a') && (alpha <= 'z'))
 80058ce:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
                    alpha =  (CHAR)((INT)alpha - 0x20);
 80058d2:	f1a2 0c20 	sub.w	ip, r2, #32
 80058d6:	4696      	mov	lr, r2
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80058d8:	f1a3 0920 	sub.w	r9, r3, #32
                if ((alpha >= 'a') && (alpha <= 'z'))
 80058dc:	2919      	cmp	r1, #25
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80058de:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
                    alpha =  (CHAR)((INT)alpha - 0x20);
 80058e2:	bf98      	it	ls
 80058e4:	fa5f fe8c 	uxtbls.w	lr, ip
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80058e8:	2919      	cmp	r1, #25
 80058ea:	469c      	mov	ip, r3
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80058ec:	bf98      	it	ls
 80058ee:	fa5f fc89 	uxtbls.w	ip, r9
                if (alpha != name_alpha)
 80058f2:	45e6      	cmp	lr, ip
 80058f4:	d0e4      	beq.n	80058c0 <_fx_directory_search+0x188>

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 80058f6:	b18a      	cbz	r2, 800591c <_fx_directory_search+0x1e4>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 80058f8:	f898 3004 	ldrb.w	r3, [r8, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d141      	bne.n	8005984 <_fx_directory_search+0x24c>
                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
                }
            }
        } while ((i < directory_size) && (!found));
 8005900:	2300      	movs	r3, #0
 8005902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005906:	428b      	cmp	r3, r1
 8005908:	bf08      	it	eq
 800590a:	4285      	cmpeq	r5, r0
 800590c:	d3c0      	bcc.n	8005890 <_fx_directory_search+0x158>
        /* Now determine if we have a match.  */
        if (!found)
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800590e:	2504      	movs	r5, #4
        }
    }
#endif

    return(FX_SUCCESS);
}
 8005910:	4628      	mov	r0, r5
 8005912:	b02b      	add	sp, #172	; 0xac
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	f89b 3001 	ldrb.w	r3, [fp, #1]
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1eb      	bne.n	80058f8 <_fx_directory_search+0x1c0>
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 8005920:	f898 301c 	ldrb.w	r3, [r8, #28]
 8005924:	4605      	mov	r5, r0
 8005926:	06db      	lsls	r3, r3, #27
 8005928:	d44b      	bmi.n	80059c2 <_fx_directory_search+0x28a>
            if (name_ptr)
 800592a:	9b06      	ldr	r3, [sp, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1ee      	bne.n	800590e <_fx_directory_search+0x1d6>
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 8005930:	9b07      	ldr	r3, [sp, #28]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b5c      	cmp	r3, #92	; 0x5c
 8005936:	f000 8176 	beq.w	8005c26 <_fx_directory_search+0x4ee>
 800593a:	2b2f      	cmp	r3, #47	; 0x2f
 800593c:	f000 8173 	beq.w	8005c26 <_fx_directory_search+0x4ee>
 8005940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 81c3 	beq.w	8005cce <_fx_directory_search+0x596>
 8005948:	1e59      	subs	r1, r3, #1
 800594a:	f207 32df 	addw	r2, r7, #991	; 0x3df
    v=  0;
 800594e:	2300      	movs	r3, #0
 8005950:	e005      	b.n	800595e <_fx_directory_search+0x226>
            v++;
 8005952:	3301      	adds	r3, #1
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8005954:	f802 0f01 	strb.w	r0, [r2, #1]!
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8005958:	2bff      	cmp	r3, #255	; 0xff
 800595a:	f000 8165 	beq.w	8005c28 <_fx_directory_search+0x4f0>
 800595e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005962:	2800      	cmp	r0, #0
 8005964:	d1f5      	bne.n	8005952 <_fx_directory_search+0x21a>
    if ((*original_name != '\\') && (*original_name != '/'))
 8005966:	9a07      	ldr	r2, [sp, #28]
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	2a5c      	cmp	r2, #92	; 0x5c
 800596c:	f000 815c 	beq.w	8005c28 <_fx_directory_search+0x4f0>
 8005970:	2a2f      	cmp	r2, #47	; 0x2f
 8005972:	f000 8159 	beq.w	8005c28 <_fx_directory_search+0x4f0>
 8005976:	1c5a      	adds	r2, r3, #1
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 8005978:	18f9      	adds	r1, r7, r3
 800597a:	202f      	movs	r0, #47	; 0x2f
 800597c:	4613      	mov	r3, r2
 800597e:	f881 03e0 	strb.w	r0, [r1, #992]	; 0x3e0
 8005982:	e151      	b.n	8005c28 <_fx_directory_search+0x4f0>
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 8005984:	f108 0204 	add.w	r2, r8, #4
 8005988:	e003      	b.n	8005992 <_fx_directory_search+0x25a>
                } while (*dir_name_ptr);
 800598a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
                    work_ptr++;
 800598e:	4656      	mov	r6, sl
                } while (*dir_name_ptr);
 8005990:	b17b      	cbz	r3, 80059b2 <_fx_directory_search+0x27a>
 8005992:	4656      	mov	r6, sl
                    name_alpha =  *work_ptr;
 8005994:	f81a 3b01 	ldrb.w	r3, [sl], #1
                    alpha =  *dir_name_ptr;
 8005998:	7811      	ldrb	r1, [r2, #0]
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800599a:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800599e:	f1a3 0c20 	sub.w	ip, r3, #32
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80059a2:	2c19      	cmp	r4, #25
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80059a4:	bf98      	it	ls
 80059a6:	fa5f f38c 	uxtbls.w	r3, ip
                    if (alpha != name_alpha)
 80059aa:	428b      	cmp	r3, r1
 80059ac:	d0ed      	beq.n	800598a <_fx_directory_search+0x252>
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 80059ae:	2900      	cmp	r1, #0
 80059b0:	d1a6      	bne.n	8005900 <_fx_directory_search+0x1c8>
 80059b2:	7833      	ldrb	r3, [r6, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1a3      	bne.n	8005900 <_fx_directory_search+0x1c8>
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 80059b8:	f898 301c 	ldrb.w	r3, [r8, #28]
 80059bc:	4605      	mov	r5, r0
 80059be:	06db      	lsls	r3, r3, #27
 80059c0:	d5b3      	bpl.n	800592a <_fx_directory_search+0x1f2>
            search_dir =      *entry_ptr;
 80059c2:	2270      	movs	r2, #112	; 0x70
 80059c4:	4641      	mov	r1, r8
 80059c6:	a80e      	add	r0, sp, #56	; 0x38
 80059c8:	f005 fd0a 	bl	800b3e0 <memcpy>
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 80059cc:	2200      	movs	r2, #0
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 80059ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 80059d0:	9222      	str	r2, [sp, #136]	; 0x88
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 80d4 	bne.w	8005b80 <_fx_directory_search+0x448>
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 80059d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059da:	7013      	strb	r3, [r2, #0]
                if (last_dir_ptr)
 80059dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059de:	b1fb      	cbz	r3, 8005a20 <_fx_directory_search+0x2e8>
                    *last_dir_ptr =  *search_dir_ptr;
 80059e0:	a90e      	add	r1, sp, #56	; 0x38
 80059e2:	2270      	movs	r2, #112	; 0x70
 80059e4:	4618      	mov	r0, r3
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 80059e6:	681c      	ldr	r4, [r3, #0]
 80059e8:	461e      	mov	r6, r3
                    *last_dir_ptr =  *search_dir_ptr;
 80059ea:	f005 fcf9 	bl	800b3e0 <memcpy>
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 80059ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059f0:	1d23      	adds	r3, r4, #4
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80059f2:	6034      	str	r4, [r6, #0]
 80059f4:	1d11      	adds	r1, r2, #4
 80059f6:	428c      	cmp	r4, r1
 80059f8:	bf38      	it	cc
 80059fa:	429a      	cmpcc	r2, r3
 80059fc:	f0c0 8156 	bcc.w	8005cac <_fx_directory_search+0x574>
 8005a00:	ea44 0102 	orr.w	r1, r4, r2
 8005a04:	0789      	lsls	r1, r1, #30
 8005a06:	f040 8151 	bne.w	8005cac <_fx_directory_search+0x574>
 8005a0a:	3a04      	subs	r2, #4
 8005a0c:	f504 7080 	add.w	r0, r4, #256	; 0x100
                        destination_name_ptr[n] =  source_name_ptr[n];
 8005a10:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8005a14:	4298      	cmp	r0, r3
 8005a16:	6021      	str	r1, [r4, #0]
 8005a18:	461c      	mov	r4, r3
 8005a1a:	f103 0304 	add.w	r3, r3, #4
 8005a1e:	d1f7      	bne.n	8005a10 <_fx_directory_search+0x2d8>
                search_dir_ptr =  FX_NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	e0ae      	b.n	8005b84 <_fx_directory_search+0x44c>
 8005a26:	bf00      	nop
 8005a28:	20003bc8 	.word	0x20003bc8
 8005a2c:	9907      	ldr	r1, [sp, #28]
 8005a2e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8005a32:	460b      	mov	r3, r1
 8005a34:	f101 06fe 	add.w	r6, r1, #254	; 0xfe
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8005a38:	b18c      	cbz	r4, 8005a5e <_fx_directory_search+0x326>
                if (alpha == '\\')
 8005a3a:	2c5c      	cmp	r4, #92	; 0x5c
 8005a3c:	f000 8082 	beq.w	8005b44 <_fx_directory_search+0x40c>
                if (beta == '\\')
 8005a40:	2d5c      	cmp	r5, #92	; 0x5c
 8005a42:	4621      	mov	r1, r4
 8005a44:	d04f      	beq.n	8005ae6 <_fx_directory_search+0x3ae>
                    alpha =  '/';
 8005a46:	4628      	mov	r0, r5
                if (alpha != beta)
 8005a48:	4288      	cmp	r0, r1
 8005a4a:	d108      	bne.n	8005a5e <_fx_directory_search+0x326>
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8005a4c:	42b3      	cmp	r3, r6
 8005a4e:	f000 8127 	beq.w	8005ca0 <_fx_directory_search+0x568>
 8005a52:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8005a56:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	d1ed      	bne.n	8005a3a <_fx_directory_search+0x302>
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8005a5e:	42a5      	cmp	r5, r4
 8005a60:	f47f aea1 	bne.w	80057a6 <_fx_directory_search+0x6e>
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 8005a64:	9d08      	ldr	r5, [sp, #32]
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 8005a66:	f507 711c 	add.w	r1, r7, #624	; 0x270
 8005a6a:	2270      	movs	r2, #112	; 0x70
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 8005a6c:	682c      	ldr	r4, [r5, #0]
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f005 fcb6 	bl	800b3e0 <memcpy>
 8005a74:	f207 21df 	addw	r1, r7, #735	; 0x2df
 8005a78:	1e60      	subs	r0, r4, #1
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8005a7a:	2300      	movs	r3, #0
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 8005a7c:	602c      	str	r4, [r5, #0]
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 8005a7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8005a82:	2bff      	cmp	r3, #255	; 0xff
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8005a84:	f103 0301 	add.w	r3, r3, #1
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 8005a88:	f800 2f01 	strb.w	r2, [r0, #1]!
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8005a8c:	d07f      	beq.n	8005b8e <_fx_directory_search+0x456>
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d17d      	bne.n	8005b8e <_fx_directory_search+0x456>
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 8005a92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a94:	b1d6      	cbz	r6, 8005acc <_fx_directory_search+0x394>
 8005a96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005a9a:	b1bb      	cbz	r3, 8005acc <_fx_directory_search+0x394>
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8005a9c:	6835      	ldr	r5, [r6, #0]
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 8005a9e:	2270      	movs	r2, #112	; 0x70
 8005aa0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f005 fc9b 	bl	800b3e0 <memcpy>
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8005aaa:	6035      	str	r5, [r6, #0]
 8005aac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ab0:	1e6a      	subs	r2, r5, #1
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	3b01      	subs	r3, #1
                    destination_name_ptr[n] =  source_name_ptr[n];
 8005ab6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005aba:	f802 0f01 	strb.w	r0, [r2, #1]!
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 8005abe:	7818      	ldrb	r0, [r3, #0]
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	f040 80aa 	bne.w	8005c1a <_fx_directory_search+0x4e2>
 8005ac6:	29ff      	cmp	r1, #255	; 0xff
 8005ac8:	f000 80a7 	beq.w	8005c1a <_fx_directory_search+0x4e2>
            if (last_name_ptr)
 8005acc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8005ace:	b103      	cbz	r3, 8005ad2 <_fx_directory_search+0x39a>
                *last_name_ptr =  temp_ptr;
 8005ad0:	601c      	str	r4, [r3, #0]
            media_ptr -> fx_media_directory_search_cache_hits++;
 8005ad2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
            return(FX_SUCCESS);
 8005ad6:	2500      	movs	r5, #0
            media_ptr -> fx_media_directory_search_cache_hits++;
 8005ad8:	3301      	adds	r3, #1
}
 8005ada:	4628      	mov	r0, r5
            media_ptr -> fx_media_directory_search_cache_hits++;
 8005adc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
}
 8005ae0:	b02b      	add	sp, #172	; 0xac
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    beta =  '/';
 8005ae6:	202f      	movs	r0, #47	; 0x2f
 8005ae8:	e7ae      	b.n	8005a48 <_fx_directory_search+0x310>
    if (media_ptr -> fx_media_last_found_name[0])
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	f43f ae5b 	beq.w	80057a6 <_fx_directory_search+0x6e>
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8005af0:	2d5c      	cmp	r5, #92	; 0x5c
 8005af2:	d002      	beq.n	8005afa <_fx_directory_search+0x3c2>
 8005af4:	2d2f      	cmp	r5, #47	; 0x2f
 8005af6:	f47f ae56 	bne.w	80057a6 <_fx_directory_search+0x6e>
 8005afa:	2300      	movs	r3, #0
                    v++;
 8005afc:	2501      	movs	r5, #1
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8005afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b00:	9301      	str	r3, [sp, #4]
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8005b02:	2c00      	cmp	r4, #0
 8005b04:	f000 80e5 	beq.w	8005cd2 <_fx_directory_search+0x59a>
 8005b08:	f203 30e1 	addw	r0, r3, #993	; 0x3e1
 8005b0c:	9e07      	ldr	r6, [sp, #28]
 8005b0e:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
                j =  0;
 8005b12:	2100      	movs	r1, #0
 8005b14:	4438      	add	r0, r7
 8005b16:	e00c      	b.n	8005b32 <_fx_directory_search+0x3fa>
                        beta =  '/';
 8005b18:	2a5c      	cmp	r2, #92	; 0x5c
 8005b1a:	bf08      	it	eq
 8005b1c:	222f      	moveq	r2, #47	; 0x2f
                    if (alpha != beta)
 8005b1e:	42a2      	cmp	r2, r4
 8005b20:	d172      	bne.n	8005c08 <_fx_directory_search+0x4d0>
                    j++;
 8005b22:	3101      	adds	r1, #1
                    v++;
 8005b24:	3501      	adds	r5, #1
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d06e      	beq.n	8005c08 <_fx_directory_search+0x4d0>
 8005b2a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8005b2e:	2c00      	cmp	r4, #0
 8005b30:	d06a      	beq.n	8005c08 <_fx_directory_search+0x4d0>
                    if (alpha == '\\')
 8005b32:	2c5c      	cmp	r4, #92	; 0x5c
                    beta =   media_ptr -> fx_media_last_found_name[v];
 8005b34:	f810 2b01 	ldrb.w	r2, [r0], #1
                    if (alpha == '\\')
 8005b38:	d1ee      	bne.n	8005b18 <_fx_directory_search+0x3e0>
                    if (beta == '\\')
 8005b3a:	2a5c      	cmp	r2, #92	; 0x5c
                        alpha =  '/';
 8005b3c:	f04f 042f 	mov.w	r4, #47	; 0x2f
                    if (beta == '\\')
 8005b40:	d1ed      	bne.n	8005b1e <_fx_directory_search+0x3e6>
 8005b42:	e7ee      	b.n	8005b22 <_fx_directory_search+0x3ea>
                if (beta == '\\')
 8005b44:	2d5c      	cmp	r5, #92	; 0x5c
 8005b46:	d081      	beq.n	8005a4c <_fx_directory_search+0x314>
                    alpha =  '/';
 8005b48:	212f      	movs	r1, #47	; 0x2f
 8005b4a:	e77c      	b.n	8005a46 <_fx_directory_search+0x30e>
                        return(FX_FAT_READ_ERROR);
 8005b4c:	2503      	movs	r5, #3
}
 8005b4e:	4628      	mov	r0, r5
 8005b50:	b02b      	add	sp, #172	; 0xac
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	4605      	mov	r5, r0
 8005b58:	4628      	mov	r0, r5
 8005b5a:	b02b      	add	sp, #172	; 0xac
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 8005b60:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0bf      	beq.n	8005aea <_fx_directory_search+0x3b2>
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 8005b6a:	ae0e      	add	r6, sp, #56	; 0x38
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 8005b6c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 8005b70:	2270      	movs	r2, #112	; 0x70
 8005b72:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8005b76:	4630      	mov	r0, r6
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 8005b78:	930b      	str	r3, [sp, #44]	; 0x2c
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 8005b7a:	f005 fc31 	bl	800b3e0 <memcpy>
 8005b7e:	e60a      	b.n	8005796 <_fx_directory_search+0x5e>
            search_dir_ptr =  &search_dir;
 8005b80:	ab0e      	add	r3, sp, #56	; 0x38
 8005b82:	9301      	str	r3, [sp, #4]
    } while (name_ptr);
 8005b84:	9b06      	ldr	r3, [sp, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f47f ae1b 	bne.w	80057c2 <_fx_directory_search+0x8a>
 8005b8c:	e6d0      	b.n	8005930 <_fx_directory_search+0x1f8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b92:	f47f af74 	bne.w	8005a7e <_fx_directory_search+0x346>
 8005b96:	e77c      	b.n	8005a92 <_fx_directory_search+0x35a>
 8005b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b9a:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
 8005b9e:	1e59      	subs	r1, r3, #1
        v =  0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e008      	b.n	8005bb6 <_fx_directory_search+0x47e>
                        beta =  '/';
 8005ba4:	2a5c      	cmp	r2, #92	; 0x5c
 8005ba6:	bf08      	it	eq
 8005ba8:	222f      	moveq	r2, #47	; 0x2f
                    if (alpha != beta)
 8005baa:	42aa      	cmp	r2, r5
 8005bac:	d10f      	bne.n	8005bce <_fx_directory_search+0x496>
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d00d      	beq.n	8005bce <_fx_directory_search+0x496>
 8005bb2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005bb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005bba:	b1b2      	cbz	r2, 8005bea <_fx_directory_search+0x4b2>
                    if (alpha == '\\')
 8005bbc:	2d5c      	cmp	r5, #92	; 0x5c
 8005bbe:	f103 0301 	add.w	r3, r3, #1
 8005bc2:	d1ef      	bne.n	8005ba4 <_fx_directory_search+0x46c>
                    if (beta == '\\')
 8005bc4:	2a5c      	cmp	r2, #92	; 0x5c
                        alpha =  '/';
 8005bc6:	f04f 052f 	mov.w	r5, #47	; 0x2f
                    if (beta == '\\')
 8005bca:	d1ee      	bne.n	8005baa <_fx_directory_search+0x472>
 8005bcc:	e7ef      	b.n	8005bae <_fx_directory_search+0x476>
                if (path_ptr[v])
 8005bce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bd0:	5cd2      	ldrb	r2, [r2, r3]
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	f47f ade2 	bne.w	800579c <_fx_directory_search+0x64>
 8005bd8:	18fa      	adds	r2, r7, r3
 8005bda:	f892 23e0 	ldrb.w	r2, [r2, #992]	; 0x3e0
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8005bde:	2a5c      	cmp	r2, #92	; 0x5c
 8005be0:	d008      	beq.n	8005bf4 <_fx_directory_search+0x4bc>
 8005be2:	2a2f      	cmp	r2, #47	; 0x2f
 8005be4:	f47f adda 	bne.w	800579c <_fx_directory_search+0x64>
 8005be8:	e004      	b.n	8005bf4 <_fx_directory_search+0x4bc>
 8005bea:	2d5c      	cmp	r5, #92	; 0x5c
 8005bec:	d002      	beq.n	8005bf4 <_fx_directory_search+0x4bc>
 8005bee:	2d2f      	cmp	r5, #47	; 0x2f
 8005bf0:	f47f add4 	bne.w	800579c <_fx_directory_search+0x64>
                    v++;
 8005bf4:	1c5d      	adds	r5, r3, #1
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8005bf6:	9601      	str	r6, [sp, #4]
 8005bf8:	2dfe      	cmp	r5, #254	; 0xfe
 8005bfa:	d982      	bls.n	8005b02 <_fx_directory_search+0x3ca>
                if (v >= 256)
 8005bfc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005c00:	f43f add4 	beq.w	80057ac <_fx_directory_search+0x74>
                j =  0;
 8005c04:	2100      	movs	r1, #0
                if (v >= 256)
 8005c06:	25ff      	movs	r5, #255	; 0xff
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 8005c08:	9b07      	ldr	r3, [sp, #28]
 8005c0a:	443d      	add	r5, r7
 8005c0c:	5c5a      	ldrb	r2, [r3, r1]
 8005c0e:	f895 33e0 	ldrb.w	r3, [r5, #992]	; 0x3e0
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f47f adca 	bne.w	80057ac <_fx_directory_search+0x74>
 8005c18:	e724      	b.n	8005a64 <_fx_directory_search+0x32c>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8005c1a:	3101      	adds	r1, #1
 8005c1c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005c20:	f47f af49 	bne.w	8005ab6 <_fx_directory_search+0x37e>
 8005c24:	e752      	b.n	8005acc <_fx_directory_search+0x394>
    v=  0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8005c2c:	9907      	ldr	r1, [sp, #28]
 8005c2e:	443a      	add	r2, r7
 8005c30:	1e48      	subs	r0, r1, #1
 8005c32:	e005      	b.n	8005c40 <_fx_directory_search+0x508>
        v++;
 8005c34:	3301      	adds	r3, #1
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 8005c36:	f802 1b01 	strb.w	r1, [r2], #1
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d040      	beq.n	8005cc2 <_fx_directory_search+0x58a>
 8005c40:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8005c44:	2900      	cmp	r1, #0
 8005c46:	d1f5      	bne.n	8005c34 <_fx_directory_search+0x4fc>
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8005c48:	443b      	add	r3, r7
 8005c4a:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
    if (search_dir_ptr)
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	2900      	cmp	r1, #0
 8005c52:	d03a      	beq.n	8005cca <_fx_directory_search+0x592>
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8005c54:	2270      	movs	r2, #112	; 0x70
 8005c56:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8005c5a:	f005 fbc1 	bl	800b3e0 <memcpy>
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 8005c5e:	2301      	movs	r3, #1
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 8005c60:	9c08      	ldr	r4, [sp, #32]
 8005c62:	2270      	movs	r2, #112	; 0x70
 8005c64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8005c68:	f507 701c 	add.w	r0, r7, #624	; 0x270
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	f005 fbb7 	bl	800b3e0 <memcpy>
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 8005c72:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8005c76:	f207 21df 	addw	r1, r7, #735	; 0x2df
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8005c7a:	2300      	movs	r3, #0
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 8005c7c:	f8c7 2270 	str.w	r2, [r7, #624]	; 0x270
 8005c80:	6822      	ldr	r2, [r4, #0]
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 8005c82:	5cd2      	ldrb	r2, [r2, r3]
 8005c84:	f801 2f01 	strb.w	r2, [r1, #1]!
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 8005c88:	9a08      	ldr	r2, [sp, #32]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	5cd0      	ldrb	r0, [r2, r3]
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8005c8e:	b910      	cbnz	r0, 8005c96 <_fx_directory_search+0x55e>
 8005c90:	2bff      	cmp	r3, #255	; 0xff
 8005c92:	f47f ae3d 	bne.w	8005910 <_fx_directory_search+0x1d8>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8005c96:	3301      	adds	r3, #1
 8005c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9c:	d1f1      	bne.n	8005c82 <_fx_directory_search+0x54a>
 8005c9e:	e637      	b.n	8005910 <_fx_directory_search+0x1d8>
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	f897 54df 	ldrb.w	r5, [r7, #1247]	; 0x4df
 8005ca6:	f893 40ff 	ldrb.w	r4, [r3, #255]	; 0xff
 8005caa:	e6d8      	b.n	8005a5e <_fx_directory_search+0x326>
 8005cac:	3c01      	subs	r4, #1
 8005cae:	1e51      	subs	r1, r2, #1
 8005cb0:	f102 03ff 	add.w	r3, r2, #255	; 0xff
                        destination_name_ptr[n] =  source_name_ptr[n];
 8005cb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8005cb8:	428b      	cmp	r3, r1
                        destination_name_ptr[n] =  source_name_ptr[n];
 8005cba:	f804 2f01 	strb.w	r2, [r4, #1]!
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8005cbe:	d1f9      	bne.n	8005cb4 <_fx_directory_search+0x57c>
 8005cc0:	e6ae      	b.n	8005a20 <_fx_directory_search+0x2e8>
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 33e0 	strb.w	r3, [r7, #992]	; 0x3e0
 8005cc8:	e7c1      	b.n	8005c4e <_fx_directory_search+0x516>
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e7c8      	b.n	8005c60 <_fx_directory_search+0x528>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	e652      	b.n	8005978 <_fx_directory_search+0x240>
                j =  0;
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	e798      	b.n	8005c08 <_fx_directory_search+0x4d0>
 8005cd6:	bf00      	nop

08005cd8 <_fx_file_extended_seek>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8005cdc:	4991      	ldr	r1, [pc, #580]	; (8005f24 <_fx_file_extended_seek+0x24c>)
{
 8005cde:	461f      	mov	r7, r3
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8005ce0:	6803      	ldr	r3, [r0, #0]
{
 8005ce2:	b08d      	sub	sp, #52	; 0x34
ULONG     contents = 0;
 8005ce4:	2400      	movs	r4, #0
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8005ce6:	428b      	cmp	r3, r1
ULONG     contents = 0;
 8005ce8:	940b      	str	r4, [sp, #44]	; 0x2c
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8005cea:	d110      	bne.n	8005d0e <_fx_file_extended_seek+0x36>
        return(FX_NOT_OPEN);
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8005cec:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8005cee:	4616      	mov	r6, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8005cf0:	4a8d      	ldr	r2, [pc, #564]	; (8005f28 <_fx_file_extended_seek+0x250>)
    media_ptr -> fx_media_file_seeks++;
 8005cf2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    FX_PROTECT
 8005cf6:	6829      	ldr	r1, [r5, #0]
    media_ptr -> fx_media_file_seeks++;
 8005cf8:	3301      	adds	r3, #1
    FX_PROTECT
 8005cfa:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_seeks++;
 8005cfc:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    FX_PROTECT
 8005d00:	d00b      	beq.n	8005d1a <_fx_file_extended_seek+0x42>
 8005d02:	f04f 0811 	mov.w	r8, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
}
 8005d06:	4640      	mov	r0, r8
 8005d08:	b00d      	add	sp, #52	; 0x34
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 8005d0e:	f04f 0807 	mov.w	r8, #7
}
 8005d12:	4640      	mov	r0, r8
 8005d14:	b00d      	add	sp, #52	; 0x34
 8005d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8005d1a:	f505 73e4 	add.w	r3, r5, #456	; 0x1c8
 8005d1e:	4604      	mov	r4, r0
 8005d20:	f04f 31ff 	mov.w	r1, #4294967295
 8005d24:	4618      	mov	r0, r3
 8005d26:	9306      	str	r3, [sp, #24]
 8005d28:	f004 f912 	bl	8009f50 <_tx_mutex_get>
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d1e7      	bne.n	8005d02 <_fx_file_extended_seek+0x2a>
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 8005d32:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8005d36:	42b9      	cmp	r1, r7
 8005d38:	bf08      	it	eq
 8005d3a:	42b0      	cmpeq	r0, r6
 8005d3c:	f000 8084 	beq.w	8005e48 <_fx_file_extended_seek+0x170>
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8005d40:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8005d44:	f8d5 a054 	ldr.w	sl, [r5, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8005d48:	fb0a fb09 	mul.w	fp, sl, r9
    if (bytes_per_cluster == 0)
 8005d4c:	f1bb 0f00 	cmp.w	fp, #0
 8005d50:	f000 80bb 	beq.w	8005eca <_fx_file_extended_seek+0x1f2>
 8005d54:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8005d58:	429f      	cmp	r7, r3
 8005d5a:	bf08      	it	eq
 8005d5c:	4296      	cmpeq	r6, r2
 8005d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8005d62:	d375      	bcc.n	8005e50 <_fx_file_extended_seek+0x178>
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 8005d64:	465a      	mov	r2, fp
 8005d66:	2300      	movs	r3, #0
 8005d68:	69a6      	ldr	r6, [r4, #24]
 8005d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d72:	fba6 230b 	umull	r2, r3, r6, fp
 8005d76:	4299      	cmp	r1, r3
 8005d78:	bf08      	it	eq
 8005d7a:	4290      	cmpeq	r0, r2
 8005d7c:	d340      	bcc.n	8005e00 <_fx_file_extended_seek+0x128>
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 8005d7e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8005d80:	fbab 2307 	umull	r2, r3, fp, r7
 8005d84:	428b      	cmp	r3, r1
 8005d86:	bf08      	it	eq
 8005d88:	4282      	cmpeq	r2, r0
 8005d8a:	d277      	bcs.n	8005e7c <_fx_file_extended_seek+0x1a4>
                bytes_remaining =   byte_offset -
 8005d8c:	1a80      	subs	r0, r0, r2
                cluster =    file_ptr -> fx_file_current_physical_cluster;
 8005d8e:	6a26      	ldr	r6, [r4, #32]
                bytes_remaining =   byte_offset -
 8005d90:	f161 0100 	sbc.w	r1, r1, #0
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8005d94:	2e01      	cmp	r6, #1
 8005d96:	f240 80be 	bls.w	8005f16 <_fx_file_extended_seek+0x23e>
 8005d9a:	f242 49a8 	movw	r9, #9384	; 0x24a8
 8005d9e:	f855 3009 	ldr.w	r3, [r5, r9]
 8005da2:	42b3      	cmp	r3, r6
 8005da4:	d978      	bls.n	8005e98 <_fx_file_extended_seek+0x1c0>
 8005da6:	44a9      	add	r9, r5
 8005da8:	9503      	str	r5, [sp, #12]
 8005daa:	f8cd b01c 	str.w	fp, [sp, #28]
 8005dae:	4682      	mov	sl, r0
 8005db0:	9409      	str	r4, [sp, #36]	; 0x24
 8005db2:	468b      	mov	fp, r1
 8005db4:	f8cd 8020 	str.w	r8, [sp, #32]
 8005db8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005dbc:	e011      	b.n	8005de2 <_fx_file_extended_seek+0x10a>
                if (bytes_remaining > bytes_per_cluster)
 8005dbe:	455d      	cmp	r5, fp
                cluster =  contents;
 8005dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                if (bytes_remaining > bytes_per_cluster)
 8005dc2:	bf08      	it	eq
 8005dc4:	4554      	cmpeq	r4, sl
 8005dc6:	f080 8086 	bcs.w	8005ed6 <_fx_file_extended_seek+0x1fe>
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8005dca:	ebba 0a04 	subs.w	sl, sl, r4
                cluster_count++;
 8005dce:	4647      	mov	r7, r8
 8005dd0:	4616      	mov	r6, r2
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8005dd2:	eb6b 0b05 	sbc.w	fp, fp, r5
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8005dd6:	2a01      	cmp	r2, #1
 8005dd8:	d96d      	bls.n	8005eb6 <_fx_file_extended_seek+0x1de>
 8005dda:	f8d9 1000 	ldr.w	r1, [r9]
 8005dde:	4291      	cmp	r1, r2
 8005de0:	d969      	bls.n	8005eb6 <_fx_file_extended_seek+0x1de>
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8005de2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005de4:	4631      	mov	r1, r6
 8005de6:	9803      	ldr	r0, [sp, #12]
                cluster_count++;
 8005de8:	f107 0801 	add.w	r8, r7, #1
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8005dec:	f7fd f9aa 	bl	8003144 <_fx_utility_FAT_entry_read>
                if (status != FX_SUCCESS)
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d0e4      	beq.n	8005dbe <_fx_file_extended_seek+0xe6>
 8005df4:	4603      	mov	r3, r0
                    FX_UNPROTECT
 8005df6:	9806      	ldr	r0, [sp, #24]
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8005df8:	4698      	mov	r8, r3
                    FX_UNPROTECT
 8005dfa:	f004 f993 	bl	800a124 <_tx_mutex_put>
                    return(status);
 8005dfe:	e782      	b.n	8005d06 <_fx_file_extended_seek+0x2e>
        file_ptr -> fx_file_current_relative_cluster = (ULONG)byte_offset / bytes_per_cluster;
 8005e00:	fbb0 f7fb 	udiv	r7, r0, fp
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 8005e04:	6966      	ldr	r6, [r4, #20]
        file_ptr -> fx_file_current_relative_cluster = (ULONG)byte_offset / bytes_per_cluster;
 8005e06:	6367      	str	r7, [r4, #52]	; 0x34
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 8005e08:	443e      	add	r6, r7
        bytes_remaining =  byte_offset % bytes_per_cluster;
 8005e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        file_ptr -> fx_file_current_physical_cluster =
 8005e0e:	6226      	str	r6, [r4, #32]
        bytes_remaining =  byte_offset % bytes_per_cluster;
 8005e10:	f7fa fb2a 	bl	8000468 <__aeabi_uldivmod>
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005e1a:	3e02      	subs	r6, #2
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	fb0a 3606 	mla	r6, sl, r6, r3
    if (bytes_remaining == bytes_per_cluster)
 8005e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e26:	428b      	cmp	r3, r1
 8005e28:	bf08      	it	eq
 8005e2a:	4282      	cmpeq	r2, r0
 8005e2c:	d013      	beq.n	8005e56 <_fx_file_extended_seek+0x17e>
 8005e2e:	464a      	mov	r2, r9
 8005e30:	462b      	mov	r3, r5
 8005e32:	f7fa fb19 	bl	8000468 <__aeabi_uldivmod>
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8005e36:	6322      	str	r2, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005e38:	4406      	add	r6, r0
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8005e3a:	63a0      	str	r0, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8005e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005e40:	e9c4 650a 	strd	r6, r5, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8005e44:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    FX_UNPROTECT
 8005e48:	9806      	ldr	r0, [sp, #24]
 8005e4a:	f004 f96b 	bl	800a124 <_tx_mutex_put>
    return(FX_SUCCESS);
 8005e4e:	e75a      	b.n	8005d06 <_fx_file_extended_seek+0x2e>
 8005e50:	e9cd 6700 	strd	r6, r7, [sp]
 8005e54:	e786      	b.n	8005d64 <_fx_file_extended_seek+0x8c>
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8005e56:	f112 30ff 	adds.w	r0, r2, #4294967295
 8005e5a:	464a      	mov	r2, r9
 8005e5c:	f143 31ff 	adc.w	r1, r3, #4294967295
 8005e60:	462b      	mov	r3, r5
 8005e62:	f7fa fb01 	bl	8000468 <__aeabi_uldivmod>
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005e66:	4406      	add	r6, r0
 8005e68:	62e5      	str	r5, [r4, #44]	; 0x2c
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8005e6a:	63a0      	str	r0, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8005e6c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005e70:	62a6      	str	r6, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8005e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e76:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8005e7a:	e7e5      	b.n	8005e48 <_fx_file_extended_seek+0x170>
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 8005e7c:	6963      	ldr	r3, [r4, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 8005e7e:	1e77      	subs	r7, r6, #1
 8005e80:	460a      	mov	r2, r1
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 8005e82:	441e      	add	r6, r3
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 8005e84:	fb0b f307 	mul.w	r3, fp, r7
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 8005e88:	3e01      	subs	r6, #1
                bytes_remaining =   byte_offset -
 8005e8a:	1ac1      	subs	r1, r0, r3
 8005e8c:	f162 0200 	sbc.w	r2, r2, #0
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8005e90:	2e01      	cmp	r6, #1
                bytes_remaining =   byte_offset -
 8005e92:	4608      	mov	r0, r1
 8005e94:	4611      	mov	r1, r2
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8005e96:	d880      	bhi.n	8005d9a <_fx_file_extended_seek+0xc2>
 8005e98:	46ba      	mov	sl, r7
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 8005e9a:	fbab ab0a 	umull	sl, fp, fp, sl
 8005e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ea2:	459b      	cmp	fp, r3
 8005ea4:	bf08      	it	eq
 8005ea6:	4592      	cmpeq	sl, r2
 8005ea8:	d335      	bcc.n	8005f16 <_fx_file_extended_seek+0x23e>
 8005eaa:	6a26      	ldr	r6, [r4, #32]
 8005eac:	f8d5 a054 	ldr.w	sl, [r5, #84]	; 0x54
 8005eb0:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
 8005eb4:	e7b0      	b.n	8005e18 <_fx_file_extended_seek+0x140>
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	4659      	mov	r1, fp
 8005eba:	46c2      	mov	sl, r8
 8005ebc:	9d03      	ldr	r5, [sp, #12]
 8005ebe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005ec2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005ec8:	e7e7      	b.n	8005e9a <_fx_file_extended_seek+0x1c2>
        FX_UNPROTECT
 8005eca:	9806      	ldr	r0, [sp, #24]
        return(FX_MEDIA_INVALID);
 8005ecc:	f04f 0802 	mov.w	r8, #2
        FX_UNPROTECT
 8005ed0:	f004 f928 	bl	800a124 <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 8005ed4:	e717      	b.n	8005d06 <_fx_file_extended_seek+0x2e>
 8005ed6:	9c09      	ldr	r4, [sp, #36]	; 0x24
                    if ((bytes_remaining == bytes_per_cluster) &&
 8005ed8:	2a01      	cmp	r2, #1
 8005eda:	4650      	mov	r0, sl
 8005edc:	4659      	mov	r1, fp
 8005ede:	46c2      	mov	sl, r8
 8005ee0:	9d03      	ldr	r5, [sp, #12]
 8005ee2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005ee6:	f8dd 8020 	ldr.w	r8, [sp, #32]
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8005eea:	6226      	str	r6, [r4, #32]
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8005eec:	6367      	str	r7, [r4, #52]	; 0x34
                    if ((bytes_remaining == bytes_per_cluster) &&
 8005eee:	d9d4      	bls.n	8005e9a <_fx_file_extended_seek+0x1c2>
 8005ef0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8005ef4:	428f      	cmp	r7, r1
 8005ef6:	bf08      	it	eq
 8005ef8:	4286      	cmpeq	r6, r0
 8005efa:	d1ce      	bne.n	8005e9a <_fx_file_extended_seek+0x1c2>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8005efc:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8005f00:	58eb      	ldr	r3, [r5, r3]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d9c9      	bls.n	8005e9a <_fx_file_extended_seek+0x1c2>
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8005f06:	6222      	str	r2, [r4, #32]
                        bytes_remaining =  0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2200      	movs	r2, #0
                        file_ptr -> fx_file_current_relative_cluster++;
 8005f0c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
                        bytes_remaining =  0;
 8005f10:	4619      	mov	r1, r3
 8005f12:	4610      	mov	r0, r2
 8005f14:	e7c1      	b.n	8005e9a <_fx_file_extended_seek+0x1c2>
                FX_UNPROTECT
 8005f16:	9806      	ldr	r0, [sp, #24]
                return(FX_FILE_CORRUPT);
 8005f18:	f04f 0808 	mov.w	r8, #8
                FX_UNPROTECT
 8005f1c:	f004 f902 	bl	800a124 <_tx_mutex_put>
                return(FX_FILE_CORRUPT);
 8005f20:	e6f1      	b.n	8005d06 <_fx_file_extended_seek+0x2e>
 8005f22:	bf00      	nop
 8005f24:	46494c45 	.word	0x46494c45
 8005f28:	4d454449 	.word	0x4d454449

08005f2c <_fx_media_abort>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8005f2e:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <_fx_media_abort+0xa8>)
    media_ptr -> fx_media_aborts++;
 8005f30:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8005f34:	6801      	ldr	r1, [r0, #0]
    media_ptr -> fx_media_aborts++;
 8005f36:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8005f38:	4291      	cmp	r1, r2
    media_ptr -> fx_media_aborts++;
 8005f3a:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8005f3e:	d002      	beq.n	8005f46 <_fx_media_abort+0x1a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8005f40:	2511      	movs	r5, #17
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
}
 8005f42:	4628      	mov	r0, r5
 8005f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FX_PROTECT
 8005f46:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f50:	4630      	mov	r0, r6
 8005f52:	f003 fffd 	bl	8009f50 <_tx_mutex_get>
 8005f56:	4605      	mov	r5, r0
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1f1      	bne.n	8005f40 <_fx_media_abort+0x14>
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8005f5c:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
    while (open_count)
 8005f60:	b123      	cbz	r3, 8005f6c <_fx_media_abort+0x40>
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 8005f62:	491d      	ldr	r1, [pc, #116]	; (8005fd8 <_fx_media_abort+0xac>)
    while (open_count)
 8005f64:	3b01      	subs	r3, #1
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 8005f66:	6011      	str	r1, [r2, #0]
        file_ptr =  file_ptr -> fx_file_opened_next;
 8005f68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    while (open_count)
 8005f6a:	d1fb      	bne.n	8005f64 <_fx_media_abort+0x38>
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 8005f6c:	2103      	movs	r1, #3
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8005f6e:	2290      	movs	r2, #144	; 0x90
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005f70:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005f74:	4620      	mov	r0, r4
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8005f76:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005f7a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005f7c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005f80:	b672      	cpsid	i
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <_fx_media_abort+0xb0>)
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d01a      	beq.n	8005fc0 <_fx_media_abort+0x94>
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8005f8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8005f8e:	f8d4 70d0 	ldr.w	r7, [r4, #208]	; 0xd0
        if (_fx_system_media_opened_ptr == media_ptr)
 8005f92:	f8df c050 	ldr.w	ip, [pc, #80]	; 8005fe4 <_fx_media_abort+0xb8>
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8005f96:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8005f9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8005f9e:	f8c0 70d0 	str.w	r7, [r0, #208]	; 0xd0
        if (_fx_system_media_opened_ptr == media_ptr)
 8005fa2:	f8dc 0000 	ldr.w	r0, [ip]
 8005fa6:	42a0      	cmp	r0, r4
 8005fa8:	d00e      	beq.n	8005fc8 <_fx_media_abort+0x9c>
    _fx_system_media_opened_count--;
 8005faa:	3b01      	subs	r3, #1
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 8005fac:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <_fx_media_abort+0xb4>)
    _fx_system_media_opened_count--;
 8005fae:	6013      	str	r3, [r2, #0]
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 8005fb0:	6020      	str	r0, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005fb2:	f381 8810 	msr	PRIMASK, r1
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f003 ff70 	bl	8009e9c <_tx_mutex_delete>
}
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _fx_system_media_opened_ptr =  FX_NULL;
 8005fc0:	4808      	ldr	r0, [pc, #32]	; (8005fe4 <_fx_media_abort+0xb8>)
 8005fc2:	2700      	movs	r7, #0
 8005fc4:	6007      	str	r7, [r0, #0]
 8005fc6:	e7f0      	b.n	8005faa <_fx_media_abort+0x7e>
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8005fc8:	f8d4 70d0 	ldr.w	r7, [r4, #208]	; 0xd0
 8005fcc:	f8cc 7000 	str.w	r7, [ip]
 8005fd0:	e7eb      	b.n	8005faa <_fx_media_abort+0x7e>
 8005fd2:	bf00      	nop
 8005fd4:	4d454449 	.word	0x4d454449
 8005fd8:	46494c41 	.word	0x46494c41
 8005fdc:	20003a18 	.word	0x20003a18
 8005fe0:	4d454441 	.word	0x4d454441
 8005fe4:	20003a20 	.word	0x20003a20

08005fe8 <_fx_media_boot_info_extract>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8005fe8:	b538      	push	{r3, r4, r5, lr}

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 8005fea:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
{
 8005fee:	4604      	mov	r4, r0

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 8005ff0:	f105 000b 	add.w	r0, r5, #11
 8005ff4:	f7fd f88c 	bl	8003110 <_fx_utility_16_unsigned_read>
 8005ff8:	62a0      	str	r0, [r4, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 8005ffa:	b388      	cbz	r0, 8006060 <_fx_media_boot_info_extract+0x78>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8005ffc:	f105 0018 	add.w	r0, r5, #24
 8006000:	f7fd f886 	bl	8003110 <_fx_utility_16_unsigned_read>
 8006004:	62e0      	str	r0, [r4, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 8006006:	f105 001a 	add.w	r0, r5, #26
 800600a:	f7fd f881 	bl	8003110 <_fx_utility_16_unsigned_read>
 800600e:	6320      	str	r0, [r4, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8006010:	f105 0013 	add.w	r0, r5, #19
 8006014:	f7fd f87c 	bl	8003110 <_fx_utility_16_unsigned_read>
 8006018:	2100      	movs	r1, #0
        if (media_ptr -> fx_media_total_sectors == 0)
 800601a:	ea50 0301 	orrs.w	r3, r0, r1
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800601e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8006022:	d013      	beq.n	800604c <_fx_media_boot_info_extract+0x64>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 8006024:	f105 000e 	add.w	r0, r5, #14
 8006028:	f7fd f872 	bl	8003110 <_fx_utility_16_unsigned_read>
 800602c:	6460      	str	r0, [r4, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800602e:	b1b8      	cbz	r0, 8006060 <_fx_media_boot_info_extract+0x78>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 8006030:	7b6b      	ldrb	r3, [r5, #13]
 8006032:	6563      	str	r3, [r4, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 8006034:	b1a3      	cbz	r3, 8006060 <_fx_media_boot_info_extract+0x78>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 8006036:	f105 0016 	add.w	r0, r5, #22
 800603a:	f7fd f869 	bl	8003110 <_fx_utility_16_unsigned_read>
 800603e:	65a0      	str	r0, [r4, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8006040:	b310      	cbz	r0, 8006088 <_fx_media_boot_info_extract+0xa0>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8006042:	7c2b      	ldrb	r3, [r5, #16]
 8006044:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8006046:	b973      	cbnz	r3, 8006066 <_fx_media_boot_info_extract+0x7e>
        {
            return(FX_BOOT_ERROR);
 8006048:	2301      	movs	r3, #1
 800604a:	e00a      	b.n	8006062 <_fx_media_boot_info_extract+0x7a>
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800604c:	f105 0020 	add.w	r0, r5, #32
 8006050:	f7fd f864 	bl	800311c <_fx_utility_32_unsigned_read>
 8006054:	2100      	movs	r1, #0
        if (media_ptr -> fx_media_total_sectors == 0)
 8006056:	ea50 0301 	orrs.w	r3, r0, r1
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800605a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800605e:	d1e1      	bne.n	8006024 <_fx_media_boot_info_extract+0x3c>
        return(FX_MEDIA_INVALID);
 8006060:	2302      	movs	r3, #2
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
}
 8006062:	4618      	mov	r0, r3
 8006064:	bd38      	pop	{r3, r4, r5, pc}
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 8006066:	f105 001c 	add.w	r0, r5, #28
 800606a:	f7fd f857 	bl	800311c <_fx_utility_32_unsigned_read>
 800606e:	6720      	str	r0, [r4, #112]	; 0x70
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 8006070:	f105 0011 	add.w	r0, r5, #17
 8006074:	f7fd f84c 	bl	8003110 <_fx_utility_16_unsigned_read>
 8006078:	67a0      	str	r0, [r4, #120]	; 0x78
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800607a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 800607e:	f7fd f84d 	bl	800311c <_fx_utility_32_unsigned_read>
    return(FX_SUCCESS);
 8006082:	2300      	movs	r3, #0
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8006084:	6760      	str	r0, [r4, #116]	; 0x74
    return(FX_SUCCESS);
 8006086:	e7ec      	b.n	8006062 <_fx_media_boot_info_extract+0x7a>
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 8006088:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800608c:	f7fd f846 	bl	800311c <_fx_utility_32_unsigned_read>
 8006090:	65a0      	str	r0, [r4, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8006092:	2800      	cmp	r0, #0
 8006094:	d0e4      	beq.n	8006060 <_fx_media_boot_info_extract+0x78>
 8006096:	e7d4      	b.n	8006042 <_fx_media_boot_info_extract+0x5a>

08006098 <_fx_utility_16_unsigned_write>:
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8006098:	0a0b      	lsrs	r3, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800609a:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800609c:	7043      	strb	r3, [r0, #1]
}
 800609e:	4770      	bx	lr

080060a0 <_fx_utility_logical_sector_cache_entry_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 80060a4:	6904      	ldr	r4, [r0, #16]
{
 80060a6:	4616      	mov	r6, r2
 80060a8:	461f      	mov	r7, r3
 80060aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (media_ptr -> fx_media_sector_cache_hashed)
 80060ac:	2c00      	cmp	r4, #0
 80060ae:	f000 808d 	beq.w	80061cc <_fx_utility_logical_sector_cache_entry_read+0x12c>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80060b2:	f242 43a0 	movw	r3, #9376	; 0x24a0

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80060b6:	2501      	movs	r5, #1
 80060b8:	6a04      	ldr	r4, [r0, #32]
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80060ba:	58c3      	ldr	r3, [r0, r3]
 80060bc:	4033      	ands	r3, r6

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 80060be:	0099      	lsls	r1, r3, #2
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80060c0:	f003 0c1f 	and.w	ip, r3, #31

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80060c4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80060c8:	fa05 f50c 	lsl.w	r5, r5, ip
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80060cc:	00db      	lsls	r3, r3, #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80060ce:	432c      	orrs	r4, r5

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80060d0:	eb00 0e03 	add.w	lr, r0, r3
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80060d4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80060d8:	6204      	str	r4, [r0, #32]
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80060da:	f89e ccb1 	ldrb.w	ip, [lr, #3249]	; 0xcb1
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80060de:	4403      	add	r3, r0
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80060e0:	f1bc 0f00 	cmp.w	ip, #0
 80060e4:	f040 8086 	bne.w	80061f4 <_fx_utility_logical_sector_cache_entry_read+0x154>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 80060e8:	f893 e029 	ldrb.w	lr, [r3, #41]	; 0x29
 80060ec:	f1be 0f00 	cmp.w	lr, #0
 80060f0:	d006      	beq.n	8006100 <_fx_utility_logical_sector_cache_entry_read+0x60>
 80060f2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80060f6:	42bd      	cmp	r5, r7
 80060f8:	bf08      	it	eq
 80060fa:	42b4      	cmpeq	r4, r6
 80060fc:	f000 80f5 	beq.w	80062ea <_fx_utility_logical_sector_cache_entry_read+0x24a>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8006100:	f893 9041 	ldrb.w	r9, [r3, #65]	; 0x41
 8006104:	f1b9 0f00 	cmp.w	r9, #0
 8006108:	d006      	beq.n	8006118 <_fx_utility_logical_sector_cache_entry_read+0x78>
 800610a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800610e:	42bd      	cmp	r5, r7
 8006110:	bf08      	it	eq
 8006112:	42b4      	cmpeq	r4, r6
 8006114:	f000 811c 	beq.w	8006350 <_fx_utility_logical_sector_cache_entry_read+0x2b0>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8006118:	f893 a059 	ldrb.w	sl, [r3, #89]	; 0x59
 800611c:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8006120:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8006124:	f1ba 0f00 	cmp.w	sl, #0
 8006128:	d004      	beq.n	8006134 <_fx_utility_logical_sector_cache_entry_read+0x94>
 800612a:	42af      	cmp	r7, r5
 800612c:	bf08      	it	eq
 800612e:	42a6      	cmpeq	r6, r4
 8006130:	f000 8085 	beq.w	800623e <_fx_utility_logical_sector_cache_entry_read+0x19e>
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8006134:	eb01 0741 	add.w	r7, r1, r1, lsl #1
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006138:	6b1e      	ldr	r6, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 800613a:	f883 9059 	strb.w	r9, [r3, #89]	; 0x59
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 800613e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006142:	699f      	ldr	r7, [r3, #24]
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006144:	649e      	str	r6, [r3, #72]	; 0x48
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006146:	631f      	str	r7, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006148:	f893 c040 	ldrb.w	ip, [r3, #64]	; 0x40
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 800614c:	f893 b042 	ldrb.w	fp, [r3, #66]	; 0x42
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006150:	f893 9028 	ldrb.w	r9, [r3, #40]	; 0x28
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8006154:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8006158:	f600 4ea8 	addw	lr, r0, #3240	; 0xca8
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800615c:	f883 9040 	strb.w	r9, [r3, #64]	; 0x40
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006160:	f893 902a 	ldrb.w	r9, [r3, #42]	; 0x2a
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8006164:	e9d3 670e 	ldrd	r6, r7, [r3, #56]	; 0x38
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8006168:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 800616c:	e9c3 6714 	strd	r6, r7, [r3, #80]	; 0x50
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8006170:	f893 705a 	ldrb.w	r7, [r3, #90]	; 0x5a
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8006174:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8006178:	f883 b05a 	strb.w	fp, [r3, #90]	; 0x5a
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800617c:	f883 c058 	strb.w	ip, [r3, #88]	; 0x58
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8006180:	e9d3 bc08 	ldrd	fp, ip, [r3, #32]
 8006184:	e9c3 bc0e 	strd	fp, ip, [r3, #56]	; 0x38
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8006188:	f8d0 1ca0 	ldr.w	r1, [r0, #3232]	; 0xca0
 800618c:	6199      	str	r1, [r3, #24]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 800618e:	2100      	movs	r1, #0
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8006190:	e9de bc00 	ldrd	fp, ip, [lr]
 8006194:	e9c3 bc08 	strd	fp, ip, [r3, #32]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8006198:	f890 ccb0 	ldrb.w	ip, [r0, #3248]	; 0xcb0
 800619c:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 80061a0:	f890 ccb1 	ldrb.w	ip, [r0, #3249]	; 0xcb1
 80061a4:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 80061a8:	f890 ccb2 	ldrb.w	ip, [r0, #3250]	; 0xcb2
 80061ac:	f883 c02a 	strb.w	ip, [r3, #42]	; 0x2a
        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 80061b0:	f8c0 8ca0 	str.w	r8, [r0, #3232]	; 0xca0
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 80061b4:	e9ce 4500 	strd	r4, r5, [lr]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 80061b8:	f880 6cb0 	strb.w	r6, [r0, #3248]	; 0xcb0
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 80061bc:	f880 acb1 	strb.w	sl, [r0, #3249]	; 0xcb1
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 80061c0:	f880 7cb2 	strb.w	r7, [r0, #3250]	; 0xcb2
        *previous_cache_entry =  FX_NULL;
 80061c4:	6011      	str	r1, [r2, #0]
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80061cc:	6941      	ldr	r1, [r0, #20]
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80061ce:	69c3      	ldr	r3, [r0, #28]
        *previous_cache_entry =  FX_NULL;
 80061d0:	6014      	str	r4, [r2, #0]
        while (cache_size--)
 80061d2:	2900      	cmp	r1, #0
 80061d4:	d0f7      	beq.n	80061c6 <_fx_utility_logical_sector_cache_entry_read+0x126>
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80061d6:	7c5c      	ldrb	r4, [r3, #17]
 80061d8:	3901      	subs	r1, #1
 80061da:	b12c      	cbz	r4, 80061e8 <_fx_utility_logical_sector_cache_entry_read+0x148>
 80061dc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80061e0:	42bd      	cmp	r5, r7
 80061e2:	bf08      	it	eq
 80061e4:	42b4      	cmpeq	r4, r6
 80061e6:	d018      	beq.n	800621a <_fx_utility_logical_sector_cache_entry_read+0x17a>
            if (cache_entry -> fx_cached_sector_next_used)
 80061e8:	695c      	ldr	r4, [r3, #20]
 80061ea:	2c00      	cmp	r4, #0
 80061ec:	d0f1      	beq.n	80061d2 <_fx_utility_logical_sector_cache_entry_read+0x132>
                *previous_cache_entry =  cache_entry;
 80061ee:	6013      	str	r3, [r2, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	e7ee      	b.n	80061d2 <_fx_utility_logical_sector_cache_entry_read+0x132>
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80061f4:	f60e 44a8 	addw	r4, lr, #3240	; 0xca8
 80061f8:	e9d4 4500 	ldrd	r4, r5, [r4]
 80061fc:	42bd      	cmp	r5, r7
 80061fe:	bf08      	it	eq
 8006200:	42b4      	cmpeq	r4, r6
 8006202:	f47f af71 	bne.w	80060e8 <_fx_utility_logical_sector_cache_entry_read+0x48>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006206:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 800620a:	2300      	movs	r3, #0
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800620c:	f8de 1ca0 	ldr.w	r1, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006210:	3201      	adds	r2, #1
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8006212:	6081      	str	r1, [r0, #8]
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006214:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8006218:	e7d5      	b.n	80061c6 <_fx_utility_logical_sector_cache_entry_read+0x126>
                if (*previous_cache_entry)
 800621a:	6812      	ldr	r2, [r2, #0]
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800621c:	6819      	ldr	r1, [r3, #0]
 800621e:	6081      	str	r1, [r0, #8]
                if (*previous_cache_entry)
 8006220:	b122      	cbz	r2, 800622c <_fx_utility_logical_sector_cache_entry_read+0x18c>
                        cache_entry -> fx_cached_sector_next_used;
 8006222:	695c      	ldr	r4, [r3, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8006224:	69c1      	ldr	r1, [r0, #28]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8006226:	6154      	str	r4, [r2, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8006228:	6159      	str	r1, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800622a:	61c3      	str	r3, [r0, #28]
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800622c:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
                return(FX_NULL);
 8006230:	2300      	movs	r3, #0
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006232:	3201      	adds	r2, #1
 8006234:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
}
 8006238:	4618      	mov	r0, r3
 800623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800623e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006242:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8006246:	f8c0 8008 	str.w	r8, [r0, #8]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800624a:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800624e:	3201      	adds	r2, #1
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006250:	f60e 49a8 	addw	r9, lr, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006254:	f8de 6ca0 	ldr.w	r6, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006258:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800625c:	f89e 7cb0 	ldrb.w	r7, [lr, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8006260:	f89e 2cb2 	ldrb.w	r2, [lr, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006264:	e9d9 4500 	ldrd	r4, r5, [r9]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8006268:	f8ce 8ca0 	str.w	r8, [lr, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 800626c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006270:	e9c9 0100 	strd	r0, r1, [r9]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8006274:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 8006278:	f88e 1cb0 	strb.w	r1, [lr, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 800627c:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 8006280:	f88e 1cb1 	strb.w	r1, [lr, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8006284:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8006288:	f88e 1cb2 	strb.w	r1, [lr, #3250]	; 0xcb2
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800628c:	6b18      	ldr	r0, [r3, #48]	; 0x30
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800628e:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8006292:	f893 8041 	ldrb.w	r8, [r3, #65]	; 0x41
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006296:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006298:	6498      	str	r0, [r3, #72]	; 0x48
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800629a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 800629e:	f893 e042 	ldrb.w	lr, [r3, #66]	; 0x42
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80062a2:	f883 9058 	strb.w	r9, [r3, #88]	; 0x58
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 80062a6:	f883 8059 	strb.w	r8, [r3, #89]	; 0x59
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80062aa:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80062ac:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 80062b0:	f883 e05a 	strb.w	lr, [r3, #90]	; 0x5a
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80062b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80062b8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80062bc:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80062c0:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80062c4:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80062c8:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80062cc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80062d0:	619e      	str	r6, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80062d2:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80062d6:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80062da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80062de:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80062e2:	e9c3 4508 	strd	r4, r5, [r3, #32]
            return(FX_NULL);
 80062e6:	2300      	movs	r3, #0
 80062e8:	e76d      	b.n	80061c6 <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80062ea:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80062ee:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80062f2:	6999      	ldr	r1, [r3, #24]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80062f4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80062f8:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80062fa:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80062fc:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006300:	f8d2 8ca0 	ldr.w	r8, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006304:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8006308:	f892 ecb0 	ldrb.w	lr, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800630c:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006310:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8006314:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8006318:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800631c:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8006320:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8006324:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8006328:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800632c:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8006330:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8006334:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8006338:	f8c3 8018 	str.w	r8, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800633c:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8006340:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8006344:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8006348:	e9c3 6708 	strd	r6, r7, [r3, #32]
            return(FX_NULL);
 800634c:	2300      	movs	r3, #0
 800634e:	e73a      	b.n	80061c6 <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006350:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8006354:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006358:	6b19      	ldr	r1, [r3, #48]	; 0x30
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800635a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800635e:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8006360:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006362:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8006366:	f8d2 eca0 	ldr.w	lr, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800636a:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800636e:	f892 8cb0 	ldrb.w	r8, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8006372:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8006376:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800637a:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 800637e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006382:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8006386:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800638a:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 800638e:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8006392:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8006396:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 800639a:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800639e:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80063a0:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80063a4:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80063a8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80063ac:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80063ae:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80063b2:	f8c3 e018 	str.w	lr, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80063b6:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80063ba:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80063be:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80063c6:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80063ca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80063ce:	e9c3 6708 	strd	r6, r7, [r3, #32]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80063d2:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
            return(FX_NULL);
 80063d6:	2300      	movs	r3, #0
 80063d8:	e6f5      	b.n	80061c6 <_fx_utility_logical_sector_cache_entry_read+0x126>
 80063da:	bf00      	nop

080063dc <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	461f      	mov	r7, r3


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 80063e2:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
 80063e6:	b091      	sub	sp, #68	; 0x44
ULONG  cluster, next_cluster = 0;
 80063e8:	f04f 0c00 	mov.w	ip, #0

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 80063ec:	468b      	mov	fp, r1
    media_ptr -> fx_media_directory_entry_reads++;
 80063ee:	3301      	adds	r3, #1
ULONG  entry = *entry_ptr;
 80063f0:	6811      	ldr	r1, [r2, #0]
{
 80063f2:	4606      	mov	r6, r0
 80063f4:	9207      	str	r2, [sp, #28]
ULONG  entry = *entry_ptr;
 80063f6:	9106      	str	r1, [sp, #24]
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 80063f8:	ea4f 1841 	mov.w	r8, r1, lsl #5
 80063fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
ULONG  cluster, next_cluster = 0;
 80063fe:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    media_ptr -> fx_media_directory_entry_reads++;
 8006402:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8006406:	f1bb 0f00 	cmp.w	fp, #0
 800640a:	f000 8098 	beq.w	800653e <_fx_directory_entry_read+0x162>

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800640e:	6d40      	ldr	r0, [r0, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8006410:	fb00 f302 	mul.w	r3, r0, r2

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 809a 	beq.w	800654e <_fx_directory_entry_read+0x172>
        /* Determine if there is a sub-directory.  */
        if (source_dir)
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800641a:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 800641e:	fbb8 faf3 	udiv	sl, r8, r3
        byte_offset =  byte_offset % bytes_per_cluster;
 8006422:	fb03 881a 	mls	r8, r3, sl, r8
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8006426:	fbb8 f3f2 	udiv	r3, r8, r2
 800642a:	9305      	str	r3, [sp, #20]
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800642c:	b121      	cbz	r1, 8006438 <_fx_directory_entry_read+0x5c>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800642e:	f8db 9054 	ldr.w	r9, [fp, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8006432:	45d1      	cmp	r9, sl
 8006434:	f240 80a9 	bls.w	800658a <_fx_directory_entry_read+0x1ae>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8006438:	f8db 1034 	ldr.w	r1, [fp, #52]	; 0x34

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800643c:	f04f 0900 	mov.w	r9, #0
            /* Setup the relative cluster index to zero.  */
            i =  0;
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 8006440:	45d1      	cmp	r9, sl
 8006442:	d21d      	bcs.n	8006480 <_fx_directory_entry_read+0xa4>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8006444:	2901      	cmp	r1, #1
 8006446:	f240 8092 	bls.w	800656e <_fx_directory_entry_read+0x192>
 800644a:	f242 45a8 	movw	r5, #9384	; 0x24a8
 800644e:	5973      	ldr	r3, [r6, r5]
 8006450:	428b      	cmp	r3, r1
 8006452:	f240 808c 	bls.w	800656e <_fx_directory_entry_read+0x192>
 8006456:	4435      	add	r5, r6
 8006458:	e006      	b.n	8006468 <_fx_directory_entry_read+0x8c>
 800645a:	2901      	cmp	r1, #1
 800645c:	f240 8087 	bls.w	800656e <_fx_directory_entry_read+0x192>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	428b      	cmp	r3, r1
 8006464:	f240 8083 	bls.w	800656e <_fx_directory_entry_read+0x192>
                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8006468:	aa0f      	add	r2, sp, #60	; 0x3c
 800646a:	4630      	mov	r0, r6

            /* Setup the actual cluster.  */
            cluster = next_cluster;

            /* Increment the relative cluster number.  */
            i++;
 800646c:	f109 0901 	add.w	r9, r9, #1
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8006470:	f7fc fe68 	bl	8003144 <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8006474:	2800      	cmp	r0, #0
 8006476:	d16b      	bne.n	8006550 <_fx_directory_entry_read+0x174>
        while (i < relative_cluster)
 8006478:	45d1      	cmp	r9, sl
            cluster = next_cluster;
 800647a:	990f      	ldr	r1, [sp, #60]	; 0x3c
        while (i < relative_cluster)
 800647c:	d1ed      	bne.n	800645a <_fx_directory_entry_read+0x7e>
 800647e:	6d70      	ldr	r0, [r6, #84]	; 0x54
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8006480:	6d32      	ldr	r2, [r6, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8006482:	1e8c      	subs	r4, r1, #2
 8006484:	9108      	str	r1, [sp, #32]
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006486:	2303      	movs	r3, #3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8006488:	9905      	ldr	r1, [sp, #20]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800648a:	2500      	movs	r5, #0
 800648c:	9302      	str	r3, [sp, #8]
 800648e:	f04f 0c01 	mov.w	ip, #1
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8006492:	440a      	add	r2, r1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006494:	462b      	mov	r3, r5
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8006496:	fb00 2904 	mla	r9, r0, r4, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800649a:	68b4      	ldr	r4, [r6, #8]
 800649c:	4630      	mov	r0, r6
 800649e:	f8cd c004 	str.w	ip, [sp, #4]
 80064a2:	464a      	mov	r2, r9
 80064a4:	9400      	str	r4, [sp, #0]
 80064a6:	f7fd fd51 	bl	8003f4c <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d150      	bne.n	8006550 <_fx_directory_entry_read+0x174>
            /* Return error code.  */
            return(status);
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 80064ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80064b0:	9908      	ldr	r1, [sp, #32]
 80064b2:	fbb8 f0f3 	udiv	r0, r8, r3
 80064b6:	fb03 8010 	mls	r0, r3, r0, r8
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
             media_ptr -> fx_media_bytes_per_sector);
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80064ba:	68b3      	ldr	r3, [r6, #8]
    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80064bc:	f04f 0e00 	mov.w	lr, #0
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80064c0:	647d      	str	r5, [r7, #68]	; 0x44
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80064c2:	181c      	adds	r4, r3, r0
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80064c4:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 80064c8:	64b8      	str	r0, [r7, #72]	; 0x48
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80064ca:	f8c7 e018 	str.w	lr, [r7, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 80064ce:	f887 e004 	strb.w	lr, [r7, #4]
    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;

    /* Check if long file name exists.  */
    get_short_name =  0;
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80064d2:	f894 c00b 	ldrb.w	ip, [r4, #11]
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80064d6:	683d      	ldr	r5, [r7, #0]
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80064d8:	f1bc 0f0f 	cmp.w	ip, #15
 80064dc:	f000 8174 	beq.w	80067c8 <_fx_directory_entry_read+0x3ec>
    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	2201      	movs	r2, #1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	1e62      	subs	r2, r4, #1
 80064ec:	f104 0e0a 	add.w	lr, r4, #10

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 80064f0:	f04f 092e 	mov.w	r9, #46	; 0x2e
    dotflag =  0;
 80064f4:	469c      	mov	ip, r3
    short_name_ptr[0] =  0;
 80064f6:	702b      	strb	r3, [r5, #0]
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80064f8:	4618      	mov	r0, r3
 80064fa:	e017      	b.n	800652c <_fx_directory_entry_read+0x150>
        if ((CHAR)read_ptr[i] == ' ')
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	f000 813b 	beq.w	8006778 <_fx_directory_entry_read+0x39c>
        if (i == FX_DIR_NAME_SIZE)
 8006502:	eba2 0804 	sub.w	r8, r2, r4
            if (dotflag == 0)
 8006506:	f1b8 0f08 	cmp.w	r8, #8
 800650a:	d102      	bne.n	8006512 <_fx_directory_entry_read+0x136>
 800650c:	f1bc 0f00 	cmp.w	ip, #0
 8006510:	d002      	beq.n	8006518 <_fx_directory_entry_read+0x13c>
        if (dotflag == 1)
 8006512:	f1bc 0f01 	cmp.w	ip, #1
 8006516:	d105      	bne.n	8006524 <_fx_directory_entry_read+0x148>
            short_name_ptr[j++] =  '.';
 8006518:	f805 9000 	strb.w	r9, [r5, r0]
            dotflag =  2;    /* no more dot for spaces */
 800651c:	f04f 0c02 	mov.w	ip, #2
            short_name_ptr[j++] =  '.';
 8006520:	3001      	adds	r0, #1
 8006522:	7813      	ldrb	r3, [r2, #0]
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8006524:	542b      	strb	r3, [r5, r0]

        /* Increment size.  */
        j++;
 8006526:	3001      	adds	r0, #1
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8006528:	4572      	cmp	r2, lr
 800652a:	d041      	beq.n	80065b0 <_fx_directory_entry_read+0x1d4>
        if ((CHAR)read_ptr[i] == 0)
 800652c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006530:	2b00      	cmp	r3, #0
 8006532:	d03d      	beq.n	80065b0 <_fx_directory_entry_read+0x1d4>
        if ((CHAR)read_ptr[i] == '.')
 8006534:	2b2e      	cmp	r3, #46	; 0x2e
 8006536:	d1e1      	bne.n	80064fc <_fx_directory_entry_read+0x120>
            dotflag =  2;
 8006538:	f04f 0c02 	mov.w	ip, #2
 800653c:	e7f2      	b.n	8006524 <_fx_directory_entry_read+0x148>
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800653e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80fb 	beq.w	800673c <_fx_directory_entry_read+0x360>
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8006546:	6d40      	ldr	r0, [r0, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8006548:	fb02 f300 	mul.w	r3, r2, r0
        if (bytes_per_cluster == 0)
 800654c:	b99b      	cbnz	r3, 8006576 <_fx_directory_entry_read+0x19a>
            return(FX_MEDIA_INVALID);
 800654e:	2002      	movs	r0, #2
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8006550:	b011      	add	sp, #68	; 0x44
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8006556:	6e73      	ldr	r3, [r6, #100]	; 0x64
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 815b 	bne.w	8006814 <_fx_directory_entry_read+0x438>
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 800655e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
                    logical_sector++;
 8006560:	f109 0901 	add.w	r9, r9, #1
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8006564:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8006566:	4413      	add	r3, r2
 8006568:	454b      	cmp	r3, r9
 800656a:	f200 815c 	bhi.w	8006826 <_fx_directory_entry_read+0x44a>
                return(FX_FILE_CORRUPT);
 800656e:	2008      	movs	r0, #8
}
 8006570:	b011      	add	sp, #68	; 0x44
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8006576:	fbb8 faf3 	udiv	sl, r8, r3
        byte_offset =  byte_offset % bytes_per_cluster;
 800657a:	fb03 881a 	mls	r8, r3, sl, r8
            cluster =  media_ptr -> fx_media_root_cluster_32;
 800657e:	6f71      	ldr	r1, [r6, #116]	; 0x74
            i =  0;
 8006580:	46d9      	mov	r9, fp
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8006582:	fbb8 f3f2 	udiv	r3, r8, r2
 8006586:	9305      	str	r3, [sp, #20]
 8006588:	e75a      	b.n	8006440 <_fx_directory_entry_read+0x64>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800658a:	e9db 2310 	ldrd	r2, r3, [fp, #64]	; 0x40
 800658e:	e9db 4516 	ldrd	r4, r5, [fp, #88]	; 0x58
 8006592:	429d      	cmp	r5, r3
 8006594:	bf08      	it	eq
 8006596:	4294      	cmpeq	r4, r2
 8006598:	f47f af4e 	bne.w	8006438 <_fx_directory_entry_read+0x5c>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800659c:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 80065a0:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 80065a4:	429a      	cmp	r2, r3
 80065a6:	f47f af47 	bne.w	8006438 <_fx_directory_entry_read+0x5c>
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 80065aa:	f8cb c050 	str.w	ip, [fp, #80]	; 0x50
 80065ae:	e747      	b.n	8006440 <_fx_directory_entry_read+0x64>
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	782a      	ldrb	r2, [r5, #0]
 80065b4:	b113      	cbz	r3, 80065bc <_fx_directory_entry_read+0x1e0>
 80065b6:	2ae5      	cmp	r2, #229	; 0xe5
 80065b8:	f000 80e4 	beq.w	8006784 <_fx_directory_entry_read+0x3a8>
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 80065bc:	2a00      	cmp	r2, #0
 80065be:	f000 80e7 	beq.w	8006790 <_fx_directory_entry_read+0x3b4>
    short_name_ptr[j] = 0;
 80065c2:	2300      	movs	r3, #0
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 80065c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    short_name_ptr[j] = 0;
 80065c6:	542b      	strb	r3, [r5, r0]
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 80065c8:	7ae3      	ldrb	r3, [r4, #11]
 80065ca:	773b      	strb	r3, [r7, #28]
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 80065cc:	7b23      	ldrb	r3, [r4, #12]
 80065ce:	777b      	strb	r3, [r7, #29]
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d066      	beq.n	80066a2 <_fx_directory_entry_read+0x2c6>
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	d564      	bpl.n	80066a2 <_fx_directory_entry_read+0x2c6>
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80065d8:	782b      	ldrb	r3, [r5, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d061      	beq.n	80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80065de:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065e2:	2a19      	cmp	r2, #25
 80065e4:	d801      	bhi.n	80065ea <_fx_directory_entry_read+0x20e>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80065e6:	3320      	adds	r3, #32
 80065e8:	702b      	strb	r3, [r5, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80065ea:	786b      	ldrb	r3, [r5, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d058      	beq.n	80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80065f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065f4:	2a19      	cmp	r2, #25
 80065f6:	d801      	bhi.n	80065fc <_fx_directory_entry_read+0x220>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80065f8:	3320      	adds	r3, #32
 80065fa:	706b      	strb	r3, [r5, #1]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80065fc:	78ab      	ldrb	r3, [r5, #2]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d04f      	beq.n	80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006602:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006606:	2a19      	cmp	r2, #25
 8006608:	d801      	bhi.n	800660e <_fx_directory_entry_read+0x232>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800660a:	3320      	adds	r3, #32
 800660c:	70ab      	strb	r3, [r5, #2]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800660e:	78eb      	ldrb	r3, [r5, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d046      	beq.n	80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006614:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006618:	2a19      	cmp	r2, #25
 800661a:	d801      	bhi.n	8006620 <_fx_directory_entry_read+0x244>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800661c:	3320      	adds	r3, #32
 800661e:	70eb      	strb	r3, [r5, #3]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006620:	792b      	ldrb	r3, [r5, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d03d      	beq.n	80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006626:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800662a:	2a19      	cmp	r2, #25
 800662c:	d801      	bhi.n	8006632 <_fx_directory_entry_read+0x256>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800662e:	3320      	adds	r3, #32
 8006630:	712b      	strb	r3, [r5, #4]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006632:	796b      	ldrb	r3, [r5, #5]
 8006634:	b3ab      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006636:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800663a:	2a19      	cmp	r2, #25
 800663c:	d801      	bhi.n	8006642 <_fx_directory_entry_read+0x266>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800663e:	3320      	adds	r3, #32
 8006640:	716b      	strb	r3, [r5, #5]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006642:	79ab      	ldrb	r3, [r5, #6]
 8006644:	b36b      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006646:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800664a:	2a19      	cmp	r2, #25
 800664c:	d801      	bhi.n	8006652 <_fx_directory_entry_read+0x276>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800664e:	3320      	adds	r3, #32
 8006650:	71ab      	strb	r3, [r5, #6]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006652:	79eb      	ldrb	r3, [r5, #7]
 8006654:	b32b      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006656:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800665a:	2a19      	cmp	r2, #25
 800665c:	d801      	bhi.n	8006662 <_fx_directory_entry_read+0x286>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800665e:	3320      	adds	r3, #32
 8006660:	71eb      	strb	r3, [r5, #7]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006662:	7a2b      	ldrb	r3, [r5, #8]
 8006664:	b1eb      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006666:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800666a:	2a19      	cmp	r2, #25
 800666c:	d801      	bhi.n	8006672 <_fx_directory_entry_read+0x296>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800666e:	3320      	adds	r3, #32
 8006670:	722b      	strb	r3, [r5, #8]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006672:	7a6b      	ldrb	r3, [r5, #9]
 8006674:	b1ab      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006676:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800667a:	2a19      	cmp	r2, #25
 800667c:	d801      	bhi.n	8006682 <_fx_directory_entry_read+0x2a6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800667e:	3320      	adds	r3, #32
 8006680:	726b      	strb	r3, [r5, #9]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006682:	7aab      	ldrb	r3, [r5, #10]
 8006684:	b16b      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006686:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800668a:	2a19      	cmp	r2, #25
 800668c:	d801      	bhi.n	8006692 <_fx_directory_entry_read+0x2b6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800668e:	3320      	adds	r3, #32
 8006690:	72ab      	strb	r3, [r5, #10]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8006692:	7aeb      	ldrb	r3, [r5, #11]
 8006694:	b12b      	cbz	r3, 80066a2 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8006696:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800669a:	2a19      	cmp	r2, #25
 800669c:	d801      	bhi.n	80066a2 <_fx_directory_entry_read+0x2c6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800669e:	3320      	adds	r3, #32
 80066a0:	72eb      	strb	r3, [r5, #11]
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 80066a2:	7b63      	ldrb	r3, [r4, #13]
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 80066a4:	f104 000e 	add.w	r0, r4, #14
 80066a8:	9105      	str	r1, [sp, #20]
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 80066aa:	77bb      	strb	r3, [r7, #30]
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 80066ac:	f7fc fd30 	bl	8003110 <_fx_utility_16_unsigned_read>
 80066b0:	6238      	str	r0, [r7, #32]
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 80066b2:	f104 0010 	add.w	r0, r4, #16
 80066b6:	f7fc fd2b 	bl	8003110 <_fx_utility_16_unsigned_read>
 80066ba:	6278      	str	r0, [r7, #36]	; 0x24
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80066bc:	f104 0012 	add.w	r0, r4, #18
 80066c0:	f7fc fd26 	bl	8003110 <_fx_utility_16_unsigned_read>
    if (media_ptr -> fx_media_32_bit_FAT)
 80066c4:	6e73      	ldr	r3, [r6, #100]	; 0x64
 80066c6:	9905      	ldr	r1, [sp, #20]
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80066c8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (media_ptr -> fx_media_32_bit_FAT)
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 8125 	bne.w	800691a <_fx_directory_entry_read+0x53e>
        destination_ptr -> fx_dir_entry_cluster =  0;
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 80066d2:	f104 0016 	add.w	r0, r4, #22
 80066d6:	9105      	str	r1, [sp, #20]
 80066d8:	f7fc fd1a 	bl	8003110 <_fx_utility_16_unsigned_read>
 80066dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 80066de:	f104 0018 	add.w	r0, r4, #24
 80066e2:	f7fc fd15 	bl	8003110 <_fx_utility_16_unsigned_read>
 80066e6:	6338      	str	r0, [r7, #48]	; 0x30
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 80066e8:	f104 001a 	add.w	r0, r4, #26
 80066ec:	f7fc fd10 	bl	8003110 <_fx_utility_16_unsigned_read>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	4403      	add	r3, r0
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 80066f4:	f104 001c 	add.w	r0, r4, #28
 80066f8:	2400      	movs	r4, #0
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 80066fc:	f7fc fd0e 	bl	800311c <_fx_utility_32_unsigned_read>
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8006700:	2300      	movs	r3, #0
 8006702:	2200      	movs	r2, #0
    destination_ptr -> fx_dir_entry_number =  entry;
 8006704:	9906      	ldr	r1, [sp, #24]
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8006706:	63b8      	str	r0, [r7, #56]	; 0x38
    destination_ptr -> fx_dir_entry_number =  entry;
 8006708:	64f9      	str	r1, [r7, #76]	; 0x4c
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800670a:	63fc      	str	r4, [r7, #60]	; 0x3c
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 800670c:	663c      	str	r4, [r7, #96]	; 0x60
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 800670e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    *entry_ptr =  entry;
 8006712:	9b07      	ldr	r3, [sp, #28]
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8006714:	e9c7 4414 	strd	r4, r4, [r7, #80]	; 0x50
    *entry_ptr =  entry;
 8006718:	6019      	str	r1, [r3, #0]
    if (source_dir)
 800671a:	f1bb 0f00 	cmp.w	fp, #0
 800671e:	f000 8105 	beq.w	800692c <_fx_directory_entry_read+0x550>
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8006722:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
    return(FX_SUCCESS);
 8006726:	4620      	mov	r0, r4
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8006728:	9905      	ldr	r1, [sp, #20]
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800672a:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800672e:	e9db 2310 	ldrd	r2, r3, [fp, #64]	; 0x40
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8006732:	e9cb 1a14 	strd	r1, sl, [fp, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8006736:	e9cb 2316 	strd	r2, r3, [fp, #88]	; 0x58
 800673a:	e709      	b.n	8006550 <_fx_directory_entry_read+0x174>
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800673c:	fbb8 f1f2 	udiv	r1, r8, r2
 8006740:	6c83      	ldr	r3, [r0, #72]	; 0x48
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006742:	2203      	movs	r2, #3
 8006744:	2501      	movs	r5, #1
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8006746:	eb01 0903 	add.w	r9, r1, r3
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800674a:	6881      	ldr	r1, [r0, #8]
 800674c:	465b      	mov	r3, fp
 800674e:	9202      	str	r2, [sp, #8]
 8006750:	464a      	mov	r2, r9
 8006752:	e9cd 1500 	strd	r1, r5, [sp]
 8006756:	465d      	mov	r5, fp
 8006758:	f7fd fbf8 	bl	8003f4c <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 800675c:	2800      	cmp	r0, #0
 800675e:	f47f aef7 	bne.w	8006550 <_fx_directory_entry_read+0x174>
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8006762:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        relative_cluster =  relative_sector =  cluster =  0;
 8006764:	46da      	mov	sl, fp
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8006766:	6ab0      	ldr	r0, [r6, #40]	; 0x28
        relative_cluster =  relative_sector =  cluster =  0;
 8006768:	4659      	mov	r1, fp
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800676a:	eba9 0303 	sub.w	r3, r9, r3
        relative_cluster =  relative_sector =  cluster =  0;
 800676e:	f8cd b014 	str.w	fp, [sp, #20]
        byte_offset =  byte_offset -
 8006772:	fb00 8013 	mls	r0, r0, r3, r8
 8006776:	e6a0      	b.n	80064ba <_fx_directory_entry_read+0xde>
                dotflag =  1;
 8006778:	f1bc 0f00 	cmp.w	ip, #0
 800677c:	bf08      	it	eq
 800677e:	f04f 0c01 	moveq.w	ip, #1
 8006782:	e6d1      	b.n	8006528 <_fx_directory_entry_read+0x14c>
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8006784:	683b      	ldr	r3, [r7, #0]
        short_name_ptr[0] =  (CHAR)0;
 8006786:	f04f 0c00 	mov.w	ip, #0
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 800678a:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 800678c:	f885 c000 	strb.w	ip, [r5]
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8006790:	7823      	ldrb	r3, [r4, #0]
 8006792:	2b20      	cmp	r3, #32
 8006794:	f47f af15 	bne.w	80065c2 <_fx_directory_entry_read+0x1e6>
 8006798:	1d2b      	adds	r3, r5, #4
 800679a:	1d22      	adds	r2, r4, #4
 800679c:	4295      	cmp	r5, r2
 800679e:	bf38      	it	cc
 80067a0:	429c      	cmpcc	r4, r3
 80067a2:	f0c0 80e8 	bcc.w	8006976 <_fx_directory_entry_read+0x59a>
 80067a6:	ea45 0304 	orr.w	r3, r5, r4
 80067aa:	079a      	lsls	r2, r3, #30
 80067ac:	f040 80e3 	bne.w	8006976 <_fx_directory_entry_read+0x59a>
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	606b      	str	r3, [r5, #4]
 80067b8:	7a23      	ldrb	r3, [r4, #8]
                dotflag =  1;
 80067ba:	200b      	movs	r0, #11
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80067bc:	722b      	strb	r3, [r5, #8]
 80067be:	7a63      	ldrb	r3, [r4, #9]
 80067c0:	726b      	strb	r3, [r5, #9]
 80067c2:	7aa3      	ldrb	r3, [r4, #10]
 80067c4:	72ab      	strb	r3, [r5, #10]
 80067c6:	e6fc      	b.n	80065c2 <_fx_directory_entry_read+0x1e6>
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80067c8:	5c1b      	ldrb	r3, [r3, r0]
 80067ca:	2be5      	cmp	r3, #229	; 0xe5
 80067cc:	f43f ae88 	beq.w	80064e0 <_fx_directory_entry_read+0x104>
 80067d0:	f003 031f 	and.w	r3, r3, #31
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 80067d4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80067de:	f1ac 080d 	sub.w	r8, ip, #13
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 80067e2:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 80067e6:	f240 80b4 	bls.w	8006952 <_fx_directory_entry_read+0x576>
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 80067ea:	61bb      	str	r3, [r7, #24]
            get_short_name = 1;
 80067ec:	2301      	movs	r3, #1
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80067ee:	9508      	str	r5, [sp, #32]
 80067f0:	4698      	mov	r8, r3
            get_short_name = 1;
 80067f2:	930b      	str	r3, [sp, #44]	; 0x2c
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80067f4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80067f8:	910c      	str	r1, [sp, #48]	; 0x30
 80067fa:	f8dd a018 	ldr.w	sl, [sp, #24]
 80067fe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006802:	e024      	b.n	800684e <_fx_directory_entry_read+0x472>
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8006804:	3020      	adds	r0, #32
 8006806:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006808:	4298      	cmp	r0, r3
 800680a:	d31a      	bcc.n	8006842 <_fx_directory_entry_read+0x466>
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	f43f aea1 	beq.w	8006556 <_fx_directory_entry_read+0x17a>
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8006814:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006816:	9a05      	ldr	r2, [sp, #20]
 8006818:	3b01      	subs	r3, #1
 800681a:	4293      	cmp	r3, r2
 800681c:	d957      	bls.n	80068ce <_fx_directory_entry_read+0x4f2>
                        relative_sector++;
 800681e:	3201      	adds	r2, #1
                        logical_sector++;
 8006820:	f109 0901 	add.w	r9, r9, #1
                        relative_sector++;
 8006824:	9205      	str	r2, [sp, #20]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006826:	68b1      	ldr	r1, [r6, #8]
 8006828:	2303      	movs	r3, #3
 800682a:	2001      	movs	r0, #1
 800682c:	464a      	mov	r2, r9
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	2300      	movs	r3, #0
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	4630      	mov	r0, r6
 8006836:	9100      	str	r1, [sp, #0]
 8006838:	f7fd fb88 	bl	8003f4c <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 800683c:	2800      	cmp	r0, #0
 800683e:	f47f ae87 	bne.w	8006550 <_fx_directory_entry_read+0x174>
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8006842:	68b4      	ldr	r4, [r6, #8]
            entry++;
 8006844:	f10a 0a01 	add.w	sl, sl, #1
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8006848:	4404      	add	r4, r0
        } while (card > 0);
 800684a:	2d00      	cmp	r5, #0
 800684c:	d070      	beq.n	8006930 <_fx_directory_entry_read+0x554>
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800684e:	7825      	ldrb	r5, [r4, #0]
 8006850:	f005 051f 	and.w	r5, r5, #31
 8006854:	3d01      	subs	r5, #1
            if (get_short_name == 0)
 8006856:	f1b8 0f00 	cmp.w	r8, #0
 800685a:	d1d3      	bne.n	8006804 <_fx_directory_entry_read+0x428>
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800685c:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8006860:	4641      	mov	r1, r8
 8006862:	2301      	movs	r3, #1
 8006864:	9006      	str	r0, [sp, #24]
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8006866:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
                    if ((i == 11) || (i == 26))
 800686a:	2b0b      	cmp	r3, #11
 800686c:	d022      	beq.n	80068b4 <_fx_directory_entry_read+0x4d8>
 800686e:	2b1a      	cmp	r3, #26
 8006870:	d020      	beq.n	80068b4 <_fx_directory_entry_read+0x4d8>
                    if (i == 13)
 8006872:	2b0d      	cmp	r3, #13
 8006874:	d023      	beq.n	80068be <_fx_directory_entry_read+0x4e2>
                    if (read_ptr[i + 1])
 8006876:	18e2      	adds	r2, r4, r3
 8006878:	f892 c001 	ldrb.w	ip, [r2, #1]
 800687c:	f1bc 0f00 	cmp.w	ip, #0
 8006880:	d008      	beq.n	8006894 <_fx_directory_entry_read+0x4b8>
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8006882:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8006886:	d01c      	beq.n	80068c2 <_fx_directory_entry_read+0x4e6>
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8006888:	6838      	ldr	r0, [r7, #0]
                            get_short_name = 1;
 800688a:	f04f 0801 	mov.w	r8, #1
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800688e:	9008      	str	r0, [sp, #32]
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8006890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006892:	61b8      	str	r0, [r7, #24]
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8006894:	f892 c000 	ldrb.w	ip, [r2]
 8006898:	f10c 32ff 	add.w	r2, ip, #4294967295
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	2afd      	cmp	r2, #253	; 0xfd
 80068a0:	d808      	bhi.n	80068b4 <_fx_directory_entry_read+0x4d8>
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 80068a2:	eb0e 0201 	add.w	r2, lr, r1
 80068a6:	f8d7 b000 	ldr.w	fp, [r7]
 80068aa:	2afe      	cmp	r2, #254	; 0xfe
 80068ac:	d82d      	bhi.n	800690a <_fx_directory_entry_read+0x52e>
                    j++;
 80068ae:	3101      	adds	r1, #1
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 80068b0:	f80b c002 	strb.w	ip, [fp, r2]
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 80068b4:	3302      	adds	r3, #2
 80068b6:	2b1f      	cmp	r3, #31
 80068b8:	d9d7      	bls.n	800686a <_fx_directory_entry_read+0x48e>
 80068ba:	9806      	ldr	r0, [sp, #24]
 80068bc:	e7a2      	b.n	8006804 <_fx_directory_entry_read+0x428>
 80068be:	230e      	movs	r3, #14
 80068c0:	e7d3      	b.n	800686a <_fx_directory_entry_read+0x48e>
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 80068c2:	f892 c000 	ldrb.w	ip, [r2]
 80068c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80068ca:	d1dd      	bne.n	8006888 <_fx_directory_entry_read+0x4ac>
 80068cc:	e7f2      	b.n	80068b4 <_fx_directory_entry_read+0x4d8>
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80068ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068d0:	aa0f      	add	r2, sp, #60	; 0x3c
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7fc fc36 	bl	8003144 <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 80068d8:	9005      	str	r0, [sp, #20]
 80068da:	2800      	cmp	r0, #0
 80068dc:	f47f ae38 	bne.w	8006550 <_fx_directory_entry_read+0x174>
                        cluster =  next_cluster;
 80068e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80068e2:	2a01      	cmp	r2, #1
                        cluster =  next_cluster;
 80068e4:	920c      	str	r2, [sp, #48]	; 0x30
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80068e6:	f67f ae42 	bls.w	800656e <_fx_directory_entry_read+0x192>
 80068ea:	f242 43a8 	movw	r3, #9384	; 0x24a8
 80068ee:	58f3      	ldr	r3, [r6, r3]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	f67f ae3c 	bls.w	800656e <_fx_directory_entry_read+0x192>
                        relative_cluster++;
 80068f6:	990d      	ldr	r1, [sp, #52]	; 0x34
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80068f8:	f1a2 0902 	sub.w	r9, r2, #2
                        relative_cluster++;
 80068fc:	3101      	adds	r1, #1
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80068fe:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
                        relative_cluster++;
 8006902:	910d      	str	r1, [sp, #52]	; 0x34
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8006904:	fb02 3909 	mla	r9, r2, r9, r3
 8006908:	e78d      	b.n	8006826 <_fx_directory_entry_read+0x44a>
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800690a:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        get_short_name =  1;
 800690c:	f04f 0801 	mov.w	r8, #1
 8006910:	9806      	ldr	r0, [sp, #24]
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8006912:	61bb      	str	r3, [r7, #24]
                        break;
 8006914:	f8cd b020 	str.w	fp, [sp, #32]
 8006918:	e774      	b.n	8006804 <_fx_directory_entry_read+0x428>
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800691a:	f104 0014 	add.w	r0, r4, #20
 800691e:	9105      	str	r1, [sp, #20]
 8006920:	f7fc fbf6 	bl	8003110 <_fx_utility_16_unsigned_read>
 8006924:	9905      	ldr	r1, [sp, #20]
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8006926:	0400      	lsls	r0, r0, #16
 8006928:	6378      	str	r0, [r7, #52]	; 0x34
 800692a:	e6d2      	b.n	80066d2 <_fx_directory_entry_read+0x2f6>
    return(FX_SUCCESS);
 800692c:	4658      	mov	r0, fp
 800692e:	e60f      	b.n	8006550 <_fx_directory_entry_read+0x174>
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8006930:	2301      	movs	r3, #1
 8006932:	f8cd a018 	str.w	sl, [sp, #24]
 8006936:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800693a:	617b      	str	r3, [r7, #20]
    if (get_short_name == 1)
 800693c:	4643      	mov	r3, r8
 800693e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006940:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8006944:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006948:	9d08      	ldr	r5, [sp, #32]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f43f adcc 	beq.w	80064e8 <_fx_directory_entry_read+0x10c>
 8006950:	e5c6      	b.n	80064e0 <_fx_directory_entry_read+0x104>
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8006952:	1d3b      	adds	r3, r7, #4
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8006954:	f10c 0c01 	add.w	ip, ip, #1
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8006958:	4672      	mov	r2, lr
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800695a:	9308      	str	r3, [sp, #32]
 800695c:	4643      	mov	r3, r8
 800695e:	e002      	b.n	8006966 <_fx_directory_entry_read+0x58a>
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8006960:	2bff      	cmp	r3, #255	; 0xff
 8006962:	d804      	bhi.n	800696e <_fx_directory_entry_read+0x592>
 8006964:	683d      	ldr	r5, [r7, #0]
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8006966:	54ea      	strb	r2, [r5, r3]
                i++;
 8006968:	3301      	adds	r3, #1
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800696a:	459c      	cmp	ip, r3
 800696c:	d8f8      	bhi.n	8006960 <_fx_directory_entry_read+0x584>
    get_short_name =  0;
 800696e:	2300      	movs	r3, #0
 8006970:	930b      	str	r3, [sp, #44]	; 0x2c
 8006972:	4698      	mov	r8, r3
 8006974:	e73e      	b.n	80067f4 <_fx_directory_entry_read+0x418>
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8006976:	2320      	movs	r3, #32
 8006978:	702b      	strb	r3, [r5, #0]
 800697a:	7863      	ldrb	r3, [r4, #1]
 800697c:	706b      	strb	r3, [r5, #1]
 800697e:	78a3      	ldrb	r3, [r4, #2]
 8006980:	70ab      	strb	r3, [r5, #2]
 8006982:	78e3      	ldrb	r3, [r4, #3]
 8006984:	70eb      	strb	r3, [r5, #3]
 8006986:	7923      	ldrb	r3, [r4, #4]
 8006988:	712b      	strb	r3, [r5, #4]
 800698a:	7963      	ldrb	r3, [r4, #5]
 800698c:	716b      	strb	r3, [r5, #5]
 800698e:	79a3      	ldrb	r3, [r4, #6]
 8006990:	71ab      	strb	r3, [r5, #6]
 8006992:	79e3      	ldrb	r3, [r4, #7]
 8006994:	71eb      	strb	r3, [r5, #7]
 8006996:	e70f      	b.n	80067b8 <_fx_directory_entry_read+0x3dc>

08006998 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 8006998:	b508      	push	{r3, lr}
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800699a:	4613      	mov	r3, r2
 800699c:	460a      	mov	r2, r1
 800699e:	4601      	mov	r1, r0
 80069a0:	4803      	ldr	r0, [pc, #12]	; (80069b0 <BSP_SD_ReadBlocks_DMA+0x18>)
 80069a2:	f001 fa7f 	bl	8007ea4 <HAL_SD_ReadBlocks_DMA>
  }
  else
  {
    return MSD_OK;
  }
}
 80069a6:	3000      	adds	r0, #0
 80069a8:	bf18      	it	ne
 80069aa:	2001      	movne	r0, #1
 80069ac:	bd08      	pop	{r3, pc}
 80069ae:	bf00      	nop
 80069b0:	20003a30 	.word	0x20003a30

080069b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 80069b4:	b508      	push	{r3, lr}
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80069b6:	4613      	mov	r3, r2
 80069b8:	460a      	mov	r2, r1
 80069ba:	4601      	mov	r1, r0
 80069bc:	4803      	ldr	r0, [pc, #12]	; (80069cc <BSP_SD_WriteBlocks_DMA+0x18>)
 80069be:	f001 fb19 	bl	8007ff4 <HAL_SD_WriteBlocks_DMA>
  }
  else
  {
    return MSD_OK;
  }
}
 80069c2:	3000      	adds	r0, #0
 80069c4:	bf18      	it	ne
 80069c6:	2001      	movne	r0, #1
 80069c8:	bd08      	pop	{r3, pc}
 80069ca:	bf00      	nop
 80069cc:	20003a30 	.word	0x20003a30

080069d0 <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80069d0:	4a5c      	ldr	r2, [pc, #368]	; (8006b44 <BSP_SD_MspInit+0x174>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80069d2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80069d6:	f04f 0c01 	mov.w	ip, #1
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 80069da:	230c      	movs	r3, #12
{
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80069e0:	6c54      	ldr	r4, [r2, #68]	; 0x44
{
 80069e2:	b08d      	sub	sp, #52	; 0x34
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 80069e4:	2704      	movs	r7, #4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80069e6:	f04f 0e02 	mov.w	lr, #2
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80069ea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80069ee:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80069f2:	f04f 0a03 	mov.w	sl, #3
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80069f6:	2500      	movs	r5, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80069f8:	6454      	str	r4, [r2, #68]	; 0x44
{
 80069fa:	4606      	mov	r6, r0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80069fc:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006a00:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006a04:	4850      	ldr	r0, [pc, #320]	; (8006b48 <BSP_SD_MspInit+0x178>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006a06:	f409 6900 	and.w	r9, r9, #2048	; 0x800
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8006a0a:	4c50      	ldr	r4, [pc, #320]	; (8006b4c <BSP_SD_MspInit+0x17c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006a0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a10:	f8dd 900c 	ldr.w	r9, [sp, #12]
  __DMAx_TxRx_CLK_ENABLE();
 8006a14:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
 8006a18:	f449 0980 	orr.w	r9, r9, #4194304	; 0x400000
 8006a1c:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
 8006a20:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
 8006a24:	f409 0980 	and.w	r9, r9, #4194304	; 0x400000
 8006a28:	f8cd 9010 	str.w	r9, [sp, #16]
 8006a2c:	f8dd 9010 	ldr.w	r9, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a30:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
 8006a34:	ea49 0907 	orr.w	r9, r9, r7
 8006a38:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
 8006a3c:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
 8006a40:	ea09 0907 	and.w	r9, r9, r7
 8006a44:	f8cd 9014 	str.w	r9, [sp, #20]
 8006a48:	f8dd 9014 	ldr.w	r9, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a4c:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
 8006a50:	f049 0908 	orr.w	r9, r9, #8
 8006a54:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8006a58:	f44f 3940 	mov.w	r9, #196608	; 0x30000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8006a5e:	f848 1d14 	str.w	r1, [r8, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006a62:	4641      	mov	r1, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a64:	f002 0208 	and.w	r2, r2, #8
 8006a68:	9206      	str	r2, [sp, #24]
 8006a6a:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006a6c:	e9cd ec08 	strd	lr, ip, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8006a70:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006a74:	f000 fd18 	bl	80074a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4835      	ldr	r0, [pc, #212]	; (8006b50 <BSP_SD_MspInit+0x180>)
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8006a7c:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
  gpio_init_structure.Pin = GPIO_PIN_2;
 8006a80:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006a82:	f000 fd11 	bl	80074a8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8006a86:	462a      	mov	r2, r5
 8006a88:	210e      	movs	r1, #14
 8006a8a:	2031      	movs	r0, #49	; 0x31
 8006a8c:	f000 fa6e 	bl	8006f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006a90:	2031      	movs	r0, #49	; 0x31
 8006a92:	f000 faa1 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8006a96:	492f      	ldr	r1, [pc, #188]	; (8006b54 <BSP_SD_MspInit+0x184>)
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8006a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8006aa0:	6021      	str	r1, [r4, #0]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8006aa6:	6434      	str	r4, [r6, #64]	; 0x40
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8006aa8:	4620      	mov	r0, r4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006aaa:	9201      	str	r2, [sp, #4]
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8006aac:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006aae:	60e5      	str	r5, [r4, #12]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006ab0:	f8c4 b018 	str.w	fp, [r4, #24]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006ab4:	e9c4 3501 	strd	r3, r5, [r4, #4]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006abc:	e9c4 1304 	strd	r1, r3, [r4, #16]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8006ac0:	2320      	movs	r3, #32
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006ac2:	e9c4 820b 	strd	r8, r2, [r4, #44]	; 0x2c
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8006ac6:	e9c4 3907 	strd	r3, r9, [r4, #28]
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006aca:	e9c4 7a09 	strd	r7, sl, [r4, #36]	; 0x24
  HAL_DMA_DeInit(&dma_rx_handle);
 8006ace:	f000 fb77 	bl	80071c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fad8 	bl	8007088 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8006ad8:	4c1f      	ldr	r4, [pc, #124]	; (8006b58 <BSP_SD_MspInit+0x188>)
 8006ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ade:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006ae2:	2340      	movs	r3, #64	; 0x40
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8006ae4:	491d      	ldr	r1, [pc, #116]	; (8006b5c <BSP_SD_MspInit+0x18c>)
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8006ae6:	6062      	str	r2, [r4, #4]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8006aec:	63f4      	str	r4, [r6, #60]	; 0x3c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8006aee:	4620      	mov	r0, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006af0:	60a3      	str	r3, [r4, #8]
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8006af2:	6021      	str	r1, [r4, #0]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006af4:	60e5      	str	r5, [r4, #12]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006af6:	f8c4 b018 	str.w	fp, [r4, #24]
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8006afa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8006afe:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b00:	e9c4 c204 	strd	ip, r2, [r4, #16]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8006b04:	2220      	movs	r2, #32
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8006b06:	e9c4 2907 	strd	r2, r9, [r4, #28]
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b0a:	9a01      	ldr	r2, [sp, #4]
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b0c:	e9c4 7a09 	strd	r7, sl, [r4, #36]	; 0x24
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b10:	6322      	str	r2, [r4, #48]	; 0x30
  HAL_DMA_DeInit(&dma_tx_handle);
 8006b12:	f000 fb55 	bl	80071c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fab6 	bl	8007088 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	210f      	movs	r1, #15
 8006b20:	203b      	movs	r0, #59	; 0x3b
 8006b22:	f000 fa23 	bl	8006f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8006b26:	203b      	movs	r0, #59	; 0x3b
 8006b28:	f000 fa56 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	210f      	movs	r1, #15
 8006b30:	2045      	movs	r0, #69	; 0x45
 8006b32:	f000 fa1b 	bl	8006f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8006b36:	2045      	movs	r0, #69	; 0x45
 8006b38:	f000 fa4e 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
}
 8006b3c:	b00d      	add	sp, #52	; 0x34
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	bf00      	nop
 8006b44:	40023800 	.word	0x40023800
 8006b48:	40020800 	.word	0x40020800
 8006b4c:	200000ac 	.word	0x200000ac
 8006b50:	40020c00 	.word	0x40020c00
 8006b54:	40026458 	.word	0x40026458
 8006b58:	2000010c 	.word	0x2000010c
 8006b5c:	400264a0 	.word	0x400264a0

08006b60 <BSP_SD_Detect_MspInit>:
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <BSP_SD_Detect_MspInit+0x3c>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8006b62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 8006b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b68:	f042 0204 	orr.w	r2, r2, #4
{
 8006b6c:	b570      	push	{r4, r5, r6, lr}
  SD_DETECT_GPIO_CLK_ENABLE();
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
{
 8006b70:	b086      	sub	sp, #24
  SD_DETECT_GPIO_CLK_ENABLE();
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8006b74:	2600      	movs	r6, #0
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8006b76:	9001      	str	r0, [sp, #4]
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006b78:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
  SD_DETECT_GPIO_CLK_ENABLE();
 8006b7c:	f003 0304 	and.w	r3, r3, #4
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006b80:	2501      	movs	r5, #1
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8006b82:	2403      	movs	r4, #3
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006b84:	a901      	add	r1, sp, #4
  SD_DETECT_GPIO_CLK_ENABLE();
 8006b86:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006b88:	f500 30f4 	add.w	r0, r0, #124928	; 0x1e800
  SD_DETECT_GPIO_CLK_ENABLE();
 8006b8c:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8006b8e:	9602      	str	r6, [sp, #8]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8006b90:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006b94:	f000 fc88 	bl	80074a8 <HAL_GPIO_Init>
}
 8006b98:	b006      	add	sp, #24
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	40023800 	.word	0x40023800

08006ba0 <BSP_SD_Init>:
{ 
 8006ba0:	b510      	push	{r4, lr}
  uSdHandle.Instance = SDMMC1;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <BSP_SD_Init+0x74>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ba4:	2400      	movs	r4, #0
  uSdHandle.Instance = SDMMC1;
 8006ba6:	4a1c      	ldr	r2, [pc, #112]	; (8006c18 <BSP_SD_Init+0x78>)
{ 
 8006ba8:	b082      	sub	sp, #8
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8006baa:	4618      	mov	r0, r3
 8006bac:	4621      	mov	r1, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8006bae:	619c      	str	r4, [r3, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006bb0:	e9c3 2400 	strd	r2, r4, [r3]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006bb4:	e9c3 4402 	strd	r4, r4, [r3, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006bb8:	e9c3 4404 	strd	r4, r4, [r3, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8006bbc:	f7ff ffd0 	bl	8006b60 <BSP_SD_Detect_MspInit>
  __IO uint8_t      status = SD_PRESENT;
 8006bc0:	2301      	movs	r3, #1
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8006bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bc6:	4815      	ldr	r0, [pc, #84]	; (8006c1c <BSP_SD_Init+0x7c>)
  __IO uint8_t      status = SD_PRESENT;
 8006bc8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8006bcc:	f000 fd72 	bl	80076b4 <HAL_GPIO_ReadPin>
 8006bd0:	2801      	cmp	r0, #1
 8006bd2:	d101      	bne.n	8006bd8 <BSP_SD_Init+0x38>
    status = SD_NOT_PRESENT;
 8006bd4:	f88d 4007 	strb.w	r4, [sp, #7]
  return status;
 8006bd8:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8006bdc:	b2e4      	uxtb	r4, r4
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8006bde:	2c01      	cmp	r4, #1
 8006be0:	d002      	beq.n	8006be8 <BSP_SD_Init+0x48>
    return MSD_ERROR_SD_NOT_PRESENT;
 8006be2:	2002      	movs	r0, #2
}
 8006be4:	b002      	add	sp, #8
 8006be6:	bd10      	pop	{r4, pc}
  BSP_SD_MspInit(&uSdHandle, NULL);
 8006be8:	480a      	ldr	r0, [pc, #40]	; (8006c14 <BSP_SD_Init+0x74>)
 8006bea:	2100      	movs	r1, #0
 8006bec:	f7ff fef0 	bl	80069d0 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8006bf0:	4808      	ldr	r0, [pc, #32]	; (8006c14 <BSP_SD_Init+0x74>)
 8006bf2:	f001 fd5d 	bl	80086b0 <HAL_SD_Init>
 8006bf6:	b110      	cbz	r0, 8006bfe <BSP_SD_Init+0x5e>
    sd_state = MSD_ERROR;
 8006bf8:	4620      	mov	r0, r4
}
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd10      	pop	{r4, pc}
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c02:	4804      	ldr	r0, [pc, #16]	; (8006c14 <BSP_SD_Init+0x74>)
 8006c04:	f001 fe72 	bl	80088ec <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8006c08:	3000      	adds	r0, #0
 8006c0a:	bf18      	it	ne
 8006c0c:	2001      	movne	r0, #1
}
 8006c0e:	b002      	add	sp, #8
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	20003a30 	.word	0x20003a30
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40020800 	.word	0x40020800

08006c20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006c20:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006c22:	4803      	ldr	r0, [pc, #12]	; (8006c30 <BSP_SD_GetCardState+0x10>)
 8006c24:	f001 feee 	bl	8008a04 <HAL_SD_GetCardState>
}
 8006c28:	3804      	subs	r0, #4
 8006c2a:	bf18      	it	ne
 8006c2c:	2001      	movne	r0, #1
 8006c2e:	bd08      	pop	{r3, pc}
 8006c30:	20003a30 	.word	0x20003a30

08006c34 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop

08006c38 <HAL_SD_AbortCallback>:
{
 8006c38:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8006c3a:	f7ff fffb 	bl	8006c34 <BSP_SD_AbortCallback>
}
 8006c3e:	bd08      	pop	{r3, pc}

08006c40 <HAL_SD_TxCpltCallback>:
{
 8006c40:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006c42:	f7fa f87b 	bl	8000d3c <BSP_SD_WriteCpltCallback>
}
 8006c46:	bd08      	pop	{r3, pc}

08006c48 <HAL_SD_RxCpltCallback>:
{
 8006c48:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006c4a:	f7fa f87d 	bl	8000d48 <BSP_SD_ReadCpltCallback>
}
 8006c4e:	bd08      	pop	{r3, pc}

08006c50 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006c52:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 8006c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c56:	f042 0201 	orr.w	r2, r2, #1
{
 8006c5a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
{
 8006c5e:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 8006c62:	2001      	movs	r0, #1
{
 8006c64:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 8006c66:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 8006c68:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 8006c6a:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 8006c6c:	9201      	str	r2, [sp, #4]
 8006c6e:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 8006c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c72:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006c7e:	9202      	str	r2, [sp, #8]
 8006c80:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c84:	f042 0204 	orr.w	r2, r2, #4
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8c:	f002 0204 	and.w	r2, r2, #4
 8006c90:	9203      	str	r2, [sp, #12]
 8006c92:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c96:	432a      	orrs	r2, r5
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
 8006c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9c:	402a      	ands	r2, r5
 8006c9e:	9204      	str	r2, [sp, #16]
 8006ca0:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca4:	f042 0210 	orr.w	r2, r2, #16
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8006caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cac:	f002 0210 	and.w	r2, r2, #16
 8006cb0:	9205      	str	r2, [sp, #20]
 8006cb2:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8006cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb6:	f042 0220 	orr.w	r2, r2, #32
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cbe:	f002 0220 	and.w	r2, r2, #32
 8006cc2:	9206      	str	r2, [sp, #24]
 8006cc4:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8006cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8006cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006ce0:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 8006ce4:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8006ce8:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006cee:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006cf0:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006cf2:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006cf4:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 8006cf6:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006cf8:	482a      	ldr	r0, [pc, #168]	; (8006da4 <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006cfa:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006cfc:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006cfe:	f000 fbd3 	bl	80074a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006d02:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006d06:	4621      	mov	r1, r4
 8006d08:	4827      	ldr	r0, [pc, #156]	; (8006da8 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006d0c:	f000 fbcc 	bl	80074a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8006d10:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006d14:	4621      	mov	r1, r4
 8006d16:	4825      	ldr	r0, [pc, #148]	; (8006dac <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006d1a:	f000 fbc5 	bl	80074a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 8006d1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006d22:	4621      	mov	r1, r4
 8006d24:	4822      	ldr	r0, [pc, #136]	; (8006db0 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006d28:	f000 fbbe 	bl	80074a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8006d2c:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006d30:	4621      	mov	r1, r4
 8006d32:	4820      	ldr	r0, [pc, #128]	; (8006db4 <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8006d34:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006d36:	f000 fbb7 	bl	80074a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8006d3a:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	481e      	ldr	r0, [pc, #120]	; (8006db8 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8006d40:	4c1e      	ldr	r4, [pc, #120]	; (8006dbc <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006d44:	f000 fbb0 	bl	80074a8 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8006d48:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006d4c:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8006d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8006d56:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8006d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006d5c:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8006d62:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006d64:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8006d66:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006d6a:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d6c:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 8006d6e:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006d70:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d72:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006d74:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 8006d76:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d78:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 8006d7a:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006d7c:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8006d7e:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 8006d82:	f000 fa1d 	bl	80071c0 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f97e 	bl	8007088 <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	210f      	movs	r1, #15
 8006d90:	2038      	movs	r0, #56	; 0x38
 8006d92:	f000 f8eb 	bl	8006f6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006d96:	2038      	movs	r0, #56	; 0x38
 8006d98:	f000 f91e 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
}
 8006d9c:	b00e      	add	sp, #56	; 0x38
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	40023800 	.word	0x40023800
 8006da4:	40020800 	.word	0x40020800
 8006da8:	40020c00 	.word	0x40020c00
 8006dac:	40021000 	.word	0x40021000
 8006db0:	40021400 	.word	0x40021400
 8006db4:	40021800 	.word	0x40021800
 8006db8:	40021c00 	.word	0x40021c00
 8006dbc:	20000198 	.word	0x20000198
 8006dc0:	40026410 	.word	0x40026410

08006dc4 <BSP_SDRAM_Init>:
{
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006dc8:	483d      	ldr	r0, [pc, #244]	; (8006ec0 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 8006dca:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006dcc:	4d3d      	ldr	r5, [pc, #244]	; (8006ec4 <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006dce:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 8006dd0:	4c3d      	ldr	r4, [pc, #244]	; (8006ec8 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8006dd2:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8006dd6:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 8006dda:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 8006dde:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006de0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 8006de4:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8006de8:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 8006dec:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006dee:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006df0:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006df2:	4628      	mov	r0, r5
 8006df4:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 8006df6:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 8006df8:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8006dfa:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006dfc:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 8006dfe:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 8006e02:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 8006e06:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006e0a:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006e0c:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006e0e:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8006e12:	f8c5 8010 	str.w	r8, [r5, #16]
 8006e16:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8006ed0 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006e1a:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 8006e1e:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006e22:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006e26:	f7ff ff13 	bl	8006c50 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006e2e:	4c27      	ldr	r4, [pc, #156]	; (8006ecc <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006e30:	f001 fdfe 	bl	8008a30 <HAL_SDRAM_Init>
 8006e34:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e36:	4621      	mov	r1, r4
 8006e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e40:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 8006e42:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006e44:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e48:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 8006e4c:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006e4e:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 8006e50:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e52:	f001 fe0f 	bl	8008a74 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8006e56:	4638      	mov	r0, r7
 8006e58:	f000 f862 	bl	8006f20 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e64:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 8006e68:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e6c:	f001 fe02 	bl	8008a74 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006e70:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 8006e74:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e76:	4621      	mov	r1, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006e7e:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 8006e82:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e84:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 8006e88:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e8a:	f001 fdf3 	bl	8008a74 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 8006e8e:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e92:	4621      	mov	r1, r4
 8006e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e98:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 8006e9a:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 8006e9c:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e9e:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 8006ea2:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ea6:	f001 fde5 	bl	8008a74 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f240 6103 	movw	r1, #1539	; 0x603
 8006eb0:	f001 fdfa 	bl	8008aa8 <HAL_SDRAM_ProgramRefreshRate>
}
 8006eb4:	f89b 0000 	ldrb.w	r0, [fp]
 8006eb8:	b003      	add	sp, #12
 8006eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebe:	bf00      	nop
 8006ec0:	a0000140 	.word	0xa0000140
 8006ec4:	20003ab4 	.word	0x20003ab4
 8006ec8:	2000017c 	.word	0x2000017c
 8006ecc:	2000016c 	.word	0x2000016c
 8006ed0:	20000060 	.word	0x20000060

08006ed4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop

08006ed8 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8006ed8:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eda:	2003      	movs	r0, #3
{
 8006edc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ee4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ee6:	f000 f82d 	bl	8006f44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006eea:	200f      	movs	r0, #15
 8006eec:	f001 fdf0 	bl	8008ad0 <HAL_InitTick>
  HAL_MspInit();
 8006ef0:	f7ff fff0 	bl	8006ed4 <HAL_MspInit>
}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	bd08      	pop	{r3, pc}
 8006ef8:	40023c00 	.word	0x40023c00

08006efc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006efc:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <HAL_IncTick+0x10>)
 8006efe:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <HAL_IncTick+0x14>)
 8006f00:	6811      	ldr	r1, [r2, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	440b      	add	r3, r1
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20003ae8 	.word	0x20003ae8
 8006f10:	20000061 	.word	0x20000061

08006f14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006f14:	4b01      	ldr	r3, [pc, #4]	; (8006f1c <HAL_GetTick+0x8>)
 8006f16:	6818      	ldr	r0, [r3, #0]
}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20003ae8 	.word	0x20003ae8

08006f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006f24:	f7ff fff6 	bl	8006f14 <HAL_GetTick>
 8006f28:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f2a:	1c63      	adds	r3, r4, #1
 8006f2c:	d002      	beq.n	8006f34 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <HAL_Delay+0x20>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f34:	f7ff ffee 	bl	8006f14 <HAL_GetTick>
 8006f38:	1b40      	subs	r0, r0, r5
 8006f3a:	42a0      	cmp	r0, r4
 8006f3c:	d3fa      	bcc.n	8006f34 <HAL_Delay+0x14>
  {
  }
}
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	20000061 	.word	0x20000061

08006f44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f44:	4907      	ldr	r1, [pc, #28]	; (8006f64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f46:	0200      	lsls	r0, r0, #8
 8006f48:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f4a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f4c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f50:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f52:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006f56:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f5c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f5e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8006f60:	60c8      	str	r0, [r1, #12]
 8006f62:	4770      	bx	lr
 8006f64:	e000ed00 	.word	0xe000ed00
 8006f68:	05fa0000 	.word	0x05fa0000

08006f6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <HAL_NVIC_SetPriority+0x60>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f74:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f76:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f7a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f7c:	2d04      	cmp	r5, #4
 8006f7e:	bf28      	it	cs
 8006f80:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f82:	2c06      	cmp	r4, #6
 8006f84:	d918      	bls.n	8006fb8 <HAL_NVIC_SetPriority+0x4c>
 8006f86:	3b03      	subs	r3, #3
 8006f88:	f04f 34ff 	mov.w	r4, #4294967295
 8006f8c:	409c      	lsls	r4, r3
 8006f8e:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006f96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f98:	fa02 f205 	lsl.w	r2, r2, r5
 8006f9c:	ea21 0102 	bic.w	r1, r1, r2
 8006fa0:	fa01 f203 	lsl.w	r2, r1, r3
 8006fa4:	ea42 0204 	orr.w	r2, r2, r4
 8006fa8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8006fac:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8006fae:	db06      	blt.n	8006fbe <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <HAL_NVIC_SetPriority+0x64>)
 8006fb2:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006fb4:	bc30      	pop	{r4, r5}
 8006fb6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fb8:	2400      	movs	r4, #0
 8006fba:	4623      	mov	r3, r4
 8006fbc:	e7e9      	b.n	8006f92 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fbe:	f000 000f 	and.w	r0, r0, #15
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <HAL_NVIC_SetPriority+0x68>)
 8006fc4:	541a      	strb	r2, [r3, r0]
 8006fc6:	bc30      	pop	{r4, r5}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	e000ed00 	.word	0xe000ed00
 8006fd0:	e000e400 	.word	0xe000e400
 8006fd4:	e000ed14 	.word	0xe000ed14

08006fd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	db07      	blt.n	8006fec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fdc:	f000 011f 	and.w	r1, r0, #31
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	0940      	lsrs	r0, r0, #5
 8006fe4:	4a02      	ldr	r2, [pc, #8]	; (8006ff0 <HAL_NVIC_EnableIRQ+0x18>)
 8006fe6:	408b      	lsls	r3, r1
 8006fe8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	e000e100 	.word	0xe000e100

08006ff4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006ff4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006ff8:	4a04      	ldr	r2, [pc, #16]	; (800700c <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	4904      	ldr	r1, [pc, #16]	; (8007010 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006ffe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007004:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8007006:	6048      	str	r0, [r1, #4]
}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	e000ed00 	.word	0xe000ed00
 8007010:	e000ed90 	.word	0xe000ed90

08007014 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007014:	4a06      	ldr	r2, [pc, #24]	; (8007030 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007016:	f040 0001 	orr.w	r0, r0, #1
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_MPU_Enable+0x20>)
 800701c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800701e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007024:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800702a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800702e:	4770      	bx	lr
 8007030:	e000ed00 	.word	0xe000ed00
 8007034:	e000ed90 	.word	0xe000ed90

08007038 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007038:	4a12      	ldr	r2, [pc, #72]	; (8007084 <HAL_MPU_ConfigRegion+0x4c>)
 800703a:	7843      	ldrb	r3, [r0, #1]
 800703c:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800703e:	7801      	ldrb	r1, [r0, #0]
 8007040:	b911      	cbnz	r1, 8007048 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8007042:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8007044:	6111      	str	r1, [r2, #16]
 8007046:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8007048:	6843      	ldr	r3, [r0, #4]
{
 800704a:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800704c:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800704e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007050:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007052:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007054:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007056:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007058:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800705c:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800705e:	430b      	orrs	r3, r1
 8007060:	7a01      	ldrb	r1, [r0, #8]
 8007062:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007066:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007068:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800706c:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800706e:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8007072:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007076:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800707a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 800707e:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007080:	6113      	str	r3, [r2, #16]
}
 8007082:	4770      	bx	lr
 8007084:	e000ed90 	.word	0xe000ed90

08007088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800708c:	f7ff ff42 	bl	8006f14 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007090:	2c00      	cmp	r4, #0
 8007092:	d053      	beq.n	800713c <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007094:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007096:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8007098:	2100      	movs	r1, #0
 800709a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800709c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80070a0:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80070a2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070ac:	e005      	b.n	80070ba <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070ae:	f7ff ff31 	bl	8006f14 <HAL_GetTick>
 80070b2:	1b40      	subs	r0, r0, r5
 80070b4:	2805      	cmp	r0, #5
 80070b6:	d83a      	bhi.n	800712e <HAL_DMA_Init+0xa6>
 80070b8:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	07d1      	lsls	r1, r2, #31
 80070be:	d4f6      	bmi.n	80070ae <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070c0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80070c4:	68e1      	ldr	r1, [r4, #12]
 80070c6:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 80070c8:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ca:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d0:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80070d2:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d4:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d8:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070da:	4d35      	ldr	r5, [pc, #212]	; (80071b0 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070dc:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070de:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070e0:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80070e4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070e6:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070e8:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070ec:	d028      	beq.n	8007140 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070f0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070f2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070f6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	4d2e      	ldr	r5, [pc, #184]	; (80071b4 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80070fc:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070fe:	3a10      	subs	r2, #16
 8007100:	492d      	ldr	r1, [pc, #180]	; (80071b8 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007102:	482e      	ldr	r0, [pc, #184]	; (80071bc <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007104:	fba5 5202 	umull	r5, r2, r5, r2
 8007108:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800710a:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800710c:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800710e:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007110:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 8007112:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007114:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007118:	bf88      	it	hi
 800711a:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800711c:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800711e:	4083      	lsls	r3, r0
  return HAL_OK;
 8007120:	4610      	mov	r0, r2
 8007122:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007124:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007126:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007128:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800712e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007130:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8007132:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007134:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007136:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800713a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800713c:	2001      	movs	r0, #1
}
 800713e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007140:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8007144:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007146:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 800714a:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800714e:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8007150:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8007152:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007154:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8007158:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800715a:	2d00      	cmp	r5, #0
 800715c:	d0cc      	beq.n	80070f8 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800715e:	b17e      	cbz	r6, 8007180 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007160:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8007164:	d016      	beq.n	8007194 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007166:	2f02      	cmp	r7, #2
 8007168:	d903      	bls.n	8007172 <HAL_DMA_Init+0xea>
 800716a:	2f03      	cmp	r7, #3
 800716c:	d1c4      	bne.n	80070f8 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800716e:	01ea      	lsls	r2, r5, #7
 8007170:	d5c2      	bpl.n	80070f8 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8007172:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007174:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8007176:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007178:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800717a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8007180:	2f01      	cmp	r7, #1
 8007182:	d003      	beq.n	800718c <HAL_DMA_Init+0x104>
 8007184:	d3f3      	bcc.n	800716e <HAL_DMA_Init+0xe6>
 8007186:	2f02      	cmp	r7, #2
 8007188:	d1b6      	bne.n	80070f8 <HAL_DMA_Init+0x70>
 800718a:	e7f0      	b.n	800716e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800718c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007190:	d1b2      	bne.n	80070f8 <HAL_DMA_Init+0x70>
 8007192:	e7ee      	b.n	8007172 <HAL_DMA_Init+0xea>
    switch (tmp)
 8007194:	2f03      	cmp	r7, #3
 8007196:	d8af      	bhi.n	80070f8 <HAL_DMA_Init+0x70>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <HAL_DMA_Init+0x118>)
 800719a:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800719e:	bf00      	nop
 80071a0:	08007173 	.word	0x08007173
 80071a4:	0800716f 	.word	0x0800716f
 80071a8:	08007173 	.word	0x08007173
 80071ac:	0800718d 	.word	0x0800718d
 80071b0:	f010803f 	.word	0xf010803f
 80071b4:	aaaaaaab 	.word	0xaaaaaaab
 80071b8:	fffffc00 	.word	0xfffffc00
 80071bc:	0800b4a8 	.word	0x0800b4a8

080071c0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d035      	beq.n	8007230 <HAL_DMA_DeInit+0x70>
 80071c4:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80071c6:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80071ca:	b2c0      	uxtb	r0, r0
 80071cc:	2802      	cmp	r0, #2
 80071ce:	d031      	beq.n	8007234 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 80071d0:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 80071d2:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071d4:	b2d1      	uxtb	r1, r2
{
 80071d6:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071d8:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 80071da:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071dc:	4d16      	ldr	r5, [pc, #88]	; (8007238 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80071de:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 80071e0:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071e4:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071e8:	4d14      	ldr	r5, [pc, #80]	; (800723c <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 80071ea:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071ec:	0909      	lsrs	r1, r1, #4
 80071ee:	4c14      	ldr	r4, [pc, #80]	; (8007240 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 80071f0:	6010      	str	r0, [r2, #0]
 80071f2:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071f4:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 80071f6:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071f8:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 80071fc:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80071fe:	bf88      	it	hi
 8007200:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 8007202:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007204:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 8007206:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8007208:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800720a:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 800720c:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800720e:	65dd      	str	r5, [r3, #92]	; 0x5c
 8007210:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 8007212:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007214:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007216:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8007218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800721c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8007220:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8007224:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8007228:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 800722c:	bc70      	pop	{r4, r5, r6}
 800722e:	4770      	bx	lr
    return HAL_ERROR;
 8007230:	2001      	movs	r0, #1
 8007232:	4770      	bx	lr
}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	aaaaaaab 	.word	0xaaaaaaab
 800723c:	0800b4a8 	.word	0x0800b4a8
 8007240:	fffffc00 	.word	0xfffffc00

08007244 <HAL_DMA_Start_IT>:
{
 8007244:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8007246:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800724a:	2c01      	cmp	r4, #1
 800724c:	d038      	beq.n	80072c0 <HAL_DMA_Start_IT+0x7c>
 800724e:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007250:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007254:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8007256:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8007258:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800725c:	d129      	bne.n	80072b2 <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800725e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8007260:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007262:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007264:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007268:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800726a:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800726c:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800726e:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007270:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8007274:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8007276:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007278:	d026      	beq.n	80072c8 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 800727a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800727c:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800727e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8007280:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8007282:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007284:	408b      	lsls	r3, r1
 8007286:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	f043 0316 	orr.w	r3, r3, #22
 800728e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007290:	6963      	ldr	r3, [r4, #20]
 8007292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007296:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8007298:	b11a      	cbz	r2, 80072a2 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f043 0308 	orr.w	r3, r3, #8
 80072a0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80072a2:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 80072a6:	f042 0201 	orr.w	r2, r2, #1
}
 80072aa:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 80072ac:	6022      	str	r2, [r4, #0]
}
 80072ae:	bcf0      	pop	{r4, r5, r6, r7}
 80072b0:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 80072b2:	2200      	movs	r2, #0
    status = HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 80072b6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	bcf0      	pop	{r4, r5, r6, r7}
 80072be:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80072c0:	2302      	movs	r3, #2
}
 80072c2:	bcf0      	pop	{r4, r5, r6, r7}
 80072c4:	4618      	mov	r0, r3
 80072c6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80072c8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80072ca:	60e1      	str	r1, [r4, #12]
 80072cc:	e7d7      	b.n	800727e <HAL_DMA_Start_IT+0x3a>
 80072ce:	bf00      	nop

080072d0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072d0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80072d4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072d6:	2a02      	cmp	r2, #2
 80072d8:	d003      	beq.n	80072e2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072da:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80072dc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072e0:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80072e2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80072e4:	2105      	movs	r1, #5
  return HAL_OK;
 80072e6:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 80072e8:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80072ec:	6813      	ldr	r3, [r2, #0]
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	6013      	str	r3, [r2, #0]
}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop

080072f8 <HAL_DMA_IRQHandler>:
{
 80072f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fa:	4604      	mov	r4, r0
 80072fc:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 80072fe:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007300:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8007302:	4966      	ldr	r1, [pc, #408]	; (800749c <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 8007304:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8007306:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007308:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 800730c:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 800730e:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007310:	422a      	tst	r2, r5
 8007312:	d003      	beq.n	800731c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	6808      	ldr	r0, [r1, #0]
 8007318:	0740      	lsls	r0, r0, #29
 800731a:	d459      	bmi.n	80073d0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800731c:	2201      	movs	r2, #1
 800731e:	409a      	lsls	r2, r3
 8007320:	422a      	tst	r2, r5
 8007322:	d003      	beq.n	800732c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007324:	6821      	ldr	r1, [r4, #0]
 8007326:	6949      	ldr	r1, [r1, #20]
 8007328:	0608      	lsls	r0, r1, #24
 800732a:	d474      	bmi.n	8007416 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800732c:	2204      	movs	r2, #4
 800732e:	409a      	lsls	r2, r3
 8007330:	422a      	tst	r2, r5
 8007332:	d003      	beq.n	800733c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007334:	6821      	ldr	r1, [r4, #0]
 8007336:	6809      	ldr	r1, [r1, #0]
 8007338:	0789      	lsls	r1, r1, #30
 800733a:	d466      	bmi.n	800740a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800733c:	2210      	movs	r2, #16
 800733e:	409a      	lsls	r2, r3
 8007340:	422a      	tst	r2, r5
 8007342:	d003      	beq.n	800734c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007344:	6821      	ldr	r1, [r4, #0]
 8007346:	6808      	ldr	r0, [r1, #0]
 8007348:	0700      	lsls	r0, r0, #28
 800734a:	d44b      	bmi.n	80073e4 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800734c:	2220      	movs	r2, #32
 800734e:	409a      	lsls	r2, r3
 8007350:	422a      	tst	r2, r5
 8007352:	d014      	beq.n	800737e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007354:	6821      	ldr	r1, [r4, #0]
 8007356:	6808      	ldr	r0, [r1, #0]
 8007358:	06c0      	lsls	r0, r0, #27
 800735a:	d510      	bpl.n	800737e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800735c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800735e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8007362:	2a05      	cmp	r2, #5
 8007364:	d063      	beq.n	800742e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007366:	680b      	ldr	r3, [r1, #0]
 8007368:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800736c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800736e:	d07e      	beq.n	800746e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007370:	0319      	lsls	r1, r3, #12
 8007372:	f140 8089 	bpl.w	8007488 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8007376:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007378:	b10b      	cbz	r3, 800737e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800737a:	4620      	mov	r0, r4
 800737c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800737e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007380:	b323      	cbz	r3, 80073cc <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007382:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007384:	07da      	lsls	r2, r3, #31
 8007386:	d51a      	bpl.n	80073be <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8007388:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800738a:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800738c:	4b44      	ldr	r3, [pc, #272]	; (80074a0 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800738e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8007392:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8007396:	6813      	ldr	r3, [r2, #0]
 8007398:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800739c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	e002      	b.n	80073a8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80073a2:	6813      	ldr	r3, [r2, #0]
 80073a4:	07db      	lsls	r3, r3, #31
 80073a6:	d504      	bpl.n	80073b2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	3301      	adds	r3, #1
 80073ac:	42b3      	cmp	r3, r6
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	d9f7      	bls.n	80073a2 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80073b2:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80073b4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80073b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80073ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80073be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80073c0:	b123      	cbz	r3, 80073cc <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80073c2:	4620      	mov	r0, r4
}
 80073c4:	b003      	add	sp, #12
 80073c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80073ca:	4718      	bx	r3
}
 80073cc:	b003      	add	sp, #12
 80073ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073d0:	6808      	ldr	r0, [r1, #0]
 80073d2:	f020 0004 	bic.w	r0, r0, #4
 80073d6:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80073d8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	6562      	str	r2, [r4, #84]	; 0x54
 80073e2:	e79b      	b.n	800731c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073e4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073e6:	680a      	ldr	r2, [r1, #0]
 80073e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073ec:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073ee:	d118      	bne.n	8007422 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073f0:	05d2      	lsls	r2, r2, #23
 80073f2:	d403      	bmi.n	80073fc <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f4:	680a      	ldr	r2, [r1, #0]
 80073f6:	f022 0208 	bic.w	r2, r2, #8
 80073fa:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80073fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80073fe:	2a00      	cmp	r2, #0
 8007400:	d0a4      	beq.n	800734c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8007402:	4620      	mov	r0, r4
 8007404:	4790      	blx	r2
 8007406:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007408:	e7a0      	b.n	800734c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800740a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800740c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800740e:	f042 0204 	orr.w	r2, r2, #4
 8007412:	6562      	str	r2, [r4, #84]	; 0x54
 8007414:	e792      	b.n	800733c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007416:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007418:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800741a:	f042 0202 	orr.w	r2, r2, #2
 800741e:	6562      	str	r2, [r4, #84]	; 0x54
 8007420:	e784      	b.n	800732c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007422:	0311      	lsls	r1, r2, #12
 8007424:	d5ea      	bpl.n	80073fc <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007426:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007428:	2a00      	cmp	r2, #0
 800742a:	d1ea      	bne.n	8007402 <HAL_DMA_IRQHandler+0x10a>
 800742c:	e78e      	b.n	800734c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800742e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007430:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007432:	f022 0216 	bic.w	r2, r2, #22
 8007436:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007438:	694a      	ldr	r2, [r1, #20]
 800743a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800743e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007440:	b338      	cbz	r0, 8007492 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007442:	680a      	ldr	r2, [r1, #0]
 8007444:	f022 0208 	bic.w	r2, r2, #8
 8007448:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800744a:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 800744c:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800744e:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8007454:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007456:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8007458:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800745c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8007460:	2a00      	cmp	r2, #0
 8007462:	d0b3      	beq.n	80073cc <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8007464:	4620      	mov	r0, r4
}
 8007466:	b003      	add	sp, #12
 8007468:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800746c:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800746e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007472:	d180      	bne.n	8007376 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007474:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007476:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007478:	f022 0210 	bic.w	r2, r2, #16
 800747c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800747e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007482:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8007486:	e776      	b.n	8007376 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8007488:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800748a:	2b00      	cmp	r3, #0
 800748c:	f47f af75 	bne.w	800737a <HAL_DMA_IRQHandler+0x82>
 8007490:	e775      	b.n	800737e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007492:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007494:	2a00      	cmp	r2, #0
 8007496:	d1d4      	bne.n	8007442 <HAL_DMA_IRQHandler+0x14a>
 8007498:	e7d7      	b.n	800744a <HAL_DMA_IRQHandler+0x152>
 800749a:	bf00      	nop
 800749c:	20000068 	.word	0x20000068
 80074a0:	1b4e81b5 	.word	0x1b4e81b5

080074a4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80074a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80074a6:	4770      	bx	lr

080074a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4688      	mov	r8, r1
 80074ae:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80074b0:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074b2:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074b6:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80076b0 <HAL_GPIO_Init+0x208>
 80074ba:	e003      	b.n	80074c4 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 80074bc:	3401      	adds	r4, #1
 80074be:	2c10      	cmp	r4, #16
 80074c0:	f000 80b6 	beq.w	8007630 <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 80074c4:	2301      	movs	r3, #1
 80074c6:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074c8:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d1f5      	bne.n	80074bc <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074d4:	0067      	lsls	r7, r4, #1
 80074d6:	2103      	movs	r1, #3
 80074d8:	f025 0c10 	bic.w	ip, r5, #16
 80074dc:	40b9      	lsls	r1, r7
 80074de:	f10c 33ff 	add.w	r3, ip, #4294967295
 80074e2:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d810      	bhi.n	800750a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 80074e8:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80074ea:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80074ee:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 80074f2:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80074f6:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80074f8:	40be      	lsls	r6, r7
 80074fa:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80074fe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007500:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007502:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007506:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8007508:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800750a:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800750c:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007510:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007514:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007518:	fa06 f607 	lsl.w	r6, r6, r7
 800751c:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 8007520:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007522:	d115      	bne.n	8007550 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8007524:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007526:	f004 0c07 	and.w	ip, r4, #7
 800752a:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800752e:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8007532:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007536:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800753a:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800753e:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007542:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007546:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800754a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 800754e:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 8007550:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007552:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007556:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007558:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800755a:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800755c:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 8007560:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007562:	d5ab      	bpl.n	80074bc <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007564:	4b48      	ldr	r3, [pc, #288]	; (8007688 <HAL_GPIO_Init+0x1e0>)
 8007566:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800756a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800756e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8007570:	4619      	mov	r1, r3
 8007572:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007576:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800757e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007582:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007584:	644f      	str	r7, [r1, #68]	; 0x44
 8007586:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007588:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800758c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8007590:	9701      	str	r7, [sp, #4]
 8007592:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8007594:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007596:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800759a:	4f3c      	ldr	r7, [pc, #240]	; (800768c <HAL_GPIO_Init+0x1e4>)
 800759c:	42b8      	cmp	r0, r7
 800759e:	d020      	beq.n	80075e2 <HAL_GPIO_Init+0x13a>
 80075a0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80075a4:	42b8      	cmp	r0, r7
 80075a6:	d046      	beq.n	8007636 <HAL_GPIO_Init+0x18e>
 80075a8:	4f39      	ldr	r7, [pc, #228]	; (8007690 <HAL_GPIO_Init+0x1e8>)
 80075aa:	42b8      	cmp	r0, r7
 80075ac:	d048      	beq.n	8007640 <HAL_GPIO_Init+0x198>
 80075ae:	4f39      	ldr	r7, [pc, #228]	; (8007694 <HAL_GPIO_Init+0x1ec>)
 80075b0:	42b8      	cmp	r0, r7
 80075b2:	d04a      	beq.n	800764a <HAL_GPIO_Init+0x1a2>
 80075b4:	4f38      	ldr	r7, [pc, #224]	; (8007698 <HAL_GPIO_Init+0x1f0>)
 80075b6:	42b8      	cmp	r0, r7
 80075b8:	d04c      	beq.n	8007654 <HAL_GPIO_Init+0x1ac>
 80075ba:	4f38      	ldr	r7, [pc, #224]	; (800769c <HAL_GPIO_Init+0x1f4>)
 80075bc:	42b8      	cmp	r0, r7
 80075be:	d053      	beq.n	8007668 <HAL_GPIO_Init+0x1c0>
 80075c0:	4f37      	ldr	r7, [pc, #220]	; (80076a0 <HAL_GPIO_Init+0x1f8>)
 80075c2:	42b8      	cmp	r0, r7
 80075c4:	d055      	beq.n	8007672 <HAL_GPIO_Init+0x1ca>
 80075c6:	4f37      	ldr	r7, [pc, #220]	; (80076a4 <HAL_GPIO_Init+0x1fc>)
 80075c8:	42b8      	cmp	r0, r7
 80075ca:	d048      	beq.n	800765e <HAL_GPIO_Init+0x1b6>
 80075cc:	4f36      	ldr	r7, [pc, #216]	; (80076a8 <HAL_GPIO_Init+0x200>)
 80075ce:	42b8      	cmp	r0, r7
 80075d0:	d054      	beq.n	800767c <HAL_GPIO_Init+0x1d4>
 80075d2:	4f36      	ldr	r7, [pc, #216]	; (80076ac <HAL_GPIO_Init+0x204>)
 80075d4:	42b8      	cmp	r0, r7
 80075d6:	bf0c      	ite	eq
 80075d8:	2709      	moveq	r7, #9
 80075da:	270a      	movne	r7, #10
 80075dc:	fa07 f303 	lsl.w	r3, r7, r3
 80075e0:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 80075e2:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80075e4:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 80075e6:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80075ea:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 80075ec:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80075f0:	bf54      	ite	pl
 80075f2:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80075f4:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075f6:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 80075f8:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 80075fc:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8007600:	bf54      	ite	pl
 8007602:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007604:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007606:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8007608:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 800760c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8007610:	bf54      	ite	pl
 8007612:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007614:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007616:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8007618:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 800761c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8007620:	bf54      	ite	pl
 8007622:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8007624:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8007626:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8007628:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800762c:	f47f af4a 	bne.w	80074c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007630:	b003      	add	sp, #12
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007636:	2701      	movs	r7, #1
 8007638:	fa07 f303 	lsl.w	r3, r7, r3
 800763c:	4319      	orrs	r1, r3
 800763e:	e7d0      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 8007640:	2702      	movs	r7, #2
 8007642:	fa07 f303 	lsl.w	r3, r7, r3
 8007646:	4319      	orrs	r1, r3
 8007648:	e7cb      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 800764a:	2703      	movs	r7, #3
 800764c:	fa07 f303 	lsl.w	r3, r7, r3
 8007650:	4319      	orrs	r1, r3
 8007652:	e7c6      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 8007654:	2704      	movs	r7, #4
 8007656:	fa07 f303 	lsl.w	r3, r7, r3
 800765a:	4319      	orrs	r1, r3
 800765c:	e7c1      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 800765e:	2707      	movs	r7, #7
 8007660:	fa07 f303 	lsl.w	r3, r7, r3
 8007664:	4319      	orrs	r1, r3
 8007666:	e7bc      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 8007668:	2705      	movs	r7, #5
 800766a:	fa07 f303 	lsl.w	r3, r7, r3
 800766e:	4319      	orrs	r1, r3
 8007670:	e7b7      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 8007672:	2706      	movs	r7, #6
 8007674:	fa07 f303 	lsl.w	r3, r7, r3
 8007678:	4319      	orrs	r1, r3
 800767a:	e7b2      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 800767c:	2708      	movs	r7, #8
 800767e:	fa07 f303 	lsl.w	r3, r7, r3
 8007682:	4319      	orrs	r1, r3
 8007684:	e7ad      	b.n	80075e2 <HAL_GPIO_Init+0x13a>
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800
 800768c:	40020000 	.word	0x40020000
 8007690:	40020800 	.word	0x40020800
 8007694:	40020c00 	.word	0x40020c00
 8007698:	40021000 	.word	0x40021000
 800769c:	40021400 	.word	0x40021400
 80076a0:	40021800 	.word	0x40021800
 80076a4:	40021c00 	.word	0x40021c00
 80076a8:	40022000 	.word	0x40022000
 80076ac:	40022400 	.word	0x40022400
 80076b0:	40013c00 	.word	0x40013c00

080076b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076b4:	6903      	ldr	r3, [r0, #16]
 80076b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80076b8:	bf14      	ite	ne
 80076ba:	2001      	movne	r0, #1
 80076bc:	2000      	moveq	r0, #0
 80076be:	4770      	bx	lr

080076c0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80076c0:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076c2:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80076c4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80076c6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 80076ca:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80076cc:	6411      	str	r1, [r2, #64]	; 0x40
{
 80076ce:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80076d0:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076d2:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 80076d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80076d8:	9201      	str	r2, [sp, #4]
 80076da:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80076e2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80076e4:	f7ff fc16 	bl	8006f14 <HAL_GetTick>
 80076e8:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076ea:	e005      	b.n	80076f8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076ec:	f7ff fc12 	bl	8006f14 <HAL_GetTick>
 80076f0:	1b40      	subs	r0, r0, r5
 80076f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80076f6:	d817      	bhi.n	8007728 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076f8:	6863      	ldr	r3, [r4, #4]
 80076fa:	03da      	lsls	r2, r3, #15
 80076fc:	d5f6      	bpl.n	80076ec <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80076fe:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007700:	4d0c      	ldr	r5, [pc, #48]	; (8007734 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007708:	f7ff fc04 	bl	8006f14 <HAL_GetTick>
 800770c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800770e:	e005      	b.n	800771c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007710:	f7ff fc00 	bl	8006f14 <HAL_GetTick>
 8007714:	1b00      	subs	r0, r0, r4
 8007716:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800771a:	d805      	bhi.n	8007728 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800771c:	686b      	ldr	r3, [r5, #4]
 800771e:	039b      	lsls	r3, r3, #14
 8007720:	d5f6      	bpl.n	8007710 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007722:	2000      	movs	r0, #0
}
 8007724:	b003      	add	sp, #12
 8007726:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8007728:	2003      	movs	r0, #3
}
 800772a:	b003      	add	sp, #12
 800772c:	bd30      	pop	{r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	40023800 	.word	0x40023800
 8007734:	40007000 	.word	0x40007000

08007738 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007738:	2800      	cmp	r0, #0
 800773a:	f000 814c 	beq.w	80079d6 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800773e:	6803      	ldr	r3, [r0, #0]
{
 8007740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007744:	07dd      	lsls	r5, r3, #31
{
 8007746:	b082      	sub	sp, #8
 8007748:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800774a:	d535      	bpl.n	80077b8 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800774c:	49ac      	ldr	r1, [pc, #688]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 800774e:	688a      	ldr	r2, [r1, #8]
 8007750:	f002 020c 	and.w	r2, r2, #12
 8007754:	2a04      	cmp	r2, #4
 8007756:	f000 80ff 	beq.w	8007958 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775a:	688a      	ldr	r2, [r1, #8]
 800775c:	f002 020c 	and.w	r2, r2, #12
 8007760:	2a08      	cmp	r2, #8
 8007762:	f000 80f5 	beq.w	8007950 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007766:	6863      	ldr	r3, [r4, #4]
 8007768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776c:	d010      	beq.n	8007790 <HAL_RCC_OscConfig+0x58>
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 811a 	beq.w	80079a8 <HAL_RCC_OscConfig+0x270>
 8007774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007778:	4ba1      	ldr	r3, [pc, #644]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	f000 8164 	beq.w	8007a48 <HAL_RCC_OscConfig+0x310>
 8007780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e004      	b.n	800779a <HAL_RCC_OscConfig+0x62>
 8007790:	4a9b      	ldr	r2, [pc, #620]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007798:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779a:	f7ff fbbb 	bl	8006f14 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779e:	4d98      	ldr	r5, [pc, #608]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80077a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a2:	e005      	b.n	80077b0 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077a4:	f7ff fbb6 	bl	8006f14 <HAL_GetTick>
 80077a8:	1b80      	subs	r0, r0, r6
 80077aa:	2864      	cmp	r0, #100	; 0x64
 80077ac:	f200 80ef 	bhi.w	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	039a      	lsls	r2, r3, #14
 80077b4:	d5f6      	bpl.n	80077a4 <HAL_RCC_OscConfig+0x6c>
 80077b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077b8:	079f      	lsls	r7, r3, #30
 80077ba:	d442      	bmi.n	8007842 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077bc:	071a      	lsls	r2, r3, #28
 80077be:	d517      	bpl.n	80077f0 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077c0:	6963      	ldr	r3, [r4, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80b1 	beq.w	800792a <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077c8:	4b8d      	ldr	r3, [pc, #564]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 80077ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077cc:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80077d4:	f7ff fb9e 	bl	8006f14 <HAL_GetTick>
 80077d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077da:	e005      	b.n	80077e8 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077dc:	f7ff fb9a 	bl	8006f14 <HAL_GetTick>
 80077e0:	1b80      	subs	r0, r0, r6
 80077e2:	2802      	cmp	r0, #2
 80077e4:	f200 80d3 	bhi.w	800798e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80077ea:	079b      	lsls	r3, r3, #30
 80077ec:	d5f6      	bpl.n	80077dc <HAL_RCC_OscConfig+0xa4>
 80077ee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077f0:	075d      	lsls	r5, r3, #29
 80077f2:	d56b      	bpl.n	80078cc <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077f4:	4b82      	ldr	r3, [pc, #520]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 80077f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f8:	00d0      	lsls	r0, r2, #3
 80077fa:	f100 80ee 	bmi.w	80079da <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8007800:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007806:	641a      	str	r2, [r3, #64]	; 0x40
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007812:	4b7c      	ldr	r3, [pc, #496]	; (8007a04 <HAL_RCC_OscConfig+0x2cc>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	05d1      	lsls	r1, r2, #23
 8007818:	f140 80a8 	bpl.w	800796c <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800781c:	68a3      	ldr	r3, [r4, #8]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d039      	beq.n	8007896 <HAL_RCC_OscConfig+0x15e>
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80db 	beq.w	80079de <HAL_RCC_OscConfig+0x2a6>
 8007828:	2b05      	cmp	r3, #5
 800782a:	4b75      	ldr	r3, [pc, #468]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 800782c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800782e:	f000 8113 	beq.w	8007a58 <HAL_RCC_OscConfig+0x320>
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	671a      	str	r2, [r3, #112]	; 0x70
 8007838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800783a:	f022 0204 	bic.w	r2, r2, #4
 800783e:	671a      	str	r2, [r3, #112]	; 0x70
 8007840:	e02e      	b.n	80078a0 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007842:	4a6f      	ldr	r2, [pc, #444]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 8007844:	6891      	ldr	r1, [r2, #8]
 8007846:	f011 0f0c 	tst.w	r1, #12
 800784a:	d063      	beq.n	8007914 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800784c:	6891      	ldr	r1, [r2, #8]
 800784e:	f001 010c 	and.w	r1, r1, #12
 8007852:	2908      	cmp	r1, #8
 8007854:	d05b      	beq.n	800790e <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 80e1 	beq.w	8007a20 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 800785e:	4b68      	ldr	r3, [pc, #416]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 8007860:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007862:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8007864:	f042 0201 	orr.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800786a:	f7ff fb53 	bl	8006f14 <HAL_GetTick>
 800786e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007870:	e005      	b.n	800787e <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007872:	f7ff fb4f 	bl	8006f14 <HAL_GetTick>
 8007876:	1b80      	subs	r0, r0, r6
 8007878:	2802      	cmp	r0, #2
 800787a:	f200 8088 	bhi.w	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	0798      	lsls	r0, r3, #30
 8007882:	d5f6      	bpl.n	8007872 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	6922      	ldr	r2, [r4, #16]
 8007888:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800788c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007890:	602b      	str	r3, [r5, #0]
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	e792      	b.n	80077bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007896:	4a5a      	ldr	r2, [pc, #360]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 8007898:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a0:	f7ff fb38 	bl	8006f14 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a4:	4e56      	ldr	r6, [pc, #344]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80078a6:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a8:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ac:	e005      	b.n	80078ba <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ae:	f7ff fb31 	bl	8006f14 <HAL_GetTick>
 80078b2:	eba0 0008 	sub.w	r0, r0, r8
 80078b6:	42b8      	cmp	r0, r7
 80078b8:	d869      	bhi.n	800798e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80078bc:	079b      	lsls	r3, r3, #30
 80078be:	d5f6      	bpl.n	80078ae <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078c0:	b125      	cbz	r5, 80078cc <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c2:	4a4f      	ldr	r2, [pc, #316]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 80078c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80078c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078cc:	69a0      	ldr	r0, [r4, #24]
 80078ce:	b1d0      	cbz	r0, 8007906 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078d0:	4b4b      	ldr	r3, [pc, #300]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	f002 020c 	and.w	r2, r2, #12
 80078d8:	2a08      	cmp	r2, #8
 80078da:	f000 80c5 	beq.w	8007a68 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078de:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e0:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e2:	f000 80eb 	beq.w	8007abc <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ea:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80078ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80078ee:	f7ff fb11 	bl	8006f14 <HAL_GetTick>
 80078f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f4:	e004      	b.n	8007900 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f6:	f7ff fb0d 	bl	8006f14 <HAL_GetTick>
 80078fa:	1b40      	subs	r0, r0, r5
 80078fc:	2802      	cmp	r0, #2
 80078fe:	d846      	bhi.n	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	019b      	lsls	r3, r3, #6
 8007904:	d4f7      	bmi.n	80078f6 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007906:	2000      	movs	r0, #0
}
 8007908:	b002      	add	sp, #8
 800790a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800790e:	6852      	ldr	r2, [r2, #4]
 8007910:	0256      	lsls	r6, r2, #9
 8007912:	d4a0      	bmi.n	8007856 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007914:	4a3a      	ldr	r2, [pc, #232]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	0795      	lsls	r5, r2, #30
 800791a:	d53c      	bpl.n	8007996 <HAL_RCC_OscConfig+0x25e>
 800791c:	68e2      	ldr	r2, [r4, #12]
 800791e:	2a01      	cmp	r2, #1
 8007920:	d039      	beq.n	8007996 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8007922:	2001      	movs	r0, #1
}
 8007924:	b002      	add	sp, #8
 8007926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800792a:	4b35      	ldr	r3, [pc, #212]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 800792c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800792e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8007930:	f022 0201 	bic.w	r2, r2, #1
 8007934:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007936:	f7ff faed 	bl	8006f14 <HAL_GetTick>
 800793a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800793c:	e004      	b.n	8007948 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800793e:	f7ff fae9 	bl	8006f14 <HAL_GetTick>
 8007942:	1b80      	subs	r0, r0, r6
 8007944:	2802      	cmp	r0, #2
 8007946:	d822      	bhi.n	800798e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007948:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800794a:	079f      	lsls	r7, r3, #30
 800794c:	d4f7      	bmi.n	800793e <HAL_RCC_OscConfig+0x206>
 800794e:	e74e      	b.n	80077ee <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007950:	684a      	ldr	r2, [r1, #4]
 8007952:	0250      	lsls	r0, r2, #9
 8007954:	f57f af07 	bpl.w	8007766 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007958:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	0391      	lsls	r1, r2, #14
 800795e:	f57f af2b 	bpl.w	80077b8 <HAL_RCC_OscConfig+0x80>
 8007962:	6862      	ldr	r2, [r4, #4]
 8007964:	2a00      	cmp	r2, #0
 8007966:	f47f af27 	bne.w	80077b8 <HAL_RCC_OscConfig+0x80>
 800796a:	e7da      	b.n	8007922 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 800796c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800796e:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8007970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007974:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007976:	f7ff facd 	bl	8006f14 <HAL_GetTick>
 800797a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	05da      	lsls	r2, r3, #23
 8007980:	f53f af4c 	bmi.w	800781c <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007984:	f7ff fac6 	bl	8006f14 <HAL_GetTick>
 8007988:	1bc0      	subs	r0, r0, r7
 800798a:	2864      	cmp	r0, #100	; 0x64
 800798c:	d9f6      	bls.n	800797c <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 800798e:	2003      	movs	r0, #3
}
 8007990:	b002      	add	sp, #8
 8007992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007996:	491a      	ldr	r1, [pc, #104]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 8007998:	6920      	ldr	r0, [r4, #16]
 800799a:	680a      	ldr	r2, [r1, #0]
 800799c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80079a0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80079a4:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a6:	e709      	b.n	80077bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079a8:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
 80079aa:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ac:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80079bc:	f7ff faaa 	bl	8006f14 <HAL_GetTick>
 80079c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079c2:	e004      	b.n	80079ce <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c4:	f7ff faa6 	bl	8006f14 <HAL_GetTick>
 80079c8:	1b80      	subs	r0, r0, r6
 80079ca:	2864      	cmp	r0, #100	; 0x64
 80079cc:	d8df      	bhi.n	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	039b      	lsls	r3, r3, #14
 80079d2:	d4f7      	bmi.n	80079c4 <HAL_RCC_OscConfig+0x28c>
 80079d4:	e6ef      	b.n	80077b6 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80079d6:	2001      	movs	r0, #1
}
 80079d8:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 80079da:	2500      	movs	r5, #0
 80079dc:	e719      	b.n	8007812 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079de:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e6:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	671a      	str	r2, [r3, #112]	; 0x70
 80079ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079f0:	f022 0204 	bic.w	r2, r2, #4
 80079f4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80079f6:	f7ff fa8d 	bl	8006f14 <HAL_GetTick>
 80079fa:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079fc:	e009      	b.n	8007a12 <HAL_RCC_OscConfig+0x2da>
 80079fe:	bf00      	nop
 8007a00:	40023800 	.word	0x40023800
 8007a04:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a08:	f7ff fa84 	bl	8006f14 <HAL_GetTick>
 8007a0c:	1bc0      	subs	r0, r0, r7
 8007a0e:	4540      	cmp	r0, r8
 8007a10:	d8bd      	bhi.n	800798e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a12:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007a14:	0798      	lsls	r0, r3, #30
 8007a16:	d4f7      	bmi.n	8007a08 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	f43f af57 	beq.w	80078cc <HAL_RCC_OscConfig+0x194>
 8007a1e:	e750      	b.n	80078c2 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8007a20:	4b41      	ldr	r3, [pc, #260]	; (8007b28 <HAL_RCC_OscConfig+0x3f0>)
 8007a22:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a24:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8007a26:	f022 0201 	bic.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007a2c:	f7ff fa72 	bl	8006f14 <HAL_GetTick>
 8007a30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a32:	e004      	b.n	8007a3e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a34:	f7ff fa6e 	bl	8006f14 <HAL_GetTick>
 8007a38:	1b80      	subs	r0, r0, r6
 8007a3a:	2802      	cmp	r0, #2
 8007a3c:	d8a7      	bhi.n	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	0799      	lsls	r1, r3, #30
 8007a42:	d4f7      	bmi.n	8007a34 <HAL_RCC_OscConfig+0x2fc>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	e6b9      	b.n	80077bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	e6a0      	b.n	800779a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a58:	f042 0204 	orr.w	r2, r2, #4
 8007a5c:	671a      	str	r2, [r3, #112]	; 0x70
 8007a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a60:	f042 0201 	orr.w	r2, r2, #1
 8007a64:	671a      	str	r2, [r3, #112]	; 0x70
 8007a66:	e71b      	b.n	80078a0 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a68:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8007a6a:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a6c:	f43f af5a 	beq.w	8007924 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a74:	69e1      	ldr	r1, [r4, #28]
 8007a76:	428b      	cmp	r3, r1
 8007a78:	f47f af53 	bne.w	8007922 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a80:	6a21      	ldr	r1, [r4, #32]
 8007a82:	428b      	cmp	r3, r1
 8007a84:	f47f af4d 	bne.w	8007922 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a8e:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a90:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8007a94:	f47f af45 	bne.w	8007922 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a9a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aa2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8007aa6:	f47f af3c 	bne.w	8007922 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007aac:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ab0:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8007ab4:	bf14      	ite	ne
 8007ab6:	2001      	movne	r0, #1
 8007ab8:	2000      	moveq	r0, #0
 8007aba:	e733      	b.n	8007924 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8007abc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac0:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8007ac2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007ac4:	f7ff fa26 	bl	8006f14 <HAL_GetTick>
 8007ac8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aca:	e005      	b.n	8007ad8 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007acc:	f7ff fa22 	bl	8006f14 <HAL_GetTick>
 8007ad0:	1b80      	subs	r0, r0, r6
 8007ad2:	2802      	cmp	r0, #2
 8007ad4:	f63f af5b 	bhi.w	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	0199      	lsls	r1, r3, #6
 8007adc:	d4f6      	bmi.n	8007acc <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ade:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8007ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8007aea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aee:	4c0e      	ldr	r4, [pc, #56]	; (8007b28 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007af0:	0852      	lsrs	r2, r2, #1
 8007af2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007af6:	3a01      	subs	r2, #1
 8007af8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007b0a:	f7ff fa03 	bl	8006f14 <HAL_GetTick>
 8007b0e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b10:	e005      	b.n	8007b1e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b12:	f7ff f9ff 	bl	8006f14 <HAL_GetTick>
 8007b16:	1b40      	subs	r0, r0, r5
 8007b18:	2802      	cmp	r0, #2
 8007b1a:	f63f af38 	bhi.w	800798e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	019a      	lsls	r2, r3, #6
 8007b22:	d5f6      	bpl.n	8007b12 <HAL_RCC_OscConfig+0x3da>
 8007b24:	e6ef      	b.n	8007906 <HAL_RCC_OscConfig+0x1ce>
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800

08007b2c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b2c:	b178      	cbz	r0, 8007b4e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b2e:	4a5e      	ldr	r2, [pc, #376]	; (8007ca8 <HAL_RCC_ClockConfig+0x17c>)
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	428b      	cmp	r3, r1
 8007b38:	d20b      	bcs.n	8007b52 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	6813      	ldr	r3, [r2, #0]
 8007b3c:	f023 030f 	bic.w	r3, r3, #15
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b44:	6813      	ldr	r3, [r2, #0]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	428b      	cmp	r3, r1
 8007b4c:	d001      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8007b4e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8007b50:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b52:	6803      	ldr	r3, [r0, #0]
{
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b58:	079d      	lsls	r5, r3, #30
 8007b5a:	d514      	bpl.n	8007b86 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5c:	075c      	lsls	r4, r3, #29
 8007b5e:	d504      	bpl.n	8007b6a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b60:	4c52      	ldr	r4, [pc, #328]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007b62:	68a2      	ldr	r2, [r4, #8]
 8007b64:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8007b68:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b6a:	071a      	lsls	r2, r3, #28
 8007b6c:	d504      	bpl.n	8007b78 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b6e:	4c4f      	ldr	r4, [pc, #316]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007b70:	68a2      	ldr	r2, [r4, #8]
 8007b72:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8007b76:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b78:	4c4c      	ldr	r4, [pc, #304]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007b7a:	6885      	ldr	r5, [r0, #8]
 8007b7c:	68a2      	ldr	r2, [r4, #8]
 8007b7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007b82:	432a      	orrs	r2, r5
 8007b84:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b86:	07df      	lsls	r7, r3, #31
 8007b88:	4604      	mov	r4, r0
 8007b8a:	460d      	mov	r5, r1
 8007b8c:	d521      	bpl.n	8007bd2 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b8e:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b90:	4b46      	ldr	r3, [pc, #280]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b92:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b94:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b96:	d063      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b98:	2a02      	cmp	r2, #2
 8007b9a:	d079      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b9c:	0799      	lsls	r1, r3, #30
 8007b9e:	d528      	bpl.n	8007bf2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ba0:	4942      	ldr	r1, [pc, #264]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ba2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ba6:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba8:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007bb2:	f7ff f9af 	bl	8006f14 <HAL_GetTick>
 8007bb6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb8:	e004      	b.n	8007bc4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bba:	f7ff f9ab 	bl	8006f14 <HAL_GetTick>
 8007bbe:	1bc0      	subs	r0, r0, r7
 8007bc0:	4540      	cmp	r0, r8
 8007bc2:	d863      	bhi.n	8007c8c <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc4:	68b3      	ldr	r3, [r6, #8]
 8007bc6:	6862      	ldr	r2, [r4, #4]
 8007bc8:	f003 030c 	and.w	r3, r3, #12
 8007bcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007bd0:	d1f3      	bne.n	8007bba <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bd2:	4a35      	ldr	r2, [pc, #212]	; (8007ca8 <HAL_RCC_ClockConfig+0x17c>)
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	42ab      	cmp	r3, r5
 8007bdc:	d90c      	bls.n	8007bf8 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	f023 030f 	bic.w	r3, r3, #15
 8007be4:	432b      	orrs	r3, r5
 8007be6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007be8:	6813      	ldr	r3, [r2, #0]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	42ab      	cmp	r3, r5
 8007bf0:	d002      	beq.n	8007bf8 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8007bf2:	2001      	movs	r0, #1
}
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	075a      	lsls	r2, r3, #29
 8007bfc:	d506      	bpl.n	8007c0c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bfe:	492b      	ldr	r1, [pc, #172]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007c00:	68e0      	ldr	r0, [r4, #12]
 8007c02:	688a      	ldr	r2, [r1, #8]
 8007c04:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007c08:	4302      	orrs	r2, r0
 8007c0a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c0c:	071b      	lsls	r3, r3, #28
 8007c0e:	d507      	bpl.n	8007c20 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c10:	4a26      	ldr	r2, [pc, #152]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007c12:	6921      	ldr	r1, [r4, #16]
 8007c14:	6893      	ldr	r3, [r2, #8]
 8007c16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007c1e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c20:	4922      	ldr	r1, [pc, #136]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007c22:	688b      	ldr	r3, [r1, #8]
 8007c24:	f003 030c 	and.w	r3, r3, #12
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d01c      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x13a>
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d12b      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c30:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c32:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c38:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c3a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007c3e:	d12a      	bne.n	8007c96 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c40:	481b      	ldr	r0, [pc, #108]	; (8007cb0 <HAL_RCC_ClockConfig+0x184>)
 8007c42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007c46:	fba1 0100 	umull	r0, r1, r1, r0
 8007c4a:	f7f8 fc0d 	bl	8000468 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007c4e:	4b17      	ldr	r3, [pc, #92]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007c56:	3301      	adds	r3, #1
 8007c58:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8007c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c5e:	e003      	b.n	8007c68 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c60:	039e      	lsls	r6, r3, #14
 8007c62:	d49d      	bmi.n	8007ba0 <HAL_RCC_ClockConfig+0x74>
 8007c64:	e7c5      	b.n	8007bf2 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c68:	4a10      	ldr	r2, [pc, #64]	; (8007cac <HAL_RCC_ClockConfig+0x180>)
 8007c6a:	4c13      	ldr	r4, [pc, #76]	; (8007cb8 <HAL_RCC_ClockConfig+0x18c>)
 8007c6c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8007c6e:	4813      	ldr	r0, [pc, #76]	; (8007cbc <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c70:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007c74:	4912      	ldr	r1, [pc, #72]	; (8007cc0 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8007c76:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c78:	5ca2      	ldrb	r2, [r4, r2]
 8007c7a:	40d3      	lsrs	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8007c7e:	f000 ff27 	bl	8008ad0 <HAL_InitTick>
  return HAL_OK;
 8007c82:	2000      	movs	r0, #0
}
 8007c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8007c88:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <HAL_RCC_ClockConfig+0x184>)
 8007c8a:	e7ed      	b.n	8007c68 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8007c8c:	2003      	movs	r0, #3
 8007c8e:	e7b1      	b.n	8007bf4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c90:	0198      	lsls	r0, r3, #6
 8007c92:	d485      	bmi.n	8007ba0 <HAL_RCC_ClockConfig+0x74>
 8007c94:	e7ad      	b.n	8007bf2 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c96:	4807      	ldr	r0, [pc, #28]	; (8007cb4 <HAL_RCC_ClockConfig+0x188>)
 8007c98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	fba1 0100 	umull	r0, r1, r1, r0
 8007ca2:	f7f8 fbe1 	bl	8000468 <__aeabi_uldivmod>
 8007ca6:	e7d2      	b.n	8007c4e <HAL_RCC_ClockConfig+0x122>
 8007ca8:	40023c00 	.word	0x40023c00
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	00f42400 	.word	0x00f42400
 8007cb4:	017d7840 	.word	0x017d7840
 8007cb8:	0800b4c4 	.word	0x0800b4c4
 8007cbc:	20000064 	.word	0x20000064
 8007cc0:	20000068 	.word	0x20000068

08007cc4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc4:	4916      	ldr	r1, [pc, #88]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8007cc6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc8:	688b      	ldr	r3, [r1, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d01b      	beq.n	8007d0a <HAL_RCC_GetSysClockFreq+0x46>
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d117      	bne.n	8007d06 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cd6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cd8:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cde:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007ce0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007ce4:	d113      	bne.n	8007d0e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce6:	480f      	ldr	r0, [pc, #60]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x60>)
 8007ce8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007cec:	fba1 0100 	umull	r0, r1, r1, r0
 8007cf0:	f7f8 fbba 	bl	8000468 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x5c>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8007d00:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007d04:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8007d06:	4807      	ldr	r0, [pc, #28]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8007d08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8007d0a:	4807      	ldr	r0, [pc, #28]	; (8007d28 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8007d0c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d0e:	4806      	ldr	r0, [pc, #24]	; (8007d28 <HAL_RCC_GetSysClockFreq+0x64>)
 8007d10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007d14:	2300      	movs	r3, #0
 8007d16:	fba1 0100 	umull	r0, r1, r1, r0
 8007d1a:	f7f8 fba5 	bl	8000468 <__aeabi_uldivmod>
 8007d1e:	e7e9      	b.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x30>
 8007d20:	40023800 	.word	0x40023800
 8007d24:	00f42400 	.word	0x00f42400
 8007d28:	017d7840 	.word	0x017d7840

08007d2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d2c:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007d2e:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007d30:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d32:	4905      	ldr	r1, [pc, #20]	; (8007d48 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d34:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007d38:	6808      	ldr	r0, [r1, #0]
 8007d3a:	5cd3      	ldrb	r3, [r2, r3]
}
 8007d3c:	40d8      	lsrs	r0, r3
 8007d3e:	4770      	bx	lr
 8007d40:	40023800 	.word	0x40023800
 8007d44:	0800b4d4 	.word	0x0800b4d4
 8007d48:	20000068 	.word	0x20000068

08007d4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007d4e:	4a05      	ldr	r2, [pc, #20]	; (8007d64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007d50:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d52:	4905      	ldr	r1, [pc, #20]	; (8007d68 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d54:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007d58:	6808      	ldr	r0, [r1, #0]
 8007d5a:	5cd3      	ldrb	r3, [r2, r3]
}
 8007d5c:	40d8      	lsrs	r0, r3
 8007d5e:	4770      	bx	lr
 8007d60:	40023800 	.word	0x40023800
 8007d64:	0800b4d4 	.word	0x0800b4d4
 8007d68:	20000068 	.word	0x20000068

08007d6c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d6e:	220f      	movs	r2, #15
 8007d70:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	f002 0203 	and.w	r2, r2, #3
 8007d78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007d80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8007d88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	08db      	lsrs	r3, r3, #3
{
 8007d8e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007d90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d94:	4c05      	ldr	r4, [pc, #20]	; (8007dac <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007d96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d98:	6823      	ldr	r3, [r4, #0]
}
 8007d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	600b      	str	r3, [r1, #0]
}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800
 8007dac:	40023c00 	.word	0x40023c00

08007db0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007db0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dba:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	b089      	sub	sp, #36	; 0x24
 8007dc8:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007dca:	f7ff f8a3 	bl	8006f14 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8007dce:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8007dd0:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007dd2:	2108      	movs	r1, #8
 8007dd4:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8007dd6:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007dda:	f001 fa6f 	bl	80092bc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dde:	4604      	mov	r4, r0
 8007de0:	b118      	cbz	r0, 8007dea <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8007de2:	4620      	mov	r0, r4
 8007de4:	b009      	add	sp, #36	; 0x24
 8007de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007dea:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8007dec:	6828      	ldr	r0, [r5, #0]
 8007dee:	0409      	lsls	r1, r1, #16
 8007df0:	f001 fc94 	bl	800971c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007df4:	4604      	mov	r4, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d1f3      	bne.n	8007de2 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 8U;
 8007dfe:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007e00:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e02:	9006      	str	r0, [sp, #24]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e04:	9202      	str	r2, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e06:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 8007e08:	9303      	str	r3, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e0a:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007e0c:	9104      	str	r1, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e0e:	a902      	add	r1, sp, #8
 8007e10:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e12:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e14:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e16:	f001 fa3b 	bl	8009290 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007e1a:	6828      	ldr	r0, [r5, #0]
 8007e1c:	f001 fd34 	bl	8009888 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e20:	4604      	mov	r4, r0
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d1dd      	bne.n	8007de2 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8007e26:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007e28:	f240 482a 	movw	r8, #1066	; 0x42a
 8007e2c:	6828      	ldr	r0, [r5, #0]
 8007e2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e30:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007e34:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007e36:	d118      	bne.n	8007e6a <SD_FindSCR+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007e38:	029b      	lsls	r3, r3, #10
 8007e3a:	d407      	bmi.n	8007e4c <SD_FindSCR+0x8c>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e3c:	f7ff f86a 	bl	8006f14 <HAL_GetTick>
 8007e40:	1b80      	subs	r0, r0, r6
 8007e42:	3001      	adds	r0, #1
 8007e44:	d1f2      	bne.n	8007e2c <SD_FindSCR+0x6c>
      return HAL_SD_ERROR_TIMEOUT;
 8007e46:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007e4a:	e7ca      	b.n	8007de2 <SD_FindSCR+0x22>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007e4c:	f001 fa04 	bl	8009258 <SDMMC_ReadFIFO>
 8007e50:	ab08      	add	r3, sp, #32
 8007e52:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007e56:	f109 0901 	add.w	r9, r9, #1
 8007e5a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e5e:	f7ff f859 	bl	8006f14 <HAL_GetTick>
 8007e62:	1b80      	subs	r0, r0, r6
 8007e64:	3001      	adds	r0, #1
 8007e66:	d1e1      	bne.n	8007e2c <SD_FindSCR+0x6c>
 8007e68:	e7ed      	b.n	8007e46 <SD_FindSCR+0x86>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e6a:	0719      	lsls	r1, r3, #28
 8007e6c:	d40f      	bmi.n	8007e8e <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e70:	079a      	lsls	r2, r3, #30
 8007e72:	d40f      	bmi.n	8007e94 <SD_FindSCR+0xd4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e76:	069b      	lsls	r3, r3, #26
 8007e78:	d40f      	bmi.n	8007e9a <SD_FindSCR+0xda>
 8007e7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e7c:	f240 513a 	movw	r1, #1338	; 0x53a
 8007e80:	9b00      	ldr	r3, [sp, #0]
 8007e82:	ba12      	rev	r2, r2
 8007e84:	6381      	str	r1, [r0, #56]	; 0x38
 8007e86:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e88:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8007e8c:	e7a9      	b.n	8007de2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007e8e:	2408      	movs	r4, #8
 8007e90:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e92:	e7a6      	b.n	8007de2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007e94:	2402      	movs	r4, #2
 8007e96:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e98:	e7a3      	b.n	8007de2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007e9a:	2420      	movs	r4, #32
 8007e9c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e9e:	e7a0      	b.n	8007de2 <SD_FindSCR+0x22>

08007ea0 <HAL_SD_MspInit>:
}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop

08007ea4 <HAL_SD_ReadBlocks_DMA>:
{
 8007ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	b087      	sub	sp, #28
  if(NULL == pData)
 8007eac:	b1d1      	cbz	r1, 8007ee4 <HAL_SD_ReadBlocks_DMA+0x40>
  if(hsd->State == HAL_SD_STATE_READY)
 8007eae:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8007eb2:	b2ed      	uxtb	r5, r5
 8007eb4:	2d01      	cmp	r5, #1
 8007eb6:	d110      	bne.n	8007eda <HAL_SD_ReadBlocks_DMA+0x36>
 8007eb8:	4690      	mov	r8, r2
 8007eba:	461f      	mov	r7, r3
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ebc:	18d3      	adds	r3, r2, r3
 8007ebe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ec0:	2000      	movs	r0, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ec2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ec4:	63a0      	str	r0, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ec6:	d916      	bls.n	8007ef6 <HAL_SD_ReadBlocks_DMA+0x52>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8007eca:	462e      	mov	r6, r5
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ecc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ed0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	b007      	add	sp, #28
 8007ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007eda:	2602      	movs	r6, #2
}
 8007edc:	4630      	mov	r0, r6
 8007ede:	b007      	add	sp, #28
 8007ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ee4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8007ee6:	2601      	movs	r6, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ee8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007eec:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007eee:	4630      	mov	r0, r6
 8007ef0:	b007      	add	sp, #28
 8007ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->Instance->DCTRL = 0U;
 8007ef6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8007ef8:	f04f 0c03 	mov.w	ip, #3
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007efc:	6c26      	ldr	r6, [r4, #64]	; 0x40
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007efe:	ea4f 2947 	mov.w	r9, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8007f02:	f884 c034 	strb.w	ip, [r4, #52]	; 0x34
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f06:	460a      	mov	r2, r1
    hsd->Instance->DCTRL = 0U;
 8007f08:	62d8      	str	r0, [r3, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f0a:	f103 0180 	add.w	r1, r3, #128	; 0x80
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f0e:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f12:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8007fec <HAL_SD_ReadBlocks_DMA+0x148>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f16:	f44c 7c95 	orr.w	ip, ip, #298	; 0x12a
 8007f1a:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f1e:	ea4f 0399 	mov.w	r3, r9, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f22:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8007ff0 <HAL_SD_ReadBlocks_DMA+0x14c>
    hsd->hdmarx->XferAbortCallback = NULL;
 8007f26:	6530      	str	r0, [r6, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f28:	4630      	mov	r0, r6
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f2a:	f8c6 e03c 	str.w	lr, [r6, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f2e:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f32:	f7ff f987 	bl	8007244 <HAL_DMA_Start_IT>
 8007f36:	4606      	mov	r6, r0
 8007f38:	b9c8      	cbnz	r0, 8007f6e <HAL_SD_ReadBlocks_DMA+0xca>
      __HAL_SD_DMA_ENABLE(hsd);
 8007f3a:	6820      	ldr	r0, [r4, #0]
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f40:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_SD_DMA_ENABLE(hsd);
 8007f42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f44:	2a01      	cmp	r2, #1
      __HAL_SD_DMA_ENABLE(hsd);
 8007f46:	f043 0308 	orr.w	r3, r3, #8
        add *= 512U;
 8007f4a:	bf18      	it	ne
 8007f4c:	ea4f 2848 	movne.w	r8, r8, lsl #9
      __HAL_SD_DMA_ENABLE(hsd);
 8007f50:	62c3      	str	r3, [r0, #44]	; 0x2c
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f52:	f001 f9b3 	bl	80092bc <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f56:	b1c8      	cbz	r0, 8007f8c <HAL_SD_ReadBlocks_DMA+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f58:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8007f5a:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f5c:	4922      	ldr	r1, [pc, #136]	; (8007fe8 <HAL_SD_ReadBlocks_DMA+0x144>)
        return HAL_ERROR;
 8007f5e:	4616      	mov	r6, r2
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f60:	6399      	str	r1, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007f62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f64:	4318      	orrs	r0, r3
 8007f66:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f68:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_ERROR;
 8007f6c:	e7b1      	b.n	8007ed2 <HAL_SD_ReadBlocks_DMA+0x2e>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f6e:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8007f70:	462e      	mov	r6, r5
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f72:	491d      	ldr	r1, [pc, #116]	; (8007fe8 <HAL_SD_ReadBlocks_DMA+0x144>)
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f76:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007f7a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f7c:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f84:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f86:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8007f8a:	e7a2      	b.n	8007ed2 <HAL_SD_ReadBlocks_DMA+0x2e>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f8c:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f90:	2190      	movs	r1, #144	; 0x90
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f92:	2202      	movs	r2, #2
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f94:	9004      	str	r0, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f96:	9300      	str	r3, [sp, #0]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f98:	2301      	movs	r3, #1
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f9a:	9102      	str	r1, [sp, #8]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f9c:	4669      	mov	r1, sp
 8007f9e:	6820      	ldr	r0, [r4, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fa0:	f8cd 9004 	str.w	r9, [sp, #4]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fa4:	9203      	str	r2, [sp, #12]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fa6:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fa8:	f001 f972 	bl	8009290 <SDMMC_ConfigData>
      if(NumberOfBlocks > 1U)
 8007fac:	2f01      	cmp	r7, #1
 8007fae:	d914      	bls.n	8007fda <HAL_SD_ReadBlocks_DMA+0x136>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fb0:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fb6:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fb8:	f001 fa00 	bl	80093bc <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d088      	beq.n	8007ed2 <HAL_SD_ReadBlocks_DMA+0x2e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fc0:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8007fc2:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fc4:	4d08      	ldr	r5, [pc, #32]	; (8007fe8 <HAL_SD_ReadBlocks_DMA+0x144>)
        hsd->Context = SD_CONTEXT_NONE;
 8007fc6:	2100      	movs	r1, #0
        return HAL_ERROR;
 8007fc8:	4616      	mov	r6, r2
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fca:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fce:	4318      	orrs	r0, r3
 8007fd0:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007fd2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007fd6:	6321      	str	r1, [r4, #48]	; 0x30
        return HAL_ERROR;
 8007fd8:	e77b      	b.n	8007ed2 <HAL_SD_ReadBlocks_DMA+0x2e>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fda:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fdc:	4641      	mov	r1, r8
 8007fde:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fe0:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fe2:	f001 f9ab 	bl	800933c <SDMMC_CmdReadSingleBlock>
 8007fe6:	e7e9      	b.n	8007fbc <HAL_SD_ReadBlocks_DMA+0x118>
 8007fe8:	004005ff 	.word	0x004005ff
 8007fec:	08008145 	.word	0x08008145
 8007ff0:	0800818d 	.word	0x0800818d

08007ff4 <HAL_SD_WriteBlocks_DMA>:
{
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	b086      	sub	sp, #24
  if(NULL == pData)
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d044      	beq.n	800808a <HAL_SD_WriteBlocks_DMA+0x96>
  if(hsd->State == HAL_SD_STATE_READY)
 8008000:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8008004:	b2ed      	uxtb	r5, r5
 8008006:	2d01      	cmp	r5, #1
 8008008:	d13a      	bne.n	8008080 <HAL_SD_WriteBlocks_DMA+0x8c>
 800800a:	4617      	mov	r7, r2
 800800c:	4698      	mov	r8, r3
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800800e:	18d3      	adds	r3, r2, r3
 8008010:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008012:	460e      	mov	r6, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008014:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008016:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008018:	6381      	str	r1, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800801a:	d84a      	bhi.n	80080b2 <HAL_SD_WriteBlocks_DMA+0xbe>
    hsd->Instance->DCTRL = 0U;
 800801c:	6800      	ldr	r0, [r0, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800801e:	2203      	movs	r2, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8008022:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8008026:	62c1      	str	r1, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008028:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800802a:	f8df c110 	ldr.w	ip, [pc, #272]	; 800813c <HAL_SD_WriteBlocks_DMA+0x148>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800802e:	f042 021a 	orr.w	r2, r2, #26
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008032:	4d40      	ldr	r5, [pc, #256]	; (8008134 <HAL_SD_WriteBlocks_DMA+0x140>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008034:	63c2      	str	r2, [r0, #60]	; 0x3c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008036:	6c62      	ldr	r2, [r4, #68]	; 0x44
    hsd->hdmatx->XferAbortCallback = NULL;
 8008038:	6519      	str	r1, [r3, #80]	; 0x50
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800803a:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800803e:	2a01      	cmp	r2, #1
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008040:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008044:	64dd      	str	r5, [r3, #76]	; 0x4c
      add *= 512U;
 8008046:	bf18      	it	ne
 8008048:	027f      	lslne	r7, r7, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800804a:	f001 f937 	bl	80092bc <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800804e:	bb28      	cbnz	r0, 800809c <HAL_SD_WriteBlocks_DMA+0xa8>
    if(NumberOfBlocks > 1U)
 8008050:	f1b8 0f01 	cmp.w	r8, #1
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	d955      	bls.n	8008104 <HAL_SD_WriteBlocks_DMA+0x110>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008058:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800805a:	4639      	mov	r1, r7
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800805c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800805e:	f001 fa2d 	bl	80094bc <SDMMC_CmdWriteMultiBlock>
 8008062:	4607      	mov	r7, r0
 8008064:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008066:	b367      	cbz	r7, 80080c2 <HAL_SD_WriteBlocks_DMA+0xce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008068:	4b33      	ldr	r3, [pc, #204]	; (8008138 <HAL_SD_WriteBlocks_DMA+0x144>)
      hsd->State = HAL_SD_STATE_READY;
 800806a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800806c:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800806e:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8008070:	4615      	mov	r5, r2
      hsd->ErrorCode |= errorstate;
 8008072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008074:	431f      	orrs	r7, r3
 8008076:	63a7      	str	r7, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008078:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800807c:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800807e:	e000      	b.n	8008082 <HAL_SD_WriteBlocks_DMA+0x8e>
    return HAL_BUSY;
 8008080:	2502      	movs	r5, #2
}
 8008082:	4628      	mov	r0, r5
 8008084:	b006      	add	sp, #24
 8008086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800808a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800808c:	2501      	movs	r5, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800808e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008092:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008094:	4628      	mov	r0, r5
 8008096:	b006      	add	sp, #24
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800809c:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800809e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a0:	4925      	ldr	r1, [pc, #148]	; (8008138 <HAL_SD_WriteBlocks_DMA+0x144>)
      return HAL_ERROR;
 80080a2:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a4:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080a8:	4318      	orrs	r0, r3
 80080aa:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 80080b0:	e7e7      	b.n	8008082 <HAL_SD_WriteBlocks_DMA+0x8e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80080b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080b8:	6383      	str	r3, [r0, #56]	; 0x38
}
 80080ba:	4628      	mov	r0, r5
 80080bc:	b006      	add	sp, #24
 80080be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SD_DMA_ENABLE(hsd);
 80080c2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80080c4:	ea4f 2848 	mov.w	r8, r8, lsl #9
 80080c8:	f100 0280 	add.w	r2, r0, #128	; 0x80
 80080cc:	4631      	mov	r1, r6
    __HAL_SD_DMA_ENABLE(hsd);
 80080ce:	f045 0508 	orr.w	r5, r5, #8
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80080d2:	ea4f 0398 	mov.w	r3, r8, lsr #2
    __HAL_SD_DMA_ENABLE(hsd);
 80080d6:	62c5      	str	r5, [r0, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80080d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80080da:	f7ff f8b3 	bl	8007244 <HAL_DMA_Start_IT>
 80080de:	4605      	mov	r5, r0
 80080e0:	b1b8      	cbz	r0, 8008112 <HAL_SD_WriteBlocks_DMA+0x11e>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080e2:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 80080e4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080e6:	4814      	ldr	r0, [pc, #80]	; (8008138 <HAL_SD_WriteBlocks_DMA+0x144>)
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80080ea:	460d      	mov	r5, r1
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080ec:	f022 021a 	bic.w	r2, r2, #26
 80080f0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080f2:	6398      	str	r0, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80080f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080fa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080fc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008100:	6327      	str	r7, [r4, #48]	; 0x30
      return HAL_ERROR;
 8008102:	e7be      	b.n	8008082 <HAL_SD_WriteBlocks_DMA+0x8e>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008104:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008106:	4639      	mov	r1, r7
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008108:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800810a:	f001 f997 	bl	800943c <SDMMC_CmdWriteSingleBlock>
 800810e:	4607      	mov	r7, r0
 8008110:	e7a8      	b.n	8008064 <HAL_SD_WriteBlocks_DMA+0x70>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008112:	f04f 36ff 	mov.w	r6, #4294967295
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008116:	2290      	movs	r2, #144	; 0x90
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008118:	2301      	movs	r3, #1
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	4669      	mov	r1, sp
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800811e:	f8cd 8004 	str.w	r8, [sp, #4]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008122:	9600      	str	r6, [sp, #0]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008124:	9202      	str	r2, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008126:	9305      	str	r3, [sp, #20]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008128:	e9cd 7703 	strd	r7, r7, [sp, #12]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800812c:	f001 f8b0 	bl	8009290 <SDMMC_ConfigData>
      return HAL_OK;
 8008130:	e7a7      	b.n	8008082 <HAL_SD_WriteBlocks_DMA+0x8e>
 8008132:	bf00      	nop
 8008134:	0800818d 	.word	0x0800818d
 8008138:	004005ff 	.word	0x004005ff
 800813c:	08007db1 	.word	0x08007db1

08008140 <HAL_SD_ErrorCallback>:
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop

08008144 <SD_DMAReceiveCplt>:
{
 8008144:	b570      	push	{r4, r5, r6, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008146:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008148:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	2a82      	cmp	r2, #130	; 0x82
 800814e:	d00f      	beq.n	8008170 <SD_DMAReceiveCplt+0x2c>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008152:	f240 563a 	movw	r6, #1338	; 0x53a
  hsd->State = HAL_SD_STATE_READY;
 8008156:	2501      	movs	r5, #1
  hsd->Context = SD_CONTEXT_NONE;
 8008158:	2100      	movs	r1, #0
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800815a:	f022 0208 	bic.w	r2, r2, #8
  HAL_SD_RxCpltCallback(hsd);
 800815e:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008160:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008162:	639e      	str	r6, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008164:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008168:	6321      	str	r1, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 800816a:	f7fe fd6d 	bl	8006c48 <HAL_SD_RxCpltCallback>
}
 800816e:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008170:	4618      	mov	r0, r3
 8008172:	f001 f9e3 	bl	800953c <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008176:	4603      	mov	r3, r0
 8008178:	b908      	cbnz	r0, 800817e <SD_DMAReceiveCplt+0x3a>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	e7e8      	b.n	8008150 <SD_DMAReceiveCplt+0xc>
      hsd->ErrorCode |= errorstate;
 800817e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8008180:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 8008182:	4313      	orrs	r3, r2
 8008184:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8008186:	f7ff ffdb 	bl	8008140 <HAL_SD_ErrorCallback>
 800818a:	e7f6      	b.n	800817a <SD_DMAReceiveCplt+0x36>

0800818c <SD_DMAError>:
{
 800818c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800818e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008190:	f7ff f988 	bl	80074a4 <HAL_DMA_GetError>
 8008194:	2802      	cmp	r0, #2
 8008196:	d00a      	beq.n	80081ae <SD_DMAError+0x22>
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008198:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800819c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800819e:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d005      	beq.n	80081b0 <SD_DMAError+0x24>
 80081a4:	2a01      	cmp	r2, #1
 80081a6:	d003      	beq.n	80081b0 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 80081a8:	4620      	mov	r0, r4
 80081aa:	f7ff ffc9 	bl	8008140 <HAL_SD_ErrorCallback>
}
 80081ae:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	4a16      	ldr	r2, [pc, #88]	; (800820c <SD_DMAError+0x80>)
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80081b6:	4618      	mov	r0, r3
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80081ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081bc:	0409      	lsls	r1, r1, #16
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80081be:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80081c2:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081ca:	63a3      	str	r3, [r4, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081cc:	f001 fc62 	bl	8009a94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80081d0:	b158      	cbz	r0, 80081ea <SD_DMAError+0x5e>
    hsd->ErrorCode |= errorstate;
 80081d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081d4:	4308      	orrs	r0, r1
 80081d6:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80081d8:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80081da:	2300      	movs	r3, #0
    HAL_SD_ErrorCallback(hsd);
 80081dc:	4620      	mov	r0, r4
      hsd->State= HAL_SD_STATE_READY;
 80081de:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081e2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 80081e4:	f7ff ffac 	bl	8008140 <HAL_SD_ErrorCallback>
 80081e8:	e7e1      	b.n	80081ae <SD_DMAError+0x22>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081ea:	4601      	mov	r1, r0
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	f001 f84b 	bl	8009288 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80081f2:	f3c0 2043 	ubfx	r0, r0, #9, #4
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80081f6:	3805      	subs	r0, #5
 80081f8:	2801      	cmp	r0, #1
 80081fa:	d8ed      	bhi.n	80081d8 <SD_DMAError+0x4c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	f001 f99d 	bl	800953c <SDMMC_CmdStopTransfer>
 8008202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008204:	4318      	orrs	r0, r3
 8008206:	63a0      	str	r0, [r4, #56]	; 0x38
 8008208:	e7e6      	b.n	80081d8 <SD_DMAError+0x4c>
 800820a:	bf00      	nop
 800820c:	004005ff 	.word	0x004005ff

08008210 <SD_DMATxAbort>:
{
 8008210:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008212:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008214:	f240 533a 	movw	r3, #1338	; 0x53a
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008218:	6d21      	ldr	r1, [r4, #80]	; 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800821a:	6820      	ldr	r0, [r4, #0]
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800821c:	0409      	lsls	r1, r1, #16
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800821e:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008220:	f001 fc38 	bl	8009a94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008224:	4605      	mov	r5, r0
 8008226:	b180      	cbz	r0, 800824a <SD_DMATxAbort+0x3a>
    hsd->ErrorCode |= errorstate;
 8008228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800822a:	2101      	movs	r1, #1
  hsd->Context = SD_CONTEXT_NONE;
 800822c:	2200      	movs	r2, #0
    hsd->ErrorCode |= errorstate;
 800822e:	431d      	orrs	r5, r3
 8008230:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008232:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008236:	6322      	str	r2, [r4, #48]	; 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 800823a:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800823c:	b113      	cbz	r3, 8008244 <SD_DMATxAbort+0x34>
    HAL_SD_ErrorCallback(hsd);
 800823e:	f7ff ff7f 	bl	8008140 <HAL_SD_ErrorCallback>
}
 8008242:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_AbortCallback(hsd);
 8008244:	f7fe fcf8 	bl	8006c38 <HAL_SD_AbortCallback>
}
 8008248:	bd38      	pop	{r3, r4, r5, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800824a:	4601      	mov	r1, r0
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	f001 f81b 	bl	8009288 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008252:	f3c0 2043 	ubfx	r0, r0, #9, #4
  hsd->State = HAL_SD_STATE_READY;
 8008256:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008258:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 800825a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800825e:	4298      	cmp	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 8008260:	6325      	str	r5, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008262:	d8e9      	bhi.n	8008238 <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008264:	6820      	ldr	r0, [r4, #0]
 8008266:	f001 f969 	bl	800953c <SDMMC_CmdStopTransfer>
 800826a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800826c:	4318      	orrs	r0, r3
 800826e:	63a0      	str	r0, [r4, #56]	; 0x38
 8008270:	e7e2      	b.n	8008238 <SD_DMATxAbort+0x28>
 8008272:	bf00      	nop

08008274 <HAL_SD_IRQHandler>:
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008274:	6803      	ldr	r3, [r0, #0]
{
 8008276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 800827a:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800827c:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800827e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
 8008280:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008282:	0411      	lsls	r1, r2, #16
 8008284:	d51b      	bpl.n	80082be <HAL_SD_IRQHandler+0x4a>
 8008286:	072a      	lsls	r2, r5, #28
 8008288:	f100 80b3 	bmi.w	80083f2 <HAL_SD_IRQHandler+0x17e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800828c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828e:	05d2      	lsls	r2, r2, #23
 8008290:	d569      	bpl.n	8008366 <HAL_SD_IRQHandler+0xf2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008292:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008296:	4a8d      	ldr	r2, [pc, #564]	; (80084cc <HAL_SD_IRQHandler+0x258>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008298:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800829a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800829c:	400a      	ands	r2, r1
 800829e:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80082a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 80082a8:	0629      	lsls	r1, r5, #24
 80082aa:	d505      	bpl.n	80082b8 <HAL_SD_IRQHandler+0x44>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082ac:	06aa      	lsls	r2, r5, #26
 80082ae:	f100 80f1 	bmi.w	8008494 <HAL_SD_IRQHandler+0x220>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80082b2:	07af      	lsls	r7, r5, #30
 80082b4:	f000 80c0 	beq.w	8008438 <HAL_SD_IRQHandler+0x1c4>
}
 80082b8:	b002      	add	sp, #8
 80082ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80082be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c0:	05d7      	lsls	r7, r2, #23
 80082c2:	d522      	bpl.n	800830a <HAL_SD_IRQHandler+0x96>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80082c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80082c8:	4a80      	ldr	r2, [pc, #512]	; (80084cc <HAL_SD_IRQHandler+0x258>)
    if((context & SD_CONTEXT_IT) != 0U)
 80082ca:	072e      	lsls	r6, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80082cc:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80082ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80082d0:	ea02 0201 	and.w	r2, r2, r1
 80082d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80082d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	62da      	str	r2, [r3, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80082de:	d5e3      	bpl.n	80082a8 <HAL_SD_IRQHandler+0x34>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80082e0:	f015 0f22 	tst.w	r5, #34	; 0x22
 80082e4:	f040 80b6 	bne.w	8008454 <HAL_SD_IRQHandler+0x1e0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082e8:	f240 503a 	movw	r0, #1338	; 0x53a
      hsd->State = HAL_SD_STATE_READY;
 80082ec:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 80082ee:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082f0:	6398      	str	r0, [r3, #56]	; 0x38
        HAL_SD_RxCpltCallback(hsd);
 80082f2:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 80082f4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082f8:	6322      	str	r2, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082fa:	07ac      	lsls	r4, r5, #30
 80082fc:	f000 80a5 	beq.w	800844a <HAL_SD_IRQHandler+0x1d6>
        HAL_SD_RxCpltCallback(hsd);
 8008300:	f7fe fca2 	bl	8006c48 <HAL_SD_RxCpltCallback>
}
 8008304:	b002      	add	sp, #8
 8008306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800830a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800830c:	0456      	lsls	r6, r2, #17
 800830e:	d52b      	bpl.n	8008368 <HAL_SD_IRQHandler+0xf4>
 8008310:	0728      	lsls	r0, r5, #28
 8008312:	d529      	bpl.n	8008368 <HAL_SD_IRQHandler+0xf4>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8008314:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8008316:	2e00      	cmp	r6, #0
 8008318:	d0ce      	beq.n	80082b8 <HAL_SD_IRQHandler+0x44>
  tmp = hsd->pTxBuffPtr;
 800831a:	6a27      	ldr	r7, [r4, #32]
 800831c:	f107 0804 	add.w	r8, r7, #4
 8008320:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8008324:	e000      	b.n	8008328 <HAL_SD_IRQHandler+0xb4>
 8008326:	6823      	ldr	r3, [r4, #0]
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8008328:	f818 2c04 	ldrb.w	r2, [r8, #-4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800832c:	4618      	mov	r0, r3
 800832e:	f108 0804 	add.w	r8, r8, #4
 8008332:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8008334:	9201      	str	r2, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8008336:	f818 3c07 	ldrb.w	r3, [r8, #-7]
 800833a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800833e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8008340:	f818 2c06 	ldrb.w	r2, [r8, #-6]
 8008344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008348:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800834a:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 800834e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008352:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008354:	f000 ff84 	bl	8009260 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008358:	45a8      	cmp	r8, r5
 800835a:	d1e4      	bne.n	8008326 <HAL_SD_IRQHandler+0xb2>
    }

    hsd->pTxBuffPtr = tmp;
 800835c:	3720      	adds	r7, #32
    hsd->TxXferSize = dataremaining;
 800835e:	3e20      	subs	r6, #32
 8008360:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8008364:	e7a8      	b.n	80082b8 <HAL_SD_IRQHandler+0x44>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836a:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 800836e:	d0a3      	beq.n	80082b8 <HAL_SD_IRQHandler+0x44>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008372:	0791      	lsls	r1, r2, #30
 8008374:	d503      	bpl.n	800837e <HAL_SD_IRQHandler+0x10a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008376:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008378:	f042 0202 	orr.w	r2, r2, #2
 800837c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800837e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008380:	0712      	lsls	r2, r2, #28
 8008382:	d503      	bpl.n	800838c <HAL_SD_IRQHandler+0x118>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008384:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008386:	f042 0208 	orr.w	r2, r2, #8
 800838a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800838c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838e:	0697      	lsls	r7, r2, #26
 8008390:	d503      	bpl.n	800839a <HAL_SD_IRQHandler+0x126>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008394:	f042 0220 	orr.w	r2, r2, #32
 8008398:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800839a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839c:	06d6      	lsls	r6, r2, #27
 800839e:	d503      	bpl.n	80083a8 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80083a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083a2:	f042 0210 	orr.w	r2, r2, #16
 80083a6:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083a8:	f240 523a 	movw	r2, #1338	; 0x53a
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083ac:	4618      	mov	r0, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80083b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80083b6:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083b8:	f001 f8c0 	bl	800953c <SDMMC_CmdStopTransfer>
 80083bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083be:	4318      	orrs	r0, r3
 80083c0:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80083c2:	0728      	lsls	r0, r5, #28
 80083c4:	d44d      	bmi.n	8008462 <HAL_SD_IRQHandler+0x1ee>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083c6:	0629      	lsls	r1, r5, #24
 80083c8:	f57f af76 	bpl.w	80082b8 <HAL_SD_IRQHandler+0x44>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80083cc:	f015 0f30 	tst.w	r5, #48	; 0x30
 80083d0:	d16e      	bne.n	80084b0 <HAL_SD_IRQHandler+0x23c>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083d2:	f015 0503 	ands.w	r5, r5, #3
 80083d6:	d04d      	beq.n	8008474 <HAL_SD_IRQHandler+0x200>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80083d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083da:	4a3d      	ldr	r2, [pc, #244]	; (80084d0 <HAL_SD_IRQHandler+0x25c>)
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083dc:	4618      	mov	r0, r3
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80083de:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083e0:	f7fe ff76 	bl	80072d0 <HAL_DMA_Abort_IT>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f43f af67 	beq.w	80082b8 <HAL_SD_IRQHandler+0x44>
          SD_DMARxAbort(hsd->hdmarx);
 80083ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80083ec:	f7ff ff10 	bl	8008210 <SD_DMATxAbort>
 80083f0:	e762      	b.n	80082b8 <HAL_SD_IRQHandler+0x44>
  dataremaining = hsd->RxXferSize;
 80083f2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  if (dataremaining > 0U)
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	f43f af5f 	beq.w	80082b8 <HAL_SD_IRQHandler+0x44>
  tmp = hsd->pRxBuffPtr;
 80083fa:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80083fe:	f108 0504 	add.w	r5, r8, #4
 8008402:	f108 0624 	add.w	r6, r8, #36	; 0x24
 8008406:	e000      	b.n	800840a <HAL_SD_IRQHandler+0x196>
 8008408:	6823      	ldr	r3, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 800840a:	4618      	mov	r0, r3
 800840c:	3504      	adds	r5, #4
 800840e:	f000 ff23 	bl	8009258 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008412:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008416:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008418:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800841a:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800841c:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008420:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008424:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8008428:	42ae      	cmp	r6, r5
 800842a:	d1ed      	bne.n	8008408 <HAL_SD_IRQHandler+0x194>
    hsd->pRxBuffPtr = tmp;
 800842c:	f108 0320 	add.w	r3, r8, #32
    hsd->RxXferSize = dataremaining;
 8008430:	3f20      	subs	r7, #32
 8008432:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
 8008436:	e73f      	b.n	80082b8 <HAL_SD_IRQHandler+0x44>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008438:	6822      	ldr	r2, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800843a:	2101      	movs	r1, #1
        HAL_SD_TxCpltCallback(hsd);
 800843c:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800843e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008440:	f023 0308 	bic.w	r3, r3, #8
 8008444:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008446:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800844a:	f7fe fbf9 	bl	8006c40 <HAL_SD_TxCpltCallback>
}
 800844e:	b002      	add	sp, #8
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008454:	4618      	mov	r0, r3
 8008456:	f001 f871 	bl	800953c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800845a:	4603      	mov	r3, r0
 800845c:	b998      	cbnz	r0, 8008486 <HAL_SD_IRQHandler+0x212>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	e742      	b.n	80082e8 <HAL_SD_IRQHandler+0x74>
      hsd->State = HAL_SD_STATE_READY;
 8008462:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8008464:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 8008466:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8008468:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800846c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800846e:	f7ff fe67 	bl	8008140 <HAL_SD_ErrorCallback>
 8008472:	e721      	b.n	80082b8 <HAL_SD_IRQHandler+0x44>
        hsd->State = HAL_SD_STATE_READY;
 8008474:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008476:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8008478:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 800847a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800847e:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008480:	f7fe fbda 	bl	8006c38 <HAL_SD_AbortCallback>
}
 8008484:	e718      	b.n	80082b8 <HAL_SD_IRQHandler+0x44>
          hsd->ErrorCode |= errorstate;
 8008486:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008488:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800848a:	4313      	orrs	r3, r2
 800848c:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800848e:	f7ff fe57 	bl	8008140 <HAL_SD_ErrorCallback>
 8008492:	e7e4      	b.n	800845e <HAL_SD_IRQHandler+0x1ea>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008494:	4618      	mov	r0, r3
 8008496:	f001 f851 	bl	800953c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800849a:	4603      	mov	r3, r0
 800849c:	2800      	cmp	r0, #0
 800849e:	f43f af08 	beq.w	80082b2 <HAL_SD_IRQHandler+0x3e>
          hsd->ErrorCode |= errorstate;
 80084a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80084a4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 80084a6:	4313      	orrs	r3, r2
 80084a8:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80084aa:	f7ff fe49 	bl	8008140 <HAL_SD_ErrorCallback>
 80084ae:	e700      	b.n	80082b2 <HAL_SD_IRQHandler+0x3e>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80084b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084b2:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <HAL_SD_IRQHandler+0x260>)
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80084b4:	4618      	mov	r0, r3
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80084b6:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80084b8:	f7fe ff0a 	bl	80072d0 <HAL_DMA_Abort_IT>
 80084bc:	2800      	cmp	r0, #0
 80084be:	f43f aefb 	beq.w	80082b8 <HAL_SD_IRQHandler+0x44>
          SD_DMATxAbort(hsd->hdmatx);
 80084c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80084c4:	f7ff fea4 	bl	8008210 <SD_DMATxAbort>
 80084c8:	e6f6      	b.n	80082b8 <HAL_SD_IRQHandler+0x44>
 80084ca:	bf00      	nop
 80084cc:	ffff3ec5 	.word	0xffff3ec5
 80084d0:	080084d9 	.word	0x080084d9
 80084d4:	08008211 	.word	0x08008211

080084d8 <SD_DMARxAbort>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80084dc:	f240 533a 	movw	r3, #1338	; 0x53a
 80084e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80084e2:	6820      	ldr	r0, [r4, #0]
 80084e4:	0409      	lsls	r1, r1, #16
 80084e6:	6383      	str	r3, [r0, #56]	; 0x38
 80084e8:	f001 fad4 	bl	8009a94 <SDMMC_CmdSendStatus>
 80084ec:	4605      	mov	r5, r0
 80084ee:	b180      	cbz	r0, 8008512 <SD_DMARxAbort+0x3a>
 80084f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084f2:	2101      	movs	r1, #1
 80084f4:	2200      	movs	r2, #0
 80084f6:	431d      	orrs	r5, r3
 80084f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80084fa:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80084fe:	6322      	str	r2, [r4, #48]	; 0x30
 8008500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008502:	4620      	mov	r0, r4
 8008504:	b113      	cbz	r3, 800850c <SD_DMARxAbort+0x34>
 8008506:	f7ff fe1b 	bl	8008140 <HAL_SD_ErrorCallback>
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	f7fe fb94 	bl	8006c38 <HAL_SD_AbortCallback>
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	4601      	mov	r1, r0
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	f000 feb7 	bl	8009288 <SDMMC_GetResponse>
 800851a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800851e:	2301      	movs	r3, #1
 8008520:	3805      	subs	r0, #5
 8008522:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008526:	4298      	cmp	r0, r3
 8008528:	6325      	str	r5, [r4, #48]	; 0x30
 800852a:	d8e9      	bhi.n	8008500 <SD_DMARxAbort+0x28>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	f001 f805 	bl	800953c <SDMMC_CmdStopTransfer>
 8008532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008534:	4318      	orrs	r0, r3
 8008536:	63a0      	str	r0, [r4, #56]	; 0x38
 8008538:	e7e2      	b.n	8008500 <SD_DMARxAbort+0x28>
 800853a:	bf00      	nop

0800853c <HAL_SD_GetCardCSD>:
{
 800853c:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800853e:	2000      	movs	r0, #0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008540:	6e5a      	ldr	r2, [r3, #100]	; 0x64
{
 8008542:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008544:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008546:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800854a:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800854e:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008552:	700c      	strb	r4, [r1, #0]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008554:	f3c2 2407 	ubfx	r4, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008558:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800855a:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800855c:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800855e:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008560:	710c      	strb	r4, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008562:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008564:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008566:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008568:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800856c:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008570:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008574:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008576:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800857a:	720c      	strb	r4, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800857c:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008580:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008582:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008584:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008586:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008588:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800858a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800858c:	2800      	cmp	r0, #0
 800858e:	d16e      	bne.n	800866e <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008590:	f640 74fc 	movw	r4, #4092	; 0xffc
 8008594:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008596:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 8008598:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800859c:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085a0:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085a4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085a8:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085ac:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085b0:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085b4:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085b6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085ba:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085be:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085c2:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085c4:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085c6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085c8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085ca:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085cc:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085ce:	f004 0407 	and.w	r4, r4, #7
 80085d2:	3402      	adds	r4, #2
 80085d4:	40a2      	lsls	r2, r4
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085d8:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 80085da:	661e      	str	r6, [r3, #96]	; 0x60
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085dc:	f004 040f 	and.w	r4, r4, #15
 80085e0:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085e2:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085e4:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085e6:	fb02 f204 	mul.w	r2, r2, r4
 80085ea:	65da      	str	r2, [r3, #92]	; 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80085ec:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80085f0:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80085f4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 80085f8:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80085fa:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 80085fc:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80085fe:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8008600:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008602:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008608:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800860c:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008610:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008614:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008616:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800861a:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800861c:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008620:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008622:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008626:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008628:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800862c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008630:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8008634:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008638:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800863c:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008640:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008644:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008648:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800864c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008650:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008654:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008658:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800865c:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008660:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008664:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008668:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 800866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800866e:	2801      	cmp	r0, #1
 8008670:	d00b      	beq.n	800868a <HAL_SD_GetCardCSD+0x14e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008672:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008674:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008676:	4c0d      	ldr	r4, [pc, #52]	; (80086ac <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 8008678:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800867a:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800867c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008682:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008684:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8008688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800868a:	0412      	lsls	r2, r2, #16
 800868c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = 512U;
 800868e:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008692:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8008696:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800869a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800869c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800869e:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086a0:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80086a2:	661c      	str	r4, [r3, #96]	; 0x60
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086a4:	0292      	lsls	r2, r2, #10
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80086aa:	e79f      	b.n	80085ec <HAL_SD_GetCardCSD+0xb0>
 80086ac:	004005ff 	.word	0x004005ff

080086b0 <HAL_SD_Init>:
{
 80086b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b2:	b099      	sub	sp, #100	; 0x64
  if(hsd == NULL)
 80086b4:	b1f0      	cbz	r0, 80086f4 <HAL_SD_Init+0x44>
  if(hsd->State == HAL_SD_STATE_RESET)
 80086b6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80086ba:	4604      	mov	r4, r0
 80086bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d037      	beq.n	8008734 <HAL_SD_Init+0x84>
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80086c4:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80086c6:	2076      	movs	r0, #118	; 0x76
  hsd->State = HAL_SD_STATE_BUSY;
 80086c8:	2103      	movs	r1, #3
  status = SDMMC_Init(hsd->Instance, Init);
 80086ca:	aa0a      	add	r2, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80086cc:	930a      	str	r3, [sp, #40]	; 0x28
  status = SDMMC_Init(hsd->Instance, Init);
 80086ce:	ad07      	add	r5, sp, #28
 80086d0:	6826      	ldr	r6, [r4, #0]
  hsd->State = HAL_SD_STATE_BUSY;
 80086d2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80086d6:	9309      	str	r3, [sp, #36]	; 0x24
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80086d8:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  status = SDMMC_Init(hsd->Instance, Init);
 80086dc:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80086de:	e9cd 3307 	strd	r3, r3, [sp, #28]
  status = SDMMC_Init(hsd->Instance, Init);
 80086e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80086e6:	4630      	mov	r0, r6
 80086e8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80086ec:	f000 fd98 	bl	8009220 <SDMMC_Init>
  if(status != HAL_OK)
 80086f0:	4605      	mov	r5, r0
 80086f2:	b118      	cbz	r0, 80086fc <HAL_SD_Init+0x4c>
    return HAL_ERROR;
 80086f4:	2501      	movs	r5, #1
}
 80086f6:	4628      	mov	r0, r5
 80086f8:	b019      	add	sp, #100	; 0x64
 80086fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008700:	4618      	mov	r0, r3
  __HAL_SD_DISABLE(hsd);
 8008702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008706:	605a      	str	r2, [r3, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008708:	f000 fdb0 	bl	800926c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008710:	4618      	mov	r0, r3
  __HAL_SD_ENABLE(hsd);
 8008712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008716:	605a      	str	r2, [r3, #4]
  __IO uint32_t count = 0U;
 8008718:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800871a:	f000 ff91 	bl	8009640 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	4606      	mov	r6, r0
 8008720:	b160      	cbz	r0, 800873c <HAL_SD_Init+0x8c>
    hsd->State = HAL_SD_STATE_READY;
 8008722:	2501      	movs	r5, #1
 8008724:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 8008728:	4628      	mov	r0, r5
    hsd->ErrorCode |= errorstate;
 800872a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800872c:	431e      	orrs	r6, r3
 800872e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008730:	b019      	add	sp, #100	; 0x64
 8008732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 8008734:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8008736:	f7ff fbb3 	bl	8007ea0 <HAL_SD_MspInit>
 800873a:	e7c3      	b.n	80086c4 <HAL_SD_Init+0x14>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	f000 ffab 	bl	8009698 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008742:	2800      	cmp	r0, #0
 8008744:	f040 80b8 	bne.w	80088b8 <HAL_SD_Init+0x208>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008748:	2301      	movs	r3, #1
 800874a:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800874c:	2100      	movs	r1, #0
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	f000 ffe4 	bl	800971c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008754:	bb00      	cbnz	r0, 8008798 <HAL_SD_Init+0xe8>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	f64f 75fe 	movw	r5, #65534	; 0xfffe
 800875c:	42ab      	cmp	r3, r5
 800875e:	d81e      	bhi.n	800879e <HAL_SD_Init+0xee>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008760:	4f61      	ldr	r7, [pc, #388]	; (80088e8 <HAL_SD_Init+0x238>)
 8008762:	e010      	b.n	8008786 <HAL_SD_Init+0xd6>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	f001 f819 	bl	800979c <SDMMC_CmdAppOperCommand>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800876a:	4631      	mov	r1, r6
    if(errorstate != HAL_SD_ERROR_NONE)
 800876c:	b9a0      	cbnz	r0, 8008798 <HAL_SD_Init+0xe8>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	f000 fd8a 	bl	8009288 <SDMMC_GetResponse>
    count++;
 8008774:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008776:	1e06      	subs	r6, r0, #0
    count++;
 8008778:	f103 0301 	add.w	r3, r3, #1
 800877c:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800877e:	9b06      	ldr	r3, [sp, #24]
 8008780:	db0d      	blt.n	800879e <HAL_SD_Init+0xee>
 8008782:	42ab      	cmp	r3, r5
 8008784:	d80b      	bhi.n	800879e <HAL_SD_Init+0xee>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008786:	2100      	movs	r1, #0
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	f000 ffc7 	bl	800971c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800878e:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 8008790:	4606      	mov	r6, r0
 8008792:	2800      	cmp	r0, #0
 8008794:	d0e6      	beq.n	8008764 <HAL_SD_Init+0xb4>
 8008796:	e7c4      	b.n	8008722 <HAL_SD_Init+0x72>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008798:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800879c:	e7c1      	b.n	8008722 <HAL_SD_Init+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800879e:	9a06      	ldr	r2, [sp, #24]
 80087a0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80087a4:	429a      	cmp	r2, r3
 80087a6:	f200 8096 	bhi.w	80088d6 <HAL_SD_Init+0x226>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087aa:	f3c6 7680 	ubfx	r6, r6, #30, #1
  uint16_t sd_rca = 1U;
 80087ae:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	6466      	str	r6, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 80087b4:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087b8:	f000 fd62 	bl	8009280 <SDMMC_GetPowerState>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f000 8085 	beq.w	80088cc <HAL_SD_Init+0x21c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80087c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	2a03      	cmp	r2, #3
 80087c8:	d12f      	bne.n	800882a <HAL_SD_Init+0x17a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80087ca:	4618      	mov	r0, r3
 80087cc:	2104      	movs	r1, #4
 80087ce:	f000 fd5b 	bl	8009288 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087d2:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80087d4:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087d6:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80087d8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087da:	f7ff feaf 	bl	800853c <HAL_SD_GetCardCSD>
 80087de:	4605      	mov	r5, r0
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d17b      	bne.n	80088dc <HAL_SD_Init+0x22c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80087e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80087e6:	4603      	mov	r3, r0
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	0412      	lsls	r2, r2, #16
 80087ec:	f000 fee8 	bl	80095c0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f0:	b130      	cbz	r0, 8008800 <HAL_SD_Init+0x150>
    hsd->State = HAL_SD_STATE_READY;
 80087f2:	2501      	movs	r5, #1
 80087f4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087fa:	4308      	orrs	r0, r1
 80087fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80087fe:	e77a      	b.n	80086f6 <HAL_SD_Init+0x46>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008800:	4623      	mov	r3, r4
 8008802:	1d26      	adds	r6, r4, #4
 8008804:	f853 7b10 	ldr.w	r7, [r3], #16
 8008808:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800880c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008810:	4638      	mov	r0, r7
 8008812:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008816:	f000 fd03 	bl	8009220 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800881a:	2301      	movs	r3, #1
}
 800881c:	4628      	mov	r0, r5
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800881e:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8008820:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8008822:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008826:	b019      	add	sp, #100	; 0x64
 8008828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800882a:	4618      	mov	r0, r3
 800882c:	f001 f86c 	bl	8009908 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008830:	2800      	cmp	r0, #0
 8008832:	d1de      	bne.n	80087f2 <HAL_SD_Init+0x142>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008834:	4601      	mov	r1, r0
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	f000 fd26 	bl	8009288 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800883c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800883e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008840:	6820      	ldr	r0, [r4, #0]
 8008842:	f000 fd21 	bl	8009288 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008846:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008848:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	f000 fd1c 	bl	8009288 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008850:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008852:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	f000 fd17 	bl	8009288 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800885a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800885c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008860:	2b03      	cmp	r3, #3
 8008862:	d03e      	beq.n	80088e2 <HAL_SD_Init+0x232>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008864:	f10d 0116 	add.w	r1, sp, #22
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	f001 f8c1 	bl	80099f0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800886e:	2800      	cmp	r0, #0
 8008870:	d1bf      	bne.n	80087f2 <HAL_SD_Init+0x142>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008872:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	2a03      	cmp	r2, #3
 8008878:	d0a7      	beq.n	80087ca <HAL_SD_Init+0x11a>
    hsd->SdCard.RelCardAdd = sd_rca;
 800887a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800887e:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 8008880:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008882:	0409      	lsls	r1, r1, #16
 8008884:	f001 f87a 	bl	800997c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008888:	2800      	cmp	r0, #0
 800888a:	d1b2      	bne.n	80087f2 <HAL_SD_Init+0x142>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800888c:	4601      	mov	r1, r0
 800888e:	6820      	ldr	r0, [r4, #0]
 8008890:	f000 fcfa 	bl	8009288 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008894:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008896:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	f000 fcf5 	bl	8009288 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800889e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80088a0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088a2:	6820      	ldr	r0, [r4, #0]
 80088a4:	f000 fcf0 	bl	8009288 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088a8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088aa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	f000 fceb 	bl	8009288 <SDMMC_GetResponse>
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	6720      	str	r0, [r4, #112]	; 0x70
 80088b6:	e788      	b.n	80087ca <HAL_SD_Init+0x11a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80088b8:	64a6      	str	r6, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80088ba:	6820      	ldr	r0, [r4, #0]
 80088bc:	f000 fec0 	bl	8009640 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c0:	b938      	cbnz	r0, 80088d2 <HAL_SD_Init+0x222>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80088c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	f47f af46 	bne.w	8008756 <HAL_SD_Init+0xa6>
 80088ca:	e73f      	b.n	800874c <HAL_SD_Init+0x9c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088cc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80088d0:	e78f      	b.n	80087f2 <HAL_SD_Init+0x142>
    if(errorstate != HAL_SD_ERROR_NONE)
 80088d2:	4606      	mov	r6, r0
 80088d4:	e725      	b.n	8008722 <HAL_SD_Init+0x72>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088d6:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80088da:	e722      	b.n	8008722 <HAL_SD_Init+0x72>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80088e0:	e787      	b.n	80087f2 <HAL_SD_Init+0x142>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	e771      	b.n	80087ca <HAL_SD_Init+0x11a>
 80088e6:	bf00      	nop
 80088e8:	c1100000 	.word	0xc1100000

080088ec <HAL_SD_ConfigWideBusOperation>:
  if(hsd->SdCard.CardType != CARD_SECURED)
 80088ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
  hsd->State = HAL_SD_STATE_BUSY;
 80088ee:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 80088f0:	2a03      	cmp	r2, #3
{
 80088f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80088f4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 80088f8:	b08b      	sub	sp, #44	; 0x2c
 80088fa:	4604      	mov	r4, r0
 80088fc:	460e      	mov	r6, r1
 80088fe:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008900:	d029      	beq.n	8008956 <HAL_SD_ConfigWideBusOperation+0x6a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008902:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008906:	d026      	beq.n	8008956 <HAL_SD_ConfigWideBusOperation+0x6a>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008908:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800890c:	d051      	beq.n	80089b2 <HAL_SD_ConfigWideBusOperation+0xc6>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800890e:	2900      	cmp	r1, #0
 8008910:	d030      	beq.n	8008974 <HAL_SD_ConfigWideBusOperation+0x88>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008912:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008914:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008918:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800891a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800891c:	bb15      	cbnz	r5, 8008964 <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800891e:	69a2      	ldr	r2, [r4, #24]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008920:	af04      	add	r7, sp, #16
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008922:	6961      	ldr	r1, [r4, #20]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008924:	9209      	str	r2, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8008926:	aa0a      	add	r2, sp, #40	; 0x28
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008928:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800892c:	6866      	ldr	r6, [r4, #4]
    (void)SDMMC_Init(hsd->Instance, Init);
 800892e:	e912 0007 	ldmdb	r2, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008932:	9604      	str	r6, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008934:	68a6      	ldr	r6, [r4, #8]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008936:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800893a:	68e2      	ldr	r2, [r4, #12]
    (void)SDMMC_Init(hsd->Instance, Init);
 800893c:	4618      	mov	r0, r3
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800893e:	e9cd 6205 	strd	r6, r2, [sp, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008942:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008946:	f000 fc6b 	bl	8009220 <SDMMC_Init>
  return HAL_OK;
 800894a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800894c:	2301      	movs	r3, #1
 800894e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008952:	b00b      	add	sp, #44	; 0x2c
 8008954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008956:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008958:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800895c:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800895e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008960:	2d00      	cmp	r5, #0
 8008962:	d0dc      	beq.n	800891e <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8008964:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008966:	4926      	ldr	r1, [pc, #152]	; (8008a00 <HAL_SD_ConfigWideBusOperation+0x114>)
    return HAL_ERROR;
 8008968:	4610      	mov	r0, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800896a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800896c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8008970:	b00b      	add	sp, #44	; 0x2c
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008974:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0U, 0U};
 8008976:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800897a:	f000 fc85 	bl	8009288 <SDMMC_GetResponse>
 800897e:	0181      	lsls	r1, r0, #6
 8008980:	d420      	bmi.n	80089c4 <HAL_SD_ConfigWideBusOperation+0xd8>
  errorstate = SD_FindSCR(hsd, scr);
 8008982:	a904      	add	r1, sp, #16
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff fa1b 	bl	8007dc0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800898a:	b968      	cbnz	r0, 80089a8 <HAL_SD_ConfigWideBusOperation+0xbc>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800898c:	9a05      	ldr	r2, [sp, #20]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	03d2      	lsls	r2, r2, #15
 8008992:	d531      	bpl.n	80089f8 <HAL_SD_ConfigWideBusOperation+0x10c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008994:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008996:	4618      	mov	r0, r3
 8008998:	0409      	lsls	r1, r1, #16
 800899a:	f000 febf 	bl	800971c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800899e:	b918      	cbnz	r0, 80089a8 <HAL_SD_ConfigWideBusOperation+0xbc>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80089a0:	4601      	mov	r1, r0
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	f000 ff30 	bl	8009808 <SDMMC_CmdBusWidth>
 80089a8:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 80089aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089ac:	4310      	orrs	r0, r2
 80089ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80089b0:	e7d5      	b.n	800895e <HAL_SD_ConfigWideBusOperation+0x72>
  uint32_t scr[2U] = {0U, 0U};
 80089b2:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80089b4:	4618      	mov	r0, r3
 80089b6:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0U, 0U};
 80089b8:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80089bc:	f000 fc64 	bl	8009288 <SDMMC_GetResponse>
 80089c0:	0185      	lsls	r5, r0, #6
 80089c2:	d503      	bpl.n	80089cc <HAL_SD_ConfigWideBusOperation+0xe0>
 80089c4:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80089ca:	e7ee      	b.n	80089aa <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff f9f6 	bl	8007dc0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d1e7      	bne.n	80089a8 <HAL_SD_ConfigWideBusOperation+0xbc>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089d8:	9a05      	ldr	r2, [sp, #20]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	0350      	lsls	r0, r2, #13
 80089de:	d50b      	bpl.n	80089f8 <HAL_SD_ConfigWideBusOperation+0x10c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80089e2:	4618      	mov	r0, r3
 80089e4:	0409      	lsls	r1, r1, #16
 80089e6:	f000 fe99 	bl	800971c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d1dc      	bne.n	80089a8 <HAL_SD_ConfigWideBusOperation+0xbc>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80089ee:	2102      	movs	r1, #2
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	f000 ff09 	bl	8009808 <SDMMC_CmdBusWidth>
 80089f6:	e7d7      	b.n	80089a8 <HAL_SD_ConfigWideBusOperation+0xbc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089f8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80089fc:	e7d5      	b.n	80089aa <HAL_SD_ConfigWideBusOperation+0xbe>
 80089fe:	bf00      	nop
 8008a00:	004005ff 	.word	0x004005ff

08008a04 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a04:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8008a06:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a08:	0409      	lsls	r1, r1, #16
{
 8008a0a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f001 f841 	bl	8009a94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a12:	4601      	mov	r1, r0
 8008a14:	b120      	cbz	r0, 8008a20 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8008a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a18:	2000      	movs	r0, #0
 8008a1a:	4319      	orrs	r1, r3
 8008a1c:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8008a1e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a20:	6820      	ldr	r0, [r4, #0]
 8008a22:	f000 fc31 	bl	8009288 <SDMMC_GetResponse>
 8008a26:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8008a2a:	bd10      	pop	{r4, pc}

08008a2c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop

08008a30 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8008a30:	b1e8      	cbz	r0, 8008a6e <HAL_SDRAM_Init+0x3e>
{   
 8008a32:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008a38:	4604      	mov	r4, r0
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008a40:	b183      	cbz	r3, 8008a64 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a42:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a44:	1d21      	adds	r1, r4, #4
 8008a46:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a4c:	f000 fad6 	bl	8008ffc <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a50:	4629      	mov	r1, r5
 8008a52:	e9d4 0200 	ldrd	r0, r2, [r4]
 8008a56:	f000 fb0f 	bl	8009078 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a5a:	2301      	movs	r3, #1
  return HAL_OK;
 8008a5c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8008a64:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8008a68:	f7ff ffe0 	bl	8008a2c <HAL_SDRAM_MspInit>
 8008a6c:	e7e9      	b.n	8008a42 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8008a6e:	2001      	movs	r0, #1
}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop

08008a74 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a74:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a76:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d010      	beq.n	8008aa2 <HAL_SDRAM_SendCommand+0x2e>
 8008a80:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a82:	2302      	movs	r3, #2
 8008a84:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a86:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a8c:	f000 fb46 	bl	800911c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a90:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8008a92:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a94:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008a96:	bf0c      	ite	eq
 8008a98:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008a9a:	2301      	movne	r3, #1
 8008a9c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8008aa2:	4618      	mov	r0, r3
}
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop

08008aa8 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008aa8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d00c      	beq.n	8008acc <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ab2:	2302      	movs	r3, #2
{
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008ab8:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008aba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008abe:	f000 fb43 	bl	8009148 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ac2:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8008ac4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ac6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8008aca:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008acc:	4618      	mov	r0, r3
}
 8008ace:	4770      	bx	lr

08008ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8008ad0:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8008ad2:	4601      	mov	r1, r0
{
 8008ad4:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2036      	movs	r0, #54	; 0x36
 8008ada:	f7fe fa47 	bl	8006f6c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008ade:	2036      	movs	r0, #54	; 0x36
 8008ae0:	f7fe fa7a 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008ae4:	4b18      	ldr	r3, [pc, #96]	; (8008b48 <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ae6:	a901      	add	r1, sp, #4
 8008ae8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008aec:	f042 0210 	orr.w	r2, r2, #16
 8008af0:	641a      	str	r2, [r3, #64]	; 0x40
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008afc:	f7ff f936 	bl	8007d6c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	b9c3      	cbnz	r3, 8008b36 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008b04:	f7ff f912 	bl	8007d2c <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008b08:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8008b0a:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 8008b0c:	4c10      	ldr	r4, [pc, #64]	; (8008b50 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8008b0e:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008b12:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 8008b16:	490f      	ldr	r1, [pc, #60]	; (8008b54 <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8008b18:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8008b1a:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008b1c:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 8008b1e:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 8008b20:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008b22:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b24:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b26:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8008b28:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8008b2a:	f001 f803 	bl	8009b34 <HAL_TIM_Base_Init>
 8008b2e:	b130      	cbz	r0, 8008b3e <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008b30:	2001      	movs	r0, #1
}
 8008b32:	b009      	add	sp, #36	; 0x24
 8008b34:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008b36:	f7ff f8f9 	bl	8007d2c <HAL_RCC_GetPCLK1Freq>
 8008b3a:	0040      	lsls	r0, r0, #1
 8008b3c:	e7e4      	b.n	8008b08 <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 f87c 	bl	8009c3c <HAL_TIM_Base_Start_IT>
}
 8008b44:	b009      	add	sp, #36	; 0x24
 8008b46:	bd30      	pop	{r4, r5, pc}
 8008b48:	40023800 	.word	0x40023800
 8008b4c:	431bde83 	.word	0x431bde83
 8008b50:	20003aec 	.word	0x20003aec
 8008b54:	40001000 	.word	0x40001000

08008b58 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8008b58:	f7fe b9d0 	b.w	8006efc <HAL_IncTick>

08008b5c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8008b5c:	4801      	ldr	r0, [pc, #4]	; (8008b64 <TIM6_DAC_IRQHandler+0x8>)
 8008b5e:	f001 b88b 	b.w	8009c78 <HAL_TIM_IRQHandler>
 8008b62:	bf00      	nop
 8008b64:	20003aec 	.word	0x20003aec

08008b68 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b6a:	07da      	lsls	r2, r3, #31
{
 8008b6c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b6e:	d506      	bpl.n	8008b7e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b70:	6801      	ldr	r1, [r0, #0]
 8008b72:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008b74:	684a      	ldr	r2, [r1, #4]
 8008b76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008b7a:	4322      	orrs	r2, r4
 8008b7c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b7e:	079c      	lsls	r4, r3, #30
 8008b80:	d506      	bpl.n	8008b90 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b82:	6801      	ldr	r1, [r0, #0]
 8008b84:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008b86:	684a      	ldr	r2, [r1, #4]
 8008b88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b8c:	4322      	orrs	r2, r4
 8008b8e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b90:	0759      	lsls	r1, r3, #29
 8008b92:	d506      	bpl.n	8008ba2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b94:	6801      	ldr	r1, [r0, #0]
 8008b96:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008b98:	684a      	ldr	r2, [r1, #4]
 8008b9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b9e:	4322      	orrs	r2, r4
 8008ba0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ba2:	071a      	lsls	r2, r3, #28
 8008ba4:	d506      	bpl.n	8008bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ba6:	6801      	ldr	r1, [r0, #0]
 8008ba8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008baa:	684a      	ldr	r2, [r1, #4]
 8008bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bb0:	4322      	orrs	r2, r4
 8008bb2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bb4:	06dc      	lsls	r4, r3, #27
 8008bb6:	d506      	bpl.n	8008bc6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bb8:	6801      	ldr	r1, [r0, #0]
 8008bba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008bbc:	688a      	ldr	r2, [r1, #8]
 8008bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bc2:	4322      	orrs	r2, r4
 8008bc4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bc6:	0699      	lsls	r1, r3, #26
 8008bc8:	d506      	bpl.n	8008bd8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bca:	6801      	ldr	r1, [r0, #0]
 8008bcc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008bce:	688a      	ldr	r2, [r1, #8]
 8008bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bd4:	4322      	orrs	r2, r4
 8008bd6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd8:	065a      	lsls	r2, r3, #25
 8008bda:	d50a      	bpl.n	8008bf2 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bdc:	6801      	ldr	r1, [r0, #0]
 8008bde:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008be0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008be2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008be6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008bea:	ea42 0204 	orr.w	r2, r2, r4
 8008bee:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bf0:	d00b      	beq.n	8008c0a <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bf2:	061b      	lsls	r3, r3, #24
 8008bf4:	d506      	bpl.n	8008c04 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bf6:	6802      	ldr	r2, [r0, #0]
 8008bf8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008bfa:	6853      	ldr	r3, [r2, #4]
 8008bfc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6053      	str	r3, [r2, #4]
  }
}
 8008c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c08:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c0a:	684a      	ldr	r2, [r1, #4]
 8008c0c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008c0e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008c12:	4322      	orrs	r2, r4
 8008c14:	604a      	str	r2, [r1, #4]
 8008c16:	e7ec      	b.n	8008bf2 <UART_AdvFeatureConfig+0x8a>

08008c18 <HAL_UART_Init>:
  if (huart == NULL)
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d04f      	beq.n	8008cbc <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008c1c:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8008c1e:	b570      	push	{r4, r5, r6, lr}
 8008c20:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d045      	beq.n	8008cb2 <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 8008c26:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008c28:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c2a:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8008c2c:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c2e:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008c30:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c32:	4302      	orrs	r2, r0
 8008c34:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8008c36:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c3a:	4dbc      	ldr	r5, [pc, #752]	; (8008f2c <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c3c:	4302      	orrs	r2, r0
 8008c3e:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8008c40:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c42:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c44:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c46:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c48:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c4a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c4c:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8008c4e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c50:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 8008c52:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c56:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c58:	4db5      	ldr	r5, [pc, #724]	; (8008f30 <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c5a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c5e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c60:	ea41 0106 	orr.w	r1, r1, r6
 8008c64:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c66:	6899      	ldr	r1, [r3, #8]
 8008c68:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008c6c:	ea42 0201 	orr.w	r2, r2, r1
 8008c70:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c72:	d025      	beq.n	8008cc0 <HAL_UART_Init+0xa8>
 8008c74:	4aaf      	ldr	r2, [pc, #700]	; (8008f34 <HAL_UART_Init+0x31c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d044      	beq.n	8008d04 <HAL_UART_Init+0xec>
 8008c7a:	4aaf      	ldr	r2, [pc, #700]	; (8008f38 <HAL_UART_Init+0x320>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	f000 80f3 	beq.w	8008e68 <HAL_UART_Init+0x250>
 8008c82:	4aae      	ldr	r2, [pc, #696]	; (8008f3c <HAL_UART_Init+0x324>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d045      	beq.n	8008d14 <HAL_UART_Init+0xfc>
 8008c88:	4aad      	ldr	r2, [pc, #692]	; (8008f40 <HAL_UART_Init+0x328>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	f000 80d8 	beq.w	8008e40 <HAL_UART_Init+0x228>
 8008c90:	4aac      	ldr	r2, [pc, #688]	; (8008f44 <HAL_UART_Init+0x32c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	f000 8188 	beq.w	8008fa8 <HAL_UART_Init+0x390>
 8008c98:	4aab      	ldr	r2, [pc, #684]	; (8008f48 <HAL_UART_Init+0x330>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	f000 8198 	beq.w	8008fd0 <HAL_UART_Init+0x3b8>
 8008ca0:	4aaa      	ldr	r2, [pc, #680]	; (8008f4c <HAL_UART_Init+0x334>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	f000 815e 	beq.w	8008f64 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 8008ca8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8008caa:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8008cac:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8008cb2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8008cb6:	f7f7 fdcb 	bl	8000850 <HAL_UART_MspInit>
 8008cba:	e7b4      	b.n	8008c26 <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8008cbc:	2001      	movs	r0, #1
}
 8008cbe:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cc0:	4ba3      	ldr	r3, [pc, #652]	; (8008f50 <HAL_UART_Init+0x338>)
 8008cc2:	4aa4      	ldr	r2, [pc, #656]	; (8008f54 <HAL_UART_Init+0x33c>)
 8008cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008cd2:	d02f      	beq.n	8008d34 <HAL_UART_Init+0x11c>
    switch (clocksource)
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d8e7      	bhi.n	8008ca8 <HAL_UART_Init+0x90>
 8008cd8:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <HAL_UART_Init+0xc8>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008e2f 	.word	0x08008e2f
 8008ce4:	08008d71 	.word	0x08008d71
 8008ce8:	08008e83 	.word	0x08008e83
 8008cec:	08008ca9 	.word	0x08008ca9
 8008cf0:	08008e57 	.word	0x08008e57
 8008cf4:	08008ca9 	.word	0x08008ca9
 8008cf8:	08008ca9 	.word	0x08008ca9
 8008cfc:	08008ca9 	.word	0x08008ca9
 8008d00:	08008e93 	.word	0x08008e93
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d04:	4b92      	ldr	r3, [pc, #584]	; (8008f50 <HAL_UART_Init+0x338>)
 8008d06:	4a94      	ldr	r2, [pc, #592]	; (8008f58 <HAL_UART_Init+0x340>)
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0c:	f003 030c 	and.w	r3, r3, #12
 8008d10:	5cd3      	ldrb	r3, [r2, r3]
 8008d12:	e7dc      	b.n	8008cce <HAL_UART_Init+0xb6>
 8008d14:	4b8e      	ldr	r3, [pc, #568]	; (8008f50 <HAL_UART_Init+0x338>)
 8008d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d1e:	2b40      	cmp	r3, #64	; 0x40
 8008d20:	f000 8096 	beq.w	8008e50 <HAL_UART_Init+0x238>
 8008d24:	d97d      	bls.n	8008e22 <HAL_UART_Init+0x20a>
 8008d26:	2b80      	cmp	r3, #128	; 0x80
 8008d28:	f000 80a8 	beq.w	8008e7c <HAL_UART_Init+0x264>
 8008d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008d2e:	f000 80c5 	beq.w	8008ebc <HAL_UART_Init+0x2a4>
 8008d32:	e7b9      	b.n	8008ca8 <HAL_UART_Init+0x90>
    switch (clocksource)
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d8b7      	bhi.n	8008ca8 <HAL_UART_Init+0x90>
 8008d38:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <HAL_UART_Init+0x128>)
 8008d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3e:	bf00      	nop
 8008d40:	08008f25 	.word	0x08008f25
 8008d44:	08008efb 	.word	0x08008efb
 8008d48:	08008f15 	.word	0x08008f15
 8008d4c:	08008ca9 	.word	0x08008ca9
 8008d50:	08008f0f 	.word	0x08008f0f
 8008d54:	08008ca9 	.word	0x08008ca9
 8008d58:	08008ca9 	.word	0x08008ca9
 8008d5c:	08008ca9 	.word	0x08008ca9
 8008d60:	08008ec3 	.word	0x08008ec3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d19f      	bne.n	8008ca8 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008d6c:	f000 80c5 	beq.w	8008efa <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d70:	f7fe ffec 	bl	8007d4c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8008d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d7e:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d80:	f1a2 0110 	sub.w	r1, r2, #16
 8008d84:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	d88d      	bhi.n	8008ca8 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 8008d8c:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8008d8e:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8008d90:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8008d92:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	f040 8082 	bne.w	8008ea2 <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d9e:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da0:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	f042 0201 	orr.w	r2, r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db8:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008dba:	f7fe f8ab 	bl	8006f14 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dbe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008dc0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	0710      	lsls	r0, r2, #28
 8008dc6:	d407      	bmi.n	8008dd8 <HAL_UART_Init+0x1c0>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dc8:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8008dca:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008dcc:	6762      	str	r2, [r4, #116]	; 0x74

  return HAL_OK;
 8008dce:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008dd0:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8008dd2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd8:	69dd      	ldr	r5, [r3, #28]
 8008dda:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008dde:	d1f3      	bne.n	8008dc8 <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de0:	f7fe f898 	bl	8006f14 <HAL_GetTick>
 8008de4:	1b80      	subs	r0, r0, r6
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008de6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008dec:	f080 80cd 	bcs.w	8008f8a <HAL_UART_Init+0x372>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	0751      	lsls	r1, r2, #29
 8008df4:	d5f0      	bpl.n	8008dd8 <HAL_UART_Init+0x1c0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008df6:	69da      	ldr	r2, [r3, #28]
 8008df8:	0512      	lsls	r2, r2, #20
 8008dfa:	d5ed      	bpl.n	8008dd8 <HAL_UART_Init+0x1c0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8008e00:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008e02:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e04:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e06:	6819      	ldr	r1, [r3, #0]
 8008e08:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008e0c:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	6899      	ldr	r1, [r3, #8]
 8008e10:	f021 0101 	bic.w	r1, r1, #1
 8008e14:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008e16:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e18:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e1e:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f47f af40 	bne.w	8008ca8 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e2c:	d07a      	beq.n	8008f24 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e2e:	f7fe ff7d 	bl	8007d2c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8008e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e3c:	b292      	uxth	r2, r2
 8008e3e:	e79f      	b.n	8008d80 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e40:	4b43      	ldr	r3, [pc, #268]	; (8008f50 <HAL_UART_Init+0x338>)
 8008e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4e:	d12d      	bne.n	8008eac <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e54:	d05b      	beq.n	8008f0e <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8008e56:	f7fe ff35 	bl	8007cc4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e5a:	6863      	ldr	r3, [r4, #4]
 8008e5c:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8008e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e64:	b292      	uxth	r2, r2
 8008e66:	e78b      	b.n	8008d80 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e68:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <HAL_UART_Init+0x338>)
 8008e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e72:	2b10      	cmp	r3, #16
 8008e74:	d0ec      	beq.n	8008e50 <HAL_UART_Init+0x238>
 8008e76:	d9d4      	bls.n	8008e22 <HAL_UART_Init+0x20a>
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d13b      	bne.n	8008ef4 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e80:	d048      	beq.n	8008f14 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008e82:	6863      	ldr	r3, [r4, #4]
 8008e84:	4a35      	ldr	r2, [pc, #212]	; (8008f5c <HAL_UART_Init+0x344>)
 8008e86:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e8e:	b292      	uxth	r2, r2
 8008e90:	e776      	b.n	8008d80 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	085a      	lsrs	r2, r3, #1
 8008e96:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8008e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	e76e      	b.n	8008d80 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff fe60 	bl	8008b68 <UART_AdvFeatureConfig>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	e778      	b.n	8008d9e <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eac:	d9b9      	bls.n	8008e22 <HAL_UART_Init+0x20a>
 8008eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb2:	d0e3      	beq.n	8008e7c <HAL_UART_Init+0x264>
 8008eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb8:	f47f aef6 	bne.w	8008ca8 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ebc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ec0:	d1e7      	bne.n	8008e92 <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008ec2:	6862      	ldr	r2, [r4, #4]
 8008ec4:	0853      	lsrs	r3, r2, #1
 8008ec6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ece:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed0:	f1a3 0110 	sub.w	r1, r3, #16
 8008ed4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008ed8:	4291      	cmp	r1, r2
 8008eda:	f63f aee5 	bhi.w	8008ca8 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ede:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ee2:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 8008ee6:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8008eee:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8008ef2:	e750      	b.n	8008d96 <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ef4:	2b30      	cmp	r3, #48	; 0x30
 8008ef6:	d0e1      	beq.n	8008ebc <HAL_UART_Init+0x2a4>
 8008ef8:	e6d6      	b.n	8008ca8 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008efa:	f7fe ff27 	bl	8007d4c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008efe:	6862      	ldr	r2, [r4, #4]
 8008f00:	0853      	lsrs	r3, r2, #1
 8008f02:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	e7e0      	b.n	8008ed0 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 8008f0e:	f7fe fed9 	bl	8007cc4 <HAL_RCC_GetSysClockFreq>
 8008f12:	e7f4      	b.n	8008efe <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008f14:	6862      	ldr	r2, [r4, #4]
 8008f16:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <HAL_UART_Init+0x348>)
 8008f18:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	e7d5      	b.n	8008ed0 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f24:	f7fe ff02 	bl	8007d2c <HAL_RCC_GetPCLK1Freq>
 8008f28:	e7e9      	b.n	8008efe <HAL_UART_Init+0x2e6>
 8008f2a:	bf00      	nop
 8008f2c:	efff69f3 	.word	0xefff69f3
 8008f30:	40011000 	.word	0x40011000
 8008f34:	40004400 	.word	0x40004400
 8008f38:	40004800 	.word	0x40004800
 8008f3c:	40004c00 	.word	0x40004c00
 8008f40:	40005000 	.word	0x40005000
 8008f44:	40011400 	.word	0x40011400
 8008f48:	40007800 	.word	0x40007800
 8008f4c:	40007c00 	.word	0x40007c00
 8008f50:	40023800 	.word	0x40023800
 8008f54:	0800b4b0 	.word	0x0800b4b0
 8008f58:	0800b4b4 	.word	0x0800b4b4
 8008f5c:	00f42400 	.word	0x00f42400
 8008f60:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <HAL_UART_Init+0x3e0>)
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f72:	f43f af6d 	beq.w	8008e50 <HAL_UART_Init+0x238>
 8008f76:	f67f af54 	bls.w	8008e22 <HAL_UART_Init+0x20a>
 8008f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7e:	f43f af7d 	beq.w	8008e7c <HAL_UART_Init+0x264>
 8008f82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008f86:	d099      	beq.n	8008ebc <HAL_UART_Init+0x2a4>
 8008f88:	e68e      	b.n	8008ca8 <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f8a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008f8c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8008f8e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	f022 0201 	bic.w	r2, r2, #1
 8008f9c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008f9e:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8008fa0:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8008fa4:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fa8:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <HAL_UART_Init+0x3e0>)
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb6:	f43f af4b 	beq.w	8008e50 <HAL_UART_Init+0x238>
 8008fba:	f67f aed3 	bls.w	8008d64 <HAL_UART_Init+0x14c>
 8008fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc2:	f43f af5b 	beq.w	8008e7c <HAL_UART_Init+0x264>
 8008fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fca:	f43f af77 	beq.w	8008ebc <HAL_UART_Init+0x2a4>
 8008fce:	e66b      	b.n	8008ca8 <HAL_UART_Init+0x90>
 8008fd0:	4b09      	ldr	r3, [pc, #36]	; (8008ff8 <HAL_UART_Init+0x3e0>)
 8008fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fde:	f43f af37 	beq.w	8008e50 <HAL_UART_Init+0x238>
 8008fe2:	f67f af1e 	bls.w	8008e22 <HAL_UART_Init+0x20a>
 8008fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fea:	f43f af47 	beq.w	8008e7c <HAL_UART_Init+0x264>
 8008fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ff2:	f43f af63 	beq.w	8008ebc <HAL_UART_Init+0x2a4>
 8008ff6:	e657      	b.n	8008ca8 <HAL_UART_Init+0x90>
 8008ff8:	40023800 	.word	0x40023800

08008ffc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009000:	680f      	ldr	r7, [r1, #0]
 8009002:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8009006:	2f01      	cmp	r7, #1
 8009008:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 800900c:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 8009010:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8009014:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8009018:	d012      	beq.n	8009040 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800901a:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800901c:	4f15      	ldr	r7, [pc, #84]	; (8009074 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800901e:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009020:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009024:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009026:	4322      	orrs	r2, r4
 8009028:	ea42 0308 	orr.w	r3, r2, r8
 800902c:	ea43 030c 	orr.w	r3, r3, ip
 8009030:	4333      	orrs	r3, r6
 8009032:	432b      	orrs	r3, r5
 8009034:	430b      	orrs	r3, r1
 8009036:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009038:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800903a:	2000      	movs	r0, #0
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009040:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009044:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009046:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009048:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800904c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009050:	4c08      	ldr	r4, [pc, #32]	; (8009074 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009052:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009056:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009058:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800905c:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009060:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009062:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009064:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009066:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009068:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800906a:	6043      	str	r3, [r0, #4]
}
 800906c:	2000      	movs	r0, #0
 800906e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009072:	bf00      	nop
 8009074:	ffff8000 	.word	0xffff8000

08009078 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800907e:	2a01      	cmp	r2, #1
 8009080:	68cf      	ldr	r7, [r1, #12]
 8009082:	694e      	ldr	r6, [r1, #20]
 8009084:	f103 33ff 	add.w	r3, r3, #4294967295
 8009088:	684d      	ldr	r5, [r1, #4]
 800908a:	f107 37ff 	add.w	r7, r7, #4294967295
 800908e:	688c      	ldr	r4, [r1, #8]
 8009090:	f106 36ff 	add.w	r6, r6, #4294967295
 8009094:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8009098:	f105 35ff 	add.w	r5, r5, #4294967295
 800909c:	6809      	ldr	r1, [r1, #0]
 800909e:	f104 34ff 	add.w	r4, r4, #4294967295
 80090a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80090a6:	ea4f 3707 	mov.w	r7, r7, lsl #12
 80090aa:	f101 38ff 	add.w	r8, r1, #4294967295
 80090ae:	ea4f 5606 	mov.w	r6, r6, lsl #20
 80090b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80090b6:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80090ba:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80090be:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 80090c2:	d012      	beq.n	80090ea <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090c4:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090c8:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090ca:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80090ce:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090d2:	ea42 0305 	orr.w	r3, r2, r5
 80090d6:	430b      	orrs	r3, r1
 80090d8:	ea43 030e 	orr.w	r3, r3, lr
 80090dc:	ea43 030c 	orr.w	r3, r3, ip
 80090e0:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80090e2:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80090e4:	2000      	movs	r0, #0
 80090e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090ea:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090ec:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090f0:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090f2:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80090f6:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80090f8:	4e07      	ldr	r6, [pc, #28]	; (8009118 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090fa:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80090fe:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009102:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009104:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009108:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800910a:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800910c:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800910e:	60c3      	str	r3, [r0, #12]
}
 8009110:	2000      	movs	r0, #0
 8009112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009116:	bf00      	nop
 8009118:	ff0f0fff 	.word	0xff0f0fff

0800911c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800911c:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 800911e:	2200      	movs	r2, #0
{
 8009120:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009122:	684d      	ldr	r5, [r1, #4]
{
 8009124:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009126:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8009128:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 800912a:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800912c:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800912e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009132:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009136:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009138:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800913c:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	6123      	str	r3, [r4, #16]
}
 8009142:	b002      	add	sp, #8
 8009144:	bc30      	pop	{r4, r5}
 8009146:	4770      	bx	lr

08009148 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009148:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 800914a:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800914c:	6953      	ldr	r3, [r2, #20]
 800914e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8009152:	6151      	str	r1, [r2, #20]
}
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop

08009158 <SDMMC_GetCmdResp1.part.2>:
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009158:	4b30      	ldr	r3, [pc, #192]	; (800921c <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 800915a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800915c:	4013      	ands	r3, r2
 800915e:	b34b      	cbz	r3, 80091b4 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009160:	2a00      	cmp	r2, #0
 8009162:	db29      	blt.n	80091b8 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009164:	0051      	lsls	r1, r2, #1
 8009166:	d42d      	bmi.n	80091c4 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009168:	0093      	lsls	r3, r2, #2
 800916a:	d42d      	bmi.n	80091c8 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800916c:	00d1      	lsls	r1, r2, #3
 800916e:	d426      	bmi.n	80091be <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009170:	0113      	lsls	r3, r2, #4
 8009172:	d42e      	bmi.n	80091d2 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	d42f      	bmi.n	80091d8 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009178:	01d3      	lsls	r3, r2, #7
 800917a:	d427      	bmi.n	80091cc <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800917c:	0211      	lsls	r1, r2, #8
 800917e:	d42e      	bmi.n	80091de <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009180:	0253      	lsls	r3, r2, #9
 8009182:	d42f      	bmi.n	80091e4 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009184:	0291      	lsls	r1, r2, #10
 8009186:	d430      	bmi.n	80091ea <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009188:	02d3      	lsls	r3, r2, #11
 800918a:	d431      	bmi.n	80091f0 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800918c:	0351      	lsls	r1, r2, #13
 800918e:	d432      	bmi.n	80091f6 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009190:	0393      	lsls	r3, r2, #14
 8009192:	d433      	bmi.n	80091fc <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009194:	03d1      	lsls	r1, r2, #15
 8009196:	d434      	bmi.n	8009202 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009198:	0413      	lsls	r3, r2, #16
 800919a:	d435      	bmi.n	8009208 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800919c:	0451      	lsls	r1, r2, #17
 800919e:	d436      	bmi.n	800920e <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80091a0:	0493      	lsls	r3, r2, #18
 80091a2:	d437      	bmi.n	8009214 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091a4:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091a8:	bf14      	ite	ne
 80091aa:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80091ae:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80091b2:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 80091b4:	4618      	mov	r0, r3
 80091b6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80091b8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80091bc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80091be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80091c2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80091c4:	2040      	movs	r0, #64	; 0x40
 80091c6:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80091c8:	2080      	movs	r0, #128	; 0x80
 80091ca:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80091d0:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80091d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091d6:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80091d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80091dc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80091e2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80091e8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80091ee:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80091f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80091f4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80091f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80091fa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80091fc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009200:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009202:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009206:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009208:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800920c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800920e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009212:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009214:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	fdffe008 	.word	0xfdffe008

08009220 <SDMMC_Init>:
{
 8009220:	b084      	sub	sp, #16
 8009222:	b470      	push	{r4, r5, r6}
 8009224:	ae04      	add	r6, sp, #16
             Init.ClockPowerSave      |\
 8009226:	9c07      	ldr	r4, [sp, #28]
{
 8009228:	4605      	mov	r5, r0
}
 800922a:	2000      	movs	r0, #0
{
 800922c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8009230:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8009232:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8009236:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8009238:	9a08      	ldr	r2, [sp, #32]
             Init.ClockBypass         |\
 800923a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800923c:	9909      	ldr	r1, [sp, #36]	; 0x24
             Init.ClockPowerSave      |\
 800923e:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009240:	686c      	ldr	r4, [r5, #4]
             Init.BusWide             |\
 8009242:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009244:	4a03      	ldr	r2, [pc, #12]	; (8009254 <SDMMC_Init+0x34>)
             Init.HardwareFlowControl |\
 8009246:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009248:	4022      	ands	r2, r4
 800924a:	4313      	orrs	r3, r2
 800924c:	606b      	str	r3, [r5, #4]
}
 800924e:	bc70      	pop	{r4, r5, r6}
 8009250:	b004      	add	sp, #16
 8009252:	4770      	bx	lr
 8009254:	ffff8100 	.word	0xffff8100

08009258 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8009258:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop

08009260 <SDMMC_WriteFIFO>:
{ 
 8009260:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 8009262:	680a      	ldr	r2, [r1, #0]
}
 8009264:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8009266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800926a:	4770      	bx	lr

0800926c <SDMMC_PowerState_ON>:
{  
 800926c:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800926e:	2203      	movs	r2, #3
{  
 8009270:	4603      	mov	r3, r0
  HAL_Delay(2);
 8009272:	2002      	movs	r0, #2
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009274:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 8009276:	f7fd fe53 	bl	8006f20 <HAL_Delay>
}
 800927a:	2000      	movs	r0, #0
 800927c:	bd08      	pop	{r3, pc}
 800927e:	bf00      	nop

08009280 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009280:	6800      	ldr	r0, [r0, #0]
}
 8009282:	f000 0003 	and.w	r0, r0, #3
 8009286:	4770      	bx	lr

08009288 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009288:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800928a:	5840      	ldr	r0, [r0, r1]
}  
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop

08009290 <SDMMC_ConfigData>:
{
 8009290:	b430      	push	{r4, r5}
 8009292:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009294:	680c      	ldr	r4, [r1, #0]
}
 8009296:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009298:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 800929c:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 800929e:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 80092a0:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 80092a2:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 80092a4:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 80092a6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80092a8:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092aa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 80092ac:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092ae:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 80092b2:	430b      	orrs	r3, r1
}
 80092b4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092b6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop

080092bc <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092bc:	4b1c      	ldr	r3, [pc, #112]	; (8009330 <SDMMC_CmdBlockLength+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80092be:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <SDMMC_CmdBlockLength+0x78>)
{
 80092c0:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092c2:	681c      	ldr	r4, [r3, #0]
 80092c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80092c8:	4d1b      	ldr	r5, [pc, #108]	; (8009338 <SDMMC_CmdBlockLength+0x7c>)
  SDMMCx->ARG = Command->Argument;
 80092ca:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092cc:	fba5 4104 	umull	r4, r1, r5, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80092d0:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092d2:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80092d4:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092d6:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80092da:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 80092de:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 80092e0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80092e4:	d313      	bcc.n	800930e <SDMMC_CmdBlockLength+0x52>
    sta_reg = SDMMCx->STA;
 80092e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092e8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80092ec:	d0f8      	beq.n	80092e0 <SDMMC_CmdBlockLength+0x24>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092ee:	0511      	lsls	r1, r2, #20
 80092f0:	d4f6      	bmi.n	80092e0 <SDMMC_CmdBlockLength+0x24>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092f4:	075a      	lsls	r2, r3, #29
 80092f6:	d413      	bmi.n	8009320 <SDMMC_CmdBlockLength+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092fa:	07db      	lsls	r3, r3, #31
 80092fc:	d40b      	bmi.n	8009316 <SDMMC_CmdBlockLength+0x5a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092fe:	23c5      	movs	r3, #197	; 0xc5
 8009300:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009302:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b10      	cmp	r3, #16
 8009308:	d00e      	beq.n	8009328 <SDMMC_CmdBlockLength+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800930a:	2001      	movs	r0, #1
  return errorstate;
 800930c:	e001      	b.n	8009312 <SDMMC_CmdBlockLength+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800930e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009312:	bc30      	pop	{r4, r5}
 8009314:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009316:	2301      	movs	r3, #1
}
 8009318:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800931a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800931c:	4618      	mov	r0, r3
}
 800931e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009320:	2304      	movs	r3, #4
 8009322:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009324:	4618      	mov	r0, r3
 8009326:	e7f4      	b.n	8009312 <SDMMC_CmdBlockLength+0x56>
}
 8009328:	bc30      	pop	{r4, r5}
 800932a:	f7ff bf15 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 800932e:	bf00      	nop
 8009330:	20000068 	.word	0x20000068
 8009334:	fffff000 	.word	0xfffff000
 8009338:	10624dd3 	.word	0x10624dd3

0800933c <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800933c:	4a1c      	ldr	r2, [pc, #112]	; (80093b0 <SDMMC_CmdReadSingleBlock+0x74>)
 800933e:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <SDMMC_CmdReadSingleBlock+0x78>)
 8009340:	6812      	ldr	r2, [r2, #0]
{
 8009342:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009344:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009348:	f240 4451 	movw	r4, #1105	; 0x451
  SDMMCx->ARG = Command->Argument;
 800934c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800934e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009352:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009354:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009356:	4918      	ldr	r1, [pc, #96]	; (80093b8 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009358:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800935c:	4029      	ands	r1, r5
 800935e:	430c      	orrs	r4, r1
 8009360:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8009362:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009366:	d313      	bcc.n	8009390 <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8009368:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800936a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800936e:	d0f8      	beq.n	8009362 <SDMMC_CmdReadSingleBlock+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009370:	0511      	lsls	r1, r2, #20
 8009372:	d4f6      	bmi.n	8009362 <SDMMC_CmdReadSingleBlock+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009374:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009376:	075a      	lsls	r2, r3, #29
 8009378:	d413      	bmi.n	80093a2 <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800937a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800937c:	07db      	lsls	r3, r3, #31
 800937e:	d40b      	bmi.n	8009398 <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009380:	23c5      	movs	r3, #197	; 0xc5
 8009382:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009384:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b11      	cmp	r3, #17
 800938a:	d00e      	beq.n	80093aa <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800938c:	2001      	movs	r0, #1
  return errorstate;
 800938e:	e001      	b.n	8009394 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8009390:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009394:	bc30      	pop	{r4, r5}
 8009396:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009398:	2301      	movs	r3, #1
}
 800939a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800939c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800939e:	4618      	mov	r0, r3
}
 80093a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093a2:	2304      	movs	r3, #4
 80093a4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093a6:	4618      	mov	r0, r3
 80093a8:	e7f4      	b.n	8009394 <SDMMC_CmdReadSingleBlock+0x58>
}
 80093aa:	bc30      	pop	{r4, r5}
 80093ac:	f7ff bed4 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 80093b0:	20000068 	.word	0x20000068
 80093b4:	10624dd3 	.word	0x10624dd3
 80093b8:	fffff000 	.word	0xfffff000

080093bc <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093bc:	4a1c      	ldr	r2, [pc, #112]	; (8009430 <SDMMC_CmdReadMultiBlock+0x74>)
 80093be:	4b1d      	ldr	r3, [pc, #116]	; (8009434 <SDMMC_CmdReadMultiBlock+0x78>)
 80093c0:	6812      	ldr	r2, [r2, #0]
{
 80093c2:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093c8:	f240 4452 	movw	r4, #1106	; 0x452
  SDMMCx->ARG = Command->Argument;
 80093cc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093ce:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093d2:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093d4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093d6:	4918      	ldr	r1, [pc, #96]	; (8009438 <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093d8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093dc:	4029      	ands	r1, r5
 80093de:	430c      	orrs	r4, r1
 80093e0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80093e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80093e6:	d313      	bcc.n	8009410 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 80093e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80093ee:	d0f8      	beq.n	80093e2 <SDMMC_CmdReadMultiBlock+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093f0:	0511      	lsls	r1, r2, #20
 80093f2:	d4f6      	bmi.n	80093e2 <SDMMC_CmdReadMultiBlock+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80093f6:	075a      	lsls	r2, r3, #29
 80093f8:	d413      	bmi.n	8009422 <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80093fc:	07db      	lsls	r3, r3, #31
 80093fe:	d40b      	bmi.n	8009418 <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009400:	23c5      	movs	r3, #197	; 0xc5
 8009402:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009404:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b12      	cmp	r3, #18
 800940a:	d00e      	beq.n	800942a <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800940c:	2001      	movs	r0, #1
  return errorstate;
 800940e:	e001      	b.n	8009414 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8009410:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009414:	bc30      	pop	{r4, r5}
 8009416:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009418:	2301      	movs	r3, #1
}
 800941a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800941c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800941e:	4618      	mov	r0, r3
}
 8009420:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009422:	2304      	movs	r3, #4
 8009424:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009426:	4618      	mov	r0, r3
 8009428:	e7f4      	b.n	8009414 <SDMMC_CmdReadMultiBlock+0x58>
}
 800942a:	bc30      	pop	{r4, r5}
 800942c:	f7ff be94 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 8009430:	20000068 	.word	0x20000068
 8009434:	10624dd3 	.word	0x10624dd3
 8009438:	fffff000 	.word	0xfffff000

0800943c <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800943c:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <SDMMC_CmdWriteSingleBlock+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800943e:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 8009440:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009442:	681c      	ldr	r4, [r3, #0]
 8009444:	f241 3388 	movw	r3, #5000	; 0x1388
 8009448:	4d1b      	ldr	r5, [pc, #108]	; (80094b8 <SDMMC_CmdWriteSingleBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 800944a:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800944c:	fba5 4104 	umull	r4, r1, r5, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009450:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009452:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009454:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009456:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800945a:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
 800945e:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8009460:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009464:	d313      	bcc.n	800948e <SDMMC_CmdWriteSingleBlock+0x52>
    sta_reg = SDMMCx->STA;
 8009466:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009468:	f012 0f45 	tst.w	r2, #69	; 0x45
 800946c:	d0f8      	beq.n	8009460 <SDMMC_CmdWriteSingleBlock+0x24>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800946e:	0511      	lsls	r1, r2, #20
 8009470:	d4f6      	bmi.n	8009460 <SDMMC_CmdWriteSingleBlock+0x24>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009472:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009474:	075a      	lsls	r2, r3, #29
 8009476:	d413      	bmi.n	80094a0 <SDMMC_CmdWriteSingleBlock+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009478:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800947a:	07db      	lsls	r3, r3, #31
 800947c:	d40b      	bmi.n	8009496 <SDMMC_CmdWriteSingleBlock+0x5a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800947e:	23c5      	movs	r3, #197	; 0xc5
 8009480:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009482:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b18      	cmp	r3, #24
 8009488:	d00e      	beq.n	80094a8 <SDMMC_CmdWriteSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800948a:	2001      	movs	r0, #1
  return errorstate;
 800948c:	e001      	b.n	8009492 <SDMMC_CmdWriteSingleBlock+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800948e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009492:	bc30      	pop	{r4, r5}
 8009494:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009496:	2301      	movs	r3, #1
}
 8009498:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800949a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800949c:	4618      	mov	r0, r3
}
 800949e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094a0:	2304      	movs	r3, #4
 80094a2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094a4:	4618      	mov	r0, r3
 80094a6:	e7f4      	b.n	8009492 <SDMMC_CmdWriteSingleBlock+0x56>
}
 80094a8:	bc30      	pop	{r4, r5}
 80094aa:	f7ff be55 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 80094ae:	bf00      	nop
 80094b0:	20000068 	.word	0x20000068
 80094b4:	fffff000 	.word	0xfffff000
 80094b8:	10624dd3 	.word	0x10624dd3

080094bc <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094bc:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <SDMMC_CmdWriteMultiBlock+0x74>)
 80094be:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <SDMMC_CmdWriteMultiBlock+0x78>)
 80094c0:	6812      	ldr	r2, [r2, #0]
{
 80094c2:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80094c8:	f240 4459 	movw	r4, #1113	; 0x459
  SDMMCx->ARG = Command->Argument;
 80094cc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094ce:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80094d2:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094d4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80094d6:	4918      	ldr	r1, [pc, #96]	; (8009538 <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094d8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80094dc:	4029      	ands	r1, r5
 80094de:	430c      	orrs	r4, r1
 80094e0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80094e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80094e6:	d313      	bcc.n	8009510 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 80094e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80094ee:	d0f8      	beq.n	80094e2 <SDMMC_CmdWriteMultiBlock+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094f0:	0511      	lsls	r1, r2, #20
 80094f2:	d4f6      	bmi.n	80094e2 <SDMMC_CmdWriteMultiBlock+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80094f6:	075a      	lsls	r2, r3, #29
 80094f8:	d413      	bmi.n	8009522 <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80094fc:	07db      	lsls	r3, r3, #31
 80094fe:	d40b      	bmi.n	8009518 <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009500:	23c5      	movs	r3, #197	; 0xc5
 8009502:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009504:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b19      	cmp	r3, #25
 800950a:	d00e      	beq.n	800952a <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800950c:	2001      	movs	r0, #1
  return errorstate;
 800950e:	e001      	b.n	8009514 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8009510:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009514:	bc30      	pop	{r4, r5}
 8009516:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009518:	2301      	movs	r3, #1
}
 800951a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800951c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800951e:	4618      	mov	r0, r3
}
 8009520:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009522:	2304      	movs	r3, #4
 8009524:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009526:	4618      	mov	r0, r3
 8009528:	e7f4      	b.n	8009514 <SDMMC_CmdWriteMultiBlock+0x58>
}
 800952a:	bc30      	pop	{r4, r5}
 800952c:	f7ff be14 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 8009530:	20000068 	.word	0x20000068
 8009534:	10624dd3 	.word	0x10624dd3
 8009538:	fffff000 	.word	0xfffff000

0800953c <SDMMC_CmdStopTransfer>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800953c:	4a1c      	ldr	r2, [pc, #112]	; (80095b0 <SDMMC_CmdStopTransfer+0x74>)
  SDMMCx->ARG = Command->Argument;
 800953e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009540:	f240 414c 	movw	r1, #1100	; 0x44c
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009544:	6812      	ldr	r2, [r2, #0]
{
 8009546:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009548:	4d1a      	ldr	r5, [pc, #104]	; (80095b4 <SDMMC_CmdStopTransfer+0x78>)
  SDMMCx->ARG = Command->Argument;
 800954a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800954c:	4c1a      	ldr	r4, [pc, #104]	; (80095b8 <SDMMC_CmdStopTransfer+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800954e:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009552:	68c3      	ldr	r3, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009554:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009556:	401c      	ands	r4, r3
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009558:	4b18      	ldr	r3, [pc, #96]	; (80095bc <SDMMC_CmdStopTransfer+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800955a:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800955c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009560:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8009562:	b1a3      	cbz	r3, 800958e <SDMMC_CmdStopTransfer+0x52>
    sta_reg = SDMMCx->STA;
 8009564:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009566:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009568:	f012 0f45 	tst.w	r2, #69	; 0x45
 800956c:	d0f9      	beq.n	8009562 <SDMMC_CmdStopTransfer+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800956e:	0511      	lsls	r1, r2, #20
 8009570:	d4f7      	bmi.n	8009562 <SDMMC_CmdStopTransfer+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009572:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009574:	075a      	lsls	r2, r3, #29
 8009576:	d413      	bmi.n	80095a0 <SDMMC_CmdStopTransfer+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009578:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800957a:	07db      	lsls	r3, r3, #31
 800957c:	d40b      	bmi.n	8009596 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800957e:	23c5      	movs	r3, #197	; 0xc5
 8009580:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009582:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b0c      	cmp	r3, #12
 8009588:	d00e      	beq.n	80095a8 <SDMMC_CmdStopTransfer+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800958a:	2001      	movs	r0, #1
  return errorstate;
 800958c:	e001      	b.n	8009592 <SDMMC_CmdStopTransfer+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800958e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009592:	bc30      	pop	{r4, r5}
 8009594:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009596:	2301      	movs	r3, #1
}
 8009598:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800959a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800959c:	4618      	mov	r0, r3
}
 800959e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095a0:	2304      	movs	r3, #4
 80095a2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095a4:	4618      	mov	r0, r3
 80095a6:	e7f4      	b.n	8009592 <SDMMC_CmdStopTransfer+0x56>
}
 80095a8:	bc30      	pop	{r4, r5}
 80095aa:	f7ff bdd5 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 80095ae:	bf00      	nop
 80095b0:	20000068 	.word	0x20000068
 80095b4:	10624dd3 	.word	0x10624dd3
 80095b8:	fffff000 	.word	0xfffff000
 80095bc:	05f5e100 	.word	0x05f5e100

080095c0 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095c0:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <SDMMC_CmdSelDesel+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095c2:	f240 4147 	movw	r1, #1095	; 0x447
{
 80095c6:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4d1b      	ldr	r5, [pc, #108]	; (8009638 <SDMMC_CmdSelDesel+0x78>)
  SDMMCx->ARG = Command->Argument;
 80095cc:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095ce:	4c1b      	ldr	r4, [pc, #108]	; (800963c <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095d0:	fba5 3203 	umull	r3, r2, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095d4:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80095da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095dc:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095de:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095e2:	4321      	orrs	r1, r4
 80095e4:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80095e6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80095ea:	d313      	bcc.n	8009614 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 80095ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095ee:	f012 0f45 	tst.w	r2, #69	; 0x45
 80095f2:	d0f8      	beq.n	80095e6 <SDMMC_CmdSelDesel+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095f4:	0511      	lsls	r1, r2, #20
 80095f6:	d4f6      	bmi.n	80095e6 <SDMMC_CmdSelDesel+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095fa:	075a      	lsls	r2, r3, #29
 80095fc:	d413      	bmi.n	8009626 <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009600:	07db      	lsls	r3, r3, #31
 8009602:	d40b      	bmi.n	800961c <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009604:	23c5      	movs	r3, #197	; 0xc5
 8009606:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009608:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b07      	cmp	r3, #7
 800960e:	d00e      	beq.n	800962e <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009610:	2001      	movs	r0, #1
  return errorstate;
 8009612:	e001      	b.n	8009618 <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8009614:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009618:	bc30      	pop	{r4, r5}
 800961a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800961c:	2301      	movs	r3, #1
}
 800961e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009620:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009622:	4618      	mov	r0, r3
}
 8009624:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009626:	2304      	movs	r3, #4
 8009628:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800962a:	4618      	mov	r0, r3
 800962c:	e7f4      	b.n	8009618 <SDMMC_CmdSelDesel+0x58>
}
 800962e:	bc30      	pop	{r4, r5}
 8009630:	f7ff bd92 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 8009634:	20000068 	.word	0x20000068
 8009638:	10624dd3 	.word	0x10624dd3
 800963c:	fffff000 	.word	0xfffff000

08009640 <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009640:	4b13      	ldr	r3, [pc, #76]	; (8009690 <SDMMC_CmdGoIdleState+0x50>)
{
 8009642:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8009644:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	f241 3388 	movw	r3, #5000	; 0x1388
{
 800964c:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800964e:	4c11      	ldr	r4, [pc, #68]	; (8009694 <SDMMC_CmdGoIdleState+0x54>)
  SDMMCx->ARG = Command->Argument;
 8009650:	608a      	str	r2, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009652:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009656:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800965a:	68cc      	ldr	r4, [r1, #12]
 800965c:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800965e:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009664:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009668:	60ca      	str	r2, [r1, #12]
 800966a:	e002      	b.n	8009672 <SDMMC_CmdGoIdleState+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800966c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800966e:	0612      	lsls	r2, r2, #24
 8009670:	d407      	bmi.n	8009682 <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0U)
 8009672:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009676:	d2f9      	bcs.n	800966c <SDMMC_CmdGoIdleState+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8009678:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800967c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009680:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009682:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8009684:	2000      	movs	r0, #0
}
 8009686:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800968a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	20000068 	.word	0x20000068
 8009694:	10624dd3 	.word	0x10624dd3

08009698 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009698:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <SDMMC_CmdOperCond+0x78>)
{
 800969a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800969c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80096a6:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096a8:	4c1a      	ldr	r4, [pc, #104]	; (8009714 <SDMMC_CmdOperCond+0x7c>)
  SDMMCx->ARG = Command->Argument;
 80096aa:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096ac:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096b0:	4a19      	ldr	r2, [pc, #100]	; (8009718 <SDMMC_CmdOperCond+0x80>)
 80096b2:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096b4:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096b6:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096b8:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096bc:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 80096c0:	60ca      	str	r2, [r1, #12]
  
  do
  {
    if (count-- == 0U)
 80096c2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80096c6:	d313      	bcc.n	80096f0 <SDMMC_CmdOperCond+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80096c8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096ca:	f012 0f45 	tst.w	r2, #69	; 0x45
 80096ce:	d0f8      	beq.n	80096c2 <SDMMC_CmdOperCond+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096d0:	0512      	lsls	r2, r2, #20
 80096d2:	d4f6      	bmi.n	80096c2 <SDMMC_CmdOperCond+0x2a>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80096d6:	075b      	lsls	r3, r3, #29
 80096d8:	d414      	bmi.n	8009704 <SDMMC_CmdOperCond+0x6c>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096da:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80096dc:	f010 0001 	ands.w	r0, r0, #1
 80096e0:	d10b      	bne.n	80096fa <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80096e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80096e4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80096e8:	d00f      	beq.n	800970a <SDMMC_CmdOperCond+0x72>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	638b      	str	r3, [r1, #56]	; 0x38
 80096ee:	e001      	b.n	80096f4 <SDMMC_CmdOperCond+0x5c>
      return SDMMC_ERROR_TIMEOUT;
 80096f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80096f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096fa:	2001      	movs	r0, #1
}
 80096fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009700:	6388      	str	r0, [r1, #56]	; 0x38
}
 8009702:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009704:	2004      	movs	r0, #4
 8009706:	6388      	str	r0, [r1, #56]	; 0x38
 8009708:	e7f4      	b.n	80096f4 <SDMMC_CmdOperCond+0x5c>
  }
  
  return SDMMC_ERROR_NONE;
 800970a:	4618      	mov	r0, r3
  return errorstate;
 800970c:	e7f2      	b.n	80096f4 <SDMMC_CmdOperCond+0x5c>
 800970e:	bf00      	nop
 8009710:	20000068 	.word	0x20000068
 8009714:	10624dd3 	.word	0x10624dd3
 8009718:	fffff000 	.word	0xfffff000

0800971c <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800971c:	4a1c      	ldr	r2, [pc, #112]	; (8009790 <SDMMC_CmdAppCommand+0x74>)
 800971e:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <SDMMC_CmdAppCommand+0x78>)
 8009720:	6812      	ldr	r2, [r2, #0]
{
 8009722:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009724:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009728:	f240 4477 	movw	r4, #1143	; 0x477
  SDMMCx->ARG = Command->Argument;
 800972c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800972e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009732:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009734:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009736:	4918      	ldr	r1, [pc, #96]	; (8009798 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009738:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800973c:	4029      	ands	r1, r5
 800973e:	430c      	orrs	r4, r1
 8009740:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8009742:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009746:	d313      	bcc.n	8009770 <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 8009748:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800974a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800974e:	d0f8      	beq.n	8009742 <SDMMC_CmdAppCommand+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009750:	0511      	lsls	r1, r2, #20
 8009752:	d4f6      	bmi.n	8009742 <SDMMC_CmdAppCommand+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009754:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009756:	075a      	lsls	r2, r3, #29
 8009758:	d413      	bmi.n	8009782 <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800975a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800975c:	07db      	lsls	r3, r3, #31
 800975e:	d40b      	bmi.n	8009778 <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009760:	23c5      	movs	r3, #197	; 0xc5
 8009762:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009764:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b37      	cmp	r3, #55	; 0x37
 800976a:	d00e      	beq.n	800978a <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800976c:	2001      	movs	r0, #1
  return errorstate;
 800976e:	e001      	b.n	8009774 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8009770:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009774:	bc30      	pop	{r4, r5}
 8009776:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009778:	2301      	movs	r3, #1
}
 800977a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800977c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800977e:	4618      	mov	r0, r3
}
 8009780:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009782:	2304      	movs	r3, #4
 8009784:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009786:	4618      	mov	r0, r3
 8009788:	e7f4      	b.n	8009774 <SDMMC_CmdAppCommand+0x58>
}
 800978a:	bc30      	pop	{r4, r5}
 800978c:	f7ff bce4 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 8009790:	20000068 	.word	0x20000068
 8009794:	10624dd3 	.word	0x10624dd3
 8009798:	fffff000 	.word	0xfffff000

0800979c <SDMMC_CmdAppOperCommand>:
{
 800979c:	b430      	push	{r4, r5}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800979e:	4a16      	ldr	r2, [pc, #88]	; (80097f8 <SDMMC_CmdAppOperCommand+0x5c>)
{
 80097a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80097a2:	4d16      	ldr	r5, [pc, #88]	; (80097fc <SDMMC_CmdAppOperCommand+0x60>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80097a4:	f240 4069 	movw	r0, #1129	; 0x469
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <SDMMC_CmdAppOperCommand+0x64>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80097aa:	430d      	orrs	r5, r1
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097ac:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80097ae:	4915      	ldr	r1, [pc, #84]	; (8009804 <SDMMC_CmdAppOperCommand+0x68>)
  SDMMCx->ARG = Command->Argument;
 80097b0:	60a5      	str	r5, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097b2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80097b6:	68e5      	ldr	r5, [r4, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80097bc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80097be:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097c0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80097c4:	4308      	orrs	r0, r1
 80097c6:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 80097c8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80097cc:	d30d      	bcc.n	80097ea <SDMMC_CmdAppOperCommand+0x4e>
    sta_reg = SDMMCx->STA;
 80097ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097d0:	f012 0f45 	tst.w	r2, #69	; 0x45
 80097d4:	d0f8      	beq.n	80097c8 <SDMMC_CmdAppOperCommand+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097d6:	0512      	lsls	r2, r2, #20
 80097d8:	d4f6      	bmi.n	80097c8 <SDMMC_CmdAppOperCommand+0x2c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80097dc:	f010 0004 	ands.w	r0, r0, #4
 80097e0:	d107      	bne.n	80097f2 <SDMMC_CmdAppOperCommand+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097e2:	23c5      	movs	r3, #197	; 0xc5
 80097e4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80097e6:	bc30      	pop	{r4, r5}
 80097e8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80097ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80097ee:	bc30      	pop	{r4, r5}
 80097f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097f2:	2004      	movs	r0, #4
 80097f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80097f6:	e7fa      	b.n	80097ee <SDMMC_CmdAppOperCommand+0x52>
 80097f8:	20000068 	.word	0x20000068
 80097fc:	80100000 	.word	0x80100000
 8009800:	10624dd3 	.word	0x10624dd3
 8009804:	fffff000 	.word	0xfffff000

08009808 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009808:	4a1c      	ldr	r2, [pc, #112]	; (800987c <SDMMC_CmdBusWidth+0x74>)
 800980a:	4b1d      	ldr	r3, [pc, #116]	; (8009880 <SDMMC_CmdBusWidth+0x78>)
 800980c:	6812      	ldr	r2, [r2, #0]
{
 800980e:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009810:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009814:	f240 4446 	movw	r4, #1094	; 0x446
  SDMMCx->ARG = Command->Argument;
 8009818:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800981a:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800981e:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009820:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009822:	4918      	ldr	r1, [pc, #96]	; (8009884 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009824:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009828:	4029      	ands	r1, r5
 800982a:	430c      	orrs	r4, r1
 800982c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800982e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009832:	d313      	bcc.n	800985c <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 8009834:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009836:	f012 0f45 	tst.w	r2, #69	; 0x45
 800983a:	d0f8      	beq.n	800982e <SDMMC_CmdBusWidth+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800983c:	0511      	lsls	r1, r2, #20
 800983e:	d4f6      	bmi.n	800982e <SDMMC_CmdBusWidth+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009840:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009842:	075a      	lsls	r2, r3, #29
 8009844:	d413      	bmi.n	800986e <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009846:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009848:	07db      	lsls	r3, r3, #31
 800984a:	d40b      	bmi.n	8009864 <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800984c:	23c5      	movs	r3, #197	; 0xc5
 800984e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009850:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b06      	cmp	r3, #6
 8009856:	d00e      	beq.n	8009876 <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009858:	2001      	movs	r0, #1
  return errorstate;
 800985a:	e001      	b.n	8009860 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800985c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009860:	bc30      	pop	{r4, r5}
 8009862:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009864:	2301      	movs	r3, #1
}
 8009866:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009868:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800986a:	4618      	mov	r0, r3
}
 800986c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800986e:	2304      	movs	r3, #4
 8009870:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009872:	4618      	mov	r0, r3
 8009874:	e7f4      	b.n	8009860 <SDMMC_CmdBusWidth+0x58>
}
 8009876:	bc30      	pop	{r4, r5}
 8009878:	f7ff bc6e 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 800987c:	20000068 	.word	0x20000068
 8009880:	10624dd3 	.word	0x10624dd3
 8009884:	fffff000 	.word	0xfffff000

08009888 <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009888:	4a1d      	ldr	r2, [pc, #116]	; (8009900 <SDMMC_CmdSendSCR+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800988a:	f240 4173 	movw	r1, #1139	; 0x473
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800988e:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <SDMMC_CmdSendSCR+0x7c>)
 8009890:	6812      	ldr	r2, [r2, #0]
{
 8009892:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8009894:	2400      	movs	r4, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009896:	fba3 3202 	umull	r3, r2, r3, r2
 800989a:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800989e:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098a0:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 80098a4:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098a6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098a8:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098aa:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098ae:	4321      	orrs	r1, r4
 80098b0:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80098b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80098b6:	d313      	bcc.n	80098e0 <SDMMC_CmdSendSCR+0x58>
    sta_reg = SDMMCx->STA;
 80098b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80098ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 80098be:	d0f8      	beq.n	80098b2 <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098c0:	0511      	lsls	r1, r2, #20
 80098c2:	d4f6      	bmi.n	80098b2 <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80098c6:	075a      	lsls	r2, r3, #29
 80098c8:	d413      	bmi.n	80098f2 <SDMMC_CmdSendSCR+0x6a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80098cc:	07db      	lsls	r3, r3, #31
 80098ce:	d40b      	bmi.n	80098e8 <SDMMC_CmdSendSCR+0x60>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80098d0:	23c5      	movs	r3, #197	; 0xc5
 80098d2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80098d4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b33      	cmp	r3, #51	; 0x33
 80098da:	d00e      	beq.n	80098fa <SDMMC_CmdSendSCR+0x72>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098dc:	2001      	movs	r0, #1
  return errorstate;
 80098de:	e001      	b.n	80098e4 <SDMMC_CmdSendSCR+0x5c>
      return SDMMC_ERROR_TIMEOUT;
 80098e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80098e4:	bc30      	pop	{r4, r5}
 80098e6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098e8:	2301      	movs	r3, #1
}
 80098ea:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098ec:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ee:	4618      	mov	r0, r3
}
 80098f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098f2:	2304      	movs	r3, #4
 80098f4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098f6:	4618      	mov	r0, r3
 80098f8:	e7f4      	b.n	80098e4 <SDMMC_CmdSendSCR+0x5c>
}
 80098fa:	bc30      	pop	{r4, r5}
 80098fc:	f7ff bc2c 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 8009900:	20000068 	.word	0x20000068
 8009904:	10624dd3 	.word	0x10624dd3

08009908 <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009908:	4a1a      	ldr	r2, [pc, #104]	; (8009974 <SDMMC_CmdSendCID+0x6c>)
{
 800990a:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800990c:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <SDMMC_CmdSendCID+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800990e:	f240 40c2 	movw	r0, #1218	; 0x4c2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009912:	6812      	ldr	r2, [r2, #0]
{
 8009914:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8009916:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009918:	fba3 3202 	umull	r3, r2, r3, r2
 800991c:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8009920:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009922:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 8009926:	68cd      	ldr	r5, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009928:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800992a:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800992c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009930:	4320      	orrs	r0, r4
 8009932:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8009934:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009938:	d310      	bcc.n	800995c <SDMMC_CmdSendCID+0x54>
    sta_reg = SDMMCx->STA;
 800993a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800993c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009940:	d0f8      	beq.n	8009934 <SDMMC_CmdSendCID+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009942:	0512      	lsls	r2, r2, #20
 8009944:	d4f6      	bmi.n	8009934 <SDMMC_CmdSendCID+0x2c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009946:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009948:	075b      	lsls	r3, r3, #29
 800994a:	d40f      	bmi.n	800996c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800994c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800994e:	f010 0001 	ands.w	r0, r0, #1
 8009952:	d107      	bne.n	8009964 <SDMMC_CmdSendCID+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009954:	23c5      	movs	r3, #197	; 0xc5
 8009956:	638b      	str	r3, [r1, #56]	; 0x38
}
 8009958:	bc30      	pop	{r4, r5}
 800995a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800995c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009960:	bc30      	pop	{r4, r5}
 8009962:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009964:	2001      	movs	r0, #1
 8009966:	6388      	str	r0, [r1, #56]	; 0x38
}
 8009968:	bc30      	pop	{r4, r5}
 800996a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800996c:	2004      	movs	r0, #4
 800996e:	6388      	str	r0, [r1, #56]	; 0x38
 8009970:	e7f6      	b.n	8009960 <SDMMC_CmdSendCID+0x58>
 8009972:	bf00      	nop
 8009974:	20000068 	.word	0x20000068
 8009978:	10624dd3 	.word	0x10624dd3

0800997c <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800997c:	4a19      	ldr	r2, [pc, #100]	; (80099e4 <SDMMC_CmdSendCSD+0x68>)
 800997e:	4b1a      	ldr	r3, [pc, #104]	; (80099e8 <SDMMC_CmdSendCSD+0x6c>)
 8009980:	6812      	ldr	r2, [r2, #0]
{
 8009982:	b430      	push	{r4, r5}
 8009984:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009986:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800998a:	f240 40c9 	movw	r0, #1225	; 0x4c9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800998e:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8009992:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009994:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009996:	68e5      	ldr	r5, [r4, #12]
 8009998:	4914      	ldr	r1, [pc, #80]	; (80099ec <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800999a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800999e:	4029      	ands	r1, r5
 80099a0:	4308      	orrs	r0, r1
 80099a2:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 80099a4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80099a8:	d310      	bcc.n	80099cc <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 80099aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80099ac:	f012 0f45 	tst.w	r2, #69	; 0x45
 80099b0:	d0f8      	beq.n	80099a4 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099b2:	0512      	lsls	r2, r2, #20
 80099b4:	d4f6      	bmi.n	80099a4 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b8:	075b      	lsls	r3, r3, #29
 80099ba:	d40f      	bmi.n	80099dc <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80099be:	f010 0001 	ands.w	r0, r0, #1
 80099c2:	d107      	bne.n	80099d4 <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099c4:	23c5      	movs	r3, #197	; 0xc5
 80099c6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80099c8:	bc30      	pop	{r4, r5}
 80099ca:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80099cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80099d0:	bc30      	pop	{r4, r5}
 80099d2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099d4:	2001      	movs	r0, #1
 80099d6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80099d8:	bc30      	pop	{r4, r5}
 80099da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099dc:	2004      	movs	r0, #4
 80099de:	63a0      	str	r0, [r4, #56]	; 0x38
 80099e0:	e7f6      	b.n	80099d0 <SDMMC_CmdSendCSD+0x54>
 80099e2:	bf00      	nop
 80099e4:	20000068 	.word	0x20000068
 80099e8:	10624dd3 	.word	0x10624dd3
 80099ec:	fffff000 	.word	0xfffff000

080099f0 <SDMMC_CmdSetRelAdd>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099f0:	4b25      	ldr	r3, [pc, #148]	; (8009a88 <SDMMC_CmdSetRelAdd+0x98>)
 80099f2:	4a26      	ldr	r2, [pc, #152]	; (8009a8c <SDMMC_CmdSetRelAdd+0x9c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
{
 80099f6:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80099f8:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099fa:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80099fe:	4d24      	ldr	r5, [pc, #144]	; (8009a90 <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 8009a00:	6084      	str	r4, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a02:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a04:	68c6      	ldr	r6, [r0, #12]
 8009a06:	f240 4443 	movw	r4, #1091	; 0x443
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a0a:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a0e:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a10:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a14:	432c      	orrs	r4, r5
 8009a16:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8009a18:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009a1c:	d311      	bcc.n	8009a42 <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 8009a1e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a20:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009a24:	d0f8      	beq.n	8009a18 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a26:	0516      	lsls	r6, r2, #20
 8009a28:	d4f6      	bmi.n	8009a18 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a2c:	075d      	lsls	r5, r3, #29
 8009a2e:	d411      	bmi.n	8009a54 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a32:	07dc      	lsls	r4, r3, #31
 8009a34:	d409      	bmi.n	8009a4a <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a36:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d00e      	beq.n	8009a5c <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e001      	b.n	8009a46 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 8009a42:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009a46:	bc70      	pop	{r4, r5, r6}
 8009a48:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a4a:	2301      	movs	r3, #1
}
 8009a4c:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a4e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a50:	4618      	mov	r0, r3
}
 8009a52:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a54:	2304      	movs	r3, #4
 8009a56:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a58:	4618      	mov	r0, r3
 8009a5a:	e7f4      	b.n	8009a46 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a5c:	23c5      	movs	r3, #197	; 0xc5
 8009a5e:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8009a60:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009a62:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8009a66:	d009      	beq.n	8009a7c <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009a68:	045a      	lsls	r2, r3, #17
 8009a6a:	d40a      	bmi.n	8009a82 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a6c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009a70:	bf0c      	ite	eq
 8009a72:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009a76:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8009a7a:	e7e4      	b.n	8009a46 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009a7c:	0c1b      	lsrs	r3, r3, #16
 8009a7e:	800b      	strh	r3, [r1, #0]
 8009a80:	e7e1      	b.n	8009a46 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009a86:	e7de      	b.n	8009a46 <SDMMC_CmdSetRelAdd+0x56>
 8009a88:	20000068 	.word	0x20000068
 8009a8c:	10624dd3 	.word	0x10624dd3
 8009a90:	fffff000 	.word	0xfffff000

08009a94 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009a94:	4a1c      	ldr	r2, [pc, #112]	; (8009b08 <SDMMC_CmdSendStatus+0x74>)
 8009a96:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <SDMMC_CmdSendStatus+0x78>)
 8009a98:	6812      	ldr	r2, [r2, #0]
{
 8009a9a:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009a9c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009aa0:	f240 444d 	movw	r4, #1101	; 0x44d
  SDMMCx->ARG = Command->Argument;
 8009aa4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009aa6:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009aaa:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009aac:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009aae:	4918      	ldr	r1, [pc, #96]	; (8009b10 <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009ab0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ab4:	4029      	ands	r1, r5
 8009ab6:	430c      	orrs	r4, r1
 8009ab8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8009aba:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009abe:	d313      	bcc.n	8009ae8 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 8009ac0:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ac2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009ac6:	d0f8      	beq.n	8009aba <SDMMC_CmdSendStatus+0x26>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ac8:	0511      	lsls	r1, r2, #20
 8009aca:	d4f6      	bmi.n	8009aba <SDMMC_CmdSendStatus+0x26>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009acc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ace:	075a      	lsls	r2, r3, #29
 8009ad0:	d413      	bmi.n	8009afa <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ad4:	07db      	lsls	r3, r3, #31
 8009ad6:	d40b      	bmi.n	8009af0 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ad8:	23c5      	movs	r3, #197	; 0xc5
 8009ada:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009adc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b0d      	cmp	r3, #13
 8009ae2:	d00e      	beq.n	8009b02 <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ae4:	2001      	movs	r0, #1
  return errorstate;
 8009ae6:	e001      	b.n	8009aec <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8009ae8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009aec:	bc30      	pop	{r4, r5}
 8009aee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009af0:	2301      	movs	r3, #1
}
 8009af2:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009af4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009af6:	4618      	mov	r0, r3
}
 8009af8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009afa:	2304      	movs	r3, #4
 8009afc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009afe:	4618      	mov	r0, r3
 8009b00:	e7f4      	b.n	8009aec <SDMMC_CmdSendStatus+0x58>
}
 8009b02:	bc30      	pop	{r4, r5}
 8009b04:	f7ff bb28 	b.w	8009158 <SDMMC_GetCmdResp1.part.2>
 8009b08:	20000068 	.word	0x20000068
 8009b0c:	10624dd3 	.word	0x10624dd3
 8009b10:	fffff000 	.word	0xfffff000

08009b14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009b16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009b26:	6099      	str	r1, [r3, #8]
#endif
}
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	e000ed00 	.word	0xe000ed00

08009b30 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop

08009b34 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d065      	beq.n	8009c04 <HAL_TIM_Base_Init+0xd0>
{
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009b3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b3e:	4604      	mov	r4, r0
 8009b40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d03b      	beq.n	8009bc0 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b48:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4a:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b4c:	4e36      	ldr	r6, [pc, #216]	; (8009c28 <HAL_TIM_Base_Init+0xf4>)
 8009b4e:	4f37      	ldr	r7, [pc, #220]	; (8009c2c <HAL_TIM_Base_Init+0xf8>)
 8009b50:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009b54:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8009b5c:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 8009b60:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b62:	fab6 f686 	clz	r6, r6
 8009b66:	fab7 f787 	clz	r7, r7
 8009b6a:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8009b6e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8009b72:	d02a      	beq.n	8009bca <HAL_TIM_Base_Init+0x96>
 8009b74:	bb4e      	cbnz	r6, 8009bca <HAL_TIM_Base_Init+0x96>
 8009b76:	492e      	ldr	r1, [pc, #184]	; (8009c30 <HAL_TIM_Base_Init+0xfc>)
 8009b78:	428a      	cmp	r2, r1
 8009b7a:	d045      	beq.n	8009c08 <HAL_TIM_Base_Init+0xd4>
 8009b7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b80:	428a      	cmp	r2, r1
 8009b82:	d041      	beq.n	8009c08 <HAL_TIM_Base_Init+0xd4>
 8009b84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b88:	428a      	cmp	r2, r1
 8009b8a:	d042      	beq.n	8009c12 <HAL_TIM_Base_Init+0xde>
 8009b8c:	2f00      	cmp	r7, #0
 8009b8e:	d140      	bne.n	8009c12 <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b90:	4928      	ldr	r1, [pc, #160]	; (8009c34 <HAL_TIM_Base_Init+0x100>)
 8009b92:	428a      	cmp	r2, r1
 8009b94:	d01e      	beq.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009b96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b9a:	428a      	cmp	r2, r1
 8009b9c:	d01a      	beq.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009b9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ba2:	428a      	cmp	r2, r1
 8009ba4:	d016      	beq.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009ba6:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8009baa:	428a      	cmp	r2, r1
 8009bac:	d012      	beq.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009bae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bb2:	428a      	cmp	r2, r1
 8009bb4:	d00e      	beq.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009bb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bba:	428a      	cmp	r2, r1
 8009bbc:	d10e      	bne.n	8009bdc <HAL_TIM_Base_Init+0xa8>
 8009bbe:	e009      	b.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8009bc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009bc4:	f7ff ffb4 	bl	8009b30 <HAL_TIM_Base_MspInit>
 8009bc8:	e7be      	b.n	8009b48 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bca:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009bce:	68a0      	ldr	r0, [r4, #8]
 8009bd0:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bd8:	6920      	ldr	r0, [r4, #16]
 8009bda:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bdc:	69a1      	ldr	r1, [r4, #24]
 8009bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009be2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009be4:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009be6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8009be8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bea:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009bec:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bee:	b936      	cbnz	r6, 8009bfe <HAL_TIM_Base_Init+0xca>
 8009bf0:	b92f      	cbnz	r7, 8009bfe <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bf2:	2301      	movs	r3, #1
  return HAL_OK;
 8009bf4:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009bf6:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8009bf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8009bfe:	6963      	ldr	r3, [r4, #20]
 8009c00:	6313      	str	r3, [r2, #48]	; 0x30
 8009c02:	e7f6      	b.n	8009bf2 <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8009c04:	2001      	movs	r0, #1
}
 8009c06:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c0c:	68a1      	ldr	r1, [r4, #8]
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	e7e0      	b.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c12:	4909      	ldr	r1, [pc, #36]	; (8009c38 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c18:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c1a:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8009c1c:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c20:	d0d8      	beq.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009c22:	2f00      	cmp	r7, #0
 8009c24:	d1d6      	bne.n	8009bd4 <HAL_TIM_Base_Init+0xa0>
 8009c26:	e7b3      	b.n	8009b90 <HAL_TIM_Base_Init+0x5c>
 8009c28:	40010000 	.word	0x40010000
 8009c2c:	40010400 	.word	0x40010400
 8009c30:	40000400 	.word	0x40000400
 8009c34:	40014000 	.word	0x40014000
 8009c38:	40000c00 	.word	0x40000c00

08009c3c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c3c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c3e:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c40:	68d9      	ldr	r1, [r3, #12]
 8009c42:	f041 0101 	orr.w	r1, r1, #1
 8009c46:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c48:	6899      	ldr	r1, [r3, #8]
 8009c4a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c4c:	2a06      	cmp	r2, #6
 8009c4e:	d006      	beq.n	8009c5e <HAL_TIM_Base_Start_IT+0x22>
 8009c50:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009c54:	d003      	beq.n	8009c5e <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	f042 0201 	orr.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
}
 8009c5e:	2000      	movs	r0, #0
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	00010007 	.word	0x00010007

08009c68 <HAL_TIM_OC_DelayElapsedCallback>:
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop

08009c6c <HAL_TIM_IC_CaptureCallback>:
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop

08009c70 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop

08009c74 <HAL_TIM_TriggerCallback>:
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop

08009c78 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c78:	6803      	ldr	r3, [r0, #0]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	0791      	lsls	r1, r2, #30
{
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c82:	d502      	bpl.n	8009c8a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	0792      	lsls	r2, r2, #30
 8009c88:	d468      	bmi.n	8009d5c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	0752      	lsls	r2, r2, #29
 8009c8e:	d502      	bpl.n	8009c96 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	0750      	lsls	r0, r2, #29
 8009c94:	d44f      	bmi.n	8009d36 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	0711      	lsls	r1, r2, #28
 8009c9a:	d502      	bpl.n	8009ca2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	0712      	lsls	r2, r2, #28
 8009ca0:	d437      	bmi.n	8009d12 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	06d0      	lsls	r0, r2, #27
 8009ca6:	d502      	bpl.n	8009cae <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	06d1      	lsls	r1, r2, #27
 8009cac:	d41e      	bmi.n	8009cec <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cae:	691a      	ldr	r2, [r3, #16]
 8009cb0:	07d2      	lsls	r2, r2, #31
 8009cb2:	d502      	bpl.n	8009cba <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	07d0      	lsls	r0, r2, #31
 8009cb8:	d469      	bmi.n	8009d8e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cba:	691a      	ldr	r2, [r3, #16]
 8009cbc:	0611      	lsls	r1, r2, #24
 8009cbe:	d502      	bpl.n	8009cc6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	0612      	lsls	r2, r2, #24
 8009cc4:	d46b      	bmi.n	8009d9e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	05d0      	lsls	r0, r2, #23
 8009cca:	d502      	bpl.n	8009cd2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	0611      	lsls	r1, r2, #24
 8009cd0:	d46d      	bmi.n	8009dae <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cd2:	691a      	ldr	r2, [r3, #16]
 8009cd4:	0652      	lsls	r2, r2, #25
 8009cd6:	d502      	bpl.n	8009cde <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cd8:	68da      	ldr	r2, [r3, #12]
 8009cda:	0650      	lsls	r0, r2, #25
 8009cdc:	d46f      	bmi.n	8009dbe <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	0691      	lsls	r1, r2, #26
 8009ce2:	d502      	bpl.n	8009cea <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	0692      	lsls	r2, r2, #26
 8009ce8:	d449      	bmi.n	8009d7e <HAL_TIM_IRQHandler+0x106>
}
 8009cea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cec:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cf0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cf4:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cf6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cf8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cfa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009cfe:	d16f      	bne.n	8009de0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d00:	f7ff ffb2 	bl	8009c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7ff ffb3 	bl	8009c70 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	7722      	strb	r2, [r4, #28]
 8009d10:	e7cd      	b.n	8009cae <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d12:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d16:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8009d18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d1a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d1c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d20:	079b      	lsls	r3, r3, #30
 8009d22:	d15a      	bne.n	8009dda <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d24:	f7ff ffa0 	bl	8009c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7ff ffa1 	bl	8009c70 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2e:	2200      	movs	r2, #0
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	7722      	strb	r2, [r4, #28]
 8009d34:	e7b5      	b.n	8009ca2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d36:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d3a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d3e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d40:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d44:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009d48:	d144      	bne.n	8009dd4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4a:	f7ff ff8d 	bl	8009c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff ff8e 	bl	8009c70 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d54:	2200      	movs	r2, #0
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	7722      	strb	r2, [r4, #28]
 8009d5a:	e79c      	b.n	8009c96 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d5c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d60:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d62:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d64:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d66:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d68:	0799      	lsls	r1, r3, #30
 8009d6a:	d130      	bne.n	8009dce <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6c:	f7ff ff7c 	bl	8009c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff ff7d 	bl	8009c70 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d76:	2200      	movs	r2, #0
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	7722      	strb	r2, [r4, #28]
 8009d7c:	e785      	b.n	8009c8a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d7e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009d82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d84:	611a      	str	r2, [r3, #16]
}
 8009d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009d8a:	f000 b82d 	b.w	8009de8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d8e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d94:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d96:	f7fe fedf 	bl	8008b58 <HAL_TIM_PeriodElapsedCallback>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	e78d      	b.n	8009cba <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009da2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009da4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009da6:	f000 f821 	bl	8009dec <HAL_TIMEx_BreakCallback>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	e78b      	b.n	8009cc6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dae:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8009db2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009db4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009db6:	f000 f81b 	bl	8009df0 <HAL_TIMEx_Break2Callback>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	e789      	b.n	8009cd2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009dc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009dc6:	f7ff ff55 	bl	8009c74 <HAL_TIM_TriggerCallback>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	e787      	b.n	8009cde <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8009dce:	f7ff ff4d 	bl	8009c6c <HAL_TIM_IC_CaptureCallback>
 8009dd2:	e7d0      	b.n	8009d76 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd4:	f7ff ff4a 	bl	8009c6c <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e7bc      	b.n	8009d54 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8009dda:	f7ff ff47 	bl	8009c6c <HAL_TIM_IC_CaptureCallback>
 8009dde:	e7a6      	b.n	8009d2e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009de0:	f7ff ff44 	bl	8009c6c <HAL_TIM_IC_CaptureCallback>
 8009de4:	e791      	b.n	8009d0a <HAL_TIM_IRQHandler+0x92>
 8009de6:	bf00      	nop

08009de8 <HAL_TIMEx_CommutCallback>:
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop

08009dec <HAL_TIMEx_BreakCallback>:
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop

08009df0 <HAL_TIMEx_Break2Callback>:
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop

08009df4 <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 8009df4:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009df6:	4c0e      	ldr	r4, [pc, #56]	; (8009e30 <_tx_initialize_kernel_enter+0x3c>)
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8009dfe:	d00a      	beq.n	8009e16 <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate 
		 initialization is in progress.  Note that this variable is 
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 8009e00:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8009e04:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 8009e06:	f7f6 fa03 	bl	8000210 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the 
		 ThreadX components and the application's initialization 
		 function.  */
		_tx_initialize_high_level();
 8009e0a:	f000 ff79 	bl	800ad00 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009e0e:	4a09      	ldr	r2, [pc, #36]	; (8009e34 <_tx_initialize_kernel_enter+0x40>)
 8009e10:	6813      	ldr	r3, [r2, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 8009e16:	4a08      	ldr	r2, [pc, #32]	; (8009e38 <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 8009e18:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 8009e1c:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 8009e1e:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 8009e20:	f7f6 fe92 	bl	8000b48 <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 8009e24:	2300      	movs	r3, #0
 8009e26:	6023      	str	r3, [r4, #0]
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 8009e2c:	f7f6 ba40 	b.w	80002b0 <_tx_thread_schedule>
 8009e30:	2000006c 	.word	0x2000006c
 8009e34:	20003bc4 	.word	0x20003bc4
 8009e38:	20004170 	.word	0x20004170

08009e3c <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	460d      	mov	r5, r1
 8009e40:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8009e42:	2100      	movs	r1, #0
 8009e44:	2234      	movs	r2, #52	; 0x34
 8009e46:	f001 fad6 	bl	800b3f6 <memset>
 8009e4a:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8009e4c:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8009e4e:	6104      	str	r4, [r0, #16]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009e50:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009e54:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8009e56:	490c      	ldr	r1, [pc, #48]	; (8009e88 <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8009e58:	480c      	ldr	r0, [pc, #48]	; (8009e8c <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8009e5a:	4e0d      	ldr	r6, [pc, #52]	; (8009e90 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 8009e5c:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8009e5e:	4d0d      	ldr	r5, [pc, #52]	; (8009e94 <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8009e60:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8009e62:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8009e64:	480c      	ldr	r0, [pc, #48]	; (8009e98 <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 8009e66:	b15a      	cbz	r2, 8009e80 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8009e68:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8009e6a:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8009e6c:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8009e6e:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8009e70:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8009e74:	3201      	adds	r2, #1
 8009e76:	600a      	str	r2, [r1, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009e78:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8009e80:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	e7f5      	b.n	8009e74 <_tx_mutex_create+0x38>
 8009e88:	2000415c 	.word	0x2000415c
 8009e8c:	20003bac 	.word	0x20003bac
 8009e90:	4d555445 	.word	0x4d555445
 8009e94:	0800adf1 	.word	0x0800adf1
 8009e98:	20004160 	.word	0x20004160

08009e9c <_tx_mutex_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009ea0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009ea4:	b672      	cpsid	i

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8009ea6:	4927      	ldr	r1, [pc, #156]	; (8009f44 <_tx_mutex_delete+0xa8>)
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8009ea8:	2400      	movs	r4, #0
    _tx_mutex_created_count--;
 8009eaa:	680b      	ldr	r3, [r1, #0]
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8009eac:	6004      	str	r4, [r0, #0]
    _tx_mutex_created_count--;
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	600b      	str	r3, [r1, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d13c      	bne.n	8009f30 <_tx_mutex_delete+0x94>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8009eb6:	4924      	ldr	r1, [pc, #144]	; (8009f48 <_tx_mutex_delete+0xac>)
 8009eb8:	600b      	str	r3, [r1, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009eba:	4e24      	ldr	r6, [pc, #144]	; (8009f4c <_tx_mutex_delete+0xb0>)

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8009ebc:	2700      	movs	r7, #0

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8009ebe:	68c1      	ldr	r1, [r0, #12]
    _tx_thread_preempt_disable++;
 8009ec0:	6833      	ldr	r3, [r6, #0]
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8009ec2:	6984      	ldr	r4, [r0, #24]
    _tx_thread_preempt_disable++;
 8009ec4:	3301      	adds	r3, #1
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8009ec6:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8009ec8:	6187      	str	r7, [r0, #24]
    _tx_thread_preempt_disable++;
 8009eca:	6033      	str	r3, [r6, #0]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8009ecc:	61c7      	str	r7, [r0, #28]
    if (owner_thread != TX_NULL)
 8009ece:	b141      	cbz	r1, 8009ee2 <_tx_mutex_delete+0x46>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ed4:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8009ed8:	f000 f924 	bl	800a124 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009edc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009ee0:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ee2:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8009ee6:	b1b5      	cbz	r5, 8009f16 <_tx_mutex_delete+0x7a>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009ee8:	f04f 0800 	mov.w	r8, #0

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8009eec:	2701      	movs	r7, #1
        suspended_count--;
 8009eee:	3d01      	subs	r5, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009ef0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009ef4:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8009ef6:	6833      	ldr	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009ef8:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8009efc:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8009efe:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8009f02:	6f22      	ldr	r2, [r4, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8009f04:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009f06:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009f0a:	4620      	mov	r0, r4
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8009f0c:	4614      	mov	r4, r2
        _tx_thread_system_resume(thread_ptr);
 8009f0e:	f000 fac9 	bl	800a4a4 <_tx_thread_system_resume>
    while (suspended_count != ((ULONG) 0))
 8009f12:	2d00      	cmp	r5, #0
 8009f14:	d1eb      	bne.n	8009eee <_tx_mutex_delete+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009f16:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009f1a:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009f22:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009f26:	f000 fa9f 	bl	800a468 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_mutex_created_ptr == mutex_ptr)
 8009f30:	4c05      	ldr	r4, [pc, #20]	; (8009f48 <_tx_mutex_delete+0xac>)
 8009f32:	6825      	ldr	r5, [r4, #0]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8009f34:	e9d0 3108 	ldrd	r3, r1, [r0, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 8009f38:	4285      	cmp	r5, r0
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8009f3a:	6259      	str	r1, [r3, #36]	; 0x24
            _tx_mutex_created_ptr =  next_mutex;
 8009f3c:	bf08      	it	eq
 8009f3e:	6023      	streq	r3, [r4, #0]
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8009f40:	620b      	str	r3, [r1, #32]
 8009f42:	e7ba      	b.n	8009eba <_tx_mutex_delete+0x1e>
 8009f44:	2000415c 	.word	0x2000415c
 8009f48:	20004160 	.word	0x20004160
 8009f4c:	20003bc4 	.word	0x20003bc4

08009f50 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009f52:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009f56:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009f58:	4a3b      	ldr	r2, [pc, #236]	; (800a048 <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8009f5a:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009f5c:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8009f5e:	b9e3      	cbnz	r3, 8009f9a <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009f60:	2301      	movs	r3, #1
 8009f62:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8009f66:	b1a4      	cbz	r4, 8009f92 <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009f68:	6903      	ldr	r3, [r0, #16]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d103      	bne.n	8009f76 <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8009f6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8009f70:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8009f72:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8009f74:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8009f76:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d044      	beq.n	800a008 <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8009f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8009f80:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8009f82:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8009f84:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8009f88:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009f92:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8009f96:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 8009f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8009f9a:	68c2      	ldr	r2, [r0, #12]
 8009f9c:	42a2      	cmp	r2, r4
 8009f9e:	d029      	beq.n	8009ff4 <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 8009fa0:	b371      	cbz	r1, 800a000 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8009fa2:	4e2a      	ldr	r6, [pc, #168]	; (800a04c <_tx_mutex_get+0xfc>)
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	bb5b      	cbnz	r3, 800a000 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 8009fa8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8009fac:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800a050 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 8009fb0:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8009fb2:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8009fb4:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 8009fb6:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8009fba:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8009fbe:	bb43      	cbnz	r3, 800a012 <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8009fc0:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009fc2:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 8009fc6:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 8009fc8:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8009fca:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 8009fce:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 8009fd0:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009fd2:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009fd4:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 8009fd6:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8009fd8:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009fdc:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fde:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009fe2:	6903      	ldr	r3, [r0, #16]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d01d      	beq.n	800a024 <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fae1 	bl	800a5b0 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 8009fee:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	6083      	str	r3, [r0, #8]
 8009ff8:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e7cb      	b.n	8009f98 <_tx_mutex_get+0x48>
 800a000:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 800a004:	201d      	movs	r0, #29
}
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800a008:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800a00c:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 800a010:	e7ba      	b.n	8009f88 <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800a012:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a014:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a018:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a01c:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a020:	677c      	str	r4, [r7, #116]	; 0x74
 800a022:	e7d0      	b.n	8009fc6 <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800a024:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a028:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800a02a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800a02e:	bf88      	it	hi
 800a030:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800a032:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800a034:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800a036:	bf38      	it	cc
 800a038:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800a03c:	4299      	cmp	r1, r3
 800a03e:	d2d3      	bcs.n	8009fe8 <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800a040:	4610      	mov	r0, r2
 800a042:	f000 f807 	bl	800a054 <_tx_mutex_priority_change>
 800a046:	e7cf      	b.n	8009fe8 <_tx_mutex_get+0x98>
 800a048:	20003bc8 	.word	0x20003bc8
 800a04c:	20003bc4 	.word	0x20003bc4
 800a050:	0800ad71 	.word	0x0800ad71

0800a054 <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800a054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a058:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a05a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a05e:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800a060:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800a062:	b152      	cbz	r2, 800a07a <_tx_mutex_priority_change+0x26>
 800a064:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800a068:	62c1      	str	r1, [r0, #44]	; 0x2c
 800a06a:	428a      	cmp	r2, r1
 800a06c:	bf28      	it	cs
 800a06e:	460a      	movcs	r2, r1
 800a070:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a072:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800a07c:	4925      	ldr	r1, [pc, #148]	; (800a114 <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800a07e:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 800a082:	4f25      	ldr	r7, [pc, #148]	; (800a118 <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800a084:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a086:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a08a:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800a08c:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800a08e:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a092:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800a096:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 800a098:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 800a09c:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 800a0a0:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 800a0a4:	f000 fa84 	bl	800a5b0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a0a8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a0ac:	b672      	cpsid	i
 800a0ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 800a0b2:	62e5      	str	r5, [r4, #44]	; 0x2c
 800a0b4:	42ab      	cmp	r3, r5
 800a0b6:	bf28      	it	cs
 800a0b8:	462b      	movcs	r3, r5
 800a0ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a0bc:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 f9ef 	bl	800a4a4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a0c6:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a0ca:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 800a0cc:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 800a0ce:	429c      	cmp	r4, r3
 800a0d0:	d007      	beq.n	800a0e2 <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 800a0d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a0d4:	b92a      	cbnz	r2, 800a0e2 <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d805      	bhi.n	800a0ea <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 800a0de:	4544      	cmp	r4, r8
 800a0e0:	d010      	beq.n	800a104 <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a0e2:	f381 8810 	msr	PRIMASK, r1
}
 800a0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800a0ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a0ec:	4283      	cmp	r3, r0
 800a0ee:	d9f8      	bls.n	800a0e2 <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800a0f0:	4282      	cmp	r2, r0
 800a0f2:	d207      	bcs.n	800a104 <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a0f4:	4809      	ldr	r0, [pc, #36]	; (800a11c <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 800a0f6:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a0fa:	6803      	ldr	r3, [r0, #0]
 800a0fc:	ea43 030a 	orr.w	r3, r3, sl
 800a100:	6003      	str	r3, [r0, #0]
 800a102:	e7ee      	b.n	800a0e2 <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 800a104:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 800a106:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 800a108:	d2eb      	bcs.n	800a0e2 <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800a10a:	4a05      	ldr	r2, [pc, #20]	; (800a120 <_tx_mutex_priority_change+0xcc>)
 800a10c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800a110:	e7e7      	b.n	800a0e2 <_tx_mutex_priority_change+0x8e>
 800a112:	bf00      	nop
 800a114:	20003bc4 	.word	0x20003bc4
 800a118:	20003bcc 	.word	0x20003bcc
 800a11c:	20003bd4 	.word	0x20003bd4
 800a120:	20003b2c 	.word	0x20003b2c

0800a124 <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800a124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a128:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a12c:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800a12e:	6882      	ldr	r2, [r0, #8]
 800a130:	2a00      	cmp	r2, #0
 800a132:	d056      	beq.n	800a1e2 <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a134:	497e      	ldr	r1, [pc, #504]	; (800a330 <_tx_mutex_put+0x20c>)
 800a136:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800a138:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800a13a:	6809      	ldr	r1, [r1, #0]
 800a13c:	428b      	cmp	r3, r1
 800a13e:	d003      	beq.n	800a148 <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800a140:	4e7c      	ldr	r6, [pc, #496]	; (800a334 <_tx_mutex_put+0x210>)
 800a142:	6831      	ldr	r1, [r6, #0]
 800a144:	2900      	cmp	r1, #0
 800a146:	d04c      	beq.n	800a1e2 <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800a148:	3a01      	subs	r2, #1
 800a14a:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d143      	bne.n	800a1d8 <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800a150:	2b00      	cmp	r3, #0
 800a152:	d041      	beq.n	800a1d8 <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800a154:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a158:	3a01      	subs	r2, #1
 800a15a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d144      	bne.n	800a1ec <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800a162:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a166:	6987      	ldr	r7, [r0, #24]
 800a168:	6902      	ldr	r2, [r0, #16]
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	f000 8082 	beq.w	800a274 <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a170:	2a01      	cmp	r2, #1
 800a172:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800a174:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a178:	f000 8084 	beq.w	800a284 <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800a17c:	69c3      	ldr	r3, [r0, #28]
 800a17e:	4e6d      	ldr	r6, [pc, #436]	; (800a334 <_tx_mutex_put+0x210>)
 800a180:	2b01      	cmp	r3, #1
 800a182:	d95d      	bls.n	800a240 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a184:	2f00      	cmp	r7, #0
 800a186:	f000 8097 	beq.w	800a2b8 <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 800a18a:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800a18c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800a190:	2a00      	cmp	r2, #0
 800a192:	d167      	bne.n	800a264 <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800a194:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800a198:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800a19c:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800a19e:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800a1a0:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800a1a2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 800a1a6:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800a1a8:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d153      	bne.n	800a258 <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800a1b0:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a1b2:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a1b4:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 800a1b6:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a1b8:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a1ba:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800a1be:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a1c0:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a1c4:	692b      	ldr	r3, [r5, #16]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	f000 8097 	beq.w	800a2fa <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f000 f969 	bl	800a4a4 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800a1d2:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 800a1dc:	2000      	movs	r0, #0
}
 800a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e2:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 800a1e6:	201e      	movs	r0, #30
}
 800a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800a1ec:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800a1f0:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800a1f4:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800a1f6:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800a1f8:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800a1fa:	d1b4      	bne.n	800a166 <_tx_mutex_put+0x42>
 800a1fc:	e7b1      	b.n	800a162 <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a1fe:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a200:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a204:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 800a206:	6832      	ldr	r2, [r6, #0]
 800a208:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800a20a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800a20e:	69eb      	ldr	r3, [r5, #28]
 800a210:	bf28      	it	cs
 800a212:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 800a214:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800a216:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 800a218:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800a21a:	d969      	bls.n	800a2f0 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a21c:	692a      	ldr	r2, [r5, #16]
 800a21e:	2a01      	cmp	r2, #1
 800a220:	d176      	bne.n	800a310 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 800a222:	6833      	ldr	r3, [r6, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a228:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 fe01 	bl	800ae34 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a232:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a236:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 800a238:	6833      	ldr	r3, [r6, #0]
 800a23a:	69af      	ldr	r7, [r5, #24]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a240:	2f00      	cmp	r7, #0
 800a242:	d039      	beq.n	800a2b8 <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a244:	692b      	ldr	r3, [r5, #16]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d154      	bne.n	800a2f4 <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800a24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a24c:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800a24e:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a250:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800a252:	616a      	str	r2, [r5, #20]
 800a254:	69eb      	ldr	r3, [r5, #28]
 800a256:	e799      	b.n	800a18c <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800a258:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800a25c:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800a25e:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800a260:	6713      	str	r3, [r2, #112]	; 0x70
 800a262:	e7a6      	b.n	800a1b2 <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800a264:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800a268:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800a26a:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800a26c:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800a26e:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 800a272:	e793      	b.n	800a19c <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800a274:	2a00      	cmp	r2, #0
 800a276:	f47f af7b 	bne.w	800a170 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a27a:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a27c:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 800a280:	4610      	mov	r0, r2
 800a282:	e7ac      	b.n	800a1de <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 800a284:	4e2b      	ldr	r6, [pc, #172]	; (800a334 <_tx_mutex_put+0x210>)
 800a286:	6832      	ldr	r2, [r6, #0]
 800a288:	3201      	adds	r2, #1
 800a28a:	6032      	str	r2, [r6, #0]
 800a28c:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800a290:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 800a294:	2900      	cmp	r1, #0
 800a296:	d0b2      	beq.n	800a1fe <_tx_mutex_put+0xda>
 800a298:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a29a:	2420      	movs	r4, #32
 800a29c:	e001      	b.n	800a2a2 <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	d0ae      	beq.n	800a200 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800a2a2:	6910      	ldr	r0, [r2, #16]
 800a2a4:	2801      	cmp	r0, #1
 800a2a6:	d103      	bne.n	800a2b0 <_tx_mutex_put+0x18c>
 800a2a8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800a2aa:	4284      	cmp	r4, r0
 800a2ac:	bf28      	it	cs
 800a2ae:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800a2b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800a2b2:	4291      	cmp	r1, r2
 800a2b4:	d1f3      	bne.n	800a29e <_tx_mutex_put+0x17a>
 800a2b6:	e7a3      	b.n	800a200 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	6033      	str	r3, [r6, #0]
 800a2be:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800a2c2:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a2c4:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800a2c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a2c8:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800a2ca:	4543      	cmp	r3, r8
 800a2cc:	d002      	beq.n	800a2d4 <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800a2ce:	4641      	mov	r1, r8
 800a2d0:	f7ff fec0 	bl	800a054 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a2d4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a2d8:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 800a2da:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a2dc:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 800a2de:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a2e0:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 800a2e2:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a2e4:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 800a2e8:	f000 f8be 	bl	800a468 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	e776      	b.n	800a1de <_tx_mutex_put+0xba>
 800a2f0:	69af      	ldr	r7, [r5, #24]
 800a2f2:	e7a5      	b.n	800a240 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 800a2f4:	2400      	movs	r4, #0
 800a2f6:	69eb      	ldr	r3, [r5, #28]
 800a2f8:	e748      	b.n	800a18c <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800a2fa:	69eb      	ldr	r3, [r5, #28]
 800a2fc:	b953      	cbnz	r3, 800a314 <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 800a2fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a300:	4543      	cmp	r3, r8
 800a302:	f43f af63 	beq.w	800a1cc <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800a306:	4641      	mov	r1, r8
 800a308:	4620      	mov	r0, r4
 800a30a:	f7ff fea3 	bl	800a054 <_tx_mutex_priority_change>
 800a30e:	e75d      	b.n	800a1cc <_tx_mutex_put+0xa8>
 800a310:	69af      	ldr	r7, [r5, #24]
 800a312:	e737      	b.n	800a184 <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 800a314:	4628      	mov	r0, r5
 800a316:	f000 fd8d 	bl	800ae34 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a31a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a31e:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800a320:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 800a322:	b10b      	cbz	r3, 800a328 <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a328:	f382 8810 	msr	PRIMASK, r2
 800a32c:	e7e7      	b.n	800a2fe <_tx_mutex_put+0x1da>
 800a32e:	bf00      	nop
 800a330:	20003bc8 	.word	0x20003bc8
 800a334:	20003bc4 	.word	0x20003bc4

0800a338 <_tx_thread_identify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a338:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a33c:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a33e:	4a02      	ldr	r2, [pc, #8]	; (800a348 <_tx_thread_identify+0x10>)
 800a340:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a342:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 800a346:	4770      	bx	lr
 800a348:	20003bc8 	.word	0x20003bc8

0800a34c <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800a34c:	b538      	push	{r3, r4, r5, lr}

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800a34e:	480f      	ldr	r0, [pc, #60]	; (800a38c <_tx_thread_initialize+0x40>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a350:	2400      	movs	r4, #0

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800a352:	4b0f      	ldr	r3, [pc, #60]	; (800a390 <_tx_thread_initialize+0x44>)
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a354:	2520      	movs	r5, #32
    _tx_thread_execute_ptr =  TX_NULL;
 800a356:	6004      	str	r4, [r0, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a358:	4621      	mov	r1, r4
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a35a:	4a0e      	ldr	r2, [pc, #56]	; (800a394 <_tx_thread_initialize+0x48>)
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 800a35c:	480e      	ldr	r0, [pc, #56]	; (800a398 <_tx_thread_initialize+0x4c>)
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800a35e:	601c      	str	r4, [r3, #0]
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a360:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <_tx_thread_initialize+0x50>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a362:	6014      	str	r4, [r2, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a364:	2280      	movs	r2, #128	; 0x80
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 800a366:	6004      	str	r4, [r0, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a368:	480d      	ldr	r0, [pc, #52]	; (800a3a0 <_tx_thread_initialize+0x54>)
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a36a:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a36c:	f001 f843 	bl	800b3f6 <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
 800a370:	4a0c      	ldr	r2, [pc, #48]	; (800a3a4 <_tx_thread_initialize+0x58>)
    _tx_thread_created_ptr =        TX_NULL;
 800a372:	490d      	ldr	r1, [pc, #52]	; (800a3a8 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
                            | (((ULONG) 1) << 7)
 800a374:	6810      	ldr	r0, [r2, #0]
 800a376:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <_tx_thread_initialize+0x60>)
    _tx_thread_created_ptr =        TX_NULL;
 800a378:	600c      	str	r4, [r1, #0]
                            | (((ULONG) 1) << 7)
 800a37a:	4303      	orrs	r3, r0
    _tx_thread_created_count =      TX_EMPTY;
 800a37c:	4d0c      	ldr	r5, [pc, #48]	; (800a3b0 <_tx_thread_initialize+0x64>)
    _tx_thread_preempt_disable =    ((UINT) 0);
 800a37e:	480d      	ldr	r0, [pc, #52]	; (800a3b4 <_tx_thread_initialize+0x68>)
    _tx_thread_mutex_release =      TX_NULL;
 800a380:	490d      	ldr	r1, [pc, #52]	; (800a3b8 <_tx_thread_initialize+0x6c>)
    _tx_thread_created_count =      TX_EMPTY;
 800a382:	602c      	str	r4, [r5, #0]
    _tx_thread_preempt_disable =    ((UINT) 0);
 800a384:	6004      	str	r4, [r0, #0]
    _tx_thread_mutex_release =      TX_NULL;
 800a386:	600c      	str	r4, [r1, #0]
    _tx_build_options =  _tx_build_options 
 800a388:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20003bcc 	.word	0x20003bcc
 800a390:	20003bb0 	.word	0x20003bb0
 800a394:	20003bc8 	.word	0x20003bc8
 800a398:	20003bd4 	.word	0x20003bd4
 800a39c:	20003bd0 	.word	0x20003bd0
 800a3a0:	20003b2c 	.word	0x20003b2c
 800a3a4:	20003bb8 	.word	0x20003bb8
 800a3a8:	20003bb4 	.word	0x20003bb4
 800a3ac:	01000080 	.word	0x01000080
 800a3b0:	20003bbc 	.word	0x20003bbc
 800a3b4:	20003bc4 	.word	0x20003bc4
 800a3b8:	20003bac 	.word	0x20003bac

0800a3bc <_tx_thread_preemption_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a3be:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a3c2:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800a3c4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	d341      	bcc.n	800a450 <_tx_thread_preemption_change+0x94>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 800a3cc:	d017      	beq.n	800a3fe <_tx_thread_preemption_change+0x42>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a3ce:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800a3d2:	4d21      	ldr	r5, [pc, #132]	; (800a458 <_tx_thread_preemption_change+0x9c>)
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800a3da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a3dc:	428b      	cmp	r3, r1
 800a3de:	682d      	ldr	r5, [r5, #0]
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800a3e0:	4616      	mov	r6, r2
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800a3e2:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 800a3e6:	bf28      	it	cs
 800a3e8:	460b      	movcs	r3, r1
            if (_tx_thread_highest_priority < new_threshold)
 800a3ea:	428a      	cmp	r2, r1
 800a3ec:	bf28      	it	cs
 800a3ee:	460e      	movcs	r6, r1
 800a3f0:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a3f2:	42b5      	cmp	r5, r6
 800a3f4:	d312      	bcc.n	800a41c <_tx_thread_preemption_change+0x60>
    status =  TX_SUCCESS;
 800a3f6:	2000      	movs	r0, #0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a3f8:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
}
 800a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 800a3fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a400:	4d16      	ldr	r5, [pc, #88]	; (800a45c <_tx_thread_preemption_change+0xa0>)
 800a402:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800a406:	4285      	cmp	r5, r0
 800a408:	d1e1      	bne.n	800a3ce <_tx_thread_preemption_change+0x12>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a40a:	4f15      	ldr	r7, [pc, #84]	; (800a460 <_tx_thread_preemption_change+0xa4>)
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800a40c:	2601      	movs	r6, #1
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a40e:	683d      	ldr	r5, [r7, #0]
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800a410:	fa06 f303 	lsl.w	r3, r6, r3
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a414:	ea25 0503 	bic.w	r5, r5, r3
 800a418:	603d      	str	r5, [r7, #0]
 800a41a:	e7d8      	b.n	800a3ce <_tx_thread_preemption_change+0x12>
                if (_tx_thread_execute_ptr == thread_ptr)
 800a41c:	4911      	ldr	r1, [pc, #68]	; (800a464 <_tx_thread_preemption_change+0xa8>)
 800a41e:	680e      	ldr	r6, [r1, #0]
 800a420:	4286      	cmp	r6, r0
 800a422:	d1e8      	bne.n	800a3f6 <_tx_thread_preemption_change+0x3a>
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 800a424:	429a      	cmp	r2, r3
 800a426:	d006      	beq.n	800a436 <_tx_thread_preemption_change+0x7a>
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a428:	4e0d      	ldr	r6, [pc, #52]	; (800a460 <_tx_thread_preemption_change+0xa4>)
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800a42a:	2001      	movs	r0, #1
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a42c:	6833      	ldr	r3, [r6, #0]
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800a42e:	fa00 f202 	lsl.w	r2, r0, r2
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a432:	4313      	orrs	r3, r2
 800a434:	6033      	str	r3, [r6, #0]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a436:	4b09      	ldr	r3, [pc, #36]	; (800a45c <_tx_thread_preemption_change+0xa0>)
 800a438:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a43c:	600b      	str	r3, [r1, #0]
 800a43e:	f384 8810 	msr	PRIMASK, r4
                    _tx_thread_system_preempt_check();
 800a442:	f000 f811 	bl	800a468 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a446:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a44a:	b672      	cpsid	i
    status =  TX_SUCCESS;
 800a44c:	2000      	movs	r0, #0
 800a44e:	e7d3      	b.n	800a3f8 <_tx_thread_preemption_change+0x3c>
        status =  TX_THRESH_ERROR;
 800a450:	2018      	movs	r0, #24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a452:	f384 8810 	msr	PRIMASK, r4
}
 800a456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a458:	20003bd0 	.word	0x20003bd0
 800a45c:	20003b2c 	.word	0x20003b2c
 800a460:	20003bd4 	.word	0x20003bd4
 800a464:	20003bcc 	.word	0x20003bcc

0800a468 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a468:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <_tx_thread_system_preempt_check+0x2c>)
 800a46a:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800a46c:	b98b      	cbnz	r3, 800a492 <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a46e:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800a470:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800a472:	6812      	ldr	r2, [r2, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d00b      	beq.n	800a492 <_tx_thread_system_preempt_check+0x2a>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <_tx_thread_system_preempt_check+0x38>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a482:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800a486:	b923      	cbnz	r3, 800a492 <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a488:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a48c:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a48e:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800a492:	4770      	bx	lr
 800a494:	20003bc4 	.word	0x20003bc4
 800a498:	20003bc8 	.word	0x20003bc8
 800a49c:	20003bcc 	.word	0x20003bcc
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a4a8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a4ac:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800a4ae:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d03f      	beq.n	800a534 <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800a4b4:	304c      	adds	r0, #76	; 0x4c
 800a4b6:	f000 fa1d 	bl	800a8f4 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a4ba:	4a35      	ldr	r2, [pc, #212]	; (800a590 <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800a4bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 800a4be:	6813      	ldr	r3, [r2, #0]
 800a4c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800a4c6:	b9b8      	cbnz	r0, 800a4f8 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800a4c8:	b9f9      	cbnz	r1, 800a50a <_tx_thread_system_resume+0x66>
 800a4ca:	4b32      	ldr	r3, [pc, #200]	; (800a594 <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a4cc:	4932      	ldr	r1, [pc, #200]	; (800a598 <_tx_thread_system_resume+0xf4>)
 800a4ce:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a4d0:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	428b      	cmp	r3, r1
 800a4d8:	d00d      	beq.n	800a4f6 <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a4da:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 800a4dc:	b95b      	cbnz	r3, 800a4f6 <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a4de:	4b2f      	ldr	r3, [pc, #188]	; (800a59c <_tx_thread_system_resume+0xf8>)
 800a4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4e6:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800a4ea:	b923      	cbnz	r3, 800a4f6 <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a4ec:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a4f0:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a4f2:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800a4f8:	3901      	subs	r1, #1
 800a4fa:	2901      	cmp	r1, #1
 800a4fc:	d9e5      	bls.n	800a4ca <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a4fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a500:	b991      	cbnz	r1, 800a528 <_tx_thread_system_resume+0x84>
 800a502:	4b24      	ldr	r3, [pc, #144]	; (800a594 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800a504:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 800a506:	6321      	str	r1, [r4, #48]	; 0x30
 800a508:	e7e0      	b.n	800a4cc <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a50a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a50c:	b963      	cbnz	r3, 800a528 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 800a50e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 800a510:	4e23      	ldr	r6, [pc, #140]	; (800a5a0 <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 800a512:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 800a514:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 800a518:	b171      	cbz	r1, 800a538 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800a51a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800a51c:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800a51e:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800a520:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800a522:	e9c4 1008 	strd	r1, r0, [r4, #32]
 800a526:	e7d1      	b.n	800a4cc <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a528:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800a52a:	2103      	movs	r1, #3
 800a52c:	4b19      	ldr	r3, [pc, #100]	; (800a594 <_tx_thread_system_resume+0xf0>)
 800a52e:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 800a532:	e7cb      	b.n	800a4cc <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a534:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a536:	e7c0      	b.n	800a4ba <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a538:	491a      	ldr	r1, [pc, #104]	; (800a5a4 <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a53a:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 800a53e:	4f1a      	ldr	r7, [pc, #104]	; (800a5a8 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a540:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a542:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800a546:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 800a54a:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a54c:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 800a550:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a552:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800a556:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 800a55a:	d9b7      	bls.n	800a4cc <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 800a55c:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 800a55e:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 800a560:	b199      	cbz	r1, 800a58a <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800a562:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 800a564:	4286      	cmp	r6, r0
 800a566:	d9b1      	bls.n	800a4cc <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 800a568:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a56a:	428e      	cmp	r6, r1
 800a56c:	d006      	beq.n	800a57c <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a56e:	480f      	ldr	r0, [pc, #60]	; (800a5ac <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 800a570:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a574:	6801      	ldr	r1, [r0, #0]
 800a576:	ea41 010c 	orr.w	r1, r1, ip
 800a57a:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 800a57c:	601c      	str	r4, [r3, #0]
 800a57e:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a582:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0aa      	beq.n	800a4de <_tx_thread_system_resume+0x3a>
}
 800a588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 800a58a:	601c      	str	r4, [r3, #0]
 800a58c:	e79e      	b.n	800a4cc <_tx_thread_system_resume+0x28>
 800a58e:	bf00      	nop
 800a590:	20003bc4 	.word	0x20003bc4
 800a594:	20003bcc 	.word	0x20003bcc
 800a598:	20003bc8 	.word	0x20003bc8
 800a59c:	e000ed04 	.word	0xe000ed04
 800a5a0:	20003b2c 	.word	0x20003b2c
 800a5a4:	20003bb0 	.word	0x20003bb0
 800a5a8:	20003bd0 	.word	0x20003bd0
 800a5ac:	20003bd4 	.word	0x20003bd4

0800a5b0 <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a5b4:	4b57      	ldr	r3, [pc, #348]	; (800a714 <_tx_thread_system_suspend+0x164>)
{
 800a5b6:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 800a5b8:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a5ba:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a5be:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800a5c0:	4285      	cmp	r5, r0
 800a5c2:	d060      	beq.n	800a686 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a5c4:	4a54      	ldr	r2, [pc, #336]	; (800a718 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800a5c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 800a5c8:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800a5ca:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 800a5cc:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5d0:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800a5d2:	d015      	beq.n	800a600 <_tx_thread_system_suspend+0x50>
 800a5d4:	4b51      	ldr	r3, [pc, #324]	; (800a71c <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a5d6:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	42ab      	cmp	r3, r5
 800a5de:	d00d      	beq.n	800a5fc <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a5e0:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 800a5e2:	b95b      	cbnz	r3, 800a5fc <_tx_thread_system_suspend+0x4c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a5e4:	4b4e      	ldr	r3, [pc, #312]	; (800a720 <_tx_thread_system_suspend+0x170>)
 800a5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ea:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a5ec:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800a5f0:	b923      	cbnz	r3, 800a5fc <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a5f2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a5f6:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a5f8:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 800a5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800a600:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800a602:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 800a606:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 800a608:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800a60a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 800a60e:	d050      	beq.n	800a6b2 <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800a610:	4f44      	ldr	r7, [pc, #272]	; (800a724 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800a612:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800a616:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800a61a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800a61e:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 800a620:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800a624:	d037      	beq.n	800a696 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 800a626:	4b3d      	ldr	r3, [pc, #244]	; (800a71c <_tx_thread_system_suspend+0x16c>)
 800a628:	6819      	ldr	r1, [r3, #0]
 800a62a:	42a1      	cmp	r1, r4
 800a62c:	d1d3      	bne.n	800a5d6 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a62e:	483e      	ldr	r0, [pc, #248]	; (800a728 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a630:	493e      	ldr	r1, [pc, #248]	; (800a72c <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a632:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a634:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a636:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a63a:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a63c:	b1ec      	cbz	r4, 800a67a <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 800a63e:	6814      	ldr	r4, [r2, #0]
 800a640:	3401      	adds	r4, #1
 800a642:	6014      	str	r4, [r2, #0]
 800a644:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a648:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a64c:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 800a64e:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 800a650:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 800a652:	3c01      	subs	r4, #1
 800a654:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800a656:	fa95 f4a5 	rbit	r4, r5
 800a65a:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 800a65e:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800a662:	f8d0 c000 	ldr.w	ip, [r0]
 800a666:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a668:	4560      	cmp	r0, ip
 800a66a:	d806      	bhi.n	800a67a <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a66c:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 800a66e:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a670:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a674:	ea25 0504 	bic.w	r5, r5, r4
 800a678:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a67a:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a67e:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0af      	beq.n	800a5e4 <_tx_thread_system_suspend+0x34>
 800a684:	e7ba      	b.n	800a5fc <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 800a686:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a688:	3b01      	subs	r3, #1
 800a68a:	3303      	adds	r3, #3
 800a68c:	d935      	bls.n	800a6fa <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a68e:	4b28      	ldr	r3, [pc, #160]	; (800a730 <_tx_thread_system_suspend+0x180>)
 800a690:	69e2      	ldr	r2, [r4, #28]
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e796      	b.n	800a5c4 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a696:	f8df c094 	ldr.w	ip, [pc, #148]	; 800a72c <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 800a69a:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a69e:	f8dc 3000 	ldr.w	r3, [ip]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0bf      	beq.n	800a626 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a6a6:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a6a8:	ea23 0301 	bic.w	r3, r3, r1
 800a6ac:	f8cc 3000 	str.w	r3, [ip]
 800a6b0:	e7b9      	b.n	800a626 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800a6b2:	f8df e080 	ldr.w	lr, [pc, #128]	; 800a734 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 800a6b6:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a6b8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800a72c <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800a6bc:	f8de 3000 	ldr.w	r3, [lr]
 800a6c0:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 800a6c2:	4f18      	ldr	r7, [pc, #96]	; (800a724 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800a6c4:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a6c6:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 800a6ca:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800a6ce:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800a6d2:	f1b9 0f00 	cmp.w	r9, #0
 800a6d6:	d003      	beq.n	800a6e0 <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a6d8:	ea01 0109 	and.w	r1, r1, r9
 800a6dc:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 800a6e0:	b983      	cbnz	r3, 800a704 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a6e2:	4811      	ldr	r0, [pc, #68]	; (800a728 <_tx_thread_system_suspend+0x178>)
 800a6e4:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 800a6e6:	490d      	ldr	r1, [pc, #52]	; (800a71c <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a6e8:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800a6ea:	600b      	str	r3, [r1, #0]
 800a6ec:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a6f0:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f43f af76 	beq.w	800a5e4 <_tx_thread_system_suspend+0x34>
 800a6f8:	e780      	b.n	800a5fc <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800a6fa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800a6fe:	f000 f8cf 	bl	800a8a0 <_tx_timer_system_activate>
 800a702:	e7c4      	b.n	800a68e <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800a704:	fa93 f3a3 	rbit	r3, r3
 800a708:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800a70c:	4906      	ldr	r1, [pc, #24]	; (800a728 <_tx_thread_system_suspend+0x178>)
 800a70e:	600b      	str	r3, [r1, #0]
 800a710:	e789      	b.n	800a626 <_tx_thread_system_suspend+0x76>
 800a712:	bf00      	nop
 800a714:	20003bc8 	.word	0x20003bc8
 800a718:	20003bc4 	.word	0x20003bc4
 800a71c:	20003bcc 	.word	0x20003bcc
 800a720:	e000ed04 	.word	0xe000ed04
 800a724:	20003b2c 	.word	0x20003b2c
 800a728:	20003bd0 	.word	0x20003bd0
 800a72c:	20003bd4 	.word	0x20003bd4
 800a730:	20003c60 	.word	0x20003c60
 800a734:	20003bb0 	.word	0x20003bb0

0800a738 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73a:	460f      	mov	r7, r1
 800a73c:	4616      	mov	r6, r2
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800a73e:	2100      	movs	r1, #0
 800a740:	222c      	movs	r2, #44	; 0x2c
{
 800a742:	4604      	mov	r4, r0
 800a744:	461d      	mov	r5, r3
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800a746:	f000 fe56 	bl	800b3f6 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800a74a:	9b06      	ldr	r3, [sp, #24]
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800a74c:	6067      	str	r7, [r4, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800a74e:	60a3      	str	r3, [r4, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800a750:	9b07      	ldr	r3, [sp, #28]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800a752:	6165      	str	r5, [r4, #20]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800a754:	e9c4 3603 	strd	r3, r6, [r4, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a758:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a75c:	b672      	cpsid	i
    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800a75e:	4a12      	ldr	r2, [pc, #72]	; (800a7a8 <_tx_timer_create+0x70>)
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800a760:	4912      	ldr	r1, [pc, #72]	; (800a7ac <_tx_timer_create+0x74>)
    if (_tx_timer_created_count == TX_EMPTY)
 800a762:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800a764:	6021      	str	r1, [r4, #0]
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800a766:	4912      	ldr	r1, [pc, #72]	; (800a7b0 <_tx_timer_create+0x78>)
    if (_tx_timer_created_count == TX_EMPTY)
 800a768:	b95b      	cbnz	r3, 800a782 <_tx_timer_create+0x4a>
        timer_ptr -> tx_timer_created_previous =  previous_timer;
        timer_ptr -> tx_timer_created_next =      next_timer;
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800a76a:	3301      	adds	r3, #1
        _tx_timer_created_ptr =                   timer_ptr;
 800a76c:	600c      	str	r4, [r1, #0]
    _tx_timer_created_count++;
 800a76e:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800a770:	9b08      	ldr	r3, [sp, #32]
 800a772:	2b01      	cmp	r3, #1
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800a774:	e9c4 4409 	strd	r4, r4, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 800a778:	d00e      	beq.n	800a798 <_tx_timer_create+0x60>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a77a:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800a77e:	2000      	movs	r0, #0
 800a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _tx_timer_created_count++;
 800a782:	3301      	adds	r3, #1
        next_timer =  _tx_timer_created_ptr;
 800a784:	6809      	ldr	r1, [r1, #0]
    _tx_timer_created_count++;
 800a786:	6013      	str	r3, [r2, #0]
    if (auto_activate == TX_AUTO_ACTIVATE)
 800a788:	9b08      	ldr	r3, [sp, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800a78a:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if (auto_activate == TX_AUTO_ACTIVATE)
 800a78c:	2b01      	cmp	r3, #1
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800a78e:	628c      	str	r4, [r1, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800a790:	6244      	str	r4, [r0, #36]	; 0x24
        timer_ptr -> tx_timer_created_next =      next_timer;
 800a792:	e9c4 1009 	strd	r1, r0, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 800a796:	d1f0      	bne.n	800a77a <_tx_timer_create+0x42>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800a798:	f104 0008 	add.w	r0, r4, #8
 800a79c:	f000 f880 	bl	800a8a0 <_tx_timer_system_activate>
 800a7a0:	f386 8810 	msr	PRIMASK, r6
}
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a8:	2000414c 	.word	0x2000414c
 800a7ac:	4154494d 	.word	0x4154494d
 800a7b0:	20003d40 	.word	0x20003d40

0800a7b4 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800a7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800a7b8:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a7ba:	4c26      	ldr	r4, [pc, #152]	; (800a854 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 800a7bc:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 800a88c <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a7c0:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 800a7c2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 800a890 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a7c6:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800a7c8:	4b23      	ldr	r3, [pc, #140]	; (800a858 <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a7ca:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a7cc:	4f23      	ldr	r7, [pc, #140]	; (800a85c <_tx_timer_initialize+0xa8>)
{
 800a7ce:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 800a7d0:	4e23      	ldr	r6, [pc, #140]	; (800a860 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 800a7d2:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 800a7d6:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a7da:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 800a7dc:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800a7de:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a7e0:	f000 fe09 	bl	800b3f6 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800a7e4:	4e1f      	ldr	r6, [pc, #124]	; (800a864 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800a7e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 800a7ea:	4a1f      	ldr	r2, [pc, #124]	; (800a868 <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800a7ec:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800a7f0:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800a7f2:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800a7f4:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800a894 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800a7f8:	4f1c      	ldr	r7, [pc, #112]	; (800a86c <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 800a7fa:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800a7fc:	4661      	mov	r1, ip
 800a7fe:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a898 <_tx_timer_initialize+0xe4>
 800a802:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800a804:	4e1a      	ldr	r6, [pc, #104]	; (800a870 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800a806:	4c1b      	ldr	r4, [pc, #108]	; (800a874 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800a808:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800a80c:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 800a810:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a89c <_tx_timer_initialize+0xe8>
 800a814:	4f18      	ldr	r7, [pc, #96]	; (800a878 <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800a816:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 800a81a:	4d18      	ldr	r5, [pc, #96]	; (800a87c <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800a81c:	6020      	str	r0, [r4, #0]
 800a81e:	e003      	b.n	800a828 <_tx_timer_initialize+0x74>
 800a820:	6831      	ldr	r1, [r6, #0]
 800a822:	6822      	ldr	r2, [r4, #0]
 800a824:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 800a828:	2000      	movs	r0, #0
 800a82a:	9201      	str	r2, [sp, #4]
 800a82c:	9100      	str	r1, [sp, #0]
 800a82e:	463a      	mov	r2, r7
 800a830:	4629      	mov	r1, r5
 800a832:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a836:	e9cd 0004 	strd	r0, r0, [sp, #16]
 800a83a:	464b      	mov	r3, r9
 800a83c:	4810      	ldr	r0, [pc, #64]	; (800a880 <_tx_timer_initialize+0xcc>)
 800a83e:	f000 fc37 	bl	800b0b0 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800a842:	2800      	cmp	r0, #0
 800a844:	d1ec      	bne.n	800a820 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800a846:	4a0f      	ldr	r2, [pc, #60]	; (800a884 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800a848:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 800a84a:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 800a84c:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800a84e:	b007      	add	sp, #28
 800a850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a854:	20003bdc 	.word	0x20003bdc
 800a858:	20003d38 	.word	0x20003d38
 800a85c:	20004150 	.word	0x20004150
 800a860:	20003c5c 	.word	0x20003c5c
 800a864:	20003bd8 	.word	0x20003bd8
 800a868:	20003d3c 	.word	0x20003d3c
 800a86c:	20003c68 	.word	0x20003c68
 800a870:	20004148 	.word	0x20004148
 800a874:	20003d44 	.word	0x20003d44
 800a878:	0800a925 	.word	0x0800a925
 800a87c:	0800b4dc 	.word	0x0800b4dc
 800a880:	20003c70 	.word	0x20003c70
 800a884:	20003d40 	.word	0x20003d40
 800a888:	2000414c 	.word	0x2000414c
 800a88c:	20004154 	.word	0x20004154
 800a890:	20003c60 	.word	0x20003c60
 800a894:	20003d48 	.word	0x20003d48
 800a898:	20003c64 	.word	0x20003c64
 800a89c:	4154494d 	.word	0x4154494d

0800a8a0 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800a8a0:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800a8a2:	1e53      	subs	r3, r2, #1
 800a8a4:	1cd9      	adds	r1, r3, #3
 800a8a6:	d900      	bls.n	800a8aa <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 800a8a8:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800a8aa:	6981      	ldr	r1, [r0, #24]
 800a8ac:	2900      	cmp	r1, #0
 800a8ae:	d1fb      	bne.n	800a8a8 <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800a8b0:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800a8b2:	4a0d      	ldr	r2, [pc, #52]	; (800a8e8 <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800a8b4:	490d      	ldr	r1, [pc, #52]	; (800a8ec <_tx_timer_system_activate+0x4c>)
 800a8b6:	bf94      	ite	ls
 800a8b8:	009b      	lslls	r3, r3, #2
 800a8ba:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800a8bc:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800a8be:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800a8c0:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	d803      	bhi.n	800a8ce <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800a8c6:	4a0a      	ldr	r2, [pc, #40]	; (800a8f0 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800a8c8:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800a8ca:	6812      	ldr	r2, [r2, #0]
 800a8cc:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	b132      	cbz	r2, 800a8e0 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800a8d2:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800a8d4:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800a8d6:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800a8d8:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800a8dc:	6183      	str	r3, [r0, #24]
}
 800a8de:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800a8e0:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 800a8e4:	6018      	str	r0, [r3, #0]
 800a8e6:	e7f9      	b.n	800a8dc <_tx_timer_system_activate+0x3c>
 800a8e8:	20003bd8 	.word	0x20003bd8
 800a8ec:	20003c68 	.word	0x20003c68
 800a8f0:	20003d3c 	.word	0x20003d3c

0800a8f4 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800a8f4:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800a8f6:	b153      	cbz	r3, 800a90e <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800a8f8:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800a8fa:	4290      	cmp	r0, r2
 800a8fc:	d008      	beq.n	800a910 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800a8fe:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a900:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a902:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a904:	6819      	ldr	r1, [r3, #0]
 800a906:	4281      	cmp	r1, r0
 800a908:	d008      	beq.n	800a91c <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800a90a:	2300      	movs	r3, #0
 800a90c:	6183      	str	r3, [r0, #24]
    }
}
 800a90e:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4282      	cmp	r2, r0
 800a914:	d1f9      	bne.n	800a90a <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 800a916:	2200      	movs	r2, #0
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	e7f6      	b.n	800a90a <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 800a91c:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e7f3      	b.n	800a90a <_tx_timer_system_deactivate+0x16>
 800a922:	bf00      	nop

0800a924 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800a924:	4b40      	ldr	r3, [pc, #256]	; (800aa28 <_tx_timer_thread_entry+0x104>)
 800a926:	4298      	cmp	r0, r3
 800a928:	d000      	beq.n	800a92c <_tx_timer_thread_entry+0x8>
 800a92a:	4770      	bx	lr
{
 800a92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a930:	b083      	sub	sp, #12
 800a932:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800aa40 <_tx_timer_thread_entry+0x11c>
 800a936:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800aa44 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800a93a:	2600      	movs	r6, #0
 800a93c:	ad01      	add	r5, sp, #4
 800a93e:	4c3b      	ldr	r4, [pc, #236]	; (800aa2c <_tx_timer_thread_entry+0x108>)
 800a940:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800aa38 <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a944:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a948:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 800a94a:	f8db 3000 	ldr.w	r3, [fp]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 800a952:	b10a      	cbz	r2, 800a958 <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800a954:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a958:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 800a95c:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a960:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800a962:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a966:	d059      	beq.n	800aa1c <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800a968:	4b31      	ldr	r3, [pc, #196]	; (800aa30 <_tx_timer_thread_entry+0x10c>)
 800a96a:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a96c:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a970:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a974:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800a976:	9f00      	ldr	r7, [sp, #0]
 800a978:	b9b7      	cbnz	r7, 800a9a8 <_tx_timer_thread_entry+0x84>
 800a97a:	e034      	b.n	800a9e6 <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800a97c:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a97e:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800a980:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800a982:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800a984:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800a986:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a988:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a98c:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a990:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800a992:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800a994:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 800a996:	42b8      	cmp	r0, r7
 800a998:	d02b      	beq.n	800a9f2 <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a99a:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a99e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a9a2:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 800a9a4:	9f00      	ldr	r7, [sp, #0]
 800a9a6:	b1f7      	cbz	r7, 800a9e6 <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800a9a8:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 800a9aa:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 800a9ac:	42ba      	cmp	r2, r7
 800a9ae:	d018      	beq.n	800a9e2 <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800a9b0:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 800a9b2:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a9b4:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a9b6:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800a9b8:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	2a20      	cmp	r2, #32
 800a9c0:	d8dc      	bhi.n	800a97c <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800a9c2:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800a9c4:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800a9c8:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800a9ca:	b113      	cbz	r3, 800a9d2 <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a9cc:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800a9ce:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 800a9d0:	9701      	str	r7, [sp, #4]
 800a9d2:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 800a9d4:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a9d6:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d0d6      	beq.n	800a98c <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 800a9de:	4790      	blx	r2
 800a9e0:	e7d4      	b.n	800a98c <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 800a9e2:	9600      	str	r6, [sp, #0]
 800a9e4:	e7ea      	b.n	800a9bc <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a9e6:	4b12      	ldr	r3, [pc, #72]	; (800aa30 <_tx_timer_thread_entry+0x10c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	b13b      	cbz	r3, 800a9fc <_tx_timer_thread_entry+0xd8>
 800a9ec:	f38c 8810 	msr	PRIMASK, ip
 800a9f0:	e7a8      	b.n	800a944 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800a9f2:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ff53 	bl	800a8a0 <_tx_timer_system_activate>
 800a9fa:	e7ce      	b.n	800a99a <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a9fc:	490d      	ldr	r1, [pc, #52]	; (800aa34 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a9fe:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800aa00:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 800aa02:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800aa04:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 800aa08:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800aa0a:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 800aa0e:	600b      	str	r3, [r1, #0]
 800aa10:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800aa14:	4808      	ldr	r0, [pc, #32]	; (800aa38 <_tx_timer_thread_entry+0x114>)
 800aa16:	f7ff fdcb 	bl	800a5b0 <_tx_thread_system_suspend>
 800aa1a:	e793      	b.n	800a944 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <_tx_timer_thread_entry+0x118>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f8cb 3000 	str.w	r3, [fp]
 800aa24:	e7a0      	b.n	800a968 <_tx_timer_thread_entry+0x44>
 800aa26:	bf00      	nop
 800aa28:	4154494d 	.word	0x4154494d
 800aa2c:	20003d38 	.word	0x20003d38
 800aa30:	20003c5c 	.word	0x20003c5c
 800aa34:	20003bc4 	.word	0x20003bc4
 800aa38:	20003c70 	.word	0x20003c70
 800aa3c:	20003d3c 	.word	0x20003d3c
 800aa40:	20003bd8 	.word	0x20003bd8
 800aa44:	20003c68 	.word	0x20003c68

0800aa48 <_txe_semaphore_create>:
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	d100      	bne.n	800aa4e <_txe_semaphore_create+0x6>
 800aa4c:	b908      	cbnz	r0, 800aa52 <_txe_semaphore_create+0xa>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aa4e:	200c      	movs	r0, #12
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
    }

    /* Return completion status.  */
    return(status);
}
 800aa50:	4770      	bx	lr
{
 800aa52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aa56:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aa5a:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 800aa5c:	4e21      	ldr	r6, [pc, #132]	; (800aae4 <_txe_semaphore_create+0x9c>)
 800aa5e:	6833      	ldr	r3, [r6, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aa64:	f384 8810 	msr	PRIMASK, r4
        next_semaphore =  _tx_semaphore_created_ptr;
 800aa68:	4c1f      	ldr	r4, [pc, #124]	; (800aae8 <_txe_semaphore_create+0xa0>)
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800aa6a:	4b20      	ldr	r3, [pc, #128]	; (800aaec <_txe_semaphore_create+0xa4>)
        next_semaphore =  _tx_semaphore_created_ptr;
 800aa6c:	6824      	ldr	r4, [r4, #0]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800aa6e:	681d      	ldr	r5, [r3, #0]
            if (semaphore_ptr == next_semaphore)
 800aa70:	42a0      	cmp	r0, r4
 800aa72:	d00a      	beq.n	800aa8a <_txe_semaphore_create+0x42>
 800aa74:	fab5 f385 	clz	r3, r5
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	b113      	cbz	r3, 800aa82 <_txe_semaphore_create+0x3a>
 800aa7c:	e005      	b.n	800aa8a <_txe_semaphore_create+0x42>
 800aa7e:	42a0      	cmp	r0, r4
 800aa80:	d003      	beq.n	800aa8a <_txe_semaphore_create+0x42>
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800aa82:	3301      	adds	r3, #1
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800aa84:	6964      	ldr	r4, [r4, #20]
            if (semaphore_ptr == next_semaphore)
 800aa86:	42ab      	cmp	r3, r5
 800aa88:	d3f9      	bcc.n	800aa7e <_txe_semaphore_create+0x36>
 800aa8a:	4615      	mov	r5, r2
 800aa8c:	4688      	mov	r8, r1
 800aa8e:	4607      	mov	r7, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aa90:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aa94:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 800aa96:	6833      	ldr	r3, [r6, #0]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aa9c:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 800aaa0:	f7ff fce2 	bl	800a468 <_tx_thread_system_preempt_check>
        if (semaphore_ptr == next_semaphore)
 800aaa4:	42a7      	cmp	r7, r4
 800aaa6:	d018      	beq.n	800aada <_txe_semaphore_create+0x92>
            TX_THREAD_GET_CURRENT(thread_ptr)
 800aaa8:	4a11      	ldr	r2, [pc, #68]	; (800aaf0 <_txe_semaphore_create+0xa8>)
            if (thread_ptr == &_tx_timer_thread)
 800aaaa:	4b12      	ldr	r3, [pc, #72]	; (800aaf4 <_txe_semaphore_create+0xac>)
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d016      	beq.n	800aae0 <_txe_semaphore_create+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aab2:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800aab6:	4b10      	ldr	r3, [pc, #64]	; (800aaf8 <_txe_semaphore_create+0xb0>)
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	d006      	beq.n	800aacc <_txe_semaphore_create+0x84>
 800aabe:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aaca:	d309      	bcc.n	800aae0 <_txe_semaphore_create+0x98>
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800aacc:	462a      	mov	r2, r5
 800aace:	4641      	mov	r1, r8
 800aad0:	4638      	mov	r0, r7
}
 800aad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800aad6:	f000 b9ff 	b.w	800aed8 <_tx_semaphore_create>
        status =  TX_SEMAPHORE_ERROR;
 800aada:	200c      	movs	r0, #12
}
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                status =  TX_CALLER_ERROR;
 800aae0:	2013      	movs	r0, #19
    return(status);
 800aae2:	e7fb      	b.n	800aadc <_txe_semaphore_create+0x94>
 800aae4:	20003bc4 	.word	0x20003bc4
 800aae8:	20004168 	.word	0x20004168
 800aaec:	20004178 	.word	0x20004178
 800aaf0:	20003bc8 	.word	0x20003bc8
 800aaf4:	20003c70 	.word	0x20003c70
 800aaf8:	2000006c 	.word	0x2000006c

0800aafc <_txe_semaphore_delete>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800aafc:	b180      	cbz	r0, 800ab20 <_txe_semaphore_delete+0x24>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800aafe:	6802      	ldr	r2, [r0, #0]
 800ab00:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <_txe_semaphore_delete+0x2c>)
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d10c      	bne.n	800ab20 <_txe_semaphore_delete+0x24>
 800ab06:	f3ef 8305 	mrs	r3, IPSR
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ab0a:	4a08      	ldr	r2, [pc, #32]	; (800ab2c <_txe_semaphore_delete+0x30>)
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	d108      	bne.n	800ab24 <_txe_semaphore_delete+0x28>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ab12:	4a07      	ldr	r2, [pc, #28]	; (800ab30 <_txe_semaphore_delete+0x34>)

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800ab14:	4b07      	ldr	r3, [pc, #28]	; (800ab34 <_txe_semaphore_delete+0x38>)
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d003      	beq.n	800ab24 <_txe_semaphore_delete+0x28>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800ab1c:	f000 ba06 	b.w	800af2c <_tx_semaphore_delete>
        status =  TX_SEMAPHORE_ERROR;
 800ab20:	200c      	movs	r0, #12
 800ab22:	4770      	bx	lr
            status =  TX_CALLER_ERROR;
 800ab24:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 800ab26:	4770      	bx	lr
 800ab28:	53454d41 	.word	0x53454d41
 800ab2c:	2000006c 	.word	0x2000006c
 800ab30:	20003bc8 	.word	0x20003bc8
 800ab34:	20003c70 	.word	0x20003c70

0800ab38 <_txe_semaphore_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ab38:	b188      	cbz	r0, 800ab5e <_txe_semaphore_get+0x26>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <_txe_semaphore_get+0x30>)
 800ab3c:	6802      	ldr	r2, [r0, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d10d      	bne.n	800ab5e <_txe_semaphore_get+0x26>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ab42:	b151      	cbz	r1, 800ab5a <_txe_semaphore_get+0x22>
 800ab44:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ab48:	4a08      	ldr	r2, [pc, #32]	; (800ab6c <_txe_semaphore_get+0x34>)
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	d108      	bne.n	800ab62 <_txe_semaphore_get+0x2a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ab50:	4a07      	ldr	r2, [pc, #28]	; (800ab70 <_txe_semaphore_get+0x38>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ab52:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <_txe_semaphore_get+0x3c>)
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d003      	beq.n	800ab62 <_txe_semaphore_get+0x2a>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800ab5a:	f000 ba35 	b.w	800afc8 <_tx_semaphore_get>
        status =  TX_SEMAPHORE_ERROR;
 800ab5e:	200c      	movs	r0, #12
 800ab60:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 800ab62:	2004      	movs	r0, #4
    }

    /* Return completion status.  */
    return(status);
}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	53454d41 	.word	0x53454d41
 800ab6c:	2000006c 	.word	0x2000006c
 800ab70:	20003bc8 	.word	0x20003bc8
 800ab74:	20003c70 	.word	0x20003c70

0800ab78 <_txe_semaphore_put>:

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ab78:	b118      	cbz	r0, 800ab82 <_txe_semaphore_put+0xa>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ab7a:	6802      	ldr	r2, [r0, #0]
 800ab7c:	4b03      	ldr	r3, [pc, #12]	; (800ab8c <_txe_semaphore_put+0x14>)
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d001      	beq.n	800ab86 <_txe_semaphore_put+0xe>
        status =  _tx_semaphore_put(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 800ab82:	200c      	movs	r0, #12
 800ab84:	4770      	bx	lr
        status =  _tx_semaphore_put(semaphore_ptr);
 800ab86:	f000 ba61 	b.w	800b04c <_tx_semaphore_put>
 800ab8a:	bf00      	nop
 800ab8c:	53454d41 	.word	0x53454d41

0800ab90 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	b085      	sub	sp, #20
 800ab96:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 800ab9a:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800ab9e:	9401      	str	r4, [sp, #4]
 800aba0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800aba2:	9403      	str	r4, [sp, #12]
 800aba4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800aba6:	9402      	str	r4, [sp, #8]
 800aba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800abaa:	2800      	cmp	r0, #0
 800abac:	d079      	beq.n	800aca2 <_txe_thread_create+0x112>
 800abae:	2cc8      	cmp	r4, #200	; 0xc8
 800abb0:	d177      	bne.n	800aca2 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800abb2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800abb6:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800abb8:	f8df e140 	ldr.w	lr, [pc, #320]	; 800acfc <_txe_thread_create+0x16c>
 800abbc:	f8de 4000 	ldr.w	r4, [lr]
 800abc0:	3401      	adds	r4, #1
 800abc2:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800abc6:	f385 8810 	msr	PRIMASK, r5
        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
        next_thread =  _tx_thread_created_ptr;
 800abca:	4c47      	ldr	r4, [pc, #284]	; (800ace8 <_txe_thread_create+0x158>)
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800abcc:	f108 3cff 	add.w	ip, r8, #4294967295
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800abd0:	4d46      	ldr	r5, [pc, #280]	; (800acec <_txe_thread_create+0x15c>)
        next_thread =  _tx_thread_created_ptr;
 800abd2:	6824      	ldr	r4, [r4, #0]
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800abd4:	44bc      	add	ip, r7
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800abd6:	f8d5 b000 	ldr.w	fp, [r5]
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800abda:	1b05      	subs	r5, r0, r4
 800abdc:	fab5 f585 	clz	r5, r5
 800abe0:	096d      	lsrs	r5, r5, #5
 800abe2:	f1bb 0f00 	cmp.w	fp, #0
 800abe6:	bf08      	it	eq
 800abe8:	2501      	moveq	r5, #1
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800abea:	b985      	cbnz	r5, 800ac0e <_txe_thread_create+0x7e>
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800abec:	469a      	mov	sl, r3
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800abee:	68e6      	ldr	r6, [r4, #12]
 800abf0:	42be      	cmp	r6, r7
 800abf2:	d865      	bhi.n	800acc0 <_txe_thread_create+0x130>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	42bb      	cmp	r3, r7
 800abf8:	d962      	bls.n	800acc0 <_txe_thread_create+0x130>
                    break_flag =  TX_TRUE;
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800abfa:	4566      	cmp	r6, ip
 800abfc:	d803      	bhi.n	800ac06 <_txe_thread_create+0x76>
 800abfe:	2601      	movs	r6, #1
                    stack_start =  TX_NULL;
 800ac00:	2700      	movs	r7, #0
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800ac02:	4563      	cmp	r3, ip
 800ac04:	d951      	bls.n	800acaa <_txe_thread_create+0x11a>
 800ac06:	4653      	mov	r3, sl
                    break_flag =  TX_TRUE;
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800ac08:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
                    stack_start =  TX_NULL;
 800ac0c:	2700      	movs	r7, #0
 800ac0e:	4605      	mov	r5, r0
 800ac10:	469a      	mov	sl, r3
 800ac12:	4616      	mov	r6, r2
 800ac14:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ac16:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ac1a:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ac1c:	f8de 3000 	ldr.w	r3, [lr]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ac26:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ac2a:	f7ff fc1d 	bl	800a468 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800ac2e:	42a5      	cmp	r5, r4
 800ac30:	d037      	beq.n	800aca2 <_txe_thread_create+0x112>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800ac32:	2e00      	cmp	r6, #0
 800ac34:	d04c      	beq.n	800acd0 <_txe_thread_create+0x140>
 800ac36:	2f00      	cmp	r7, #0
 800ac38:	d04a      	beq.n	800acd0 <_txe_thread_create+0x140>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800ac3a:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 800ac3e:	d945      	bls.n	800accc <_txe_thread_create+0x13c>
            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800ac40:	f1b9 0f1f 	cmp.w	r9, #31
 800ac44:	d848      	bhi.n	800acd8 <_txe_thread_create+0x148>
            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	4599      	cmp	r9, r3
 800ac4a:	d34b      	bcc.n	800ace4 <_txe_thread_create+0x154>
            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d844      	bhi.n	800acdc <_txe_thread_create+0x14c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800ac52:	4a27      	ldr	r2, [pc, #156]	; (800acf0 <_txe_thread_create+0x160>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800ac54:	4b27      	ldr	r3, [pc, #156]	; (800acf4 <_txe_thread_create+0x164>)
 800ac56:	6810      	ldr	r0, [r2, #0]
    status =  TX_SUCCESS;
 800ac58:	4298      	cmp	r0, r3
 800ac5a:	bf0c      	ite	eq
 800ac5c:	2013      	moveq	r0, #19
 800ac5e:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac60:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ac64:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <_txe_thread_create+0x168>)
 800ac66:	6819      	ldr	r1, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	d006      	beq.n	800ac7a <_txe_thread_create+0xea>
 800ac6c:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ac78:	d332      	bcc.n	800ace0 <_txe_thread_create+0x150>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ac7a:	b998      	cbnz	r0, 800aca4 <_txe_thread_create+0x114>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	4628      	mov	r0, r5
 800ac80:	9a03      	ldr	r2, [sp, #12]
 800ac82:	9901      	ldr	r1, [sp, #4]
 800ac84:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac86:	4653      	mov	r3, sl
 800ac88:	9212      	str	r2, [sp, #72]	; 0x48
 800ac8a:	4632      	mov	r2, r6
 800ac8c:	9111      	str	r1, [sp, #68]	; 0x44
 800ac8e:	4659      	mov	r1, fp
 800ac90:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800ac94:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
}
 800ac98:	b005      	add	sp, #20
 800ac9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ac9e:	f000 ba07 	b.w	800b0b0 <_tx_thread_create>
        status =  TX_THREAD_ERROR;
 800aca2:	200e      	movs	r0, #14
}
 800aca4:	b005      	add	sp, #20
 800aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            next_thread =  next_thread -> tx_thread_created_next;
 800acaa:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800acae:	3501      	adds	r5, #1
            if (break_flag == TX_TRUE)
 800acb0:	42a0      	cmp	r0, r4
 800acb2:	bf18      	it	ne
 800acb4:	455d      	cmpne	r5, fp
 800acb6:	d201      	bcs.n	800acbc <_txe_thread_create+0x12c>
 800acb8:	2e00      	cmp	r6, #0
 800acba:	d098      	beq.n	800abee <_txe_thread_create+0x5e>
 800acbc:	4653      	mov	r3, sl
 800acbe:	e7a6      	b.n	800ac0e <_txe_thread_create+0x7e>
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800acc0:	4566      	cmp	r6, ip
 800acc2:	f04f 0600 	mov.w	r6, #0
 800acc6:	d8f0      	bhi.n	800acaa <_txe_thread_create+0x11a>
 800acc8:	6923      	ldr	r3, [r4, #16]
 800acca:	e79a      	b.n	800ac02 <_txe_thread_create+0x72>
            status =  TX_SIZE_ERROR;
 800accc:	2005      	movs	r0, #5
 800acce:	e7e9      	b.n	800aca4 <_txe_thread_create+0x114>
            status =  TX_PTR_ERROR;
 800acd0:	2003      	movs	r0, #3
}
 800acd2:	b005      	add	sp, #20
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  TX_PRIORITY_ERROR;
 800acd8:	200f      	movs	r0, #15
 800acda:	e7e3      	b.n	800aca4 <_txe_thread_create+0x114>
            status =  TX_START_ERROR;
 800acdc:	2010      	movs	r0, #16
 800acde:	e7e1      	b.n	800aca4 <_txe_thread_create+0x114>
                    status =  TX_CALLER_ERROR;
 800ace0:	2013      	movs	r0, #19
    return(status);
 800ace2:	e7df      	b.n	800aca4 <_txe_thread_create+0x114>
            status =  TX_THRESH_ERROR;
 800ace4:	2018      	movs	r0, #24
 800ace6:	e7dd      	b.n	800aca4 <_txe_thread_create+0x114>
 800ace8:	20003bb4 	.word	0x20003bb4
 800acec:	20003bbc 	.word	0x20003bbc
 800acf0:	20003bc8 	.word	0x20003bc8
 800acf4:	20003c70 	.word	0x20003c70
 800acf8:	2000006c 	.word	0x2000006c
 800acfc:	20003bc4 	.word	0x20003bc4

0800ad00 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ad00:	b538      	push	{r3, r4, r5, lr}

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ad02:	f7ff fb23 	bl	800a34c <_tx_thread_initialize>

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ad06:	4d0e      	ldr	r5, [pc, #56]	; (800ad40 <_tx_initialize_high_level+0x40>)
    _tx_timer_initialize();
 800ad08:	f7ff fd54 	bl	800a7b4 <_tx_timer_initialize>
    _tx_semaphore_initialize();
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	490d      	ldr	r1, [pc, #52]	; (800ad44 <_tx_initialize_high_level+0x44>)
 800ad10:	4a0d      	ldr	r2, [pc, #52]	; (800ad48 <_tx_initialize_high_level+0x48>)
 800ad12:	600b      	str	r3, [r1, #0]
 800ad14:	6013      	str	r3, [r2, #0]
    _tx_queue_initialize();
 800ad16:	4c0d      	ldr	r4, [pc, #52]	; (800ad4c <_tx_initialize_high_level+0x4c>)

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ad18:	480d      	ldr	r0, [pc, #52]	; (800ad50 <_tx_initialize_high_level+0x50>)
 800ad1a:	490e      	ldr	r1, [pc, #56]	; (800ad54 <_tx_initialize_high_level+0x54>)

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ad1c:	4a0e      	ldr	r2, [pc, #56]	; (800ad58 <_tx_initialize_high_level+0x58>)
    _tx_queue_initialize();
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	6023      	str	r3, [r4, #0]
    _tx_event_flags_initialize();
 800ad22:	6003      	str	r3, [r0, #0]
 800ad24:	600b      	str	r3, [r1, #0]
    _tx_block_pool_initialize();
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	4d0c      	ldr	r5, [pc, #48]	; (800ad5c <_tx_initialize_high_level+0x5c>)

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800ad2a:	4c0d      	ldr	r4, [pc, #52]	; (800ad60 <_tx_initialize_high_level+0x60>)
 800ad2c:	480d      	ldr	r0, [pc, #52]	; (800ad64 <_tx_initialize_high_level+0x64>)

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ad2e:	490e      	ldr	r1, [pc, #56]	; (800ad68 <_tx_initialize_high_level+0x68>)
 800ad30:	4a0e      	ldr	r2, [pc, #56]	; (800ad6c <_tx_initialize_high_level+0x6c>)
    _tx_block_pool_initialize();
 800ad32:	602b      	str	r3, [r5, #0]
    _tx_byte_pool_initialize();
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	6003      	str	r3, [r0, #0]
    _tx_mutex_initialize();
 800ad38:	600b      	str	r3, [r1, #0]
 800ad3a:	6013      	str	r3, [r2, #0]
#endif
}
 800ad3c:	bd38      	pop	{r3, r4, r5, pc}
 800ad3e:	bf00      	nop
 800ad40:	20004184 	.word	0x20004184
 800ad44:	20004168 	.word	0x20004168
 800ad48:	20004178 	.word	0x20004178
 800ad4c:	20004164 	.word	0x20004164
 800ad50:	20004158 	.word	0x20004158
 800ad54:	2000417c 	.word	0x2000417c
 800ad58:	20004180 	.word	0x20004180
 800ad5c:	20004174 	.word	0x20004174
 800ad60:	2000416c 	.word	0x2000416c
 800ad64:	20004188 	.word	0x20004188
 800ad68:	20004160 	.word	0x20004160
 800ad6c:	2000415c 	.word	0x2000415c

0800ad70 <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800ad70:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ad72:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ad76:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800ad78:	4a1a      	ldr	r2, [pc, #104]	; (800ade4 <_tx_mutex_cleanup+0x74>)
 800ad7a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800ad7c:	4294      	cmp	r4, r2
 800ad7e:	d002      	beq.n	800ad86 <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ad80:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ad84:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ad86:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800ad8a:	428a      	cmp	r2, r1
 800ad8c:	d1f8      	bne.n	800ad80 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ad8e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	d0f5      	beq.n	800ad80 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800ad94:	4914      	ldr	r1, [pc, #80]	; (800ade8 <_tx_mutex_cleanup+0x78>)
 800ad96:	6814      	ldr	r4, [r2, #0]
 800ad98:	428c      	cmp	r4, r1
 800ad9a:	d1f1      	bne.n	800ad80 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800ad9c:	69d1      	ldr	r1, [r2, #28]
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d0ee      	beq.n	800ad80 <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 800ada2:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ada4:	2400      	movs	r4, #0
 800ada6:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 800ada8:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800adaa:	b1c1      	cbz	r1, 800adde <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800adac:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800adae:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800adb2:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800adb4:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800adb6:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800adb8:	d011      	beq.n	800adde <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800adba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800adbc:	2a0d      	cmp	r2, #13
 800adbe:	d1df      	bne.n	800ad80 <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800adc0:	490a      	ldr	r1, [pc, #40]	; (800adec <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800adc2:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 800adc4:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800adc6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800adca:	3201      	adds	r2, #1
 800adcc:	600a      	str	r2, [r1, #0]
 800adce:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800add2:	f7ff fb67 	bl	800a4a4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800add6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800adda:	b672      	cpsid	i
 800addc:	e7d0      	b.n	800ad80 <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800adde:	6191      	str	r1, [r2, #24]
 800ade0:	e7eb      	b.n	800adba <_tx_mutex_cleanup+0x4a>
 800ade2:	bf00      	nop
 800ade4:	0800ad71 	.word	0x0800ad71
 800ade8:	4d555445 	.word	0x4d555445
 800adec:	20003bc4 	.word	0x20003bc4

0800adf0 <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800adf4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800adf8:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800adfa:	4d0d      	ldr	r5, [pc, #52]	; (800ae30 <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800adfc:	2601      	movs	r6, #1
 800adfe:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 800ae02:	682a      	ldr	r2, [r5, #0]
 800ae04:	4432      	add	r2, r6
 800ae06:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 800ae08:	b158      	cbz	r0, 800ae22 <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800ae0a:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae0c:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800ae10:	f7ff f988 	bl	800a124 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ae14:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ae18:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800ae1a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d1f2      	bne.n	800ae08 <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800ae22:	682a      	ldr	r2, [r5, #0]
 800ae24:	3a01      	subs	r2, #1
 800ae26:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae28:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 800ae2c:	bd70      	pop	{r4, r5, r6, pc}
 800ae2e:	bf00      	nop
 800ae30:	20003bc4 	.word	0x20003bc4

0800ae34 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ae36:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ae3a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800ae3c:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800ae3e:	2f01      	cmp	r7, #1
 800ae40:	d92a      	bls.n	800ae98 <_tx_mutex_prioritize+0x64>
 800ae42:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800ae44:	2f02      	cmp	r7, #2
 800ae46:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ae48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ae4a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800ae4c:	d021      	beq.n	800ae92 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800ae4e:	f8df c084 	ldr.w	ip, [pc, #132]	; 800aed4 <_tx_mutex_prioritize+0xa0>
 800ae52:	4616      	mov	r6, r2
 800ae54:	f8dc e000 	ldr.w	lr, [ip]
 800ae58:	f10e 0e01 	add.w	lr, lr, #1
 800ae5c:	f8cc e000 	str.w	lr, [ip]
 800ae60:	e007      	b.n	800ae72 <_tx_mutex_prioritize+0x3e>
 800ae62:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800ae64:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ae66:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	461e      	mov	r6, r3
 800ae6c:	d018      	beq.n	800aea0 <_tx_mutex_prioritize+0x6c>
 800ae6e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800ae70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ae72:	42ab      	cmp	r3, r5
 800ae74:	bf88      	it	hi
 800ae76:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae78:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ae7c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ae80:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800ae82:	6983      	ldr	r3, [r0, #24]
 800ae84:	42b3      	cmp	r3, r6
 800ae86:	d1ec      	bne.n	800ae62 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800ae88:	69c5      	ldr	r5, [r0, #28]
 800ae8a:	42bd      	cmp	r5, r7
 800ae8c:	d020      	beq.n	800aed0 <_tx_mutex_prioritize+0x9c>
 800ae8e:	462f      	mov	r7, r5
 800ae90:	e7e8      	b.n	800ae64 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800ae92:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800ae94:	bf38      	it	cc
 800ae96:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae98:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 800aea0:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 800aea4:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 800aea6:	f101 31ff 	add.w	r1, r1, #4294967295
 800aeaa:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 800aeae:	d009      	beq.n	800aec4 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800aeb0:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800aeb4:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800aeb6:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800aeb8:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800aeba:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800aebe:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800aec0:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800aec2:	6182      	str	r2, [r0, #24]
 800aec4:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 800aec8:	f7ff face 	bl	800a468 <_tx_thread_system_preempt_check>
}
 800aecc:	2000      	movs	r0, #0
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800aed0:	6f09      	ldr	r1, [r1, #112]	; 0x70
 800aed2:	e7c9      	b.n	800ae68 <_tx_mutex_prioritize+0x34>
 800aed4:	20003bc4 	.word	0x20003bc4

0800aed8 <_tx_semaphore_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	460d      	mov	r5, r1
 800aedc:	4614      	mov	r4, r2
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800aede:	2100      	movs	r1, #0
 800aee0:	2220      	movs	r2, #32
 800aee2:	f000 fa88 	bl	800b3f6 <memset>
 800aee6:	4603      	mov	r3, r0

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800aee8:	e9c0 5401 	strd	r5, r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aeec:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aef0:	b672      	cpsid	i
    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800aef2:	490b      	ldr	r1, [pc, #44]	; (800af20 <_tx_semaphore_create+0x48>)
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800aef4:	480b      	ldr	r0, [pc, #44]	; (800af24 <_tx_semaphore_create+0x4c>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 800aef6:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800aef8:	6018      	str	r0, [r3, #0]
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800aefa:	480b      	ldr	r0, [pc, #44]	; (800af28 <_tx_semaphore_create+0x50>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 800aefc:	b15a      	cbz	r2, 800af16 <_tx_semaphore_create+0x3e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800aefe:	6800      	ldr	r0, [r0, #0]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800af00:	6985      	ldr	r5, [r0, #24]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800af02:	6183      	str	r3, [r0, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800af04:	616b      	str	r3, [r5, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800af06:	e9c3 0505 	strd	r0, r5, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800af0a:	3201      	adds	r2, #1
 800af0c:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af0e:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800af12:	2000      	movs	r0, #0
 800af14:	bd38      	pop	{r3, r4, r5, pc}
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800af16:	e9c3 3305 	strd	r3, r3, [r3, #20]
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800af1a:	6003      	str	r3, [r0, #0]
 800af1c:	e7f5      	b.n	800af0a <_tx_semaphore_create+0x32>
 800af1e:	bf00      	nop
 800af20:	20004178 	.word	0x20004178
 800af24:	53454d41 	.word	0x53454d41
 800af28:	20004168 	.word	0x20004168

0800af2c <_tx_semaphore_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800af2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af30:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af32:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af36:	b672      	cpsid	i

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800af38:	4920      	ldr	r1, [pc, #128]	; (800afbc <_tx_semaphore_delete+0x90>)
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800af3a:	2000      	movs	r0, #0
    _tx_semaphore_created_count--;
 800af3c:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800af3e:	6018      	str	r0, [r3, #0]
    _tx_semaphore_created_count--;
 800af40:	3a01      	subs	r2, #1
 800af42:	600a      	str	r2, [r1, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800af44:	2a00      	cmp	r2, #0
 800af46:	d12e      	bne.n	800afa6 <_tx_semaphore_delete+0x7a>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800af48:	491d      	ldr	r1, [pc, #116]	; (800afc0 <_tx_semaphore_delete+0x94>)
 800af4a:	600a      	str	r2, [r1, #0]
            _tx_semaphore_created_ptr =  next_semaphore;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800af4c:	4d1d      	ldr	r5, [pc, #116]	; (800afc4 <_tx_semaphore_delete+0x98>)

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800af4e:	2700      	movs	r7, #0
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800af50:	68d8      	ldr	r0, [r3, #12]
    _tx_thread_preempt_disable++;
 800af52:	682a      	ldr	r2, [r5, #0]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800af54:	691c      	ldr	r4, [r3, #16]
    _tx_thread_preempt_disable++;
 800af56:	3201      	adds	r2, #1
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800af58:	60df      	str	r7, [r3, #12]
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800af5a:	611f      	str	r7, [r3, #16]
    _tx_thread_preempt_disable++;
 800af5c:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af5e:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800af62:	b19c      	cbz	r4, 800af8c <_tx_semaphore_delete+0x60>
        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800af64:	f04f 0801 	mov.w	r8, #1
        suspended_count--;
 800af68:	3c01      	subs	r4, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af6a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af6e:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800af70:	682b      	ldr	r3, [r5, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800af72:	6687      	str	r7, [r0, #104]	; 0x68
        _tx_thread_preempt_disable++;
 800af74:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800af76:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800af7a:	6f06      	ldr	r6, [r0, #112]	; 0x70
        _tx_thread_preempt_disable++;
 800af7c:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af7e:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800af82:	f7ff fa8f 	bl	800a4a4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800af86:	4630      	mov	r0, r6
    while (suspended_count != TX_NO_SUSPENSIONS)
 800af88:	2c00      	cmp	r4, #0
 800af8a:	d1ed      	bne.n	800af68 <_tx_semaphore_delete+0x3c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af8c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af90:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800af92:	682b      	ldr	r3, [r5, #0]
 800af94:	3b01      	subs	r3, #1
 800af96:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af98:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800af9c:	f7ff fa64 	bl	800a468 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800afa0:	2000      	movs	r0, #0
 800afa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800afa6:	4806      	ldr	r0, [pc, #24]	; (800afc0 <_tx_semaphore_delete+0x94>)
 800afa8:	6804      	ldr	r4, [r0, #0]
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800afaa:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800afae:	429c      	cmp	r4, r3
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800afb0:	6191      	str	r1, [r2, #24]
            _tx_semaphore_created_ptr =  next_semaphore;
 800afb2:	bf08      	it	eq
 800afb4:	6002      	streq	r2, [r0, #0]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800afb6:	614a      	str	r2, [r1, #20]
 800afb8:	e7c8      	b.n	800af4c <_tx_semaphore_delete+0x20>
 800afba:	bf00      	nop
 800afbc:	20004178 	.word	0x20004178
 800afc0:	20004168 	.word	0x20004168
 800afc4:	20003bc4 	.word	0x20003bc4

0800afc8 <_tx_semaphore_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800afca:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800afce:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800afd0:	6883      	ldr	r3, [r0, #8]
 800afd2:	bb5b      	cbnz	r3, 800b02c <_tx_semaphore_get+0x64>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800afd4:	b331      	cbz	r1, 800b024 <_tx_semaphore_get+0x5c>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800afd6:	4d1a      	ldr	r5, [pc, #104]	; (800b040 <_tx_semaphore_get+0x78>)
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	bb1b      	cbnz	r3, 800b024 <_tx_semaphore_get+0x5c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800afdc:	4b19      	ldr	r3, [pc, #100]	; (800b044 <_tx_semaphore_get+0x7c>)

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800afde:	4f1a      	ldr	r7, [pc, #104]	; (800b048 <_tx_semaphore_get+0x80>)
            TX_THREAD_GET_CURRENT(thread_ptr)
 800afe0:	681c      	ldr	r4, [r3, #0]
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800afe2:	6903      	ldr	r3, [r0, #16]
            thread_ptr -> tx_thread_suspension_sequence++;
 800afe4:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800afe8:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 800afea:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800afec:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspension_sequence++;
 800afee:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800aff2:	b30b      	cbz	r3, 800b038 <_tx_semaphore_get+0x70>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800aff4:	68c6      	ldr	r6, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800aff6:	6f77      	ldr	r7, [r6, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800aff8:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800affc:	673c      	str	r4, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800affe:	6774      	str	r4, [r6, #116]	; 0x74

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b000:	682e      	ldr	r6, [r5, #0]
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800b002:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800b004:	2706      	movs	r7, #6
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800b006:	6103      	str	r3, [r0, #16]
            _tx_thread_preempt_disable++;
 800b008:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b00a:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b00c:	64e1      	str	r1, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 800b00e:	602e      	str	r6, [r5, #0]
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800b010:	6327      	str	r7, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b012:	63a3      	str	r3, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b014:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b018:	4620      	mov	r0, r4
 800b01a:	f7ff fac9 	bl	800a5b0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b01e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status =  TX_NO_INSTANCE;
    }

    /* Return completion status.  */
    return(status);
}
 800b022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b024:	f382 8810 	msr	PRIMASK, r2
        status =  TX_NO_INSTANCE;
 800b028:	200d      	movs	r0, #13
}
 800b02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        semaphore_ptr -> tx_semaphore_count--;
 800b02c:	3b01      	subs	r3, #1
 800b02e:	6083      	str	r3, [r0, #8]
 800b030:	f382 8810 	msr	PRIMASK, r2
    status =  TX_SUCCESS;
 800b034:	2000      	movs	r0, #0
}
 800b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800b038:	60c4      	str	r4, [r0, #12]
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800b03a:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 800b03e:	e7df      	b.n	800b000 <_tx_semaphore_get+0x38>
 800b040:	20003bc4 	.word	0x20003bc4
 800b044:	20003bc8 	.word	0x20003bc8
 800b048:	0800b319 	.word	0x0800b319

0800b04c <_tx_semaphore_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b050:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b054:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b056:	6903      	ldr	r3, [r0, #16]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800b058:	b94b      	cbnz	r3, 800b06e <_tx_semaphore_put+0x22>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800b05a:	6883      	ldr	r3, [r0, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 800b05c:	69c1      	ldr	r1, [r0, #28]
        semaphore_ptr -> tx_semaphore_count++;
 800b05e:	3301      	adds	r3, #1
 800b060:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b062:	f382 8810 	msr	PRIMASK, r2
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 800b066:	b101      	cbz	r1, 800b06a <_tx_semaphore_put+0x1e>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 800b068:	4788      	blx	r1
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
}
 800b06a:	2000      	movs	r0, #0
 800b06c:	bd70      	pop	{r4, r5, r6, pc}
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b06e:	3b01      	subs	r3, #1
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800b070:	68c0      	ldr	r0, [r0, #12]
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b072:	d018      	beq.n	800b0a6 <_tx_semaphore_put+0x5a>
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b074:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b078:	60e1      	str	r1, [r4, #12]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b07a:	674d      	str	r5, [r1, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b07c:	6729      	str	r1, [r5, #112]	; 0x70
        _tx_thread_preempt_disable++;
 800b07e:	490b      	ldr	r1, [pc, #44]	; (800b0ac <_tx_semaphore_put+0x60>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b080:	2500      	movs	r5, #0
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800b082:	6123      	str	r3, [r4, #16]
        _tx_thread_preempt_disable++;
 800b084:	680b      	ldr	r3, [r1, #0]
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 800b086:	69e6      	ldr	r6, [r4, #28]
        _tx_thread_preempt_disable++;
 800b088:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b08a:	6685      	str	r5, [r0, #104]	; 0x68
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b08c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
        _tx_thread_preempt_disable++;
 800b090:	600b      	str	r3, [r1, #0]
 800b092:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800b096:	f7ff fa05 	bl	800a4a4 <_tx_thread_system_resume>
        if (semaphore_put_notify != TX_NULL)
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	d0e5      	beq.n	800b06a <_tx_semaphore_put+0x1e>
            (semaphore_put_notify)(semaphore_ptr);
 800b09e:	4620      	mov	r0, r4
 800b0a0:	47b0      	blx	r6
}
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b0a6:	60e3      	str	r3, [r4, #12]
 800b0a8:	e7e9      	b.n	800b07e <_tx_semaphore_put+0x32>
 800b0aa:	bf00      	nop
 800b0ac:	20003bc4 	.word	0x20003bc4

0800b0b0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b0b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b0ba:	468b      	mov	fp, r1
 800b0bc:	4692      	mov	sl, r2
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b0be:	4630      	mov	r0, r6
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	21ef      	movs	r1, #239	; 0xef
{
 800b0c4:	4698      	mov	r8, r3
 800b0c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b0ca:	f000 f994 	bl	800b3f6 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	22c8      	movs	r2, #200	; 0xc8
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	f000 f98f 	bl	800b3f6 <memset>
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
    thread_ptr -> tx_thread_stack_start =       stack_start;
    thread_ptr -> tx_thread_stack_size =        stack_size;
    thread_ptr -> tx_thread_priority =          priority;
    thread_ptr -> tx_thread_user_priority =     priority;
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b0da:	1e6a      	subs	r2, r5, #1
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b0dc:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b0e0:	2103      	movs	r1, #3

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b0e2:	4f36      	ldr	r7, [pc, #216]	; (800b1bc <_tx_thread_create+0x10c>)
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b0e4:	4432      	add	r2, r6
    thread_ptr -> tx_thread_name =              name_ptr;
 800b0e6:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b0ea:	6321      	str	r1, [r4, #48]	; 0x30
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b0ec:	4620      	mov	r0, r4
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b0ee:	60e6      	str	r6, [r4, #12]
    thread_ptr -> tx_thread_priority =          priority;
 800b0f0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b0f4:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b0f8:	65a4      	str	r4, [r4, #88]	; 0x58
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b0fa:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b0fe:	6567      	str	r7, [r4, #84]	; 0x54
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b100:	492f      	ldr	r1, [pc, #188]	; (800b1c0 <_tx_thread_create+0x110>)
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b102:	e9c4 3306 	strd	r3, r3, [r4, #24]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800b106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b108:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b10c:	e9c4 2504 	strd	r2, r5, [r4, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800b110:	63e3      	str	r3, [r4, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 800b112:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b116:	f7f5 f983 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b11a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b11e:	b672      	cpsid	i
    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b120:	4828      	ldr	r0, [pc, #160]	; (800b1c4 <_tx_thread_create+0x114>)
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b122:	4a29      	ldr	r2, [pc, #164]	; (800b1c8 <_tx_thread_create+0x118>)
    if (_tx_thread_created_count == TX_EMPTY)
 800b124:	6803      	ldr	r3, [r0, #0]
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b126:	6022      	str	r2, [r4, #0]
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b128:	4a28      	ldr	r2, [pc, #160]	; (800b1cc <_tx_thread_create+0x11c>)
    if (_tx_thread_created_count == TX_EMPTY)
 800b12a:	b9db      	cbnz	r3, 800b164 <_tx_thread_create+0xb4>
        _tx_thread_created_ptr =                    thread_ptr;
 800b12c:	6014      	str	r4, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b12e:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b132:	4927      	ldr	r1, [pc, #156]	; (800b1d0 <_tx_thread_create+0x120>)
    _tx_thread_created_count++;
 800b134:	3301      	adds	r3, #1
    _tx_thread_preempt_disable++;
 800b136:	680a      	ldr	r2, [r1, #0]
    _tx_thread_created_count++;
 800b138:	6003      	str	r3, [r0, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    _tx_thread_preempt_disable++;
 800b13c:	3201      	adds	r2, #1
    if (auto_start == TX_AUTO_START)
 800b13e:	2b01      	cmp	r3, #1
    _tx_thread_preempt_disable++;
 800b140:	600a      	str	r2, [r1, #0]
    if (auto_start == TX_AUTO_START)
 800b142:	d12a      	bne.n	800b19a <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b144:	f3ef 8205 	mrs	r2, IPSR
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b148:	4b22      	ldr	r3, [pc, #136]	; (800b1d4 <_tx_thread_create+0x124>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b152:	d211      	bcs.n	800b178 <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b154:	f385 8810 	msr	PRIMASK, r5

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800b158:	4620      	mov	r0, r4
 800b15a:	f7ff f9a3 	bl	800a4a4 <_tx_thread_system_resume>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
}
 800b15e:	2000      	movs	r0, #0
 800b160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        next_thread =  _tx_thread_created_ptr;
 800b164:	6812      	ldr	r2, [r2, #0]
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b166:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b16a:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b16e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b172:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 800b176:	e7dc      	b.n	800b132 <_tx_thread_create+0x82>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b178:	4b17      	ldr	r3, [pc, #92]	; (800b1d8 <_tx_thread_create+0x128>)
 800b17a:	681e      	ldr	r6, [r3, #0]
            if (saved_thread_ptr != TX_NULL)
 800b17c:	b1e6      	cbz	r6, 800b1b8 <_tx_thread_create+0x108>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b17e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b180:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b182:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b184:	f385 8810 	msr	PRIMASK, r5
        _tx_thread_system_resume(thread_ptr);
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff f98b 	bl	800a4a4 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 800b18e:	2e00      	cmp	r6, #0
 800b190:	d0e5      	beq.n	800b15e <_tx_thread_create+0xae>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800b192:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 800b194:	2000      	movs	r0, #0
 800b196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b19e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b1a2:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 800b1a4:	680b      	ldr	r3, [r1, #0]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b1aa:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 800b1ae:	f7ff f95b 	bl	800a468 <_tx_thread_system_preempt_check>
}
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
UINT                    saved_threshold =  ((UINT) 0);
 800b1b8:	4637      	mov	r7, r6
 800b1ba:	e7e3      	b.n	800b184 <_tx_thread_create+0xd4>
 800b1bc:	0800b2b9 	.word	0x0800b2b9
 800b1c0:	0800b1dd 	.word	0x0800b1dd
 800b1c4:	20003bbc 	.word	0x20003bbc
 800b1c8:	54485244 	.word	0x54485244
 800b1cc:	20003bb4 	.word	0x20003bb4
 800b1d0:	20003bc4 	.word	0x20003bc4
 800b1d4:	2000006c 	.word	0x2000006c
 800b1d8:	20003bcc 	.word	0x20003bcc

0800b1dc <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b1dc:	4b16      	ldr	r3, [pc, #88]	; (800b238 <_tx_thread_shell_entry+0x5c>)
{
 800b1de:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b1e0:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b1e2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b1e6:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800b1e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b1ec:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800b1f0:	b113      	cbz	r3, 800b1f8 <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800b1f8:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 800b1fc:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <_tx_thread_shell_entry+0x60>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	b10b      	cbz	r3, 800b208 <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800b204:	4620      	mov	r0, r4
 800b206:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b208:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b20c:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b20e:	4a0c      	ldr	r2, [pc, #48]	; (800b240 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b210:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b212:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800b214:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 800b218:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b21a:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 800b21c:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b21e:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b220:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 800b222:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b224:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800b228:	b10d      	cbz	r5, 800b22e <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800b22a:	4620      	mov	r0, r4
 800b22c:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b22e:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 800b234:	f7ff b9bc 	b.w	800a5b0 <_tx_thread_system_suspend>
 800b238:	20003bc8 	.word	0x20003bc8
 800b23c:	20003bac 	.word	0x20003bac
 800b240:	20003bc4 	.word	0x20003bc4

0800b244 <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b244:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <_tx_thread_time_slice+0x5c>)
 800b246:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b248:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b24c:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b24e:	4915      	ldr	r1, [pc, #84]	; (800b2a4 <_tx_thread_time_slice+0x60>)
 800b250:	2000      	movs	r0, #0
 800b252:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b254:	b193      	cbz	r3, 800b27c <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b258:	b981      	cbnz	r1, 800b27c <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b25a:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b25c:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b25e:	4298      	cmp	r0, r3
{
 800b260:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b262:	4c11      	ldr	r4, [pc, #68]	; (800b2a8 <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b264:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b266:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b268:	d003      	beq.n	800b272 <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b26a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26e:	4299      	cmp	r1, r3
 800b270:	d007      	beq.n	800b282 <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b272:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	f382 8810 	msr	PRIMASK, r2
 800b280:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b282:	4c0a      	ldr	r4, [pc, #40]	; (800b2ac <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b284:	4b0a      	ldr	r3, [pc, #40]	; (800b2b0 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b286:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b288:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b28c:	4909      	ldr	r1, [pc, #36]	; (800b2b4 <_tx_thread_time_slice+0x70>)
 800b28e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b292:	600b      	str	r3, [r1, #0]
 800b294:	f382 8810 	msr	PRIMASK, r2
}
 800b298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20003bc8 	.word	0x20003bc8
 800b2a4:	20004150 	.word	0x20004150
 800b2a8:	20003c60 	.word	0x20003c60
 800b2ac:	20003bd0 	.word	0x20003bd0
 800b2b0:	20003b2c 	.word	0x20003b2c
 800b2b4:	20003bcc 	.word	0x20003bcc

0800b2b8 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b2b8:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b2ba:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b2be:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b2c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b2c2:	2a04      	cmp	r2, #4
 800b2c4:	d008      	beq.n	800b2d8 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b2c6:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b2c8:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b2cc:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 800b2d0:	b162      	cbz	r2, 800b2ec <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b2d6:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 800b2d8:	4a06      	ldr	r2, [pc, #24]	; (800b2f4 <_tx_thread_timeout+0x3c>)
 800b2da:	6813      	ldr	r3, [r2, #0]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	f384 8810 	msr	PRIMASK, r4
}
 800b2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 800b2e8:	f7ff b8dc 	b.w	800a4a4 <_tx_thread_system_resume>
}
 800b2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20003bc4 	.word	0x20003bc4

0800b2f8 <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b2f8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b2fc:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b2fe:	4a04      	ldr	r2, [pc, #16]	; (800b310 <_tx_timer_expiration_process+0x18>)
 800b300:	6813      	ldr	r3, [r2, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b306:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b30a:	4802      	ldr	r0, [pc, #8]	; (800b314 <_tx_timer_expiration_process+0x1c>)
 800b30c:	f7ff b8ca 	b.w	800a4a4 <_tx_thread_system_resume>
 800b310:	20003bc4 	.word	0x20003bc4
 800b314:	20003c70 	.word	0x20003c70

0800b318 <_tx_semaphore_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b318:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b31a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b31e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b320:	4a1a      	ldr	r2, [pc, #104]	; (800b38c <_tx_semaphore_cleanup+0x74>)
 800b322:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800b324:	4294      	cmp	r4, r2
 800b326:	d002      	beq.n	800b32e <_tx_semaphore_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b328:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b32c:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b32e:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800b332:	428a      	cmp	r2, r1
 800b334:	d1f8      	bne.n	800b328 <_tx_semaphore_cleanup+0x10>
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b336:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (semaphore_ptr != TX_NULL)
 800b338:	2a00      	cmp	r2, #0
 800b33a:	d0f5      	beq.n	800b328 <_tx_semaphore_cleanup+0x10>
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b33c:	4914      	ldr	r1, [pc, #80]	; (800b390 <_tx_semaphore_cleanup+0x78>)
 800b33e:	6814      	ldr	r4, [r2, #0]
 800b340:	428c      	cmp	r4, r1
 800b342:	d1f1      	bne.n	800b328 <_tx_semaphore_cleanup+0x10>
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b344:	6911      	ldr	r1, [r2, #16]
 800b346:	2900      	cmp	r1, #0
 800b348:	d0ee      	beq.n	800b328 <_tx_semaphore_cleanup+0x10>
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b34a:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b34c:	2400      	movs	r4, #0
 800b34e:	6684      	str	r4, [r0, #104]	; 0x68
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b350:	6111      	str	r1, [r2, #16]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b352:	b1c1      	cbz	r1, 800b386 <_tx_semaphore_cleanup+0x6e>
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b354:	68d5      	ldr	r5, [r2, #12]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b356:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b35a:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b35c:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b35e:	6721      	str	r1, [r4, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b360:	d011      	beq.n	800b386 <_tx_semaphore_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b362:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b364:	2a06      	cmp	r2, #6
 800b366:	d1df      	bne.n	800b328 <_tx_semaphore_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800b368:	490a      	ldr	r1, [pc, #40]	; (800b394 <_tx_semaphore_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b36a:	240d      	movs	r4, #13
                            _tx_thread_preempt_disable++;
 800b36c:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b36e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800b372:	3201      	adds	r2, #1
 800b374:	600a      	str	r2, [r1, #0]
 800b376:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800b37a:	f7ff f893 	bl	800a4a4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b37e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b382:	b672      	cpsid	i
 800b384:	e7d0      	b.n	800b328 <_tx_semaphore_cleanup+0x10>
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b386:	60d1      	str	r1, [r2, #12]
 800b388:	e7eb      	b.n	800b362 <_tx_semaphore_cleanup+0x4a>
 800b38a:	bf00      	nop
 800b38c:	0800b319 	.word	0x0800b319
 800b390:	53454d41 	.word	0x53454d41
 800b394:	20003bc4 	.word	0x20003bc4

0800b398 <__libc_init_array>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	4e0d      	ldr	r6, [pc, #52]	; (800b3d0 <__libc_init_array+0x38>)
 800b39c:	4c0d      	ldr	r4, [pc, #52]	; (800b3d4 <__libc_init_array+0x3c>)
 800b39e:	1ba4      	subs	r4, r4, r6
 800b3a0:	10a4      	asrs	r4, r4, #2
 800b3a2:	2500      	movs	r5, #0
 800b3a4:	42a5      	cmp	r5, r4
 800b3a6:	d109      	bne.n	800b3bc <__libc_init_array+0x24>
 800b3a8:	4e0b      	ldr	r6, [pc, #44]	; (800b3d8 <__libc_init_array+0x40>)
 800b3aa:	4c0c      	ldr	r4, [pc, #48]	; (800b3dc <__libc_init_array+0x44>)
 800b3ac:	f000 f82c 	bl	800b408 <_init>
 800b3b0:	1ba4      	subs	r4, r4, r6
 800b3b2:	10a4      	asrs	r4, r4, #2
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	42a5      	cmp	r5, r4
 800b3b8:	d105      	bne.n	800b3c6 <__libc_init_array+0x2e>
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3c0:	4798      	blx	r3
 800b3c2:	3501      	adds	r5, #1
 800b3c4:	e7ee      	b.n	800b3a4 <__libc_init_array+0xc>
 800b3c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3ca:	4798      	blx	r3
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	e7f2      	b.n	800b3b6 <__libc_init_array+0x1e>
 800b3d0:	0800b4f8 	.word	0x0800b4f8
 800b3d4:	0800b4f8 	.word	0x0800b4f8
 800b3d8:	0800b4f8 	.word	0x0800b4f8
 800b3dc:	0800b4fc 	.word	0x0800b4fc

0800b3e0 <memcpy>:
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	1e43      	subs	r3, r0, #1
 800b3e4:	440a      	add	r2, r1
 800b3e6:	4291      	cmp	r1, r2
 800b3e8:	d100      	bne.n	800b3ec <memcpy+0xc>
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3f4:	e7f7      	b.n	800b3e6 <memcpy+0x6>

0800b3f6 <memset>:
 800b3f6:	4402      	add	r2, r0
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d100      	bne.n	800b400 <memset+0xa>
 800b3fe:	4770      	bx	lr
 800b400:	f803 1b01 	strb.w	r1, [r3], #1
 800b404:	e7f9      	b.n	800b3fa <memset+0x4>
	...

0800b408 <_init>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	bf00      	nop
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr

0800b414 <_fini>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr
