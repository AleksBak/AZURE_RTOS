
sample_usbx_device_cdc_acm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008404  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088cc  080088cc  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088d4  080088d4  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  080088dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  200001c0  200001c0  000201c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  20000b00  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010b7cc  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00013ef7  00000000  00000000  0012b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc8  00000000  00000000  0013f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002628  00000000  00000000  00141680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000441a9  00000000  00000000  00143ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000436fb  00000000  00000000  00187e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013da36  00000000  00000000  001cb54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00308f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  00309000  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00015b62  00000000  00000000  0030dac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         00000084  00000000  00000000  0032362c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000117  00000000  00000000  003236b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085bc 	.word	0x080085bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	080085bc 	.word	0x080085bc

08000210 <OTG_HS_IRQHandler>:
.thumb_func
OTG_HS_IRQHandler:
@ VOID UsbInterruptHandler (VOID)
@ {
@
        PUSH    {lr}
 8000210:	b500      	push	{lr}
        BL      _ux_dcd_stm32_interrupt_handler
 8000212:	f002 ff89 	bl	8003128 <_ux_dcd_stm32_interrupt_handler>
        POP     {lr}
 8000216:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OTG_FS_IRQHandler>:
.thumb_func
OTG_FS_IRQHandler:
@ VOID UsbInterruptHandler (VOID)
@ {
@
        PUSH    {lr}
 800021c:	b500      	push	{lr}
        BL      _ux_dcd_stm32_interrupt_handler
 800021e:	f002 ff83 	bl	8003128 <_ux_dcd_stm32_interrupt_handler>
        POP     {lr}
 8000222:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 8000226:	4770      	bx	lr
	...

08000230 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000230:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000232:	481d      	ldr	r0, [pc, #116]	; (80002a8 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000236:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800023a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000240:	491b      	ldr	r1, [pc, #108]	; (80002b0 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000242:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000246:	481b      	ldr	r0, [pc, #108]	; (80002b4 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000248:	4919      	ldr	r1, [pc, #100]	; (80002b0 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800024a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800024c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800024e:	481a      	ldr	r0, [pc, #104]	; (80002b8 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000250:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000252:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000256:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000258:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800025c:	4917      	ldr	r1, [pc, #92]	; (80002bc <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800025e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000260:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000264:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000266:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800026a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800026e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000272:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000278:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800027c:	4770      	bx	lr

0800027e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800027e:	f7ff bffe 	b.w	800027e <__tx_BadHandler>

08000282 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000282:	f7ff bffe 	b.w	8000282 <__tx_HardfaultHandler>

08000286 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000286:	f7ff bffe 	b.w	8000286 <__tx_SVCallHandler>

0800028a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800028a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800028c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000290:	4770      	bx	lr

08000292 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000292:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000294:	f000 f86c 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000298:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800029c:	4770      	bx	lr

0800029e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800029e:	f7ff bffe 	b.w	800029e <__tx_NMIHandler>

080002a2 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002a2:	f7ff bffe 	b.w	80002a2 <__tx_DBGHandler>
 80002a6:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80002a8:	20000ae0 	.word	0x20000ae0
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 80002ac:	20001100 	.word	0x20001100
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 80002b0:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002b4:	2000052c 	.word	0x2000052c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002b8:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002bc:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002c0:	40ff0000 	.word	0x40ff0000
	...

080002d0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002d0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002d4:	4a22      	ldr	r2, [pc, #136]	; (8000360 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002d6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002d8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002e2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002e6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002ea:	f3bf 8f6f 	isb	sy

080002ee <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002ee:	e7fe      	b.n	80002ee <__tx_wait_here>

080002f0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002f0:	481c      	ldr	r0, [pc, #112]	; (8000364 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002f4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002f8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002fa:	b169      	cbz	r1, 8000318 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002fc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002fe:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 8000302:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000306:	4c19      	ldr	r4, [pc, #100]	; (800036c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 8000308:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 800030c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 800030e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 8000312:	b10d      	cbz	r5, 8000318 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 8000314:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 8000316:	6023      	str	r3, [r4, #0]

08000318 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 8000318:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 800031a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 800031c:	b189      	cbz	r1, 8000342 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 800031e:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000320:	b662      	cpsie	i

08000322 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000322:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000324:	4c11      	ldr	r4, [pc, #68]	; (800036c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000326:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000328:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800032c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800032e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000330:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000334:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000338:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800033c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000340:	4770      	bx	lr

08000342 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000342:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000344:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000346:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000348:	b909      	cbnz	r1, 800034e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800034a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800034c:	e7f9      	b.n	8000342 <__tx_ts_wait>

0800034e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800034e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000352:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000356:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800035a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800035c:	e7e1      	b.n	8000322 <__tx_ts_restore>
 800035e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000360:	20000530 	.word	0x20000530
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000364:	20000534 	.word	0x20000534
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000368:	20000538 	.word	0x20000538
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800036c:	200005d0 	.word	0x200005d0

08000370 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000370:	4926      	ldr	r1, [pc, #152]	; (800040c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 8000378:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 800037e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 8000380:	d008      	beq.n	8000394 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 8000382:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 8000386:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 8000388:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 800038a:	d103      	bne.n	8000394 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 800038e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 8000392:	6018      	str	r0, [r3, #0]

08000394 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000394:	4920      	ldr	r1, [pc, #128]	; (8000418 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 8000396:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 8000398:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 800039a:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 800039c:	d004      	beq.n	80003a8 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 80003a0:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80003a4:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80003a6:	e008      	b.n	80003ba <__tx_timer_done>

080003a8 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 80003a8:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80003ae:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80003b0:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80003b2:	d101      	bne.n	80003b8 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80003b6:	6818      	ldr	r0, [r3, #0]

080003b8 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80003b8:	6008      	str	r0, [r1, #0]

080003ba <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80003bc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80003be:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80003c0:	d103      	bne.n	80003ca <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80003c2:	4916      	ldr	r1, [pc, #88]	; (800041c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003c4:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80003c6:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80003c8:	d01c      	beq.n	8000404 <__tx_timer_nothing_expired>

080003ca <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 80003ca:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 80003ce:	4913      	ldr	r1, [pc, #76]	; (800041c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003d0:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 80003d2:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 80003d4:	d001      	beq.n	80003da <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 80003d6:	f006 ffe9 	bl	80073ac <_tx_timer_expiration_process>

080003da <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 80003dc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 80003de:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 80003e0:	d00e      	beq.n	8000400 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 80003e2:	f006 ff89 	bl	80072f8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80003e6:	4810      	ldr	r0, [pc, #64]	; (8000428 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 80003e8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 80003ea:	b949      	cbnz	r1, 8000400 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80003ec:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 80003ee:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 80003f2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 80003f4:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 80003f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 80003fa:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 80003fc:	d000      	beq.n	8000400 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 80003fe:	6002      	str	r2, [r0, #0]

08000400 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 8000400:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000404 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000404:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 8000408:	4770      	bx	lr
 800040a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 800040c:	20000ac4 	.word	0x20000ac4
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 8000410:	200005d0 	.word	0x200005d0
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000414:	20000ac0 	.word	0x20000ac0
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000418:	20000548 	.word	0x20000548
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800041c:	200005cc 	.word	0x200005cc
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000420:	200005d8 	.word	0x200005d8
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000424:	200006ac 	.word	0x200006ac
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000428:	20000530 	.word	0x20000530
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800042c:	20000534 	.word	0x20000534
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000430:	20000538 	.word	0x20000538
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04
	...

08000440 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000440:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000442:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000446:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800044a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800044e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000450:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000454:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000456:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000458:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800045a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800045c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800045e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000460:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000462:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000464:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000468:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800046a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800046c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800046e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000472:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000474:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000478:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800047a:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 800047c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000480:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000482:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
	...

08000490 <memchr>:
 8000490:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000494:	2a10      	cmp	r2, #16
 8000496:	db2b      	blt.n	80004f0 <memchr+0x60>
 8000498:	f010 0f07 	tst.w	r0, #7
 800049c:	d008      	beq.n	80004b0 <memchr+0x20>
 800049e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a2:	3a01      	subs	r2, #1
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d02d      	beq.n	8000504 <memchr+0x74>
 80004a8:	f010 0f07 	tst.w	r0, #7
 80004ac:	b342      	cbz	r2, 8000500 <memchr+0x70>
 80004ae:	d1f6      	bne.n	800049e <memchr+0xe>
 80004b0:	b4f0      	push	{r4, r5, r6, r7}
 80004b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004ba:	f022 0407 	bic.w	r4, r2, #7
 80004be:	f07f 0700 	mvns.w	r7, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004c8:	3c08      	subs	r4, #8
 80004ca:	ea85 0501 	eor.w	r5, r5, r1
 80004ce:	ea86 0601 	eor.w	r6, r6, r1
 80004d2:	fa85 f547 	uadd8	r5, r5, r7
 80004d6:	faa3 f587 	sel	r5, r3, r7
 80004da:	fa86 f647 	uadd8	r6, r6, r7
 80004de:	faa5 f687 	sel	r6, r5, r7
 80004e2:	b98e      	cbnz	r6, 8000508 <memchr+0x78>
 80004e4:	d1ee      	bne.n	80004c4 <memchr+0x34>
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004ec:	f002 0207 	and.w	r2, r2, #7
 80004f0:	b132      	cbz	r2, 8000500 <memchr+0x70>
 80004f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004f6:	3a01      	subs	r2, #1
 80004f8:	ea83 0301 	eor.w	r3, r3, r1
 80004fc:	b113      	cbz	r3, 8000504 <memchr+0x74>
 80004fe:	d1f8      	bne.n	80004f2 <memchr+0x62>
 8000500:	2000      	movs	r0, #0
 8000502:	4770      	bx	lr
 8000504:	3801      	subs	r0, #1
 8000506:	4770      	bx	lr
 8000508:	2d00      	cmp	r5, #0
 800050a:	bf06      	itte	eq
 800050c:	4635      	moveq	r5, r6
 800050e:	3803      	subeq	r0, #3
 8000510:	3807      	subne	r0, #7
 8000512:	f015 0f01 	tst.w	r5, #1
 8000516:	d107      	bne.n	8000528 <memchr+0x98>
 8000518:	3001      	adds	r0, #1
 800051a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800051e:	bf02      	ittt	eq
 8000520:	3001      	addeq	r0, #1
 8000522:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000526:	3001      	addeq	r0, #1
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	3801      	subs	r0, #1
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <__aeabi_uldivmod>:
 8000530:	b953      	cbnz	r3, 8000548 <__aeabi_uldivmod+0x18>
 8000532:	b94a      	cbnz	r2, 8000548 <__aeabi_uldivmod+0x18>
 8000534:	2900      	cmp	r1, #0
 8000536:	bf08      	it	eq
 8000538:	2800      	cmpeq	r0, #0
 800053a:	bf1c      	itt	ne
 800053c:	f04f 31ff 	movne.w	r1, #4294967295
 8000540:	f04f 30ff 	movne.w	r0, #4294967295
 8000544:	f000 b972 	b.w	800082c <__aeabi_idiv0>
 8000548:	f1ad 0c08 	sub.w	ip, sp, #8
 800054c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000550:	f000 f806 	bl	8000560 <__udivmoddi4>
 8000554:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800055c:	b004      	add	sp, #16
 800055e:	4770      	bx	lr

08000560 <__udivmoddi4>:
 8000560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000564:	9e08      	ldr	r6, [sp, #32]
 8000566:	4604      	mov	r4, r0
 8000568:	4688      	mov	r8, r1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d14b      	bne.n	8000606 <__udivmoddi4+0xa6>
 800056e:	428a      	cmp	r2, r1
 8000570:	4615      	mov	r5, r2
 8000572:	d967      	bls.n	8000644 <__udivmoddi4+0xe4>
 8000574:	fab2 f282 	clz	r2, r2
 8000578:	b14a      	cbz	r2, 800058e <__udivmoddi4+0x2e>
 800057a:	f1c2 0720 	rsb	r7, r2, #32
 800057e:	fa01 f302 	lsl.w	r3, r1, r2
 8000582:	fa20 f707 	lsr.w	r7, r0, r7
 8000586:	4095      	lsls	r5, r2
 8000588:	ea47 0803 	orr.w	r8, r7, r3
 800058c:	4094      	lsls	r4, r2
 800058e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000592:	0c23      	lsrs	r3, r4, #16
 8000594:	fbb8 f7fe 	udiv	r7, r8, lr
 8000598:	fa1f fc85 	uxth.w	ip, r5
 800059c:	fb0e 8817 	mls	r8, lr, r7, r8
 80005a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005a4:	fb07 f10c 	mul.w	r1, r7, ip
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x60>
 80005ac:	18eb      	adds	r3, r5, r3
 80005ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80005b2:	f080 811b 	bcs.w	80007ec <__udivmoddi4+0x28c>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 8118 	bls.w	80007ec <__udivmoddi4+0x28c>
 80005bc:	3f02      	subs	r7, #2
 80005be:	442b      	add	r3, r5
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b2a4      	uxth	r4, r4
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80005d4:	45a4      	cmp	ip, r4
 80005d6:	d909      	bls.n	80005ec <__udivmoddi4+0x8c>
 80005d8:	192c      	adds	r4, r5, r4
 80005da:	f100 33ff 	add.w	r3, r0, #4294967295
 80005de:	f080 8107 	bcs.w	80007f0 <__udivmoddi4+0x290>
 80005e2:	45a4      	cmp	ip, r4
 80005e4:	f240 8104 	bls.w	80007f0 <__udivmoddi4+0x290>
 80005e8:	3802      	subs	r0, #2
 80005ea:	442c      	add	r4, r5
 80005ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005f0:	eba4 040c 	sub.w	r4, r4, ip
 80005f4:	2700      	movs	r7, #0
 80005f6:	b11e      	cbz	r6, 8000600 <__udivmoddi4+0xa0>
 80005f8:	40d4      	lsrs	r4, r2
 80005fa:	2300      	movs	r3, #0
 80005fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000600:	4639      	mov	r1, r7
 8000602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000606:	428b      	cmp	r3, r1
 8000608:	d909      	bls.n	800061e <__udivmoddi4+0xbe>
 800060a:	2e00      	cmp	r6, #0
 800060c:	f000 80eb 	beq.w	80007e6 <__udivmoddi4+0x286>
 8000610:	2700      	movs	r7, #0
 8000612:	e9c6 0100 	strd	r0, r1, [r6]
 8000616:	4638      	mov	r0, r7
 8000618:	4639      	mov	r1, r7
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	fab3 f783 	clz	r7, r3
 8000622:	2f00      	cmp	r7, #0
 8000624:	d147      	bne.n	80006b6 <__udivmoddi4+0x156>
 8000626:	428b      	cmp	r3, r1
 8000628:	d302      	bcc.n	8000630 <__udivmoddi4+0xd0>
 800062a:	4282      	cmp	r2, r0
 800062c:	f200 80fa 	bhi.w	8000824 <__udivmoddi4+0x2c4>
 8000630:	1a84      	subs	r4, r0, r2
 8000632:	eb61 0303 	sbc.w	r3, r1, r3
 8000636:	2001      	movs	r0, #1
 8000638:	4698      	mov	r8, r3
 800063a:	2e00      	cmp	r6, #0
 800063c:	d0e0      	beq.n	8000600 <__udivmoddi4+0xa0>
 800063e:	e9c6 4800 	strd	r4, r8, [r6]
 8000642:	e7dd      	b.n	8000600 <__udivmoddi4+0xa0>
 8000644:	b902      	cbnz	r2, 8000648 <__udivmoddi4+0xe8>
 8000646:	deff      	udf	#255	; 0xff
 8000648:	fab2 f282 	clz	r2, r2
 800064c:	2a00      	cmp	r2, #0
 800064e:	f040 808f 	bne.w	8000770 <__udivmoddi4+0x210>
 8000652:	1b49      	subs	r1, r1, r5
 8000654:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000658:	fa1f f885 	uxth.w	r8, r5
 800065c:	2701      	movs	r7, #1
 800065e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000662:	0c23      	lsrs	r3, r4, #16
 8000664:	fb0e 111c 	mls	r1, lr, ip, r1
 8000668:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066c:	fb08 f10c 	mul.w	r1, r8, ip
 8000670:	4299      	cmp	r1, r3
 8000672:	d907      	bls.n	8000684 <__udivmoddi4+0x124>
 8000674:	18eb      	adds	r3, r5, r3
 8000676:	f10c 30ff 	add.w	r0, ip, #4294967295
 800067a:	d202      	bcs.n	8000682 <__udivmoddi4+0x122>
 800067c:	4299      	cmp	r1, r3
 800067e:	f200 80cd 	bhi.w	800081c <__udivmoddi4+0x2bc>
 8000682:	4684      	mov	ip, r0
 8000684:	1a59      	subs	r1, r3, r1
 8000686:	b2a3      	uxth	r3, r4
 8000688:	fbb1 f0fe 	udiv	r0, r1, lr
 800068c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000690:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000694:	fb08 f800 	mul.w	r8, r8, r0
 8000698:	45a0      	cmp	r8, r4
 800069a:	d907      	bls.n	80006ac <__udivmoddi4+0x14c>
 800069c:	192c      	adds	r4, r5, r4
 800069e:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a2:	d202      	bcs.n	80006aa <__udivmoddi4+0x14a>
 80006a4:	45a0      	cmp	r8, r4
 80006a6:	f200 80b6 	bhi.w	8000816 <__udivmoddi4+0x2b6>
 80006aa:	4618      	mov	r0, r3
 80006ac:	eba4 0408 	sub.w	r4, r4, r8
 80006b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006b4:	e79f      	b.n	80005f6 <__udivmoddi4+0x96>
 80006b6:	f1c7 0c20 	rsb	ip, r7, #32
 80006ba:	40bb      	lsls	r3, r7
 80006bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80006c4:	fa01 f407 	lsl.w	r4, r1, r7
 80006c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80006cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80006d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80006d4:	4325      	orrs	r5, r4
 80006d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80006da:	0c2c      	lsrs	r4, r5, #16
 80006dc:	fb08 3319 	mls	r3, r8, r9, r3
 80006e0:	fa1f fa8e 	uxth.w	sl, lr
 80006e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80006e8:	fb09 f40a 	mul.w	r4, r9, sl
 80006ec:	429c      	cmp	r4, r3
 80006ee:	fa02 f207 	lsl.w	r2, r2, r7
 80006f2:	fa00 f107 	lsl.w	r1, r0, r7
 80006f6:	d90b      	bls.n	8000710 <__udivmoddi4+0x1b0>
 80006f8:	eb1e 0303 	adds.w	r3, lr, r3
 80006fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000700:	f080 8087 	bcs.w	8000812 <__udivmoddi4+0x2b2>
 8000704:	429c      	cmp	r4, r3
 8000706:	f240 8084 	bls.w	8000812 <__udivmoddi4+0x2b2>
 800070a:	f1a9 0902 	sub.w	r9, r9, #2
 800070e:	4473      	add	r3, lr
 8000710:	1b1b      	subs	r3, r3, r4
 8000712:	b2ad      	uxth	r5, r5
 8000714:	fbb3 f0f8 	udiv	r0, r3, r8
 8000718:	fb08 3310 	mls	r3, r8, r0, r3
 800071c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000720:	fb00 fa0a 	mul.w	sl, r0, sl
 8000724:	45a2      	cmp	sl, r4
 8000726:	d908      	bls.n	800073a <__udivmoddi4+0x1da>
 8000728:	eb1e 0404 	adds.w	r4, lr, r4
 800072c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000730:	d26b      	bcs.n	800080a <__udivmoddi4+0x2aa>
 8000732:	45a2      	cmp	sl, r4
 8000734:	d969      	bls.n	800080a <__udivmoddi4+0x2aa>
 8000736:	3802      	subs	r0, #2
 8000738:	4474      	add	r4, lr
 800073a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800073e:	fba0 8902 	umull	r8, r9, r0, r2
 8000742:	eba4 040a 	sub.w	r4, r4, sl
 8000746:	454c      	cmp	r4, r9
 8000748:	46c2      	mov	sl, r8
 800074a:	464b      	mov	r3, r9
 800074c:	d354      	bcc.n	80007f8 <__udivmoddi4+0x298>
 800074e:	d051      	beq.n	80007f4 <__udivmoddi4+0x294>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d069      	beq.n	8000828 <__udivmoddi4+0x2c8>
 8000754:	ebb1 050a 	subs.w	r5, r1, sl
 8000758:	eb64 0403 	sbc.w	r4, r4, r3
 800075c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000760:	40fd      	lsrs	r5, r7
 8000762:	40fc      	lsrs	r4, r7
 8000764:	ea4c 0505 	orr.w	r5, ip, r5
 8000768:	e9c6 5400 	strd	r5, r4, [r6]
 800076c:	2700      	movs	r7, #0
 800076e:	e747      	b.n	8000600 <__udivmoddi4+0xa0>
 8000770:	f1c2 0320 	rsb	r3, r2, #32
 8000774:	fa20 f703 	lsr.w	r7, r0, r3
 8000778:	4095      	lsls	r5, r2
 800077a:	fa01 f002 	lsl.w	r0, r1, r2
 800077e:	fa21 f303 	lsr.w	r3, r1, r3
 8000782:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000786:	4338      	orrs	r0, r7
 8000788:	0c01      	lsrs	r1, r0, #16
 800078a:	fbb3 f7fe 	udiv	r7, r3, lr
 800078e:	fa1f f885 	uxth.w	r8, r5
 8000792:	fb0e 3317 	mls	r3, lr, r7, r3
 8000796:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800079a:	fb07 f308 	mul.w	r3, r7, r8
 800079e:	428b      	cmp	r3, r1
 80007a0:	fa04 f402 	lsl.w	r4, r4, r2
 80007a4:	d907      	bls.n	80007b6 <__udivmoddi4+0x256>
 80007a6:	1869      	adds	r1, r5, r1
 80007a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80007ac:	d22f      	bcs.n	800080e <__udivmoddi4+0x2ae>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d92d      	bls.n	800080e <__udivmoddi4+0x2ae>
 80007b2:	3f02      	subs	r7, #2
 80007b4:	4429      	add	r1, r5
 80007b6:	1acb      	subs	r3, r1, r3
 80007b8:	b281      	uxth	r1, r0
 80007ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80007be:	fb0e 3310 	mls	r3, lr, r0, r3
 80007c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c6:	fb00 f308 	mul.w	r3, r0, r8
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d907      	bls.n	80007de <__udivmoddi4+0x27e>
 80007ce:	1869      	adds	r1, r5, r1
 80007d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80007d4:	d217      	bcs.n	8000806 <__udivmoddi4+0x2a6>
 80007d6:	428b      	cmp	r3, r1
 80007d8:	d915      	bls.n	8000806 <__udivmoddi4+0x2a6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4429      	add	r1, r5
 80007de:	1ac9      	subs	r1, r1, r3
 80007e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80007e4:	e73b      	b.n	800065e <__udivmoddi4+0xfe>
 80007e6:	4637      	mov	r7, r6
 80007e8:	4630      	mov	r0, r6
 80007ea:	e709      	b.n	8000600 <__udivmoddi4+0xa0>
 80007ec:	4607      	mov	r7, r0
 80007ee:	e6e7      	b.n	80005c0 <__udivmoddi4+0x60>
 80007f0:	4618      	mov	r0, r3
 80007f2:	e6fb      	b.n	80005ec <__udivmoddi4+0x8c>
 80007f4:	4541      	cmp	r1, r8
 80007f6:	d2ab      	bcs.n	8000750 <__udivmoddi4+0x1f0>
 80007f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80007fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000800:	3801      	subs	r0, #1
 8000802:	4613      	mov	r3, r2
 8000804:	e7a4      	b.n	8000750 <__udivmoddi4+0x1f0>
 8000806:	4660      	mov	r0, ip
 8000808:	e7e9      	b.n	80007de <__udivmoddi4+0x27e>
 800080a:	4618      	mov	r0, r3
 800080c:	e795      	b.n	800073a <__udivmoddi4+0x1da>
 800080e:	4667      	mov	r7, ip
 8000810:	e7d1      	b.n	80007b6 <__udivmoddi4+0x256>
 8000812:	4681      	mov	r9, r0
 8000814:	e77c      	b.n	8000710 <__udivmoddi4+0x1b0>
 8000816:	3802      	subs	r0, #2
 8000818:	442c      	add	r4, r5
 800081a:	e747      	b.n	80006ac <__udivmoddi4+0x14c>
 800081c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000820:	442b      	add	r3, r5
 8000822:	e72f      	b.n	8000684 <__udivmoddi4+0x124>
 8000824:	4638      	mov	r0, r7
 8000826:	e708      	b.n	800063a <__udivmoddi4+0xda>
 8000828:	4637      	mov	r7, r6
 800082a:	e6e9      	b.n	8000600 <__udivmoddi4+0xa0>

0800082c <__aeabi_idiv0>:
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000838:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <SCB_EnableICache+0x3c>)
 800083e:	2200      	movs	r2, #0
 8000840:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000848:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <SCB_EnableICache+0x3c>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <SCB_EnableICache+0x3c>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800085c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <SCB_EnableDCache+0x7c>)
 8000878:	2200      	movs	r2, #0
 800087a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800087e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <SCB_EnableDCache+0x7c>)
 8000884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000888:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0b5b      	lsrs	r3, r3, #13
 800088e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000892:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800089c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	015a      	lsls	r2, r3, #5
 80008a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ac:	490f      	ldr	r1, [pc, #60]	; (80008ec <SCB_EnableDCache+0x7c>)
 80008ae:	4313      	orrs	r3, r2
 80008b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1ef      	bne.n	800089e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	60fa      	str	r2, [r7, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e5      	bne.n	8000894 <SCB_EnableDCache+0x24>
 80008c8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <SCB_EnableDCache+0x7c>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <SCB_EnableDCache+0x7c>)
 80008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d6:	6153      	str	r3, [r2, #20]
 80008d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008dc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__io_putchar>:
UART_HandleTypeDef huart1;

/*-------------------------------------------- printf --------------------------------------------*/

int __io_putchar(int ch)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80008f8:	1d39      	adds	r1, r7, #4
 80008fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fe:	2201      	movs	r2, #1
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <__io_putchar+0x20>)
 8000902:	f001 fc93 	bl	800222c <HAL_UART_Transmit>
	return ch;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000274 	.word	0x20000274

08000914 <_write>:

int _write(int file, char* ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e009      	b.n	800093a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffde 	bl	80008f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf1      	blt.n	8000926 <_write+0x12>
	}

	return len;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3c      	ldr	r2, [pc, #240]	; (8000a5c <HAL_UART_MspInit+0x110>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d145      	bne.n	80009fa <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a3b      	ldr	r2, [pc, #236]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <HAL_UART_MspInit+0x114>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a35      	ldr	r2, [pc, #212]	; (8000a60 <HAL_UART_MspInit+0x114>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <HAL_UART_MspInit+0x114>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <HAL_UART_MspInit+0x114>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_UART_MspInit+0x114>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

		/* USART1 GPIO Configuration
		 * PB7 ------> USART1_RX
		 * PA9 ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c6:	2307      	movs	r3, #7
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4824      	ldr	r0, [pc, #144]	; (8000a64 <HAL_UART_MspInit+0x118>)
 80009d2:	f000 ff0f 	bl	80017f4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009da:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e8:	2307      	movs	r3, #7
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <HAL_UART_MspInit+0x11c>)
 80009f4:	f000 fefe 	bl	80017f4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 80009f8:	e02c      	b.n	8000a54 <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <HAL_UART_MspInit+0x120>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d127      	bne.n	8000a54 <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a08:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	f003 0320 	and.w	r3, r3, #32
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_UART_MspInit+0x114>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000a34:	23c0      	movs	r3, #192	; 0xc0
 8000a36:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a44:	2308      	movs	r3, #8
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <HAL_UART_MspInit+0x124>)
 8000a50:	f000 fed0 	bl	80017f4 <HAL_GPIO_Init>
}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40011400 	.word	0x40011400
 8000a70:	40020800 	.word	0x40020800

08000a74 <hardware_rand_initialize>:

void BSP_SDRAM_Init();
void USB_OTG_BSP_HS_Init(void);

void hardware_rand_initialize(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <hardware_rand_initialize+0x20>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <hardware_rand_initialize+0x20>)
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <hardware_rand_initialize+0x24>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40023834 	.word	0x40023834
 8000a98:	50060800 	.word	0x50060800

08000a9c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000aa4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART1_UART_Init+0x54>)
 8000ae0:	f001 fcae 	bl	8002440 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <MX_USART1_UART_Init+0x50>
	{
		while (1);
 8000aea:	e7fe      	b.n	8000aea <MX_USART1_UART_Init+0x4e>
	}
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000274 	.word	0x20000274
 8000af4:	40011000 	.word	0x40011000

08000af8 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b092      	sub	sp, #72	; 0x48
 8000afc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000b18:	2319      	movs	r3, #25
 8000b1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 8000b1c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b26:	2309      	movs	r3, #9
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 ffa3 	bl	8001a78 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d000      	beq.n	8000b42 <SystemClock_Config+0x4a>
	{
		while (1);
 8000b40:	e7fe      	b.n	8000b40 <SystemClock_Config+0x48>
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000b42:	f000 ff5d 	bl	8001a00 <HAL_PWREx_EnableOverDrive>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d000      	beq.n	8000b56 <SystemClock_Config+0x5e>
	{
		while (1);
 8000b54:	e7fe      	b.n	8000b54 <SystemClock_Config+0x5c>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000b56:	230f      	movs	r3, #15
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b72:	2107      	movs	r1, #7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f979 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d000      	beq.n	8000b8a <SystemClock_Config+0x92>
	{
		while (1);
 8000b88:	e7fe      	b.n	8000b88 <SystemClock_Config+0x90>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3748      	adds	r7, #72	; 0x48
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000b9a:	f000 fd03 	bl	80015a4 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MPU_Config+0x84>)
 8000ba4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000ba6:	2311      	movs	r3, #17
 8000ba8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000baa:	2303      	movs	r3, #3
 8000bac:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fd0b 	bl	80015e8 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000bd6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bda:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000bdc:	2316      	movs	r3, #22
 8000bde:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000be0:	2303      	movs	r3, #3
 8000be2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fcf0 	bl	80015e8 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c08:	2004      	movs	r0, #4
 8000c0a:	f000 fcdb 	bl	80015c4 <HAL_MPU_Enable>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20010000 	.word	0x20010000

08000c1c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000c20:	f7ff fe06 	bl	8000830 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000c24:	f7ff fe24 	bl	8000870 <SCB_EnableDCache>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <GreenLed_Init>:

static void GreenLed_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	/* enable clock and clear 'MODER1' field for port PI */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <GreenLed_Init+0x40>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <GreenLed_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOI->MODER &= ~GPIO_MODER_MODER1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <GreenLed_Init+0x44>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <GreenLed_Init+0x44>)
 8000c42:	f023 030c 	bic.w	r3, r3, #12
 8000c46:	6013      	str	r3, [r2, #0]

	/* setup pin PI1 as 'push-pull' output and reset it in '0' */
	GPIOI->MODER |= GPIO_MODER_MODER1_0;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <GreenLed_Init+0x44>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <GreenLed_Init+0x44>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BR_1;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <GreenLed_Init+0x44>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <GreenLed_Init+0x44>)
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5e:	6193      	str	r3, [r2, #24]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40022000 	.word	0x40022000

08000c74 <BlueButton_Init>:

static void BlueButton_Init(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
	/* Activate PULLUP for GPIOI11 */
	uint32_t temp = GPIOI->PUPDR;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <BlueButton_Init+0x44>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	607b      	str	r3, [r7, #4]
	temp &= ~(GPIO_PUPDR_PUPDR0 << (11 * 2));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c86:	607b      	str	r3, [r7, #4]
	temp |= (1 << (11 * 2));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8e:	607b      	str	r3, [r7, #4]
	GPIOI->PUPDR = temp;
 8000c90:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <BlueButton_Init+0x44>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60d3      	str	r3, [r2, #12]

	/* Configure IO Direction mode (Input) for GPIOI11 */
	temp = GPIOI->MODER;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <BlueButton_Init+0x44>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	607b      	str	r3, [r7, #4]
	temp &= ~(GPIO_MODER_MODER0 << (11 * 2));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ca2:	607b      	str	r3, [r7, #4]
	temp |= ((0 & 0x00000003U) << (11 * 2));
	GPIOI->MODER = temp;
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <BlueButton_Init+0x44>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <GreenLed_On>:

void GreenLed_On(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	GPIOI->BSRR |= GPIO_BSRR_BS_1;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <GreenLed_On+0x1c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <GreenLed_On+0x1c>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	6193      	str	r3, [r2, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <GreenLed_Off>:

void GreenLed_Off(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	GPIOI->BSRR |= GPIO_BSRR_BR_1;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <GreenLed_Off+0x1c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <GreenLed_Off+0x1c>)
 8000ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cea:	6193      	str	r3, [r2, #24]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <BlueButton_Pressed>:
{
	GPIOI->BSRR |= ((GPIOI->ODR & 0x02) != 0x00u) ? GPIO_BSRR_BR_1 : GPIO_BSRR_BS_1;
}

int BlueButton_Pressed(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	return (GPIOI->IDR & ((uint16_t)(1 << 11)));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <BlueButton_Pressed+0x18>)
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40022000 	.word	0x40022000

08000d18 <hardware_setup>:

/** Initialize: MPU, CACHE, HAL_Init, Clock, SDRAM, USART1, RNG */
void hardware_setup(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000d1c:	f7ff ff3a 	bl	8000b94 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000d20:	f7ff ff7c 	bl	8000c1c <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000d24:	f000 fbb0 	bl	8001488 <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000d28:	f7ff fee6 	bl	8000af8 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000d2c:	f000 fb22 	bl	8001374 <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000d30:	f7ff feb4 	bl	8000a9c <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000d34:	f7ff fe9e 	bl	8000a74 <hardware_rand_initialize>

	GreenLed_Init();
 8000d38:	f7ff ff78 	bl	8000c2c <GreenLed_Init>
	BlueButton_Init();
 8000d3c:	f7ff ff9a 	bl	8000c74 <BlueButton_Init>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <prvGetRegistersFromStack>:
/*    Other registers will not have changed since the fault occurred,     */
/*    and can be viewed directly in the debugger’s CPU register window.   */
/*                                                                        */
/**************************************************************************/
void prvGetRegistersFromStack(uint32_t* pulFaultStackAddress)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b08b      	sub	sp, #44	; 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	volatile uint32_t lr;	/* Link register. */
	volatile uint32_t pc;	/* Program counter. */
	volatile uint32_t psr;	/* Program status register. */
#pragma GCC diagnostic pop

	r0 = pulFaultStackAddress[0];
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
	r1 = pulFaultStackAddress[1];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	623b      	str	r3, [r7, #32]
	r2 = pulFaultStackAddress[2];
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	61fb      	str	r3, [r7, #28]
	r3 = pulFaultStackAddress[3];
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	61bb      	str	r3, [r7, #24]

	r12 = pulFaultStackAddress[4];
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	617b      	str	r3, [r7, #20]
	lr = pulFaultStackAddress[5];
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
	pc = pulFaultStackAddress[6];	/* contains the program counter value */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	60fb      	str	r3, [r7, #12]
	psr = pulFaultStackAddress[7];
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	60bb      	str	r3, [r7, #8]

	/* When the following line is hit, the variables contain the register values. */
	for (;;);
 8000d7c:	e7fe      	b.n	8000d7c <prvGetRegistersFromStack+0x38>

08000d7e <NMI_Handler>:
	 * a precise fault, which makes the fault easier to debug, albeit at the cost of slower
	 * program execution. */
}

void NMI_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
	while(1);
 8000d82:	e7fe      	b.n	8000d82 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	while(1)
	{
		/* fault handler implementation calls a function called 'prvGetRegistersFromStack()' */
		__asm volatile
 8000d88:	f01e 0f04 	tst.w	lr, #4
 8000d8c:	bf0c      	ite	eq
 8000d8e:	f3ef 8008 	mrseq	r0, MSP
 8000d92:	f3ef 8009 	mrsne	r0, PSP
 8000d96:	6981      	ldr	r1, [r0, #24]
 8000d98:	4a00      	ldr	r2, [pc, #0]	; (8000d9c <HANDLER2_ADDRESS_CONST>)
 8000d9a:	4710      	bx	r2

08000d9c <HANDLER2_ADDRESS_CONST>:
 8000d9c:	08000d45 	.word	0x08000d45
 8000da0:	e7f2      	b.n	8000d88 <HardFault_Handler+0x4>

08000da2 <MemManage_Handler>:
		);
	}
}

void MemManage_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
	while(1);
 8000da6:	e7fe      	b.n	8000da6 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	while(1);
 8000dac:	e7fe      	b.n	8000dac <BusFault_Handler+0x4>

08000dae <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
	while(1);
 8000db2:	e7fe      	b.n	8000db2 <UsageFault_Handler+0x4>

08000db4 <error_handler>:
UX_SLAVE_CLASS_CDC_ACM* cdc_acm_slave;
UX_SLAVE_CLASS_CDC_ACM_PARAMETER parameter;
UCHAR buffer[UX_DEMO_BUFFER_SIZE];

void error_handler()
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	while (1);
 8000db8:	e7fe      	b.n	8000db8 <error_handler+0x4>

08000dba <error_callback>:
}

VOID error_callback(UINT system_level, UINT system_context, UINT error_code)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
	error_handler();
 8000dc6:	f7ff fff5 	bl	8000db4 <error_handler>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <main>:

int main(int argc, char** argv)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	/* Setup the hardware: MPU, CACHE, HAL_Init, Clock, SDRAM, USART1, RNG */
	hardware_setup();
 8000ddc:	f7ff ff9c 	bl	8000d18 <hardware_setup>

//	USB_OTG_BSP_HS_Init();
//	_ux_dcd_stm32_delay(100000U);

	/* Enter the ThreadX kernel. */
	tx_kernel_enter();
 8000de0:	f004 fde2 	bl	80059a8 <_tx_initialize_kernel_enter>
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <tx_application_define>:

void tx_application_define(void* first_unused_memory)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	; 0x38
 8000df4:	af08      	add	r7, sp, #32
 8000df6:	6078      	str	r0, [r7, #4]
	/* Initialize the free memory pointer. */
	CHAR* stack_pointer = (CHAR*)first_unused_memory;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	617b      	str	r3, [r7, #20]
	CHAR* memory_pointer = stack_pointer + UX_DEMO_STACK_SIZE;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e02:	613b      	str	r3, [r7, #16]

	/* Create the main demo thread. */
	UINT status = tx_thread_create(&demo_thread, "tx demo", demo_thread_entry,
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	23c8      	movs	r3, #200	; 0xc8
 8000e08:	9306      	str	r3, [sp, #24]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9305      	str	r3, [sp, #20]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	9304      	str	r3, [sp, #16]
 8000e12:	2314      	movs	r3, #20
 8000e14:	9303      	str	r3, [sp, #12]
 8000e16:	2314      	movs	r3, #20
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <tx_application_define+0x54>)
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <tx_application_define+0x58>)
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <tx_application_define+0x5c>)
 8000e2c:	f005 fa70 	bl	8006310 <_txe_thread_create>
 8000e30:	60f8      	str	r0, [r7, #12]
			(ULONG )memory_pointer, stack_pointer, UX_DEMO_STACK_SIZE, 20, 20, 1, TX_AUTO_START);
	if (status != UX_SUCCESS)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <tx_application_define+0x4c>
		error_handler();
 8000e38:	f7ff ffbc 	bl	8000db4 <error_handler>
//	UX_DEMO_STACK_SIZE, 20, 20, 1, TX_AUTO_START);
//	if (status != TX_SUCCESS)
//		return;

//	printf("\r\nDemo Thread created...\r\n");
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08000e51 	.word	0x08000e51
 8000e48:	080085d4 	.word	0x080085d4
 8000e4c:	200002f8 	.word	0x200002f8

08000e50 <demo_thread_entry>:

void demo_thread_entry(ULONG arg)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af06      	add	r7, sp, #24
 8000e56:	6078      	str	r0, [r7, #4]
	ULONG memory_pointer_thread_input = arg;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	617b      	str	r3, [r7, #20]

	/* Initialize USBX. Memory */
	UINT status = _ux_system_initialize((ULONG*)memory_pointer_thread_input, UX_USBX_MEMORY_SIZE,
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e66:	f003 f9cf 	bl	8004208 <_ux_system_initialize>
 8000e6a:	6138      	str	r0, [r7, #16]
			UX_NULL, 0);
	if (status != UX_SUCCESS)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <demo_thread_entry+0x26>
			error_handler();
 8000e72:	f7ff ff9f 	bl	8000db4 <error_handler>

	/* Register error callback. */
	_ux_utility_error_callback_register(error_callback);
 8000e76:	484b      	ldr	r0, [pc, #300]	; (8000fa4 <demo_thread_entry+0x154>)
 8000e78:	f003 fa56 	bl	8004328 <_ux_utility_error_callback_register>

	/* The code below is required for installing the device portion of USBX.
	 * No call back for device status change in this example. */
	status = ux_device_stack_initialize(device_framework_high_speed,
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9304      	str	r3, [sp, #16]
 8000e80:	2302      	movs	r3, #2
 8000e82:	9303      	str	r3, [sp, #12]
 8000e84:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <demo_thread_entry+0x158>)
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	233d      	movs	r3, #61	; 0x3d
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	4b47      	ldr	r3, [pc, #284]	; (8000fac <demo_thread_entry+0x15c>)
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	235d      	movs	r3, #93	; 0x5d
 8000e92:	4a47      	ldr	r2, [pc, #284]	; (8000fb0 <demo_thread_entry+0x160>)
 8000e94:	2167      	movs	r1, #103	; 0x67
 8000e96:	4847      	ldr	r0, [pc, #284]	; (8000fb4 <demo_thread_entry+0x164>)
 8000e98:	f002 fffc 	bl	8003e94 <_ux_device_stack_initialize>
 8000e9c:	6138      	str	r0, [r7, #16]
			sizeof(device_framework_high_speed), device_framework_full_speed,
			sizeof(device_framework_full_speed), string_framework, sizeof(string_framework),
			language_id_framework, sizeof(language_id_framework), UX_NULL);
	if (status != UX_SUCCESS)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <demo_thread_entry+0x58>
		error_handler();
 8000ea4:	f7ff ff86 	bl	8000db4 <error_handler>

	/* Set the parameters for callback when insertion/extraction of a CDC device. */
	parameter.ux_slave_class_cdc_acm_instance_activate = demo_cdc_instance_activate;
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <demo_thread_entry+0x168>)
 8000eaa:	4a44      	ldr	r2, [pc, #272]	; (8000fbc <demo_thread_entry+0x16c>)
 8000eac:	601a      	str	r2, [r3, #0]
	parameter.ux_slave_class_cdc_acm_instance_deactivate = demo_cdc_instance_deactivate;
 8000eae:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <demo_thread_entry+0x168>)
 8000eb0:	4a43      	ldr	r2, [pc, #268]	; (8000fc0 <demo_thread_entry+0x170>)
 8000eb2:	605a      	str	r2, [r3, #4]

	/* Initialize the device cdc class. This class owns both interfaces starting with 0. */
	status = ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8000eb4:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <demo_thread_entry+0x168>)
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4941      	ldr	r1, [pc, #260]	; (8000fc4 <demo_thread_entry+0x174>)
 8000ebe:	4842      	ldr	r0, [pc, #264]	; (8000fc8 <demo_thread_entry+0x178>)
 8000ec0:	f002 fc48 	bl	8003754 <_ux_device_stack_class_register>
 8000ec4:	6138      	str	r0, [r7, #16]
			ux_device_class_cdc_acm_entry, INTERF_DAT_NUM, INTERF_COM_NUM, (VOID*)&parameter);
	if (status != UX_SUCCESS)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <demo_thread_entry+0x80>
		error_handler();
 8000ecc:	f7ff ff72 	bl	8000db4 <error_handler>

	/* Initialize the bsp layer of the USB OTG HS Controller. */
	USB_OTG_BSP_HS_Init();
 8000ed0:	f000 f8a2 	bl	8001018 <USB_OTG_BSP_HS_Init>
	status = tx_thread_sleep(10);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f004 fdcd 	bl	8005a74 <_tx_thread_sleep>
 8000eda:	6138      	str	r0, [r7, #16]
	if (status != UX_SUCCESS)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <demo_thread_entry+0x96>
		error_handler();
 8000ee2:	f7ff ff67 	bl	8000db4 <error_handler>

	/* Register the STM32  USB device controllers available in this system */
	status = _ux_dcd_stm32_initialize(UX_DCD_STM32_OTG_FS_HIGH_SPEED, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4838      	ldr	r0, [pc, #224]	; (8000fcc <demo_thread_entry+0x17c>)
 8000eea:	f002 f80f 	bl	8002f0c <_ux_dcd_stm32_initialize>
 8000eee:	6138      	str	r0, [r7, #16]
	if (status != UX_SUCCESS)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d04b      	beq.n	8000f8e <demo_thread_entry+0x13e>
		error_handler();
 8000ef6:	f7ff ff5d 	bl	8000db4 <error_handler>
	ULONG message_length;

	while (1)
	{
		/* Ensure the CDC class is mounted. */
		while (cdc_acm_slave != UX_NULL)
 8000efa:	e048      	b.n	8000f8e <demo_thread_entry+0x13e>
		{
			if (DEBUG_BUTTON_PRESSED() != 0)
 8000efc:	f7ff fefe 	bl	8000cfc <BlueButton_Pressed>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d02b      	beq.n	8000f5e <demo_thread_entry+0x10e>
			{
				_tx_thread_sleep(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f004 fdb4 	bl	8005a74 <_tx_thread_sleep>

				if (DEBUG_BUTTON_PRESSED() != 0)
 8000f0c:	f7ff fef6 	bl	8000cfc <BlueButton_Pressed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d023      	beq.n	8000f5e <demo_thread_entry+0x10e>
				{
					/* Fill buffer. */
					buffer[0] = 'a';
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f18:	2261      	movs	r2, #97	; 0x61
 8000f1a:	701a      	strb	r2, [r3, #0]
					buffer[1] = 'b';
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f1e:	2262      	movs	r2, #98	; 0x62
 8000f20:	705a      	strb	r2, [r3, #1]
					buffer[2] = 'c';
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f24:	2263      	movs	r2, #99	; 0x63
 8000f26:	709a      	strb	r2, [r3, #2]
					buffer[3] = 'd';
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f2a:	2264      	movs	r2, #100	; 0x64
 8000f2c:	70da      	strb	r2, [r3, #3]
					buffer[4] = 'e';
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f30:	2265      	movs	r2, #101	; 0x65
 8000f32:	711a      	strb	r2, [r3, #4]
					buffer[5] = 'f';
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f36:	2266      	movs	r2, #102	; 0x66
 8000f38:	715a      	strb	r2, [r3, #5]
					buffer[6] = '\r';
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f3c:	220d      	movs	r2, #13
 8000f3e:	719a      	strb	r2, [r3, #6]
					buffer[7] = '\n';
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f42:	220a      	movs	r2, #10
 8000f44:	71da      	strb	r2, [r3, #7]

					/* And send 8 bytes. */
					status = _ux_device_class_cdc_acm_write(cdc_acm_slave, buffer, 8,
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <demo_thread_entry+0x184>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2208      	movs	r2, #8
 8000f50:	491f      	ldr	r1, [pc, #124]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f52:	f001 ff65 	bl	8002e20 <_ux_device_class_cdc_acm_write>
 8000f56:	6138      	str	r0, [r7, #16]
							&message_length);

					/* Device disconnect? */
					if (status != UX_SUCCESS)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11c      	bne.n	8000f98 <demo_thread_entry+0x148>
						break;
				}
			}

			/* Read from the host. */
			status = ux_device_class_cdc_acm_read(cdc_acm_slave, buffer, UX_DEMO_BUFFER_SIZE,
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <demo_thread_entry+0x184>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	4919      	ldr	r1, [pc, #100]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f6a:	f001 fedf 	bl	8002d2c <_ux_device_class_cdc_acm_read>
 8000f6e:	6138      	str	r0, [r7, #16]
					&message_length);

			/* Device disconnect? */
			if (status != UX_SUCCESS)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d112      	bne.n	8000f9c <demo_thread_entry+0x14c>
				break;

			/* Echo it back to the host. */
			status = ux_device_class_cdc_acm_write(cdc_acm_slave, buffer, message_length,
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <demo_thread_entry+0x184>)
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <demo_thread_entry+0x180>)
 8000f82:	f001 ff4d 	bl	8002e20 <_ux_device_class_cdc_acm_write>
 8000f86:	6138      	str	r0, [r7, #16]
					&message_length);

			/* Device disconnect? */
			if (status != UX_SUCCESS)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d108      	bne.n	8000fa0 <demo_thread_entry+0x150>
		while (cdc_acm_slave != UX_NULL)
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <demo_thread_entry+0x184>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1b2      	bne.n	8000efc <demo_thread_entry+0xac>
 8000f96:	e7fa      	b.n	8000f8e <demo_thread_entry+0x13e>
						break;
 8000f98:	bf00      	nop
 8000f9a:	e7f8      	b.n	8000f8e <demo_thread_entry+0x13e>
				break;
 8000f9c:	bf00      	nop
 8000f9e:	e7f6      	b.n	8000f8e <demo_thread_entry+0x13e>
				break;
 8000fa0:	bf00      	nop
		while (cdc_acm_slave != UX_NULL)
 8000fa2:	e7f4      	b.n	8000f8e <demo_thread_entry+0x13e>
 8000fa4:	08000dbb 	.word	0x08000dbb
 8000fa8:	200000c8 	.word	0x200000c8
 8000fac:	200000cc 	.word	0x200000cc
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000060 	.word	0x20000060
 8000fb8:	200003c0 	.word	0x200003c0
 8000fbc:	08000fd9 	.word	0x08000fd9
 8000fc0:	08000ff9 	.word	0x08000ff9
 8000fc4:	08002c61 	.word	0x08002c61
 8000fc8:	20000114 	.word	0x20000114
 8000fcc:	40040000 	.word	0x40040000
 8000fd0:	200003cc 	.word	0x200003cc
 8000fd4:	2000040c 	.word	0x2000040c

08000fd8 <demo_cdc_instance_activate>:

	} while (1);
} */

void demo_cdc_instance_activate(void* cdc_instance)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	/* Save the CDC instance. */
	cdc_acm_slave = (UX_SLAVE_CLASS_CDC_ACM*)cdc_instance;
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <demo_cdc_instance_activate+0x1c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	DEBUG_LED_ON();
 8000fe6:	f7ff fe69 	bl	8000cbc <GreenLed_On>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000040c 	.word	0x2000040c

08000ff8 <demo_cdc_instance_deactivate>:

void demo_cdc_instance_deactivate(void* cdc_instance)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	/* Reset the CDC instance. */
	cdc_acm_slave = UX_NULL;
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <demo_cdc_instance_deactivate+0x1c>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]

	DEBUG_LED_OFF();
 8001006:	f7ff fe69 	bl	8000cdc <GreenLed_Off>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000040c 	.word	0x2000040c

08001018 <USB_OTG_BSP_HS_Init>:
	DEBUG_LED_TOGGLE();
}

/** this function repeats the function 'HAL_PCD_MspInit(..)' from the 'usbd_conf.c' */
void USB_OTG_BSP_HS_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
	/* Configure USB FS GPIOs */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a59      	ldr	r2, [pc, #356]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a53      	ldr	r2, [pc, #332]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	4b48      	ldr	r3, [pc, #288]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a47      	ldr	r2, [pc, #284]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
	 * PB5     ------> USB_OTG_HS_ULPI_D7
	 * PC0     ------> USB_OTG_HS_ULPI_STP
	 * PH4     ------> USB_OTG_HS_ULPI_NXT
	 * PC2     ------> USB_OTG_HS_ULPI_DIR
	 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

	/* CLK */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800108e:	2320      	movs	r3, #32
 8001090:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800109e:	230a      	movs	r3, #10
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4838      	ldr	r0, [pc, #224]	; (800118c <USB_OTG_BSP_HS_Init+0x174>)
 80010aa:	f000 fba3 	bl	80017f4 <HAL_GPIO_Init>

	/* D0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010ae:	2308      	movs	r3, #8
 80010b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010be:	230a      	movs	r3, #10
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4830      	ldr	r0, [pc, #192]	; (800118c <USB_OTG_BSP_HS_Init+0x174>)
 80010ca:	f000 fb93 	bl	80017f4 <HAL_GPIO_Init>

	/* D1 D2 D3 D4 D5 D6 D7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11
 80010ce:	f643 4323 	movw	r3, #15395	; 0x3c23
 80010d2:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010dc:	230a      	movs	r3, #10
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	482a      	ldr	r0, [pc, #168]	; (8001190 <USB_OTG_BSP_HS_Init+0x178>)
 80010e8:	f000 fb84 	bl	80017f4 <HAL_GPIO_Init>

	/* STP */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010f8:	230a      	movs	r3, #10
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <USB_OTG_BSP_HS_Init+0x17c>)
 8001104:	f000 fb76 	bl	80017f4 <HAL_GPIO_Init>

	/* NXT */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001108:	2310      	movs	r3, #16
 800110a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001114:	230a      	movs	r3, #10
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	481e      	ldr	r0, [pc, #120]	; (8001198 <USB_OTG_BSP_HS_Init+0x180>)
 8001120:	f000 fb68 	bl	80017f4 <HAL_GPIO_Init>

	/* DIR */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001124:	2304      	movs	r3, #4
 8001126:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001130:	230a      	movs	r3, #10
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4816      	ldr	r0, [pc, #88]	; (8001194 <USB_OTG_BSP_HS_Init+0x17c>)
 800113c:	f000 fb5a 	bl	80017f4 <HAL_GPIO_Init>

	/* Enable USB HS Clocks */
	__HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a10      	ldr	r2, [pc, #64]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 800115e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <USB_OTG_BSP_HS_Init+0x170>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

	/* Set USBHS Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(OTG_HS_IRQn, 4, 0);		// (OTG_HS_IRQn, 0, 0)
 8001170:	2200      	movs	r2, #0
 8001172:	2104      	movs	r1, #4
 8001174:	204d      	movs	r0, #77	; 0x4d
 8001176:	f000 f9d1 	bl	800151c <HAL_NVIC_SetPriority>

	/* Enable USB HS Interrupt */
	HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800117a:	204d      	movs	r0, #77	; 0x4d
 800117c:	f000 fa04 	bl	8001588 <HAL_NVIC_EnableIRQ>
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40021c00 	.word	0x40021c00

0800119c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490e      	ldr	r1, [pc, #56]	; (80011dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011c6:	f001 fbdb 	bl	8002980 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011ca:	f006 fa4d 	bl	8007668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff fe00 	bl	8000dd2 <main>

080011d2 <LoopForever>:

LoopForever:
    b LoopForever
 80011d2:	e7fe      	b.n	80011d2 <LoopForever>
  ldr   r0, =_estack
 80011d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 80011e0:	080088dc 	.word	0x080088dc
  ldr r2, =_sbss
 80011e4:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 80011e8:	20000b00 	.word	0x20000b00

080011ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 80011ee:	f7ff bdc9 	b.w	8000d84 <HardFault_Handler>

MemManage_Handler:
  b MemManage_Handler
 80011f2:	f7ff bdd6 	b.w	8000da2 <MemManage_Handler>

BusFault_Handler:
  b BusFault_Handler
 80011f6:	f7ff bdd7 	b.w	8000da8 <BusFault_Handler>

UsageFault_Handler:
  b UsageFault_Handler
 80011fa:	f7ff bdd8 	b.w	8000dae <UsageFault_Handler>
	...

08001200 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8001200:	4b53      	ldr	r3, [pc, #332]	; (8001350 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001202:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 8001204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001206:	f042 0201 	orr.w	r2, r2, #1
{
 800120a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
{
 800120e:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 8001210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 8001212:	2001      	movs	r0, #1
{
 8001214:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 8001216:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 8001218:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 800121a:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 800121c:	9201      	str	r2, [sp, #4]
 800121e:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 8001220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001222:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
 8001228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800122e:	9202      	str	r2, [sp, #8]
 8001230:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001234:	f042 0204 	orr.w	r2, r2, #4
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	f002 0204 	and.w	r2, r2, #4
 8001240:	9203      	str	r2, [sp, #12]
 8001242:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001246:	432a      	orrs	r2, r5
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124c:	402a      	ands	r2, r5
 800124e:	9204      	str	r2, [sp, #16]
 8001250:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001254:	f042 0210 	orr.w	r2, r2, #16
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
 800125a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125c:	f002 0210 	and.w	r2, r2, #16
 8001260:	9205      	str	r2, [sp, #20]
 8001262:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
 800126c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126e:	f002 0220 	and.w	r2, r2, #32
 8001272:	9206      	str	r2, [sp, #24]
 8001274:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001284:	9207      	str	r2, [sp, #28]
 8001286:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001290:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 8001294:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8001298:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800129e:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80012a0:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80012a2:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012a4:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 80012a6:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80012aa:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ac:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80012ae:	f000 faa1 	bl	80017f4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80012b2:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80012b6:	4621      	mov	r1, r4
 80012b8:	4827      	ldr	r0, [pc, #156]	; (8001358 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80012ba:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80012bc:	f000 fa9a 	bl	80017f4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 80012c0:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80012c4:	4621      	mov	r1, r4
 80012c6:	4825      	ldr	r0, [pc, #148]	; (800135c <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80012ca:	f000 fa93 	bl	80017f4 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 80012ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80012d2:	4621      	mov	r1, r4
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 80012d6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80012d8:	f000 fa8c 	bl	80017f4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 80012dc:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80012e0:	4621      	mov	r1, r4
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 80012e4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80012e6:	f000 fa85 	bl	80017f4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 80012ea:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80012ec:	4621      	mov	r1, r4
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 80012f0:	4c1e      	ldr	r4, [pc, #120]	; (800136c <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 80012f2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80012f4:	f000 fa7e 	bl	80017f4 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012fc:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001302:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8001306:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8001308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800130c:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800130e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8001312:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001314:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8001316:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800131a:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800131c:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 800131e:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001320:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001322:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001324:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 8001326:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001328:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 800132a:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 800132c:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 800132e:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 8001332:	f000 fa1d 	bl	8001770 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 8001336:	4620      	mov	r0, r4
 8001338:	f000 f97e 	bl	8001638 <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800133c:	462a      	mov	r2, r5
 800133e:	210f      	movs	r1, #15
 8001340:	2038      	movs	r0, #56	; 0x38
 8001342:	f000 f8eb 	bl	800151c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001346:	2038      	movs	r0, #56	; 0x38
 8001348:	f000 f91e 	bl	8001588 <HAL_NVIC_EnableIRQ>
}
 800134c:	b00e      	add	sp, #56	; 0x38
 800134e:	bd70      	pop	{r4, r5, r6, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00
 800136c:	20000208 	.word	0x20000208
 8001370:	40026410 	.word	0x40026410

08001374 <BSP_SDRAM_Init>:
{
 8001374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001378:	483d      	ldr	r0, [pc, #244]	; (8001470 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 800137a:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800137c:	4d3d      	ldr	r5, [pc, #244]	; (8001474 <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800137e:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 8001380:	4c3d      	ldr	r4, [pc, #244]	; (8001478 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8001382:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8001386:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 800138a:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 800138e:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001390:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 8001394:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001398:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 800139c:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800139e:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013a0:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80013a2:	4628      	mov	r0, r5
 80013a4:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 80013a6:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 80013a8:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80013aa:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80013ac:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 80013ae:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 80013b2:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 80013b6:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013ba:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013bc:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013be:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 80013c2:	f8c5 8010 	str.w	r8, [r5, #16]
 80013c6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001480 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80013ca:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 80013ce:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013d2:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80013d6:	f7ff ff13 	bl	8001200 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80013da:	4621      	mov	r1, r4
 80013dc:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80013de:	4c27      	ldr	r4, [pc, #156]	; (800147c <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80013e0:	f000 fe88 	bl	80020f4 <HAL_SDRAM_Init>
 80013e4:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013e6:	4621      	mov	r1, r4
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80013ec:	bf18      	it	ne
 80013ee:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013f0:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 80013f2:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80013f4:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80013f8:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 80013fc:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80013fe:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 8001400:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001402:	f000 fe99 	bl	8002138 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8001406:	4638      	mov	r0, r7
 8001408:	f000 f862 	bl	80014d0 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800140c:	4621      	mov	r1, r4
 800140e:	4628      	mov	r0, r5
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001414:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 8001418:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800141c:	f000 fe8c 	bl	8002138 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001420:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 8001424:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001426:	4621      	mov	r1, r4
 8001428:	4628      	mov	r0, r5
 800142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800142e:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 8001432:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001434:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 8001438:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800143a:	f000 fe7d 	bl	8002138 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800143e:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001442:	4621      	mov	r1, r4
 8001444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001448:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800144a:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 800144c:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800144e:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 8001452:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001456:	f000 fe6f 	bl	8002138 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800145a:	4628      	mov	r0, r5
 800145c:	f240 6103 	movw	r1, #1539	; 0x603
 8001460:	f000 fe84 	bl	800216c <HAL_SDRAM_ProgramRefreshRate>
}
 8001464:	f89b 0000 	ldrb.w	r0, [fp]
 8001468:	b003      	add	sp, #12
 800146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800146e:	bf00      	nop
 8001470:	a0000140 	.word	0xa0000140
 8001474:	20000410 	.word	0x20000410
 8001478:	200001ec 	.word	0x200001ec
 800147c:	200001dc 	.word	0x200001dc
 8001480:	20000109 	.word	0x20000109

08001484 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
{
 800148c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001494:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001496:	f000 f82d 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f000 fe7a 	bl	8002194 <HAL_InitTick>
  HAL_MspInit();
 80014a0:	f7ff fff0 	bl	8001484 <HAL_MspInit>
}
 80014a4:	2000      	movs	r0, #0
 80014a6:	bd08      	pop	{r3, pc}
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_IncTick+0x10>)
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_IncTick+0x14>)
 80014b0:	6811      	ldr	r1, [r2, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	440b      	add	r3, r1
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000444 	.word	0x20000444
 80014c0:	2000010a 	.word	0x2000010a

080014c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014c4:	4b01      	ldr	r3, [pc, #4]	; (80014cc <HAL_GetTick+0x8>)
 80014c6:	6818      	ldr	r0, [r3, #0]
}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000444 	.word	0x20000444

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff fff6 	bl	80014c4 <HAL_GetTick>
 80014d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014da:	1c63      	adds	r3, r4, #1
 80014dc:	d002      	beq.n	80014e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_Delay+0x20>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	1b40      	subs	r0, r0, r5
 80014ea:	42a0      	cmp	r0, r4
 80014ec:	d3fa      	bcc.n	80014e4 <HAL_Delay+0x14>
  {
  }
}
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	2000010a 	.word	0x2000010a

080014f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f6:	0200      	lsls	r0, r0, #8
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001506:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800150c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001510:	60c8      	str	r0, [r1, #12]
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	05fa0000 	.word	0x05fa0000

0800151c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_NVIC_SetPriority+0x60>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001524:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001526:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	2d04      	cmp	r5, #4
 800152e:	bf28      	it	cs
 8001530:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	2c06      	cmp	r4, #6
 8001534:	d918      	bls.n	8001568 <HAL_NVIC_SetPriority+0x4c>
 8001536:	3b03      	subs	r3, #3
 8001538:	f04f 34ff 	mov.w	r4, #4294967295
 800153c:	409c      	lsls	r4, r3
 800153e:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001542:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001546:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	fa02 f205 	lsl.w	r2, r2, r5
 800154c:	ea21 0102 	bic.w	r1, r1, r2
 8001550:	fa01 f203 	lsl.w	r2, r1, r3
 8001554:	ea42 0204 	orr.w	r2, r2, r4
 8001558:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800155c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800155e:	db06      	blt.n	800156e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_NVIC_SetPriority+0x64>)
 8001562:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001564:	bc30      	pop	{r4, r5}
 8001566:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001568:	2400      	movs	r4, #0
 800156a:	4623      	mov	r3, r4
 800156c:	e7e9      	b.n	8001542 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	f000 000f 	and.w	r0, r0, #15
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_NVIC_SetPriority+0x68>)
 8001574:	541a      	strb	r2, [r3, r0]
 8001576:	bc30      	pop	{r4, r5}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	e000e400 	.word	0xe000e400
 8001584:	e000ed14 	.word	0xe000ed14

08001588 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001588:	2800      	cmp	r0, #0
 800158a:	db07      	blt.n	800159c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158c:	f000 011f 	and.w	r1, r0, #31
 8001590:	2301      	movs	r3, #1
 8001592:	0940      	lsrs	r0, r0, #5
 8001594:	4a02      	ldr	r2, [pc, #8]	; (80015a0 <HAL_NVIC_EnableIRQ+0x18>)
 8001596:	408b      	lsls	r3, r1
 8001598:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015a4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015aa:	2000      	movs	r0, #0
 80015ac:	4904      	ldr	r1, [pc, #16]	; (80015c0 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80015b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b4:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 80015b6:	6048      	str	r0, [r1, #4]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	e000ed90 	.word	0xe000ed90

080015c4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015c6:	f040 0001 	orr.w	r0, r0, #1
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MPU_Enable+0x20>)
 80015cc:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015da:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	e000ed90 	.word	0xe000ed90

080015e8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_MPU_ConfigRegion+0x4c>)
 80015ea:	7843      	ldrb	r3, [r0, #1]
 80015ec:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80015ee:	7801      	ldrb	r1, [r0, #0]
 80015f0:	b911      	cbnz	r1, 80015f8 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80015f2:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80015f4:	6111      	str	r1, [r2, #16]
 80015f6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80015f8:	6843      	ldr	r3, [r0, #4]
{
 80015fa:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 80015fc:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015fe:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001600:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001602:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001604:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001606:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001608:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800160c:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800160e:	430b      	orrs	r3, r1
 8001610:	7a01      	ldrb	r1, [r0, #8]
 8001612:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001616:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001618:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800161c:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800161e:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8001622:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001626:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800162a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 800162e:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001630:	6113      	str	r3, [r2, #16]
}
 8001632:	4770      	bx	lr
 8001634:	e000ed90 	.word	0xe000ed90

08001638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ff42 	bl	80014c4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001640:	2c00      	cmp	r4, #0
 8001642:	d053      	beq.n	80016ec <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001644:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001646:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001648:	2100      	movs	r1, #0
 800164a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800164c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001650:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001652:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165c:	e005      	b.n	800166a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165e:	f7ff ff31 	bl	80014c4 <HAL_GetTick>
 8001662:	1b40      	subs	r0, r0, r5
 8001664:	2805      	cmp	r0, #5
 8001666:	d83a      	bhi.n	80016de <HAL_DMA_Init+0xa6>
 8001668:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	07d1      	lsls	r1, r2, #31
 800166e:	d4f6      	bmi.n	800165e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001670:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001674:	68e1      	ldr	r1, [r4, #12]
 8001676:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8001678:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800167e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001680:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001682:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001688:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800168a:	4d35      	ldr	r5, [pc, #212]	; (8001760 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168c:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800168e:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001692:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001694:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001696:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169c:	d028      	beq.n	80016f0 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800169e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016a0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016a2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016a6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4d2e      	ldr	r5, [pc, #184]	; (8001764 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80016ac:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016ae:	3a10      	subs	r2, #16
 80016b0:	492d      	ldr	r1, [pc, #180]	; (8001768 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016b2:	482e      	ldr	r0, [pc, #184]	; (800176c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b4:	fba5 5202 	umull	r5, r2, r5, r2
 80016b8:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80016ba:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016bc:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016be:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c0:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80016c2:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016c8:	bf88      	it	hi
 80016ca:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016cc:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ce:	4083      	lsls	r3, r0
  return HAL_OK;
 80016d0:	4610      	mov	r0, r2
 80016d2:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80016d8:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80016dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80016e2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80016ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
}
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f0:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80016f4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f6:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80016fa:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016fe:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8001700:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001702:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001704:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001708:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800170a:	2d00      	cmp	r5, #0
 800170c:	d0cc      	beq.n	80016a8 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800170e:	b17e      	cbz	r6, 8001730 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001710:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001714:	d016      	beq.n	8001744 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001716:	2f02      	cmp	r7, #2
 8001718:	d903      	bls.n	8001722 <HAL_DMA_Init+0xea>
 800171a:	2f03      	cmp	r7, #3
 800171c:	d1c4      	bne.n	80016a8 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800171e:	01ea      	lsls	r2, r5, #7
 8001720:	d5c2      	bpl.n	80016a8 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001722:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001724:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8001726:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001728:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800172a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001730:	2f01      	cmp	r7, #1
 8001732:	d003      	beq.n	800173c <HAL_DMA_Init+0x104>
 8001734:	d3f3      	bcc.n	800171e <HAL_DMA_Init+0xe6>
 8001736:	2f02      	cmp	r7, #2
 8001738:	d1b6      	bne.n	80016a8 <HAL_DMA_Init+0x70>
 800173a:	e7f0      	b.n	800171e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800173c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001740:	d1b2      	bne.n	80016a8 <HAL_DMA_Init+0x70>
 8001742:	e7ee      	b.n	8001722 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001744:	2f03      	cmp	r7, #3
 8001746:	d8af      	bhi.n	80016a8 <HAL_DMA_Init+0x70>
 8001748:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <HAL_DMA_Init+0x118>)
 800174a:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001723 	.word	0x08001723
 8001754:	0800171f 	.word	0x0800171f
 8001758:	08001723 	.word	0x08001723
 800175c:	0800173d 	.word	0x0800173d
 8001760:	f010803f 	.word	0xf010803f
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	fffffc00 	.word	0xfffffc00
 800176c:	080085dc 	.word	0x080085dc

08001770 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001770:	2800      	cmp	r0, #0
 8001772:	d035      	beq.n	80017e0 <HAL_DMA_DeInit+0x70>
 8001774:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001776:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800177a:	b2c0      	uxtb	r0, r0
 800177c:	2802      	cmp	r0, #2
 800177e:	d031      	beq.n	80017e4 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8001780:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8001782:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001784:	b2d1      	uxtb	r1, r2
{
 8001786:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001788:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800178a:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800178c:	4d16      	ldr	r5, [pc, #88]	; (80017e8 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800178e:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8001790:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001794:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001798:	4d14      	ldr	r5, [pc, #80]	; (80017ec <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800179a:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800179c:	0909      	lsrs	r1, r1, #4
 800179e:	4c14      	ldr	r4, [pc, #80]	; (80017f0 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 80017a0:	6010      	str	r0, [r2, #0]
 80017a2:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017a4:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 80017a6:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a8:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 80017ac:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ae:	bf88      	it	hi
 80017b0:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 80017b2:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 80017b6:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80017b8:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80017ba:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 80017bc:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017be:	65dd      	str	r5, [r3, #92]	; 0x5c
 80017c0:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 80017c2:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c4:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80017d0:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80017d4:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80017d8:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 80017dc:	bc70      	pop	{r4, r5, r6}
 80017de:	4770      	bx	lr
    return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
 80017e2:	4770      	bx	lr
}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	aaaaaaab 	.word	0xaaaaaaab
 80017ec:	080085dc 	.word	0x080085dc
 80017f0:	fffffc00 	.word	0xfffffc00

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f8:	4688      	mov	r8, r1
 80017fa:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017fc:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001802:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80019fc <HAL_GPIO_Init+0x208>
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001808:	3401      	adds	r4, #1
 800180a:	2c10      	cmp	r4, #16
 800180c:	f000 80b6 	beq.w	800197c <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 8001810:	2301      	movs	r3, #1
 8001812:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001814:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 8001818:	4293      	cmp	r3, r2
 800181a:	d1f5      	bne.n	8001808 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800181c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001820:	0067      	lsls	r7, r4, #1
 8001822:	2103      	movs	r1, #3
 8001824:	f025 0c10 	bic.w	ip, r5, #16
 8001828:	40b9      	lsls	r1, r7
 800182a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800182e:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001830:	2b01      	cmp	r3, #1
 8001832:	d810      	bhi.n	8001856 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8001834:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001836:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800183a:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 800183e:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001842:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001844:	40be      	lsls	r6, r7
 8001846:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800184a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800184c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001852:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001854:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001856:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800185c:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001860:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001864:	fa06 f607 	lsl.w	r6, r6, r7
 8001868:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 800186c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186e:	d115      	bne.n	800189c <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8001870:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001872:	f004 0c07 	and.w	ip, r4, #7
 8001876:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800187a:	f8d8 6010 	ldr.w	r6, [r8, #16]
 800187e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001882:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001886:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800188a:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800188e:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001892:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001896:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 800189a:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 800189c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800189e:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018a2:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018a4:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a6:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018a8:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 80018ac:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ae:	d5ab      	bpl.n	8001808 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <HAL_GPIO_Init+0x1e0>)
 80018b2:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018b6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80018bc:	4619      	mov	r1, r3
 80018be:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018c2:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018ca:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018ce:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d0:	644f      	str	r7, [r1, #68]	; 0x44
 80018d2:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018d4:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018dc:	9701      	str	r7, [sp, #4]
 80018de:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80018e0:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018e2:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018e6:	4f3c      	ldr	r7, [pc, #240]	; (80019d8 <HAL_GPIO_Init+0x1e4>)
 80018e8:	42b8      	cmp	r0, r7
 80018ea:	d020      	beq.n	800192e <HAL_GPIO_Init+0x13a>
 80018ec:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80018f0:	42b8      	cmp	r0, r7
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0x18e>
 80018f4:	4f39      	ldr	r7, [pc, #228]	; (80019dc <HAL_GPIO_Init+0x1e8>)
 80018f6:	42b8      	cmp	r0, r7
 80018f8:	d048      	beq.n	800198c <HAL_GPIO_Init+0x198>
 80018fa:	4f39      	ldr	r7, [pc, #228]	; (80019e0 <HAL_GPIO_Init+0x1ec>)
 80018fc:	42b8      	cmp	r0, r7
 80018fe:	d04a      	beq.n	8001996 <HAL_GPIO_Init+0x1a2>
 8001900:	4f38      	ldr	r7, [pc, #224]	; (80019e4 <HAL_GPIO_Init+0x1f0>)
 8001902:	42b8      	cmp	r0, r7
 8001904:	d04c      	beq.n	80019a0 <HAL_GPIO_Init+0x1ac>
 8001906:	4f38      	ldr	r7, [pc, #224]	; (80019e8 <HAL_GPIO_Init+0x1f4>)
 8001908:	42b8      	cmp	r0, r7
 800190a:	d053      	beq.n	80019b4 <HAL_GPIO_Init+0x1c0>
 800190c:	4f37      	ldr	r7, [pc, #220]	; (80019ec <HAL_GPIO_Init+0x1f8>)
 800190e:	42b8      	cmp	r0, r7
 8001910:	d055      	beq.n	80019be <HAL_GPIO_Init+0x1ca>
 8001912:	4f37      	ldr	r7, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x1fc>)
 8001914:	42b8      	cmp	r0, r7
 8001916:	d048      	beq.n	80019aa <HAL_GPIO_Init+0x1b6>
 8001918:	4f36      	ldr	r7, [pc, #216]	; (80019f4 <HAL_GPIO_Init+0x200>)
 800191a:	42b8      	cmp	r0, r7
 800191c:	d054      	beq.n	80019c8 <HAL_GPIO_Init+0x1d4>
 800191e:	4f36      	ldr	r7, [pc, #216]	; (80019f8 <HAL_GPIO_Init+0x204>)
 8001920:	42b8      	cmp	r0, r7
 8001922:	bf0c      	ite	eq
 8001924:	2709      	moveq	r7, #9
 8001926:	270a      	movne	r7, #10
 8001928:	fa07 f303 	lsl.w	r3, r7, r3
 800192c:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 800192e:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001930:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 8001932:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001936:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001938:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800193c:	bf54      	ite	pl
 800193e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001940:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001942:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8001944:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001948:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800194c:	bf54      	ite	pl
 800194e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001950:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001952:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8001954:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001958:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 800195c:	bf54      	ite	pl
 800195e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001960:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001962:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8001964:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8001968:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800196c:	bf54      	ite	pl
 800196e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001970:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001972:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8001974:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001978:	f47f af4a 	bne.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800197c:	b003      	add	sp, #12
 800197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001982:	2701      	movs	r7, #1
 8001984:	fa07 f303 	lsl.w	r3, r7, r3
 8001988:	4319      	orrs	r1, r3
 800198a:	e7d0      	b.n	800192e <HAL_GPIO_Init+0x13a>
 800198c:	2702      	movs	r7, #2
 800198e:	fa07 f303 	lsl.w	r3, r7, r3
 8001992:	4319      	orrs	r1, r3
 8001994:	e7cb      	b.n	800192e <HAL_GPIO_Init+0x13a>
 8001996:	2703      	movs	r7, #3
 8001998:	fa07 f303 	lsl.w	r3, r7, r3
 800199c:	4319      	orrs	r1, r3
 800199e:	e7c6      	b.n	800192e <HAL_GPIO_Init+0x13a>
 80019a0:	2704      	movs	r7, #4
 80019a2:	fa07 f303 	lsl.w	r3, r7, r3
 80019a6:	4319      	orrs	r1, r3
 80019a8:	e7c1      	b.n	800192e <HAL_GPIO_Init+0x13a>
 80019aa:	2707      	movs	r7, #7
 80019ac:	fa07 f303 	lsl.w	r3, r7, r3
 80019b0:	4319      	orrs	r1, r3
 80019b2:	e7bc      	b.n	800192e <HAL_GPIO_Init+0x13a>
 80019b4:	2705      	movs	r7, #5
 80019b6:	fa07 f303 	lsl.w	r3, r7, r3
 80019ba:	4319      	orrs	r1, r3
 80019bc:	e7b7      	b.n	800192e <HAL_GPIO_Init+0x13a>
 80019be:	2706      	movs	r7, #6
 80019c0:	fa07 f303 	lsl.w	r3, r7, r3
 80019c4:	4319      	orrs	r1, r3
 80019c6:	e7b2      	b.n	800192e <HAL_GPIO_Init+0x13a>
 80019c8:	2708      	movs	r7, #8
 80019ca:	fa07 f303 	lsl.w	r3, r7, r3
 80019ce:	4319      	orrs	r1, r3
 80019d0:	e7ad      	b.n	800192e <HAL_GPIO_Init+0x13a>
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40021c00 	.word	0x40021c00
 80019f4:	40022000 	.word	0x40022000
 80019f8:	40022400 	.word	0x40022400
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001a06:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001a0a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001a0e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a12:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001a18:	9201      	str	r2, [sp, #4]
 8001a1a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a22:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a24:	f7ff fd4e 	bl	80014c4 <HAL_GetTick>
 8001a28:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a2a:	e005      	b.n	8001a38 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a2c:	f7ff fd4a 	bl	80014c4 <HAL_GetTick>
 8001a30:	1b40      	subs	r0, r0, r5
 8001a32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a36:	d817      	bhi.n	8001a68 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a38:	6863      	ldr	r3, [r4, #4]
 8001a3a:	03da      	lsls	r2, r3, #15
 8001a3c:	d5f6      	bpl.n	8001a2c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a3e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a40:	4d0c      	ldr	r5, [pc, #48]	; (8001a74 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a46:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001a48:	f7ff fd3c 	bl	80014c4 <HAL_GetTick>
 8001a4c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a4e:	e005      	b.n	8001a5c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a50:	f7ff fd38 	bl	80014c4 <HAL_GetTick>
 8001a54:	1b00      	subs	r0, r0, r4
 8001a56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a5a:	d805      	bhi.n	8001a68 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a5c:	686b      	ldr	r3, [r5, #4]
 8001a5e:	039b      	lsls	r3, r3, #14
 8001a60:	d5f6      	bpl.n	8001a50 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001a62:	2000      	movs	r0, #0
}
 8001a64:	b003      	add	sp, #12
 8001a66:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8001a68:	2003      	movs	r0, #3
}
 8001a6a:	b003      	add	sp, #12
 8001a6c:	bd30      	pop	{r4, r5, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	f000 814c 	beq.w	8001d16 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	6803      	ldr	r3, [r0, #0]
{
 8001a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a84:	07dd      	lsls	r5, r3, #31
{
 8001a86:	b082      	sub	sp, #8
 8001a88:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	d535      	bpl.n	8001af8 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	49ac      	ldr	r1, [pc, #688]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001a8e:	688a      	ldr	r2, [r1, #8]
 8001a90:	f002 020c 	and.w	r2, r2, #12
 8001a94:	2a04      	cmp	r2, #4
 8001a96:	f000 80ff 	beq.w	8001c98 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9a:	688a      	ldr	r2, [r1, #8]
 8001a9c:	f002 020c 	and.w	r2, r2, #12
 8001aa0:	2a08      	cmp	r2, #8
 8001aa2:	f000 80f5 	beq.w	8001c90 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x58>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 811a 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x270>
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	4ba1      	ldr	r3, [pc, #644]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f000 8164 	beq.w	8001d88 <HAL_RCC_OscConfig+0x310>
 8001ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e004      	b.n	8001ada <HAL_RCC_OscConfig+0x62>
 8001ad0:	4a9b      	ldr	r2, [pc, #620]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001ad2:	6813      	ldr	r3, [r2, #0]
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fcf3 	bl	80014c4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4d98      	ldr	r5, [pc, #608]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001ae0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fcee 	bl	80014c4 <HAL_GetTick>
 8001ae8:	1b80      	subs	r0, r0, r6
 8001aea:	2864      	cmp	r0, #100	; 0x64
 8001aec:	f200 80ef 	bhi.w	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	039a      	lsls	r2, r3, #14
 8001af4:	d5f6      	bpl.n	8001ae4 <HAL_RCC_OscConfig+0x6c>
 8001af6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af8:	079f      	lsls	r7, r3, #30
 8001afa:	d442      	bmi.n	8001b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	071a      	lsls	r2, r3, #28
 8001afe:	d517      	bpl.n	8001b30 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b00:	6963      	ldr	r3, [r4, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80b1 	beq.w	8001c6a <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b08:	4b8d      	ldr	r3, [pc, #564]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001b0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001b14:	f7ff fcd6 	bl	80014c4 <HAL_GetTick>
 8001b18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e005      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fcd2 	bl	80014c4 <HAL_GetTick>
 8001b20:	1b80      	subs	r0, r0, r6
 8001b22:	2802      	cmp	r0, #2
 8001b24:	f200 80d3 	bhi.w	8001cce <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b2a:	079b      	lsls	r3, r3, #30
 8001b2c:	d5f6      	bpl.n	8001b1c <HAL_RCC_OscConfig+0xa4>
 8001b2e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b30:	075d      	lsls	r5, r3, #29
 8001b32:	d56b      	bpl.n	8001c0c <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b34:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b38:	00d0      	lsls	r0, r2, #3
 8001b3a:	f100 80ee 	bmi.w	8001d1a <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001b40:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b52:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <HAL_RCC_OscConfig+0x2cc>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	05d1      	lsls	r1, r2, #23
 8001b58:	f140 80a8 	bpl.w	8001cac <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	68a3      	ldr	r3, [r4, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d039      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x15e>
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80db 	beq.w	8001d1e <HAL_RCC_OscConfig+0x2a6>
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	4b75      	ldr	r3, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001b6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b6e:	f000 8113 	beq.w	8001d98 <HAL_RCC_OscConfig+0x320>
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	671a      	str	r2, [r3, #112]	; 0x70
 8001b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	671a      	str	r2, [r3, #112]	; 0x70
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001b84:	6891      	ldr	r1, [r2, #8]
 8001b86:	f011 0f0c 	tst.w	r1, #12
 8001b8a:	d063      	beq.n	8001c54 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8c:	6891      	ldr	r1, [r2, #8]
 8001b8e:	f001 010c 	and.w	r1, r1, #12
 8001b92:	2908      	cmp	r1, #8
 8001b94:	d05b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b96:	68e3      	ldr	r3, [r4, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80e1 	beq.w	8001d60 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba2:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001baa:	f7ff fc8b 	bl	80014c4 <HAL_GetTick>
 8001bae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	e005      	b.n	8001bbe <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fc87 	bl	80014c4 <HAL_GetTick>
 8001bb6:	1b80      	subs	r0, r0, r6
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	f200 8088 	bhi.w	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	0798      	lsls	r0, r3, #30
 8001bc2:	d5f6      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	6922      	ldr	r2, [r4, #16]
 8001bc8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bd0:	602b      	str	r3, [r5, #0]
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	e792      	b.n	8001afc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001bd8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fc70 	bl	80014c4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4e56      	ldr	r6, [pc, #344]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001be6:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e005      	b.n	8001bfa <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fc69 	bl	80014c4 <HAL_GetTick>
 8001bf2:	eba0 0008 	sub.w	r0, r0, r8
 8001bf6:	42b8      	cmp	r0, r7
 8001bf8:	d869      	bhi.n	8001cce <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001bfc:	079b      	lsls	r3, r3, #30
 8001bfe:	d5f6      	bpl.n	8001bee <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c00:	b125      	cbz	r5, 8001c0c <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001c04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0c:	69a0      	ldr	r0, [r4, #24]
 8001c0e:	b1d0      	cbz	r0, 8001c46 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	f002 020c 	and.w	r2, r2, #12
 8001c18:	2a08      	cmp	r2, #8
 8001c1a:	f000 80c5 	beq.w	8001da8 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	f000 80eb 	beq.w	8001dfc <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fc49 	bl	80014c4 <HAL_GetTick>
 8001c32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c34:	e004      	b.n	8001c40 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff fc45 	bl	80014c4 <HAL_GetTick>
 8001c3a:	1b40      	subs	r0, r0, r5
 8001c3c:	2802      	cmp	r0, #2
 8001c3e:	d846      	bhi.n	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	019b      	lsls	r3, r3, #6
 8001c44:	d4f7      	bmi.n	8001c36 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001c46:	2000      	movs	r0, #0
}
 8001c48:	b002      	add	sp, #8
 8001c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	6852      	ldr	r2, [r2, #4]
 8001c50:	0256      	lsls	r6, r2, #9
 8001c52:	d4a0      	bmi.n	8001b96 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	0795      	lsls	r5, r2, #30
 8001c5a:	d53c      	bpl.n	8001cd6 <HAL_RCC_OscConfig+0x25e>
 8001c5c:	68e2      	ldr	r2, [r4, #12]
 8001c5e:	2a01      	cmp	r2, #1
 8001c60:	d039      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
}
 8001c64:	b002      	add	sp, #8
 8001c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001c6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001c76:	f7ff fc25 	bl	80014c4 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	e004      	b.n	8001c88 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fc21 	bl	80014c4 <HAL_GetTick>
 8001c82:	1b80      	subs	r0, r0, r6
 8001c84:	2802      	cmp	r0, #2
 8001c86:	d822      	bhi.n	8001cce <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c8a:	079f      	lsls	r7, r3, #30
 8001c8c:	d4f7      	bmi.n	8001c7e <HAL_RCC_OscConfig+0x206>
 8001c8e:	e74e      	b.n	8001b2e <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c90:	684a      	ldr	r2, [r1, #4]
 8001c92:	0250      	lsls	r0, r2, #9
 8001c94:	f57f af07 	bpl.w	8001aa6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	0391      	lsls	r1, r2, #14
 8001c9e:	f57f af2b 	bpl.w	8001af8 <HAL_RCC_OscConfig+0x80>
 8001ca2:	6862      	ldr	r2, [r4, #4]
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	f47f af27 	bne.w	8001af8 <HAL_RCC_OscConfig+0x80>
 8001caa:	e7da      	b.n	8001c62 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8001cac:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8001cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fc05 	bl	80014c4 <HAL_GetTick>
 8001cba:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbc:	6833      	ldr	r3, [r6, #0]
 8001cbe:	05da      	lsls	r2, r3, #23
 8001cc0:	f53f af4c 	bmi.w	8001b5c <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7ff fbfe 	bl	80014c4 <HAL_GetTick>
 8001cc8:	1bc0      	subs	r0, r0, r7
 8001cca:	2864      	cmp	r0, #100	; 0x64
 8001ccc:	d9f6      	bls.n	8001cbc <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 8001cce:	2003      	movs	r0, #3
}
 8001cd0:	b002      	add	sp, #8
 8001cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	491a      	ldr	r1, [pc, #104]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001cd8:	6920      	ldr	r0, [r4, #16]
 8001cda:	680a      	ldr	r2, [r1, #0]
 8001cdc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001ce0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001ce4:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e709      	b.n	8001afc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
 8001cea:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cec:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fbe2 	bl	80014c4 <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e004      	b.n	8001d0e <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fbde 	bl	80014c4 <HAL_GetTick>
 8001d08:	1b80      	subs	r0, r0, r6
 8001d0a:	2864      	cmp	r0, #100	; 0x64
 8001d0c:	d8df      	bhi.n	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	039b      	lsls	r3, r3, #14
 8001d12:	d4f7      	bmi.n	8001d04 <HAL_RCC_OscConfig+0x28c>
 8001d14:	e6ef      	b.n	8001af6 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
}
 8001d18:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	e719      	b.n	8001b52 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8001d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d30:	f022 0204 	bic.w	r2, r2, #4
 8001d34:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d36:	f7ff fbc5 	bl	80014c4 <HAL_GetTick>
 8001d3a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_OscConfig+0x2da>
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff fbbc 	bl	80014c4 <HAL_GetTick>
 8001d4c:	1bc0      	subs	r0, r0, r7
 8001d4e:	4540      	cmp	r0, r8
 8001d50:	d8bd      	bhi.n	8001cce <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d54:	0798      	lsls	r0, r3, #30
 8001d56:	d4f7      	bmi.n	8001d48 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8001d58:	2d00      	cmp	r5, #0
 8001d5a:	f43f af57 	beq.w	8001c0c <HAL_RCC_OscConfig+0x194>
 8001d5e:	e750      	b.n	8001c02 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8001d60:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_OscConfig+0x3f0>)
 8001d62:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d64:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fbaa 	bl	80014c4 <HAL_GetTick>
 8001d70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e004      	b.n	8001d7e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff fba6 	bl	80014c4 <HAL_GetTick>
 8001d78:	1b80      	subs	r0, r0, r6
 8001d7a:	2802      	cmp	r0, #2
 8001d7c:	d8a7      	bhi.n	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	0799      	lsls	r1, r3, #30
 8001d82:	d4f7      	bmi.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	e6b9      	b.n	8001afc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e6a0      	b.n	8001ada <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	f042 0204 	orr.w	r2, r2, #4
 8001d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8001d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	671a      	str	r2, [r3, #112]	; 0x70
 8001da6:	e71b      	b.n	8001be0 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da8:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001daa:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dac:	f43f af5a 	beq.w	8001c64 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db4:	69e1      	ldr	r1, [r4, #28]
 8001db6:	428b      	cmp	r3, r1
 8001db8:	f47f af53 	bne.w	8001c62 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dbc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc0:	6a21      	ldr	r1, [r4, #32]
 8001dc2:	428b      	cmp	r3, r1
 8001dc4:	f47f af4d 	bne.w	8001c62 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dce:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001dd4:	f47f af45 	bne.w	8001c62 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dda:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001de6:	f47f af3c 	bne.w	8001c62 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dec:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001df0:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8001df4:	bf14      	ite	ne
 8001df6:	2001      	movne	r0, #1
 8001df8:	2000      	moveq	r0, #0
 8001dfa:	e733      	b.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8001e02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb5e 	bl	80014c4 <HAL_GetTick>
 8001e08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fb5a 	bl	80014c4 <HAL_GetTick>
 8001e10:	1b80      	subs	r0, r0, r6
 8001e12:	2802      	cmp	r0, #2
 8001e14:	f63f af5b 	bhi.w	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	0199      	lsls	r1, r3, #6
 8001e1c:	d4f6      	bmi.n	8001e0c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e24:	4313      	orrs	r3, r2
 8001e26:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2e:	4c0e      	ldr	r4, [pc, #56]	; (8001e68 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e30:	0852      	lsrs	r2, r2, #1
 8001e32:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e36:	3a01      	subs	r2, #1
 8001e38:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e40:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fb3b 	bl	80014c4 <HAL_GetTick>
 8001e4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	e005      	b.n	8001e5e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fb37 	bl	80014c4 <HAL_GetTick>
 8001e56:	1b40      	subs	r0, r0, r5
 8001e58:	2802      	cmp	r0, #2
 8001e5a:	f63f af38 	bhi.w	8001cce <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	019a      	lsls	r2, r3, #6
 8001e62:	d5f6      	bpl.n	8001e52 <HAL_RCC_OscConfig+0x3da>
 8001e64:	e6ef      	b.n	8001c46 <HAL_RCC_OscConfig+0x1ce>
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6c:	b178      	cbz	r0, 8001e8e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6e:	4a5e      	ldr	r2, [pc, #376]	; (8001fe8 <HAL_RCC_ClockConfig+0x17c>)
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	428b      	cmp	r3, r1
 8001e78:	d20b      	bcs.n	8001e92 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	f023 030f 	bic.w	r3, r3, #15
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	428b      	cmp	r3, r1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8001e90:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e92:	6803      	ldr	r3, [r0, #0]
{
 8001e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	079d      	lsls	r5, r3, #30
 8001e9a:	d514      	bpl.n	8001ec6 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	075c      	lsls	r4, r3, #29
 8001e9e:	d504      	bpl.n	8001eaa <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4c52      	ldr	r4, [pc, #328]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001ea2:	68a2      	ldr	r2, [r4, #8]
 8001ea4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ea8:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	071a      	lsls	r2, r3, #28
 8001eac:	d504      	bpl.n	8001eb8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eae:	4c4f      	ldr	r4, [pc, #316]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001eb0:	68a2      	ldr	r2, [r4, #8]
 8001eb2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001eb6:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4c4c      	ldr	r4, [pc, #304]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001eba:	6885      	ldr	r5, [r0, #8]
 8001ebc:	68a2      	ldr	r2, [r4, #8]
 8001ebe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ec2:	432a      	orrs	r2, r5
 8001ec4:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	07df      	lsls	r7, r3, #31
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	d521      	bpl.n	8001f12 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	d063      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed8:	2a02      	cmp	r2, #2
 8001eda:	d079      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	0799      	lsls	r1, r3, #30
 8001ede:	d528      	bpl.n	8001f32 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee0:	4942      	ldr	r1, [pc, #264]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ef2:	f7ff fae7 	bl	80014c4 <HAL_GetTick>
 8001ef6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	e004      	b.n	8001f04 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff fae3 	bl	80014c4 <HAL_GetTick>
 8001efe:	1bc0      	subs	r0, r0, r7
 8001f00:	4540      	cmp	r0, r8
 8001f02:	d863      	bhi.n	8001fcc <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f04:	68b3      	ldr	r3, [r6, #8]
 8001f06:	6862      	ldr	r2, [r4, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f10:	d1f3      	bne.n	8001efa <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f12:	4a35      	ldr	r2, [pc, #212]	; (8001fe8 <HAL_RCC_ClockConfig+0x17c>)
 8001f14:	6813      	ldr	r3, [r2, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	42ab      	cmp	r3, r5
 8001f1c:	d90c      	bls.n	8001f38 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	f023 030f 	bic.w	r3, r3, #15
 8001f24:	432b      	orrs	r3, r5
 8001f26:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	42ab      	cmp	r3, r5
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	075a      	lsls	r2, r3, #29
 8001f3c:	d506      	bpl.n	8001f4c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3e:	492b      	ldr	r1, [pc, #172]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001f40:	68e0      	ldr	r0, [r4, #12]
 8001f42:	688a      	ldr	r2, [r1, #8]
 8001f44:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f48:	4302      	orrs	r2, r0
 8001f4a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	071b      	lsls	r3, r3, #28
 8001f4e:	d507      	bpl.n	8001f60 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001f52:	6921      	ldr	r1, [r4, #16]
 8001f54:	6893      	ldr	r3, [r2, #8]
 8001f56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f5e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001f62:	688b      	ldr	r3, [r1, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x13a>
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d12b      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f70:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f72:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f78:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f7a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001f7e:	d12a      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f80:	481b      	ldr	r0, [pc, #108]	; (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001f82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f86:	fba1 0100 	umull	r0, r1, r1, r0
 8001f8a:	f7fe fad1 	bl	8000530 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f96:	3301      	adds	r3, #1
 8001f98:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	e003      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa0:	039e      	lsls	r6, r3, #14
 8001fa2:	d49d      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x74>
 8001fa4:	e7c5      	b.n	8001f32 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_RCC_ClockConfig+0x180>)
 8001faa:	4c13      	ldr	r4, [pc, #76]	; (8001ff8 <HAL_RCC_ClockConfig+0x18c>)
 8001fac:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001fae:	4813      	ldr	r0, [pc, #76]	; (8001ffc <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001fb4:	4912      	ldr	r1, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8001fb6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb8:	5ca2      	ldrb	r2, [r4, r2]
 8001fba:	40d3      	lsrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001fbe:	f000 f8e9 	bl	8002194 <HAL_InitTick>
  return HAL_OK;
 8001fc2:	2000      	movs	r0, #0
}
 8001fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001fca:	e7ed      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8001fcc:	2003      	movs	r0, #3
 8001fce:	e7b1      	b.n	8001f34 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd0:	0198      	lsls	r0, r3, #6
 8001fd2:	d485      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x74>
 8001fd4:	e7ad      	b.n	8001f32 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001fd8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001fdc:	2300      	movs	r3, #0
 8001fde:	fba1 0100 	umull	r0, r1, r1, r0
 8001fe2:	f7fe faa5 	bl	8000530 <__aeabi_uldivmod>
 8001fe6:	e7d2      	b.n	8001f8e <HAL_RCC_ClockConfig+0x122>
 8001fe8:	40023c00 	.word	0x40023c00
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	017d7840 	.word	0x017d7840
 8001ff8:	080085f8 	.word	0x080085f8
 8001ffc:	2000010c 	.word	0x2000010c
 8002000:	20000110 	.word	0x20000110

08002004 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002006:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002008:	688b      	ldr	r3, [r1, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d01b      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x46>
 8002012:	2b08      	cmp	r3, #8
 8002014:	d117      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002016:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002018:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800201a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002020:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002024:	d113      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002026:	480f      	ldr	r0, [pc, #60]	; (8002064 <HAL_RCC_GetSysClockFreq+0x60>)
 8002028:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800202c:	fba1 0100 	umull	r0, r1, r1, r0
 8002030:	f7fe fa7e 	bl	8000530 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800203c:	3301      	adds	r3, #1
 800203e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002040:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002044:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002048:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800204c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <HAL_RCC_GetSysClockFreq+0x64>)
 8002050:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002054:	2300      	movs	r3, #0
 8002056:	fba1 0100 	umull	r0, r1, r1, r0
 800205a:	f7fe fa69 	bl	8000530 <__aeabi_uldivmod>
 800205e:	e7e9      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x30>
 8002060:	40023800 	.word	0x40023800
 8002064:	00f42400 	.word	0x00f42400
 8002068:	017d7840 	.word	0x017d7840

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x14>)
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002070:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002072:	4905      	ldr	r1, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002074:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002078:	6808      	ldr	r0, [r1, #0]
 800207a:	5cd3      	ldrb	r3, [r2, r3]
}
 800207c:	40d8      	lsrs	r0, r3
 800207e:	4770      	bx	lr
 8002080:	40023800 	.word	0x40023800
 8002084:	08008608 	.word	0x08008608
 8002088:	20000110 	.word	0x20000110

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002090:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002092:	4905      	ldr	r1, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002094:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002098:	6808      	ldr	r0, [r1, #0]
 800209a:	5cd3      	ldrb	r3, [r2, r3]
}
 800209c:	40d8      	lsrs	r0, r3
 800209e:	4770      	bx	lr
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08008608 	.word	0x08008608
 80020a8:	20000110 	.word	0x20000110

080020ac <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ae:	220f      	movs	r2, #15
 80020b0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80020c0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80020c8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	08db      	lsrs	r3, r3, #3
{
 80020ce:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020d4:	4c05      	ldr	r4, [pc, #20]	; (80020ec <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020d6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020d8:	6823      	ldr	r3, [r4, #0]
}
 80020da:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	600b      	str	r3, [r1, #0]
}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop

080020f4 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 80020f4:	b1e8      	cbz	r0, 8002132 <HAL_SDRAM_Init+0x3e>
{   
 80020f6:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80020f8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002104:	b183      	cbz	r3, 8002128 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002106:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002108:	1d21      	adds	r1, r4, #4
 800210a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800210c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002110:	f000 fb88 	bl	8002824 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002114:	4629      	mov	r1, r5
 8002116:	e9d4 0200 	ldrd	r0, r2, [r4]
 800211a:	f000 fbc1 	bl	80028a0 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800211e:	2301      	movs	r3, #1
  return HAL_OK;
 8002120:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002122:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002126:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002128:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800212c:	f7ff ffe0 	bl	80020f0 <HAL_SDRAM_MspInit>
 8002130:	e7e9      	b.n	8002106 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8002132:	2001      	movs	r0, #1
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop

08002138 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002138:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800213a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d010      	beq.n	8002166 <HAL_SDRAM_SendCommand+0x2e>
 8002144:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002146:	2302      	movs	r3, #2
 8002148:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800214a:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800214c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002150:	f000 fbf8 	bl	8002944 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002154:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8002156:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002158:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800215a:	bf0c      	ite	eq
 800215c:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800215e:	2301      	movne	r3, #1
 8002160:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002164:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002166:	4618      	mov	r0, r3
}
 8002168:	bd38      	pop	{r3, r4, r5, pc}
 800216a:	bf00      	nop

0800216c <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800216c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d00c      	beq.n	8002190 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002176:	2302      	movs	r3, #2
{
 8002178:	b510      	push	{r4, lr}
 800217a:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800217c:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800217e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002182:	f000 fbf5 	bl	8002970 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002186:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8002188:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800218a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800218e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002190:	4618      	mov	r0, r3
}
 8002192:	4770      	bx	lr

08002194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8002194:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002196:	4601      	mov	r1, r0
{
 8002198:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800219a:	2200      	movs	r2, #0
 800219c:	2036      	movs	r0, #54	; 0x36
 800219e:	f7ff f9bd 	bl	800151c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021a2:	2036      	movs	r0, #54	; 0x36
 80021a4:	f7ff f9f0 	bl	8001588 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021aa:	a901      	add	r1, sp, #4
 80021ac:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c0:	f7ff ff74 	bl	80020ac <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80021c4:	9b06      	ldr	r3, [sp, #24]
 80021c6:	b9c3      	cbnz	r3, 80021fa <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c8:	f7ff ff50 	bl	800206c <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 80021ce:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 80021d0:	4c10      	ldr	r4, [pc, #64]	; (8002214 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80021d2:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d6:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 80021da:	490f      	ldr	r1, [pc, #60]	; (8002218 <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80021dc:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80021de:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021e0:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 80021e2:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 80021e4:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021e6:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80021ec:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80021ee:	f000 fbd7 	bl	80029a0 <HAL_TIM_Base_Init>
 80021f2:	b130      	cbz	r0, 8002202 <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
}
 80021f6:	b009      	add	sp, #36	; 0x24
 80021f8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021fa:	f7ff ff37 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 80021fe:	0040      	lsls	r0, r0, #1
 8002200:	e7e4      	b.n	80021cc <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8002202:	4620      	mov	r0, r4
 8002204:	f000 fc50 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
}
 8002208:	b009      	add	sp, #36	; 0x24
 800220a:	bd30      	pop	{r4, r5, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	431bde83 	.word	0x431bde83
 8002214:	20000448 	.word	0x20000448
 8002218:	40001000 	.word	0x40001000

0800221c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 800221c:	f7ff b946 	b.w	80014ac <HAL_IncTick>

08002220 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8002220:	4801      	ldr	r0, [pc, #4]	; (8002228 <TIM6_DAC_IRQHandler+0x8>)
 8002222:	f000 bc5f 	b.w	8002ae4 <HAL_TIM_IRQHandler>
 8002226:	bf00      	nop
 8002228:	20000448 	.word	0x20000448

0800222c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002230:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002232:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002234:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002236:	2b20      	cmp	r3, #32
 8002238:	d147      	bne.n	80022ca <HAL_UART_Transmit+0x9e>
 800223a:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 800223c:	2900      	cmp	r1, #0
 800223e:	d048      	beq.n	80022d2 <HAL_UART_Transmit+0xa6>
 8002240:	fab2 f782 	clz	r7, r2
 8002244:	9201      	str	r2, [sp, #4]
 8002246:	097f      	lsrs	r7, r7, #5
 8002248:	2f00      	cmp	r7, #0
 800224a:	d142      	bne.n	80022d2 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800224c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002250:	4605      	mov	r5, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d039      	beq.n	80022ca <HAL_UART_Transmit+0x9e>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002256:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002258:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225a:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800225c:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002260:	6743      	str	r3, [r0, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002262:	f7ff f92f 	bl	80014c4 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002266:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8002268:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800226a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8002270:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 8002274:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	f000 8083 	beq.w	8002382 <HAL_UART_Transmit+0x156>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 800227c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8002280:	2200      	movs	r2, #0
 8002282:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8002284:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002286:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800228a:	b1ab      	cbz	r3, 80022b8 <HAL_UART_Transmit+0x8c>
 800228c:	1c71      	adds	r1, r6, #1
 800228e:	d124      	bne.n	80022da <HAL_UART_Transmit+0xae>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002290:	69e2      	ldr	r2, [r4, #28]
 8002292:	0612      	lsls	r2, r2, #24
 8002294:	d5fc      	bpl.n	8002290 <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 8002296:	f1b9 0f00 	cmp.w	r9, #0
 800229a:	d034      	beq.n	8002306 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800229c:	f819 3b01 	ldrb.w	r3, [r9], #1
 80022a0:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80022a2:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80022ae:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e9      	bne.n	800228c <HAL_UART_Transmit+0x60>
 80022b8:	1c71      	adds	r1, r6, #1
 80022ba:	d129      	bne.n	8002310 <HAL_UART_Transmit+0xe4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022bc:	69e3      	ldr	r3, [r4, #28]
 80022be:	065a      	lsls	r2, r3, #25
 80022c0:	d5fc      	bpl.n	80022bc <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 80022c2:	2320      	movs	r3, #32
    return HAL_OK;
 80022c4:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80022c6:	676b      	str	r3, [r5, #116]	; 0x74
    return HAL_OK;
 80022c8:	e000      	b.n	80022cc <HAL_UART_Transmit+0xa0>
    return HAL_BUSY;
 80022ca:	2002      	movs	r0, #2
}
 80022cc:	b003      	add	sp, #12
 80022ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80022d2:	2001      	movs	r0, #1
}
 80022d4:	b003      	add	sp, #12
 80022d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022da:	69e3      	ldr	r3, [r4, #28]
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	d4da      	bmi.n	8002296 <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7ff f8f0 	bl	80014c4 <HAL_GetTick>
 80022e4:	eba0 0008 	sub.w	r0, r0, r8
 80022e8:	4286      	cmp	r6, r0
 80022ea:	d339      	bcc.n	8002360 <HAL_UART_Transmit+0x134>
 80022ec:	fab6 f386 	clz	r3, r6
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d134      	bne.n	8002360 <HAL_UART_Transmit+0x134>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022f6:	682c      	ldr	r4, [r5, #0]
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	0752      	lsls	r2, r2, #29
 80022fc:	d5c6      	bpl.n	800228c <HAL_UART_Transmit+0x60>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022fe:	69e2      	ldr	r2, [r4, #28]
 8002300:	0510      	lsls	r0, r2, #20
 8002302:	d5c3      	bpl.n	800228c <HAL_UART_Transmit+0x60>
 8002304:	e019      	b.n	800233a <HAL_UART_Transmit+0x10e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002306:	f837 3b02 	ldrh.w	r3, [r7], #2
 800230a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230e:	e7c7      	b.n	80022a0 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002310:	69e3      	ldr	r3, [r4, #28]
 8002312:	065b      	lsls	r3, r3, #25
 8002314:	d4d5      	bmi.n	80022c2 <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7ff f8d5 	bl	80014c4 <HAL_GetTick>
 800231a:	eba0 0008 	sub.w	r0, r0, r8
 800231e:	fab6 f386 	clz	r3, r6
 8002322:	4286      	cmp	r6, r0
 8002324:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002328:	d31a      	bcc.n	8002360 <HAL_UART_Transmit+0x134>
 800232a:	b9cb      	cbnz	r3, 8002360 <HAL_UART_Transmit+0x134>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800232c:	682c      	ldr	r4, [r5, #0]
 800232e:	6822      	ldr	r2, [r4, #0]
 8002330:	0757      	lsls	r7, r2, #29
 8002332:	d5c1      	bpl.n	80022b8 <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002334:	69e2      	ldr	r2, [r4, #28]
 8002336:	0510      	lsls	r0, r2, #20
 8002338:	d5be      	bpl.n	80022b8 <HAL_UART_Transmit+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800233a:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 800233e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002340:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002342:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002344:	6821      	ldr	r1, [r4, #0]
 8002346:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800234a:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234c:	68a1      	ldr	r1, [r4, #8]
 800234e:	f021 0101 	bic.w	r1, r1, #1
 8002352:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002354:	676a      	str	r2, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002356:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800235a:	67aa      	str	r2, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800235c:	67ea      	str	r2, [r5, #124]	; 0x7c
 800235e:	e7b5      	b.n	80022cc <HAL_UART_Transmit+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002360:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8002362:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8002364:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 8002366:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800236e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002378:	6769      	str	r1, [r5, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800237a:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800237e:	67a9      	str	r1, [r5, #120]	; 0x78
 8002380:	e7a4      	b.n	80022cc <HAL_UART_Transmit+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002382:	692b      	ldr	r3, [r5, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f af79 	bne.w	800227c <HAL_UART_Transmit+0x50>
 800238a:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800238c:	4699      	mov	r9, r3
 800238e:	e775      	b.n	800227c <HAL_UART_Transmit+0x50>

08002390 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002392:	07da      	lsls	r2, r3, #31
{
 8002394:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002396:	d506      	bpl.n	80023a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002398:	6801      	ldr	r1, [r0, #0]
 800239a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800239c:	684a      	ldr	r2, [r1, #4]
 800239e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80023a2:	4322      	orrs	r2, r4
 80023a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023a6:	079c      	lsls	r4, r3, #30
 80023a8:	d506      	bpl.n	80023b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023aa:	6801      	ldr	r1, [r0, #0]
 80023ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80023ae:	684a      	ldr	r2, [r1, #4]
 80023b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023b4:	4322      	orrs	r2, r4
 80023b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023b8:	0759      	lsls	r1, r3, #29
 80023ba:	d506      	bpl.n	80023ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023bc:	6801      	ldr	r1, [r0, #0]
 80023be:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80023c0:	684a      	ldr	r2, [r1, #4]
 80023c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c6:	4322      	orrs	r2, r4
 80023c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ca:	071a      	lsls	r2, r3, #28
 80023cc:	d506      	bpl.n	80023dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023ce:	6801      	ldr	r1, [r0, #0]
 80023d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80023d2:	684a      	ldr	r2, [r1, #4]
 80023d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d8:	4322      	orrs	r2, r4
 80023da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023dc:	06dc      	lsls	r4, r3, #27
 80023de:	d506      	bpl.n	80023ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e0:	6801      	ldr	r1, [r0, #0]
 80023e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80023e4:	688a      	ldr	r2, [r1, #8]
 80023e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ea:	4322      	orrs	r2, r4
 80023ec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023ee:	0699      	lsls	r1, r3, #26
 80023f0:	d506      	bpl.n	8002400 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023f2:	6801      	ldr	r1, [r0, #0]
 80023f4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80023f6:	688a      	ldr	r2, [r1, #8]
 80023f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023fc:	4322      	orrs	r2, r4
 80023fe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002400:	065a      	lsls	r2, r3, #25
 8002402:	d50a      	bpl.n	800241a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002404:	6801      	ldr	r1, [r0, #0]
 8002406:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002408:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800240a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800240e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002412:	ea42 0204 	orr.w	r2, r2, r4
 8002416:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002418:	d00b      	beq.n	8002432 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	d506      	bpl.n	800242c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800241e:	6802      	ldr	r2, [r0, #0]
 8002420:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002422:	6853      	ldr	r3, [r2, #4]
 8002424:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002428:	430b      	orrs	r3, r1
 800242a:	6053      	str	r3, [r2, #4]
}
 800242c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002430:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002432:	684a      	ldr	r2, [r1, #4]
 8002434:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002436:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800243a:	4322      	orrs	r2, r4
 800243c:	604a      	str	r2, [r1, #4]
 800243e:	e7ec      	b.n	800241a <UART_AdvFeatureConfig+0x8a>

08002440 <HAL_UART_Init>:
  if (huart == NULL)
 8002440:	2800      	cmp	r0, #0
 8002442:	d04f      	beq.n	80024e4 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002444:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002446:	b570      	push	{r4, r5, r6, lr}
 8002448:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800244a:	2b00      	cmp	r3, #0
 800244c:	d045      	beq.n	80024da <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 800244e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002452:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002454:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002456:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002458:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800245a:	4302      	orrs	r2, r0
 800245c:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800245e:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002462:	4dbc      	ldr	r5, [pc, #752]	; (8002754 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002464:	4302      	orrs	r2, r0
 8002466:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8002468:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800246a:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800246c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800246e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002470:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002472:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002474:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8002476:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002478:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 800247a:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800247e:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002480:	4db5      	ldr	r5, [pc, #724]	; (8002758 <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002482:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002486:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002488:	ea41 0106 	orr.w	r1, r1, r6
 800248c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002494:	ea42 0201 	orr.w	r2, r2, r1
 8002498:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800249a:	d025      	beq.n	80024e8 <HAL_UART_Init+0xa8>
 800249c:	4aaf      	ldr	r2, [pc, #700]	; (800275c <HAL_UART_Init+0x31c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d044      	beq.n	800252c <HAL_UART_Init+0xec>
 80024a2:	4aaf      	ldr	r2, [pc, #700]	; (8002760 <HAL_UART_Init+0x320>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f000 80f3 	beq.w	8002690 <HAL_UART_Init+0x250>
 80024aa:	4aae      	ldr	r2, [pc, #696]	; (8002764 <HAL_UART_Init+0x324>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d045      	beq.n	800253c <HAL_UART_Init+0xfc>
 80024b0:	4aad      	ldr	r2, [pc, #692]	; (8002768 <HAL_UART_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f000 80d8 	beq.w	8002668 <HAL_UART_Init+0x228>
 80024b8:	4aac      	ldr	r2, [pc, #688]	; (800276c <HAL_UART_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f000 8188 	beq.w	80027d0 <HAL_UART_Init+0x390>
 80024c0:	4aab      	ldr	r2, [pc, #684]	; (8002770 <HAL_UART_Init+0x330>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f000 8198 	beq.w	80027f8 <HAL_UART_Init+0x3b8>
 80024c8:	4aaa      	ldr	r2, [pc, #680]	; (8002774 <HAL_UART_Init+0x334>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f000 815e 	beq.w	800278c <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 80024d0:	2300      	movs	r3, #0
    return HAL_ERROR;
 80024d2:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80024d4:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80024da:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80024de:	f7fe fa35 	bl	800094c <HAL_UART_MspInit>
 80024e2:	e7b4      	b.n	800244e <HAL_UART_Init+0xe>
    return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
}
 80024e6:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024e8:	4ba3      	ldr	r3, [pc, #652]	; (8002778 <HAL_UART_Init+0x338>)
 80024ea:	4aa4      	ldr	r2, [pc, #656]	; (800277c <HAL_UART_Init+0x33c>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80024fa:	d02f      	beq.n	800255c <HAL_UART_Init+0x11c>
    switch (clocksource)
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d8e7      	bhi.n	80024d0 <HAL_UART_Init+0x90>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_UART_Init+0xc8>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	08002657 	.word	0x08002657
 800250c:	08002599 	.word	0x08002599
 8002510:	080026ab 	.word	0x080026ab
 8002514:	080024d1 	.word	0x080024d1
 8002518:	0800267f 	.word	0x0800267f
 800251c:	080024d1 	.word	0x080024d1
 8002520:	080024d1 	.word	0x080024d1
 8002524:	080024d1 	.word	0x080024d1
 8002528:	080026bb 	.word	0x080026bb
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_UART_Init+0x338>)
 800252e:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_UART_Init+0x340>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	e7dc      	b.n	80024f6 <HAL_UART_Init+0xb6>
 800253c:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <HAL_UART_Init+0x338>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	f000 8096 	beq.w	8002678 <HAL_UART_Init+0x238>
 800254c:	d97d      	bls.n	800264a <HAL_UART_Init+0x20a>
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	f000 80a8 	beq.w	80026a4 <HAL_UART_Init+0x264>
 8002554:	2bc0      	cmp	r3, #192	; 0xc0
 8002556:	f000 80c5 	beq.w	80026e4 <HAL_UART_Init+0x2a4>
 800255a:	e7b9      	b.n	80024d0 <HAL_UART_Init+0x90>
    switch (clocksource)
 800255c:	2b08      	cmp	r3, #8
 800255e:	d8b7      	bhi.n	80024d0 <HAL_UART_Init+0x90>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HAL_UART_Init+0x128>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	0800274d 	.word	0x0800274d
 800256c:	08002723 	.word	0x08002723
 8002570:	0800273d 	.word	0x0800273d
 8002574:	080024d1 	.word	0x080024d1
 8002578:	08002737 	.word	0x08002737
 800257c:	080024d1 	.word	0x080024d1
 8002580:	080024d1 	.word	0x080024d1
 8002584:	080024d1 	.word	0x080024d1
 8002588:	080026eb 	.word	0x080026eb
  UART_GETCLOCKSOURCE(huart, clocksource);
 800258c:	2b00      	cmp	r3, #0
 800258e:	d19f      	bne.n	80024d0 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002590:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002594:	f000 80c5 	beq.w	8002722 <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002598:	f7ff fd78 	bl	800208c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80025a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a6:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025a8:	f1a2 0110 	sub.w	r1, r2, #16
 80025ac:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80025b0:	4299      	cmp	r1, r3
 80025b2:	d88d      	bhi.n	80024d0 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 80025b4:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 80025b6:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 80025b8:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 80025ba:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	f040 8082 	bne.w	80026ca <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c6:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80025e2:	f7fe ff6f 	bl	80014c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025e6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80025e8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	0710      	lsls	r0, r2, #28
 80025ee:	d407      	bmi.n	8002600 <HAL_UART_Init+0x1c0>
  huart->gState = HAL_UART_STATE_READY;
 80025f0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80025f2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80025f4:	6762      	str	r2, [r4, #116]	; 0x74
  return HAL_OK;
 80025f6:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80025f8:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80025fa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002600:	69dd      	ldr	r5, [r3, #28]
 8002602:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8002606:	d1f3      	bne.n	80025f0 <HAL_UART_Init+0x1b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002608:	f7fe ff5c 	bl	80014c4 <HAL_GetTick>
 800260c:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800260e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002614:	f080 80cd 	bcs.w	80027b2 <HAL_UART_Init+0x372>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	0751      	lsls	r1, r2, #29
 800261c:	d5f0      	bpl.n	8002600 <HAL_UART_Init+0x1c0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	0512      	lsls	r2, r2, #20
 8002622:	d5ed      	bpl.n	8002600 <HAL_UART_Init+0x1c0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002624:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8002628:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800262a:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800262c:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8002634:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	f021 0101 	bic.w	r1, r1, #1
 800263c:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800263e:	6762      	str	r2, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 8002640:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8002644:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002646:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8002648:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800264a:	2b00      	cmp	r3, #0
 800264c:	f47f af40 	bne.w	80024d0 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002650:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002654:	d07a      	beq.n	800274c <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002656:	f7ff fd09 	bl	800206c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8002660:	fbb2 f2f3 	udiv	r2, r2, r3
 8002664:	b292      	uxth	r2, r2
 8002666:	e79f      	b.n	80025a8 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_UART_Init+0x338>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002676:	d12d      	bne.n	80026d4 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002678:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800267c:	d05b      	beq.n	8002736 <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 800267e:	f7ff fcc1 	bl	8002004 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002682:	6863      	ldr	r3, [r4, #4]
 8002684:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8002688:	fbb2 f2f3 	udiv	r2, r2, r3
 800268c:	b292      	uxth	r2, r2
 800268e:	e78b      	b.n	80025a8 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_UART_Init+0x338>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800269a:	2b10      	cmp	r3, #16
 800269c:	d0ec      	beq.n	8002678 <HAL_UART_Init+0x238>
 800269e:	d9d4      	bls.n	800264a <HAL_UART_Init+0x20a>
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d13b      	bne.n	800271c <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026a8:	d048      	beq.n	800273c <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026aa:	6863      	ldr	r3, [r4, #4]
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <HAL_UART_Init+0x344>)
 80026ae:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80026b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b6:	b292      	uxth	r2, r2
 80026b8:	e776      	b.n	80025a8 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	085a      	lsrs	r2, r3, #1
 80026be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80026c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c6:	b292      	uxth	r2, r2
 80026c8:	e76e      	b.n	80025a8 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff fe60 	bl	8002390 <UART_AdvFeatureConfig>
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	e778      	b.n	80025c6 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026d4:	d9b9      	bls.n	800264a <HAL_UART_Init+0x20a>
 80026d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026da:	d0e3      	beq.n	80026a4 <HAL_UART_Init+0x264>
 80026dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026e0:	f47f aef6 	bne.w	80024d0 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026e8:	d1e7      	bne.n	80026ba <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026ea:	6862      	ldr	r2, [r4, #4]
 80026ec:	0853      	lsrs	r3, r2, #1
 80026ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80026f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f6:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f8:	f1a3 0110 	sub.w	r1, r3, #16
 80026fc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002700:	4291      	cmp	r1, r2
 8002702:	f63f aee5 	bhi.w	80024d0 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002706:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800270a:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 800270e:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8002716:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 800271a:	e750      	b.n	80025be <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800271c:	2b30      	cmp	r3, #48	; 0x30
 800271e:	d0e1      	beq.n	80026e4 <HAL_UART_Init+0x2a4>
 8002720:	e6d6      	b.n	80024d0 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002722:	f7ff fcb3 	bl	800208c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002726:	6862      	ldr	r2, [r4, #4]
 8002728:	0853      	lsrs	r3, r2, #1
 800272a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800272e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	e7e0      	b.n	80026f8 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002736:	f7ff fc65 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 800273a:	e7f4      	b.n	8002726 <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800273c:	6862      	ldr	r2, [r4, #4]
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_UART_Init+0x348>)
 8002740:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002744:	fbb3 f3f2 	udiv	r3, r3, r2
 8002748:	b29b      	uxth	r3, r3
 800274a:	e7d5      	b.n	80026f8 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800274c:	f7ff fc8e 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002750:	e7e9      	b.n	8002726 <HAL_UART_Init+0x2e6>
 8002752:	bf00      	nop
 8002754:	efff69f3 	.word	0xefff69f3
 8002758:	40011000 	.word	0x40011000
 800275c:	40004400 	.word	0x40004400
 8002760:	40004800 	.word	0x40004800
 8002764:	40004c00 	.word	0x40004c00
 8002768:	40005000 	.word	0x40005000
 800276c:	40011400 	.word	0x40011400
 8002770:	40007800 	.word	0x40007800
 8002774:	40007c00 	.word	0x40007c00
 8002778:	40023800 	.word	0x40023800
 800277c:	080085e4 	.word	0x080085e4
 8002780:	080085e8 	.word	0x080085e8
 8002784:	00f42400 	.word	0x00f42400
 8002788:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_UART_Init+0x3e0>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	f43f af6d 	beq.w	8002678 <HAL_UART_Init+0x238>
 800279e:	f67f af54 	bls.w	800264a <HAL_UART_Init+0x20a>
 80027a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a6:	f43f af7d 	beq.w	80026a4 <HAL_UART_Init+0x264>
 80027aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027ae:	d099      	beq.n	80026e4 <HAL_UART_Init+0x2a4>
 80027b0:	e68e      	b.n	80024d0 <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b2:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80027b4:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80027c6:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80027c8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80027cc:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_UART_Init+0x3e0>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	f43f af4b 	beq.w	8002678 <HAL_UART_Init+0x238>
 80027e2:	f67f aed3 	bls.w	800258c <HAL_UART_Init+0x14c>
 80027e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ea:	f43f af5b 	beq.w	80026a4 <HAL_UART_Init+0x264>
 80027ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027f2:	f43f af77 	beq.w	80026e4 <HAL_UART_Init+0x2a4>
 80027f6:	e66b      	b.n	80024d0 <HAL_UART_Init+0x90>
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_UART_Init+0x3e0>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	f43f af37 	beq.w	8002678 <HAL_UART_Init+0x238>
 800280a:	f67f af1e 	bls.w	800264a <HAL_UART_Init+0x20a>
 800280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002812:	f43f af47 	beq.w	80026a4 <HAL_UART_Init+0x264>
 8002816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800281a:	f43f af63 	beq.w	80026e4 <HAL_UART_Init+0x2a4>
 800281e:	e657      	b.n	80024d0 <HAL_UART_Init+0x90>
 8002820:	40023800 	.word	0x40023800

08002824 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002828:	680f      	ldr	r7, [r1, #0]
 800282a:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800282e:	2f01      	cmp	r7, #1
 8002830:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8002834:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 8002838:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 800283c:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8002840:	d012      	beq.n	8002868 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002842:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002844:	4f15      	ldr	r7, [pc, #84]	; (800289c <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002846:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002848:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800284c:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800284e:	4322      	orrs	r2, r4
 8002850:	ea42 0308 	orr.w	r3, r2, r8
 8002854:	ea43 030c 	orr.w	r3, r3, ip
 8002858:	4333      	orrs	r3, r6
 800285a:	432b      	orrs	r3, r5
 800285c:	430b      	orrs	r3, r1
 800285e:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002860:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8002862:	2000      	movs	r0, #0
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002868:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800286c:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800286e:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002870:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002874:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002878:	4c08      	ldr	r4, [pc, #32]	; (800289c <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800287a:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800287e:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002880:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002884:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002888:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800288a:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800288c:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800288e:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002890:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002892:	6043      	str	r3, [r0, #4]
}
 8002894:	2000      	movs	r0, #0
 8002896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800289a:	bf00      	nop
 800289c:	ffff8000 	.word	0xffff8000

080028a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80028a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a4:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80028a6:	2a01      	cmp	r2, #1
 80028a8:	68cf      	ldr	r7, [r1, #12]
 80028aa:	694e      	ldr	r6, [r1, #20]
 80028ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80028b0:	684d      	ldr	r5, [r1, #4]
 80028b2:	f107 37ff 	add.w	r7, r7, #4294967295
 80028b6:	688c      	ldr	r4, [r1, #8]
 80028b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80028bc:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80028c0:	f105 35ff 	add.w	r5, r5, #4294967295
 80028c4:	6809      	ldr	r1, [r1, #0]
 80028c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80028ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80028ce:	ea4f 3707 	mov.w	r7, r7, lsl #12
 80028d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80028d6:	ea4f 5606 	mov.w	r6, r6, lsl #20
 80028da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80028de:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80028e2:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80028e6:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 80028ea:	d012      	beq.n	8002912 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80028ec:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80028f0:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80028f2:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80028f6:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80028fa:	ea42 0305 	orr.w	r3, r2, r5
 80028fe:	430b      	orrs	r3, r1
 8002900:	ea43 030e 	orr.w	r3, r3, lr
 8002904:	ea43 030c 	orr.w	r3, r3, ip
 8002908:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800290a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800290c:	2000      	movs	r0, #0
 800290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002912:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002914:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002918:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800291a:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800291e:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002920:	4e07      	ldr	r6, [pc, #28]	; (8002940 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002922:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002926:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800292a:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800292c:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002930:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002932:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002934:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002936:	60c3      	str	r3, [r0, #12]
}
 8002938:	2000      	movs	r0, #0
 800293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800293e:	bf00      	nop
 8002940:	ff0f0fff 	.word	0xff0f0fff

08002944 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002944:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 8002946:	2200      	movs	r2, #0
{
 8002948:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800294a:	684d      	ldr	r5, [r1, #4]
{
 800294c:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800294e:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8002950:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 8002952:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002954:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8002956:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800295a:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800295e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002960:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002964:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 8002966:	9b01      	ldr	r3, [sp, #4]
 8002968:	6123      	str	r3, [r4, #16]
}
 800296a:	b002      	add	sp, #8
 800296c:	bc30      	pop	{r4, r5}
 800296e:	4770      	bx	lr

08002970 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002970:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8002972:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8002974:	6953      	ldr	r3, [r2, #20]
 8002976:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800297a:	6151      	str	r1, [r2, #20]
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002982:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002986:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800298a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800298e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002992:	6099      	str	r1, [r3, #8]
#endif
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d065      	beq.n	8002a70 <HAL_TIM_Base_Init+0xd0>
{
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80029a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029aa:	4604      	mov	r4, r0
 80029ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03b      	beq.n	8002a2c <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80029b6:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b8:	4e36      	ldr	r6, [pc, #216]	; (8002a94 <HAL_TIM_Base_Init+0xf4>)
 80029ba:	4f37      	ldr	r7, [pc, #220]	; (8002a98 <HAL_TIM_Base_Init+0xf8>)
 80029bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80029c0:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80029c8:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80029cc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ce:	fab6 f686 	clz	r6, r6
 80029d2:	fab7 f787 	clz	r7, r7
 80029d6:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80029da:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80029de:	d02a      	beq.n	8002a36 <HAL_TIM_Base_Init+0x96>
 80029e0:	bb4e      	cbnz	r6, 8002a36 <HAL_TIM_Base_Init+0x96>
 80029e2:	492e      	ldr	r1, [pc, #184]	; (8002a9c <HAL_TIM_Base_Init+0xfc>)
 80029e4:	428a      	cmp	r2, r1
 80029e6:	d045      	beq.n	8002a74 <HAL_TIM_Base_Init+0xd4>
 80029e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80029ec:	428a      	cmp	r2, r1
 80029ee:	d041      	beq.n	8002a74 <HAL_TIM_Base_Init+0xd4>
 80029f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80029f4:	428a      	cmp	r2, r1
 80029f6:	d042      	beq.n	8002a7e <HAL_TIM_Base_Init+0xde>
 80029f8:	2f00      	cmp	r7, #0
 80029fa:	d140      	bne.n	8002a7e <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fc:	4928      	ldr	r1, [pc, #160]	; (8002aa0 <HAL_TIM_Base_Init+0x100>)
 80029fe:	428a      	cmp	r2, r1
 8002a00:	d01e      	beq.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002a06:	428a      	cmp	r2, r1
 8002a08:	d01a      	beq.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002a0e:	428a      	cmp	r2, r1
 8002a10:	d016      	beq.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a12:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8002a16:	428a      	cmp	r2, r1
 8002a18:	d012      	beq.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002a1e:	428a      	cmp	r2, r1
 8002a20:	d00e      	beq.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002a26:	428a      	cmp	r2, r1
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_Base_Init+0xa8>
 8002a2a:	e009      	b.n	8002a40 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002a2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a30:	f7ff ffb4 	bl	800299c <HAL_TIM_Base_MspInit>
 8002a34:	e7be      	b.n	80029b4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a36:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a3a:	68a0      	ldr	r0, [r4, #8]
 8002a3c:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a44:	6920      	ldr	r0, [r4, #16]
 8002a46:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	69a1      	ldr	r1, [r4, #24]
 8002a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a52:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002a54:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a56:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a58:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5a:	b936      	cbnz	r6, 8002a6a <HAL_TIM_Base_Init+0xca>
 8002a5c:	b92f      	cbnz	r7, 8002a6a <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5e:	2301      	movs	r3, #1
  return HAL_OK;
 8002a60:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002a62:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8002a6a:	6963      	ldr	r3, [r4, #20]
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	e7f6      	b.n	8002a5e <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8002a70:	2001      	movs	r0, #1
}
 8002a72:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a78:	68a1      	ldr	r1, [r4, #8]
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	e7e0      	b.n	8002a40 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a84:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a86:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8002a88:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a8c:	d0d8      	beq.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a8e:	2f00      	cmp	r7, #0
 8002a90:	d1d6      	bne.n	8002a40 <HAL_TIM_Base_Init+0xa0>
 8002a92:	e7b3      	b.n	80029fc <HAL_TIM_Base_Init+0x5c>
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010400 	.word	0x40010400
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40000c00 	.word	0x40000c00

08002aa8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	f041 0101 	orr.w	r1, r1, #1
 8002ab2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	2a06      	cmp	r2, #6
 8002aba:	d006      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x22>
 8002abc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
}
 8002aca:	2000      	movs	r0, #0
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	00010007 	.word	0x00010007

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <HAL_TIM_IC_CaptureCallback>:
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <HAL_TIM_PWM_PulseFinishedCallback>:
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <HAL_TIM_TriggerCallback>:
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	6803      	ldr	r3, [r0, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	0791      	lsls	r1, r2, #30
{
 8002aea:	b510      	push	{r4, lr}
 8002aec:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aee:	d502      	bpl.n	8002af6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	0792      	lsls	r2, r2, #30
 8002af4:	d468      	bmi.n	8002bc8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	0752      	lsls	r2, r2, #29
 8002afa:	d502      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	0750      	lsls	r0, r2, #29
 8002b00:	d44f      	bmi.n	8002ba2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	0711      	lsls	r1, r2, #28
 8002b06:	d502      	bpl.n	8002b0e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	0712      	lsls	r2, r2, #28
 8002b0c:	d437      	bmi.n	8002b7e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	06d0      	lsls	r0, r2, #27
 8002b12:	d502      	bpl.n	8002b1a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	06d1      	lsls	r1, r2, #27
 8002b18:	d41e      	bmi.n	8002b58 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	07d2      	lsls	r2, r2, #31
 8002b1e:	d502      	bpl.n	8002b26 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	07d0      	lsls	r0, r2, #31
 8002b24:	d469      	bmi.n	8002bfa <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	0611      	lsls	r1, r2, #24
 8002b2a:	d502      	bpl.n	8002b32 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	0612      	lsls	r2, r2, #24
 8002b30:	d46b      	bmi.n	8002c0a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	05d0      	lsls	r0, r2, #23
 8002b36:	d502      	bpl.n	8002b3e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	0611      	lsls	r1, r2, #24
 8002b3c:	d46d      	bmi.n	8002c1a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	0652      	lsls	r2, r2, #25
 8002b42:	d502      	bpl.n	8002b4a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	0650      	lsls	r0, r2, #25
 8002b48:	d46f      	bmi.n	8002c2a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	0691      	lsls	r1, r2, #26
 8002b4e:	d502      	bpl.n	8002b56 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	0692      	lsls	r2, r2, #26
 8002b54:	d449      	bmi.n	8002bea <HAL_TIM_IRQHandler+0x106>
}
 8002b56:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b58:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b60:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b64:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b6a:	d16f      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6c:	f7ff ffb2 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff ffb3 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	2200      	movs	r2, #0
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	7722      	strb	r2, [r4, #28]
 8002b7c:	e7cd      	b.n	8002b1a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b7e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002b84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b86:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8c:	079b      	lsls	r3, r3, #30
 8002b8e:	d15a      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b90:	f7ff ffa0 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff ffa1 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	7722      	strb	r2, [r4, #28]
 8002ba0:	e7b5      	b.n	8002b0e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ba2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002baa:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bac:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bb0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002bb4:	d144      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	f7ff ff8d 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ff8e 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	7722      	strb	r2, [r4, #28]
 8002bc6:	e79c      	b.n	8002b02 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bcc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bce:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd4:	0799      	lsls	r1, r3, #30
 8002bd6:	d130      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	f7ff ff7c 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ff7d 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	2200      	movs	r2, #0
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	7722      	strb	r2, [r4, #28]
 8002be8:	e785      	b.n	8002af6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002bee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf0:	611a      	str	r2, [r3, #16]
}
 8002bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002bf6:	f000 b82d 	b.w	8002c54 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bfa:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c02:	f7ff fb0b 	bl	800221c <HAL_TIM_PeriodElapsedCallback>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	e78d      	b.n	8002b26 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002c0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c12:	f000 f821 	bl	8002c58 <HAL_TIMEx_BreakCallback>
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	e78b      	b.n	8002b32 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002c1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002c22:	f000 f81b 	bl	8002c5c <HAL_TIMEx_Break2Callback>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	e789      	b.n	8002b3e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002c2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c30:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c32:	f7ff ff55 	bl	8002ae0 <HAL_TIM_TriggerCallback>
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	e787      	b.n	8002b4a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	f7ff ff4d 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e7d0      	b.n	8002be2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c40:	f7ff ff4a 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e7bc      	b.n	8002bc0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	f7ff ff47 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 8002c4a:	e7a6      	b.n	8002b9a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4c:	f7ff ff44 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e791      	b.n	8002b76 <HAL_TIM_IRQHandler+0x92>
 8002c52:	bf00      	nop

08002c54 <HAL_TIMEx_CommutCallback>:
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop

08002c58 <HAL_TIMEx_BreakCallback>:
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop

08002c5c <HAL_TIMEx_Break2Callback>:
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <_ux_device_class_cdc_acm_entry>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND* command)
{
 8002c60:	b508      	push	{r3, lr}
	UINT status;

	/* The command request will tell us we need to do here, either a enumeration
	 * query, an activation or a deactivation. */
	switch (command->ux_slave_class_command_request)
 8002c62:	6803      	ldr	r3, [r0, #0]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d819      	bhi.n	8002c9e <_ux_device_class_cdc_acm_entry+0x3e>
 8002c6a:	e8df f003 	tbb	[pc, r3]
 8002c6e:	0f0a      	.short	0x0f0a
 8002c70:	18041512 	.word	0x18041512
 8002c74:	07          	.byte	0x07
 8002c75:	00          	.byte	0x00
	{
		case UX_SLAVE_CLASS_COMMAND_INITIALIZE:
			/* Call the init function of the CDC ACM class. */
			status = _ux_device_class_cdc_acm_initialize(command);
 8002c76:	f000 f817 	bl	8002ca8 <_ux_device_class_cdc_acm_initialize>
					UX_TRACE_ERRORS, 0, 0)

			/* Return an error. */
			return (UX_FUNCTION_NOT_SUPPORTED);
	}
}
 8002c7a:	bd08      	pop	{r3, pc}
			status = _ux_device_class_cdc_acm_uninitialize(command);
 8002c7c:	f000 f8be 	bl	8002dfc <_ux_device_class_cdc_acm_uninitialize>
			return status;
 8002c80:	e7fb      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
			if (command->ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 8002c82:	6943      	ldr	r3, [r0, #20]
 8002c84:	2b0a      	cmp	r3, #10
 8002c86:	d10c      	bne.n	8002ca2 <_ux_device_class_cdc_acm_entry+0x42>
				return (UX_SUCCESS);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e7f6      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
			status = _ux_device_class_cdc_acm_activate(command);
 8002c8c:	f001 fcef 	bl	800466e <_ux_device_class_cdc_acm_activate>
			return status;
 8002c90:	e7f3      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
			status = _ux_device_class_cdc_acm_deactivate(command);
 8002c92:	f001 fd71 	bl	8004778 <_ux_device_class_cdc_acm_deactivate>
			return status;
 8002c96:	e7f0      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
			status = _ux_device_class_cdc_acm_control_request(command);
 8002c98:	f001 fcf6 	bl	8004688 <_ux_device_class_cdc_acm_control_request>
			return status;
 8002c9c:	e7ed      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
			return (UX_FUNCTION_NOT_SUPPORTED);
 8002c9e:	2054      	movs	r0, #84	; 0x54
 8002ca0:	e7eb      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
				return (UX_NO_CLASS_MATCH);
 8002ca2:	2057      	movs	r0, #87	; 0x57
 8002ca4:	e7e9      	b.n	8002c7a <_ux_device_class_cdc_acm_entry+0x1a>
	...

08002ca8 <_ux_device_class_cdc_acm_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND* command)
{
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	4605      	mov	r5, r0
	/* Get the class container. */
	UX_SLAVE_CLASS* class = command->ux_slave_class_command_class_ptr;
 8002cac:	6a06      	ldr	r6, [r0, #32]

	/* Create an instance of the device cdc_acm class. */
	UX_SLAVE_CLASS_CDC_ACM* cdc_acm = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8002cae:	f44f 721a 	mov.w	r2, #616	; 0x268
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	f001 fb49 	bl	800434c <_ux_utility_memory_allocate>
			sizeof(UX_SLAVE_CLASS_CDC_ACM));

	/* Check for successful allocation. */
	if (cdc_acm == UX_NULL)
 8002cba:	b388      	cbz	r0, 8002d20 <_ux_device_class_cdc_acm_initialize+0x78>
 8002cbc:	4604      	mov	r4, r0
		return (UX_MEMORY_INSUFFICIENT);

	/* Save the address of the CDC instance inside the CDC container. */
	class->ux_slave_class_instance = (VOID*)cdc_acm;
 8002cbe:	64b0      	str	r0, [r6, #72]	; 0x48

	/* Get the pointer to the application parameters for the cdc_acm class. */
	UX_SLAVE_CLASS_CDC_ACM_PARAMETER* cdc_acm_parameter = command->ux_slave_class_command_parameter;
 8002cc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24

	/* Store the start and stop signals if needed by the application. */
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate =
			cdc_acm_parameter->ux_slave_class_cdc_acm_instance_activate;
 8002cc2:	681a      	ldr	r2, [r3, #0]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate =
 8002cc4:	6042      	str	r2, [r0, #4]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate =
			cdc_acm_parameter->ux_slave_class_cdc_acm_instance_deactivate;
 8002cc6:	685a      	ldr	r2, [r3, #4]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate =
 8002cc8:	6082      	str	r2, [r0, #8]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change =
			cdc_acm_parameter->ux_slave_class_cdc_acm_parameter_change;
 8002cca:	689b      	ldr	r3, [r3, #8]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change =
 8002ccc:	60c3      	str	r3, [r0, #12]

	/*--------------------------------------------------------------------------------------------*/

	/* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time. */
	UINT status = _ux_utility_mutex_create(&cdc_acm->ux_slave_class_cdc_acm_endpoint_in_mutex,
 8002cce:	f100 0510 	add.w	r5, r0, #16
 8002cd2:	4914      	ldr	r1, [pc, #80]	; (8002d24 <_ux_device_class_cdc_acm_initialize+0x7c>)
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f001 fc73 	bl	80045c0 <_ux_utility_mutex_create>
			"ux_slave_class_cdc_acm_in_mutex");

	/* Check Mutex creation error. */
	if (status != UX_SUCCESS)
 8002cda:	b9a0      	cbnz	r0, 8002d06 <_ux_device_class_cdc_acm_initialize+0x5e>
		/* Return fatal error. */
		return (UX_MUTEX_ERROR);
	}

	/* Out Mutex. */
	status = _ux_utility_mutex_create(&cdc_acm->ux_slave_class_cdc_acm_endpoint_out_mutex,
 8002cdc:	4912      	ldr	r1, [pc, #72]	; (8002d28 <_ux_device_class_cdc_acm_initialize+0x80>)
 8002cde:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8002ce2:	f001 fc6d 	bl	80045c0 <_ux_utility_mutex_create>
			"ux_slave_class_cdc_acm_out_mutex");

	/* Check Mutex creation error. */
	if (status != UX_SUCCESS)
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	b990      	cbnz	r0, 8002d10 <_ux_device_class_cdc_acm_initialize+0x68>
		/* Return fatal error. */
		return (UX_MUTEX_ERROR);
	}

	/* Update the line coding fields with default values. */
	cdc_acm->ux_slave_class_cdc_acm_baudrate = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 8002cea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cee:	67a2      	str	r2, [r4, #120]	; 0x78
	cdc_acm->ux_slave_class_cdc_acm_stop_bit = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
	cdc_acm->ux_slave_class_cdc_acm_parity = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
	cdc_acm->ux_slave_class_cdc_acm_data_bit = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e

	/* Return completion status. */
	return (UX_SUCCESS);
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
		_ux_utility_memory_free(cdc_acm);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f001 fbce 	bl	80044a8 <_ux_utility_memory_free>
		return (UX_MUTEX_ERROR);
 8002d0c:	2317      	movs	r3, #23
 8002d0e:	e7f8      	b.n	8002d02 <_ux_device_class_cdc_acm_initialize+0x5a>
		_ux_utility_mutex_delete(&cdc_acm->ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002d10:	4628      	mov	r0, r5
 8002d12:	f001 fc64 	bl	80045de <_ux_utility_mutex_delete>
		_ux_utility_memory_free(cdc_acm);
 8002d16:	4620      	mov	r0, r4
 8002d18:	f001 fbc6 	bl	80044a8 <_ux_utility_memory_free>
		return (UX_MUTEX_ERROR);
 8002d1c:	2317      	movs	r3, #23
 8002d1e:	e7f0      	b.n	8002d02 <_ux_device_class_cdc_acm_initialize+0x5a>
		return (UX_MEMORY_INSUFFICIENT);
 8002d20:	2312      	movs	r3, #18
 8002d22:	e7ee      	b.n	8002d02 <_ux_device_class_cdc_acm_initialize+0x5a>
 8002d24:	08008610 	.word	0x08008610
 8002d28:	08008630 	.word	0x08008630

08002d2c <_ux_device_class_cdc_acm_read>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM* cdc_acm, UCHAR* buffer,
		ULONG requested_length, ULONG* actual_length)
{
 8002d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d30:	461f      	mov	r7, r3
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_CDC_ACM_READ, cdc_acm, buffer, requested_length,
			0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

	/* Check if current cdc-acm is using callback or not. We cannot use direct reads with callback on. */
	if (cdc_acm->ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 8002d32:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d05a      	beq.n	8002df0 <_ux_device_class_cdc_acm_read+0xc4>
 8002d3a:	460e      	mov	r6, r1
 8002d3c:	4615      	mov	r5, r2
		/* Not allowed. */
		return (UX_ERROR);

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <_ux_device_class_cdc_acm_read+0xcc>)
 8002d40:	f8d3 8000 	ldr.w	r8, [r3]

	/* As long as the device is in the CONFIGURED state. */
	if (device->ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8002d44:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d111      	bne.n	8002d70 <_ux_device_class_cdc_acm_read+0x44>
		/* Cannot proceed with command, the interface is down. */
		return (UX_CONFIGURATION_HANDLE_UNKNOWN);
	}

	/* This is the first time we are activated. We need the interface to the class. */
	UX_SLAVE_INTERFACE* interface = cdc_acm->ux_slave_class_cdc_acm_interface;
 8002d4c:	6803      	ldr	r3, [r0, #0]

	/* Locate the endpoints. */
	UX_SLAVE_ENDPOINT* endpoint = interface->ux_slave_interface_first_endpoint;
 8002d4e:	6b5c      	ldr	r4, [r3, #52]	; 0x34

	/* Check the endpoint direction, if OUT we have the correct endpoint. */
	if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8002d50:	6963      	ldr	r3, [r4, #20]
 8002d52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d56:	d000      	beq.n	8002d5a <_ux_device_class_cdc_acm_read+0x2e>
			!= UX_ENDPOINT_OUT)
	{
		/* So the next endpoint has to be the OUT endpoint. */
		endpoint = endpoint->ux_slave_endpoint_next_endpoint;
 8002d58:	6a64      	ldr	r4, [r4, #36]	; 0x24

	UINT status = UX_SUCCESS;
	ULONG local_requested_length;

	/* Protect this thread. */
	_ux_utility_mutex_on(&cdc_acm->ux_slave_class_cdc_acm_endpoint_out_mutex);
 8002d5a:	f100 0944 	add.w	r9, r0, #68	; 0x44
 8002d5e:	4648      	mov	r0, r9
 8002d60:	f001 fc45 	bl	80045ee <_ux_utility_mutex_on>

	/* All CDC reading  are on the endpoint OUT, from the host. */
	UX_SLAVE_TRANSFER* transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 8002d64:	f104 0a30 	add.w	sl, r4, #48	; 0x30

	/* Reset the actual length. */
	*actual_length = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	603b      	str	r3, [r7, #0]
	UINT status = UX_SUCCESS;
 8002d6c:	469b      	mov	fp, r3

	/* Check if we need more transactions. */
	while (device->ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8002d6e:	e01e      	b.n	8002dae <_ux_device_class_cdc_acm_read+0x82>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS,
 8002d70:	2251      	movs	r2, #81	; 0x51
 8002d72:	2107      	movs	r1, #7
 8002d74:	2002      	movs	r0, #2
 8002d76:	f001 fa39 	bl	80041ec <_ux_system_error_handler>
		return (UX_CONFIGURATION_HANDLE_UNKNOWN);
 8002d7a:	f04f 0b51 	mov.w	fp, #81	; 0x51
		return (UX_TRANSFER_NO_ANSWER);
	}
	else
		/* Simply return the last transaction result. */
		return (status);
}
 8002d7e:	4658      	mov	r0, fp
 8002d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = _ux_device_stack_transfer_request(transfer_request, local_requested_length,
 8002d84:	460a      	mov	r2, r1
 8002d86:	4650      	mov	r0, sl
 8002d88:	f001 f9d6 	bl	8004138 <_ux_device_stack_transfer_request>
		if (status == UX_SUCCESS)
 8002d8c:	4683      	mov	fp, r0
 8002d8e:	b9e0      	cbnz	r0, 8002dca <_ux_device_class_cdc_acm_read+0x9e>
			_ux_utility_memory_copy(buffer,
 8002d90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d92:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002d94:	4630      	mov	r0, r6
 8002d96:	f001 fb7c 	bl	8004492 <_ux_utility_memory_copy>
			buffer += transfer_request->ux_slave_transfer_request_actual_length;
 8002d9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d9c:	4416      	add	r6, r2
			*actual_length += transfer_request->ux_slave_transfer_request_actual_length;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	603b      	str	r3, [r7, #0]
			requested_length -= transfer_request->ux_slave_transfer_request_actual_length;
 8002da4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002da6:	1aed      	subs	r5, r5, r3
					< endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8002da8:	69e2      	ldr	r2, [r4, #28]
			if (transfer_request->ux_slave_transfer_request_actual_length
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d309      	bcc.n	8002dc2 <_ux_device_class_cdc_acm_read+0x96>
	while (device->ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8002dae:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d10d      	bne.n	8002dd2 <_ux_device_class_cdc_acm_read+0xa6>
 8002db6:	b165      	cbz	r5, 8002dd2 <_ux_device_class_cdc_acm_read+0xa6>
		if (requested_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8002db8:	69e1      	ldr	r1, [r4, #28]
 8002dba:	42a9      	cmp	r1, r5
 8002dbc:	d3e2      	bcc.n	8002d84 <_ux_device_class_cdc_acm_read+0x58>
			local_requested_length = requested_length;
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	e7e0      	b.n	8002d84 <_ux_device_class_cdc_acm_read+0x58>
				_ux_utility_mutex_off(&cdc_acm->ux_slave_class_cdc_acm_endpoint_out_mutex);
 8002dc2:	4648      	mov	r0, r9
 8002dc4:	f001 fc0f 	bl	80045e6 <_ux_utility_mutex_off>
				return (UX_SUCCESS);
 8002dc8:	e7d9      	b.n	8002d7e <_ux_device_class_cdc_acm_read+0x52>
			_ux_utility_mutex_off(&cdc_acm->ux_slave_class_cdc_acm_endpoint_out_mutex);
 8002dca:	4648      	mov	r0, r9
 8002dcc:	f001 fc0b 	bl	80045e6 <_ux_utility_mutex_off>
			return (status);
 8002dd0:	e7d5      	b.n	8002d7e <_ux_device_class_cdc_acm_read+0x52>
	_ux_utility_mutex_off(&cdc_acm->ux_slave_class_cdc_acm_endpoint_out_mutex);
 8002dd2:	4648      	mov	r0, r9
 8002dd4:	f001 fc07 	bl	80045e6 <_ux_utility_mutex_off>
	if (device->ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8002dd8:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d0ce      	beq.n	8002d7e <_ux_device_class_cdc_acm_read+0x52>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS,
 8002de0:	2222      	movs	r2, #34	; 0x22
 8002de2:	2107      	movs	r1, #7
 8002de4:	2002      	movs	r0, #2
 8002de6:	f001 fa01 	bl	80041ec <_ux_system_error_handler>
		return (UX_TRANSFER_NO_ANSWER);
 8002dea:	f04f 0b22 	mov.w	fp, #34	; 0x22
 8002dee:	e7c6      	b.n	8002d7e <_ux_device_class_cdc_acm_read+0x52>
		return (UX_ERROR);
 8002df0:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8002df4:	e7c3      	b.n	8002d7e <_ux_device_class_cdc_acm_read+0x52>
 8002df6:	bf00      	nop
 8002df8:	20000488 	.word	0x20000488

08002dfc <_ux_device_class_cdc_acm_uninitialize>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8002dfc:	b510      	push	{r4, lr}
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8002dfe:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8002e00:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8002e02:	b154      	cbz	r4, 8002e1a <_ux_device_class_cdc_acm_uninitialize+0x1e>
    {

        /* Delete the IN endpoint mutex.  */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002e04:	f104 0010 	add.w	r0, r4, #16
 8002e08:	f001 fbe9 	bl	80045de <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8002e0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8002e10:	f001 fbe5 	bl	80045de <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8002e14:	4620      	mov	r0, r4
 8002e16:	f001 fb47 	bl	80044a8 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd10      	pop	{r4, pc}
	...

08002e20 <_ux_device_class_cdc_acm_write>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8002e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	4698      	mov	r8, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_CDC_ACM_WRITE, cdc_acm, buffer, requested_length, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)
  
    /* Check if current cdc-acm is using callback or not. We cannot use direct reads with callback on.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 8002e26:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d069      	beq.n	8002f02 <_ux_device_class_cdc_acm_write+0xe2>
 8002e2e:	460f      	mov	r7, r1
 8002e30:	4614      	mov	r4, r2
    
        /* Not allowed. */
        return(UX_ERROR);
            
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8002e32:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <_ux_device_class_cdc_acm_write+0xe8>)
 8002e34:	f8d3 9000 	ldr.w	r9, [r3]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8002e38:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d116      	bne.n	8002e6e <_ux_device_class_cdc_acm_write+0x4e>
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
    }
        
    /* We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8002e40:	6803      	ldr	r3, [r0, #0]
    
    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 8002e42:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8002e44:	6973      	ldr	r3, [r6, #20]
 8002e46:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e4a:	d100      	bne.n	8002e4e <_ux_device_class_cdc_acm_write+0x2e>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8002e4c:	6a76      	ldr	r6, [r6, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_utility_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002e4e:	f100 0a10 	add.w	sl, r0, #16
 8002e52:	4650      	mov	r0, sl
 8002e54:	f001 fbcb 	bl	80045ee <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8002e58:	f106 0b30 	add.w	fp, r6, #48	; 0x30

    /* Reset the actual length.  */
    *actual_length =  0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c8 3000 	str.w	r3, [r8]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8002e62:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d008      	beq.n	8002e7c <_ux_device_class_cdc_acm_write+0x5c>
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	e029      	b.n	8002ec2 <_ux_device_class_cdc_acm_write+0xa2>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8002e6e:	2251      	movs	r2, #81	; 0x51
 8002e70:	2107      	movs	r1, #7
 8002e72:	2002      	movs	r0, #2
 8002e74:	f001 f9ba 	bl	80041ec <_ux_system_error_handler>
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8002e78:	2551      	movs	r5, #81	; 0x51
 8002e7a:	e038      	b.n	8002eee <_ux_device_class_cdc_acm_write+0xce>
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8002e7c:	b10c      	cbz	r4, 8002e82 <_ux_device_class_cdc_acm_write+0x62>
 8002e7e:	2500      	movs	r5, #0
 8002e80:	e01f      	b.n	8002ec2 <_ux_device_class_cdc_acm_write+0xa2>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	4611      	mov	r1, r2
 8002e86:	4658      	mov	r0, fp
 8002e88:	f001 f956 	bl	8004138 <_ux_device_stack_transfer_request>
 8002e8c:	4605      	mov	r5, r0

        /* Free Mutex resource.  */
        _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002e8e:	4650      	mov	r0, sl
 8002e90:	f001 fba9 	bl	80045e6 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 8002e94:	e02b      	b.n	8002eee <_ux_device_class_cdc_acm_write+0xce>
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
                
            else
            
                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 8002e96:	4625      	mov	r5, r4
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8002e98:	462a      	mov	r2, r5
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002e9e:	f001 faf8 	bl	8004492 <_ux_utility_memory_copy>
                                buffer, local_requested_length);
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8002ea2:	462a      	mov	r2, r5
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4658      	mov	r0, fp
 8002ea8:	f001 f946 	bl	8004138 <_ux_device_stack_transfer_request>
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 8002eac:	4605      	mov	r5, r0
 8002eae:	b998      	cbnz	r0, 8002ed8 <_ux_device_class_cdc_acm_write+0xb8>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8002eb0:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8002eb2:	4417      	add	r7, r2
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8002eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f8c8 3000 	str.w	r3, [r8]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8002ebe:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002ec0:	1ae4      	subs	r4, r4, r3
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8002ec2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d10a      	bne.n	8002ee0 <_ux_device_class_cdc_acm_write+0xc0>
 8002eca:	b14c      	cbz	r4, 8002ee0 <_ux_device_class_cdc_acm_write+0xc0>
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 8002ecc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002ed0:	d9e1      	bls.n	8002e96 <_ux_device_class_cdc_acm_write+0x76>
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 8002ed2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002ed6:	e7df      	b.n	8002e98 <_ux_device_class_cdc_acm_write+0x78>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002ed8:	4650      	mov	r0, sl
 8002eda:	f001 fb84 	bl	80045e6 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8002ede:	e006      	b.n	8002eee <_ux_device_class_cdc_acm_write+0xce>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002ee0:	4650      	mov	r0, sl
 8002ee2:	f001 fb80 	bl	80045e6 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8002ee6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d102      	bne.n	8002ef4 <_ux_device_class_cdc_acm_write+0xd4>
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
          
}
 8002eee:	4628      	mov	r0, r5
 8002ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8002ef4:	2222      	movs	r2, #34	; 0x22
 8002ef6:	2107      	movs	r1, #7
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f001 f977 	bl	80041ec <_ux_system_error_handler>
        return (UX_TRANSFER_NO_ANSWER);
 8002efe:	2522      	movs	r5, #34	; 0x22
 8002f00:	e7f5      	b.n	8002eee <_ux_device_class_cdc_acm_write+0xce>
        return(UX_ERROR);
 8002f02:	25ff      	movs	r5, #255	; 0xff
 8002f04:	e7f3      	b.n	8002eee <_ux_device_class_cdc_acm_write+0xce>
 8002f06:	bf00      	nop
 8002f08:	20000488 	.word	0x20000488

08002f0c <_ux_dcd_stm32_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4606      	mov	r6, r0
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002f10:	4b78      	ldr	r3, [pc, #480]	; (80030f4 <_ux_dcd_stm32_initialize+0x1e8>)
 8002f12:	681d      	ldr	r5, [r3, #0]

	/* The controller initialized here is of STM32 type. */
	dcd->ux_slave_dcd_controller_type = UX_DCD_STM32_SLAVE_CONTROLLER;
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	626b      	str	r3, [r5, #36]	; 0x24

	/* Allocate memory for this STM32 DCD instance. */
	UX_DCD_STM32* dcd_stm32 = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8002f18:	229c      	movs	r2, #156	; 0x9c
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	f001 fa15 	bl	800434c <_ux_utility_memory_allocate>
			sizeof(UX_DCD_STM32));

	/* Check if memory was properly allocated. */
	if (dcd_stm32 == UX_NULL)
 8002f22:	2800      	cmp	r0, #0
 8002f24:	f000 80e3 	beq.w	80030ee <_ux_dcd_stm32_initialize+0x1e2>
 8002f28:	4604      	mov	r4, r0
		return (UX_MEMORY_INSUFFICIENT);

	/* Set the pointer to the STM32 DCD. */
	dcd->ux_slave_dcd_controller_hardware = (VOID*)dcd_stm32;
 8002f2a:	63e8      	str	r0, [r5, #60]	; 0x3c

	/* Save the base address of the controller. */
	dcd->ux_slave_dcd_io = dcd_io;
 8002f2c:	632e      	str	r6, [r5, #48]	; 0x30
	dcd_stm32->ux_dcd_stm32_base = dcd_io;
 8002f2e:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94

	/* Set the generic DCD owner for the STM32 DCD. */
	dcd_stm32->ux_dcd_stm32_dcd_owner = dcd;
 8002f32:	6005      	str	r5, [r0, #0]

	/* Initialize the function collector for this DCD. */
	dcd->ux_slave_dcd_function = _ux_dcd_stm32_function;
 8002f34:	4b70      	ldr	r3, [pc, #448]	; (80030f8 <_ux_dcd_stm32_initialize+0x1ec>)
 8002f36:	63ab      	str	r3, [r5, #56]	; 0x38

	/* Reset the GINT Global Interrupt Mask register. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GAHBCFG,
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2108      	movs	r1, #8
 8002f3c:	f000 fa1c 	bl	8003378 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_GAHBCFG_GINT);

	/* Check the controller. Full Speed or HighSpeed initialization. */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_FULL_SPEED)
 8002f40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f48:	f000 809f 	beq.w	800308a <_ux_dcd_stm32_initialize+0x17e>
#endif
	}
	else
	{
		/* PHY Selection in HS mode. */
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	210c      	movs	r1, #12
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 fa1c 	bl	800338e <_ux_dcd_stm32_register_set>
				UX_DCD_STM32_OTG_FS_GUSBCFG_ULPI_UTMI_SEL);
	}

	/* Spec says wait for 50 cycles. */
	_ux_dcd_stm32_delay(50);
 8002f56:	2032      	movs	r0, #50	; 0x32
 8002f58:	f001 fd7a 	bl	8004a50 <_ux_dcd_stm32_delay>

	/* Wait for AHB master Idle State. */
	do
	{
		/* Spec says wait for 5 cycles. */
		_ux_dcd_stm32_delay(5);
 8002f5c:	2005      	movs	r0, #5
 8002f5e:	f001 fd77 	bl	8004a50 <_ux_dcd_stm32_delay>

		/* Read the RST Control register. */
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 8002f62:	2110      	movs	r1, #16
 8002f64:	4620      	mov	r0, r4
 8002f66:	f000 fa0e 	bl	8003386 <_ux_dcd_stm32_register_read>
	} while ((stm32_register & UX_DCD_STM32_OTG_FS_GRSTCTL_AHBIDL) == 0);
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	daf6      	bge.n	8002f5c <_ux_dcd_stm32_initialize+0x50>

	/* Perform the core soft reset. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL,
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2110      	movs	r1, #16
 8002f72:	4620      	mov	r0, r4
 8002f74:	f000 fa0b 	bl	800338e <_ux_dcd_stm32_register_set>

	/* Wait for Soft Reset to be completed. */
	do
	{
		/* Read the RST Control register. */
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 8002f78:	2110      	movs	r1, #16
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f000 fa03 	bl	8003386 <_ux_dcd_stm32_register_read>
	} while (stm32_register & UX_DCD_STM32_OTG_FS_GRSTCTL_CSRST);
 8002f80:	f010 0f01 	tst.w	r0, #1
 8002f84:	d1f8      	bne.n	8002f78 <_ux_dcd_stm32_initialize+0x6c>

	/* Spec says wait for 10 cycles. */
	_ux_dcd_stm32_delay(10);
 8002f86:	200a      	movs	r0, #10
 8002f88:	f001 fd62 	bl	8004a50 <_ux_dcd_stm32_delay>

	/* Set the controller to device mode. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f90:	210c      	movs	r1, #12
 8002f92:	4620      	mov	r0, r4
 8002f94:	f000 f9fb 	bl	800338e <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GUSBCFG_FDMOD);

	/* Spec says wait for 50 cycles. */
	_ux_dcd_stm32_delay(50);
 8002f98:	2032      	movs	r0, #50	; 0x32
 8002f9a:	f001 fd59 	bl	8004a50 <_ux_dcd_stm32_delay>

	/*--------------------------------------------------------------------------------------------*/

	/* Check the controller. Full Speed or HighSpeed initialization. */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_FULL_SPEED)
 8002f9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa6:	d07c      	beq.n	80030a2 <_ux_dcd_stm32_initialize+0x196>
		/* Set the PHY speed to full speed. */
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
				UX_DCD_STM32_OTG_FS_DCFG_DSPD_FULL_SPEED);

	/* Set the turnaround time. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002fa8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8002fac:	210c      	movs	r1, #12
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f000 f9e2 	bl	8003378 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_GUSBCFG_TRDT_MASK);
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002fb4:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8002fb8:	210c      	movs	r1, #12
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f000 f9e7 	bl	800338e <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GUSBCFG_TRDT_8);

	/* Restart the PHY clock. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_PCGCCTL, 0);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 f9e7 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Set the Device default address to 0 and the Periodic Frame interval to 80%. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 8002fcc:	f641 72f0 	movw	r2, #8176	; 0x1ff0
 8002fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f000 f9cf 	bl	8003378 <_ux_dcd_stm32_register_clear>
			(UX_DCD_STM32_OTG_FS_DCFG_PFVIL_MASK | UX_DCD_STM32_OTG_FS_DCFG_DAD_MASK));

	/* Set the RX FIFO. Size. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRXFSIZ, UX_DCD_STM32_RX_FIFO_SIZE);
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	2124      	movs	r1, #36	; 0x24
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 f9db 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Set the fifo address. */
	ULONG fifo_address = UX_DCD_STM32_RX_FIFO_SIZE;

	/* Set the NP TX FIFO. Size. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GNPTXFSIZ, (fifo_address |
 8002fe4:	4a45      	ldr	r2, [pc, #276]	; (80030fc <_ux_dcd_stm32_initialize+0x1f0>)
 8002fe6:	2128      	movs	r1, #40	; 0x28
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 f9d6 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Adjust the fifo address. */
	fifo_address += UX_DCD_STM32_NP_TX_FIFO_SIZE;

	/* We need to setup the IN FIFOs. Check the controller. Full-Speed or High-Speed initialization. */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_HIGH_SPEED)
 8002fee:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <_ux_dcd_stm32_initialize+0x1f4>)
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d05b      	beq.n	80030b0 <_ux_dcd_stm32_initialize+0x1a4>
	else
	{
		/* For OTG_FS, the maximum amount of RAM we have for FIFOs is 1.25kb. */

		/* Set the values for the IN Fifos (3 generic IN Fifos). */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF,
 8002ff8:	4a42      	ldr	r2, [pc, #264]	; (8003104 <_ux_dcd_stm32_initialize+0x1f8>)
 8002ffa:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ffe:	4620      	mov	r0, r4
 8003000:	f000 f9cb 	bl	800339a <_ux_dcd_stm32_register_write>
				(fifo_address | (UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS
								<< UX_DCD_STM32_OTG_FS_GNPTXFSIZ_NPTXFSD_SHIFT)));

		/* Adjust the fifo address. */
		fifo_address += UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS;
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 4,
 8003004:	4a40      	ldr	r2, [pc, #256]	; (8003108 <_ux_dcd_stm32_initialize+0x1fc>)
 8003006:	f44f 7184 	mov.w	r1, #264	; 0x108
 800300a:	4620      	mov	r0, r4
 800300c:	f000 f9c5 	bl	800339a <_ux_dcd_stm32_register_write>
				(fifo_address | (UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS
								<< UX_DCD_STM32_OTG_FS_GNPTXFSIZ_NPTXFSD_SHIFT)));

		/* Adjust the fifo address. */
		fifo_address += UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS;
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 8,
 8003010:	4a3e      	ldr	r2, [pc, #248]	; (800310c <_ux_dcd_stm32_initialize+0x200>)
 8003012:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003016:	4620      	mov	r0, r4
 8003018:	f000 f9bf 	bl	800339a <_ux_dcd_stm32_register_write>
	}

	/*--------------------------------------------------------------------------------------------*/

	/* Clear DIEPMSK and DOEPMSK. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPMSK, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8003022:	4620      	mov	r0, r4
 8003024:	f000 f9b9 	bl	800339a <_ux_dcd_stm32_register_write>
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPMSK, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	f640 0114 	movw	r1, #2068	; 0x814
 800302e:	4620      	mov	r0, r4
 8003030:	f000 f9b3 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Clear all pending interrupts on endpoint. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINT, 0xFFFFFFFF);
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	f640 0118 	movw	r1, #2072	; 0x818
 800303c:	4620      	mov	r0, r4
 800303e:	f000 f9ac 	bl	800339a <_ux_dcd_stm32_register_write>
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	f640 011c 	movw	r1, #2076	; 0x81c
 8003048:	4620      	mov	r0, r4
 800304a:	f000 f9a6 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Disable all interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2118      	movs	r1, #24
 8003052:	4620      	mov	r0, r4
 8003054:	f000 f9a1 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Clear all pending interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS, 0xFFFFFFFF);
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	2114      	movs	r1, #20
 800305e:	4620      	mov	r0, r4
 8003060:	f000 f99b 	bl	800339a <_ux_dcd_stm32_register_write>

	/* Enable interrupts for the device mode only. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8003064:	4a2a      	ldr	r2, [pc, #168]	; (8003110 <_ux_dcd_stm32_initialize+0x204>)
 8003066:	2118      	movs	r1, #24
 8003068:	4620      	mov	r0, r4
 800306a:	f000 f990 	bl	800338e <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GINTMSK_ENUMDNEM |
			UX_DCD_STM32_OTG_FS_GINTMSK_IEPINTM |
			UX_DCD_STM32_OTG_FS_GINTMSK_OEPINTM);

	/* Set the state of the controller to OPERATIONAL now. */
	dcd->ux_slave_dcd_status = UX_DCD_STATUS_OPERATIONAL;
 800306e:	2201      	movs	r2, #1
 8003070:	622a      	str	r2, [r5, #32]

	/* Set the GINT Global Interrupt Mask register. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GAHBCFG,
 8003072:	2108      	movs	r1, #8
 8003074:	4620      	mov	r0, r4
 8003076:	f000 f98a 	bl	800338e <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GAHBCFG_GINT);

	/* Clear soft disconnect bit. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCTL,
 800307a:	2202      	movs	r2, #2
 800307c:	f640 0104 	movw	r1, #2052	; 0x804
 8003080:	4620      	mov	r0, r4
 8003082:	f000 f979 	bl	8003378 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_DCTL_SDIS);

	/* Return successful completion. */
	return (UX_SUCCESS);
 8003086:	2000      	movs	r0, #0
}
 8003088:	bd70      	pop	{r4, r5, r6, pc}
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	210c      	movs	r1, #12
 800308e:	4620      	mov	r0, r4
 8003090:	f000 f97d 	bl	800338e <_ux_dcd_stm32_register_set>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GCCFG,
 8003094:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8003098:	2138      	movs	r1, #56	; 0x38
 800309a:	4620      	mov	r0, r4
 800309c:	f000 f977 	bl	800338e <_ux_dcd_stm32_register_set>
 80030a0:	e759      	b.n	8002f56 <_ux_dcd_stm32_initialize+0x4a>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 80030a2:	2203      	movs	r2, #3
 80030a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030a8:	4620      	mov	r0, r4
 80030aa:	f000 f970 	bl	800338e <_ux_dcd_stm32_register_set>
 80030ae:	e77b      	b.n	8002fa8 <_ux_dcd_stm32_initialize+0x9c>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF,
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <_ux_dcd_stm32_initialize+0x208>)
 80030b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 f96f 	bl	800339a <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 4,
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <_ux_dcd_stm32_initialize+0x20c>)
 80030be:	f44f 7184 	mov.w	r1, #264	; 0x108
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 f969 	bl	800339a <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 8,
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <_ux_dcd_stm32_initialize+0x210>)
 80030ca:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80030ce:	4620      	mov	r0, r4
 80030d0:	f000 f963 	bl	800339a <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 12,
 80030d4:	4a12      	ldr	r2, [pc, #72]	; (8003120 <_ux_dcd_stm32_initialize+0x214>)
 80030d6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 f95d 	bl	800339a <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 16,
 80030e0:	4a10      	ldr	r2, [pc, #64]	; (8003124 <_ux_dcd_stm32_initialize+0x218>)
 80030e2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80030e6:	4620      	mov	r0, r4
 80030e8:	f000 f957 	bl	800339a <_ux_dcd_stm32_register_write>
 80030ec:	e796      	b.n	800301c <_ux_dcd_stm32_initialize+0x110>
		return (UX_MEMORY_INSUFFICIENT);
 80030ee:	2012      	movs	r0, #18
 80030f0:	e7ca      	b.n	8003088 <_ux_dcd_stm32_initialize+0x17c>
 80030f2:	bf00      	nop
 80030f4:	20000488 	.word	0x20000488
 80030f8:	08004b67 	.word	0x08004b67
 80030fc:	00600080 	.word	0x00600080
 8003100:	40040000 	.word	0x40040000
 8003104:	002000e0 	.word	0x002000e0
 8003108:	00200100 	.word	0x00200100
 800310c:	00200120 	.word	0x00200120
 8003110:	a00c3810 	.word	0xa00c3810
 8003114:	006000e0 	.word	0x006000e0
 8003118:	00600140 	.word	0x00600140
 800311c:	006001a0 	.word	0x006001a0
 8003120:	00600200 	.word	0x00600200
 8003124:	00600260 	.word	0x00600260

08003128 <_ux_dcd_stm32_interrupt_handler>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_interrupt_handler(VOID)
{
 8003128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//	ULONG stm32_pending_interrupt;
//	ULONG stm32_masked_interrupt;
 800312c:	4b91      	ldr	r3, [pc, #580]	; (8003374 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 800312e:	681d      	ldr	r5, [r3, #0]
//	ULONG endpoint_index;
//	ULONG endpoint_mask;
//	ULONG transfer_length;
 8003130:	6bee      	ldr	r6, [r5, #60]	; 0x3c
//	ULONG stm32_dsts_register;
//	ULONG stm32_grxstp_register;
//	ULONG stm32_doepint_register;
//	ULONG stm32_diepint_register;
//	UX_SLAVE_TRANSFER* transfer_request;
//	UX_DCD_STM32_ED* ed;
 8003132:	2114      	movs	r1, #20
 8003134:	4630      	mov	r0, r6
 8003136:	f000 f926 	bl	8003386 <_ux_dcd_stm32_register_read>
 800313a:	4604      	mov	r4, r0
//	UX_SLAVE_ENDPOINT* endpoint;
//	UX_SLAVE_DCD* dcd;
//	UX_DCD_STM32* dcd_stm32;
//	UX_SLAVE_DEVICE* device;
 800313c:	2118      	movs	r1, #24
 800313e:	4630      	mov	r0, r6
 8003140:	f000 f921 	bl	8003386 <_ux_dcd_stm32_register_read>

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;

 8003144:	4004      	ands	r4, r0
	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8003146:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800314a:	d110      	bne.n	800316e <_ux_dcd_stm32_interrupt_handler+0x46>
	/* Check if we have a SUSPEND. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_USBSUSP)
	{
		/* Clear the SUSPEND interrupt. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
				UX_DCD_STM32_OTG_FS_GINTSTS_USBSUSP);
 800314c:	2c00      	cmp	r4, #0
 800314e:	db21      	blt.n	8003194 <_ux_dcd_stm32_interrupt_handler+0x6c>
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
			/* Device is reset, the behavior is the same as disconnection. */
			_ux_device_stack_disconnect();
	}

	/* Check if we have an RESUME. */
 8003150:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8003154:	d12d      	bne.n	80031b2 <_ux_dcd_stm32_interrupt_handler+0x8a>
			ULONG stm32_dsts_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DSTS);

			/* We have a device connection, read at what speed we are connected. */
			if ((stm32_dsts_register & UX_DCD_STM32_OTG_FS_DSTS_ENUMSPD_MASK)
					== UX_DCD_STM32_OTG_FS_DSTS_ENUMSPD_HS)
				/* We are connected at high speed. */
 8003156:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 800315a:	d14d      	bne.n	80031f8 <_ux_dcd_stm32_interrupt_handler+0xd0>

		/* If the device is attached or configured, we have a disconnection signal. */
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
			/* Device is reset, the behavior is the same as disconnection. */
			_ux_device_stack_disconnect();

 800315c:	f014 0f10 	tst.w	r4, #16
 8003160:	d158      	bne.n	8003214 <_ux_dcd_stm32_interrupt_handler+0xec>
				ed->ux_dcd_stm32_ed_payload_length = transfer_length;

				break;

			default:
				break;
 8003162:	f414 2f40 	tst.w	r4, #786432	; 0xc0000
 8003166:	f040 809c 	bne.w	80032a2 <_ux_dcd_stm32_interrupt_handler+0x17a>
				/* Process the call back.  */
				_ux_dcd_stm32_transfer_callback(dcd_stm32, transfer_request);

				/*--------------------------------------------------------------------------------*/

				/* Now clean the interrupt that started this.  */
 800316a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ULONG stm32_pending_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 800316e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003172:	2114      	movs	r1, #20
 8003174:	4630      	mov	r0, r6
 8003176:	f000 f910 	bl	800339a <_ux_dcd_stm32_register_write>
	ULONG stm32_masked_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003182:	b10b      	cbz	r3, 8003188 <_ux_dcd_stm32_interrupt_handler+0x60>
	/* Source of interrupt must be masked. */
 8003184:	2004      	movs	r0, #4
 8003186:	4798      	blx	r3

 8003188:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0de      	beq.n	800314c <_ux_dcd_stm32_interrupt_handler+0x24>
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_USBSUSP)
 800318e:	f000 fdd3 	bl	8003d38 <_ux_device_stack_disconnect>
 8003192:	e7db      	b.n	800314c <_ux_dcd_stm32_interrupt_handler+0x24>
		if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8003194:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003198:	2114      	movs	r1, #20
 800319a:	4630      	mov	r0, r6
 800319c:	f000 f8fd 	bl	800339a <_ux_dcd_stm32_register_write>
		}
 80031a0:	4b74      	ldr	r3, [pc, #464]	; (8003374 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0d1      	beq.n	8003150 <_ux_dcd_stm32_interrupt_handler+0x28>
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
 80031ac:	2005      	movs	r0, #5
 80031ae:	4798      	blx	r3
 80031b0:	e7ce      	b.n	8003150 <_ux_dcd_stm32_interrupt_handler+0x28>
		/* Clear the RESUME interrupt. */
 80031b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b6:	2114      	movs	r1, #20
 80031b8:	4630      	mov	r0, r6
 80031ba:	f000 f8ee 	bl	800339a <_ux_dcd_stm32_register_write>
		/* Check the status change callback. */
 80031be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf18      	it	ne
 80031c4:	2b03      	cmpne	r3, #3
 80031c6:	d0c6      	beq.n	8003156 <_ux_dcd_stm32_interrupt_handler+0x2e>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_RESUMED);
 80031c8:	f640 0108 	movw	r1, #2056	; 0x808
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f8da 	bl	8003386 <_ux_dcd_stm32_register_read>
	/* Check the source of the interrupt. Is it Enumeration Done Interrupt (End of Bus Reset) ? */
 80031d2:	f010 0f06 	tst.w	r0, #6
 80031d6:	d109      	bne.n	80031ec <_ux_dcd_stm32_interrupt_handler+0xc4>
		/* Clear the Enumeration done interrupt. */
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2202      	movs	r2, #2
 80031de:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
				&& device->ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80031e2:	f001 fd03 	bl	8004bec <_ux_dcd_stm32_initialize_complete>
			ULONG stm32_dsts_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DSTS);
 80031e6:	2301      	movs	r3, #1
 80031e8:	642b      	str	r3, [r5, #64]	; 0x40
 80031ea:	e7b4      	b.n	8003156 <_ux_dcd_stm32_interrupt_handler+0x2e>

 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80031f6:	e7f4      	b.n	80031e2 <_ux_dcd_stm32_interrupt_handler+0xba>
				/* We are connected at lower full speed. */
 80031f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031fc:	2114      	movs	r1, #20
 80031fe:	4630      	mov	r0, r6
 8003200:	f000 f8cb 	bl	800339a <_ux_dcd_stm32_register_write>
			_ux_dcd_stm32_initialize_complete();
 8003204:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003206:	b913      	cbnz	r3, 800320e <_ux_dcd_stm32_interrupt_handler+0xe6>
	}
 8003208:	2300      	movs	r3, #0
 800320a:	642b      	str	r3, [r5, #64]	; 0x40
 800320c:	e7a6      	b.n	800315c <_ux_dcd_stm32_interrupt_handler+0x34>
			/* Mark the device as attached now. */
 800320e:	f000 fd93 	bl	8003d38 <_ux_device_stack_disconnect>
 8003212:	e7f9      	b.n	8003208 <_ux_dcd_stm32_interrupt_handler+0xe0>
	}
 8003214:	2210      	movs	r2, #16
 8003216:	2114      	movs	r1, #20
 8003218:	4630      	mov	r0, r6
 800321a:	f000 f8be 	bl	800339a <_ux_dcd_stm32_register_write>
	ULONG endpoint_index;
 800321e:	2210      	movs	r2, #16
 8003220:	2118      	movs	r1, #24
 8003222:	4630      	mov	r0, r6
 8003224:	f000 f8a8 	bl	8003378 <_ux_dcd_stm32_register_clear>

 8003228:	2120      	movs	r1, #32
 800322a:	4630      	mov	r0, r6
 800322c:	f000 f8ab 	bl	8003386 <_ux_dcd_stm32_register_read>
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_RFXLVL)
 8003230:	f000 050f 	and.w	r5, r0, #15
		/* Mask this interrupt for now. */
 8003234:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003238:	0093      	lsls	r3, r2, #2
 800323a:	4433      	add	r3, r6
 800323c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24

 8003240:	f3c0 4343 	ubfx	r3, r0, #17, #4

 8003244:	f3c0 170a 	ubfx	r7, r0, #4, #11
		/* Get the logical endpoint from the physical endpoint. */
 8003248:	2b02      	cmp	r3, #2
 800324a:	d013      	beq.n	8003274 <_ux_dcd_stm32_interrupt_handler+0x14c>
 800324c:	2b06      	cmp	r3, #6
 800324e:	d10b      	bne.n	8003268 <_ux_dcd_stm32_interrupt_handler+0x140>
		ULONG transfer_status = (stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_PKTSTS_MASK)
 8003250:	2308      	movs	r3, #8
 8003252:	f10a 0284 	add.w	r2, sl, #132	; 0x84
 8003256:	4629      	mov	r1, r5
 8003258:	4630      	mov	r0, r6
 800325a:	f001 fc48 	bl	8004aee <_ux_dcd_stm32_fifo_read>
		ULONG transfer_length = (stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_BCNT_MASK)
 800325e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8003262:	00ab      	lsls	r3, r5, #2
 8003264:	4433      	add	r3, r6
 8003266:	611f      	str	r7, [r3, #16]
				transfer_request->ux_slave_transfer_request_current_data_pointer += transfer_length;
 8003268:	2210      	movs	r2, #16
 800326a:	2118      	movs	r1, #24
 800326c:	4630      	mov	r0, r6
 800326e:	f000 f88e 	bl	800338e <_ux_dcd_stm32_register_set>
 8003272:	e776      	b.n	8003162 <_ux_dcd_stm32_interrupt_handler+0x3a>
		/* Is this for a OUT endpoint or a SETUP packet ? */
 8003274:	463b      	mov	r3, r7
 8003276:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 800327a:	4629      	mov	r1, r5
 800327c:	4630      	mov	r0, r6
 800327e:	f001 fc36 	bl	8004aee <_ux_dcd_stm32_fifo_read>
				_ux_dcd_stm32_fifo_read(dcd_stm32, endpoint_index,
 8003282:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8003286:	443b      	add	r3, r7
 8003288:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
				/* Save the length in the ED payload. */
 800328c:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8003290:	443b      	add	r3, r7
 8003292:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
				break;
 8003296:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800329a:	00ab      	lsls	r3, r5, #2
 800329c:	4433      	add	r3, r6
 800329e:	611f      	str	r7, [r3, #16]
			case UX_DCD_STM32_OTG_FS_GRXSTSP_PKTSTS_OUT_RCVD:
 80032a0:	e7e2      	b.n	8003268 <_ux_dcd_stm32_interrupt_handler+0x140>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 80032a2:	f640 0118 	movw	r1, #2072	; 0x818
 80032a6:	4630      	mov	r0, r6
 80032a8:	f000 f86d 	bl	8003386 <_ux_dcd_stm32_register_read>
 80032ac:	4607      	mov	r7, r0
	/*----- see 'stm32f7xx_hal_pcd.c' -> 'void HAL_PCD_IRQHandler(PCD_HandleTypeDef* hpcd)' ------*/
 80032ae:	2400      	movs	r4, #0
 80032b0:	e028      	b.n	8003304 <_ux_dcd_stm32_interrupt_handler+0x1dc>
						/* Flag the setup. */
 80032b2:	00e2      	lsls	r2, r4, #3
 80032b4:	4422      	add	r2, r4
 80032b6:	0093      	lsls	r3, r2, #2
 80032b8:	4433      	add	r3, r6
 80032ba:	f103 0a04 	add.w	sl, r3, #4

 80032be:	2200      	movs	r2, #0
 80032c0:	615a      	str	r2, [r3, #20]
						ed->ux_dcd_stm32_ed_transfer_status =
 80032c2:	0161      	lsls	r1, r4, #5
					{
 80032c4:	f601 1108 	addw	r1, r1, #2312	; 0x908
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 f85c 	bl	8003386 <_ux_dcd_stm32_register_read>
 80032ce:	4681      	mov	r9, r0
				}
 80032d0:	f010 0f01 	tst.w	r0, #1
 80032d4:	d043      	beq.n	800335e <_ux_dcd_stm32_interrupt_handler+0x236>
				{
 80032d6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80032da:	0093      	lsls	r3, r2, #2
 80032dc:	4433      	add	r3, r6
 80032de:	2202      	movs	r2, #2
 80032e0:	615a      	str	r2, [r3, #20]
	/* Check the source of the interrupt. Is it a IN or OUT endpoint interrupt ? */
 80032e2:	4625      	mov	r5, r4
					ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_IDLE;
 80032e4:	f8da 1020 	ldr.w	r1, [sl, #32]
					if (stm32_diepint_register & UX_DCD_STM32_OTG_FS_DIEPINT_XFRC)
 80032e8:	3130      	adds	r1, #48	; 0x30
 80032ea:	4630      	mov	r0, r6
 80032ec:	f000 f859 	bl	80033a2 <_ux_dcd_stm32_transfer_callback>
				/* Get the logical endpoint from the physical endpoint. */
 80032f0:	2c0f      	cmp	r4, #15
 80032f2:	d936      	bls.n	8003362 <_ux_dcd_stm32_interrupt_handler+0x23a>
				/* Get the pointer to the transfer request. */
 80032f4:	0169      	lsls	r1, r5, #5

 80032f6:	4642      	mov	r2, r8
 80032f8:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f84c 	bl	800339a <_ux_dcd_stm32_register_write>
	/*----- see 'stm32f7xx_hal_pcd.c' -> 'void HAL_PCD_IRQHandler(PCD_HandleTypeDef* hpcd)' ------*/
 8003302:	3401      	adds	r4, #1
 8003304:	2c1f      	cmp	r4, #31
 8003306:	f63f af30 	bhi.w	800316a <_ux_dcd_stm32_interrupt_handler+0x42>
	ULONG stm32_doepint_register;
 800330a:	2301      	movs	r3, #1
 800330c:	40a3      	lsls	r3, r4
 800330e:	423b      	tst	r3, r7
 8003310:	d0f7      	beq.n	8003302 <_ux_dcd_stm32_interrupt_handler+0x1da>
	{
 8003312:	2c0f      	cmp	r4, #15
 8003314:	d9cd      	bls.n	80032b2 <_ux_dcd_stm32_interrupt_handler+0x18a>
				UX_DCD_STM32_OTG_FS_DAINT);
 8003316:	f1a4 0510 	sub.w	r5, r4, #16
		for (endpoint_mask = 0; endpoint_mask < 32; endpoint_mask++)
 800331a:	00ea      	lsls	r2, r5, #3
 800331c:	442a      	add	r2, r5
 800331e:	0093      	lsls	r3, r2, #2
 8003320:	4433      	add	r3, r6
 8003322:	f103 0a04 	add.w	sl, r3, #4
			if (stm32_daint_interrupt & (1 << endpoint_mask))
 8003326:	2200      	movs	r2, #0
 8003328:	615a      	str	r2, [r3, #20]
				/* If the endpoint mask is >= 16 we are in the OUT endpoints. */
 800332a:	0169      	lsls	r1, r5, #5
				endpoint_index = endpoint_mask;
 800332c:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 8003330:	4630      	mov	r0, r6
 8003332:	f000 f828 	bl	8003386 <_ux_dcd_stm32_register_read>
 8003336:	4680      	mov	r8, r0
					/* Adjust the index. */
 8003338:	f010 0f08 	tst.w	r0, #8
 800333c:	d005      	beq.n	800334a <_ux_dcd_stm32_interrupt_handler+0x222>
					/* Get the physical endpoint associated with this endpoint. */
 800333e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003342:	0093      	lsls	r3, r2, #2
 8003344:	4433      	add	r3, r6
 8003346:	2201      	movs	r2, #1
 8003348:	615a      	str	r2, [r3, #20]
					ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_IDLE;
 800334a:	f018 0f01 	tst.w	r8, #1
 800334e:	d0c9      	beq.n	80032e4 <_ux_dcd_stm32_interrupt_handler+0x1bc>
					stm32_doepint_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8003350:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8003354:	0093      	lsls	r3, r2, #2
 8003356:	4433      	add	r3, r6
 8003358:	2203      	movs	r2, #3
 800335a:	615a      	str	r2, [r3, #20]
 800335c:	e7c2      	b.n	80032e4 <_ux_dcd_stm32_interrupt_handler+0x1bc>
	/* Check the source of the interrupt. Is it a IN or OUT endpoint interrupt ? */
 800335e:	4625      	mov	r5, r4
 8003360:	e7c0      	b.n	80032e4 <_ux_dcd_stm32_interrupt_handler+0x1bc>
				/* Process the call back.  */
 8003362:	0169      	lsls	r1, r5, #5

 8003364:	464a      	mov	r2, r9
 8003366:	f601 1108 	addw	r1, r1, #2312	; 0x908
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f815 	bl	800339a <_ux_dcd_stm32_register_write>
 8003370:	e7c7      	b.n	8003302 <_ux_dcd_stm32_interrupt_handler+0x1da>
 8003372:	bf00      	nop
 8003374:	20000488 	.word	0x20000488

08003378 <_ux_dcd_stm32_register_clear>:
/*                                                                        */
/**************************************************************************/
VOID  _ux_dcd_stm32_register_clear(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register, ULONG value)
{
    
    *((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register)) &=~ value;
 8003378:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800337c:	5843      	ldr	r3, [r0, r1]
 800337e:	ea23 0202 	bic.w	r2, r3, r2
 8003382:	5042      	str	r2, [r0, r1]
    return;
}
 8003384:	4770      	bx	lr

08003386 <_ux_dcd_stm32_register_read>:
/*                                                                        */
/**************************************************************************/
ULONG  _ux_dcd_stm32_register_read(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register)
{
        
    return((ULONG)(*((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register))));
 8003386:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
}
 800338a:	5858      	ldr	r0, [r3, r1]
 800338c:	4770      	bx	lr

0800338e <_ux_dcd_stm32_register_set>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_register_set(UX_DCD_STM32* dcd_stm32, ULONG stm32_register, ULONG value)
{
	*((ULONG*)(dcd_stm32->ux_dcd_stm32_base + stm32_register)) |= value;
 800338e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8003392:	5843      	ldr	r3, [r0, r1]
 8003394:	431a      	orrs	r2, r3
 8003396:	5042      	str	r2, [r0, r1]
	return;
}
 8003398:	4770      	bx	lr

0800339a <_ux_dcd_stm32_register_write>:
/*                                                                        */
/**************************************************************************/
VOID  _ux_dcd_stm32_register_write(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register, ULONG value)
{
    
    *((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register)) =  value;
 800339a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800339e:	505a      	str	r2, [r3, r1]
    return;
}
 80033a0:	4770      	bx	lr

080033a2 <_ux_dcd_stm32_transfer_callback>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_transfer_callback(UX_DCD_STM32* dcd_stm32, UX_SLAVE_TRANSFER* transfer_request)
{
 80033a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a6:	b083      	sub	sp, #12
 80033a8:	4607      	mov	r7, r0
 80033aa:	460c      	mov	r4, r1
	/* Get the pointer to the logical endpoint from the transfer request. */
	UX_SLAVE_ENDPOINT* endpoint = transfer_request->ux_slave_transfer_request_endpoint;
 80033ac:	688d      	ldr	r5, [r1, #8]

	/* Get the endpoint index. */
	ULONG stm32_endpoint_index = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80033ae:	696b      	ldr	r3, [r5, #20]
			& ~UX_ENDPOINT_DIRECTION;

	/* Get the STM32 endpoint. */
	UX_DCD_STM32_ED* ed = (UX_DCD_STM32_ED*)endpoint->ux_slave_endpoint_ed;
 80033b0:	68ae      	ldr	r6, [r5, #8]
	ULONG fifo_length;
	ULONG endpoint_size;
	ULONG endpoint_control;

	/* Endpoint 0 is different. */
	if (stm32_endpoint_index == 0)
 80033b2:	f033 0880 	bics.w	r8, r3, #128	; 0x80
 80033b6:	f040 8111 	bne.w	80035dc <_ux_dcd_stm32_transfer_callback+0x23a>
	{
		/* Check if we have received a SETUP command. */
		if (ed->ux_dcd_stm32_ed_transfer_status == UX_DCD_STM32_ED_TRANSFER_STATUS_SETUP)
 80033ba:	6933      	ldr	r3, [r6, #16]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d01c      	beq.n	80033fa <_ux_dcd_stm32_transfer_callback+0x58>
					UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA | UX_DCD_STM32_OTG_FS_DOEPCTL_CNAK);
		}
		else
		{
			/* Check if we have received something on endpoint 0 during data phase . */
			if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 80033c0:	6873      	ldr	r3, [r6, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f000 8086 	beq.w	80034d4 <_ux_dcd_stm32_transfer_callback+0x132>
			}
			else
			{

				/* Check if we have received something on endpoint 0 during status phase . */
				if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_STATUS_RX)
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	f000 80bb 	beq.w	8003544 <_ux_dcd_stm32_transfer_callback+0x1a2>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
				}
				else
				{
					/* Check if we need to send data again on control endpoint. */
					if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 8119 	bne.w	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
					{
						/* Check if we have data to send. */
						if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 80033d4:	69cb      	ldr	r3, [r1, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 80c7 	bne.w	800356a <_ux_dcd_stm32_transfer_callback+0x1c8>
						{
							/* There is no data to send but we may need to send a Zero Length Packet. */
							if (transfer_request->ux_slave_transfer_request_force_zlp == UX_TRUE)
 80033dc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80033de:	2b01      	cmp	r3, #1
 80033e0:	f000 80b3 	beq.w	800354a <_ux_dcd_stm32_transfer_callback+0x1a8>
								transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
							}
							else
							{
								/* Set the completion code to no error. */
								transfer_request->ux_slave_transfer_request_completion_code =
 80033e4:	2300      	movs	r3, #0
 80033e6:	620b      	str	r3, [r1, #32]
										UX_SUCCESS;

								/* The transfer is completed. */
								transfer_request->ux_slave_transfer_request_status =
 80033e8:	2302      	movs	r3, #2
 80033ea:	600b      	str	r3, [r1, #0]
										UX_TRANSFER_STATUS_COMPLETED;

								/* We are using a Control endpoint, if there is a callback,
								 * invoke it. We are still under ISR. */
								if (transfer_request->ux_slave_transfer_request_completion_function)
 80033ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80033ee:	b10b      	cbz	r3, 80033f4 <_ux_dcd_stm32_transfer_callback+0x52>
									transfer_request->ux_slave_transfer_request_completion_function(
 80033f0:	4608      	mov	r0, r1
 80033f2:	4798      	blx	r3
											transfer_request);

								/* State is now STATUS RX. */
								ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80033f4:	2304      	movs	r3, #4
 80033f6:	6073      	str	r3, [r6, #4]
 80033f8:	e105      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
			_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2120      	movs	r1, #32
 80033fe:	f001 fb5b 	bl	8004ab8 <_ux_dcd_stm32_fifo_flush>
			transfer_request->ux_slave_transfer_request_actual_length = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	61a3      	str	r3, [r4, #24]
			transfer_request->ux_slave_transfer_request_type = UX_TRANSFER_PHASE_SETUP;
 8003406:	2201      	movs	r2, #1
 8003408:	6062      	str	r2, [r4, #4]
			transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800340a:	6223      	str	r3, [r4, #32]
			ed->ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_STALLED;
 800340c:	6833      	ldr	r3, [r6, #0]
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6033      	str	r3, [r6, #0]
			if (*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8003414:	f994 3054 	ldrsb.w	r3, [r4, #84]	; 0x54
 8003418:	2b00      	cmp	r3, #0
 800341a:	db1d      	blt.n	8003458 <_ux_dcd_stm32_transfer_callback+0xb6>
				ed->ux_dcd_stm32_ed_direction = UX_ENDPOINT_OUT;
 800341c:	2300      	movs	r3, #0
 800341e:	61f3      	str	r3, [r6, #28]
				if (*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8003420:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8003424:	b913      	cbnz	r3, 800342c <_ux_dcd_stm32_transfer_callback+0x8a>
						*(transfer_request->ux_slave_transfer_request_setup + 7) == 0)
 8003426:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
				if (*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 800342a:	b1db      	cbz	r3, 8003464 <_ux_dcd_stm32_transfer_callback+0xc2>
			if (((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0) &&
 800342c:	f994 3054 	ldrsb.w	r3, [r4, #84]	; 0x54
 8003430:	2b00      	cmp	r3, #0
 8003432:	db05      	blt.n	8003440 <_ux_dcd_stm32_transfer_callback+0x9e>
					*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8003434:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
			if (((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0) &&
 8003438:	b912      	cbnz	r2, 8003440 <_ux_dcd_stm32_transfer_callback+0x9e>
					*(transfer_request->ux_slave_transfer_request_setup + 7) == 0)
 800343a:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
					*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 800343e:	b1aa      	cbz	r2, 800346c <_ux_dcd_stm32_transfer_callback+0xca>
				if ((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0)
 8003440:	2b00      	cmp	r3, #0
 8003442:	da29      	bge.n	8003498 <_ux_dcd_stm32_transfer_callback+0xf6>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8003444:	2301      	movs	r3, #1
 8003446:	6073      	str	r3, [r6, #4]
			_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8003448:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 800344c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8003450:	4638      	mov	r0, r7
 8003452:	f7ff ff9c 	bl	800338e <_ux_dcd_stm32_register_set>
 8003456:	e0d6      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
				ed->ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	61f3      	str	r3, [r6, #28]
				_ux_device_stack_control_request_process(transfer_request);
 800345c:	4620      	mov	r0, r4
 800345e:	f000 f9b9 	bl	80037d4 <_ux_device_stack_control_request_process>
 8003462:	e7e3      	b.n	800342c <_ux_dcd_stm32_transfer_callback+0x8a>
					_ux_device_stack_control_request_process(transfer_request);
 8003464:	4620      	mov	r0, r4
 8003466:	f000 f9b5 	bl	80037d4 <_ux_device_stack_control_request_process>
 800346a:	e7df      	b.n	800342c <_ux_dcd_stm32_transfer_callback+0x8a>
				transfer_request->ux_slave_transfer_request_in_transfer_length = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	61e3      	str	r3, [r4, #28]
				transfer_request->ux_slave_transfer_request_requested_length = 0;
 8003470:	6163      	str	r3, [r4, #20]
				transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8003472:	2303      	movs	r3, #3
 8003474:	6263      	str	r3, [r4, #36]	; 0x24
				ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8003476:	2304      	movs	r3, #4
 8003478:	6073      	str	r3, [r6, #4]
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 800347a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800347e:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003482:	4638      	mov	r0, r7
 8003484:	f7ff ff89 	bl	800339a <_ux_dcd_stm32_register_write>
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8003488:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 800348c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8003490:	4638      	mov	r0, r7
 8003492:	f7ff ff7c 	bl	800338e <_ux_dcd_stm32_register_set>
 8003496:	e7d7      	b.n	8003448 <_ux_dcd_stm32_transfer_callback+0xa6>
							_ux_utility_short_get(
 8003498:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800349c:	f001 f8ca 	bl	8004634 <_ux_utility_short_get>
					transfer_request->ux_slave_transfer_request_requested_length =
 80034a0:	6160      	str	r0, [r4, #20]
					if (transfer_request->ux_slave_transfer_request_requested_length
 80034a2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80034a6:	d80e      	bhi.n	80034c6 <_ux_dcd_stm32_transfer_callback+0x124>
						transfer_request->ux_slave_transfer_request_actual_length = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61a3      	str	r3, [r4, #24]
								transfer_request->ux_slave_transfer_request_data_pointer;
 80034ac:	68e3      	ldr	r3, [r4, #12]
						transfer_request->ux_slave_transfer_request_current_data_pointer =
 80034ae:	6123      	str	r3, [r4, #16]
						endpoint_size = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 80034b0:	69ea      	ldr	r2, [r5, #28]
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ,
 80034b2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80034b6:	f44f 6131 	mov.w	r1, #2832	; 0xb10
 80034ba:	4638      	mov	r0, r7
 80034bc:	f7ff ff6d 	bl	800339a <_ux_dcd_stm32_register_write>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_RX;
 80034c0:	2302      	movs	r3, #2
 80034c2:	6073      	str	r3, [r6, #4]
 80034c4:	e7c0      	b.n	8003448 <_ux_dcd_stm32_transfer_callback+0xa6>
						_ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 80034c6:	4629      	mov	r1, r5
 80034c8:	4638      	mov	r0, r7
 80034ca:	f001 fad0 	bl	8004a6e <_ux_dcd_stm32_endpoint_stall>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	6073      	str	r3, [r6, #4]
						return (UX_SUCCESS);
 80034d2:	e098      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
				fifo_length = ed->ux_dcd_stm32_ed_payload_length;
 80034d4:	68f1      	ldr	r1, [r6, #12]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 80034d6:	69a2      	ldr	r2, [r4, #24]
						transfer_request->ux_slave_transfer_request_requested_length)
 80034d8:	6963      	ldr	r3, [r4, #20]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 80034da:	429a      	cmp	r2, r3
 80034dc:	d82a      	bhi.n	8003534 <_ux_dcd_stm32_transfer_callback+0x192>
					if ((transfer_request->ux_slave_transfer_request_actual_length ==
 80034de:	d002      	beq.n	80034e6 <_ux_dcd_stm32_transfer_callback+0x144>
							(fifo_length != endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize))
 80034e0:	69ea      	ldr	r2, [r5, #28]
							transfer_request->ux_slave_transfer_request_requested_length) ||
 80034e2:	428a      	cmp	r2, r1
 80034e4:	d018      	beq.n	8003518 <_ux_dcd_stm32_transfer_callback+0x176>
						transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 80034e6:	2500      	movs	r5, #0
 80034e8:	6225      	str	r5, [r4, #32]
						_ux_device_stack_control_request_process(transfer_request);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f000 f972 	bl	80037d4 <_ux_device_stack_control_request_process>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 80034f0:	2303      	movs	r3, #3
 80034f2:	6073      	str	r3, [r6, #4]
						transfer_request->ux_slave_transfer_request_in_transfer_length = 0;
 80034f4:	61e5      	str	r5, [r4, #28]
						transfer_request->ux_slave_transfer_request_requested_length = 0;
 80034f6:	6165      	str	r5, [r4, #20]
						transfer_request->ux_slave_transfer_request_phase =
 80034f8:	6263      	str	r3, [r4, #36]	; 0x24
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 80034fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034fe:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003502:	4638      	mov	r0, r7
 8003504:	f7ff ff49 	bl	800339a <_ux_dcd_stm32_register_write>
						_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8003508:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 800350c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8003510:	4638      	mov	r0, r7
 8003512:	f7ff ff3c 	bl	800338e <_ux_dcd_stm32_register_set>
 8003516:	e076      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ,
 8003518:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800351c:	f44f 6131 	mov.w	r1, #2832	; 0xb10
 8003520:	f7ff ff3b 	bl	800339a <_ux_dcd_stm32_register_write>
						_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8003524:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8003528:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800352c:	4638      	mov	r0, r7
 800352e:	f7ff ff2e 	bl	800338e <_ux_dcd_stm32_register_set>
 8003532:	e068      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
					transfer_request->ux_slave_transfer_request_completion_code =
 8003534:	2327      	movs	r3, #39	; 0x27
 8003536:	6223      	str	r3, [r4, #32]
					if (transfer_request->ux_slave_transfer_request_completion_function)
 8003538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d063      	beq.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
						transfer_request->ux_slave_transfer_request_completion_function(
 800353e:	4620      	mov	r0, r4
 8003540:	4798      	blx	r3
 8003542:	e060      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
 8003544:	2300      	movs	r3, #0
 8003546:	6073      	str	r3, [r6, #4]
 8003548:	e05d      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
								_ux_dcd_stm32_register_write(dcd_stm32,
 800354a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800354e:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003552:	f7ff ff22 	bl	800339a <_ux_dcd_stm32_register_write>
								_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8003556:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 800355a:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800355e:	4638      	mov	r0, r7
 8003560:	f7ff ff15 	bl	800338e <_ux_dcd_stm32_register_set>
								transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	6523      	str	r3, [r4, #80]	; 0x50
 8003568:	e04d      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
							/* Get the size of the transfer, used for a IN transaction only. */
							fifo_length =
									transfer_request->ux_slave_transfer_request_in_transfer_length;

							/* Check if the endpoint size is bigger that data requested. */
							if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 800356a:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800356e:	4543      	cmp	r3, r8
 8003570:	d800      	bhi.n	8003574 <_ux_dcd_stm32_transfer_callback+0x1d2>
							fifo_length =
 8003572:	4698      	mov	r8, r3
								/* Adjust the transfer size. */
								fifo_length = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
							}

							/* Keep the FIFO length in the endpoint. */
							ed->ux_dcd_stm32_ed_payload_length = fifo_length;
 8003574:	f8c6 800c 	str.w	r8, [r6, #12]
							/* Program the transfer size. */
							endpoint_size = fifo_length;

							/* And packet counts. */
							endpoint_size |= ((fifo_length - 1
									+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 8003578:	69eb      	ldr	r3, [r5, #28]
 800357a:	eb03 0208 	add.w	r2, r3, r8
 800357e:	3a01      	subs	r2, #1
 8003580:	fbb2 f2f3 	udiv	r2, r2, r3
									endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
									<< UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;

							/* Write the size of the FIFO. */
							_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 8003584:	ea48 42c2 	orr.w	r2, r8, r2, lsl #19
 8003588:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800358c:	4638      	mov	r0, r7
 800358e:	f7ff ff04 	bl	800339a <_ux_dcd_stm32_register_write>
									endpoint_size);

							/* Read the content of the control register. */
							endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32,
 8003592:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8003596:	4638      	mov	r0, r7
 8003598:	f7ff fef5 	bl	8003386 <_ux_dcd_stm32_register_read>
							/* Enable the IN endpoint FIFO. */
							endpoint_control |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA
									| UX_DCD_STM32_OTG_FS_DIEPCTL_CNAK;

							/* Write the Endpoint Control register. */
							_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 800359c:	f040 4204 	orr.w	r2, r0, #2214592512	; 0x84000000
 80035a0:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80035a4:	4638      	mov	r0, r7
 80035a6:	f7ff fef8 	bl	800339a <_ux_dcd_stm32_register_write>
									endpoint_control);

							/* Point the FIFO buffer to the current transfer request buffer address. */
							data_pointer =
 80035aa:	6922      	ldr	r2, [r4, #16]
									transfer_request->ux_slave_transfer_request_current_data_pointer;

							/* Adjust the data pointer. */
							transfer_request->ux_slave_transfer_request_current_data_pointer +=
 80035ac:	eb02 0308 	add.w	r3, r2, r8
 80035b0:	6123      	str	r3, [r4, #16]
									fifo_length;

							/* Adjust the transfer length remaining. */
							transfer_request->ux_slave_transfer_request_in_transfer_length -=
 80035b2:	69e3      	ldr	r3, [r4, #28]
 80035b4:	eba3 0308 	sub.w	r3, r3, r8
 80035b8:	61e3      	str	r3, [r4, #28]
									fifo_length;

							/* If this is the last packet, set data end as well. */
							if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 80035ba:	b93b      	cbnz	r3, 80035cc <_ux_dcd_stm32_transfer_callback+0x22a>
								/* Write to the Fifo.  Last packet. */
								_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index,
 80035bc:	68b1      	ldr	r1, [r6, #8]
 80035be:	2301      	movs	r3, #1
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	4643      	mov	r3, r8
 80035c4:	4638      	mov	r0, r7
 80035c6:	f001 fab0 	bl	8004b2a <_ux_dcd_stm32_fifo_write>
 80035ca:	e01c      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
										data_pointer, fifo_length, UX_TRUE);
							else
								/* Write to the Fifo.  More packets to come. */
								_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index,
 80035cc:	68b1      	ldr	r1, [r6, #8]
 80035ce:	2300      	movs	r3, #0
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4643      	mov	r3, r8
 80035d4:	4638      	mov	r0, r7
 80035d6:	f001 faa8 	bl	8004b2a <_ux_dcd_stm32_fifo_write>
 80035da:	e014      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
		}
	}
	else
	{
		/* We treat non 0 endpoints here. Look at the direction and determine if this an OUT or IN endpoint. */
		if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 80035dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035e0:	d015      	beq.n	800360e <_ux_dcd_stm32_transfer_callback+0x26c>
		}
		else
		{
			/* Update the length of the data sent in previous transaction. */
			transfer_request->ux_slave_transfer_request_actual_length +=
					ed->ux_dcd_stm32_ed_payload_length;
 80035e2:	68f2      	ldr	r2, [r6, #12]
			transfer_request->ux_slave_transfer_request_actual_length +=
 80035e4:	698b      	ldr	r3, [r1, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	618b      	str	r3, [r1, #24]

			/* Check if we have data to send. */
			if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 80035ea:	69cb      	ldr	r3, [r1, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d171      	bne.n	80036d4 <_ux_dcd_stm32_transfer_callback+0x332>
			{
				/* There is no data to send but we may need to send a Zero Length Packet. */
				if (transfer_request->ux_slave_transfer_request_force_zlp == UX_TRUE)
 80035f0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d05b      	beq.n	80036ae <_ux_dcd_stm32_transfer_callback+0x30c>
					transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
				}
				else
				{
					/* Set the completion code to no error. */
					transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 80035f6:	2300      	movs	r3, #0
 80035f8:	620b      	str	r3, [r1, #32]

					/* The transfer is completed. */
					transfer_request->ux_slave_transfer_request_status =
 80035fa:	4608      	mov	r0, r1
 80035fc:	2302      	movs	r3, #2
 80035fe:	f840 3b2c 	str.w	r3, [r0], #44
							UX_TRANSFER_STATUS_COMPLETED;

					/* Non control endpoint operation, use semaphore. */
					_ux_utility_semaphore_put(
 8003602:	f001 f813 	bl	800462c <_ux_utility_semaphore_put>
		}
	}

	/* We are done. */
	return (UX_SUCCESS);
}
 8003606:	2000      	movs	r0, #0
 8003608:	b003      	add	sp, #12
 800360a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 800360e:	ea4f 1948 	mov.w	r9, r8, lsl #5
			ULONG stm32_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8003612:	f609 3108 	addw	r1, r9, #2824	; 0xb08
 8003616:	f7ff feb6 	bl	8003386 <_ux_dcd_stm32_register_read>
			if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPINT_XFRC)
 800361a:	f010 0f01 	tst.w	r0, #1
 800361e:	d03d      	beq.n	800369c <_ux_dcd_stm32_transfer_callback+0x2fa>
				fifo_length = ed->ux_dcd_stm32_ed_payload_length;
 8003620:	68f1      	ldr	r1, [r6, #12]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8003622:	69a2      	ldr	r2, [r4, #24]
						transfer_request->ux_slave_transfer_request_requested_length)
 8003624:	6963      	ldr	r3, [r4, #20]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8003626:	429a      	cmp	r2, r3
 8003628:	d82f      	bhi.n	800368a <_ux_dcd_stm32_transfer_callback+0x2e8>
					if ((transfer_request->ux_slave_transfer_request_actual_length ==
 800362a:	d002      	beq.n	8003632 <_ux_dcd_stm32_transfer_callback+0x290>
							(fifo_length != endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize))
 800362c:	69ea      	ldr	r2, [r5, #28]
							transfer_request->ux_slave_transfer_request_requested_length) ||
 800362e:	428a      	cmp	r2, r1
 8003630:	d008      	beq.n	8003644 <_ux_dcd_stm32_transfer_callback+0x2a2>
						transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8003632:	2300      	movs	r3, #0
 8003634:	6223      	str	r3, [r4, #32]
						transfer_request->ux_slave_transfer_request_status =
 8003636:	4620      	mov	r0, r4
 8003638:	2302      	movs	r3, #2
 800363a:	f840 3b2c 	str.w	r3, [r0], #44
						_ux_utility_semaphore_put(
 800363e:	f000 fff5 	bl	800462c <_ux_utility_semaphore_put>
 8003642:	e7e0      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
						if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8003644:	4293      	cmp	r3, r2
 8003646:	d900      	bls.n	800364a <_ux_dcd_stm32_transfer_callback+0x2a8>
							fifo_length = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8003648:	4613      	mov	r3, r2
						if (fifo_length == 0)
 800364a:	b1db      	cbz	r3, 8003684 <_ux_dcd_stm32_transfer_callback+0x2e2>
									+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 800364c:	4413      	add	r3, r2
 800364e:	3b01      	subs	r3, #1
 8003650:	fbb3 f3f2 	udiv	r3, r3, r2
							endpoint_size = ((fifo_length - 1
 8003654:	fb03 f202 	mul.w	r2, r3, r2
							endpoint_size |= ((fifo_length - 1
 8003658:	ea42 42c3 	orr.w	r2, r2, r3, lsl #19
						_ux_dcd_stm32_register_write(dcd_stm32,
 800365c:	f509 6131 	add.w	r1, r9, #2832	; 0xb10
 8003660:	4638      	mov	r0, r7
 8003662:	f7ff fe9a 	bl	800339a <_ux_dcd_stm32_register_write>
						endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32,
 8003666:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800366a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800366e:	4641      	mov	r1, r8
 8003670:	4638      	mov	r0, r7
 8003672:	f7ff fe88 	bl	8003386 <_ux_dcd_stm32_register_read>
						_ux_dcd_stm32_register_write(dcd_stm32,
 8003676:	f040 4204 	orr.w	r2, r0, #2214592512	; 0x84000000
 800367a:	4641      	mov	r1, r8
 800367c:	4638      	mov	r0, r7
 800367e:	f7ff fe8c 	bl	800339a <_ux_dcd_stm32_register_write>
 8003682:	e7c0      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
							endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;
 8003684:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003688:	e7e8      	b.n	800365c <_ux_dcd_stm32_transfer_callback+0x2ba>
					transfer_request->ux_slave_transfer_request_completion_code =
 800368a:	2327      	movs	r3, #39	; 0x27
 800368c:	6223      	str	r3, [r4, #32]
					transfer_request->ux_slave_transfer_request_status =
 800368e:	4620      	mov	r0, r4
 8003690:	2302      	movs	r3, #2
 8003692:	f840 3b2c 	str.w	r3, [r0], #44
					_ux_utility_semaphore_put(
 8003696:	f000 ffc9 	bl	800462c <_ux_utility_semaphore_put>
 800369a:	e7b4      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
				transfer_request->ux_slave_transfer_request_completion_code = UX_TRANSFER_ERROR;
 800369c:	2323      	movs	r3, #35	; 0x23
 800369e:	6223      	str	r3, [r4, #32]
				transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_COMPLETED;
 80036a0:	4620      	mov	r0, r4
 80036a2:	2302      	movs	r3, #2
 80036a4:	f840 3b2c 	str.w	r3, [r0], #44
				_ux_utility_semaphore_put(&transfer_request->ux_slave_transfer_request_semaphore);
 80036a8:	f000 ffc0 	bl	800462c <_ux_utility_semaphore_put>
 80036ac:	e7ab      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
									+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 80036ae:	ea4f 1148 	mov.w	r1, r8, lsl #5
					_ux_dcd_stm32_register_write(dcd_stm32,
 80036b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036b6:	f501 6111 	add.w	r1, r1, #2320	; 0x910
 80036ba:	f7ff fe6e 	bl	800339a <_ux_dcd_stm32_register_write>
					_ux_dcd_stm32_register_set(dcd_stm32,
 80036be:	f108 0148 	add.w	r1, r8, #72	; 0x48
 80036c2:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 80036c6:	0149      	lsls	r1, r1, #5
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff fe60 	bl	800338e <_ux_dcd_stm32_register_set>
					transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	6523      	str	r3, [r4, #80]	; 0x50
 80036d2:	e798      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
						+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80036d4:	f108 0948 	add.w	r9, r8, #72	; 0x48
				ULONG endpoint_control_address = (UX_DCD_STM32_OTG_FS_DIEPCTL
 80036d8:	ea4f 1949 	mov.w	r9, r9, lsl #5
						+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80036dc:	ea4f 1848 	mov.w	r8, r8, lsl #5
				ULONG endpoint_size_address = (UX_DCD_STM32_OTG_FS_DIEPTSIZ
 80036e0:	f508 6811 	add.w	r8, r8, #2320	; 0x910
				endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 80036e4:	4649      	mov	r1, r9
 80036e6:	f7ff fe4e 	bl	8003386 <_ux_dcd_stm32_register_read>
 80036ea:	4683      	mov	fp, r0
				fifo_length = transfer_request->ux_slave_transfer_request_in_transfer_length;
 80036ec:	69e3      	ldr	r3, [r4, #28]
				if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 80036ee:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80036f2:	459a      	cmp	sl, r3
 80036f4:	d300      	bcc.n	80036f8 <_ux_dcd_stm32_transfer_callback+0x356>
				fifo_length = transfer_request->ux_slave_transfer_request_in_transfer_length;
 80036f6:	469a      	mov	sl, r3
				ed->ux_dcd_stm32_ed_payload_length = fifo_length;
 80036f8:	f8c6 a00c 	str.w	sl, [r6, #12]
						+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 80036fc:	69eb      	ldr	r3, [r5, #28]
 80036fe:	eb03 020a 	add.w	r2, r3, sl
 8003702:	3a01      	subs	r2, #1
 8003704:	fbb2 f2f3 	udiv	r2, r2, r3
				_ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size);
 8003708:	ea4a 42c2 	orr.w	r2, sl, r2, lsl #19
 800370c:	4641      	mov	r1, r8
 800370e:	4638      	mov	r0, r7
 8003710:	f7ff fe43 	bl	800339a <_ux_dcd_stm32_register_write>
				_ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8003714:	f04b 4204 	orr.w	r2, fp, #2214592512	; 0x84000000
 8003718:	4649      	mov	r1, r9
 800371a:	4638      	mov	r0, r7
 800371c:	f7ff fe3d 	bl	800339a <_ux_dcd_stm32_register_write>
				data_pointer = transfer_request->ux_slave_transfer_request_current_data_pointer;
 8003720:	6922      	ldr	r2, [r4, #16]
				transfer_request->ux_slave_transfer_request_current_data_pointer += fifo_length;
 8003722:	eb02 030a 	add.w	r3, r2, sl
 8003726:	6123      	str	r3, [r4, #16]
				transfer_request->ux_slave_transfer_request_in_transfer_length -= fifo_length;
 8003728:	69e3      	ldr	r3, [r4, #28]
 800372a:	eba3 030a 	sub.w	r3, r3, sl
 800372e:	61e3      	str	r3, [r4, #28]
				if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8003730:	b13b      	cbz	r3, 8003742 <_ux_dcd_stm32_transfer_callback+0x3a0>
					_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index, data_pointer,
 8003732:	68b1      	ldr	r1, [r6, #8]
 8003734:	2300      	movs	r3, #0
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4653      	mov	r3, sl
 800373a:	4638      	mov	r0, r7
 800373c:	f001 f9f5 	bl	8004b2a <_ux_dcd_stm32_fifo_write>
 8003740:	e761      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
					_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index, data_pointer,
 8003742:	68b1      	ldr	r1, [r6, #8]
 8003744:	2301      	movs	r3, #1
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4653      	mov	r3, sl
 800374a:	4638      	mov	r0, r7
 800374c:	f001 f9ed 	bl	8004b2a <_ux_dcd_stm32_fifo_write>
 8003750:	e759      	b.n	8003606 <_ux_dcd_stm32_transfer_callback+0x264>
	...

08003754 <_ux_device_stack_class_register>:
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_class_register(UCHAR* class_name,
		UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT*),
		ULONG configuration_number, ULONG interface_number, VOID* parameter)
{
 8003754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003758:	b08c      	sub	sp, #48	; 0x30
 800375a:	4680      	mov	r8, r0
 800375c:	460d      	mov	r5, r1
 800375e:	4617      	mov	r7, r2
 8003760:	461e      	mov	r6, r3
	/* Get the length of the class name (exclude null-terminator). */
	UINT class_name_length = 0;
 8003762:	a90c      	add	r1, sp, #48	; 0x30
 8003764:	2300      	movs	r3, #0
 8003766:	f841 3d04 	str.w	r3, [r1, #-4]!
	UINT status = _ux_utility_string_length_check(class_name, &class_name_length,
 800376a:	223f      	movs	r2, #63	; 0x3f
 800376c:	f000 ff67 	bl	800463e <_ux_utility_string_length_check>
			UX_MAX_CLASS_NAME_LENGTH);
	if (status)
 8003770:	4603      	mov	r3, r0
 8003772:	bb48      	cbnz	r0, 80037c8 <_ux_device_stack_class_register+0x74>
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name,
			interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* We need to parse the class table to find an empty spot. */
	UX_SLAVE_CLASS* class = _ux_system_slave->ux_system_slave_class_array;
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <_ux_device_stack_class_register+0x7c>)
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	f8d1 4180 	ldr.w	r4, [r1, #384]	; 0x180
	ULONG class_index;
	UX_SLAVE_CLASS_COMMAND command;
	for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class; class_index++)
 800377c:	2300      	movs	r3, #0
 800377e:	f8d1 2178 	ldr.w	r2, [r1, #376]	; 0x178
 8003782:	429a      	cmp	r2, r3
 8003784:	d91f      	bls.n	80037c6 <_ux_device_stack_class_register+0x72>
	{
		/* Check if this class is already used. */
		if (class->ux_slave_class_status == UX_UNUSED)
 8003786:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003788:	b11a      	cbz	r2, 8003792 <_ux_device_stack_class_register+0x3e>
			/* Return successful completion. */
			return (UX_SUCCESS);
		}

		/* Move to the next class. */
		class++;
 800378a:	f504 7498 	add.w	r4, r4, #304	; 0x130
	for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class; class_index++)
 800378e:	3301      	adds	r3, #1
 8003790:	e7f5      	b.n	800377e <_ux_device_stack_class_register+0x2a>
			_ux_utility_memory_copy(class->ux_slave_class_name, class_name, class_name_length + 1);
 8003792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003794:	3201      	adds	r2, #1
 8003796:	4641      	mov	r1, r8
 8003798:	4620      	mov	r0, r4
 800379a:	f000 fe7a 	bl	8004492 <_ux_utility_memory_copy>
			class->ux_slave_class_entry_function = class_entry_function;
 800379e:	6465      	str	r5, [r4, #68]	; 0x44
			class->ux_slave_class_interface_parameter = parameter;
 80037a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037a2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
			class->ux_slave_class_configuration_number = configuration_number;
 80037a6:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
			class->ux_slave_class_interface_number = interface_number;
 80037aa:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
			command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 80037ae:	2305      	movs	r3, #5
 80037b0:	9300      	str	r3, [sp, #0]
			command.ux_slave_class_command_parameter = parameter;
 80037b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037b4:	9309      	str	r3, [sp, #36]	; 0x24
			command.ux_slave_class_command_class_ptr = class;
 80037b6:	9408      	str	r4, [sp, #32]
			status = class_entry_function(&command);
 80037b8:	4668      	mov	r0, sp
 80037ba:	47a8      	blx	r5
			if (status != UX_SUCCESS)
 80037bc:	4603      	mov	r3, r0
 80037be:	b918      	cbnz	r0, 80037c8 <_ux_device_stack_class_register+0x74>
			class->ux_slave_class_status = UX_USED;
 80037c0:	2201      	movs	r2, #1
 80037c2:	6422      	str	r2, [r4, #64]	; 0x40
			return (UX_SUCCESS);
 80037c4:	e000      	b.n	80037c8 <_ux_device_stack_class_register+0x74>
	}

	/* No more entries in the class table. */
	return (UX_MEMORY_INSUFFICIENT);
 80037c6:	2312      	movs	r3, #18
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	b00c      	add	sp, #48	; 0x30
 80037cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d0:	20000488 	.word	0x20000488

080037d4 <_ux_device_stack_control_request_process>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER* transfer_request)
{
 80037d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d8:	b08f      	sub	sp, #60	; 0x3c
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <_ux_device_stack_control_request_process+0x204>)
 80037dc:	681f      	ldr	r7, [r3, #0]
	UINT status = UX_ERROR;
	ULONG application_data_length;
	UX_SLAVE_CLASS_COMMAND class_command;

	/* Ensure that the Setup request has been received correctly. */
	if (transfer_request->ux_slave_transfer_request_completion_code == UX_SUCCESS)
 80037de:	6a04      	ldr	r4, [r0, #32]
 80037e0:	2c00      	cmp	r4, #0
 80037e2:	f040 80f4 	bne.w	80039ce <_ux_device_stack_control_request_process+0x1fa>
 80037e6:	4605      	mov	r5, r0
	{
		/* Seems so far, the Setup request is valid. Extract all fields of the request. */
		ULONG request_type = *transfer_request->ux_slave_transfer_request_setup;
 80037e8:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
		ULONG request = *(transfer_request->ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 80037ec:	f890 b055 	ldrb.w	fp, [r0, #85]	; 0x55
		ULONG request_value = _ux_utility_short_get(
 80037f0:	3056      	adds	r0, #86	; 0x56
 80037f2:	f000 ff1f 	bl	8004634 <_ux_utility_short_get>
 80037f6:	4681      	mov	r9, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_VALUE);
		ULONG request_index = _ux_utility_short_get(
 80037f8:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80037fc:	f000 ff1a 	bl	8004634 <_ux_utility_short_get>
 8003800:	4680      	mov	r8, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_INDEX);
		ULONG request_length = _ux_utility_short_get(
 8003802:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8003806:	f000 ff15 	bl	8004634 <_ux_utility_short_get>
 800380a:	4682      	mov	sl, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_LENGTH);

		/* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned
		 * is not a standard descriptor, treat the command as a CLASS command. */
		if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR)
 800380c:	f1ab 0306 	sub.w	r3, fp, #6
 8003810:	2b01      	cmp	r3, #1
 8003812:	d90b      	bls.n	800382c <_ux_device_stack_control_request_process+0x58>
			request_type |= UX_REQUEST_TYPE_CLASS;
		}

		/* Check if there is a vendor registered function at the application layer.
		 * If the request is VENDOR and the request match, pass the request to the application. */
		if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8003814:	f006 0360 	and.w	r3, r6, #96	; 0x60
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d011      	beq.n	8003840 <_ux_device_stack_control_request_process+0x6c>
			}
		}

		/* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
		 * the function has to be passed to the class layer. */
		if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	bf18      	it	ne
 8003820:	2b20      	cmpne	r3, #32
 8003822:	d152      	bne.n	80038ca <_ux_device_stack_control_request_process+0xf6>
				((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
		{
			/* Build all the fields of the Class Command. */
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_REQUEST;
 8003824:	2304      	movs	r3, #4
 8003826:	9302      	str	r3, [sp, #8]
	UINT status = UX_ERROR;
 8003828:	25ff      	movs	r5, #255	; 0xff

			/* We need to find which class this request is for. */
			ULONG class_index;
			for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index++)
 800382a:	e03b      	b.n	80038a4 <_ux_device_stack_control_request_process+0xd0>
				&& (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800382c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8003830:	f013 0f60 	tst.w	r3, #96	; 0x60
 8003834:	d0ee      	beq.n	8003814 <_ux_device_stack_control_request_process+0x40>
			request_type &= (UINT)~UX_REQUEST_TYPE;
 8003836:	f026 0660 	bic.w	r6, r6, #96	; 0x60
			request_type |= UX_REQUEST_TYPE_CLASS;
 800383a:	f046 0620 	orr.w	r6, r6, #32
 800383e:	e7e9      	b.n	8003814 <_ux_device_stack_control_request_process+0x40>
			if (request == _ux_system_slave->ux_system_slave_device_vendor_request)
 8003840:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <_ux_device_stack_control_request_process+0x204>)
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	f8d2 11ec 	ldr.w	r1, [r2, #492]	; 0x1ec
 8003848:	4559      	cmp	r1, fp
 800384a:	d1e7      	bne.n	800381c <_ux_device_stack_control_request_process+0x48>
				status = _ux_system_slave->ux_system_slave_device_vendor_request_function(
 800384c:	f8d2 41f0 	ldr.w	r4, [r2, #496]	; 0x1f0
 8003850:	68eb      	ldr	r3, [r5, #12]
 8003852:	aa0d      	add	r2, sp, #52	; 0x34
 8003854:	9201      	str	r2, [sp, #4]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4653      	mov	r3, sl
 800385a:	4642      	mov	r2, r8
 800385c:	4649      	mov	r1, r9
 800385e:	4658      	mov	r0, fp
 8003860:	47a0      	blx	r4
				if (status == UX_SUCCESS)
 8003862:	4605      	mov	r5, r0
 8003864:	b948      	cbnz	r0, 800387a <_ux_device_stack_control_request_process+0xa6>
					transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8003866:	2303      	movs	r3, #3
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					_ux_device_stack_transfer_request(transfer_request, request_length,
 800386c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800386e:	4651      	mov	r1, sl
 8003870:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003874:	f000 fc60 	bl	8004138 <_ux_device_stack_transfer_request>
					return (UX_SUCCESS);
 8003878:	e0aa      	b.n	80039d0 <_ux_device_stack_control_request_process+0x1fc>
					_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 800387a:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800387e:	f000 fa95 	bl	8003dac <_ux_device_stack_endpoint_stall>
					return (UX_SUCCESS);
 8003882:	2500      	movs	r5, #0
 8003884:	e0a4      	b.n	80039d0 <_ux_device_stack_control_request_process+0x1fc>
						continue;
				}

				/* Get the class for the interface. */
				UX_SLAVE_CLASS* class =
						_ux_system_slave->ux_system_slave_interface_class_array[class_index];
 8003886:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <_ux_device_stack_control_request_process+0x204>)
 8003888:	681b      	ldr	r3, [r3, #0]
				UX_SLAVE_CLASS* class =
 800388a:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800388e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003892:	685b      	ldr	r3, [r3, #4]

				/* If class is not ready, try next. */
				if (class == UX_NULL)
 8003894:	b12b      	cbz	r3, 80038a2 <_ux_device_stack_control_request_process+0xce>
					continue;

				/* Memorize the class in the command. */
				class_command.ux_slave_class_command_class_ptr = class;
 8003896:	930a      	str	r3, [sp, #40]	; 0x28

				/* We have found a potential candidate. Call this registered class entry function. */
				status = class->ux_slave_class_entry_function(&class_command);
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	a802      	add	r0, sp, #8
 800389c:	4798      	blx	r3

				/* The status simply tells us if the registered class handled the
				 * command - if there was an issue processing the command, it would've
				 * stalled the control endpoint, notifying the host (and not us). */
				if (status == UX_SUCCESS)
 800389e:	4605      	mov	r5, r0
 80038a0:	b158      	cbz	r0, 80038ba <_ux_device_stack_control_request_process+0xe6>
			for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index++)
 80038a2:	3401      	adds	r4, #1
 80038a4:	2c0f      	cmp	r4, #15
 80038a6:	d808      	bhi.n	80038ba <_ux_device_stack_control_request_process+0xe6>
				if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 80038a8:	f006 0303 	and.w	r3, r6, #3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d1ea      	bne.n	8003886 <_ux_device_stack_control_request_process+0xb2>
					if ((request_index & 0xFF) != class_index)
 80038b0:	fa5f f388 	uxtb.w	r3, r8
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d0e6      	beq.n	8003886 <_ux_device_stack_control_request_process+0xb2>
 80038b8:	e7f3      	b.n	80038a2 <_ux_device_stack_control_request_process+0xce>

				/* Not handled, try next. */
			}

			/* If no class handled the command, then we have an error here. */
			if (status != UX_SUCCESS)
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	f000 8088 	beq.w	80039d0 <_ux_device_stack_control_request_process+0x1fc>
				/* We stall the command (request not supported). */
				_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 80038c0:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80038c4:	f000 fa72 	bl	8003dac <_ux_device_stack_endpoint_stall>
 80038c8:	e082      	b.n	80039d0 <_ux_device_stack_control_request_process+0x1fc>
			return (status);
		}

		/* At this point, the request must be a standard request that the device stack should handle.
		 * Requests are here: 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, ..., 6, 6, 6, 6, 6, 6, 6, 1 */
		switch (request)
 80038ca:	f1bb 0f0c 	cmp.w	fp, #12
 80038ce:	d87c      	bhi.n	80039ca <_ux_device_stack_control_request_process+0x1f6>
 80038d0:	e8df f00b 	tbb	[pc, fp]
 80038d4:	267b1907 	.word	0x267b1907
 80038d8:	4c40337b 	.word	0x4c40337b
 80038dc:	6b625851 	.word	0x6b625851
 80038e0:	76          	.byte	0x76
 80038e1:	00          	.byte	0x00
		{
			/* (0) For Device Reads the settings of the power supply (self or bus) and remote wakeup.
			 * For Endpoint Reads the halt status. */
			case UX_GET_STATUS:
				DEBUG_PRINT("GET_STATUS: %04X, %04X\r\n", (UINT)request_type,
 80038e2:	4642      	mov	r2, r8
 80038e4:	4631      	mov	r1, r6
 80038e6:	483d      	ldr	r0, [pc, #244]	; (80039dc <_ux_device_stack_control_request_process+0x208>)
 80038e8:	f003 feea 	bl	80076c0 <iprintf>
						(UINT)request_index);
				status = _ux_device_stack_get_status(request_type, request_index, request_length);
 80038ec:	4652      	mov	r2, sl
 80038ee:	4641      	mov	r1, r8
 80038f0:	4630      	mov	r0, r6
 80038f2:	f000 fa73 	bl	8003ddc <_ux_device_stack_get_status>
 80038f6:	4605      	mov	r5, r0
			default:
				status = UX_FUNCTION_NOT_SUPPORTED;
				break;
		}

		if (status != UX_SUCCESS)
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	d069      	beq.n	80039d0 <_ux_device_stack_control_request_process+0x1fc>
			/* Stall the control endpoint to issue protocol error. */
			_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 80038fc:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003900:	f000 fa54 	bl	8003dac <_ux_device_stack_endpoint_stall>
 8003904:	e064      	b.n	80039d0 <_ux_device_stack_control_request_process+0x1fc>
				DEBUG_PRINT("GET_STATUS: %04X, %04X, %04X\r\n", (UINT)request_type,
 8003906:	4643      	mov	r3, r8
 8003908:	464a      	mov	r2, r9
 800390a:	4631      	mov	r1, r6
 800390c:	4834      	ldr	r0, [pc, #208]	; (80039e0 <_ux_device_stack_control_request_process+0x20c>)
 800390e:	f003 fed7 	bl	80076c0 <iprintf>
				status = _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8003912:	4642      	mov	r2, r8
 8003914:	4649      	mov	r1, r9
 8003916:	4630      	mov	r0, r6
 8003918:	f001 fbea 	bl	80050f0 <_ux_device_stack_clear_feature>
 800391c:	4605      	mov	r5, r0
				break;
 800391e:	e7eb      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SET_FEATURE: %04X, %04X, %04X\r\n", (UINT)request_type,
 8003920:	4643      	mov	r3, r8
 8003922:	464a      	mov	r2, r9
 8003924:	4631      	mov	r1, r6
 8003926:	482f      	ldr	r0, [pc, #188]	; (80039e4 <_ux_device_stack_control_request_process+0x210>)
 8003928:	f003 feca 	bl	80076c0 <iprintf>
				status = _ux_device_stack_set_feature(request_type, request_value, request_index);
 800392c:	4642      	mov	r2, r8
 800392e:	4649      	mov	r1, r9
 8003930:	4630      	mov	r0, r6
 8003932:	f000 fbcb 	bl	80040cc <_ux_device_stack_set_feature>
 8003936:	4605      	mov	r5, r0
				break;
 8003938:	e7de      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SET_ADDRESS: %04X\r\n", (UINT)request_value);
 800393a:	4649      	mov	r1, r9
 800393c:	482a      	ldr	r0, [pc, #168]	; (80039e8 <_ux_device_stack_control_request_process+0x214>)
 800393e:	f003 febf 	bl	80076c0 <iprintf>
				dcd->ux_slave_dcd_device_address = request_value;
 8003942:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
				status = dcd->ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS,
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	464a      	mov	r2, r9
 800394a:	2111      	movs	r1, #17
 800394c:	4638      	mov	r0, r7
 800394e:	4798      	blx	r3
 8003950:	4605      	mov	r5, r0
				break;
 8003952:	e7d1      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("GET_DESCRIPTOR: %04X, %04X\r\n", (UINT)request_value,
 8003954:	4642      	mov	r2, r8
 8003956:	4649      	mov	r1, r9
 8003958:	4824      	ldr	r0, [pc, #144]	; (80039ec <_ux_device_stack_control_request_process+0x218>)
 800395a:	f003 feb1 	bl	80076c0 <iprintf>
				status = _ux_device_stack_descriptor_send(request_value, request_index,
 800395e:	4652      	mov	r2, sl
 8003960:	4641      	mov	r1, r8
 8003962:	4648      	mov	r0, r9
 8003964:	f000 f850 	bl	8003a08 <_ux_device_stack_descriptor_send>
 8003968:	4605      	mov	r5, r0
				break;
 800396a:	e7c5      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("FUNCTION_NOT_SUPPORTED\r\n");
 800396c:	4820      	ldr	r0, [pc, #128]	; (80039f0 <_ux_device_stack_control_request_process+0x21c>)
 800396e:	f003 ff1b 	bl	80077a8 <puts>
				status = UX_FUNCTION_NOT_SUPPORTED;
 8003972:	2554      	movs	r5, #84	; 0x54
 8003974:	e7c2      	b.n	80038fc <_ux_device_stack_control_request_process+0x128>
				DEBUG_PRINT("GET_CONFIGURATION\r\n");
 8003976:	481f      	ldr	r0, [pc, #124]	; (80039f4 <_ux_device_stack_control_request_process+0x220>)
 8003978:	f003 ff16 	bl	80077a8 <puts>
				status = _ux_device_stack_configuration_get();
 800397c:	f001 fbee 	bl	800515c <_ux_device_stack_configuration_get>
 8003980:	4605      	mov	r5, r0
				break;
 8003982:	e7b9      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				status = _ux_device_stack_configuration_set(request_value);
 8003984:	4648      	mov	r0, r9
 8003986:	f001 fbfd 	bl	8005184 <_ux_device_stack_configuration_set>
 800398a:	4605      	mov	r5, r0
				DEBUG_PRINT("SET_CONFIGURATION: %04X STATUS: %04X\r\n", (UINT)request_value, status);
 800398c:	4602      	mov	r2, r0
 800398e:	4649      	mov	r1, r9
 8003990:	4819      	ldr	r0, [pc, #100]	; (80039f8 <_ux_device_stack_control_request_process+0x224>)
 8003992:	f003 fe95 	bl	80076c0 <iprintf>
				break;
 8003996:	e7af      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("GET_INTERFACE: %04X\r\n", (UINT)request_index);
 8003998:	4641      	mov	r1, r8
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <_ux_device_stack_control_request_process+0x228>)
 800399c:	f003 fe90 	bl	80076c0 <iprintf>
				status = _ux_device_stack_alternate_setting_get(request_index);
 80039a0:	4640      	mov	r0, r8
 80039a2:	f001 fa9d 	bl	8004ee0 <_ux_device_stack_alternate_setting_get>
 80039a6:	4605      	mov	r5, r0
				break;
 80039a8:	e7a6      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SET_INTERFACE: %04X, %04X\r\n", (UINT)request_index,
 80039aa:	464a      	mov	r2, r9
 80039ac:	4641      	mov	r1, r8
 80039ae:	4814      	ldr	r0, [pc, #80]	; (8003a00 <_ux_device_stack_control_request_process+0x22c>)
 80039b0:	f003 fe86 	bl	80076c0 <iprintf>
				status = _ux_device_stack_alternate_setting_set(request_index, request_value);
 80039b4:	4649      	mov	r1, r9
 80039b6:	4640      	mov	r0, r8
 80039b8:	f001 fab6 	bl	8004f28 <_ux_device_stack_alternate_setting_set>
 80039bc:	4605      	mov	r5, r0
				break;
 80039be:	e79b      	b.n	80038f8 <_ux_device_stack_control_request_process+0x124>
				DEBUG_PRINT("SYNCH_FRAME\r\n");
 80039c0:	4810      	ldr	r0, [pc, #64]	; (8003a04 <_ux_device_stack_control_request_process+0x230>)
 80039c2:	f003 fef1 	bl	80077a8 <puts>
				status = UX_SUCCESS;
 80039c6:	2500      	movs	r5, #0
 80039c8:	e002      	b.n	80039d0 <_ux_device_stack_control_request_process+0x1fc>
				status = UX_FUNCTION_NOT_SUPPORTED;
 80039ca:	2554      	movs	r5, #84	; 0x54
 80039cc:	e796      	b.n	80038fc <_ux_device_stack_control_request_process+0x128>
	UINT status = UX_ERROR;
 80039ce:	25ff      	movs	r5, #255	; 0xff
	}

	/* Return the function status. */
	return (status);
}
 80039d0:	4628      	mov	r0, r5
 80039d2:	b00f      	add	sp, #60	; 0x3c
 80039d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d8:	20000488 	.word	0x20000488
 80039dc:	08008654 	.word	0x08008654
 80039e0:	08008670 	.word	0x08008670
 80039e4:	08008690 	.word	0x08008690
 80039e8:	080086b0 	.word	0x080086b0
 80039ec:	080086c4 	.word	0x080086c4
 80039f0:	080086e4 	.word	0x080086e4
 80039f4:	080086fc 	.word	0x080086fc
 80039f8:	08008710 	.word	0x08008710
 80039fc:	08008738 	.word	0x08008738
 8003a00:	08008750 	.word	0x08008750
 8003a04:	0800876c 	.word	0x0800876c

08003a08 <_ux_device_stack_descriptor_send>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	b089      	sub	sp, #36	; 0x24
 8003a0e:	4616      	mov	r6, r2
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index,
			0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003a10:	4bc7      	ldr	r3, [pc, #796]	; (8003d30 <_ux_device_stack_descriptor_send+0x328>)
 8003a12:	681c      	ldr	r4, [r3, #0]

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Get the control endpoint associated with the device. */
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;
 8003a14:	f104 097c 	add.w	r9, r4, #124	; 0x7c

	/* Get the pointer to the transfer request associated with the endpoint. */
	UX_SLAVE_TRANSFER* transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 8003a18:	f104 08ac 	add.w	r8, r4, #172	; 0xac

	/* Set the direction to OUT. */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	/* Isolate the descriptor index. */
	ULONG descriptor_index = descriptor_type & 0xff;
 8003a22:	b2c5      	uxtb	r5, r0
	ULONG configuration_descriptor_length;

	UCHAR* string_memory;

	/* What type of descriptor do we need to return?  */
	switch (descriptor_type)
 8003a24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003a28:	3801      	subs	r0, #1
 8003a2a:	280e      	cmp	r0, #14
 8003a2c:	f200 8178 	bhi.w	8003d20 <_ux_device_stack_descriptor_send+0x318>
 8003a30:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003a34:	00b9000f 	.word	0x00b9000f
 8003a38:	017600f1 	.word	0x017600f1
 8003a3c:	00220176 	.word	0x00220176
 8003a40:	0176007d 	.word	0x0176007d
 8003a44:	01760040 	.word	0x01760040
 8003a48:	01760176 	.word	0x01760176
 8003a4c:	01760176 	.word	0x01760176
 8003a50:	005e      	.short	0x005e
	{
		case UX_DEVICE_DESCRIPTOR_ITEM:						// 1
			/* Setup the length appropriately. */
			length = (host_length > UX_DEVICE_DESCRIPTOR_LENGTH) ? UX_DEVICE_DESCRIPTOR_LENGTH :
 8003a52:	4615      	mov	r5, r2
 8003a54:	2a12      	cmp	r2, #18
 8003a56:	bf28      	it	cs
 8003a58:	2512      	movcs	r5, #18
					host_length;

			/* Copy the device descriptor into the transfer request memory. */
			_ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_data_pointer,
 8003a5a:	462a      	mov	r2, r5
 8003a5c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8003a60:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003a64:	f000 fd15 	bl	8004492 <_ux_utility_memory_copy>
					_ux_system_slave->ux_system_slave_device_framework, length);

			/* Perform the data transfer.
			 * transfer_request->ux_slave_transfer_request_endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize == 0 ?*/
			status = _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	f000 fb63 	bl	8004138 <_ux_device_stack_transfer_request>
			return (UX_ERROR);
	}

	/* Return the status to the caller. */
	return (status);
}
 8003a72:	b009      	add	sp, #36	; 0x24
 8003a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			length = (host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH) ?
 8003a78:	4615      	mov	r5, r2
 8003a7a:	2a0a      	cmp	r2, #10
 8003a7c:	bf28      	it	cs
 8003a7e:	250a      	movcs	r5, #10
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003a80:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003a84:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 8003a88:	4408      	add	r0, r1
			while (device_framework < device_framework_end)
 8003a8a:	e000      	b.n	8003a8e <_ux_device_stack_descriptor_send+0x86>
				device_framework += descriptor_length;
 8003a8c:	4411      	add	r1, r2
			while (device_framework < device_framework_end)
 8003a8e:	4281      	cmp	r1, r0
 8003a90:	d20e      	bcs.n	8003ab0 <_ux_device_stack_descriptor_send+0xa8>
				descriptor_type = *(device_framework + 1);
 8003a92:	784b      	ldrb	r3, [r1, #1]
				descriptor_length = (ULONG)*device_framework;
 8003a94:	780a      	ldrb	r2, [r1, #0]
				if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM)
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d1f8      	bne.n	8003a8c <_ux_device_stack_descriptor_send+0x84>
					_ux_utility_memory_copy(
 8003a9a:	462a      	mov	r2, r5
 8003a9c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003aa0:	f000 fcf7 	bl	8004492 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	f000 fb45 	bl	8004138 <_ux_device_stack_transfer_request>
					break;
 8003aae:	e7e0      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
	UINT status = UX_ERROR;
 8003ab0:	20ff      	movs	r0, #255	; 0xff
 8003ab2:	e7de      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
			length = (host_length > UX_OTG_DESCRIPTOR_LENGTH) ? UX_OTG_DESCRIPTOR_LENGTH :
 8003ab4:	4615      	mov	r5, r2
 8003ab6:	2a05      	cmp	r2, #5
 8003ab8:	bf28      	it	cs
 8003aba:	2505      	movcs	r5, #5
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003abc:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003ac0:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 8003ac4:	4408      	add	r0, r1
			while (device_framework < device_framework_end)
 8003ac6:	e000      	b.n	8003aca <_ux_device_stack_descriptor_send+0xc2>
				device_framework += descriptor_length;
 8003ac8:	4411      	add	r1, r2
			while (device_framework < device_framework_end)
 8003aca:	4281      	cmp	r1, r0
 8003acc:	d20e      	bcs.n	8003aec <_ux_device_stack_descriptor_send+0xe4>
				descriptor_type = *(device_framework + 1);
 8003ace:	784b      	ldrb	r3, [r1, #1]
				descriptor_length = (ULONG)*device_framework;
 8003ad0:	780a      	ldrb	r2, [r1, #0]
				if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM)
 8003ad2:	2b09      	cmp	r3, #9
 8003ad4:	d1f8      	bne.n	8003ac8 <_ux_device_stack_descriptor_send+0xc0>
					_ux_utility_memory_copy(
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003adc:	f000 fcd9 	bl	8004492 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 8003ae0:	4632      	mov	r2, r6
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	f000 fb27 	bl	8004138 <_ux_device_stack_transfer_request>
					break;
 8003aea:	e7c2      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
	UINT status = UX_ERROR;
 8003aec:	20ff      	movs	r0, #255	; 0xff
 8003aee:	e7c0      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003af0:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003af4:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 8003af8:	4429      	add	r1, r5
			while (device_framework < device_framework_end)
 8003afa:	e000      	b.n	8003afe <_ux_device_stack_descriptor_send+0xf6>
				device_framework += descriptor_length;
 8003afc:	4415      	add	r5, r2
			while (device_framework < device_framework_end)
 8003afe:	428d      	cmp	r5, r1
 8003b00:	d213      	bcs.n	8003b2a <_ux_device_stack_descriptor_send+0x122>
				descriptor_type = *(device_framework + 1);
 8003b02:	786b      	ldrb	r3, [r5, #1]
				descriptor_length = (ULONG)*device_framework;
 8003b04:	782a      	ldrb	r2, [r5, #0]
				if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d1f8      	bne.n	8003afc <_ux_device_stack_descriptor_send+0xf4>
					length = _ux_utility_short_get(device_framework + 2);
 8003b0a:	1ca8      	adds	r0, r5, #2
 8003b0c:	f000 fd92 	bl	8004634 <_ux_utility_short_get>
 8003b10:	4607      	mov	r7, r0
					_ux_utility_memory_copy(
 8003b12:	4602      	mov	r2, r0
 8003b14:	4629      	mov	r1, r5
 8003b16:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003b1a:	f000 fcba 	bl	8004492 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 8003b1e:	4632      	mov	r2, r6
 8003b20:	4639      	mov	r1, r7
 8003b22:	4640      	mov	r0, r8
 8003b24:	f000 fb08 	bl	8004138 <_ux_device_stack_transfer_request>
					break;
 8003b28:	e7a3      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
	UINT status = UX_ERROR;
 8003b2a:	20ff      	movs	r0, #255	; 0xff
 8003b2c:	e7a1      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
			device_framework = _ux_system_slave->ux_system_slave_device_framework_full_speed;
 8003b2e:	f8d4 7150 	ldr.w	r7, [r4, #336]	; 0x150
			device_framework_length =
 8003b32:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
			device_framework_end = device_framework + device_framework_length;
 8003b36:	4439      	add	r1, r7
	ULONG parsed_descriptor_index = 0;
 8003b38:	2000      	movs	r0, #0
			while (device_framework < device_framework_end)
 8003b3a:	e028      	b.n	8003b8e <_ux_device_stack_descriptor_send+0x186>
						_ux_utility_descriptor_parse(device_framework,
 8003b3c:	466b      	mov	r3, sp
 8003b3e:	2208      	movs	r2, #8
 8003b40:	497c      	ldr	r1, [pc, #496]	; (8003d34 <_ux_device_stack_descriptor_send+0x32c>)
 8003b42:	4638      	mov	r0, r7
 8003b44:	f000 fbd0 	bl	80042e8 <_ux_utility_descriptor_parse>
						configuration_descriptor_length = configuration_descriptor.wTotalLength;
 8003b48:	9d02      	ldr	r5, [sp, #8]
						length = (configuration_descriptor_length < host_length) ?
 8003b4a:	42b5      	cmp	r5, r6
 8003b4c:	bf28      	it	cs
 8003b4e:	4635      	movcs	r5, r6
						if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8003b50:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003b54:	d90a      	bls.n	8003b6c <_ux_device_stack_descriptor_send+0x164>
							_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8003b56:	2212      	movs	r2, #18
 8003b58:	2109      	movs	r1, #9
 8003b5a:	2002      	movs	r0, #2
 8003b5c:	f000 fb46 	bl	80041ec <_ux_system_error_handler>
							status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 8003b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b62:	464a      	mov	r2, r9
 8003b64:	2114      	movs	r1, #20
 8003b66:	4620      	mov	r0, r4
 8003b68:	4798      	blx	r3
							break;
 8003b6a:	e782      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
						_ux_utility_memory_copy(
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4639      	mov	r1, r7
 8003b70:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003b74:	f000 fc8d 	bl	8004492 <_ux_utility_memory_copy>
						*(transfer_request->ux_slave_transfer_request_data_pointer + 1) =
 8003b78:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	705a      	strb	r2, [r3, #1]
						status = _ux_device_stack_transfer_request(transfer_request, length,
 8003b80:	4632      	mov	r2, r6
 8003b82:	4629      	mov	r1, r5
 8003b84:	4640      	mov	r0, r8
 8003b86:	f000 fad7 	bl	8004138 <_ux_device_stack_transfer_request>
						break;
 8003b8a:	e772      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
				device_framework += descriptor_length;
 8003b8c:	4417      	add	r7, r2
			while (device_framework < device_framework_end)
 8003b8e:	428f      	cmp	r7, r1
 8003b90:	d207      	bcs.n	8003ba2 <_ux_device_stack_descriptor_send+0x19a>
				descriptor_type = *(device_framework + 1);
 8003b92:	787b      	ldrb	r3, [r7, #1]
				descriptor_length = (ULONG)*device_framework;
 8003b94:	783a      	ldrb	r2, [r7, #0]
				if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d1f8      	bne.n	8003b8c <_ux_device_stack_descriptor_send+0x184>
					if (parsed_descriptor_index == descriptor_index)
 8003b9a:	42a8      	cmp	r0, r5
 8003b9c:	d0ce      	beq.n	8003b3c <_ux_device_stack_descriptor_send+0x134>
						parsed_descriptor_index++;
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	e7f4      	b.n	8003b8c <_ux_device_stack_descriptor_send+0x184>
	UINT status = UX_ERROR;
 8003ba2:	20ff      	movs	r0, #255	; 0xff
 8003ba4:	e765      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003ba6:	f8d4 7148 	ldr.w	r7, [r4, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003baa:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 8003bae:	4439      	add	r1, r7
	ULONG parsed_descriptor_index = 0;
 8003bb0:	2000      	movs	r0, #0
			while (device_framework < device_framework_end)
 8003bb2:	e024      	b.n	8003bfe <_ux_device_stack_descriptor_send+0x1f6>
						_ux_utility_descriptor_parse(device_framework,
 8003bb4:	466b      	mov	r3, sp
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	495e      	ldr	r1, [pc, #376]	; (8003d34 <_ux_device_stack_descriptor_send+0x32c>)
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f000 fb94 	bl	80042e8 <_ux_utility_descriptor_parse>
						configuration_descriptor_length = configuration_descriptor.wTotalLength;
 8003bc0:	9d02      	ldr	r5, [sp, #8]
						length = (configuration_descriptor_length < host_length) ?
 8003bc2:	42b5      	cmp	r5, r6
 8003bc4:	bf28      	it	cs
 8003bc6:	4635      	movcs	r5, r6
						if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8003bc8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003bcc:	d90a      	bls.n	8003be4 <_ux_device_stack_descriptor_send+0x1dc>
							_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8003bce:	2212      	movs	r2, #18
 8003bd0:	2109      	movs	r1, #9
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f000 fb0a 	bl	80041ec <_ux_system_error_handler>
							status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 8003bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bda:	464a      	mov	r2, r9
 8003bdc:	2114      	movs	r1, #20
 8003bde:	4620      	mov	r0, r4
 8003be0:	4798      	blx	r3
							break;
 8003be2:	e746      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
						_ux_utility_memory_copy(
 8003be4:	462a      	mov	r2, r5
 8003be6:	4639      	mov	r1, r7
 8003be8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003bec:	f000 fc51 	bl	8004492 <_ux_utility_memory_copy>
						status = _ux_device_stack_transfer_request(transfer_request, length,
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	f000 fa9f 	bl	8004138 <_ux_device_stack_transfer_request>
						break;
 8003bfa:	e73a      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
				device_framework += descriptor_length;
 8003bfc:	4417      	add	r7, r2
			while (device_framework < device_framework_end)
 8003bfe:	428f      	cmp	r7, r1
 8003c00:	d207      	bcs.n	8003c12 <_ux_device_stack_descriptor_send+0x20a>
				descriptor_type = *(device_framework + 1);
 8003c02:	787b      	ldrb	r3, [r7, #1]
				descriptor_length = (ULONG)*device_framework;
 8003c04:	783a      	ldrb	r2, [r7, #0]
				if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d1f8      	bne.n	8003bfc <_ux_device_stack_descriptor_send+0x1f4>
					if (parsed_descriptor_index == descriptor_index)
 8003c0a:	42a8      	cmp	r0, r5
 8003c0c:	d0d2      	beq.n	8003bb4 <_ux_device_stack_descriptor_send+0x1ac>
						parsed_descriptor_index++;
 8003c0e:	3001      	adds	r0, #1
 8003c10:	e7f4      	b.n	8003bfc <_ux_device_stack_descriptor_send+0x1f4>
	UINT status = UX_ERROR;
 8003c12:	20ff      	movs	r0, #255	; 0xff
 8003c14:	e72d      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
 8003c16:	460f      	mov	r7, r1
			if (descriptor_index == 0)
 8003c18:	bb65      	cbnz	r5, 8003c74 <_ux_device_stack_descriptor_send+0x26c>
				if (_ux_system_slave->ux_system_slave_language_id_framework_length
 8003c1a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
						+ 2> UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8003c1e:	1c9a      	adds	r2, r3, #2
				if (_ux_system_slave->ux_system_slave_language_id_framework_length
 8003c20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003c24:	d819      	bhi.n	8003c5a <_ux_device_stack_descriptor_send+0x252>
				string_memory = transfer_request->ux_slave_transfer_request_data_pointer;
 8003c26:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
						(UCHAR)(_ux_system_slave->ux_system_slave_language_id_framework_length + 2);
 8003c2a:	3302      	adds	r3, #2
				*string_memory =
 8003c2c:	7003      	strb	r3, [r0, #0]
				*(string_memory + 1) = UX_STRING_DESCRIPTOR_ITEM;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	7043      	strb	r3, [r0, #1]
						_ux_system_slave->ux_system_slave_language_id_framework,
 8003c32:	4c3f      	ldr	r4, [pc, #252]	; (8003d30 <_ux_device_stack_descriptor_send+0x328>)
 8003c34:	6823      	ldr	r3, [r4, #0]
				_ux_utility_memory_copy(string_memory + 2,
 8003c36:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8003c3a:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 8003c3e:	3002      	adds	r0, #2
 8003c40:	f000 fc27 	bl	8004492 <_ux_utility_memory_copy>
						> _ux_system_slave->ux_system_slave_language_id_framework_length + 2)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
 8003c4a:	3102      	adds	r1, #2
				if (host_length
 8003c4c:	42b1      	cmp	r1, r6
 8003c4e:	d20f      	bcs.n	8003c70 <_ux_device_stack_descriptor_send+0x268>
				status = _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8003c50:	4632      	mov	r2, r6
 8003c52:	4640      	mov	r0, r8
 8003c54:	f000 fa70 	bl	8004138 <_ux_device_stack_transfer_request>
 8003c58:	e70b      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
					_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK,
 8003c5a:	2212      	movs	r2, #18
 8003c5c:	2109      	movs	r1, #9
 8003c5e:	2002      	movs	r0, #2
 8003c60:	f000 fac4 	bl	80041ec <_ux_system_error_handler>
					status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003c64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c66:	464a      	mov	r2, r9
 8003c68:	2114      	movs	r1, #20
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4798      	blx	r3
					break;
 8003c6e:	e700      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
					length = host_length;
 8003c70:	4631      	mov	r1, r6
 8003c72:	e7ed      	b.n	8003c50 <_ux_device_stack_descriptor_send+0x248>
				UCHAR* string_framework = _ux_system_slave->ux_system_slave_string_framework;
 8003c74:	f8d4 b160 	ldr.w	fp, [r4, #352]	; 0x160
				ULONG string_framework_length =
 8003c78:	f8d4 a164 	ldr.w	sl, [r4, #356]	; 0x164
				while (string_framework_length != 0)
 8003c7c:	e02a      	b.n	8003cd4 <_ux_device_stack_descriptor_send+0x2cc>
								_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8003c7e:	2212      	movs	r2, #18
 8003c80:	2109      	movs	r1, #9
 8003c82:	2002      	movs	r0, #2
 8003c84:	f000 fab2 	bl	80041ec <_ux_system_error_handler>
								status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 8003c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c8a:	464a      	mov	r2, r9
 8003c8c:	2114      	movs	r1, #20
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4798      	blx	r3
								break;
 8003c92:	e03a      	b.n	8003d0a <_ux_device_stack_descriptor_send+0x302>
										+ string_length);
 8003c94:	1d18      	adds	r0, r3, #4
								*(string_memory + 2 + (string_length * 2)) = *(string_framework + 4
 8003c96:	3301      	adds	r3, #1
 8003c98:	005a      	lsls	r2, r3, #1
 8003c9a:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8003c9e:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
								*(string_memory + 2 + (string_length * 2) + 1) = 0;
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	5488      	strb	r0, [r1, r2]
							for (string_length = 0; string_length < *(string_framework + 3);
 8003ca8:	f89b 2003 	ldrb.w	r2, [fp, #3]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d8f1      	bhi.n	8003c94 <_ux_device_stack_descriptor_send+0x28c>
							if (host_length > (UINT)((*(string_framework + 3) * 2) + 2))
 8003cb0:	3201      	adds	r2, #1
 8003cb2:	0051      	lsls	r1, r2, #1
 8003cb4:	42b1      	cmp	r1, r6
 8003cb6:	d300      	bcc.n	8003cba <_ux_device_stack_descriptor_send+0x2b2>
								length = host_length;
 8003cb8:	4631      	mov	r1, r6
							status = _ux_device_stack_transfer_request(transfer_request, length,
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	f000 fa3b 	bl	8004138 <_ux_device_stack_transfer_request>
							break;
 8003cc2:	e022      	b.n	8003d0a <_ux_device_stack_descriptor_send+0x302>
					string_framework_length -= (ULONG)*(string_framework + 3) + 4;
 8003cc4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8003cc8:	ebaa 0a03 	sub.w	sl, sl, r3
 8003ccc:	f1aa 0a04 	sub.w	sl, sl, #4
					string_framework += (ULONG)*(string_framework + 3) + 4;
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	449b      	add	fp, r3
				while (string_framework_length != 0)
 8003cd4:	f1ba 0f00 	cmp.w	sl, #0
 8003cd8:	d016      	beq.n	8003d08 <_ux_device_stack_descriptor_send+0x300>
					ULONG curr_index = _ux_utility_short_get(string_framework);
 8003cda:	4658      	mov	r0, fp
 8003cdc:	f000 fcaa 	bl	8004634 <_ux_utility_short_get>
					if (curr_index == request_index)
 8003ce0:	42b8      	cmp	r0, r7
 8003ce2:	d1ef      	bne.n	8003cc4 <_ux_device_stack_descriptor_send+0x2bc>
						if (*(string_framework + 2) == descriptor_index)
 8003ce4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	d1eb      	bne.n	8003cc4 <_ux_device_stack_descriptor_send+0x2bc>
							if (((*(string_framework + 3) * 2) + 2)
 8003cec:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	2a80      	cmp	r2, #128	; 0x80
 8003cf4:	dcc3      	bgt.n	8003c7e <_ux_device_stack_descriptor_send+0x276>
							string_memory =
 8003cf6:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
							*string_memory = (UCHAR)((*(string_framework + 3) * 2) + 2);
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	700b      	strb	r3, [r1, #0]
							*(string_memory + 1) = UX_STRING_DESCRIPTOR_ITEM;
 8003d00:	2303      	movs	r3, #3
 8003d02:	704b      	strb	r3, [r1, #1]
							for (string_length = 0; string_length < *(string_framework + 3);
 8003d04:	2300      	movs	r3, #0
 8003d06:	e7cf      	b.n	8003ca8 <_ux_device_stack_descriptor_send+0x2a0>
	UINT status = UX_ERROR;
 8003d08:	20ff      	movs	r0, #255	; 0xff
				if (string_framework_length == 0)
 8003d0a:	f1ba 0f00 	cmp.w	sl, #0
 8003d0e:	f47f aeb0 	bne.w	8003a72 <_ux_device_stack_descriptor_send+0x6a>
					dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d14:	464a      	mov	r2, r9
 8003d16:	2114      	movs	r1, #20
 8003d18:	4620      	mov	r0, r4
 8003d1a:	4798      	blx	r3
					return (UX_ERROR);
 8003d1c:	20ff      	movs	r0, #255	; 0xff
 8003d1e:	e6a8      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d22:	464a      	mov	r2, r9
 8003d24:	2114      	movs	r1, #20
 8003d26:	4620      	mov	r0, r4
 8003d28:	4798      	blx	r3
			return (UX_ERROR);
 8003d2a:	20ff      	movs	r0, #255	; 0xff
 8003d2c:	e6a1      	b.n	8003a72 <_ux_device_stack_descriptor_send+0x6a>
 8003d2e:	bf00      	nop
 8003d30:	20000488 	.word	0x20000488
 8003d34:	2000012c 	.word	0x2000012c

08003d38 <_ux_device_stack_disconnect>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_disconnect(VOID)
{
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <_ux_device_stack_disconnect+0x70>)
 8003d3e:	681d      	ldr	r5, [r3, #0]

	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_UNREGISTER(device);

	/* If the device was in the configured state, there may be interfaces attached to the configuration. */
	if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8003d40:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d017      	beq.n	8003d76 <_ux_device_stack_disconnect+0x3e>
	/*--------------------------------------------------------------------------------------------*/

	UINT status = UX_ERROR;

	/* If the device was attached, we need to destroy the control endpoint. */
	if (device->ux_slave_device_state == UX_DEVICE_ATTACHED)
 8003d46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d12b      	bne.n	8003da4 <_ux_device_stack_disconnect+0x6c>
		/* Now we can destroy the default control endpoint. */
		status = dcd->ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8003d4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003d4e:	f105 027c 	add.w	r2, r5, #124	; 0x7c
 8003d52:	210f      	movs	r1, #15
 8003d54:	4628      	mov	r0, r5
 8003d56:	4798      	blx	r3
 8003d58:	4604      	mov	r4, r0
				(VOID*)&device->ux_slave_device_control_endpoint);

	/* We are reverting to configuration 0. */
	device->ux_slave_device_configuration_selected = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

	/* Set the device to be non attached. */
	device->ux_slave_device_state = UX_DEVICE_RESET;
 8003d60:	642b      	str	r3, [r5, #64]	; 0x40

	/* Check the status change callback. */
	if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <_ux_device_stack_disconnect+0x70>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003d6a:	b10b      	cbz	r3, 8003d70 <_ux_device_stack_disconnect+0x38>
	{
		/* Inform the application if a callback function was programmed. */
		_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8003d6c:	200a      	movs	r0, #10
 8003d6e:	4798      	blx	r3
	}

	/* Return the status to the caller. */
	return (status);
}
 8003d70:	4620      	mov	r0, r4
 8003d72:	b00c      	add	sp, #48	; 0x30
 8003d74:	bd70      	pop	{r4, r5, r6, pc}
		UX_SLAVE_INTERFACE* interface = device->ux_slave_device_first_interface;
 8003d76:	f8d5 4130 	ldr.w	r4, [r5, #304]	; 0x130
		while (interface != UX_NULL)
 8003d7a:	e004      	b.n	8003d86 <_ux_device_stack_disconnect+0x4e>
			UX_SLAVE_INTERFACE* next_interface = interface->ux_slave_interface_next_interface;
 8003d7c:	6b26      	ldr	r6, [r4, #48]	; 0x30
			_ux_device_stack_interface_delete(interface);
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f000 f982 	bl	8004088 <_ux_device_stack_interface_delete>
			interface = next_interface;
 8003d84:	4634      	mov	r4, r6
		while (interface != UX_NULL)
 8003d86:	b154      	cbz	r4, 8003d9e <_ux_device_stack_disconnect+0x66>
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	9301      	str	r3, [sp, #4]
			class_command.ux_slave_class_command_interface = (VOID*)interface;
 8003d8c:	9403      	str	r4, [sp, #12]
			UX_SLAVE_CLASS* class = interface->ux_slave_interface_class;
 8003d8e:	6863      	ldr	r3, [r4, #4]
			class_command.ux_slave_class_command_class_ptr = class;
 8003d90:	9309      	str	r3, [sp, #36]	; 0x24
			if (class != UX_NULL)
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f2      	beq.n	8003d7c <_ux_device_stack_disconnect+0x44>
				class->ux_slave_class_entry_function(&class_command);
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	a801      	add	r0, sp, #4
 8003d9a:	4798      	blx	r3
 8003d9c:	e7ee      	b.n	8003d7c <_ux_device_stack_disconnect+0x44>
		device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	642b      	str	r3, [r5, #64]	; 0x40
 8003da2:	e7d0      	b.n	8003d46 <_ux_device_stack_disconnect+0xe>
	UINT status = UX_ERROR;
 8003da4:	24ff      	movs	r4, #255	; 0xff
 8003da6:	e7d8      	b.n	8003d5a <_ux_device_stack_disconnect+0x22>
 8003da8:	20000488 	.word	0x20000488

08003dac <_ux_device_stack_endpoint_stall>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <_ux_device_stack_endpoint_stall+0x2c>)
 8003db2:	6818      	ldr	r0, [r3, #0]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003db4:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003db8:	b672      	cpsid	i
       resets it.  */
    TX_DISABLE

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	b143      	cbz	r3, 8003dd2 <_ux_device_stack_endpoint_stall+0x26>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003dc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	2114      	movs	r1, #20
 8003dc6:	4798      	blx	r3
        
        /* Mark the endpoint state.  */
        endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	6063      	str	r3, [r4, #4]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003dcc:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);       
}
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
    status =  UX_ERROR;
 8003dd2:	20ff      	movs	r0, #255	; 0xff
 8003dd4:	e7fa      	b.n	8003dcc <_ux_device_stack_endpoint_stall+0x20>
 8003dd6:	bf00      	nop
 8003dd8:	20000488 	.word	0x20000488

08003ddc <_ux_device_stack_get_status>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index,
			request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <_ux_device_stack_get_status+0xb4>)
 8003de0:	681c      	ldr	r4, [r3, #0]

	/* Get the control endpoint for the device. */
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;

	/* Get the pointer to the transfer request associated with the endpoint. */
	UX_SLAVE_TRANSFER* transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 8003de2:	f104 07ac 	add.w	r7, r4, #172	; 0xac

	/* Reset the status buffer. */
	*transfer_request->ux_slave_transfer_request_data_pointer = 0;
 8003de6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8003dea:	2300      	movs	r3, #0
 8003dec:	702b      	strb	r3, [r5, #0]
	*(transfer_request->ux_slave_transfer_request_data_pointer + 1) = 0;
 8003dee:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8003df2:	706b      	strb	r3, [r5, #1]
	ULONG data_length = 2;

	UINT status;

	/* The status can be for either the device or the endpoint. */
	switch (request_type & UX_REQUEST_TARGET)
 8003df4:	f010 0003 	ands.w	r0, r0, #3
 8003df8:	d00a      	beq.n	8003e10 <_ux_device_stack_get_status+0x34>
 8003dfa:	f104 067c 	add.w	r6, r4, #124	; 0x7c
 8003dfe:	2802      	cmp	r0, #2
 8003e00:	d021      	beq.n	8003e46 <_ux_device_stack_get_status+0x6a>
			}
			break;

		default:
			/* We stall the command. */
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e04:	4632      	mov	r2, r6
 8003e06:	2114      	movs	r1, #20
 8003e08:	4620      	mov	r0, r4
 8003e0a:	4798      	blx	r3

			/* No more work to do here.  The command failed but the upper layer does not depend on it. */
			return (UX_SUCCESS);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e03b      	b.n	8003e88 <_ux_device_stack_get_status+0xac>
			if (request_index == UX_OTG_STATUS_SELECTOR)
 8003e10:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
 8003e14:	d030      	beq.n	8003e78 <_ux_device_stack_get_status+0x9c>
				if (_ux_system_slave->ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <_ux_device_stack_get_status+0xb4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d00c      	beq.n	8003e3c <_ux_device_stack_get_status+0x60>
				if (_ux_system_slave->ux_system_slave_remote_wakeup_enabled)
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <_ux_device_stack_get_status+0xb4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003e2a:	b373      	cbz	r3, 8003e8a <_ux_device_stack_get_status+0xae>
					*transfer_request->ux_slave_transfer_request_data_pointer |= 2;
 8003e2c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8003e30:	7813      	ldrb	r3, [r2, #0]
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	7013      	strb	r3, [r2, #0]
	ULONG data_length = 2;
 8003e38:	2102      	movs	r1, #2
 8003e3a:	e01e      	b.n	8003e7a <_ux_device_stack_get_status+0x9e>
					*transfer_request->ux_slave_transfer_request_data_pointer = 1;
 8003e3c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e7ed      	b.n	8003e22 <_ux_device_stack_get_status+0x46>
			status = dcd->ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS,
 8003e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e48:	f021 0280 	bic.w	r2, r1, #128	; 0x80
 8003e4c:	2115      	movs	r1, #21
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4798      	blx	r3
			if (status != UX_ERROR)
 8003e52:	28ff      	cmp	r0, #255	; 0xff
 8003e54:	d106      	bne.n	8003e64 <_ux_device_stack_get_status+0x88>
				dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e58:	4632      	mov	r2, r6
 8003e5a:	2114      	movs	r1, #20
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	4798      	blx	r3
				return (UX_SUCCESS);
 8003e60:	2000      	movs	r0, #0
 8003e62:	e011      	b.n	8003e88 <_ux_device_stack_get_status+0xac>
				if (status == UX_TRUE)
 8003e64:	2801      	cmp	r0, #1
 8003e66:	d001      	beq.n	8003e6c <_ux_device_stack_get_status+0x90>
	ULONG data_length = 2;
 8003e68:	2102      	movs	r1, #2
 8003e6a:	e006      	b.n	8003e7a <_ux_device_stack_get_status+0x9e>
					*transfer_request->ux_slave_transfer_request_data_pointer = 1;
 8003e6c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
	ULONG data_length = 2;
 8003e74:	2102      	movs	r1, #2
 8003e76:	e000      	b.n	8003e7a <_ux_device_stack_get_status+0x9e>
				data_length = 1;
 8003e78:	2101      	movs	r1, #1
	}

	/* Set the phase of the transfer to data out. */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	/* Send the descriptor with the appropriate length to the host. */
	status = _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8003e80:	460a      	mov	r2, r1
 8003e82:	4638      	mov	r0, r7
 8003e84:	f000 f958 	bl	8004138 <_ux_device_stack_transfer_request>

	/* Return the function status. */
	return (status);
}
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ULONG data_length = 2;
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	e7f5      	b.n	8003e7a <_ux_device_stack_get_status+0x9e>
 8003e8e:	bf00      	nop
 8003e90:	20000488 	.word	0x20000488

08003e94 <_ux_device_stack_initialize>:
UINT _ux_device_stack_initialize(UCHAR* device_framework_high_speed,
		ULONG device_framework_length_high_speed, UCHAR* device_framework_full_speed,
		ULONG device_framework_length_full_speed, UCHAR* string_framework,
		ULONG string_framework_length, UCHAR* language_id_framework,
		ULONG language_id_framework_length, UINT (*ux_system_slave_change_function)(ULONG))
{
 8003e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8003e98:	4c79      	ldr	r4, [pc, #484]	; (8004080 <_ux_device_stack_initialize+0x1ec>)
 8003e9a:	6824      	ldr	r4, [r4, #0]

	/* Store the high speed device framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_device_framework_high_speed = device_framework_high_speed;
 8003e9c:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
	_ux_system_slave->ux_system_slave_device_framework_length_high_speed =
 8003ea0:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
			device_framework_length_high_speed;

	/* Store the string framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_device_framework_full_speed = device_framework_full_speed;
 8003ea4:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
	_ux_system_slave->ux_system_slave_device_framework_length_full_speed =
 8003ea8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			device_framework_length_full_speed;

	/* Store the string framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_string_framework = string_framework;
 8003eac:	9b06      	ldr	r3, [sp, #24]
 8003eae:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	_ux_system_slave->ux_system_slave_string_framework_length = string_framework_length;
 8003eb2:	9b07      	ldr	r3, [sp, #28]
 8003eb4:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164

	/* Store the language ID list in the project structure. */
	_ux_system_slave->ux_system_slave_language_id_framework = language_id_framework;
 8003eb8:	9b08      	ldr	r3, [sp, #32]
 8003eba:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	_ux_system_slave->ux_system_slave_language_id_framework_length = language_id_framework_length;
 8003ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec0:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

	/* Store the max number of slave class drivers in the project structure. */
	_ux_system_slave->ux_system_slave_max_class = UX_MAX_SLAVE_CLASS_DRIVER;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178

	/* Store the device state change function callback. */
	_ux_system_slave->ux_system_slave_change_function = ux_system_slave_change_function;
 8003eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ecc:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8

	/* Allocate memory for the classes. sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow
	 * is checked outside of the function. */
	UCHAR* memory = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8003ed0:	f44f 7264 	mov.w	r2, #912	; 0x390
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	f000 fa38 	bl	800434c <_ux_utility_memory_allocate>
			sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
	if (memory == UX_NULL)
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f000 80cb 	beq.w	8004078 <_ux_device_stack_initialize+0x1e4>
		return (UX_MEMORY_INSUFFICIENT);

	/* Save this memory allocation in the USBX project. */
	_ux_system_slave->ux_system_slave_class_array = (UX_SLAVE_CLASS*)((void*)memory);
 8003ee2:	4a67      	ldr	r2, [pc, #412]	; (8004080 <_ux_device_stack_initialize+0x1ec>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
	UX_SLAVE_TRANSFER* transfer_request =
			&device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

	/* Acquire a buffer for the size of the endpoint. */
	transfer_request->ux_slave_transfer_request_data_pointer =
			_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8003eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eee:	2101      	movs	r1, #1
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f000 fa2b 	bl	800434c <_ux_utility_memory_allocate>
	transfer_request->ux_slave_transfer_request_data_pointer =
 8003ef6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
					UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);

	UINT status;

	/* Ensure we have enough memory. */
	if (transfer_request->ux_slave_transfer_request_data_pointer == UX_NULL)
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d051      	beq.n	8003fa2 <_ux_device_stack_initialize+0x10e>
	if (status == UX_SUCCESS)
	{
		/* We need to determine the maximum number of interfaces and endpoints declared in
		 * the device framework. This mechanism requires that both framework behave the same
		 * way regarding the number of interfaces and endpoints. */
		UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework_full_speed;
 8003efe:	4b60      	ldr	r3, [pc, #384]	; (8004080 <_ux_device_stack_initialize+0x1ec>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
		ULONG device_framework_length = _ux_system_slave
 8003f06:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
				->ux_system_slave_device_framework_length_full_speed;

		/* Reset all values we are using during the scanning of the framework. */
		ULONG local_interfaces_found = 0;
		ULONG local_endpoints_found = 0;
		ULONG endpoints_in_interface_found = 0;
 8003f0a:	2000      	movs	r0, #0
		ULONG local_endpoints_found = 0;
 8003f0c:	4606      	mov	r6, r0
		ULONG local_interfaces_found = 0;
 8003f0e:	4607      	mov	r7, r0
	ULONG endpoints_found = 0;
 8003f10:	4686      	mov	lr, r0
	ULONG interfaces_found = 0;
 8003f12:	4684      	mov	ip, r0

		/* Parse the device framework and locate interfaces and endpoint descriptor(s). */
		while (device_framework_length != 0)
 8003f14:	e00f      	b.n	8003f36 <_ux_device_stack_initialize+0xa2>
						local_interfaces_found++;
					}
					else
					{
						/* Compare the number of endpoints found in this non 0 alternate setting. */
						if (endpoints_in_interface_found < (ULONG)*(device_framework + 4))
 8003f16:	791d      	ldrb	r5, [r3, #4]
 8003f18:	4285      	cmp	r5, r0
 8003f1a:	d90a      	bls.n	8003f32 <_ux_device_stack_initialize+0x9e>
							/* Adjust the number of maximum endpoints in this interface. */
							endpoints_in_interface_found = (ULONG)*(device_framework + 4);
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	e008      	b.n	8003f32 <_ux_device_stack_initialize+0x9e>

					break;

				case UX_CONFIGURATION_DESCRIPTOR_ITEM:
					/* Check if the number of interfaces found in this configuration is the maximum so far. */
					if (local_interfaces_found > interfaces_found)
 8003f20:	45bc      	cmp	ip, r7
 8003f22:	d200      	bcs.n	8003f26 <_ux_device_stack_initialize+0x92>
						/* We need to adjust the number of maximum interfaces. */
						interfaces_found = local_interfaces_found;
 8003f24:	46bc      	mov	ip, r7

					/* We have a new configuration. We need to reset the number of local interfaces. */
					local_interfaces_found = 0;

					/* Add the cumulated number of endpoints in the previous interface. */
					local_endpoints_found += endpoints_in_interface_found;
 8003f26:	4406      	add	r6, r0

					/* Check if the number of endpoints found in the previous configuration is the maximum so far. */
					if (local_endpoints_found > endpoints_found)
 8003f28:	45b6      	cmp	lr, r6
 8003f2a:	d312      	bcc.n	8003f52 <_ux_device_stack_initialize+0xbe>
						/* We need to adjust the number of maximum endpoints. */
						endpoints_found = local_endpoints_found;

					/* We have a new configuration. We need to reset the number of local endpoints. */
					local_endpoints_found = 0;
					endpoints_in_interface_found = 0;
 8003f2c:	2000      	movs	r0, #0
					local_endpoints_found = 0;
 8003f2e:	4606      	mov	r6, r0
					local_interfaces_found = 0;
 8003f30:	4607      	mov	r7, r0
				default:
					break;
			}

			/* Adjust what is left of the device framework. */
			device_framework_length -= descriptor_length;
 8003f32:	1a52      	subs	r2, r2, r1

			/* Point to the next descriptor. */
			device_framework += descriptor_length;
 8003f34:	440b      	add	r3, r1
		while (device_framework_length != 0)
 8003f36:	b18a      	cbz	r2, 8003f5c <_ux_device_stack_initialize+0xc8>
			ULONG descriptor_length = (ULONG)*device_framework;
 8003f38:	7819      	ldrb	r1, [r3, #0]
			UCHAR descriptor_type = *(device_framework + 1);
 8003f3a:	785d      	ldrb	r5, [r3, #1]
			switch (descriptor_type)
 8003f3c:	2d02      	cmp	r5, #2
 8003f3e:	d0ef      	beq.n	8003f20 <_ux_device_stack_initialize+0x8c>
 8003f40:	2d04      	cmp	r5, #4
 8003f42:	d1f6      	bne.n	8003f32 <_ux_device_stack_initialize+0x9e>
					if (*(device_framework + 3) == 0)
 8003f44:	78dd      	ldrb	r5, [r3, #3]
 8003f46:	2d00      	cmp	r5, #0
 8003f48:	d1e5      	bne.n	8003f16 <_ux_device_stack_initialize+0x82>
						local_endpoints_found += endpoints_in_interface_found;
 8003f4a:	4406      	add	r6, r0
						endpoints_in_interface_found = (ULONG)*(device_framework + 4);
 8003f4c:	7918      	ldrb	r0, [r3, #4]
						local_interfaces_found++;
 8003f4e:	3701      	adds	r7, #1
 8003f50:	e7ef      	b.n	8003f32 <_ux_device_stack_initialize+0x9e>
						endpoints_found = local_endpoints_found;
 8003f52:	46b6      	mov	lr, r6
					endpoints_in_interface_found = 0;
 8003f54:	2000      	movs	r0, #0
					local_endpoints_found = 0;
 8003f56:	4606      	mov	r6, r0
					local_interfaces_found = 0;
 8003f58:	4607      	mov	r7, r0
 8003f5a:	e7ea      	b.n	8003f32 <_ux_device_stack_initialize+0x9e>
		}

		/* Add the cumulated number of endpoints in the previous interface. */
		local_endpoints_found += endpoints_in_interface_found;
 8003f5c:	4406      	add	r6, r0

		/* Check if the number of endpoints found in the previous interface is the maximum so far. */
		if (local_endpoints_found > endpoints_found)
 8003f5e:	45b6      	cmp	lr, r6
 8003f60:	d300      	bcc.n	8003f64 <_ux_device_stack_initialize+0xd0>
 8003f62:	4676      	mov	r6, lr
			/* We need to adjust the number of maximum endpoints. */
			endpoints_found = local_endpoints_found;

		/* Check if the number of interfaces found in this configuration is the maximum so far. */
		if (local_interfaces_found > interfaces_found)
 8003f64:	45bc      	cmp	ip, r7
 8003f66:	d300      	bcc.n	8003f6a <_ux_device_stack_initialize+0xd6>
 8003f68:	4667      	mov	r7, ip
			/* We need to adjust the number of maximum interfaces. */
			interfaces_found = local_interfaces_found;

		/* We do a sanity check on the finding. At least there must be one interface but endpoints
		 * are not necessary. */
		if (interfaces_found == 0)
 8003f6a:	b197      	cbz	r7, 8003f92 <_ux_device_stack_initialize+0xfe>
		status = UX_SUCCESS;
 8003f6c:	f04f 0800 	mov.w	r8, #0
	}

	/*--------------------------------------------------------------------------------------------*/

	/* Go on to allocate endpoints pool if no error. */
	if (status == UX_SUCCESS)
 8003f70:	f1b8 0f00 	cmp.w	r8, #0
 8003f74:	d01a      	beq.n	8003fac <_ux_device_stack_initialize+0x118>
	/*--------------------------------------------------------------------------------------------*/

	UX_SLAVE_ENDPOINT* endpoints_pool;

	/* Do we need an endpoint pool ?  */
	if (endpoints_found != 0 && status == UX_SUCCESS)
 8003f76:	fab8 f388 	clz	r3, r8
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2e00      	cmp	r6, #0
 8003f7e:	bf08      	it	eq
 8003f80:	2300      	moveq	r3, #0
 8003f82:	bb23      	cbnz	r3, 8003fce <_ux_device_stack_initialize+0x13a>
				endpoints_pool++;
			}
		}
	}
	else
		endpoints_pool = UX_NULL;
 8003f84:	2500      	movs	r5, #0

	/* Return successful completion. */
	if (status == UX_SUCCESS)
 8003f86:	f1b8 0f00 	cmp.w	r8, #0
 8003f8a:	d072      	beq.n	8004072 <_ux_device_stack_initialize+0x1de>
		return (UX_SUCCESS);

	/*---------------------------- Free resources when there is error ----------------------------*/

	/* Free device -> ux_slave_device_endpoints_pool. */
	if (endpoints_pool)
 8003f8c:	2d00      	cmp	r5, #0
 8003f8e:	d151      	bne.n	8004034 <_ux_device_stack_initialize+0x1a0>
 8003f90:	e05f      	b.n	8004052 <_ux_device_stack_initialize+0x1be>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT,
 8003f92:	2242      	movs	r2, #66	; 0x42
 8003f94:	2103      	movs	r1, #3
 8003f96:	2002      	movs	r0, #2
 8003f98:	f000 f928 	bl	80041ec <_ux_system_error_handler>
			status = UX_DESCRIPTOR_CORRUPTED;
 8003f9c:	f04f 0842 	mov.w	r8, #66	; 0x42
 8003fa0:	e7e6      	b.n	8003f70 <_ux_device_stack_initialize+0xdc>
	ULONG endpoints_found = 0;
 8003fa2:	2600      	movs	r6, #0
	ULONG interfaces_found = 0;
 8003fa4:	4637      	mov	r7, r6
		status = UX_MEMORY_INSUFFICIENT;
 8003fa6:	f04f 0812 	mov.w	r8, #18
 8003faa:	e7e1      	b.n	8003f70 <_ux_device_stack_initialize+0xdc>
		device->ux_slave_device_interfaces_pool_number = interfaces_found;
 8003fac:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
		device->ux_slave_device_endpoints_pool_number = endpoints_found;
 8003fb0:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		UX_SLAVE_INTERFACE* interfaces_pool = _ux_utility_memory_allocate_mulc_safe(
 8003fb4:	2338      	movs	r3, #56	; 0x38
 8003fb6:	463a      	mov	r2, r7
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4608      	mov	r0, r1
 8003fbc:	f000 fa5a 	bl	8004474 <_ux_utility_memory_allocate_mulc_safe>
		if (interfaces_pool == UX_NULL)
 8003fc0:	b110      	cbz	r0, 8003fc8 <_ux_device_stack_initialize+0x134>
			device->ux_slave_device_interfaces_pool = interfaces_pool;
 8003fc2:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8003fc6:	e7d6      	b.n	8003f76 <_ux_device_stack_initialize+0xe2>
			status = UX_MEMORY_INSUFFICIENT;
 8003fc8:	f04f 0812 	mov.w	r8, #18
 8003fcc:	e7d3      	b.n	8003f76 <_ux_device_stack_initialize+0xe2>
		endpoints_pool = _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8003fce:	2390      	movs	r3, #144	; 0x90
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	f000 fa4d 	bl	8004474 <_ux_utility_memory_allocate_mulc_safe>
		if (endpoints_pool == UX_NULL)
 8003fda:	4605      	mov	r5, r0
 8003fdc:	b308      	cbz	r0, 8004022 <_ux_device_stack_initialize+0x18e>
			device->ux_slave_device_endpoints_pool = endpoints_pool;
 8003fde:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
			while (endpoints_pool < (device->ux_slave_device_endpoints_pool + endpoints_found))
 8003fe2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8003fe6:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
 8003fea:	010a      	lsls	r2, r1, #4
 8003fec:	4413      	add	r3, r2
 8003fee:	42ab      	cmp	r3, r5
 8003ff0:	d9c9      	bls.n	8003f86 <_ux_device_stack_initialize+0xf2>
						_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8003ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f000 f9a7 	bl	800434c <_ux_utility_memory_allocate>
						.ux_slave_transfer_request_data_pointer =
 8003ffe:	63e8      	str	r0, [r5, #60]	; 0x3c
				if (endpoints_pool->ux_slave_endpoint_transfer_request
 8004000:	b148      	cbz	r0, 8004016 <_ux_device_stack_initialize+0x182>
				status = _ux_utility_semaphore_create(
 8004002:	2200      	movs	r2, #0
 8004004:	491f      	ldr	r1, [pc, #124]	; (8004084 <_ux_device_stack_initialize+0x1f0>)
 8004006:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800400a:	f000 fafd 	bl	8004608 <_ux_utility_semaphore_create>
				if (status != UX_SUCCESS)
 800400e:	4680      	mov	r8, r0
 8004010:	b920      	cbnz	r0, 800401c <_ux_device_stack_initialize+0x188>
				endpoints_pool++;
 8004012:	3590      	adds	r5, #144	; 0x90
 8004014:	e7e5      	b.n	8003fe2 <_ux_device_stack_initialize+0x14e>
					status = UX_MEMORY_INSUFFICIENT;
 8004016:	f04f 0812 	mov.w	r8, #18
 800401a:	e7b4      	b.n	8003f86 <_ux_device_stack_initialize+0xf2>
					status = UX_SEMAPHORE_ERROR;
 800401c:	f04f 0815 	mov.w	r8, #21
 8004020:	e7b1      	b.n	8003f86 <_ux_device_stack_initialize+0xf2>
			status = UX_MEMORY_INSUFFICIENT;
 8004022:	f04f 0812 	mov.w	r8, #18
 8004026:	e7b1      	b.n	8003f8c <_ux_device_stack_initialize+0xf8>
		while (endpoints_pool >= device->ux_slave_device_endpoints_pool)
		{
			/* Delete ux_slave_transfer_request_semaphore. */
			if (endpoints_pool->ux_slave_endpoint_transfer_request
					.ux_slave_transfer_request_semaphore.tx_semaphore_id != 0)
				_ux_utility_semaphore_delete(&endpoints_pool->ux_slave_endpoint_transfer_request
 8004028:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800402c:	f000 fafa 	bl	8004624 <_ux_utility_semaphore_delete>
 8004030:	e007      	b.n	8004042 <_ux_device_stack_initialize+0x1ae>
					.ux_slave_transfer_request_data_pointer)
				_ux_utility_memory_free(endpoints_pool->ux_slave_endpoint_transfer_request
								.ux_slave_transfer_request_data_pointer);

			/* Move to previous endpoint. */
			endpoints_pool--;
 8004032:	3d90      	subs	r5, #144	; 0x90
		while (endpoints_pool >= device->ux_slave_device_endpoints_pool)
 8004034:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8004038:	42a8      	cmp	r0, r5
 800403a:	d808      	bhi.n	800404e <_ux_device_stack_initialize+0x1ba>
					.ux_slave_transfer_request_semaphore.tx_semaphore_id != 0)
 800403c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
			if (endpoints_pool->ux_slave_endpoint_transfer_request
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f2      	bne.n	8004028 <_ux_device_stack_initialize+0x194>
					.ux_slave_transfer_request_data_pointer)
 8004042:	6be8      	ldr	r0, [r5, #60]	; 0x3c
			if (endpoints_pool->ux_slave_endpoint_transfer_request
 8004044:	2800      	cmp	r0, #0
 8004046:	d0f4      	beq.n	8004032 <_ux_device_stack_initialize+0x19e>
				_ux_utility_memory_free(endpoints_pool->ux_slave_endpoint_transfer_request
 8004048:	f000 fa2e 	bl	80044a8 <_ux_utility_memory_free>
 800404c:	e7f1      	b.n	8004032 <_ux_device_stack_initialize+0x19e>
		}

		_ux_utility_memory_free(device->ux_slave_device_endpoints_pool);
 800404e:	f000 fa2b 	bl	80044a8 <_ux_utility_memory_free>
	}

	/* Free device -> ux_slave_device_interfaces_pool. */
	if (device->ux_slave_device_interfaces_pool)
 8004052:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8004056:	b108      	cbz	r0, 800405c <_ux_device_stack_initialize+0x1c8>
		_ux_utility_memory_free(device->ux_slave_device_interfaces_pool);
 8004058:	f000 fa26 	bl	80044a8 <_ux_utility_memory_free>

	/* Free device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
	 * 		.ux_slave_transfer_request_data_pointer. */
	if (device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
			.ux_slave_transfer_request_data_pointer)
 800405c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
 8004060:	b108      	cbz	r0, 8004066 <_ux_device_stack_initialize+0x1d2>
		_ux_utility_memory_free(
 8004062:	f000 fa21 	bl	80044a8 <_ux_utility_memory_free>
				device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
						.ux_slave_transfer_request_data_pointer);

	/* Free _ux_system_slave -> ux_system_slave_class_array. */
	_ux_utility_memory_free(_ux_system_slave->ux_system_slave_class_array);
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <_ux_device_stack_initialize+0x1ec>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800406e:	f000 fa1b 	bl	80044a8 <_ux_utility_memory_free>

	/* Return completion status. */
	return (status);
}
 8004072:	4640      	mov	r0, r8
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (UX_MEMORY_INSUFFICIENT);
 8004078:	f04f 0812 	mov.w	r8, #18
 800407c:	e7f9      	b.n	8004072 <_ux_device_stack_initialize+0x1de>
 800407e:	bf00      	nop
 8004080:	20000488 	.word	0x20000488
 8004084:	0800877c 	.word	0x0800877c

08004088 <_ux_device_stack_interface_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	4606      	mov	r6, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <_ux_device_stack_interface_delete+0x40>)
 800408e:	681f      	ldr	r7, [r3, #0]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 8004090:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8004092:	e00d      	b.n	80040b0 <_ux_device_stack_interface_delete+0x28>

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8004094:	6a65      	ldr	r5, [r4, #36]	; 0x24
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <_ux_device_stack_interface_delete+0x40>)
 8004098:	6818      	ldr	r0, [r3, #0]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800409a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800409c:	4622      	mov	r2, r4
 800409e:	210f      	movs	r1, #15
 80040a0:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80040a2:	2300      	movs	r3, #0
 80040a4:	6023      	str	r3, [r4, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 80040a6:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80040a8:	6263      	str	r3, [r4, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80040aa:	62a3      	str	r3, [r4, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80040ac:	62e3      	str	r3, [r4, #44]	; 0x2c
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80040ae:	462c      	mov	r4, r5
    while (next_endpoint != UX_NULL)
 80040b0:	2c00      	cmp	r4, #0
 80040b2:	d1ef      	bne.n	8004094 <_ux_device_stack_interface_delete+0xc>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 80040b4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80040b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 80040ba:	2000      	movs	r0, #0
 80040bc:	6070      	str	r0, [r6, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 80040be:	60b0      	str	r0, [r6, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 80040c0:	6330      	str	r0, [r6, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 80040c2:	6370      	str	r0, [r6, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 80040c4:	6030      	str	r0, [r6, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 80040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c8:	20000488 	.word	0x20000488

080040cc <_ux_device_stack_set_feature>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <_ux_device_stack_set_feature+0x68>)
 80040d0:	681d      	ldr	r5, [r3, #0]
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;

	UX_SLAVE_INTERFACE* interface;

	/* The feature can be for either the device or the endpoint. */
	switch (request_type & UX_REQUEST_TARGET)
 80040d2:	f010 0003 	ands.w	r0, r0, #3
 80040d6:	d00b      	beq.n	80040f0 <_ux_device_stack_set_feature+0x24>
 80040d8:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 80040dc:	4614      	mov	r4, r2
 80040de:	2802      	cmp	r0, #2
 80040e0:	d012      	beq.n	8004108 <_ux_device_stack_set_feature+0x3c>
			/* We get here when the endpoint is wrong. Should not happen though. */
			/* Intentionally fall through into the default case. */
			/* fall through */
		default:
			/* We stall the command. */
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80040e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80040e4:	4632      	mov	r2, r6
 80040e6:	2114      	movs	r1, #20
 80040e8:	4628      	mov	r0, r5
 80040ea:	4798      	blx	r3

			/* No more work to do here. The command failed but the upper layer does not depend on it. */
			return (UX_SUCCESS);
 80040ec:	2000      	movs	r0, #0
	}

	/* Return the function status. */
	return (UX_SUCCESS);
}
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
			if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80040f0:	2901      	cmp	r1, #1
 80040f2:	d001      	beq.n	80040f8 <_ux_device_stack_set_feature+0x2c>
	return (UX_SUCCESS);
 80040f4:	2000      	movs	r0, #0
 80040f6:	e7fa      	b.n	80040ee <_ux_device_stack_set_feature+0x22>
				if (_ux_system_slave->ux_system_slave_remote_wakeup_capability)
 80040f8:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 80040fc:	b1bb      	cbz	r3, 800412e <_ux_device_stack_set_feature+0x62>
					_ux_system_slave->ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 80040fe:	2301      	movs	r3, #1
 8004100:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
					return (UX_SUCCESS);
 8004104:	2000      	movs	r0, #0
 8004106:	e7f2      	b.n	80040ee <_ux_device_stack_set_feature+0x22>
			interface = device->ux_slave_device_first_interface;
 8004108:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
			while (interface != UX_NULL)
 800410c:	2800      	cmp	r0, #0
 800410e:	d0e8      	beq.n	80040e2 <_ux_device_stack_set_feature+0x16>
				UX_SLAVE_ENDPOINT* endpoint_target = interface->ux_slave_interface_first_endpoint;
 8004110:	6b42      	ldr	r2, [r0, #52]	; 0x34
				while (endpoint_target != UX_NULL)
 8004112:	b152      	cbz	r2, 800412a <_ux_device_stack_set_feature+0x5e>
					if (endpoint_target->ux_slave_endpoint_descriptor.bEndpointAddress
 8004114:	6951      	ldr	r1, [r2, #20]
 8004116:	42a1      	cmp	r1, r4
 8004118:	d001      	beq.n	800411e <_ux_device_stack_set_feature+0x52>
					endpoint_target = endpoint_target->ux_slave_endpoint_next_endpoint;
 800411a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411c:	e7f9      	b.n	8004112 <_ux_device_stack_set_feature+0x46>
						dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800411e:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8004120:	2114      	movs	r1, #20
 8004122:	4628      	mov	r0, r5
 8004124:	47a0      	blx	r4
						return (UX_SUCCESS);
 8004126:	2000      	movs	r0, #0
 8004128:	e7e1      	b.n	80040ee <_ux_device_stack_set_feature+0x22>
				interface = interface->ux_slave_interface_next_interface;
 800412a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800412c:	e7ee      	b.n	800410c <_ux_device_stack_set_feature+0x40>
					return (UX_FUNCTION_NOT_SUPPORTED);
 800412e:	2054      	movs	r0, #84	; 0x54
 8004130:	e7dd      	b.n	80040ee <_ux_device_stack_set_feature+0x22>
 8004132:	bf00      	nop
 8004134:	20000488 	.word	0x20000488

08004138 <_ux_device_stack_transfer_request>:
		ULONG host_length)
{
	TX_INTERRUPT_SAVE_AREA

	/* Do we have to skip this transfer?  */
	if (transfer_request->ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8004138:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d051      	beq.n	80041e2 <_ux_device_stack_transfer_request+0xaa>
{
 800413e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004142:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004146:	b672      	cpsid	i
	/* Disable interrupts to prevent the disconnection ISR from preempting us
	 * while we check the device state and set the transfer status. */
	TX_DISABLE

	/* Get the device state. */
	ULONG device_state = _ux_system_slave->ux_system_slave_device.ux_slave_device_state;
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <_ux_device_stack_transfer_request+0xb0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED. */
	if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
			|| (device_state == UX_DEVICE_CONFIGURED))
 800414e:	3b01      	subs	r3, #1
	if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8004150:	2b02      	cmp	r3, #2
 8004152:	d821      	bhi.n	8004198 <_ux_device_stack_transfer_request+0x60>
 8004154:	4617      	mov	r7, r2
 8004156:	460d      	mov	r5, r1
 8004158:	4604      	mov	r4, r0
		/* Set the transfer to pending. */
		transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 800415a:	2301      	movs	r3, #1
 800415c:	6003      	str	r3, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800415e:	f386 8810 	msr	PRIMASK, r6
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <_ux_device_stack_transfer_request+0xb0>)
 8004164:	f8d3 8000 	ldr.w	r8, [r3]

	/* Get the endpoint associated with this transaction. */
	UX_SLAVE_ENDPOINT* endpoint = transfer_request->ux_slave_transfer_request_endpoint;
 8004168:	6886      	ldr	r6, [r0, #8]

	/* If the endpoint is non Control, check the endpoint direction and set the data phase direction. */
	if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE)
 800416a:	69b3      	ldr	r3, [r6, #24]
 800416c:	f013 0f03 	tst.w	r3, #3
 8004170:	d119      	bne.n	80041a6 <_ux_device_stack_transfer_request+0x6e>
	}

	/* See if we need to force a zero length packet at the end of the transfer. This happens on
	 * a DATA IN and when the host requested length is not met and the last packet is on a boundary.
	 * If slave_length is zero, then it is a explicit ZLP request, no need to force ZLP. */
	if ((transfer_request->ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8004172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004174:	2b03      	cmp	r3, #3
 8004176:	d023      	beq.n	80041c0 <_ux_device_stack_transfer_request+0x88>
		transfer_request->ux_slave_transfer_request_force_zlp = UX_TRUE;
	}
	else
	{
		/* Condition is not met, do not force a Zero Length Packet. */
		transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 8004178:	2300      	movs	r3, #0
 800417a:	6523      	str	r3, [r4, #80]	; 0x50
	}

	/* Reset the number of bytes sent/received. */
	transfer_request->ux_slave_transfer_request_actual_length = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	61a3      	str	r3, [r4, #24]

	/* Determine how many bytes to send in this transaction.
	 * We keep track of the original length and have a working length. */
	transfer_request->ux_slave_transfer_request_requested_length = slave_length;
 8004180:	6165      	str	r5, [r4, #20]
	transfer_request->ux_slave_transfer_request_in_transfer_length = slave_length;
 8004182:	61e5      	str	r5, [r4, #28]

	/* Save the buffer pointer. */
	transfer_request->ux_slave_transfer_request_current_data_pointer =
			transfer_request->ux_slave_transfer_request_data_pointer;
 8004184:	68e3      	ldr	r3, [r4, #12]
	transfer_request->ux_slave_transfer_request_current_data_pointer =
 8004186:	6123      	str	r3, [r4, #16]

	/* Call the DCD driver transfer function.   */
	UINT status = dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8004188:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800418c:	4622      	mov	r2, r4
 800418e:	210c      	movs	r1, #12
 8004190:	4640      	mov	r0, r8
 8004192:	4798      	blx	r3

	/* And return the status. */
	return (status);
}
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004198:	f386 8810 	msr	PRIMASK, r6
		return (UX_TRANSFER_NOT_READY);
 800419c:	2025      	movs	r0, #37	; 0x25
 800419e:	e7f9      	b.n	8004194 <_ux_device_stack_transfer_request+0x5c>
			_ux_utility_delay_ms(100);
 80041a0:	2064      	movs	r0, #100	; 0x64
 80041a2:	f000 f893 	bl	80042cc <_ux_utility_delay_ms>
		while (endpoint->ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 80041a6:	6873      	ldr	r3, [r6, #4]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d0f9      	beq.n	80041a0 <_ux_device_stack_transfer_request+0x68>
		if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 80041ac:	6973      	ldr	r3, [r6, #20]
 80041ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80041b2:	d002      	beq.n	80041ba <_ux_device_stack_transfer_request+0x82>
			transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	6263      	str	r3, [r4, #36]	; 0x24
 80041b8:	e7db      	b.n	8004172 <_ux_device_stack_transfer_request+0x3a>
			transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_IN;
 80041ba:	2302      	movs	r3, #2
 80041bc:	6263      	str	r3, [r4, #36]	; 0x24
 80041be:	e7d8      	b.n	8004172 <_ux_device_stack_transfer_request+0x3a>
			(slave_length != 0) && (host_length != slave_length) &&
 80041c0:	1bef      	subs	r7, r5, r7
 80041c2:	bf18      	it	ne
 80041c4:	2701      	movne	r7, #1
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	d0d6      	beq.n	8004178 <_ux_device_stack_transfer_request+0x40>
 80041ca:	2f00      	cmp	r7, #0
 80041cc:	d0d4      	beq.n	8004178 <_ux_device_stack_transfer_request+0x40>
			(slave_length % endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 80041ce:	69f2      	ldr	r2, [r6, #28]
 80041d0:	fbb5 f3f2 	udiv	r3, r5, r2
 80041d4:	fb02 5313 	mls	r3, r2, r3, r5
			(slave_length != 0) && (host_length != slave_length) &&
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1cd      	bne.n	8004178 <_ux_device_stack_transfer_request+0x40>
		transfer_request->ux_slave_transfer_request_force_zlp = UX_TRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	6523      	str	r3, [r4, #80]	; 0x50
 80041e0:	e7cc      	b.n	800417c <_ux_device_stack_transfer_request+0x44>
		return (UX_SUCCESS);
 80041e2:	2000      	movs	r0, #0
}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000488 	.word	0x20000488

080041ec <_ux_system_error_handler>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 80041ec:	b510      	push	{r4, lr}
	/* Save the last system error code.  */
	_ux_system->ux_system_last_error = error_code;
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <_ux_system_error_handler+0x18>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58

	/* Increment the total number of system errors.  */
	_ux_system->ux_system_error_count++;
 80041f4:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80041f6:	3401      	adds	r4, #1
 80041f8:	65dc      	str	r4, [r3, #92]	; 0x5c

	/* Is there an application call back function to call ? */
	if (_ux_system->ux_system_error_callback_function != UX_NULL)
 80041fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fc:	b103      	cbz	r3, 8004200 <_ux_system_error_handler+0x14>
	{
		/* The callback function is defined, call it.  */
		_ux_system->ux_system_error_callback_function(system_level, system_context, error_code);
 80041fe:	4798      	blx	r3
	}
}
 8004200:	bd10      	pop	{r4, pc}
 8004202:	bf00      	nop
 8004204:	20000490 	.word	0x20000490

08004208 <_ux_system_initialize>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_initialize(VOID* regular_memory_pool_start, ULONG regular_memory_size,
		VOID* cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	4604      	mov	r4, r0
 800420c:	460f      	mov	r7, r1
 800420e:	4615      	mov	r5, r2
 8004210:	461e      	mov	r6, r3
	/* Reset memory block */
	_ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size);
 8004212:	460a      	mov	r2, r1
 8004214:	2100      	movs	r1, #0
 8004216:	f000 f9cb 	bl	80045b0 <_ux_utility_memory_set>

	/* Set the _ux_system structure at the start of our regular memory */
	_ux_system = (UX_SYSTEM*)regular_memory_pool_start;
 800421a:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <_ux_system_initialize+0xb0>)
 800421c:	601c      	str	r4, [r3, #0]

	/*--------------------------------------------------------------------------------------------*/

#ifndef UX_DEVICE_SIDE_ONLY
	/* Set the _ux_system_host structure. */
	_ux_system_host = (UX_SYSTEM_HOST*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 800421e:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <_ux_system_initialize+0xb4>)
 8004224:	6011      	str	r1, [r2, #0]
	memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_HOST);
#endif

#ifndef UX_HOST_SIDE_ONLY
	/* Set the _ux_system_slave structure. */
	_ux_system_slave = (UX_SYSTEM_SLAVE*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8004226:	f504 7158 	add.w	r1, r4, #864	; 0x360
 800422a:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <_ux_system_initialize+0xb8>)
 800422c:	6011      	str	r1, [r2, #0]
	memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

	/* Set the cache safe memory for the dynamic pool */
	_ux_system->ux_system_regular_memory_pool_start =
			(UX_MEMORY_BLOCK*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 800422e:	f204 5254 	addw	r2, r4, #1364	; 0x554
	_ux_system->ux_system_regular_memory_pool_start =
 8004232:	6022      	str	r2, [r4, #0]

	/* Make sure the regular memory pool is aligned properly */
	ALIGN_TYPE int_memory_pool_start = (ALIGN_TYPE)_ux_system->ux_system_regular_memory_pool_start;
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	6813      	ldr	r3, [r2, #0]
	int_memory_pool_start += UX_ALIGN_MIN;
 8004238:	330f      	adds	r3, #15
	int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800423a:	f023 030f 	bic.w	r3, r3, #15

	/* Set the end of the regular memory pool. */
	VOID* regular_memory_pool_end =
 800423e:	443c      	add	r4, r7
			(void*)(((UCHAR*)regular_memory_pool_start) + regular_memory_size);

	/* Check if we have memory available. */
	if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8004240:	429c      	cmp	r4, r3
 8004242:	d936      	bls.n	80042b2 <_ux_system_initialize+0xaa>
		/* No memory available. */
		return (UX_MEMORY_INSUFFICIENT);
	}

	/* Now, we have a project structure allocated, save the regular memory allocation details */
	_ux_system->ux_system_regular_memory_pool_size = (ULONG)(((ALIGN_TYPE)regular_memory_pool_end)
 8004244:	1ae4      	subs	r4, r4, r3
 8004246:	6054      	str	r4, [r2, #4]
			- int_memory_pool_start);
	_ux_system->ux_system_regular_memory_pool_free = _ux_system->ux_system_regular_memory_pool_size;
 8004248:	6094      	str	r4, [r2, #8]
	_ux_system->ux_system_regular_memory_pool_start = (UX_MEMORY_BLOCK*)int_memory_pool_start;
 800424a:	6013      	str	r3, [r2, #0]

	/*--------------------------------------------------------------------------------------------*/

	/* Build the first free memory block */
	UX_MEMORY_BLOCK* memory_block = _ux_system->ux_system_regular_memory_pool_start;
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <_ux_system_initialize+0xb0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
	memory_block->ux_memory_block_size = _ux_system->ux_system_regular_memory_pool_size
 8004252:	685b      	ldr	r3, [r3, #4]
			- (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004254:	3b10      	subs	r3, #16
	memory_block->ux_memory_block_size = _ux_system->ux_system_regular_memory_pool_size
 8004256:	6013      	str	r3, [r2, #0]
	memory_block->ux_memory_block_status = UX_MEMORY_UNUSED;
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <_ux_system_initialize+0xbc>)
 800425a:	6053      	str	r3, [r2, #4]

	/* Check the definition of the cache safe pool. If the application or controller do not require
	 * any cache safe memory, define the cached safe memory region as the regular memory region. */
	if (cache_safe_memory_pool_start == UX_NULL)
 800425c:	b1f5      	cbz	r5, 800429c <_ux_system_initialize+0x94>
	}
	else
	{
		/* Make sure the cache safe memory pool is aligned properly */
		int_memory_pool_start = (ALIGN_TYPE)cache_safe_memory_pool_start;
		int_memory_pool_start += UX_ALIGN_MIN;
 800425e:	f105 000f 	add.w	r0, r5, #15
		int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8004262:	f020 000f 	bic.w	r0, r0, #15

		/* Save the cache safe memory allocation details */
		_ux_system->ux_system_cache_safe_memory_pool_size = cache_safe_memory_size - UX_ALIGN_MIN;
 8004266:	4c14      	ldr	r4, [pc, #80]	; (80042b8 <_ux_system_initialize+0xb0>)
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f1a6 020f 	sub.w	r2, r6, #15
 800426e:	611a      	str	r2, [r3, #16]
		_ux_system->ux_system_cache_safe_memory_pool_free = _ux_system
 8004270:	615a      	str	r2, [r3, #20]
				->ux_system_cache_safe_memory_pool_size;
		_ux_system->ux_system_cache_safe_memory_pool_start =
 8004272:	60d8      	str	r0, [r3, #12]
				(UX_MEMORY_BLOCK*)int_memory_pool_start;

		/* Reset this memory block */
		_ux_utility_memory_set(_ux_system->ux_system_cache_safe_memory_pool_start, 0,
 8004274:	2100      	movs	r1, #0
 8004276:	f000 f99b 	bl	80045b0 <_ux_utility_memory_set>
				_ux_system->ux_system_cache_safe_memory_pool_size);

		/* Build the first free memory block */
		memory_block = _ux_system->ux_system_cache_safe_memory_pool_start;
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
		memory_block->ux_memory_block_size = _ux_system->ux_system_cache_safe_memory_pool_size
 800427e:	691b      	ldr	r3, [r3, #16]
				- (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004280:	3b10      	subs	r3, #16
		memory_block->ux_memory_block_size = _ux_system->ux_system_cache_safe_memory_pool_size
 8004282:	6013      	str	r3, [r2, #0]
		memory_block->ux_memory_block_status = UX_MEMORY_UNUSED;
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <_ux_system_initialize+0xbc>)
 8004286:	6053      	str	r3, [r2, #4]
	/* Keep the size in system structure variable. */
	_ux_system->ux_system_debug_log_size = UX_DEBUG_LOG_SIZE;
#endif

	/* Create the Mutex object used by USBX to control critical sections. */
	UINT status = _ux_utility_mutex_create(&_ux_system->ux_system_mutex, "ux_system_mutex");
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <_ux_system_initialize+0xb0>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <_ux_system_initialize+0xc0>)
 800428e:	301c      	adds	r0, #28
 8004290:	f000 f996 	bl	80045c0 <_ux_utility_mutex_create>
	if (status != UX_SUCCESS)
 8004294:	4603      	mov	r3, r0
 8004296:	b950      	cbnz	r0, 80042ae <_ux_system_initialize+0xa6>
		return (UX_MUTEX_ERROR);

	return (UX_SUCCESS);
}
 8004298:	4618      	mov	r0, r3
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				->ux_system_regular_memory_pool_size;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <_ux_system_initialize+0xb0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
		_ux_system->ux_system_cache_safe_memory_pool_size = _ux_system
 80042a2:	611a      	str	r2, [r3, #16]
				->ux_system_regular_memory_pool_free;
 80042a4:	689a      	ldr	r2, [r3, #8]
		_ux_system->ux_system_cache_safe_memory_pool_free = _ux_system
 80042a6:	615a      	str	r2, [r3, #20]
				->ux_system_regular_memory_pool_start;
 80042a8:	681a      	ldr	r2, [r3, #0]
		_ux_system->ux_system_cache_safe_memory_pool_start = _ux_system
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	e7ec      	b.n	8004288 <_ux_system_initialize+0x80>
		return (UX_MUTEX_ERROR);
 80042ae:	2317      	movs	r3, #23
 80042b0:	e7f2      	b.n	8004298 <_ux_system_initialize+0x90>
		return (UX_MEMORY_INSUFFICIENT);
 80042b2:	2312      	movs	r3, #18
 80042b4:	e7f0      	b.n	8004298 <_ux_system_initialize+0x90>
 80042b6:	bf00      	nop
 80042b8:	20000490 	.word	0x20000490
 80042bc:	20000494 	.word	0x20000494
 80042c0:	20000488 	.word	0x20000488
 80042c4:	12345678 	.word	0x12345678
 80042c8:	0800879c 	.word	0x0800879c

080042cc <_ux_utility_delay_ms>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_delay_ms(ULONG ms_wait)
{
 80042cc:	b508      	push	{r3, lr}
	/* translate ms into ticks. */
	ULONG ticks = (ms_wait * UX_PERIODIC_RATE) / 1000;
 80042ce:	2364      	movs	r3, #100	; 0x64
 80042d0:	fb03 f000 	mul.w	r0, r3, r0
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <_ux_utility_delay_ms+0x18>)
 80042d6:	fba3 3000 	umull	r3, r0, r3, r0
 80042da:	0980      	lsrs	r0, r0, #6

	/* For safety add 1 to ticks. */
	ticks++;

	/* Call ThreadX sleep function. */
	tx_thread_sleep(ticks);
 80042dc:	3001      	adds	r0, #1
 80042de:	f001 fbc9 	bl	8005a74 <_tx_thread_sleep>

	/* Return completion status. */
	return;
}
 80042e2:	bd08      	pop	{r3, pc}
 80042e4:	10624dd3 	.word	0x10624dd3

080042e8 <_ux_utility_descriptor_parse>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_descriptor_parse(UCHAR* raw_descriptor, UCHAR* descriptor_structure,
		UINT descriptor_entries, UCHAR* descriptor)
{
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	4605      	mov	r5, r0
 80042ec:	461c      	mov	r4, r3
	/* Loop on all the entries in this descriptor. */
	while (descriptor_entries--)
 80042ee:	e007      	b.n	8004300 <_ux_utility_descriptor_parse+0x18>
				*((ULONG*)descriptor) = _ux_utility_long_get(raw_descriptor);
				raw_descriptor += 4;
				break;

			case 2:
				*((ULONG*)descriptor) = (ULONG)_ux_utility_short_get(raw_descriptor);
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 f99f 	bl	8004634 <_ux_utility_short_get>
 80042f6:	6020      	str	r0, [r4, #0]
				raw_descriptor += 2;
 80042f8:	3502      	adds	r5, #2
				*((ULONG*)descriptor) = (ULONG)*raw_descriptor;
				raw_descriptor++;
		}

		/* Add the size of the component to the destination. */
		descriptor += 4;
 80042fa:	3404      	adds	r4, #4
	while (descriptor_entries--)
 80042fc:	4632      	mov	r2, r6
		switch (*descriptor_structure++)
 80042fe:	4639      	mov	r1, r7
	while (descriptor_entries--)
 8004300:	1e56      	subs	r6, r2, #1
 8004302:	b17a      	cbz	r2, 8004324 <_ux_utility_descriptor_parse+0x3c>
		switch (*descriptor_structure++)
 8004304:	1c4f      	adds	r7, r1, #1
 8004306:	780b      	ldrb	r3, [r1, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d0f1      	beq.n	80042f0 <_ux_utility_descriptor_parse+0x8>
 800430c:	2b04      	cmp	r3, #4
 800430e:	d105      	bne.n	800431c <_ux_utility_descriptor_parse+0x34>
				*((ULONG*)descriptor) = _ux_utility_long_get(raw_descriptor);
 8004310:	4628      	mov	r0, r5
 8004312:	f000 f80f 	bl	8004334 <_ux_utility_long_get>
 8004316:	6020      	str	r0, [r4, #0]
				raw_descriptor += 4;
 8004318:	3504      	adds	r5, #4
				break;
 800431a:	e7ee      	b.n	80042fa <_ux_utility_descriptor_parse+0x12>
				*((ULONG*)descriptor) = (ULONG)*raw_descriptor;
 800431c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	e7ea      	b.n	80042fa <_ux_utility_descriptor_parse+0x12>
	}

	/* Return to caller. */
	return;
}
 8004324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004328 <_ux_utility_error_callback_register>:
VOID  _ux_utility_error_callback_register(VOID (*error_callback)(UINT system_level, UINT system_context, UINT error_code))

{

    /* The callback function is defined.  */
    _ux_system -> ux_system_error_callback_function = error_callback;
 8004328:	4b01      	ldr	r3, [pc, #4]	; (8004330 <_ux_utility_error_callback_register+0x8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6758      	str	r0, [r3, #116]	; 0x74

    /* We are done here. No return codes.  */
    return;
}
 800432e:	4770      	bx	lr
 8004330:	20000490 	.word	0x20000490

08004334 <_ux_utility_long_get>:
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8004334:	7803      	ldrb	r3, [r0, #0]
    value |=  (ULONG)*address++ << 8;
 8004336:	7842      	ldrb	r2, [r0, #1]
 8004338:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    value |=  (ULONG)*address++ << 16;
 800433c:	7882      	ldrb	r2, [r0, #2]
 800433e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    value |=  (ULONG)*address << 24;
 8004342:	78c0      	ldrb	r0, [r0, #3]

    /* Return 32-bit value.  */
    return(value);
}
 8004344:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8004348:	4770      	bx	lr
	...

0800434c <_ux_utility_memory_allocate>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	4606      	mov	r6, r0
 8004350:	460f      	mov	r7, r1
 8004352:	4614      	mov	r4, r2
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_utility_mutex_on(&_ux_system -> ux_system_mutex);
 8004354:	4b44      	ldr	r3, [pc, #272]	; (8004468 <_ux_utility_memory_allocate+0x11c>)
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	301c      	adds	r0, #28
 800435a:	f000 f948 	bl	80045ee <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800435e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004362:	d003      	beq.n	800436c <_ux_utility_memory_allocate+0x20>
        memory_alignment = UX_NO_ALIGN;
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8004364:	2e0e      	cmp	r6, #14
 8004366:	d802      	bhi.n	800436e <_ux_utility_memory_allocate+0x22>
        memory_alignment =  UX_ALIGN_MIN;
 8004368:	260f      	movs	r6, #15
 800436a:	e000      	b.n	800436e <_ux_utility_memory_allocate+0x22>
 800436c:	260f      	movs	r6, #15

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
    memory_alignment++;
 800436e:	1c75      	adds	r5, r6, #1
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8004370:	340f      	adds	r4, #15
 8004372:	f024 040f 	bic.w	r4, r4, #15
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8004376:	1931      	adds	r1, r6, r4
 8004378:	3110      	adds	r1, #16
 800437a:	4638      	mov	r0, r7
 800437c:	f000 f8ee 	bl	800455c <_ux_utility_memory_free_block_best_get>

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8004380:	4603      	mov	r3, r0
 8004382:	b350      	cbz	r0, 80043da <_ux_utility_memory_allocate+0x8e>
        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8004384:	f100 0210 	add.w	r2, r0, #16

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8004388:	4216      	tst	r6, r2
 800438a:	d132      	bne.n	80043f2 <_ux_utility_memory_allocate+0xa6>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800438c:	f104 0510 	add.w	r5, r4, #16
 8004390:	1941      	adds	r1, r0, r5
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8004392:	6882      	ldr	r2, [r0, #8]
 8004394:	608a      	str	r2, [r1, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8004396:	60c8      	str	r0, [r1, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004398:	6802      	ldr	r2, [r0, #0]
 800439a:	1b12      	subs	r2, r2, r4
 800439c:	3a10      	subs	r2, #16
 800439e:	5142      	str	r2, [r0, r5]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80043a0:	4a32      	ldr	r2, [pc, #200]	; (800446c <_ux_utility_memory_allocate+0x120>)
 80043a2:	604a      	str	r2, [r1, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 80043a4:	6004      	str	r4, [r0, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 80043a6:	6081      	str	r1, [r0, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED;
 80043a8:	4a31      	ldr	r2, [pc, #196]	; (8004470 <_ux_utility_memory_allocate+0x124>)
 80043aa:	6042      	str	r2, [r0, #4]
        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 80043ac:	f103 0610 	add.w	r6, r3, #16

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested);
 80043b0:	4622      	mov	r2, r4
 80043b2:	2100      	movs	r1, #0
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f8fb 	bl	80045b0 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 80043ba:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <_ux_utility_memory_allocate+0x11c>)
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	68c2      	ldr	r2, [r0, #12]
 80043c0:	6803      	ldr	r3, [r0, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d047      	beq.n	8004456 <_ux_utility_memory_allocate+0x10a>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
    }
    else
    {

       switch (memory_cache_flag)
 80043c6:	2f01      	cmp	r7, #1
 80043c8:	d149      	bne.n	800445e <_ux_utility_memory_allocate+0x112>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 80043ca:	6943      	ldr	r3, [r0, #20]
 80043cc:	1b5d      	subs	r5, r3, r5
 80043ce:	6145      	str	r5, [r0, #20]

        }
    }

    /* Release the protection.  */
    _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 80043d0:	301c      	adds	r0, #28
 80043d2:	f000 f908 	bl	80045e6 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
}                                
 80043d6:	4630      	mov	r0, r6
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <_ux_utility_memory_allocate+0x11c>)
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	301c      	adds	r0, #28
 80043e0:	f000 f901 	bl	80045e6 <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 80043e4:	2212      	movs	r2, #18
 80043e6:	2108      	movs	r1, #8
 80043e8:	2002      	movs	r0, #2
 80043ea:	f7ff feff 	bl	80041ec <_ux_system_error_handler>
        return(UX_NULL);
 80043ee:	2600      	movs	r6, #0
 80043f0:	e7f1      	b.n	80043d6 <_ux_utility_memory_allocate+0x8a>
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 80043f2:	f102 0010 	add.w	r0, r2, #16
        int_memory_buffer +=  memory_alignment - 1;
 80043f6:	4428      	add	r0, r5
 80043f8:	3801      	subs	r0, #1
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 80043fa:	ea20 0006 	bic.w	r0, r0, r6
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 80043fe:	f1a0 0110 	sub.w	r1, r0, #16
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8004402:	60cb      	str	r3, [r1, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8004404:	689d      	ldr	r5, [r3, #8]
 8004406:	608d      	str	r5, [r1, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	f840 5c10 	str.w	r5, [r0, #-16]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED;
 800440e:	4d18      	ldr	r5, [pc, #96]	; (8004470 <_ux_utility_memory_allocate+0x124>)
 8004410:	604d      	str	r5, [r1, #4]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8004412:	6099      	str	r1, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8004414:	1a8a      	subs	r2, r1, r2
 8004416:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8004418:	f850 3c10 	ldr.w	r3, [r0, #-16]
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	3b10      	subs	r3, #16
 8004420:	f840 3c10 	str.w	r3, [r0, #-16]
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8004424:	1b1b      	subs	r3, r3, r4
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 8004426:	2b10      	cmp	r3, #16
 8004428:	d910      	bls.n	800444c <_ux_utility_memory_allocate+0x100>
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800442a:	190d      	adds	r5, r1, r4
 800442c:	f105 0210 	add.w	r2, r5, #16
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8004430:	688e      	ldr	r6, [r1, #8]
 8004432:	61ae      	str	r6, [r5, #24]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8004434:	61e9      	str	r1, [r5, #28]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004436:	f1a3 0610 	sub.w	r6, r3, #16
 800443a:	612e      	str	r6, [r5, #16]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800443c:	4d0b      	ldr	r5, [pc, #44]	; (800446c <_ux_utility_memory_allocate+0x120>)
 800443e:	6055      	str	r5, [r2, #4]
            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8004440:	608a      	str	r2, [r1, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8004442:	f850 2c10 	ldr.w	r2, [r0, #-16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f840 3c10 	str.w	r3, [r0, #-16]
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800444c:	f850 5c10 	ldr.w	r5, [r0, #-16]
 8004450:	3510      	adds	r5, #16
        memory_block =  new_memory_block;
 8004452:	460b      	mov	r3, r1
 8004454:	e7aa      	b.n	80043ac <_ux_utility_memory_allocate+0x60>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8004456:	6883      	ldr	r3, [r0, #8]
 8004458:	1b5d      	subs	r5, r3, r5
 800445a:	6085      	str	r5, [r0, #8]
 800445c:	e7b8      	b.n	80043d0 <_ux_utility_memory_allocate+0x84>
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800445e:	6883      	ldr	r3, [r0, #8]
 8004460:	1b5d      	subs	r5, r3, r5
 8004462:	6085      	str	r5, [r0, #8]
            break;
 8004464:	e7b4      	b.n	80043d0 <_ux_utility_memory_allocate+0x84>
 8004466:	bf00      	nop
 8004468:	20000490 	.word	0x20000490
 800446c:	12345678 	.word	0x12345678
 8004470:	87654321 	.word	0x87654321

08004474 <_ux_utility_memory_allocate_mulc_safe>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align, ULONG cache, ULONG size_mul_v,
		ULONG size_mul_c)
{
 8004474:	b5d0      	push	{r4, r6, r7, lr}
	return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8004476:	2400      	movs	r4, #0
 8004478:	fba2 6703 	umull	r6, r7, r2, r3
 800447c:	b92f      	cbnz	r7, 800448a <_ux_utility_memory_allocate_mulc_safe+0x16>
 800447e:	b934      	cbnz	r4, 800448e <_ux_utility_memory_allocate_mulc_safe+0x1a>
 8004480:	fb03 f202 	mul.w	r2, r3, r2
 8004484:	f7ff ff62 	bl	800434c <_ux_utility_memory_allocate>
}
 8004488:	bdd0      	pop	{r4, r6, r7, pc}
	return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800448a:	2401      	movs	r4, #1
 800448c:	e7f7      	b.n	800447e <_ux_utility_memory_allocate_mulc_safe+0xa>
 800448e:	2000      	movs	r0, #0
 8004490:	e7fa      	b.n	8004488 <_ux_utility_memory_allocate_mulc_safe+0x14>

08004492 <_ux_utility_memory_copy>:
	/* Setup byte oriented source and destination pointers. */
	UCHAR* source = (UCHAR*)memory_source;
	UCHAR* destination = (UCHAR*)memory_destination;

	/* Loop to perform the copy. */
	while (length--)
 8004492:	e004      	b.n	800449e <_ux_utility_memory_copy+0xc>
	{
		/* Copy one byte. */
		*destination++ = *source++;
 8004494:	780a      	ldrb	r2, [r1, #0]
 8004496:	7002      	strb	r2, [r0, #0]
 8004498:	3001      	adds	r0, #1
 800449a:	3101      	adds	r1, #1
	while (length--)
 800449c:	461a      	mov	r2, r3
 800449e:	1e53      	subs	r3, r2, #1
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	d1f7      	bne.n	8004494 <_ux_utility_memory_copy+0x2>
	}

	/* Return to caller. */
	return;
}
 80044a4:	4770      	bx	lr
	...

080044a8 <_ux_utility_memory_free>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4604      	mov	r4, r0
UX_MEMORY_BLOCK     *next_block;
ULONG               memory_size_returned;
UCHAR               *memory_address;

    /* Get the mutex as this is a critical section.  */
    _ux_utility_mutex_on(&_ux_system -> ux_system_mutex);
 80044ac:	4b28      	ldr	r3, [pc, #160]	; (8004550 <_ux_utility_memory_free+0xa8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	301c      	adds	r0, #28
 80044b2:	f000 f89c 	bl	80045ee <_ux_utility_mutex_on>
    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80044b6:	f854 5c10 	ldr.w	r5, [r4, #-16]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != UX_MEMORY_USED)
 80044ba:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <_ux_utility_memory_free+0xac>)
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d10d      	bne.n	80044e0 <_ux_utility_memory_free+0x38>
 80044c4:	f1a4 0110 	sub.w	r1, r4, #16
 80044c8:	3510      	adds	r5, #16
        /* Return to caller.  */
        return;
    }

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <_ux_utility_memory_free+0xb0>)
 80044cc:	f844 3c0c 	str.w	r3, [r4, #-12]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80044d0:	68cb      	ldr	r3, [r1, #12]
 80044d2:	b183      	cbz	r3, 80044f6 <_ux_utility_memory_free+0x4e>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80044d4:	6858      	ldr	r0, [r3, #4]
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <_ux_utility_memory_free+0xb0>)
 80044d8:	4290      	cmp	r0, r2
 80044da:	d10c      	bne.n	80044f6 <_ux_utility_memory_free+0x4e>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 80044dc:	4619      	mov	r1, r3
 80044de:	e7f7      	b.n	80044d0 <_ux_utility_memory_free+0x28>
        _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <_ux_utility_memory_free+0xa8>)
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	301c      	adds	r0, #28
 80044e6:	f000 f87e 	bl	80045e6 <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 80044ea:	2219      	movs	r2, #25
 80044ec:	2108      	movs	r1, #8
 80044ee:	2002      	movs	r0, #2
 80044f0:	f7ff fe7c 	bl	80041ec <_ux_system_error_handler>
        return;
 80044f4:	e02a      	b.n	800454c <_ux_utility_memory_free+0xa4>
            break;
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 80044f6:	688b      	ldr	r3, [r1, #8]
    while (next_block != UX_NULL)
 80044f8:	b173      	cbz	r3, 8004518 <_ux_utility_memory_free+0x70>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status == UX_MEMORY_USED)
 80044fa:	6858      	ldr	r0, [r3, #4]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <_ux_utility_memory_free+0xac>)
 80044fe:	4290      	cmp	r0, r2
 8004500:	d008      	beq.n	8004514 <_ux_utility_memory_free+0x6c>
            memory_block -> ux_memory_block_next =  next_block;
            next_block -> ux_memory_block_previous =  memory_block;
            break;
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	608a      	str	r2, [r1, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	6808      	ldr	r0, [r1, #0]
 800450a:	4402      	add	r2, r0
 800450c:	3210      	adds	r2, #16
 800450e:	600a      	str	r2, [r1, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	e7f1      	b.n	80044f8 <_ux_utility_memory_free+0x50>
            memory_block -> ux_memory_block_next =  next_block;
 8004514:	608b      	str	r3, [r1, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 8004516:	60d9      	str	r1, [r3, #12]
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <_ux_utility_memory_free+0xa8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	68c2      	ldr	r2, [r0, #12]
 800451e:	6803      	ldr	r3, [r0, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d009      	beq.n	8004538 <_ux_utility_memory_free+0x90>

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8004524:	428b      	cmp	r3, r1
 8004526:	d80b      	bhi.n	8004540 <_ux_utility_memory_free+0x98>
 8004528:	6842      	ldr	r2, [r0, #4]
 800452a:	4413      	add	r3, r2
 800452c:	428b      	cmp	r3, r1
 800452e:	d907      	bls.n	8004540 <_ux_utility_memory_free+0x98>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8004530:	6883      	ldr	r3, [r0, #8]
 8004532:	441d      	add	r5, r3
 8004534:	6085      	str	r5, [r0, #8]
 8004536:	e006      	b.n	8004546 <_ux_utility_memory_free+0x9e>
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8004538:	6883      	ldr	r3, [r0, #8]
 800453a:	441d      	add	r5, r3
 800453c:	6085      	str	r5, [r0, #8]
 800453e:	e002      	b.n	8004546 <_ux_utility_memory_free+0x9e>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8004540:	6943      	ldr	r3, [r0, #20]
 8004542:	441d      	add	r5, r3
 8004544:	6145      	str	r5, [r0, #20]
        
    }

    /* Release the protection.  */
    _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8004546:	301c      	adds	r0, #28
 8004548:	f000 f84d 	bl	80045e6 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
}
 800454c:	bd38      	pop	{r3, r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	20000490 	.word	0x20000490
 8004554:	87654321 	.word	0x87654321
 8004558:	12345678 	.word	0x12345678

0800455c <_ux_utility_memory_free_block_best_get>:

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 800455c:	b118      	cbz	r0, 8004566 <_ux_utility_memory_free_block_best_get+0xa>
 800455e:	2801      	cmp	r0, #1
 8004560:	d008      	beq.n	8004574 <_ux_utility_memory_free_block_best_get+0x18>
            break;
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8004562:	2000      	movs	r0, #0
 8004564:	4770      	bx	lr
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <_ux_utility_memory_free_block_best_get+0x4c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 800456c:	2000      	movs	r0, #0
    while (memory_block != UX_NULL)
 800456e:	b1cb      	cbz	r3, 80045a4 <_ux_utility_memory_free_block_best_get+0x48>
{
 8004570:	b410      	push	{r4}
 8004572:	e006      	b.n	8004582 <_ux_utility_memory_free_block_best_get+0x26>
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <_ux_utility_memory_free_block_best_get+0x4c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
            break;
 800457a:	e7f7      	b.n	800456c <_ux_utility_memory_free_block_best_get+0x10>
                    best_memory_block =  memory_block;
 800457c:	4618      	mov	r0, r3
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 800457e:	689b      	ldr	r3, [r3, #8]
    while (memory_block != UX_NULL)
 8004580:	b16b      	cbz	r3, 800459e <_ux_utility_memory_free_block_best_get+0x42>
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8004582:	685c      	ldr	r4, [r3, #4]
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <_ux_utility_memory_free_block_best_get+0x50>)
 8004586:	4294      	cmp	r4, r2
 8004588:	d1f9      	bne.n	800457e <_ux_utility_memory_free_block_best_get+0x22>
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	428a      	cmp	r2, r1
 800458e:	d9f6      	bls.n	800457e <_ux_utility_memory_free_block_best_get+0x22>
                if (best_memory_block == UX_NULL)
 8004590:	2800      	cmp	r0, #0
 8004592:	d0f3      	beq.n	800457c <_ux_utility_memory_free_block_best_get+0x20>
                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 8004594:	6804      	ldr	r4, [r0, #0]
 8004596:	42a2      	cmp	r2, r4
 8004598:	d2f1      	bcs.n	800457e <_ux_utility_memory_free_block_best_get+0x22>
                        best_memory_block =  memory_block;
 800459a:	4618      	mov	r0, r3
 800459c:	e7ef      	b.n	800457e <_ux_utility_memory_free_block_best_get+0x22>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
}                                
 800459e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000490 	.word	0x20000490
 80045ac:	12345678 	.word	0x12345678

080045b0 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 80045b0:	e002      	b.n	80045b8 <_ux_utility_memory_set+0x8>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 80045b2:	7001      	strb	r1, [r0, #0]
 80045b4:	3001      	adds	r0, #1
    while(length--)
 80045b6:	461a      	mov	r2, r3
 80045b8:	1e53      	subs	r3, r2, #1
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d1f9      	bne.n	80045b2 <_ux_utility_memory_set+0x2>
    }

    /* Return to caller.  */
    return; 
}
 80045be:	4770      	bx	lr

080045c0 <_ux_utility_mutex_create>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_utility_mutex_create(TX_MUTEX* mutex, CHAR* mutex_name)
{
 80045c0:	b510      	push	{r4, lr}
	/* Call ThreadX to create the Mutex object. */
	UINT status = tx_mutex_create(mutex, (CHAR* )mutex_name, TX_NO_INHERIT);
 80045c2:	2334      	movs	r3, #52	; 0x34
 80045c4:	2200      	movs	r2, #0
 80045c6:	f001 fd27 	bl	8006018 <_txe_mutex_create>

	/* Check for status. */
	if (status != UX_SUCCESS)
 80045ca:	4604      	mov	r4, r0
 80045cc:	b908      	cbnz	r0, 80045d2 <_ux_utility_mutex_create+0x12>
		UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)
	}

	/* Return completion status. */
	return (status);
}
 80045ce:	4620      	mov	r0, r4
 80045d0:	bd10      	pop	{r4, pc}
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80045d2:	4602      	mov	r2, r0
 80045d4:	2108      	movs	r1, #8
 80045d6:	2002      	movs	r0, #2
 80045d8:	f7ff fe08 	bl	80041ec <_ux_system_error_handler>
	return (status);
 80045dc:	e7f7      	b.n	80045ce <_ux_utility_mutex_create+0xe>

080045de <_ux_utility_mutex_delete>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_utility_mutex_delete(TX_MUTEX* mutex)
{
 80045de:	b508      	push	{r3, lr}
	/* Call ThreadX to delete the Mutex object. */
	UINT status = tx_mutex_delete(mutex);
 80045e0:	f001 fd84 	bl	80060ec <_txe_mutex_delete>

	/* Return completion status. */
	return (status);
}
 80045e4:	bd08      	pop	{r3, pc}

080045e6 <_ux_utility_mutex_off>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_mutex_off(TX_MUTEX* mutex)
{
 80045e6:	b508      	push	{r3, lr}
	/* Call ThreadX to release protection.  */
	tx_mutex_put(mutex);
 80045e8:	f001 fdd2 	bl	8006190 <_txe_mutex_put>

	/* Return to caller.  */
	return;
}
 80045ec:	bd08      	pop	{r3, pc}

080045ee <_ux_utility_mutex_on>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_mutex_on(TX_MUTEX* mutex)
{
 80045ee:	b508      	push	{r3, lr}
	/* Call ThreadX to get system mutex. */
	UINT status = tx_mutex_get(mutex, TX_WAIT_FOREVER);
 80045f0:	f04f 31ff 	mov.w	r1, #4294967295
 80045f4:	f001 fd98 	bl	8006128 <_txe_mutex_get>

	/* Check for status. */
	if (status != UX_SUCCESS)
 80045f8:	b900      	cbnz	r0, 80045fc <_ux_utility_mutex_on+0xe>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
	}

	/* Return to caller. */
	return;
}
 80045fa:	bd08      	pop	{r3, pc}
 80045fc:	4602      	mov	r2, r0
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80045fe:	2108      	movs	r1, #8
 8004600:	2002      	movs	r0, #2
 8004602:	f7ff fdf3 	bl	80041ec <_ux_system_error_handler>
	return;
 8004606:	e7f8      	b.n	80045fa <_ux_utility_mutex_on+0xc>

08004608 <_ux_utility_semaphore_create>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(TX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8004608:	b510      	push	{r4, lr}

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800460a:	2320      	movs	r3, #32
 800460c:	f001 fddc 	bl	80061c8 <_txe_semaphore_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8004610:	4604      	mov	r4, r0
 8004612:	b908      	cbnz	r0, 8004618 <_ux_utility_semaphore_create+0x10>

    }

    /* Return completion status.  */
    return(status);
}
 8004614:	4620      	mov	r0, r4
 8004616:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8004618:	4602      	mov	r2, r0
 800461a:	2108      	movs	r1, #8
 800461c:	2002      	movs	r0, #2
 800461e:	f7ff fde5 	bl	80041ec <_ux_system_error_handler>
    return(status);
 8004622:	e7f7      	b.n	8004614 <_ux_utility_semaphore_create+0xc>

08004624 <_ux_utility_semaphore_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(TX_SEMAPHORE *semaphore)
{
 8004624:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 8004626:	f001 fe29 	bl	800627c <_txe_semaphore_delete>

    /* Return completion status.  */
    return(status);
}
 800462a:	bd08      	pop	{r3, pc}

0800462c <_ux_utility_semaphore_put>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(TX_SEMAPHORE *semaphore)
{
 800462c:	b508      	push	{r3, lr}

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800462e:	f001 fe63 	bl	80062f8 <_txe_semaphore_put>

    /* Return completion status.  */
    return(status);
}
 8004632:	bd08      	pop	{r3, pc}

08004634 <_ux_utility_short_get>:
/**************************************************************************/
ULONG _ux_utility_short_get(UCHAR* address)
{
	/* In order to make this function endian agnostic and memory alignment
	 * independent, we read a byte at a time from the address. */
	USHORT value = (USHORT)*address++;
 8004634:	7803      	ldrb	r3, [r0, #0]
	value |= (USHORT)(*address << 8);
 8004636:	7840      	ldrb	r0, [r0, #1]

	/* Return to caller. */
	return ((ULONG)value);
}
 8004638:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800463c:	4770      	bx	lr

0800463e <_ux_utility_string_length_check>:
{

UINT    string_length;


    if (string == UX_NULL)
 800463e:	b190      	cbz	r0, 8004666 <_ux_utility_string_length_check+0x28>
{
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
        return(UX_ERROR);

    string_length = 0;
 8004644:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 8004646:	5ce0      	ldrb	r0, [r4, r3]
 8004648:	b148      	cbz	r0, 800465e <_ux_utility_string_length_check+0x20>
            break;

        string_length++;
 800464a:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 800464c:	4293      	cmp	r3, r2
 800464e:	d9fa      	bls.n	8004646 <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	2108      	movs	r1, #8
 8004654:	2002      	movs	r0, #2
 8004656:	f7ff fdc9 	bl	80041ec <_ux_system_error_handler>

            return(UX_ERROR);
 800465a:	20ff      	movs	r0, #255	; 0xff

    if (string_length_ptr)
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
}
 800465c:	bd10      	pop	{r4, pc}
    if (string_length_ptr)
 800465e:	b121      	cbz	r1, 800466a <_ux_utility_string_length_check+0x2c>
        *string_length_ptr = string_length;
 8004660:	600b      	str	r3, [r1, #0]
    return(UX_SUCCESS); 
 8004662:	2000      	movs	r0, #0
 8004664:	e7fa      	b.n	800465c <_ux_utility_string_length_check+0x1e>
        return(UX_ERROR);
 8004666:	20ff      	movs	r0, #255	; 0xff
}
 8004668:	4770      	bx	lr
    return(UX_SUCCESS); 
 800466a:	2000      	movs	r0, #0
 800466c:	e7f6      	b.n	800465c <_ux_utility_string_length_check+0x1e>

0800466e <_ux_device_class_cdc_acm_activate>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND* command)
{
 800466e:	b508      	push	{r3, lr}
	/* Get the class container. */
	UX_SLAVE_CLASS* class = command->ux_slave_class_command_class_ptr;
 8004670:	6a03      	ldr	r3, [r0, #32]

	/* Get the class instance in the container. */
	UX_SLAVE_CLASS_CDC_ACM* cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*)class->ux_slave_class_instance;
 8004672:	6c9b      	ldr	r3, [r3, #72]	; 0x48

	/* Get the interface that owns this instance. */
	UX_SLAVE_INTERFACE* interface = (UX_SLAVE_INTERFACE*)command->ux_slave_class_command_interface;
 8004674:	6882      	ldr	r2, [r0, #8]

	/* Store the class instance into the interface. */
	interface->ux_slave_interface_class_instance = (VOID*)cdc_acm;
 8004676:	6093      	str	r3, [r2, #8]

	/* Now the opposite, store the interface in the class instance. */
	cdc_acm->ux_slave_class_cdc_acm_interface = interface;
 8004678:	601a      	str	r2, [r3, #0]

	/* If there is a activate function call it. */
	if (cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	b10a      	cbz	r2, 8004682 <_ux_device_class_cdc_acm_activate+0x14>
			!= UX_NULL)
	{
		/* Invoke the application. */
		cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800467e:	4618      	mov	r0, r3
 8004680:	4790      	blx	r2
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

	/* Return completion status. */
	return (UX_SUCCESS);
}
 8004682:	2000      	movs	r0, #0
 8004684:	bd08      	pop	{r3, pc}
	...

08004688 <_ux_device_class_cdc_acm_control_request>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 800468c:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 800468e:	6c9d      	ldr	r5, [r3, #72]	; 0x48

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <_ux_device_class_cdc_acm_control_request+0xec>)
 8004692:	681c      	ldr	r4, [r3, #0]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8004694:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8004698:	f504 7081 	add.w	r0, r4, #258	; 0x102
 800469c:	f7ff ffca 	bl	8004634 <_ux_utility_short_get>
 80046a0:	4680      	mov	r8, r0

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80046a2:	f504 7083 	add.w	r0, r4, #262	; 0x106
 80046a6:	f7ff ffc5 	bl	8004634 <_ux_utility_short_get>

    transmit_length = request_length ;
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80046aa:	2e21      	cmp	r6, #33	; 0x21
 80046ac:	d01d      	beq.n	80046ea <_ux_device_class_cdc_acm_control_request+0x62>
 80046ae:	2e22      	cmp	r6, #34	; 0x22
 80046b0:	d003      	beq.n	80046ba <_ux_device_class_cdc_acm_control_request+0x32>
 80046b2:	2e20      	cmp	r6, #32
 80046b4:	d040      	beq.n	8004738 <_ux_device_class_cdc_acm_control_request+0xb0>
            break ;

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80046b6:	20ff      	movs	r0, #255	; 0xff
 80046b8:	e03a      	b.n	8004730 <_ux_device_class_cdc_acm_control_request+0xa8>
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f885 307f 	strb.w	r3, [r5, #127]	; 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 80046c0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 80046c4:	f018 0f01 	tst.w	r8, #1
 80046c8:	d002      	beq.n	80046d0 <_ux_device_class_cdc_acm_control_request+0x48>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 80046ca:	2301      	movs	r3, #1
 80046cc:	f885 307f 	strb.w	r3, [r5, #127]	; 0x7f
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 80046d0:	f018 0f02 	tst.w	r8, #2
 80046d4:	d002      	beq.n	80046dc <_ux_device_class_cdc_acm_control_request+0x54>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 80046d6:	2301      	movs	r3, #1
 80046d8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 80046dc:	68eb      	ldr	r3, [r5, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d044      	beq.n	800476c <_ux_device_class_cdc_acm_control_request+0xe4>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 80046e2:	4628      	mov	r0, r5
 80046e4:	4798      	blx	r3
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80046e6:	2000      	movs	r0, #0
 80046e8:	e022      	b.n	8004730 <_ux_device_class_cdc_acm_control_request+0xa8>
 80046ea:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80046ee:	4607      	mov	r7, r0
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 80046f0:	2807      	cmp	r0, #7
 80046f2:	d91f      	bls.n	8004734 <_ux_device_class_cdc_acm_control_request+0xac>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 80046f4:	2607      	movs	r6, #7
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 80046f6:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80046f8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80046fc:	f000 ff36 	bl	800556c <_ux_utility_long_put>
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8004700:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004704:	f895 207c 	ldrb.w	r2, [r5, #124]	; 0x7c
 8004708:	711a      	strb	r2, [r3, #4]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800470a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800470e:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 8004712:	715a      	strb	r2, [r3, #5]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8004714:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004718:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
 800471c:	719a      	strb	r2, [r3, #6]
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800471e:	2303      	movs	r3, #3
 8004720:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 8004724:	463a      	mov	r2, r7
 8004726:	4631      	mov	r1, r6
 8004728:	4648      	mov	r0, r9
 800472a:	f7ff fd05 	bl	8004138 <_ux_device_stack_transfer_request>
    return(UX_SUCCESS);
 800472e:	2000      	movs	r0, #0
}
 8004730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    transmit_length = request_length ;
 8004734:	4606      	mov	r6, r0
 8004736:	e7de      	b.n	80046f6 <_ux_device_class_cdc_acm_control_request+0x6e>
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 8004738:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800473c:	f7ff fdfa 	bl	8004334 <_ux_utility_long_get>
 8004740:	67a8      	str	r0, [r5, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8004742:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004746:	791b      	ldrb	r3, [r3, #4]
 8004748:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800474c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004750:	795b      	ldrb	r3, [r3, #5]
 8004752:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 8004756:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800475a:	799b      	ldrb	r3, [r3, #6]
 800475c:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8004760:	68eb      	ldr	r3, [r5, #12]
 8004762:	b12b      	cbz	r3, 8004770 <_ux_device_class_cdc_acm_control_request+0xe8>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8004764:	4628      	mov	r0, r5
 8004766:	4798      	blx	r3
    return(UX_SUCCESS);
 8004768:	2000      	movs	r0, #0
 800476a:	e7e1      	b.n	8004730 <_ux_device_class_cdc_acm_control_request+0xa8>
 800476c:	2000      	movs	r0, #0
 800476e:	e7df      	b.n	8004730 <_ux_device_class_cdc_acm_control_request+0xa8>
 8004770:	2000      	movs	r0, #0
 8004772:	e7dd      	b.n	8004730 <_ux_device_class_cdc_acm_control_request+0xa8>
 8004774:	20000488 	.word	0x20000488

08004778 <_ux_device_class_cdc_acm_deactivate>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND* command)
{
 8004778:	b538      	push	{r3, r4, r5, lr}
	/* Get the class container. */
	UX_SLAVE_CLASS* class = command->ux_slave_class_command_class_ptr;
 800477a:	6a03      	ldr	r3, [r0, #32]

	/* Get the class instance in the container. */
	UX_SLAVE_CLASS_CDC_ACM* cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*)class->ux_slave_class_instance;
 800477c:	6c9c      	ldr	r4, [r3, #72]	; 0x48

	/* We need the interface to the class. */
	UX_SLAVE_INTERFACE* interface = cdc_acm->ux_slave_class_cdc_acm_interface;
 800477e:	6823      	ldr	r3, [r4, #0]
	/*--------------------------------------------------------------------------------------------*/

	UX_SLAVE_ENDPOINT* endpoint_out;

	/* Locate the endpoints. */
	UX_SLAVE_ENDPOINT* endpoint_in = interface->ux_slave_interface_first_endpoint;
 8004780:	6b5d      	ldr	r5, [r3, #52]	; 0x34

	/* Check the endpoint direction, if IN we have the correct endpoint. */
	if ((endpoint_in->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8004782:	696b      	ldr	r3, [r5, #20]
 8004784:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004788:	d116      	bne.n	80047b8 <_ux_device_class_cdc_acm_deactivate+0x40>
	{
		/* Wrong direction, we found the OUT endpoint first. */
		endpoint_out = endpoint_in;

		/* So the next endpoint has to be the IN endpoint. */
		endpoint_in = endpoint_out->ux_slave_endpoint_next_endpoint;
 800478a:	6a68      	ldr	r0, [r5, #36]	; 0x24
		/* We found the endpoint IN first, so next endpoint is OUT. */
		endpoint_out = endpoint_in->ux_slave_endpoint_next_endpoint;
	}

	/* Terminate the transactions pending on the endpoints. */
	_ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800478c:	2126      	movs	r1, #38	; 0x26
 800478e:	f000 fed5 	bl	800553c <_ux_device_stack_transfer_all_request_abort>
	_ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8004792:	2126      	movs	r1, #38	; 0x26
 8004794:	4628      	mov	r0, r5
 8004796:	f000 fed1 	bl	800553c <_ux_device_stack_transfer_all_request_abort>

	/* Terminate transmission and free resources. */
	_ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP,
 800479a:	2200      	movs	r2, #0
 800479c:	2107      	movs	r1, #7
 800479e:	4620      	mov	r0, r4
 80047a0:	f000 f80e 	bl	80047c0 <_ux_device_class_cdc_acm_ioctl>
			UX_NULL);

	/* If there is a deactivate function call it. */
	if (cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate
 80047a4:	68a3      	ldr	r3, [r4, #8]
 80047a6:	b10b      	cbz	r3, 80047ac <_ux_device_class_cdc_acm_deactivate+0x34>
			!= UX_NULL)
	{
		/* Invoke the application. */
		cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(
 80047a8:	4620      	mov	r0, r4
 80047aa:	4798      	blx	r3
				cdc_acm);
	}

	/* We need to reset the DTR and RTS values so they do not carry over to the
	 next connection. */
	cdc_acm->ux_slave_class_cdc_acm_data_dtr_state = 0;
 80047ac:	2000      	movs	r0, #0
 80047ae:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
	cdc_acm->ux_slave_class_cdc_acm_data_rts_state = 0;
 80047b2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

	/* Return completion status. */
	return (UX_SUCCESS);
}
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
	UX_SLAVE_ENDPOINT* endpoint_in = interface->ux_slave_interface_first_endpoint;
 80047b8:	4628      	mov	r0, r5
		endpoint_out = endpoint_in->ux_slave_endpoint_next_endpoint;
 80047ba:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80047bc:	e7e6      	b.n	800478c <_ux_device_class_cdc_acm_deactivate+0x14>
	...

080047c0 <_ux_device_class_cdc_acm_ioctl>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 80047c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	4604      	mov	r4, r0
 80047c8:	4615      	mov	r5, r2

    /* Let's be optimist ! */
    status = UX_SUCCESS;

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 80047ca:	1e4b      	subs	r3, r1, #1
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	f200 8126 	bhi.w	8004a1e <_ux_device_class_cdc_acm_ioctl+0x25e>
 80047d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80047d6:	0009      	.short	0x0009
 80047d8:	00260019 	.word	0x00260019
 80047dc:	002e0036 	.word	0x002e0036
 80047e0:	00f1006c 	.word	0x00f1006c
 80047e4:	00580058 	.word	0x00580058
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	6783      	str	r3, [r0, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 80047ec:	792b      	ldrb	r3, [r5, #4]
 80047ee:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 80047f2:	796b      	ldrb	r3, [r5, #5]
 80047f4:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 80047f8:	79ab      	ldrb	r3, [r5, #6]
 80047fa:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
    status = UX_SUCCESS;
 80047fe:	2600      	movs	r6, #0
    }   

    /* Return status to caller.  */
    return(status);
          
}
 8004800:	4630      	mov	r0, r6
 8004802:	b006      	add	sp, #24
 8004804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 8004808:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800480a:	602b      	str	r3, [r5, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800480c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004810:	712b      	strb	r3, [r5, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8004812:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004816:	716b      	strb	r3, [r5, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8004818:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 800481c:	71ab      	strb	r3, [r5, #6]
    status = UX_SUCCESS;
 800481e:	2600      	movs	r6, #0
            break;
 8004820:	e7ee      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 8004822:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004826:	702b      	strb	r3, [r5, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 8004828:	f890 307f 	ldrb.w	r3, [r0, #127]	; 0x7f
 800482c:	706b      	strb	r3, [r5, #1]
    status = UX_SUCCESS;
 800482e:	2600      	movs	r6, #0
            break;
 8004830:	e7e6      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8004832:	782b      	ldrb	r3, [r5, #0]
 8004834:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 8004838:	786b      	ldrb	r3, [r5, #1]
 800483a:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
    status = UX_SUCCESS;
 800483e:	2600      	movs	r6, #0
            break;
 8004840:	e7de      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8004842:	6803      	ldr	r3, [r0, #0]
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8004846:	2d01      	cmp	r5, #1
 8004848:	d00b      	beq.n	8004862 <_ux_device_class_cdc_acm_ioctl+0xa2>
 800484a:	2d02      	cmp	r5, #2
 800484c:	d010      	beq.n	8004870 <_ux_device_class_cdc_acm_ioctl+0xb0>
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800484e:	2653      	movs	r6, #83	; 0x53
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8004850:	f103 0030 	add.w	r0, r3, #48	; 0x30
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	2b01      	cmp	r3, #1
 8004858:	d1d2      	bne.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 800485a:	2104      	movs	r1, #4
 800485c:	f000 fe4e 	bl	80054fc <_ux_device_stack_transfer_abort>
 8004860:	e7ce      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004868:	d109      	bne.n	800487e <_ux_device_class_cdc_acm_ioctl+0xbe>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    status = UX_SUCCESS;
 800486c:	2600      	movs	r6, #0
 800486e:	e7ef      	b.n	8004850 <_ux_device_class_cdc_acm_ioctl+0x90>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004876:	d004      	beq.n	8004882 <_ux_device_class_cdc_acm_ioctl+0xc2>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    status = UX_SUCCESS;
 800487a:	2600      	movs	r6, #0
 800487c:	e7e8      	b.n	8004850 <_ux_device_class_cdc_acm_ioctl+0x90>
 800487e:	2600      	movs	r6, #0
 8004880:	e7e6      	b.n	8004850 <_ux_device_class_cdc_acm_ioctl+0x90>
 8004882:	2600      	movs	r6, #0
 8004884:	e7e4      	b.n	8004850 <_ux_device_class_cdc_acm_ioctl+0x90>
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8004886:	6803      	ldr	r3, [r0, #0]
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	f002 0280 	and.w	r2, r2, #128	; 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8004890:	2908      	cmp	r1, #8
 8004892:	d00a      	beq.n	80048aa <_ux_device_class_cdc_acm_ioctl+0xea>
 8004894:	2180      	movs	r1, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8004896:	428a      	cmp	r2, r1
 8004898:	d000      	beq.n	800489c <_ux_device_class_cdc_acm_ioctl+0xdc>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	2a01      	cmp	r2, #1
 80048a0:	f000 80c4 	beq.w	8004a2c <_ux_device_class_cdc_acm_ioctl+0x26c>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 80048a4:	67dd      	str	r5, [r3, #124]	; 0x7c
    status = UX_SUCCESS;
 80048a6:	2600      	movs	r6, #0
 80048a8:	e7aa      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 80048aa:	2100      	movs	r1, #0
 80048ac:	e7f3      	b.n	8004896 <_ux_device_class_cdc_acm_ioctl+0xd6>
            if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 80048ae:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	f000 80bc 	beq.w	8004a30 <_ux_device_class_cdc_acm_ioctl+0x270>
                    _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_THREAD_STACK_SIZE);
 80048b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048bc:	2100      	movs	r1, #0
 80048be:	4608      	mov	r0, r1
 80048c0:	f7ff fd44 	bl	800434c <_ux_utility_memory_allocate>
            cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack =  
 80048c4:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
            if (cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack  == UX_NULL)
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f000 80b3 	beq.w	8004a34 <_ux_device_class_cdc_acm_ioctl+0x274>
                    _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_THREAD_STACK_SIZE);
 80048ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d2:	2100      	movs	r1, #0
 80048d4:	4608      	mov	r0, r1
 80048d6:	f7ff fd39 	bl	800434c <_ux_utility_memory_allocate>
            cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack =  
 80048da:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
            if (cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack  == UX_NULL)
 80048de:	2800      	cmp	r0, #0
 80048e0:	d03d      	beq.n	800495e <_ux_device_class_cdc_acm_ioctl+0x19e>
            status =  _ux_utility_event_flags_create(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group, "ux_device_class_cdc_acm_event_flag");
 80048e2:	f504 770a 	add.w	r7, r4, #552	; 0x228
 80048e6:	4955      	ldr	r1, [pc, #340]	; (8004a3c <_ux_device_class_cdc_acm_ioctl+0x27c>)
 80048e8:	4638      	mov	r0, r7
 80048ea:	f000 fe2d 	bl	8005548 <_ux_utility_event_flags_create>
            if (status != UX_SUCCESS)
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d13b      	bne.n	800496a <_ux_device_class_cdc_acm_ioctl+0x1aa>
            status =  _ux_utility_thread_create(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread , "ux_slave_class_cdc_acm_bulkin_thread", 
 80048f2:	f104 0888 	add.w	r8, r4, #136	; 0x88
                        (ULONG) (ALIGN_TYPE) cdc_acm, (VOID *) cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack ,
 80048f6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
            status =  _ux_utility_thread_create(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread , "ux_slave_class_cdc_acm_bulkin_thread", 
 80048fa:	2301      	movs	r3, #1
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	2314      	movs	r3, #20
 8004904:	9303      	str	r3, [sp, #12]
 8004906:	9302      	str	r3, [sp, #8]
 8004908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	9200      	str	r2, [sp, #0]
 8004910:	4623      	mov	r3, r4
 8004912:	4a4b      	ldr	r2, [pc, #300]	; (8004a40 <_ux_device_class_cdc_acm_ioctl+0x280>)
 8004914:	494b      	ldr	r1, [pc, #300]	; (8004a44 <_ux_device_class_cdc_acm_ioctl+0x284>)
 8004916:	4640      	mov	r0, r8
 8004918:	f000 fe56 	bl	80055c8 <_ux_utility_thread_create>
            if (status != UX_SUCCESS)
 800491c:	bb78      	cbnz	r0, 800497e <_ux_device_class_cdc_acm_ioctl+0x1be>
                        (ULONG) (ALIGN_TYPE) cdc_acm, (VOID *) cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack ,
 800491e:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
            status =  _ux_utility_thread_create(&cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread , "ux_slave_class_cdc_acm_bulkout_thread", 
 8004922:	2301      	movs	r3, #1
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	2300      	movs	r3, #0
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	2314      	movs	r3, #20
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	9302      	str	r3, [sp, #8]
 8004930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	9200      	str	r2, [sp, #0]
 8004938:	4623      	mov	r3, r4
 800493a:	4a43      	ldr	r2, [pc, #268]	; (8004a48 <_ux_device_class_cdc_acm_ioctl+0x288>)
 800493c:	4943      	ldr	r1, [pc, #268]	; (8004a4c <_ux_device_class_cdc_acm_ioctl+0x28c>)
 800493e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8004942:	f000 fe41 	bl	80055c8 <_ux_utility_thread_create>
            if (status != UX_SUCCESS)
 8004946:	4606      	mov	r6, r0
 8004948:	bb30      	cbnz	r0, 8004998 <_ux_device_class_cdc_acm_ioctl+0x1d8>
            cdc_acm -> ux_device_class_cdc_acm_write_callback  = callback -> ux_device_class_cdc_acm_parameter_write_callback;
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
            cdc_acm -> ux_device_class_cdc_acm_read_callback = callback -> ux_device_class_cdc_acm_parameter_read_callback;
 8004950:	686b      	ldr	r3, [r5, #4]
 8004952:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
            cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_TRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
            return(UX_SUCCESS);
 800495c:	e750      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 800495e:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8004962:	f7ff fda1 	bl	80044a8 <_ux_utility_memory_free>
                return(UX_MEMORY_INSUFFICIENT);
 8004966:	2612      	movs	r6, #18
 8004968:	e74a      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 800496a:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 800496e:	f7ff fd9b 	bl	80044a8 <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 8004972:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004976:	f7ff fd97 	bl	80044a8 <_ux_utility_memory_free>
                return(UX_EVENT_ERROR);
 800497a:	2618      	movs	r6, #24
 800497c:	e740      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_event_flags_delete(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group);
 800497e:	4638      	mov	r0, r7
 8004980:	f000 fdf0 	bl	8005564 <_ux_utility_event_flags_delete>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 8004984:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8004988:	f7ff fd8e 	bl	80044a8 <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 800498c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004990:	f7ff fd8a 	bl	80044a8 <_ux_utility_memory_free>
                return(UX_THREAD_ERROR);
 8004994:	2616      	movs	r6, #22
 8004996:	e733      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_event_flags_delete(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group);
 8004998:	4638      	mov	r0, r7
 800499a:	f000 fde3 	bl	8005564 <_ux_utility_event_flags_delete>
                _ux_utility_thread_delete(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread);
 800499e:	4640      	mov	r0, r8
 80049a0:	f000 fe2f 	bl	8005602 <_ux_utility_thread_delete>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 80049a4:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 80049a8:	f7ff fd7e 	bl	80044a8 <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 80049ac:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80049b0:	f7ff fd7a 	bl	80044a8 <_ux_utility_memory_free>
                return(UX_THREAD_ERROR);
 80049b4:	2616      	movs	r6, #22
 80049b6:	e723      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
            if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 80049b8:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d13b      	bne.n	8004a38 <_ux_device_class_cdc_acm_ioctl+0x278>
                interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80049c0:	6803      	ldr	r3, [r0, #0]
                endpoint =  interface -> ux_slave_interface_first_endpoint;
 80049c2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80049c4:	f105 0030 	add.w	r0, r5, #48	; 0x30
                    if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 80049c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d01f      	beq.n	8004a0e <_ux_device_class_cdc_acm_ioctl+0x24e>
                endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80049ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80049d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
                    if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d01d      	beq.n	8004a16 <_ux_device_class_cdc_acm_ioctl+0x256>
                _ux_utility_thread_delete(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread);
 80049da:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80049de:	f000 fe10 	bl	8005602 <_ux_utility_thread_delete>
                _ux_utility_thread_delete(&cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread);
 80049e2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80049e6:	f000 fe0c 	bl	8005602 <_ux_utility_thread_delete>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 80049ea:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 80049ee:	f7ff fd5b 	bl	80044a8 <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 80049f2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80049f6:	f7ff fd57 	bl	80044a8 <_ux_utility_memory_free>
                _ux_utility_event_flags_delete(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group);
 80049fa:	f504 700a 	add.w	r0, r4, #552	; 0x228
 80049fe:	f000 fdb1 	bl	8005564 <_ux_utility_event_flags_delete>
                cdc_acm -> ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 8004a02:	2600      	movs	r6, #0
 8004a04:	f8c4 6254 	str.w	r6, [r4, #596]	; 0x254
                cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
 8004a08:	f8c4 6250 	str.w	r6, [r4, #592]	; 0x250
            break;                
 8004a0c:	e6f8      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 8004a0e:	2104      	movs	r1, #4
 8004a10:	f000 fd74 	bl	80054fc <_ux_device_stack_transfer_abort>
 8004a14:	e7db      	b.n	80049ce <_ux_device_class_cdc_acm_ioctl+0x20e>
                        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 8004a16:	2104      	movs	r1, #4
 8004a18:	f000 fd70 	bl	80054fc <_ux_device_stack_transfer_abort>
 8004a1c:	e7dd      	b.n	80049da <_ux_device_class_cdc_acm_ioctl+0x21a>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8004a1e:	2254      	movs	r2, #84	; 0x54
 8004a20:	2107      	movs	r1, #7
 8004a22:	2002      	movs	r0, #2
 8004a24:	f7ff fbe2 	bl	80041ec <_ux_system_error_handler>
            status =  UX_FUNCTION_NOT_SUPPORTED;
 8004a28:	2654      	movs	r6, #84	; 0x54
 8004a2a:	e6e9      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                status = UX_ERROR;
 8004a2c:	26ff      	movs	r6, #255	; 0xff
 8004a2e:	e6e7      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                return(UX_ERROR);
 8004a30:	26ff      	movs	r6, #255	; 0xff
 8004a32:	e6e5      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                return(UX_MEMORY_INSUFFICIENT);
 8004a34:	2612      	movs	r6, #18
 8004a36:	e6e3      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
                return(UX_ERROR);                
 8004a38:	26ff      	movs	r6, #255	; 0xff
 8004a3a:	e6e1      	b.n	8004800 <_ux_device_class_cdc_acm_ioctl+0x40>
 8004a3c:	080087ac 	.word	0x080087ac
 8004a40:	08005615 	.word	0x08005615
 8004a44:	080087d0 	.word	0x080087d0
 8004a48:	080056d9 	.word	0x080056d9
 8004a4c:	080087f8 	.word	0x080087f8

08004a50 <_ux_dcd_stm32_delay>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_delay(ULONG usec)
{
 8004a50:	b082      	sub	sp, #8
	volatile ULONG ucount = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	9301      	str	r3, [sp, #4]

	/* Calculate the time to wait in cycles. */
	volatile ULONG utime = UX_DCD_STM32_CONTROLLER_DELAY * usec;
 8004a56:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004a5a:	00c3      	lsls	r3, r0, #3
 8004a5c:	9300      	str	r3, [sp, #0]
	/* Now loop to wait. */
	do
	{
		/* Check the count. Place volatile variables in non-volatile to avoid
		 * compiler confusion regarding the order of volatile comparisons. */
		ucount_local = ++ucount;
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	3301      	adds	r3, #1
 8004a62:	9301      	str	r3, [sp, #4]
		utime_local = utime;
 8004a64:	9a00      	ldr	r2, [sp, #0]

		if (ucount_local > utime_local)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d9f9      	bls.n	8004a5e <_ux_dcd_stm32_delay+0xe>
			/* Done. */
			return;
	} while (1);
}
 8004a6a:	b002      	add	sp, #8
 8004a6c:	4770      	bx	lr

08004a6e <_ux_dcd_stm32_endpoint_stall>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	4606      	mov	r6, r0
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_register;
ULONG               stm32_endpoint_address;

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8004a72:	688d      	ldr	r5, [r1, #8]

    /* Check the endpoint direction for the base.  */
    if (ed -> ux_dcd_stm32_ed_direction  == UX_ENDPOINT_IN)
 8004a74:	69eb      	ldr	r3, [r5, #28]
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d015      	beq.n	8004aa6 <_ux_dcd_stm32_endpoint_stall+0x38>
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));

    else
    
        /* Endpoint is OUT.  */
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004a7a:	68ac      	ldr	r4, [r5, #8]
 8004a7c:	3458      	adds	r4, #88	; 0x58
 8004a7e:	0164      	lsls	r4, r4, #5

    /* Read the current EP register.  */
       stm32_endpoint_register =  _ux_dcd_stm32_register_read(dcd_stm32, stm32_endpoint_address);
 8004a80:	4621      	mov	r1, r4
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7fe fc7f 	bl	8003386 <_ux_dcd_stm32_register_read>

    /* Check the direction. Is the endpoint IN ? */
    if (ed -> ux_dcd_stm32_ed_direction == UX_ENDPOINT_IN)
 8004a88:	69eb      	ldr	r3, [r5, #28]
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d00f      	beq.n	8004aae <_ux_dcd_stm32_endpoint_stall+0x40>

    /* Set the stall bit.  */
    stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_STALL;

    /* Write the endpoint register.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, stm32_endpoint_register);
 8004a8e:	f440 1200 	orr.w	r2, r0, #2097152	; 0x200000
 8004a92:	4621      	mov	r1, r4
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7fe fc80 	bl	800339a <_ux_dcd_stm32_register_write>
        
    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	f043 0304 	orr.w	r3, r3, #4
 8004aa0:	602b      	str	r3, [r5, #0]

    /* This function never fails.  */
    return(UX_SUCCESS);         
}
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004aa6:	68ac      	ldr	r4, [r5, #8]
 8004aa8:	3448      	adds	r4, #72	; 0x48
 8004aaa:	0164      	lsls	r4, r4, #5
 8004aac:	e7e8      	b.n	8004a80 <_ux_dcd_stm32_endpoint_stall+0x12>
        if (stm32_endpoint_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	daed      	bge.n	8004a8e <_ux_dcd_stm32_endpoint_stall+0x20>
            stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPDIS;
 8004ab2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8004ab6:	e7ea      	b.n	8004a8e <_ux_dcd_stm32_endpoint_stall+0x20>

08004ab8 <_ux_dcd_stm32_fifo_flush>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_flush(UX_DCD_STM32 *dcd_stm32, ULONG fifo_type, ULONG fifo_index)
{
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4604      	mov	r4, r0
 8004abc:	460d      	mov	r5, r1
ULONG    stm32_register;

    /* Check if this is for RX or TX Fifos.  */
    if (fifo_type == UX_DCD_STM32_FLUSH_RX_FIFO)
 8004abe:	2910      	cmp	r1, #16
 8004ac0:	d010      	beq.n	8004ae4 <_ux_dcd_stm32_fifo_flush+0x2c>
    else

        /* Set the Fifo number and the TXFFLSH bit.  */
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
                                    (UX_DCD_STM32_OTG_FS_GRSTCTL_TXFFLSH | 
                                    (fifo_index << UX_DCD_STM32_OTG_FS_GRSTCTL_TXFNUM_SHIFT)));
 8004ac2:	0192      	lsls	r2, r2, #6
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
 8004ac4:	f042 0220 	orr.w	r2, r2, #32
 8004ac8:	2110      	movs	r1, #16
 8004aca:	f7fe fc66 	bl	800339a <_ux_dcd_stm32_register_write>

    /* Wait for the FIFO to be flushed.  */
    do
    {
        /* Read the GRSTCTL register.  */
        stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 8004ace:	2110      	movs	r1, #16
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7fe fc58 	bl	8003386 <_ux_dcd_stm32_register_read>

    } while (stm32_register & fifo_type);
 8004ad6:	4205      	tst	r5, r0
 8004ad8:	d1f9      	bne.n	8004ace <_ux_dcd_stm32_fifo_flush+0x16>

    /* Spec says to wait for 3 PHY Clocks.  */
    _ux_dcd_stm32_delay(3);    
 8004ada:	2003      	movs	r0, #3
 8004adc:	f7ff ffb8 	bl	8004a50 <_ux_dcd_stm32_delay>

    return(UX_SUCCESS);        
}
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	f7fe fc57 	bl	800339a <_ux_dcd_stm32_register_write>
 8004aec:	e7ef      	b.n	8004ace <_ux_dcd_stm32_fifo_flush+0x16>

08004aee <_ux_dcd_stm32_fifo_read>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_read(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index,
                                        UCHAR *data_pointer, ULONG fifo_length)
{
 8004aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af2:	4607      	mov	r7, r0
 8004af4:	4614      	mov	r4, r2
TX_INTERRUPT_SAVE_AREA
ULONG    fifo_address;
ULONG    fifo_value;

    /* Calculate the address of the FIFO.  */
    fifo_address = UX_DCD_STM32_DATA_FIFO_OFFSET + (endpoint_index * UX_DCD_STM32_DATA_FIFO_SIZE);
 8004af6:	3101      	adds	r1, #1
 8004af8:	030e      	lsls	r6, r1, #12

    /* Number of bytes to read is based on DWORDS.  */
    fifo_length = (fifo_length + 3) / sizeof(ULONG);
 8004afa:	3303      	adds	r3, #3
 8004afc:	089b      	lsrs	r3, r3, #2
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004afe:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004b02:	b672      	cpsid	i
    
    /* Lockout interrupts.  */
    TX_DISABLE

    /* Read one DWORD at a time.  */
    while (fifo_length--)
 8004b04:	e009      	b.n	8004b1a <_ux_dcd_stm32_fifo_read+0x2c>
    {

        /* Read from FIFO.  */
        fifo_value = _ux_dcd_stm32_register_read(dcd_stm32, fifo_address);
 8004b06:	4631      	mov	r1, r6
 8004b08:	4638      	mov	r0, r7
 8004b0a:	f7fe fc3c 	bl	8003386 <_ux_dcd_stm32_register_read>
        
        /* Store this value in a endian agnostic way.  */
        _ux_utility_long_put(data_pointer, fifo_value);
 8004b0e:	4601      	mov	r1, r0
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fd2b 	bl	800556c <_ux_utility_long_put>

        /* Increment the data pointer buffer address.  */
        data_pointer += sizeof(ULONG);
 8004b16:	3404      	adds	r4, #4
    while (fifo_length--)
 8004b18:	462b      	mov	r3, r5
 8004b1a:	1e5d      	subs	r5, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f2      	bne.n	8004b06 <_ux_dcd_stm32_fifo_read+0x18>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b20:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return successful completion.  */
    return(UX_SUCCESS);        
}
 8004b24:	2000      	movs	r0, #0
 8004b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b2a <_ux_dcd_stm32_fifo_write>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_write(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index,
                                     UCHAR * data_pointer, ULONG fifo_length, ULONG last_packet_flag)
{
 8004b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2e:	4607      	mov	r7, r0
 8004b30:	4614      	mov	r4, r2
TX_INTERRUPT_SAVE_AREA
ULONG    fifo_address;
ULONG    fifo_value;

    /* Calculate the address of the FIFO.  */
    fifo_address = UX_DCD_STM32_DATA_FIFO_OFFSET + (endpoint_index * UX_DCD_STM32_DATA_FIFO_SIZE);
 8004b32:	3101      	adds	r1, #1
 8004b34:	030e      	lsls	r6, r1, #12

    /* Number of bytes to read is based on DWORDS.  */
    fifo_length = (fifo_length + 3) / sizeof(ULONG);
 8004b36:	3303      	adds	r3, #3
 8004b38:	089b      	lsrs	r3, r3, #2
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004b3a:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004b3e:	b672      	cpsid	i
    
    /* Lockout interrupts.  */
    TX_DISABLE

    /* Write one DWORD at a time.  */
    while (fifo_length--)
 8004b40:	e009      	b.n	8004b56 <_ux_dcd_stm32_fifo_write+0x2c>
    {

        /* load the value from the FIFO. This is little/endian agnostic.  */
        fifo_value = _ux_utility_long_get(data_pointer);
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff fbf6 	bl	8004334 <_ux_utility_long_get>

        /* Write from FIFO.  */
        _ux_dcd_stm32_register_write(dcd_stm32, fifo_address, fifo_value);
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7fe fc24 	bl	800339a <_ux_dcd_stm32_register_write>

        /* Increment the data pointer buffer address.  */
        data_pointer += sizeof(ULONG);
 8004b52:	3404      	adds	r4, #4
    while (fifo_length--)
 8004b54:	462b      	mov	r3, r5
 8004b56:	1e5d      	subs	r5, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f2      	bne.n	8004b42 <_ux_dcd_stm32_fifo_write+0x18>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b5c:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return successful completion.  */
    return(UX_SUCCESS);        
}
 8004b60:	2000      	movs	r0, #0
 8004b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b66 <_ux_dcd_stm32_function>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_function(UX_SLAVE_DCD* dcd, UINT function, VOID* parameter)
{
 8004b66:	b508      	push	{r3, lr}
	/* Check the status of the controller. */
	if (dcd->ux_slave_dcd_status == UX_UNUSED)
 8004b68:	6a03      	ldr	r3, [r0, #32]
 8004b6a:	b163      	cbz	r3, 8004b86 <_ux_dcd_stm32_function+0x20>

		return (UX_CONTROLLER_UNKNOWN);
	}

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8004b6c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

	UINT status;

	/* Look at the function and route it. */
	switch (function)
 8004b6e:	f1a1 030a 	sub.w	r3, r1, #10
 8004b72:	2b0b      	cmp	r3, #11
 8004b74:	d832      	bhi.n	8004bdc <_ux_dcd_stm32_function+0x76>
 8004b76:	e8df f003 	tbb	[pc, r3]
 8004b7a:	310d      	.short	0x310d
 8004b7c:	19153111 	.word	0x19153111
 8004b80:	2931251d 	.word	0x2931251d
 8004b84:	2d21      	.short	0x2d21
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD,
 8004b86:	2255      	movs	r2, #85	; 0x55
 8004b88:	2102      	movs	r1, #2
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	f7ff fb2e 	bl	80041ec <_ux_system_error_handler>
		return (UX_CONTROLLER_UNKNOWN);
 8004b90:	2055      	movs	r0, #85	; 0x55
			break;
	}

	/* Return completion status. */
	return (status);
}
 8004b92:	bd08      	pop	{r3, pc}
			status = _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG*)parameter);
 8004b94:	4611      	mov	r1, r2
 8004b96:	f000 fef4 	bl	8005982 <_ux_dcd_stm32_frame_number_get>
			break;
 8004b9a:	e7fa      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER*)parameter);
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	f000 f8fd 	bl	8004d9c <_ux_dcd_stm32_transfer_request>
			break;
 8004ba2:	e7f6      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	f000 fde1 	bl	800576c <_ux_dcd_stm32_endpoint_create>
			break;
 8004baa:	e7f2      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8004bac:	4611      	mov	r1, r2
 8004bae:	f000 fe87 	bl	80058c0 <_ux_dcd_stm32_endpoint_destroy>
			break;
 8004bb2:	e7ee      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	f000 feb3 	bl	8005920 <_ux_dcd_stm32_endpoint_reset>
			break;
 8004bba:	e7ea      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	f7ff ff56 	bl	8004a6e <_ux_dcd_stm32_endpoint_stall>
			break;
 8004bc2:	e7e6      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_address_set(dcd_stm32, (ULONG)parameter);
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	f000 fdbf 	bl	8005748 <_ux_dcd_stm32_address_set>
			break;
 8004bca:	e7e2      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_state_change(dcd_stm32, (ULONG)parameter);
 8004bcc:	4611      	mov	r1, r2
 8004bce:	f000 f8e3 	bl	8004d98 <_ux_dcd_stm32_state_change>
			break;
 8004bd2:	e7de      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG)parameter);
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	f000 fec3 	bl	8005960 <_ux_dcd_stm32_endpoint_status>
			break;
 8004bda:	e7da      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD,
 8004bdc:	2254      	movs	r2, #84	; 0x54
 8004bde:	2102      	movs	r1, #2
 8004be0:	4608      	mov	r0, r1
 8004be2:	f7ff fb03 	bl	80041ec <_ux_system_error_handler>
			status = UX_FUNCTION_NOT_SUPPORTED;
 8004be6:	2054      	movs	r0, #84	; 0x54
			break;
 8004be8:	e7d3      	b.n	8004b92 <_ux_dcd_stm32_function+0x2c>
	...

08004bec <_ux_dcd_stm32_initialize_complete>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_initialize_complete(VOID)
{
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004bee:	4b68      	ldr	r3, [pc, #416]	; (8004d90 <_ux_dcd_stm32_initialize_complete+0x1a4>)
 8004bf0:	681d      	ldr	r5, [r3, #0]

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8004bf2:	6bec      	ldr	r4, [r5, #60]	; 0x3c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Are we in DFU mode ? If so, check if we are in a Reset mode. */
	if (_ux_system_slave->ux_system_slave_device_dfu_state_machine ==
 8004bf4:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d021      	beq.n	8004c40 <_ux_dcd_stm32_initialize_complete+0x54>
				->ux_system_slave_dfu_framework_length;
	}
	else
	{
		/* Set State to App Idle. */
		_ux_system_slave->ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0

		/* Check the speed and set the correct descriptor. */
		if (_ux_system_slave->ux_system_slave_speed == UX_FULL_SPEED_DEVICE)
 8004c02:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d023      	beq.n	8004c52 <_ux_dcd_stm32_initialize_complete+0x66>
		}
		else
		{
			/* The device is operating at high speed. */
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
					->ux_system_slave_device_framework_high_speed;
 8004c0a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8004c0e:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
					->ux_system_slave_device_framework_length_high_speed;
 8004c12:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8004c16:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
		}
	}

	/* Flush the Endpoint Fifos. */
	_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO, UX_DCD_STM32_FLUSH_FIFO_ALL);
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	2120      	movs	r1, #32
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7ff ff4a 	bl	8004ab8 <_ux_dcd_stm32_fifo_flush>
	_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_RX_FIFO, UX_DCD_STM32_FLUSH_FIFO_ALL);
 8004c24:	2210      	movs	r2, #16
 8004c26:	4611      	mov	r1, r2
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7ff ff45 	bl	8004ab8 <_ux_dcd_stm32_fifo_flush>

	/* Clear all pending device interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINT, 0xFFFFFFFF);
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	f640 0118 	movw	r1, #2072	; 0x818
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7fe fbaf 	bl	800339a <_ux_dcd_stm32_register_write>

	ULONG ed_index;
	ULONG stm32_register;

	/* Reset the IN endpoints. */
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	e025      	b.n	8004c8c <_ux_dcd_stm32_initialize_complete+0xa0>
				->ux_system_slave_dfu_framework;
 8004c40:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
		_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8004c44:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
				->ux_system_slave_dfu_framework_length;
 8004c48:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
		_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8004c4c:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
 8004c50:	e7e3      	b.n	8004c1a <_ux_dcd_stm32_initialize_complete+0x2e>
					->ux_system_slave_device_framework_full_speed;
 8004c52:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8004c56:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
					->ux_system_slave_device_framework_length_full_speed;
 8004c5a:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8004c5e:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
 8004c62:	e7da      	b.n	8004c1a <_ux_dcd_stm32_initialize_complete+0x2e>

		/* Check if the endpoint is already enabled. */
		if (stm32_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
		{
			/* Set the endpoint disabled bit and SNAK. */
			stm32_register = UX_DCD_STM32_OTG_FS_DIEPCTL_SNAK |
 8004c64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
		else
			/* Reset register. Nothing to do. */
			stm32_register = 0;

		/* Set the Endpoint register. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL +
 8004c68:	4639      	mov	r1, r7
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f7fe fb95 	bl	800339a <_ux_dcd_stm32_register_write>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), stm32_register);

		/* Reset the DIEPSIZ register of the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ +
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), 0);
 8004c70:	0177      	lsls	r7, r6, #5
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ +
 8004c72:	2200      	movs	r2, #0
 8004c74:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7fe fb8e 	bl	800339a <_ux_dcd_stm32_register_write>

		/* Reset the interrupt register for the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPINT +
 8004c7e:	22dd      	movs	r2, #221	; 0xdd
 8004c80:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fe fb88 	bl	800339a <_ux_dcd_stm32_register_write>
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	2e03      	cmp	r6, #3
 8004c8e:	d80a      	bhi.n	8004ca6 <_ux_dcd_stm32_initialize_complete+0xba>
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL +
 8004c90:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8004c94:	017f      	lsls	r7, r7, #5
 8004c96:	4639      	mov	r1, r7
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7fe fb74 	bl	8003386 <_ux_dcd_stm32_register_read>
		if (stm32_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	dbe0      	blt.n	8004c64 <_ux_dcd_stm32_initialize_complete+0x78>
			stm32_register = 0;
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	e7e0      	b.n	8004c68 <_ux_dcd_stm32_initialize_complete+0x7c>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), UX_DCD_STM32_OTG_FS_DIEPINT_ALL);
	}

	/* Reset the OUT endpoints. */
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	e013      	b.n	8004cd2 <_ux_dcd_stm32_initialize_complete+0xe6>

		/* Check if the endpoint is already enabled. */
		if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA)
		{
			/* Set the endpoint disabled bit and SNAK. */
			stm32_register = UX_DCD_STM32_OTG_FS_DOEPCTL_SNAK |
 8004caa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
		else
			/* Reset register. Nothing to do. */
			stm32_register = 0;

		/* Set the Endpoint register. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL +
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7fe fb72 	bl	800339a <_ux_dcd_stm32_register_write>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), stm32_register);

		/* Reset the DIEPSIZ register of the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ +
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), 0);
 8004cb6:	0177      	lsls	r7, r6, #5
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ +
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7fe fb6b 	bl	800339a <_ux_dcd_stm32_register_write>

		/* Reset the interrupt register for the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPINT +
 8004cc4:	225d      	movs	r2, #93	; 0x5d
 8004cc6:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7fe fb65 	bl	800339a <_ux_dcd_stm32_register_write>
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	2e03      	cmp	r6, #3
 8004cd4:	d80a      	bhi.n	8004cec <_ux_dcd_stm32_initialize_complete+0x100>
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL +
 8004cd6:	f106 0758 	add.w	r7, r6, #88	; 0x58
 8004cda:	017f      	lsls	r7, r7, #5
 8004cdc:	4639      	mov	r1, r7
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7fe fb51 	bl	8003386 <_ux_dcd_stm32_register_read>
		if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA)
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	dbe0      	blt.n	8004caa <_ux_dcd_stm32_initialize_complete+0xbe>
			stm32_register = 0;
 8004ce8:	2200      	movs	r2, #0
 8004cea:	e7e0      	b.n	8004cae <_ux_dcd_stm32_initialize_complete+0xc2>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), UX_DCD_STM32_OTG_FS_DOEPINT_ALL);
	}

	/* Set the DOEPMSK register. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPMSK,
 8004cec:	224b      	movs	r2, #75	; 0x4b
 8004cee:	f640 0114 	movw	r1, #2068	; 0x814
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fe fb51 	bl	800339a <_ux_dcd_stm32_register_write>
			UX_DCD_STM32_OTG_FS_DOEPMSK_XFRCM | UX_DCD_STM32_OTG_FS_DOEPMSK_STUPM |
			UX_DCD_STM32_OTG_FS_DOEPMSK_EPDM | UX_DCD_STM32_OTG_FS_DOEPMSK_B2BSTUP);

	/* Set the DIEPMSK register. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPMSK,
 8004cf8:	220b      	movs	r2, #11
 8004cfa:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f7fe fb4b 	bl	800339a <_ux_dcd_stm32_register_write>
			UX_DCD_STM32_OTG_FS_DIEPMSK_XFRCM | UX_DCD_STM32_OTG_FS_DIEPMSK_EPDM |
			UX_DCD_STM32_OTG_FS_DIEPMSK_TOM);

	/* Reset the Global IN/OUT NAK. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCTL,
 8004d04:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004d08:	f640 0104 	movw	r1, #2052	; 0x804
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f7fe fb3e 	bl	800338e <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_DCTL_CGONAK | UX_DCD_STM32_OTG_FS_DCTL_CGINAK);

	/* Reset the device address. */
	_ux_dcd_stm32_address_set(dcd_stm32, 0);
 8004d12:	2100      	movs	r1, #0
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 fd17 	bl	8005748 <_ux_dcd_stm32_address_set>

	/*--------------------------------------------------------------------------------------------*/

	/* Get the device framework pointer. */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8004d1a:	4c1d      	ldr	r4, [pc, #116]	; (8004d90 <_ux_dcd_stm32_initialize_complete+0x1a4>)
 8004d1c:	6820      	ldr	r0, [r4, #0]

	/* And create the decompressed device descriptor structure. */
	_ux_utility_descriptor_parse(device_framework, _ux_system_device_descriptor_structure,
 8004d1e:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8004d22:	220e      	movs	r2, #14
 8004d24:	491b      	ldr	r1, [pc, #108]	; (8004d94 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 8004d26:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8004d2a:	f7ff fadd 	bl	80042e8 <_ux_utility_descriptor_parse>
			UX_DEVICE_DESCRIPTOR_ENTRIES, (UCHAR*)&device->ux_slave_device_descriptor);

	/* Now we create a transfer request to accept the first SETUP packet and get the ball running.
	 * First get the address of the endpoint transfer request container. */
	UX_SLAVE_TRANSFER* transfer_request =
 8004d2e:	f105 06ac 	add.w	r6, r5, #172	; 0xac
			&device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

	/* Set the timeout to be for Control Endpoint. */
	transfer_request->ux_slave_transfer_request_timeout = MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8004d32:	2364      	movs	r3, #100	; 0x64
 8004d34:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8

	/* Adjust the current data pointer as well. */
	transfer_request->ux_slave_transfer_request_current_data_pointer =
			transfer_request->ux_slave_transfer_request_data_pointer;
 8004d38:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
	transfer_request->ux_slave_transfer_request_current_data_pointer =
 8004d3c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc

	/* Update the transfer request endpoint pointer with the default endpoint. */
	transfer_request->ux_slave_transfer_request_endpoint =
			&device->ux_slave_device_control_endpoint;
 8004d40:	f105 027c 	add.w	r2, r5, #124	; 0x7c
	transfer_request->ux_slave_transfer_request_endpoint =
 8004d44:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4

	/* The control endpoint max packet size needs to be filled manually in its descriptor. */
	transfer_request->ux_slave_transfer_request_endpoint->ux_slave_endpoint_descriptor
			.wMaxPacketSize = device->ux_slave_device_descriptor.bMaxPacketSize0;
 8004d48:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004d4a:	61d3      	str	r3, [r2, #28]

	/* On the control endpoint, always expect the maximum. */
	transfer_request->ux_slave_transfer_request_requested_length =
 8004d4c:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
			&device->ux_slave_device_control_endpoint;

	/* Create the default control endpoint attached to the device. Once this endpoint is enabled,
	 * the host can then send a setup packet. The device controller will receive it and will call
	 * the setup function module. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8004d50:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d52:	210e      	movs	r1, #14
 8004d54:	4628      	mov	r0, r5
 8004d56:	4798      	blx	r3
			(VOID*)&device->ux_slave_device_control_endpoint);

	/* Ensure the control endpoint is properly reset. */
	device->ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	/* Mark the phase as SETUP. */
	transfer_request->ux_slave_transfer_request_type = UX_TRANSFER_PHASE_SETUP;
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0

	/* Mark this transfer request as pending. */
	transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8004d64:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/* Ask for 8 bytes of the SETUP packet. */
	transfer_request->ux_slave_transfer_request_requested_length = UX_SETUP_SIZE;
 8004d68:	2208      	movs	r2, #8
 8004d6a:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	transfer_request->ux_slave_transfer_request_in_transfer_length = UX_SETUP_SIZE;
 8004d6e:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8

	/* Reset the number of bytes sent/received. */
	transfer_request->ux_slave_transfer_request_actual_length = 0;
 8004d72:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	/* Call the DCD driver transfer function. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8004d76:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d78:	4632      	mov	r2, r6
 8004d7a:	210c      	movs	r1, #12
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	4798      	blx	r3

	/* Check the status change callback. */
	if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004d86:	b10b      	cbz	r3, 8004d8c <_ux_dcd_stm32_initialize_complete+0x1a0>
	{
		/* Inform the application if a callback function was programmed. */
		_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8004d88:	2001      	movs	r0, #1
 8004d8a:	4798      	blx	r3
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

	/* We are now ready for the USB device to accept the first packet when connected. */
	return (UX_SUCCESS);
}
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d90:	20000488 	.word	0x20000488
 8004d94:	20000134 	.word	0x20000134

08004d98 <_ux_dcd_stm32_state_change>:
UINT  _ux_dcd_stm32_state_change(UX_DCD_STM32 *dcd_stm32, ULONG state)
{

    /* This function always succeeds.  */
    return(UX_SUCCESS);         
}
 8004d98:	2000      	movs	r0, #0
 8004d9a:	4770      	bx	lr

08004d9c <_ux_dcd_stm32_transfer_request>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	b083      	sub	sp, #12
 8004da2:	4607      	mov	r7, r0
 8004da4:	460c      	mov	r4, r1
ULONG                    endpoint_control;
ULONG                    endpoint_size;
UINT                    status;                            

    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8004da6:	f8d1 a008 	ldr.w	sl, [r1, #8]

    /* Get the physical endpoint from the logical endpoint.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8004daa:	f8da 6008 	ldr.w	r6, [sl, #8]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8004dae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d01f      	beq.n	8004df4 <_ux_dcd_stm32_transfer_request+0x58>
    {

        /* We have a request for a SETUP or OUT Endpoint.  */

        /* Compute the endpoint address.  */
        endpoint_control_address = (UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004db4:	68b5      	ldr	r5, [r6, #8]
 8004db6:	f105 0858 	add.w	r8, r5, #88	; 0x58
 8004dba:	ea4f 1848 	mov.w	r8, r8, lsl #5

        /* And the size register.  */
        endpoint_size_address = (UX_DCD_STM32_OTG_FS_DOEPTSIZ + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004dbe:	016d      	lsls	r5, r5, #5
 8004dc0:	f505 6531 	add.w	r5, r5, #2832	; 0xb10
        
        /* Read the content of the control register.  */
        endpoint_control  =  _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	f7fe fade 	bl	8003386 <_ux_dcd_stm32_register_read>
 8004dca:	4681      	mov	r9, r0

        /* Get the size of the transfer, used for a IN transaction only.  */
        fifo_length =  transfer_request -> ux_slave_transfer_request_requested_length;
 8004dcc:	6962      	ldr	r2, [r4, #20]

        /* Check if the endpoint size is bigger that data requested. */
        if(fifo_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8004dce:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d200      	bcs.n	8004dd8 <_ux_dcd_stm32_transfer_request+0x3c>
        {

            /* Adjust the transfer size.  */
            fifo_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8004dd6:	461a      	mov	r2, r3
        }

        /* Check if size is 0 as in ZLP.  */
        if (fifo_length == 0)
 8004dd8:	2a00      	cmp	r2, #0
 8004dda:	d05a      	beq.n	8004e92 <_ux_dcd_stm32_transfer_request+0xf6>
        
        else
        {

            /* If this is a SETUP phase, we need to have 3 packets in the pipe possible.  */
            if (transfer_request -> ux_slave_transfer_request_type ==  UX_TRANSFER_PHASE_SETUP)
 8004ddc:	6861      	ldr	r1, [r4, #4]
 8004dde:	2901      	cmp	r1, #1
 8004de0:	d06c      	beq.n	8004ebc <_ux_dcd_stm32_transfer_request+0x120>
            }
            else
            {
            
                /* Program the transfer size.  */
                endpoint_size = ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8004de2:	441a      	add	r2, r3
 8004de4:	3a01      	subs	r2, #1
 8004de6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
                                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) * 
                                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
                
                /* And packet counts.  */
                endpoint_size |= ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8004dee:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 8004df2:	e050      	b.n	8004e96 <_ux_dcd_stm32_transfer_request+0xfa>
        endpoint_control_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004df4:	68b3      	ldr	r3, [r6, #8]
 8004df6:	f103 0948 	add.w	r9, r3, #72	; 0x48
 8004dfa:	ea4f 1949 	mov.w	r9, r9, lsl #5
        endpoint_size_address = (UX_DCD_STM32_OTG_FS_DIEPTSIZ + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004dfe:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8004e02:	f508 6811 	add.w	r8, r8, #2320	; 0x910
        endpoint_control  =  _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 8004e06:	4649      	mov	r1, r9
 8004e08:	f7fe fabd 	bl	8003386 <_ux_dcd_stm32_register_read>
 8004e0c:	4683      	mov	fp, r0
        fifo_length =  transfer_request -> ux_slave_transfer_request_requested_length;
 8004e0e:	6965      	ldr	r5, [r4, #20]
        if(fifo_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8004e10:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	d200      	bcs.n	8004e1a <_ux_dcd_stm32_transfer_request+0x7e>
            fifo_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8004e18:	461d      	mov	r5, r3
        if (fifo_length == 0)
 8004e1a:	b31d      	cbz	r5, 8004e64 <_ux_dcd_stm32_transfer_request+0xc8>
            endpoint_size |= ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8004e1c:	195a      	adds	r2, r3, r5
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e24:	ea45 42c2 	orr.w	r2, r5, r2, lsl #19
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size); 
 8004e28:	4641      	mov	r1, r8
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f7fe fab5 	bl	800339a <_ux_dcd_stm32_register_write>
          _ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8004e30:	f04b 4204 	orr.w	r2, fp, #2214592512	; 0x84000000
 8004e34:	4649      	mov	r1, r9
 8004e36:	4638      	mov	r0, r7
 8004e38:	f7fe faaf 	bl	800339a <_ux_dcd_stm32_register_write>
        ed -> ux_dcd_stm32_ed_payload_length =  fifo_length;
 8004e3c:	60f5      	str	r5, [r6, #12]
        fifo_buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8004e3e:	68e2      	ldr	r2, [r4, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer += fifo_length;
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	442b      	add	r3, r5
 8004e44:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_in_transfer_length -= fifo_length;
 8004e46:	69e3      	ldr	r3, [r4, #28]
 8004e48:	1b5b      	subs	r3, r3, r5
 8004e4a:	61e3      	str	r3, [r4, #28]
        if (transfer_request -> ux_slave_transfer_request_in_transfer_length == 0)
 8004e4c:	b96b      	cbnz	r3, 8004e6a <_ux_dcd_stm32_transfer_request+0xce>
            _ux_dcd_stm32_fifo_write(dcd_stm32, ed -> ux_dcd_stm32_ed_index, fifo_buffer, fifo_length, UX_TRUE);
 8004e4e:	68b1      	ldr	r1, [r6, #8]
 8004e50:	2301      	movs	r3, #1
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	462b      	mov	r3, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff fe67 	bl	8004b2a <_ux_dcd_stm32_fifo_write>
        if (ed -> ux_dcd_stm32_ed_index != 0)
 8004e5c:	68b3      	ldr	r3, [r6, #8]
 8004e5e:	b963      	cbnz	r3, 8004e7a <_ux_dcd_stm32_transfer_request+0xde>
            return(UX_SUCCESS);
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8004e60:	2300      	movs	r3, #0
 8004e62:	e027      	b.n	8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
            endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;                        
 8004e64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e68:	e7de      	b.n	8004e28 <_ux_dcd_stm32_transfer_request+0x8c>
            _ux_dcd_stm32_fifo_write(dcd_stm32, ed -> ux_dcd_stm32_ed_index, fifo_buffer, fifo_length, UX_FALSE);
 8004e6a:	68b1      	ldr	r1, [r6, #8]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	462b      	mov	r3, r5
 8004e72:	4638      	mov	r0, r7
 8004e74:	f7ff fe59 	bl	8004b2a <_ux_dcd_stm32_fifo_write>
 8004e78:	e7f0      	b.n	8004e5c <_ux_dcd_stm32_transfer_request+0xc0>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore, UX_WAIT_FOREVER);
 8004e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e7e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004e82:	f000 fb7d 	bl	8005580 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 8004e86:	4603      	mov	r3, r0
 8004e88:	b9a0      	cbnz	r0, 8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8004e8a:	6a22      	ldr	r2, [r4, #32]
 8004e8c:	b192      	cbz	r2, 8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8004e8e:	4613      	mov	r3, r2
 8004e90:	e010      	b.n	8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
            endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;                        
 8004e92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size); 
 8004e96:	4629      	mov	r1, r5
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7fe fa7e 	bl	800339a <_ux_dcd_stm32_register_write>
        ed -> ux_dcd_stm32_ed_payload_length = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60f3      	str	r3, [r6, #12]
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8004ea2:	f049 4204 	orr.w	r2, r9, #2214592512	; 0x84000000
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7fe fa76 	bl	800339a <_ux_dcd_stm32_register_write>
        if (ed -> ux_dcd_stm32_ed_index != 0)
 8004eae:	68b3      	ldr	r3, [r6, #8]
 8004eb0:	b933      	cbnz	r3, 8004ec0 <_ux_dcd_stm32_transfer_request+0x124>
    return(UX_SUCCESS);
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	b003      	add	sp, #12
 8004eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                endpoint_size |=  UX_DCD_STM32_OTG_FS_DOEPTSIZ_STUPCNT_DEFAULT << UX_DCD_STM32_OTG_FS_DOEPTSIZ_STUPCNT_SHIFT;
 8004ebc:	4a07      	ldr	r2, [pc, #28]	; (8004edc <_ux_dcd_stm32_transfer_request+0x140>)
 8004ebe:	e7ea      	b.n	8004e96 <_ux_dcd_stm32_transfer_request+0xfa>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore, UX_WAIT_FOREVER);
 8004ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004ec8:	f000 fb5a 	bl	8005580 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8004ed2:	6a22      	ldr	r2, [r4, #32]
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	d0ed      	beq.n	8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8004ed8:	4613      	mov	r3, r2
 8004eda:	e7eb      	b.n	8004eb4 <_ux_dcd_stm32_transfer_request+0x118>
 8004edc:	60080018 	.word	0x60080018

08004ee0 <_ux_device_stack_alternate_setting_get>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8004ee0:	b510      	push	{r4, lr}
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <_ux_device_stack_alternate_setting_get+0x44>)
 8004ee4:	681c      	ldr	r4, [r3, #0]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8004ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d119      	bne.n	8004f20 <_ux_device_stack_alternate_setting_get+0x40>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8004eec:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130

        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 8004ef0:	b1a3      	cbz	r3, 8004f1c <_ux_device_stack_alternate_setting_get+0x3c>
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	4282      	cmp	r2, r0
 8004ef6:	d001      	beq.n	8004efc <_ux_device_stack_alternate_setting_get+0x1c>
                /* Return the function status.  */
                return(status);
            }

            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	e7f9      	b.n	8004ef0 <_ux_device_stack_alternate_setting_get+0x10>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8004efc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8004f00:	7e1b      	ldrb	r3, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8004f02:	7013      	strb	r3, [r2, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8004f04:	2101      	movs	r1, #1
 8004f06:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8004f10:	460a      	mov	r2, r1
 8004f12:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8004f16:	f7ff f90f 	bl	8004138 <_ux_device_stack_transfer_request>
                return(status);
 8004f1a:	e002      	b.n	8004f22 <_ux_device_stack_alternate_setting_get+0x42>
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8004f1c:	20ff      	movs	r0, #255	; 0xff
 8004f1e:	e000      	b.n	8004f22 <_ux_device_stack_alternate_setting_get+0x42>
 8004f20:	20ff      	movs	r0, #255	; 0xff
}
 8004f22:	bd10      	pop	{r4, pc}
 8004f24:	20000488 	.word	0x20000488

08004f28 <_ux_device_stack_alternate_setting_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	b09f      	sub	sp, #124	; 0x7c
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value,
			alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004f2e:	4b6c      	ldr	r3, [pc, #432]	; (80050e0 <_ux_device_stack_alternate_setting_set+0x1b8>)
 8004f30:	f8d3 8000 	ldr.w	r8, [r3]
 8004f34:	f8cd 8004 	str.w	r8, [sp, #4]

	/* We may have multiple configurations!  */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8004f38:	f8d8 4148 	ldr.w	r4, [r8, #328]	; 0x148
	ULONG device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8004f3c:	f8d8 614c 	ldr.w	r6, [r8, #332]	; 0x14c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Protocol error must be reported when it's unconfigured */
	if (device->ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8004f40:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	f040 80bf 	bne.w	80050c8 <_ux_device_stack_alternate_setting_set+0x1a0>
 8004f4a:	f108 0b40 	add.w	fp, r8, #64	; 0x40
		return UX_FUNCTION_NOT_SUPPORTED;

	/* Find the current interface. */
	UX_SLAVE_INTERFACE* interface = device->ux_slave_device_first_interface;
 8004f4e:	f8d8 5130 	ldr.w	r5, [r8, #304]	; 0x130

	/* Scan all interfaces if any. */
	while (interface != UX_NULL)
 8004f52:	b125      	cbz	r5, 8004f5e <_ux_device_stack_alternate_setting_set+0x36>
	{
		if (interface->ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8004f54:	696b      	ldr	r3, [r5, #20]
 8004f56:	4283      	cmp	r3, r0
 8004f58:	d001      	beq.n	8004f5e <_ux_device_stack_alternate_setting_set+0x36>
			break;
		else
			interface = interface->ux_slave_interface_next_interface;
 8004f5a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004f5c:	e7f9      	b.n	8004f52 <_ux_device_stack_alternate_setting_set+0x2a>
 8004f5e:	468a      	mov	sl, r1
 8004f60:	4681      	mov	r9, r0
	}

	/* We must have found the interface pointer for the interface value
	 requested by the caller. */
	if (interface == UX_NULL)
 8004f62:	b12d      	cbz	r5, 8004f70 <_ux_device_stack_alternate_setting_set+0x48>
		return (UX_INTERFACE_HANDLE_UNKNOWN);
	}

	/* If the host is requesting a change of alternate setting to the current one,
	 we do not need to do any work. */
	if (interface->ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8004f64:	69ab      	ldr	r3, [r5, #24]
 8004f66:	428b      	cmp	r3, r1
 8004f68:	f040 809a 	bne.w	80050a0 <_ux_device_stack_alternate_setting_set+0x178>
		return (UX_SUCCESS);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e0ac      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS,
 8004f70:	2252      	movs	r2, #82	; 0x52
 8004f72:	2107      	movs	r1, #7
 8004f74:	2002      	movs	r0, #2
 8004f76:	f7ff f939 	bl	80041ec <_ux_system_error_handler>
		return (UX_INTERFACE_HANDLE_UNKNOWN);
 8004f7a:	2352      	movs	r3, #82	; 0x52
 8004f7c:	e0a5      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
							 * the endpoints associated with the previous alternate setting. */
							endpoint = interface->ux_slave_interface_first_endpoint;
							while (endpoint != UX_NULL)
							{
								/* Abort any pending transfer. */
								_ux_device_stack_transfer_all_request_abort(endpoint,
 8004f7e:	2126      	movs	r1, #38	; 0x26
 8004f80:	4638      	mov	r0, r7
 8004f82:	f000 fadb 	bl	800553c <_ux_device_stack_transfer_all_request_abort>
										UX_TRANSFER_BUS_RESET);

								/* The device controller must be called to destroy the endpoint. */
								dcd->ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8004f86:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8004f8a:	463a      	mov	r2, r7
 8004f8c:	210f      	movs	r1, #15
 8004f8e:	9801      	ldr	r0, [sp, #4]
 8004f90:	4798      	blx	r3
										(VOID*)endpoint);

								/* Get the next endpoint. */
								next_endpoint = endpoint->ux_slave_endpoint_next_endpoint;
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24

								/* Free the endpoint. */
								endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8004f94:	2300      	movs	r3, #0
 8004f96:	603b      	str	r3, [r7, #0]

								/* Make sure the endpoint instance is now cleaned up. */
								endpoint->ux_slave_endpoint_state = 0;
 8004f98:	607b      	str	r3, [r7, #4]
								endpoint->ux_slave_endpoint_next_endpoint = UX_NULL;
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
								endpoint->ux_slave_endpoint_interface = UX_NULL;
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
								endpoint->ux_slave_endpoint_device = UX_NULL;
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

								/* Now we refresh the endpoint pointer. */
								endpoint = next_endpoint;
 8004fa0:	4617      	mov	r7, r2
							while (endpoint != UX_NULL)
 8004fa2:	2f00      	cmp	r7, #0
 8004fa4:	d1eb      	bne.n	8004f7e <_ux_device_stack_alternate_setting_set+0x56>
							}

							/* Now clear the interface endpoint entry. */
							interface->ux_slave_interface_first_endpoint = UX_NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	636b      	str	r3, [r5, #52]	; 0x34

							/* Point beyond the interface descriptor. */
							device_framework_length -= (ULONG)*device_framework;
 8004faa:	7827      	ldrb	r7, [r4, #0]
 8004fac:	1bf6      	subs	r6, r6, r7
							device_framework += (ULONG)*device_framework;
 8004fae:	4427      	add	r7, r4

							/* Parse the device framework and locate endpoint descriptor(s). */
							while (device_framework_length != 0)
 8004fb0:	e035      	b.n	800501e <_ux_device_stack_alternate_setting_set+0xf6>
								{
									case UX_ENDPOINT_DESCRIPTOR_ITEM:

										/* Find a free endpoint in the pool and hook it to the 
										 existing interface after it's created by DCD. */
										endpoint = device->ux_slave_device_endpoints_pool;
 8004fb2:	f8d8 413c 	ldr.w	r4, [r8, #316]	; 0x13c
										endpoints_pool_number =
 8004fb6:	f8d8 3140 	ldr.w	r3, [r8, #320]	; 0x140
												device->ux_slave_device_endpoints_pool_number;
										while (endpoints_pool_number != 0)
 8004fba:	b133      	cbz	r3, 8004fca <_ux_device_stack_alternate_setting_set+0xa2>
										{
											/* Check if this endpoint is free. */
											if (endpoint->ux_slave_endpoint_status == UX_UNUSED)
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	b112      	cbz	r2, 8004fc6 <_ux_device_stack_alternate_setting_set+0x9e>
												endpoint->ux_slave_endpoint_status = UX_USED;
												break;
											}

											/* Try the next endpoint. */
											endpoint++;
 8004fc0:	3490      	adds	r4, #144	; 0x90

											/* Decrement the number of endpoints to scan from the pool. */
											endpoints_pool_number--;
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	e7f9      	b.n	8004fba <_ux_device_stack_alternate_setting_set+0x92>
												endpoint->ux_slave_endpoint_status = UX_USED;
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	6022      	str	r2, [r4, #0]
										}

										/* Did we find a free endpoint ?  */
										if (endpoints_pool_number == 0)
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8081 	beq.w	80050d2 <_ux_device_stack_alternate_setting_set+0x1aa>
											return (UX_MEMORY_INSUFFICIENT);

										/* Parse the descriptor in something more readable. */
										_ux_utility_descriptor_parse(device_framework,
 8004fd0:	f104 030c 	add.w	r3, r4, #12
 8004fd4:	2206      	movs	r2, #6
 8004fd6:	4943      	ldr	r1, [pc, #268]	; (80050e4 <_ux_device_stack_alternate_setting_set+0x1bc>)
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f7ff f985 	bl	80042e8 <_ux_utility_descriptor_parse>
										/* Now we create a transfer request to accept transfer on this endpoint. */
										transfer_request =
												&endpoint->ux_slave_endpoint_transfer_request;

										/* We store the endpoint in the transfer request as well. */
										transfer_request->ux_slave_transfer_request_endpoint =
 8004fde:	63a4      	str	r4, [r4, #56]	; 0x38
												endpoint;

										/* By default the timeout is infinite on request. */
										transfer_request->ux_slave_transfer_request_timeout =
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	67e3      	str	r3, [r4, #124]	; 0x7c
												UX_WAIT_FOREVER;

										/* Attach the interface to the endpoint. */
										endpoint->ux_slave_endpoint_interface = interface;
 8004fe6:	62a5      	str	r5, [r4, #40]	; 0x28

										/* Attach the device to the endpoint. */
										endpoint->ux_slave_endpoint_device = device;
 8004fe8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c

										/* Create the endpoint at the DCD level. */
										status = dcd->ux_slave_dcd_function(dcd,
 8004fec:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	210e      	movs	r1, #14
 8004ff4:	9801      	ldr	r0, [sp, #4]
 8004ff6:	4798      	blx	r3
												UX_DCD_CREATE_ENDPOINT, (VOID*)endpoint);

										/* Do a sanity check on endpoint creation. */
										if (status != UX_SUCCESS)
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	b918      	cbnz	r0, 8005004 <_ux_device_stack_alternate_setting_set+0xdc>
											endpoint->ux_slave_endpoint_status = UX_UNUSED;
											return (status);
										}

										/* Attach this endpoint to the end of the endpoint chain. */
										if (interface->ux_slave_interface_first_endpoint == UX_NULL)
 8004ffc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004ffe:	b92a      	cbnz	r2, 800500c <_ux_device_stack_alternate_setting_set+0xe4>
										{
											interface->ux_slave_interface_first_endpoint = endpoint;
 8005000:	636c      	str	r4, [r5, #52]	; 0x34
 8005002:	e009      	b.n	8005018 <_ux_device_stack_alternate_setting_set+0xf0>
											endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8005004:	2200      	movs	r2, #0
 8005006:	6022      	str	r2, [r4, #0]
											return (status);
 8005008:	e05f      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
											/* Multiple endpoints exist, so find the end of the chain. */
											endpoint_link =
													interface->ux_slave_interface_first_endpoint;
											while (endpoint_link->ux_slave_endpoint_next_endpoint
													!= UX_NULL)
												endpoint_link =
 800500a:	461a      	mov	r2, r3
											while (endpoint_link->ux_slave_endpoint_next_endpoint
 800500c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1fb      	bne.n	800500a <_ux_device_stack_alternate_setting_set+0xe2>
														endpoint_link->ux_slave_endpoint_next_endpoint;
											endpoint_link->ux_slave_endpoint_next_endpoint =
 8005012:	6254      	str	r4, [r2, #36]	; 0x24
 8005014:	e000      	b.n	8005018 <_ux_device_stack_alternate_setting_set+0xf0>
									case UX_INTERFACE_DESCRIPTOR_ITEM:
										/* We have found a new configuration or interface descriptor,
										 * this is the end of the current interface. The search for
										 * the endpoints must be terminated as if it was the end of
										 * the entire descriptor. */
										device_framework_length = descriptor_length;
 8005016:	464e      	mov	r6, r9
										/* We have found another descriptor embedded in the interface. Ignore it. */
										break;
								}

								/* Adjust what is left of the device framework. */
								device_framework_length -= descriptor_length;
 8005018:	eba6 0609 	sub.w	r6, r6, r9

								/* Point to the next descriptor. */
								device_framework += descriptor_length;
 800501c:	444f      	add	r7, r9
							while (device_framework_length != 0)
 800501e:	b14e      	cbz	r6, 8005034 <_ux_device_stack_alternate_setting_set+0x10c>
								descriptor_length = (ULONG)*device_framework;
 8005020:	f897 9000 	ldrb.w	r9, [r7]
								descriptor_type = *(device_framework + 1);
 8005024:	787b      	ldrb	r3, [r7, #1]
								switch (descriptor_type)
 8005026:	2b04      	cmp	r3, #4
 8005028:	d0f5      	beq.n	8005016 <_ux_device_stack_alternate_setting_set+0xee>
 800502a:	2b05      	cmp	r3, #5
 800502c:	d0c1      	beq.n	8004fb2 <_ux_device_stack_alternate_setting_set+0x8a>
 800502e:	2b02      	cmp	r3, #2
 8005030:	d1f2      	bne.n	8005018 <_ux_device_stack_alternate_setting_set+0xf0>
 8005032:	e7f0      	b.n	8005016 <_ux_device_stack_alternate_setting_set+0xee>
							}

							/* The interface descriptor in the current class must be changed to the new alternate setting. */
							_ux_utility_memory_copy(&interface->ux_slave_interface_descriptor,
 8005034:	2224      	movs	r2, #36	; 0x24
 8005036:	a90d      	add	r1, sp, #52	; 0x34
 8005038:	f105 000c 	add.w	r0, r5, #12
 800503c:	f7ff fa29 	bl	8004492 <_ux_utility_memory_copy>
									&interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR));

							/* Get the class for the interface. */
							class =
									_ux_system_slave->ux_system_slave_interface_class_array[interface->ux_slave_interface_descriptor.bInterfaceNumber];
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <_ux_device_stack_alternate_setting_set+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	696a      	ldr	r2, [r5, #20]
							class =
 8005046:	3260      	adds	r2, #96	; 0x60
 8005048:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800504c:	685b      	ldr	r3, [r3, #4]

							/* Check if class driver is available. */
							if (class == UX_NULL || class->ux_slave_class_status == UX_UNUSED)
 800504e:	2b00      	cmp	r3, #0
 8005050:	d041      	beq.n	80050d6 <_ux_device_stack_alternate_setting_set+0x1ae>
 8005052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005054:	2a00      	cmp	r2, #0
 8005056:	d040      	beq.n	80050da <_ux_device_stack_alternate_setting_set+0x1b2>
							{
								return (UX_NO_CLASS_MATCH);
							}

							/* The interface attached to this configuration must be changed at the class level. */
							class_command.ux_slave_class_command_request =
 8005058:	2206      	movs	r2, #6
 800505a:	9202      	str	r2, [sp, #8]
									UX_SLAVE_CLASS_COMMAND_CHANGE;
							class_command.ux_slave_class_command_interface = (VOID*)interface;
 800505c:	9504      	str	r5, [sp, #16]

							/* And store it. */
							class_command.ux_slave_class_command_class_ptr = class;
 800505e:	930a      	str	r3, [sp, #40]	; 0x28

							/* We can now memorize the interface pointer associated with this class. */
							class->ux_slave_class_interface = interface;
 8005060:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128

							/* We have found a potential candidate. Call this registered class entry
							 * function to change the alternate setting. */
							status = class->ux_slave_class_entry_function(&class_command);
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	a802      	add	r0, sp, #8
 8005068:	4798      	blx	r3
 800506a:	4603      	mov	r3, r0

							/* We are done here. */
							return (status);
 800506c:	e02d      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
						}
					}

					/* Adjust what is left of the device framework. */
					device_framework_length -= descriptor_length;
 800506e:	1bf6      	subs	r6, r6, r7

					/* Point to the next descriptor. */
					device_framework += descriptor_length;
 8005070:	443c      	add	r4, r7
				while (device_framework_length != 0)
 8005072:	b18e      	cbz	r6, 8005098 <_ux_device_stack_alternate_setting_set+0x170>
					descriptor_length = (ULONG)*device_framework;
 8005074:	7827      	ldrb	r7, [r4, #0]
					descriptor_type = *(device_framework + 1);
 8005076:	7863      	ldrb	r3, [r4, #1]
					if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8005078:	2b04      	cmp	r3, #4
 800507a:	d1f8      	bne.n	800506e <_ux_device_stack_alternate_setting_set+0x146>
						_ux_utility_descriptor_parse(device_framework,
 800507c:	ab0d      	add	r3, sp, #52	; 0x34
 800507e:	2209      	movs	r2, #9
 8005080:	4919      	ldr	r1, [pc, #100]	; (80050e8 <_ux_device_stack_alternate_setting_set+0x1c0>)
 8005082:	4620      	mov	r0, r4
 8005084:	f7ff f930 	bl	80042e8 <_ux_utility_descriptor_parse>
						if (interface_descriptor.bInterfaceNumber == interface_value &&
 8005088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800508a:	454b      	cmp	r3, r9
 800508c:	d1ef      	bne.n	800506e <_ux_device_stack_alternate_setting_set+0x146>
								interface_descriptor.bAlternateSetting == alternate_setting_value)
 800508e:	9b10      	ldr	r3, [sp, #64]	; 0x40
						if (interface_descriptor.bInterfaceNumber == interface_value &&
 8005090:	4553      	cmp	r3, sl
 8005092:	d1ec      	bne.n	800506e <_ux_device_stack_alternate_setting_set+0x146>
							endpoint = interface->ux_slave_interface_first_endpoint;
 8005094:	6b6f      	ldr	r7, [r5, #52]	; 0x34
							while (endpoint != UX_NULL)
 8005096:	e784      	b.n	8004fa2 <_ux_device_stack_alternate_setting_set+0x7a>
		/* Point to the next descriptor. */
		device_framework += descriptor_length;
	}

	/* Return error completion. */
	return (UX_ERROR);
 8005098:	23ff      	movs	r3, #255	; 0xff
 800509a:	e016      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
		device_framework_length -= descriptor_length;
 800509c:	1bf6      	subs	r6, r6, r7
		device_framework += descriptor_length;
 800509e:	443c      	add	r4, r7
	while (device_framework_length != 0)
 80050a0:	b186      	cbz	r6, 80050c4 <_ux_device_stack_alternate_setting_set+0x19c>
		descriptor_length = (ULONG)*device_framework;
 80050a2:	7827      	ldrb	r7, [r4, #0]
		descriptor_type = *(device_framework + 1);
 80050a4:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d1f8      	bne.n	800509c <_ux_device_stack_alternate_setting_set+0x174>
			_ux_utility_descriptor_parse(device_framework,
 80050aa:	ab16      	add	r3, sp, #88	; 0x58
 80050ac:	2208      	movs	r2, #8
 80050ae:	490f      	ldr	r1, [pc, #60]	; (80050ec <_ux_device_stack_alternate_setting_set+0x1c4>)
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff f919 	bl	80042e8 <_ux_utility_descriptor_parse>
					== device->ux_slave_device_configuration_selected)
 80050b6:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
			if (configuration_descriptor.bConfigurationValue
 80050ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1ed      	bne.n	800509c <_ux_device_stack_alternate_setting_set+0x174>
				device_framework_length = configuration_descriptor.wTotalLength;
 80050c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
				while (device_framework_length != 0)
 80050c2:	e7d6      	b.n	8005072 <_ux_device_stack_alternate_setting_set+0x14a>
	return (UX_ERROR);
 80050c4:	23ff      	movs	r3, #255	; 0xff
 80050c6:	e000      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
		return UX_FUNCTION_NOT_SUPPORTED;
 80050c8:	2354      	movs	r3, #84	; 0x54
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	b01f      	add	sp, #124	; 0x7c
 80050ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
											return (UX_MEMORY_INSUFFICIENT);
 80050d2:	2312      	movs	r3, #18
 80050d4:	e7f9      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
								return (UX_NO_CLASS_MATCH);
 80050d6:	2357      	movs	r3, #87	; 0x57
 80050d8:	e7f7      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
 80050da:	2357      	movs	r3, #87	; 0x57
 80050dc:	e7f5      	b.n	80050ca <_ux_device_stack_alternate_setting_set+0x1a2>
 80050de:	bf00      	nop
 80050e0:	20000488 	.word	0x20000488
 80050e4:	20000144 	.word	0x20000144
 80050e8:	2000014c 	.word	0x2000014c
 80050ec:	2000012c 	.word	0x2000012c

080050f0 <_ux_device_stack_clear_feature>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 80050f0:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value,
			request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <_ux_device_stack_clear_feature+0x68>)
 80050f4:	681d      	ldr	r5, [r3, #0]
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;

	UX_SLAVE_INTERFACE* interface;

	/* The request can be for either the device or the endpoint. */
	switch (request_type & UX_REQUEST_TARGET)
 80050f6:	f010 0003 	ands.w	r0, r0, #3
 80050fa:	d00b      	beq.n	8005114 <_ux_device_stack_clear_feature+0x24>
 80050fc:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8005100:	4611      	mov	r1, r2
 8005102:	2802      	cmp	r0, #2
 8005104:	d011      	beq.n	800512a <_ux_device_stack_clear_feature+0x3a>
			/* fall through */

			/* We get here when the endpoint is wrong. Should not happen though. */
		default:
			/* We stall the command. */
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8005106:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005108:	4632      	mov	r2, r6
 800510a:	2114      	movs	r1, #20
 800510c:	4628      	mov	r0, r5
 800510e:	4798      	blx	r3

			/* No more work to do here.  The command failed but the upper layer does not depend on it. */
			return (UX_SUCCESS);
 8005110:	2000      	movs	r0, #0
	}

	/* Return the function status. */
	return (UX_SUCCESS);
}
 8005112:	bd70      	pop	{r4, r5, r6, pc}
			if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8005114:	2901      	cmp	r1, #1
 8005116:	d001      	beq.n	800511c <_ux_device_stack_clear_feature+0x2c>
	return (UX_SUCCESS);
 8005118:	2000      	movs	r0, #0
 800511a:	e7fa      	b.n	8005112 <_ux_device_stack_clear_feature+0x22>
				if (_ux_system_slave->ux_system_slave_remote_wakeup_capability)
 800511c:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 8005120:	b1c3      	cbz	r3, 8005154 <_ux_device_stack_clear_feature+0x64>
					_ux_system_slave->ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8005122:	2000      	movs	r0, #0
 8005124:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
 8005128:	e7f3      	b.n	8005112 <_ux_device_stack_clear_feature+0x22>
			interface = device->ux_slave_device_first_interface;
 800512a:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
			while (interface != UX_NULL)
 800512e:	2800      	cmp	r0, #0
 8005130:	d0e9      	beq.n	8005106 <_ux_device_stack_clear_feature+0x16>
				UX_SLAVE_ENDPOINT* endpoint_target = interface->ux_slave_interface_first_endpoint;
 8005132:	6b44      	ldr	r4, [r0, #52]	; 0x34
				while (endpoint_target != UX_NULL)
 8005134:	b164      	cbz	r4, 8005150 <_ux_device_stack_clear_feature+0x60>
					if (endpoint_target->ux_slave_endpoint_descriptor.bEndpointAddress
 8005136:	6963      	ldr	r3, [r4, #20]
 8005138:	428b      	cmp	r3, r1
 800513a:	d001      	beq.n	8005140 <_ux_device_stack_clear_feature+0x50>
					endpoint_target = endpoint_target->ux_slave_endpoint_next_endpoint;
 800513c:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800513e:	e7f9      	b.n	8005134 <_ux_device_stack_clear_feature+0x44>
						dcd->ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8005140:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005142:	4622      	mov	r2, r4
 8005144:	2110      	movs	r1, #16
 8005146:	4628      	mov	r0, r5
 8005148:	4798      	blx	r3
						endpoint_target->ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800514a:	2000      	movs	r0, #0
 800514c:	6060      	str	r0, [r4, #4]
						return (UX_SUCCESS);
 800514e:	e7e0      	b.n	8005112 <_ux_device_stack_clear_feature+0x22>
				interface = interface->ux_slave_interface_next_interface;
 8005150:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005152:	e7ec      	b.n	800512e <_ux_device_stack_clear_feature+0x3e>
					return (UX_FUNCTION_NOT_SUPPORTED);
 8005154:	2054      	movs	r0, #84	; 0x54
 8005156:	e7dc      	b.n	8005112 <_ux_device_stack_clear_feature+0x22>
 8005158:	20000488 	.word	0x20000488

0800515c <_ux_device_stack_configuration_get>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_configuration_get(VOID)
{
 800515c:	b508      	push	{r3, lr}
	UX_SLAVE_DEVICE* device;
	UX_SLAVE_ENDPOINT* endpoint;
	UINT status;

	/* Get the pointer to the device.  */
	device = &_ux_system_slave->ux_system_slave_device;
 800515e:	4b08      	ldr	r3, [pc, #32]	; (8005180 <_ux_device_stack_configuration_get+0x24>)
 8005160:	6818      	ldr	r0, [r3, #0]

	/* Get the pointer to the transfer request associated with the endpoint.  */
	transfer_request = &endpoint->ux_slave_endpoint_transfer_request;

	/* Set the value of the configuration in the buffer.  */
	*transfer_request->ux_slave_transfer_request_data_pointer =
 8005162:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
			(UCHAR)device->ux_slave_device_configuration_selected;
 8005166:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
	*transfer_request->ux_slave_transfer_request_data_pointer =
 800516a:	701a      	strb	r2, [r3, #0]
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET,
			device->ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS,
			0, 0)

	/* Set the phase of the transfer to data out.  */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 800516c:	2303      	movs	r3, #3
 800516e:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	/* Send the descriptor with the appropriate length to the host.  */
	status = _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8005172:	2201      	movs	r2, #1
 8005174:	4611      	mov	r1, r2
 8005176:	30ac      	adds	r0, #172	; 0xac
 8005178:	f7fe ffde 	bl	8004138 <_ux_device_stack_transfer_request>

	/* Return the function status.  */
	return (status);
}
 800517c:	bd08      	pop	{r3, pc}
 800517e:	bf00      	nop
 8005180:	20000488 	.word	0x20000488

08005184 <_ux_device_stack_configuration_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	b09f      	sub	sp, #124	; 0x7c
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 800518a:	4b7d      	ldr	r3, [pc, #500]	; (8005380 <_ux_device_stack_configuration_set+0x1fc>)
 800518c:	681d      	ldr	r5, [r3, #0]

	/* Reset the IAD flag. */
	ULONG iad_flag = UX_FALSE;

	/* If the configuration value is already selected, keep it. */
	if (device->ux_slave_device_configuration_selected == configuration_value)
 800518e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8005192:	4283      	cmp	r3, r0
 8005194:	f000 80ed 	beq.w	8005372 <_ux_device_stack_configuration_set+0x1ee>
 8005198:	4606      	mov	r6, r0
		return (UX_SUCCESS);

	/* We may have multiple configurations !, the index will tell us what
	 configuration descriptor we need to return. */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 800519a:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
	ULONG device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 800519e:	f8d5 714c 	ldr.w	r7, [r5, #332]	; 0x14c

	/*--------------------------------------------------------------------------------------------*/

	ULONG descriptor_length;
	UCHAR descriptor_type;
	UX_CONFIGURATION_DESCRIPTOR configuration_descriptor = { 0 };
 80051a2:	2220      	movs	r2, #32
 80051a4:	2100      	movs	r1, #0
 80051a6:	a816      	add	r0, sp, #88	; 0x58
 80051a8:	f002 fa82 	bl	80076b0 <memset>

	/* Parse the device framework and locate a configuration descriptor. */
	while (device_framework_length != 0)
 80051ac:	e002      	b.n	80051b4 <_ux_device_stack_configuration_set+0x30>
				/* The configuration is found. */
				break;
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 80051ae:	eba7 0708 	sub.w	r7, r7, r8
		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 80051b2:	4444      	add	r4, r8
	while (device_framework_length != 0)
 80051b4:	b16f      	cbz	r7, 80051d2 <_ux_device_stack_configuration_set+0x4e>
		descriptor_length = (ULONG)*device_framework;
 80051b6:	f894 8000 	ldrb.w	r8, [r4]
		descriptor_type = *(device_framework + 1);
 80051ba:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d1f6      	bne.n	80051ae <_ux_device_stack_configuration_set+0x2a>
			_ux_utility_descriptor_parse(device_framework,
 80051c0:	ab16      	add	r3, sp, #88	; 0x58
 80051c2:	2208      	movs	r2, #8
 80051c4:	496f      	ldr	r1, [pc, #444]	; (8005384 <_ux_device_stack_configuration_set+0x200>)
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff f88e 	bl	80042e8 <_ux_utility_descriptor_parse>
			if (configuration_descriptor.bConfigurationValue == configuration_value)
 80051cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80051ce:	42b3      	cmp	r3, r6
 80051d0:	d1ed      	bne.n	80051ae <_ux_device_stack_configuration_set+0x2a>
	}

	/* Configuration not found. */
	if (device_framework_length == 0 && configuration_value != 0)
 80051d2:	1c33      	adds	r3, r6, #0
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2f00      	cmp	r7, #0
 80051da:	bf0c      	ite	eq
 80051dc:	461f      	moveq	r7, r3
 80051de:	2700      	movne	r7, #0
 80051e0:	2f00      	cmp	r7, #0
 80051e2:	f040 80ca 	bne.w	800537a <_ux_device_stack_configuration_set+0x1f6>
	UX_SLAVE_INTERFACE* next_interface;
	UX_SLAVE_CLASS* class;
	UX_SLAVE_CLASS_COMMAND class_command;

	/* We unmount the configuration if there is previous configuration selected. */
	if (device->ux_slave_device_configuration_selected)
 80051e6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80051ea:	b1ab      	cbz	r3, 8005218 <_ux_device_stack_configuration_set+0x94>
	{
		/* Get the pointer to the first interface. */
		interface = device->ux_slave_device_first_interface;
 80051ec:	f8d5 7130 	ldr.w	r7, [r5, #304]	; 0x130
 80051f0:	46a0      	mov	r8, r4

		/* Deactivate all the interfaces if any. */
		while (interface != UX_NULL)
 80051f2:	e004      	b.n	80051fe <_ux_device_stack_configuration_set+0x7a>
			if (class != UX_NULL)
				/* Call the class with the DEACTIVATE signal. */
				class->ux_slave_class_entry_function(&class_command);

			/* Get the next interface. */
			next_interface = interface->ux_slave_interface_next_interface;
 80051f4:	6b3c      	ldr	r4, [r7, #48]	; 0x30

			/* Remove the interface and all endpoints associated with it. */
			_ux_device_stack_interface_delete(interface);
 80051f6:	4638      	mov	r0, r7
 80051f8:	f7fe ff46 	bl	8004088 <_ux_device_stack_interface_delete>

			/* Now we refresh the interface pointer. */
			interface = next_interface;
 80051fc:	4627      	mov	r7, r4
		while (interface != UX_NULL)
 80051fe:	b157      	cbz	r7, 8005216 <_ux_device_stack_configuration_set+0x92>
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8005200:	2303      	movs	r3, #3
 8005202:	930b      	str	r3, [sp, #44]	; 0x2c
			class_command.ux_slave_class_command_interface = (VOID*)interface;
 8005204:	970d      	str	r7, [sp, #52]	; 0x34
			class = interface->ux_slave_interface_class;
 8005206:	687b      	ldr	r3, [r7, #4]
			class_command.ux_slave_class_command_class_ptr = class;
 8005208:	9313      	str	r3, [sp, #76]	; 0x4c
			if (class != UX_NULL)
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f2      	beq.n	80051f4 <_ux_device_stack_configuration_set+0x70>
				class->ux_slave_class_entry_function(&class_command);
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	a80b      	add	r0, sp, #44	; 0x2c
 8005212:	4798      	blx	r3
 8005214:	e7ee      	b.n	80051f4 <_ux_device_stack_configuration_set+0x70>
 8005216:	4644      	mov	r4, r8
		}
	}

	/* No configuration is selected. */
	device->ux_slave_device_configuration_selected = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

	/* Mark the device as attached now. */
	device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 800521e:	2201      	movs	r2, #1
 8005220:	642a      	str	r2, [r5, #64]	; 0x40

	/* The DCD needs to update the device state too. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID*) UX_DEVICE_ATTACHED);
 8005222:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005224:	2113      	movs	r1, #19
 8005226:	4628      	mov	r0, r5
 8005228:	4798      	blx	r3

	/* If the host tries to unconfigure, we are done. */
	if (configuration_value == 0)
 800522a:	b90e      	cbnz	r6, 8005230 <_ux_device_stack_configuration_set+0xac>
		return (UX_SUCCESS);
 800522c:	2000      	movs	r0, #0
 800522e:	e0a1      	b.n	8005374 <_ux_device_stack_configuration_set+0x1f0>

	/* Memorize the configuration selected. */
	device->ux_slave_device_configuration_selected = configuration_value;
 8005230:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c

	/*--------------------------------------------------------------------------------------------*/

	/* We have found the configuration value requested by the host.
	 * Create the configuration descriptor and attach it to the device. */
	_ux_utility_descriptor_parse(device_framework,
 8005234:	f505 7388 	add.w	r3, r5, #272	; 0x110
 8005238:	2208      	movs	r2, #8
 800523a:	4952      	ldr	r1, [pc, #328]	; (8005384 <_ux_device_stack_configuration_set+0x200>)
 800523c:	4620      	mov	r0, r4
 800523e:	f7ff f853 	bl	80042e8 <_ux_utility_descriptor_parse>
			UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
			(UCHAR*)&device->ux_slave_device_configuration_descriptor);

	/* Configuration character D6 is for Self-powered */
	_ux_system_slave->ux_system_slave_power_state =
			(configuration_descriptor.bmAttributes & 0x40) ?
 8005242:	9b1c      	ldr	r3, [sp, #112]	; 0x70
					UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8005244:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005248:	d00f      	beq.n	800526a <_ux_device_stack_configuration_set+0xe6>
 800524a:	2102      	movs	r1, #2
	_ux_system_slave->ux_system_slave_power_state =
 800524c:	4a4c      	ldr	r2, [pc, #304]	; (8005380 <_ux_device_stack_configuration_set+0x1fc>)
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8

	/* Configuration character D5 is for Remote Wakeup */
	_ux_system_slave->ux_system_slave_remote_wakeup_capability =
			(configuration_descriptor.bmAttributes & 0x20) ?
					UX_TRUE : UX_FALSE;
 8005254:	f3c3 1340 	ubfx	r3, r3, #5, #1
	_ux_system_slave->ux_system_slave_remote_wakeup_capability =
 8005258:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc

	/* Search only in current configuration */
	device_framework_length = configuration_descriptor.wTotalLength;
 800525c:	9f18      	ldr	r7, [sp, #96]	; 0x60

	UX_INTERFACE_DESCRIPTOR interface_descriptor;
	ULONG iad_first_interface = 0;
	ULONG iad_number_interfaces = 0;
	ULONG class_index;
	UX_SLAVE_CLASS* current_class = UX_NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	9301      	str	r3, [sp, #4]
	ULONG iad_number_interfaces = 0;
 8005262:	4699      	mov	r9, r3
	ULONG iad_first_interface = 0;
 8005264:	469b      	mov	fp, r3
 8005266:	46ca      	mov	sl, r9

	/*  We need to scan all the interface descriptors following this configuration descriptor and
	 * enable all endpoints associated with the default alternate setting of each interface. */
	while (device_framework_length != 0)
 8005268:	e006      	b.n	8005278 <_ux_device_stack_configuration_set+0xf4>
					UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800526a:	2101      	movs	r1, #1
 800526c:	e7ee      	b.n	800524c <_ux_device_stack_configuration_set+0xc8>
			/* Get the number of interfaces we have in the IAD. */
			iad_number_interfaces = (ULONG)*(device_framework + 3);
		}

		/* Check if this is an interface descriptor. */
		if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800526e:	2b04      	cmp	r3, #4
 8005270:	d010      	beq.n	8005294 <_ux_device_stack_configuration_set+0x110>
				_ux_device_stack_interface_set(device_framework, device_framework_length, 0);
			}
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 8005272:	eba7 0708 	sub.w	r7, r7, r8

		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 8005276:	4444      	add	r4, r8
	while (device_framework_length != 0)
 8005278:	2f00      	cmp	r7, #0
 800527a:	d072      	beq.n	8005362 <_ux_device_stack_configuration_set+0x1de>
		descriptor_length = (ULONG)*device_framework;
 800527c:	f894 8000 	ldrb.w	r8, [r4]
		descriptor_type = *(device_framework + 1);
 8005280:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8005282:	2b0b      	cmp	r3, #11
 8005284:	d1f3      	bne.n	800526e <_ux_device_stack_configuration_set+0xea>
			iad_first_interface = (ULONG)*(device_framework + 2);
 8005286:	f894 a002 	ldrb.w	sl, [r4, #2]
			iad_number_interfaces = (ULONG)*(device_framework + 3);
 800528a:	f894 9003 	ldrb.w	r9, [r4, #3]
			iad_flag = UX_TRUE;
 800528e:	f04f 0b01 	mov.w	fp, #1
 8005292:	e7ec      	b.n	800526e <_ux_device_stack_configuration_set+0xea>
			_ux_utility_descriptor_parse(device_framework,
 8005294:	ab02      	add	r3, sp, #8
 8005296:	2209      	movs	r2, #9
 8005298:	493b      	ldr	r1, [pc, #236]	; (8005388 <_ux_device_stack_configuration_set+0x204>)
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff f824 	bl	80042e8 <_ux_utility_descriptor_parse>
			if (interface_descriptor.bAlternateSetting == 0)
 80052a0:	9b05      	ldr	r3, [sp, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <_ux_device_stack_configuration_set+0xee>
				if (iad_flag == UX_TRUE)
 80052a6:	f1bb 0f01 	cmp.w	fp, #1
 80052aa:	d132      	bne.n	8005312 <_ux_device_stack_configuration_set+0x18e>
					if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 80052ac:	9904      	ldr	r1, [sp, #16]
 80052ae:	4551      	cmp	r1, sl
 80052b0:	d00d      	beq.n	80052ce <_ux_device_stack_configuration_set+0x14a>
						_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 80052b2:	4b33      	ldr	r3, [pc, #204]	; (8005380 <_ux_device_stack_configuration_set+0x1fc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 80052ba:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80052be:	9b01      	ldr	r3, [sp, #4]
 80052c0:	f8cc 3004 	str.w	r3, [ip, #4]
					if (iad_number_interfaces == 0)
 80052c4:	f1b9 0901 	subs.w	r9, r9, #1
 80052c8:	d145      	bne.n	8005356 <_ux_device_stack_configuration_set+0x1d2>
						iad_flag = UX_FALSE;
 80052ca:	46cb      	mov	fp, r9
 80052cc:	e043      	b.n	8005356 <_ux_device_stack_configuration_set+0x1d2>
						class = _ux_system_slave->ux_system_slave_class_array;
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <_ux_device_stack_configuration_set+0x1fc>)
 80052d0:	6810      	ldr	r0, [r2, #0]
 80052d2:	f8d0 2180 	ldr.w	r2, [r0, #384]	; 0x180
 80052d6:	46ac      	mov	ip, r5
						for (class_index = 0;
 80052d8:	e002      	b.n	80052e0 <_ux_device_stack_configuration_set+0x15c>
							class++;
 80052da:	f502 7298 	add.w	r2, r2, #304	; 0x130
								class_index++)
 80052de:	3301      	adds	r3, #1
								class_index < _ux_system_slave->ux_system_slave_max_class;
 80052e0:	f8d0 5178 	ldr.w	r5, [r0, #376]	; 0x178
						for (class_index = 0;
 80052e4:	429d      	cmp	r5, r3
 80052e6:	d912      	bls.n	800530e <_ux_device_stack_configuration_set+0x18a>
							if (class->ux_slave_class_status == UX_USED)
 80052e8:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80052ea:	2d01      	cmp	r5, #1
 80052ec:	d1f5      	bne.n	80052da <_ux_device_stack_configuration_set+0x156>
										== class->ux_slave_class_interface_number) &&
 80052ee:	f8d2 5120 	ldr.w	r5, [r2, #288]	; 0x120
								if ((interface_descriptor.bInterfaceNumber
 80052f2:	42a9      	cmp	r1, r5
 80052f4:	d1f1      	bne.n	80052da <_ux_device_stack_configuration_set+0x156>
												== class->ux_slave_class_configuration_number))
 80052f6:	f8d2 5124 	ldr.w	r5, [r2, #292]	; 0x124
										== class->ux_slave_class_interface_number) &&
 80052fa:	42b5      	cmp	r5, r6
 80052fc:	d1ed      	bne.n	80052da <_ux_device_stack_configuration_set+0x156>
 80052fe:	4665      	mov	r5, ip
									_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 8005300:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 8005304:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005308:	6042      	str	r2, [r0, #4]
									current_class = class;
 800530a:	9201      	str	r2, [sp, #4]
									break;
 800530c:	e7da      	b.n	80052c4 <_ux_device_stack_configuration_set+0x140>
 800530e:	4665      	mov	r5, ip
 8005310:	e7d8      	b.n	80052c4 <_ux_device_stack_configuration_set+0x140>
					class = _ux_system_slave->ux_system_slave_class_array;
 8005312:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <_ux_device_stack_configuration_set+0x1fc>)
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
					for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class;
 800531a:	465a      	mov	r2, fp
 800531c:	46ac      	mov	ip, r5
 800531e:	e002      	b.n	8005326 <_ux_device_stack_configuration_set+0x1a2>
						class++;
 8005320:	f503 7398 	add.w	r3, r3, #304	; 0x130
							class_index++)
 8005324:	3201      	adds	r2, #1
					for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class;
 8005326:	f8d0 1178 	ldr.w	r1, [r0, #376]	; 0x178
 800532a:	4291      	cmp	r1, r2
 800532c:	d912      	bls.n	8005354 <_ux_device_stack_configuration_set+0x1d0>
						if (class->ux_slave_class_status == UX_USED)
 800532e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005330:	2901      	cmp	r1, #1
 8005332:	d1f5      	bne.n	8005320 <_ux_device_stack_configuration_set+0x19c>
							if ((interface_descriptor.bInterfaceNumber
 8005334:	9904      	ldr	r1, [sp, #16]
									== class->ux_slave_class_interface_number)
 8005336:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
							if ((interface_descriptor.bInterfaceNumber
 800533a:	42a9      	cmp	r1, r5
 800533c:	d1f0      	bne.n	8005320 <_ux_device_stack_configuration_set+0x19c>
											== class->ux_slave_class_configuration_number))
 800533e:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
									&&
 8005342:	42b5      	cmp	r5, r6
 8005344:	d1ec      	bne.n	8005320 <_ux_device_stack_configuration_set+0x19c>
 8005346:	4665      	mov	r5, ip
								_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 8005348:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 800534c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005350:	6043      	str	r3, [r0, #4]
								break;
 8005352:	e000      	b.n	8005356 <_ux_device_stack_configuration_set+0x1d2>
 8005354:	4665      	mov	r5, ip
				_ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8005356:	2200      	movs	r2, #0
 8005358:	4639      	mov	r1, r7
 800535a:	4620      	mov	r0, r4
 800535c:	f000 f816 	bl	800538c <_ux_device_stack_interface_set>
 8005360:	e787      	b.n	8005272 <_ux_device_stack_configuration_set+0xee>
	}

	/* Mark the device as configured now. */
	device->ux_slave_device_state = UX_DEVICE_CONFIGURED;
 8005362:	2203      	movs	r2, #3
 8005364:	642a      	str	r2, [r5, #64]	; 0x40

	/* The DCD needs to update the device state too. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID*) UX_DEVICE_CONFIGURED);
 8005366:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005368:	2113      	movs	r1, #19
 800536a:	4628      	mov	r0, r5
 800536c:	4798      	blx	r3

	/* Configuration mounted. */
	return (UX_SUCCESS);
 800536e:	2000      	movs	r0, #0
 8005370:	e000      	b.n	8005374 <_ux_device_stack_configuration_set+0x1f0>
		return (UX_SUCCESS);
 8005372:	2000      	movs	r0, #0
}
 8005374:	b01f      	add	sp, #124	; 0x7c
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (UX_ERROR);
 800537a:	20ff      	movs	r0, #255	; 0xff
 800537c:	e7fa      	b.n	8005374 <_ux_device_stack_configuration_set+0x1f0>
 800537e:	bf00      	nop
 8005380:	20000488 	.word	0x20000488
 8005384:	2000012c 	.word	0x2000012c
 8005388:	2000014c 	.word	0x2000014c

0800538c <_ux_device_stack_interface_set>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_interface_set(UCHAR* device_framework, ULONG device_framework_length,
		ULONG alternate_setting_value)
{
 800538c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8005390:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <_ux_device_stack_interface_set+0xf8>)
 8005392:	681f      	ldr	r7, [r3, #0]
 8005394:	46b8      	mov	r8, r7

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8005396:	f107 0940 	add.w	r9, r7, #64	; 0x40

	/*--------------------------------------------------------------------------------------------*/

	/* Find a free interface in the pool and hook it to the existing interface. */
	UX_SLAVE_INTERFACE* interface = device->ux_slave_device_interfaces_pool;
 800539a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134

	ULONG interfaces_pool_number = device->ux_slave_device_interfaces_pool_number;
 800539e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
	while (interfaces_pool_number != 0)
 80053a2:	b133      	cbz	r3, 80053b2 <_ux_device_stack_interface_set+0x26>
	{
		/* Check if this interface is free. */
		if (interface->ux_slave_interface_status == UX_UNUSED)
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	b112      	cbz	r2, 80053ae <_ux_device_stack_interface_set+0x22>
			interface->ux_slave_interface_status = UX_USED;
			break;
		}

		/* Try the next interface. */
		interface++;
 80053a8:	3438      	adds	r4, #56	; 0x38

		/* Decrement the number of interfaces left to scan in the pool. */
		interfaces_pool_number--;
 80053aa:	3b01      	subs	r3, #1
 80053ac:	e7f9      	b.n	80053a2 <_ux_device_stack_interface_set+0x16>
			interface->ux_slave_interface_status = UX_USED;
 80053ae:	2201      	movs	r2, #1
 80053b0:	6022      	str	r2, [r4, #0]
	}

	/* Did we find a free interface ?  */
	if (interfaces_pool_number == 0)
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d05f      	beq.n	8005476 <_ux_device_stack_interface_set+0xea>
 80053b6:	468a      	mov	sl, r1
 80053b8:	4606      	mov	r6, r0

	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, interface, 0, 0, 0)

	/* Parse the descriptor in something more readable. */
	_ux_utility_descriptor_parse(device_framework, _ux_system_interface_descriptor_structure,
 80053ba:	f104 030c 	add.w	r3, r4, #12
 80053be:	2209      	movs	r2, #9
 80053c0:	4931      	ldr	r1, [pc, #196]	; (8005488 <_ux_device_stack_interface_set+0xfc>)
 80053c2:	f7fe ff91 	bl	80042e8 <_ux_utility_descriptor_parse>
			UX_INTERFACE_DESCRIPTOR_ENTRIES, (UCHAR*)&interface->ux_slave_interface_descriptor);

	/*--------------------------------------------------------------------------------------------*/

	/* Attach this interface to the end of the interface chain. */
	if (device->ux_slave_device_first_interface == UX_NULL)
 80053c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80053ca:	b91a      	cbnz	r2, 80053d4 <_ux_device_stack_interface_set+0x48>
	{
		device->ux_slave_device_first_interface = interface;
 80053cc:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80053d0:	e004      	b.n	80053dc <_ux_device_stack_interface_set+0x50>
	{
		/* Multiple interfaces exist, so find the end of the chain. */
		UX_SLAVE_INTERFACE* interface_link = device->ux_slave_device_first_interface;

		while (interface_link->ux_slave_interface_next_interface != UX_NULL)
			interface_link = interface_link->ux_slave_interface_next_interface;
 80053d2:	461a      	mov	r2, r3
		while (interface_link->ux_slave_interface_next_interface != UX_NULL)
 80053d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1fb      	bne.n	80053d2 <_ux_device_stack_interface_set+0x46>

		interface_link->ux_slave_interface_next_interface = interface;
 80053da:	6314      	str	r4, [r2, #48]	; 0x30
	}

	/* Point beyond the interface descriptor. */
	device_framework_length -= (ULONG)*device_framework;
 80053dc:	7830      	ldrb	r0, [r6, #0]
 80053de:	ebaa 0a00 	sub.w	sl, sl, r0
	device_framework += (ULONG)*device_framework;
 80053e2:	4406      	add	r6, r0
	UCHAR descriptor_type;
	ULONG endpoints_pool_number;
	UINT status;

	/* Parse the device framework and locate endpoint descriptor(s). */
	while (device_framework_length != 0)
 80053e4:	e031      	b.n	800544a <_ux_device_stack_interface_set+0xbe>
		switch (descriptor_type)
		{
			case UX_ENDPOINT_DESCRIPTOR_ITEM:
				/* Find a free endpoint in the pool and hook it to the existing interface
				 * after it's created by DCD. */
				endpoint = device->ux_slave_device_endpoints_pool;
 80053e6:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
				endpoints_pool_number = device->ux_slave_device_endpoints_pool_number;
 80053ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
				while (endpoints_pool_number != 0)
 80053ee:	b133      	cbz	r3, 80053fe <_ux_device_stack_interface_set+0x72>
				{
					/* Check if this endpoint is free. */
					if (endpoint->ux_slave_endpoint_status == UX_UNUSED)
 80053f0:	682a      	ldr	r2, [r5, #0]
 80053f2:	b112      	cbz	r2, 80053fa <_ux_device_stack_interface_set+0x6e>
						endpoint->ux_slave_endpoint_status = UX_USED;
						break;
					}

					/* Try the next endpoint. */
					endpoint++;
 80053f4:	3590      	adds	r5, #144	; 0x90

					/* Decrement the number of endpoints to scan from the pool. */
					endpoints_pool_number--;
 80053f6:	3b01      	subs	r3, #1
 80053f8:	e7f9      	b.n	80053ee <_ux_device_stack_interface_set+0x62>
						endpoint->ux_slave_endpoint_status = UX_USED;
 80053fa:	2201      	movs	r2, #1
 80053fc:	602a      	str	r2, [r5, #0]
				}

				/* Did we find a free endpoint ?  */
				if (endpoints_pool_number == 0)
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d03d      	beq.n	800547e <_ux_device_stack_interface_set+0xf2>
					return (UX_MEMORY_INSUFFICIENT);

				/* Parse the descriptor in something more readable. */
				_ux_utility_descriptor_parse(device_framework,
 8005402:	f105 030c 	add.w	r3, r5, #12
 8005406:	2206      	movs	r2, #6
 8005408:	4920      	ldr	r1, [pc, #128]	; (800548c <_ux_device_stack_interface_set+0x100>)
 800540a:	4630      	mov	r0, r6
 800540c:	f7fe ff6c 	bl	80042e8 <_ux_utility_descriptor_parse>

				/* Now we create a transfer request to accept transfer on this endpoint. */
				transfer_request = &endpoint->ux_slave_endpoint_transfer_request;

				/* We store the endpoint in the transfer request as well. */
				transfer_request->ux_slave_transfer_request_endpoint = endpoint;
 8005410:	63ad      	str	r5, [r5, #56]	; 0x38

				/* By default the timeout is infinite on request. */
				transfer_request->ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	67eb      	str	r3, [r5, #124]	; 0x7c

				/* Attach the interface to the endpoint. */
				endpoint->ux_slave_endpoint_interface = interface;
 8005418:	62ac      	str	r4, [r5, #40]	; 0x28

				/* Attach the device to the endpoint. */
				endpoint->ux_slave_endpoint_device = device;
 800541a:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c

				/* Create the endpoint at the DCD level. */
				status = dcd->ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID*)endpoint);
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	462a      	mov	r2, r5
 8005422:	210e      	movs	r1, #14
 8005424:	4640      	mov	r0, r8
 8005426:	4798      	blx	r3

				/* Do a sanity check on endpoint creation. */
				if (status != UX_SUCCESS)
 8005428:	4603      	mov	r3, r0
 800542a:	b918      	cbnz	r0, 8005434 <_ux_device_stack_interface_set+0xa8>
					endpoint->ux_slave_endpoint_status = UX_UNUSED;
					return (status);
				}

				/* Attach this endpoint to the end of the endpoint chain. */
				if (interface->ux_slave_interface_first_endpoint == UX_NULL)
 800542c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800542e:	b92a      	cbnz	r2, 800543c <_ux_device_stack_interface_set+0xb0>
				{
					interface->ux_slave_interface_first_endpoint = endpoint;
 8005430:	6365      	str	r5, [r4, #52]	; 0x34
 8005432:	e007      	b.n	8005444 <_ux_device_stack_interface_set+0xb8>
					endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8005434:	2200      	movs	r2, #0
 8005436:	602a      	str	r2, [r5, #0]
					return (status);
 8005438:	e01e      	b.n	8005478 <_ux_device_stack_interface_set+0xec>
				else
				{
					/* Multiple endpoints exist, so find the end of the chain. */
					endpoint_link = interface->ux_slave_interface_first_endpoint;
					while (endpoint_link->ux_slave_endpoint_next_endpoint != UX_NULL)
						endpoint_link = endpoint_link->ux_slave_endpoint_next_endpoint;
 800543a:	461a      	mov	r2, r3
					while (endpoint_link->ux_slave_endpoint_next_endpoint != UX_NULL)
 800543c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1fb      	bne.n	800543a <_ux_device_stack_interface_set+0xae>
					endpoint_link->ux_slave_endpoint_next_endpoint = endpoint;
 8005442:	6255      	str	r5, [r2, #36]	; 0x24
			default:
				break;
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 8005444:	ebaa 0a0b 	sub.w	sl, sl, fp

		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 8005448:	445e      	add	r6, fp
	while (device_framework_length != 0)
 800544a:	f1ba 0f00 	cmp.w	sl, #0
 800544e:	d00d      	beq.n	800546c <_ux_device_stack_interface_set+0xe0>
		descriptor_length = (ULONG)*device_framework;
 8005450:	f896 b000 	ldrb.w	fp, [r6]
		descriptor_type = *(device_framework + 1);
 8005454:	7873      	ldrb	r3, [r6, #1]
		switch (descriptor_type)
 8005456:	2b04      	cmp	r3, #4
 8005458:	d003      	beq.n	8005462 <_ux_device_stack_interface_set+0xd6>
 800545a:	2b05      	cmp	r3, #5
 800545c:	d0c3      	beq.n	80053e6 <_ux_device_stack_interface_set+0x5a>
 800545e:	2b02      	cmp	r3, #2
 8005460:	d1f0      	bne.n	8005444 <_ux_device_stack_interface_set+0xb8>
				status = _ux_device_stack_interface_start(interface);
 8005462:	4620      	mov	r0, r4
 8005464:	f000 f814 	bl	8005490 <_ux_device_stack_interface_start>
 8005468:	4603      	mov	r3, r0
				return (status);
 800546a:	e005      	b.n	8005478 <_ux_device_stack_interface_set+0xec>
	}

	/* The interface attached to this configuration must be started at the class level. */
	status = _ux_device_stack_interface_start(interface);
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f80f 	bl	8005490 <_ux_device_stack_interface_start>
 8005472:	4603      	mov	r3, r0

	/* Return the status to the caller. */
	return (status);
 8005474:	e000      	b.n	8005478 <_ux_device_stack_interface_set+0xec>
		return (UX_MEMORY_INSUFFICIENT);
 8005476:	2312      	movs	r3, #18
}
 8005478:	4618      	mov	r0, r3
 800547a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return (UX_MEMORY_INSUFFICIENT);
 800547e:	2312      	movs	r3, #18
 8005480:	e7fa      	b.n	8005478 <_ux_device_stack_interface_set+0xec>
 8005482:	bf00      	nop
 8005484:	20000488 	.word	0x20000488
 8005488:	2000014c 	.word	0x2000014c
 800548c:	20000144 	.word	0x20000144

08005490 <_ux_device_stack_interface_start>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_interface_start(UX_SLAVE_INTERFACE* interface)
{
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	b08c      	sub	sp, #48	; 0x30
	/* Get the class for the interface. */
	UX_SLAVE_CLASS* class =
			_ux_system_slave->
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <_ux_device_stack_interface_start+0x68>)
 8005496:	681d      	ldr	r5, [r3, #0]
					ux_system_slave_interface_class_array[interface->ux_slave_interface_descriptor.bInterfaceNumber];
 8005498:	6943      	ldr	r3, [r0, #20]
	UX_SLAVE_CLASS* class =
 800549a:	3360      	adds	r3, #96	; 0x60
 800549c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80054a0:	685e      	ldr	r6, [r3, #4]

	/* Check if class driver is available. */
	if (class == UX_NULL)
 80054a2:	b32e      	cbz	r6, 80054f0 <_ux_device_stack_interface_start+0x60>
 80054a4:	4604      	mov	r4, r0
	 * 		UINT ux_slave_class_command_protocol;
	 * 		struct UX_SLAVE_CLASS_STRUCT* ux_slave_class_command_class_ptr;
	 * 		VOID* ux_slave_class_command_parameter;
	 * 		VOID* ux_slave_class_command_interface_number;
	 * } UX_SLAVE_CLASS_COMMAND; */
	UX_SLAVE_CLASS_COMMAND class_command = { 0 };
 80054a6:	2228      	movs	r2, #40	; 0x28
 80054a8:	2100      	movs	r1, #0
 80054aa:	a802      	add	r0, sp, #8
 80054ac:	f002 f900 	bl	80076b0 <memset>

	/* Build all the fields of the Class Command. */
	class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_QUERY;
 80054b0:	2301      	movs	r3, #1
 80054b2:	9301      	str	r3, [sp, #4]
	class_command.ux_slave_class_command_interface = (VOID*)interface;
 80054b4:	9403      	str	r4, [sp, #12]
	class_command.ux_slave_class_command_pid = device->ux_slave_device_descriptor.idProduct;
 80054b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054b8:	9304      	str	r3, [sp, #16]
	class_command.ux_slave_class_command_vid = device->ux_slave_device_descriptor.idVendor;
 80054ba:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80054bc:	9305      	str	r3, [sp, #20]
	class_command.ux_slave_class_command_class =
			interface->ux_slave_interface_descriptor.bInterfaceClass;
 80054be:	6a23      	ldr	r3, [r4, #32]
	class_command.ux_slave_class_command_class =
 80054c0:	9306      	str	r3, [sp, #24]
	class_command.ux_slave_class_command_subclass =
			interface->ux_slave_interface_descriptor.bInterfaceSubClass;
 80054c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	class_command.ux_slave_class_command_subclass =
 80054c4:	9307      	str	r3, [sp, #28]
	class_command.ux_slave_class_command_protocol =
			interface->ux_slave_interface_descriptor.bInterfaceProtocol;
 80054c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	class_command.ux_slave_class_command_protocol =
 80054c8:	9308      	str	r3, [sp, #32]

	/* We can now memorize the interface pointer associated with this class. */
	class->ux_slave_class_interface = interface;
 80054ca:	f8c6 4128 	str.w	r4, [r6, #296]	; 0x128

	/* We have found a potential candidate. Call this registered class entry function. */
	UINT status = class->ux_slave_class_entry_function(&class_command);
 80054ce:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80054d0:	a801      	add	r0, sp, #4
 80054d2:	4798      	blx	r3

	/* The status tells us if the registered class wants to own this class. */
	if (status == UX_SUCCESS)
 80054d4:	b970      	cbnz	r0, 80054f4 <_ux_device_stack_interface_start+0x64>
	{
		/* Store the class container. */
		class_command.ux_slave_class_command_class_ptr = class;
 80054d6:	9609      	str	r6, [sp, #36]	; 0x24

		/* Store the command. */
		class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 80054d8:	a80c      	add	r0, sp, #48	; 0x30
 80054da:	2302      	movs	r3, #2
 80054dc:	f840 3d2c 	str.w	r3, [r0, #-44]!

		/* Activate the class. */
		status = class->ux_slave_class_entry_function(&class_command);
 80054e0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80054e2:	4798      	blx	r3

		/* If the class was successfully activated, set the class for the interface. */
		if (status == UX_SUCCESS)
 80054e4:	4603      	mov	r3, r0
 80054e6:	b900      	cbnz	r0, 80054ea <_ux_device_stack_interface_start+0x5a>
			interface->ux_slave_interface_class = class;
 80054e8:	6066      	str	r6, [r4, #4]
		return (status);
	}

	/* There is no driver who want to own this class!  */
	return (UX_NO_CLASS_MATCH);
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	b00c      	add	sp, #48	; 0x30
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
		return (UX_NO_CLASS_MATCH);
 80054f0:	2357      	movs	r3, #87	; 0x57
 80054f2:	e7fa      	b.n	80054ea <_ux_device_stack_interface_start+0x5a>
	return (UX_NO_CLASS_MATCH);
 80054f4:	2357      	movs	r3, #87	; 0x57
 80054f6:	e7f8      	b.n	80054ea <_ux_device_stack_interface_start+0x5a>
 80054f8:	20000488 	.word	0x20000488

080054fc <_ux_device_stack_transfer_abort>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER* transfer_request, ULONG completion_code)
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code,
			0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80054fe:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <_ux_device_stack_transfer_abort+0x3c>)
 8005500:	681b      	ldr	r3, [r3, #0]

	/* Sets the completion code due to bus reset. */
	transfer_request->ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8005502:	2226      	movs	r2, #38	; 0x26
 8005504:	6202      	str	r2, [r0, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005506:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800550a:	b672      	cpsid	i

	/* Ensure we're not preempted by the transfer completion ISR. */
	TX_DISABLE

	/* It's possible the transfer already completed. Ensure it hasn't before doing the abort. */
	if (transfer_request->ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800550c:	6802      	ldr	r2, [r0, #0]
 800550e:	2a01      	cmp	r2, #1
 8005510:	d10f      	bne.n	8005532 <_ux_device_stack_transfer_abort+0x36>
 8005512:	4604      	mov	r4, r0
	{
		/* Call the DCD if necessary for cleaning up the pending transfer. */
		dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID*)transfer_request);
 8005514:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8005516:	4602      	mov	r2, r0
 8005518:	210d      	movs	r1, #13
 800551a:	4618      	mov	r0, r3
 800551c:	47b0      	blx	r6
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800551e:	f385 8810 	msr	PRIMASK, r5
		TX_RESTORE

		/* We need to set the completion code for the transfer to aborted. Note that the transfer
		 * request function cannot simultaneously modify this because if the transfer was pending,
		 * then the transfer's thread is currently waiting for it to complete. */
		transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_ABORT;
 8005522:	4620      	mov	r0, r4
 8005524:	2304      	movs	r3, #4
 8005526:	f840 3b2c 	str.w	r3, [r0], #44

		/* Wake up the device driver who is waiting on the semaphore. */
		_ux_utility_semaphore_put(&transfer_request->ux_slave_transfer_request_semaphore);
 800552a:	f7ff f87f 	bl	800462c <_ux_utility_semaphore_put>
		TX_RESTORE
	}

	/* This function never fails. */
	return (UX_SUCCESS);
}
 800552e:	2000      	movs	r0, #0
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	f385 8810 	msr	PRIMASK, r5
 8005536:	e7fa      	b.n	800552e <_ux_device_stack_transfer_abort+0x32>
 8005538:	20000488 	.word	0x20000488

0800553c <_ux_device_stack_transfer_all_request_abort>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800553c:	b508      	push	{r3, lr}

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800553e:	3030      	adds	r0, #48	; 0x30
 8005540:	f7ff ffdc 	bl	80054fc <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8005544:	2000      	movs	r0, #0
 8005546:	bd08      	pop	{r3, pc}

08005548 <_ux_utility_event_flags_create>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name)
{
 8005548:	b510      	push	{r4, lr}

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 800554a:	2228      	movs	r2, #40	; 0x28
 800554c:	f000 fcbe 	bl	8005ecc <_txe_event_flags_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8005550:	4604      	mov	r4, r0
 8005552:	b908      	cbnz	r0, 8005558 <_ux_utility_event_flags_create+0x10>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
}
 8005554:	4620      	mov	r0, r4
 8005556:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 8005558:	2218      	movs	r2, #24
 800555a:	2108      	movs	r1, #8
 800555c:	2002      	movs	r0, #2
 800555e:	f7fe fe45 	bl	80041ec <_ux_system_error_handler>
    return(status);
 8005562:	e7f7      	b.n	8005554 <_ux_utility_event_flags_create+0xc>

08005564 <_ux_utility_event_flags_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)            
{
 8005564:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 8005566:	f000 fd0d 	bl	8005f84 <_txe_event_flags_delete>

    /* Return completion status.  */
    return(status);
}
 800556a:	bd08      	pop	{r3, pc}

0800556c <_ux_utility_long_put>:
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800556c:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800556e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005572:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8005574:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005578:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800557a:	0e09      	lsrs	r1, r1, #24
 800557c:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 800557e:	4770      	bx	lr

08005580 <_ux_utility_semaphore_get>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(TX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8005580:	b530      	push	{r4, r5, lr}
 8005582:	b08f      	sub	sp, #60	; 0x3c
 8005584:	4604      	mov	r4, r0
 8005586:	460d      	mov	r5, r1
ULONG       time_slice;
TX_THREAD   *next_thread;
TX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8005588:	f000 fa32 	bl	80059f0 <_tx_thread_identify>

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 800558c:	ab06      	add	r3, sp, #24
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	ab07      	add	r3, sp, #28
 8005592:	9303      	str	r3, [sp, #12]
 8005594:	ab08      	add	r3, sp, #32
 8005596:	9302      	str	r3, [sp, #8]
 8005598:	ab09      	add	r3, sp, #36	; 0x24
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	ab0a      	add	r3, sp, #40	; 0x28
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	ab0b      	add	r3, sp, #44	; 0x2c
 80055a2:	aa0c      	add	r2, sp, #48	; 0x30
 80055a4:	a90d      	add	r1, sp, #52	; 0x34
 80055a6:	f000 ff81 	bl	80064ac <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <_ux_utility_semaphore_get+0x44>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6999      	ldr	r1, [r3, #24]
 80055b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055b2:	4291      	cmp	r1, r2
 80055b4:	d200      	bcs.n	80055b8 <_ux_utility_semaphore_get+0x38>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 80055b6:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 80055b8:	4629      	mov	r1, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 fe7c 	bl	80062b8 <_txe_semaphore_get>

    /* Return completion status.  */
    return(status);
}
 80055c0:	b00f      	add	sp, #60	; 0x3c
 80055c2:	bd30      	pop	{r4, r5, pc}
 80055c4:	20000490 	.word	0x20000490

080055c8 <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(TX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 80055c8:	b510      	push	{r4, lr}
 80055ca:	b088      	sub	sp, #32

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 80055cc:	24c8      	movs	r4, #200	; 0xc8
 80055ce:	9406      	str	r4, [sp, #24]
 80055d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80055d2:	9405      	str	r4, [sp, #20]
 80055d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055d6:	9404      	str	r4, [sp, #16]
 80055d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80055da:	9403      	str	r4, [sp, #12]
 80055dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80055de:	9402      	str	r4, [sp, #8]
 80055e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80055e2:	9401      	str	r4, [sp, #4]
 80055e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055e6:	9400      	str	r4, [sp, #0]
 80055e8:	f000 fe92 	bl	8006310 <_txe_thread_create>
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80055ec:	4604      	mov	r4, r0
 80055ee:	b910      	cbnz	r0, 80055f6 <_ux_utility_thread_create+0x2e>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
}
 80055f0:	4620      	mov	r0, r4
 80055f2:	b008      	add	sp, #32
 80055f4:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80055f6:	4602      	mov	r2, r0
 80055f8:	2108      	movs	r1, #8
 80055fa:	2002      	movs	r0, #2
 80055fc:	f7fe fdf6 	bl	80041ec <_ux_system_error_handler>
    return(status);
 8005600:	e7f6      	b.n	80055f0 <_ux_utility_thread_create+0x28>

08005602 <_ux_utility_thread_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(TX_THREAD *thread_ptr)
{
 8005602:	b510      	push	{r4, lr}
 8005604:	4604      	mov	r4, r0

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 8005606:	f000 ff6d 	bl	80064e4 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 800560a:	4620      	mov	r0, r4
 800560c:	f000 ff38 	bl	8006480 <_txe_thread_delete>

    /* Return completion status.  */
    return(status);
}
 8005610:	bd10      	pop	{r4, pc}
	...

08005614 <_ux_device_class_cdc_acm_bulkin_thread>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_device_class_cdc_acm_bulkin_thread(ULONG cdc_acm_class)
{
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	4606      	mov	r6, r0

	/* Get the cdc_acm instance from this class container. */
	UX_THREAD_EXTENSION_PTR_GET(cdc_acm, UX_SLAVE_CLASS_CDC_ACM, cdc_acm_class)

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 800561c:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <_ux_device_class_cdc_acm_bulkin_thread+0xc0>)
 800561e:	f8d3 a000 	ldr.w	sl, [r3]

	/* This is the first time we are activated. We need the interface to the class. */
	UX_SLAVE_INTERFACE* interface = cdc_acm->ux_slave_class_cdc_acm_interface;
 8005622:	6803      	ldr	r3, [r0, #0]

	/* Locate the endpoints. */
	UX_SLAVE_ENDPOINT* endpoint = interface->ux_slave_interface_first_endpoint;
 8005624:	6b5f      	ldr	r7, [r3, #52]	; 0x34

	/* Check the endpoint direction, if IN we have the correct endpoint. */
	if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f013 0f80 	tst.w	r3, #128	; 0x80
 800562c:	d14f      	bne.n	80056ce <_ux_device_class_cdc_acm_bulkin_thread+0xba>
			!= UX_ENDPOINT_IN)
	{
		/* So the next endpoint has to be the IN endpoint. */
		endpoint = endpoint->ux_slave_endpoint_next_endpoint;
 800562e:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 8005630:	e04d      	b.n	80056ce <_ux_device_class_cdc_acm_bulkin_thread+0xba>
				sent_length = 0;

				/* Special ZLP case. */
				if (total_length == 0)
					/* Send the zlp to the host. */
					status = _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8005632:	2200      	movs	r2, #0
 8005634:	4611      	mov	r1, r2
 8005636:	4648      	mov	r0, r9
 8005638:	f7fe fd7e 	bl	8004138 <_ux_device_stack_transfer_request>
 800563c:	4601      	mov	r1, r0
				sent_length = 0;
 800563e:	46a8      	mov	r8, r5
						}
					}
				}

				/* Schedule of transmission was completed. */
				cdc_acm->ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 8005640:	2300      	movs	r3, #0
 8005642:	f8c6 3254 	str.w	r3, [r6, #596]	; 0x254

				/* We get here when the entire user data payload has been sent or if there is an error. */
				/* If there is a callback defined by the application, send the transaction event to it. */
				if (cdc_acm->ux_device_class_cdc_acm_write_callback != UX_NULL)
 8005646:	f8d6 3220 	ldr.w	r3, [r6, #544]	; 0x220
 800564a:	2b00      	cmp	r3, #0
 800564c:	d137      	bne.n	80056be <_ux_device_class_cdc_acm_bulkin_thread+0xaa>
		while (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800564e:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8005652:	2b03      	cmp	r3, #3
 8005654:	d137      	bne.n	80056c6 <_ux_device_class_cdc_acm_bulkin_thread+0xb2>
			status = _ux_utility_event_flags_get(&cdc_acm->ux_slave_class_cdc_acm_event_flags_group,
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	ab03      	add	r3, sp, #12
 800565e:	2201      	movs	r2, #1
 8005660:	4611      	mov	r1, r2
 8005662:	f506 700a 	add.w	r0, r6, #552	; 0x228
 8005666:	f000 f98e 	bl	8005986 <_ux_utility_event_flags_get>
			if (status == UX_SUCCESS)
 800566a:	4601      	mov	r1, r0
 800566c:	bb58      	cbnz	r0, 80056c6 <_ux_device_class_cdc_acm_bulkin_thread+0xb2>
				total_length = cdc_acm->ux_slave_class_cdc_acm_callback_total_length;
 800566e:	f8d6 5258 	ldr.w	r5, [r6, #600]	; 0x258
						cdc_acm->ux_slave_class_cdc_acm_callback_data_pointer;
 8005672:	f8d6 325c 	ldr.w	r3, [r6, #604]	; 0x25c
				cdc_acm->ux_slave_class_cdc_acm_callback_current_data_pointer =
 8005676:	f8c6 3260 	str.w	r3, [r6, #608]	; 0x260
				if (total_length == 0)
 800567a:	2d00      	cmp	r5, #0
 800567c:	d0d9      	beq.n	8005632 <_ux_device_class_cdc_acm_bulkin_thread+0x1e>
				sent_length = 0;
 800567e:	f04f 0800 	mov.w	r8, #0
 8005682:	e000      	b.n	8005686 <_ux_device_class_cdc_acm_bulkin_thread+0x72>
							total_length = 0;
 8005684:	2500      	movs	r5, #0
					while (total_length)
 8005686:	2d00      	cmp	r5, #0
 8005688:	d0da      	beq.n	8005640 <_ux_device_class_cdc_acm_bulkin_thread+0x2c>
						if (total_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 800568a:	69fc      	ldr	r4, [r7, #28]
 800568c:	42ac      	cmp	r4, r5
 800568e:	d300      	bcc.n	8005692 <_ux_device_class_cdc_acm_bulkin_thread+0x7e>
							transfer_length = total_length;
 8005690:	462c      	mov	r4, r5
						_ux_utility_memory_copy(
 8005692:	4622      	mov	r2, r4
 8005694:	f8d6 1260 	ldr.w	r1, [r6, #608]	; 0x260
 8005698:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800569a:	f7fe fefa 	bl	8004492 <_ux_utility_memory_copy>
						status = _ux_device_stack_transfer_request(transfer_request,
 800569e:	4622      	mov	r2, r4
 80056a0:	4621      	mov	r1, r4
 80056a2:	4648      	mov	r0, r9
 80056a4:	f7fe fd48 	bl	8004138 <_ux_device_stack_transfer_request>
						if (status != UX_SUCCESS)
 80056a8:	4601      	mov	r1, r0
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d1ea      	bne.n	8005684 <_ux_device_class_cdc_acm_bulkin_thread+0x70>
							sent_length += transfer_length;
 80056ae:	44a0      	add	r8, r4
							total_length -= transfer_length;
 80056b0:	1b2d      	subs	r5, r5, r4
							cdc_acm->ux_slave_class_cdc_acm_callback_current_data_pointer +=
 80056b2:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
 80056b6:	441c      	add	r4, r3
 80056b8:	f8c6 4260 	str.w	r4, [r6, #608]	; 0x260
 80056bc:	e7e3      	b.n	8005686 <_ux_device_class_cdc_acm_bulkin_thread+0x72>
					/* Callback exists. */
					cdc_acm->ux_device_class_cdc_acm_write_callback(cdc_acm, status, sent_length);
 80056be:	4642      	mov	r2, r8
 80056c0:	4630      	mov	r0, r6
 80056c2:	4798      	blx	r3
 80056c4:	e7c3      	b.n	800564e <_ux_device_class_cdc_acm_bulkin_thread+0x3a>
				break;
			}
		}

		/* We need to suspend ourselves. We will be resumed by the device enumeration module or when a change of alternate setting happens. */
		_ux_utility_thread_suspend(&cdc_acm->ux_slave_class_cdc_acm_bulkin_thread);
 80056c6:	f106 0088 	add.w	r0, r6, #136	; 0x88
 80056ca:	f000 f968 	bl	800599e <_ux_utility_thread_suspend>
		transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 80056ce:	f107 0930 	add.w	r9, r7, #48	; 0x30
		while (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80056d2:	e7bc      	b.n	800564e <_ux_device_class_cdc_acm_bulkin_thread+0x3a>
 80056d4:	20000488 	.word	0x20000488

080056d8 <_ux_device_class_cdc_acm_bulkout_thread>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_cdc_acm_bulkout_thread(ULONG cdc_acm_class)
{
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	4607      	mov	r7, r0

    /* Cast properly the cdc_acm instance.  */
    UX_THREAD_EXTENSION_PTR_GET(cdc_acm, UX_SLAVE_CLASS_CDC_ACM, cdc_acm_class)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80056de:	4b19      	ldr	r3, [pc, #100]	; (8005744 <_ux_device_class_cdc_acm_bulkout_thread+0x6c>)
 80056e0:	681d      	ldr	r5, [r3, #0]

    /* This is the first time we are activated. We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80056e2:	6803      	ldr	r3, [r0, #0]

    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 80056e4:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 80056e6:	6963      	ldr	r3, [r4, #20]
 80056e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056ec:	d027      	beq.n	800573e <_ux_device_class_cdc_acm_bulkout_thread+0x66>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80056ee:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80056f0:	e025      	b.n	800573e <_ux_device_class_cdc_acm_bulkout_thread+0x66>
                }
                else
                {

                    /* We have an error. If there is a callback defined by the application, send the transaction event to it.  */
                    if (cdc_acm -> ux_device_class_cdc_acm_read_callback != UX_NULL)
 80056f2:	f8d7 8224 	ldr.w	r8, [r7, #548]	; 0x224
 80056f6:	f1b8 0f00 	cmp.w	r8, #0
 80056fa:	d003      	beq.n	8005704 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>

                        /* Callback exists. */
                        cdc_acm -> ux_device_class_cdc_acm_read_callback(cdc_acm, status, UX_NULL, 0);
 80056fc:	2300      	movs	r3, #0
 80056fe:	461a      	mov	r2, r3
 8005700:	4638      	mov	r0, r7
 8005702:	47c0      	blx	r8
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8005704:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005706:	2b03      	cmp	r3, #3
 8005708:	d115      	bne.n	8005736 <_ux_device_class_cdc_acm_bulkout_thread+0x5e>
            status =  _ux_device_stack_transfer_request(transfer_request, endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 800570a:	69e2      	ldr	r2, [r4, #28]
 800570c:	4611      	mov	r1, r2
 800570e:	4630      	mov	r0, r6
 8005710:	f7fe fd12 	bl	8004138 <_ux_device_stack_transfer_request>
            if (status == UX_SUCCESS)
 8005714:	4601      	mov	r1, r0
 8005716:	2800      	cmp	r0, #0
 8005718:	d1f4      	bne.n	8005704 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
                if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800571a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e8      	bne.n	80056f2 <_ux_device_class_cdc_acm_bulkout_thread+0x1a>
                    if (cdc_acm -> ux_device_class_cdc_acm_read_callback != UX_NULL)
 8005720:	f8d7 8224 	ldr.w	r8, [r7, #548]	; 0x224
 8005724:	f1b8 0f00 	cmp.w	r8, #0
 8005728:	d0ec      	beq.n	8005704 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
                        cdc_acm -> ux_device_class_cdc_acm_read_callback(cdc_acm, UX_SUCCESS, transfer_request -> ux_slave_transfer_request_data_pointer,
 800572a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800572c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800572e:	2100      	movs	r1, #0
 8005730:	4638      	mov	r0, r7
 8005732:	47c0      	blx	r8
 8005734:	e7e6      	b.n	8005704 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
                }
            }
        }

    /* We need to suspend ourselves. We will be resumed by the application if needed.  */
    _ux_utility_thread_suspend(&cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread);
 8005736:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800573a:	f000 f930 	bl	800599e <_ux_utility_thread_suspend>
        transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800573e:	f104 0630 	add.w	r6, r4, #48	; 0x30
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8005742:	e7df      	b.n	8005704 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
 8005744:	20000488 	.word	0x20000488

08005748 <_ux_dcd_stm32_address_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_address_set(UX_DCD_STM32* dcd_stm32, ULONG address)
{
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4604      	mov	r4, r0
 800574c:	460d      	mov	r5, r1
    /* Clear the previous address. */
    _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 800574e:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 8005752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005756:	f7fd fe0f 	bl	8003378 <_ux_dcd_stm32_register_clear>
            UX_DCD_STM32_OTG_FS_DCFG_DAD_MASK);

    /* Store the new address of the device. */
    _ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 800575a:	012a      	lsls	r2, r5, #4
 800575c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005760:	4620      	mov	r0, r4
 8005762:	f7fd fe14 	bl	800338e <_ux_dcd_stm32_register_set>
            address << UX_DCD_STM32_OTG_FS_DCFG_DAD_SHIFT);

    /* This function always succeeds. */
    return (UX_SUCCESS);
}
 8005766:	2000      	movs	r0, #0
 8005768:	bd38      	pop	{r3, r4, r5, pc}
	...

0800576c <_ux_dcd_stm32_endpoint_create>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_endpoint_create(UX_DCD_STM32* dcd_stm32, UX_SLAVE_ENDPOINT* endpoint)
{
 800576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	ULONG stm32_endpoint_register;
//	ULONG stm32_endpoint_address;

	/* The endpoint index in the array of the STM32 must match the endpoint number.
	 * The STM32 has 4 endpoints maximum. Each can be IN/OUT. */
	ULONG stm32_endpoint_index = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 8005770:	694c      	ldr	r4, [r1, #20]
 8005772:	f024 0480 	bic.w	r4, r4, #128	; 0x80
			& ~UX_ENDPOINT_DIRECTION;

	/* Fetch the address of the physical endpoint. */
	UX_DCD_STM32_ED* ed = &dcd_stm32->ux_dcd_stm32_ed[stm32_endpoint_index];
 8005776:	00e2      	lsls	r2, r4, #3
 8005778:	4422      	add	r2, r4
 800577a:	0093      	lsls	r3, r2, #2
 800577c:	4403      	add	r3, r0
 800577e:	f103 0804 	add.w	r8, r3, #4

	ULONG stm32_endpoint_register;
	ULONG stm32_endpoint_address;

	/* Check the endpoint status, if it is free, reserve it. If not reject this endpoint. */
	if ((ed->ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f013 0f01 	tst.w	r3, #1
 8005788:	f040 808e 	bne.w	80058a8 <_ux_dcd_stm32_endpoint_create+0x13c>
 800578c:	460d      	mov	r5, r1
 800578e:	4606      	mov	r6, r0
	{
		/* We can use this endpoint. */
		ed->ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_USED;
 8005790:	00e2      	lsls	r2, r4, #3
 8005792:	4422      	add	r2, r4
 8005794:	0097      	lsls	r7, r2, #2
 8005796:	4407      	add	r7, r0
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	607b      	str	r3, [r7, #4]

		/* Keep the physical endpoint address in the endpoint container. */
		endpoint->ux_slave_endpoint_ed = (VOID*)ed;
 800579e:	f8c1 8008 	str.w	r8, [r1, #8]

		/* Save the endpoint pointer. */
		ed->ux_dcd_stm32_ed_endpoint = endpoint;
 80057a2:	6279      	str	r1, [r7, #36]	; 0x24

		/* And its index. */
		ed->ux_dcd_stm32_ed_index = stm32_endpoint_index;
 80057a4:	60fc      	str	r4, [r7, #12]

		/* And its direction. */
		ed->ux_dcd_stm32_ed_direction = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80057a6:	694b      	ldr	r3, [r1, #20]
				& UX_ENDPOINT_DIRECTION;
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
		ed->ux_dcd_stm32_ed_direction = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80057ac:	623b      	str	r3, [r7, #32]

		/* And its type. */
		ed->ux_dcd_stm32_ed_type = endpoint->ux_slave_endpoint_descriptor.bmAttributes
 80057ae:	698b      	ldr	r3, [r1, #24]
				& UX_MASK_ENDPOINT_TYPE;
 80057b0:	f003 0303 	and.w	r3, r3, #3
		ed->ux_dcd_stm32_ed_type = endpoint->ux_slave_endpoint_descriptor.bmAttributes
 80057b4:	61fb      	str	r3, [r7, #28]

		/* Reset the endpoint. */
		_ux_dcd_stm32_endpoint_reset(dcd_stm32, endpoint);
 80057b6:	f000 f8b3 	bl	8005920 <_ux_dcd_stm32_endpoint_reset>

		/* Reset the endpoint register. */
		stm32_endpoint_register = 0;

		/* For IN endpoint, the FIFO number is stored in the DIEPCTL register. */
		if (ed->ux_dcd_stm32_ed_direction == UX_ENDPOINT_IN)
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	2b80      	cmp	r3, #128	; 0x80
 80057be:	d00d      	beq.n	80057dc <_ux_dcd_stm32_endpoint_create+0x70>
		stm32_endpoint_register = 0;
 80057c0:	2700      	movs	r7, #0
			/* Set the FIFO number based on the endpoint index. */
			stm32_endpoint_register |= stm32_endpoint_index
					<< UX_DCD_STM32_OTG_FS_DIEPCTL_TXFNUM_SHIFT;

		/* Set USBAEP Active endpoint bit. */
		stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_USBAEP;
 80057c2:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000

		/* Build the endpoint DIEP or DOEP register. */
		switch (ed->ux_dcd_stm32_ed_type)
 80057c6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80057ca:	0093      	lsls	r3, r2, #2
 80057cc:	4433      	add	r3, r6
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d86c      	bhi.n	80058ae <_ux_dcd_stm32_endpoint_create+0x142>
 80057d4:	e8df f003 	tbb	[pc, r3]
 80057d8:	55505a04 	.word	0x55505a04
					<< UX_DCD_STM32_OTG_FS_DIEPCTL_TXFNUM_SHIFT;
 80057dc:	05a7      	lsls	r7, r4, #22
 80057de:	e7f0      	b.n	80057c2 <_ux_dcd_stm32_endpoint_create+0x56>
		{
			case UX_CONTROL_ENDPOINT:
				/* Set the MaxPacketSize. This is different for Control endpoints and other endpoints. */
				switch (endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 80057e0:	69eb      	ldr	r3, [r5, #28]
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d046      	beq.n	8005874 <_ux_dcd_stm32_endpoint_create+0x108>
 80057e6:	d905      	bls.n	80057f4 <_ux_dcd_stm32_endpoint_create+0x88>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d007      	beq.n	80057fc <_ux_dcd_stm32_endpoint_create+0x90>
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d106      	bne.n	80057fe <_ux_dcd_stm32_endpoint_create+0x92>
				{
					/* Is it 64 bytes ? */
					case 64:
						stm32_endpoint_register = 0;
 80057f0:	2700      	movs	r7, #0
 80057f2:	e004      	b.n	80057fe <_ux_dcd_stm32_endpoint_create+0x92>
				switch (endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d102      	bne.n	80057fe <_ux_dcd_stm32_endpoint_create+0x92>
						stm32_endpoint_register = 2;
						break;

					/* Is it 8 bytes ? */
					case 8:
						stm32_endpoint_register = 3;
 80057f8:	2703      	movs	r7, #3
						break;
 80057fa:	e000      	b.n	80057fe <_ux_dcd_stm32_endpoint_create+0x92>
						stm32_endpoint_register = 1;
 80057fc:	2701      	movs	r7, #1
					default:
						break;
				}

				/* Set the UX_DCD_STM32_OTG_FS_DIEPCTL register. */
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 80057fe:	463a      	mov	r2, r7
 8005800:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8005804:	4630      	mov	r0, r6
 8005806:	f7fd fdc8 	bl	800339a <_ux_dcd_stm32_register_write>
						stm32_endpoint_register);

				/* Set the DAINTMSK field for control endpoint IN. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 800580a:	2201      	movs	r2, #1
 800580c:	40a2      	lsls	r2, r4
 800580e:	f640 011c 	movw	r1, #2076	; 0x81c
 8005812:	4630      	mov	r0, r6
 8005814:	f7fd fdbb 	bl	800338e <_ux_dcd_stm32_register_set>
						1 << stm32_endpoint_index);

				/* Set the UX_DCD_STM32_OTG_FS_DOEPCTL register. */
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8005818:	463a      	mov	r2, r7
 800581a:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800581e:	4630      	mov	r0, r6
 8005820:	f7fd fdbb 	bl	800339a <_ux_dcd_stm32_register_write>
						stm32_endpoint_register);

				/* Set the DAINTMSK field for control endpoint OUT. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 8005824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005828:	40a2      	lsls	r2, r4
 800582a:	f640 011c 	movw	r1, #2076	; 0x81c
 800582e:	4630      	mov	r0, r6
 8005830:	f7fd fdad 	bl	800338e <_ux_dcd_stm32_register_set>
			default:
				return (UX_ERROR);
		}

		/* Continue initialization for non control endpoints. */
		if (ed->ux_dcd_stm32_ed_type != UX_CONTROL_ENDPOINT)
 8005834:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8005838:	0093      	lsls	r3, r2, #2
 800583a:	4433      	add	r3, r6
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	b3c3      	cbz	r3, 80058b2 <_ux_dcd_stm32_endpoint_create+0x146>
		{
			/* Set the endpoint direction. */
			if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8005840:	696b      	ldr	r3, [r5, #20]
 8005842:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005846:	d026      	beq.n	8005896 <_ux_dcd_stm32_endpoint_create+0x12a>
					== UX_ENDPOINT_IN)
			{
				/* Reset FIFO for endpoint IN. */
				_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO,
 8005848:	4622      	mov	r2, r4
 800584a:	2120      	movs	r1, #32
 800584c:	4630      	mov	r0, r6
 800584e:	f7ff f933 	bl	8004ab8 <_ux_dcd_stm32_fifo_flush>
						stm32_endpoint_index);

				/* Set the DAINTMSK field for endpoint IN. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 8005852:	2201      	movs	r2, #1
 8005854:	40a2      	lsls	r2, r4
 8005856:	f640 011c 	movw	r1, #2076	; 0x81c
 800585a:	4630      	mov	r0, r6
 800585c:	f7fd fd97 	bl	800338e <_ux_dcd_stm32_register_set>
				/* Set the DAINTMSK field for endpoint OUT. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
						0x10000 << stm32_endpoint_index);

			/* Get the endpoint address. */
			stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 8005860:	4640      	mov	r0, r8
 8005862:	f000 f84f 	bl	8005904 <_ux_dcd_stm32_endpoint_register_address_get>

			/* Set the endpoint register at the EP address. */
			_ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address,
 8005866:	463a      	mov	r2, r7
 8005868:	4601      	mov	r1, r0
 800586a:	4630      	mov	r0, r6
 800586c:	f7fd fd95 	bl	800339a <_ux_dcd_stm32_register_write>
					stm32_endpoint_register);
		}

		/* Return successful completion. */
		return (UX_SUCCESS);
 8005870:	2000      	movs	r0, #0
 8005872:	e01a      	b.n	80058aa <_ux_dcd_stm32_endpoint_create+0x13e>
						stm32_endpoint_register = 2;
 8005874:	2702      	movs	r7, #2
						break;
 8005876:	e7c2      	b.n	80057fe <_ux_dcd_stm32_endpoint_create+0x92>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8005878:	69eb      	ldr	r3, [r5, #28]
 800587a:	433b      	orrs	r3, r7
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_BULK
 800587c:	4f0e      	ldr	r7, [pc, #56]	; (80058b8 <_ux_dcd_stm32_endpoint_create+0x14c>)
 800587e:	431f      	orrs	r7, r3
				break;
 8005880:	e7d8      	b.n	8005834 <_ux_dcd_stm32_endpoint_create+0xc8>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8005882:	69eb      	ldr	r3, [r5, #28]
 8005884:	433b      	orrs	r3, r7
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_INTERRUPT
 8005886:	4f0d      	ldr	r7, [pc, #52]	; (80058bc <_ux_dcd_stm32_endpoint_create+0x150>)
 8005888:	431f      	orrs	r7, r3
				break;
 800588a:	e7d3      	b.n	8005834 <_ux_dcd_stm32_endpoint_create+0xc8>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 800588c:	69eb      	ldr	r3, [r5, #28]
 800588e:	431f      	orrs	r7, r3
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_ISO
 8005890:	f447 2790 	orr.w	r7, r7, #294912	; 0x48000
				break;
 8005894:	e7ce      	b.n	8005834 <_ux_dcd_stm32_endpoint_create+0xc8>
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 8005896:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800589a:	40a2      	lsls	r2, r4
 800589c:	f640 011c 	movw	r1, #2076	; 0x81c
 80058a0:	4630      	mov	r0, r6
 80058a2:	f7fd fd74 	bl	800338e <_ux_dcd_stm32_register_set>
 80058a6:	e7db      	b.n	8005860 <_ux_dcd_stm32_endpoint_create+0xf4>
	}

	/* Return an error. */
	return (UX_NO_ED_AVAILABLE);
 80058a8:	2014      	movs	r0, #20
}
 80058aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return (UX_ERROR);
 80058ae:	20ff      	movs	r0, #255	; 0xff
 80058b0:	e7fb      	b.n	80058aa <_ux_dcd_stm32_endpoint_create+0x13e>
		return (UX_SUCCESS);
 80058b2:	2000      	movs	r0, #0
 80058b4:	e7f9      	b.n	80058aa <_ux_dcd_stm32_endpoint_create+0x13e>
 80058b6:	bf00      	nop
 80058b8:	18088000 	.word	0x18088000
 80058bc:	180c8000 	.word	0x180c8000

080058c0 <_ux_dcd_stm32_endpoint_destroy>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4605      	mov	r5, r0

UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_address;

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80058c4:	688c      	ldr	r4, [r1, #8]

    /* Set the endpoint direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 80058c6:	694b      	ldr	r3, [r1, #20]
 80058c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058cc:	d112      	bne.n	80058f4 <_ux_dcd_stm32_endpoint_destroy+0x34>
    }            
    else
    {
    
        /* Clear the DAINTMSK field for endpoint OUT.  */
        _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 0x1000 << ed -> ux_dcd_stm32_ed_index);
 80058ce:	68a3      	ldr	r3, [r4, #8]
 80058d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058d4:	409a      	lsls	r2, r3
 80058d6:	f640 011c 	movw	r1, #2076	; 0x81c
 80058da:	f7fd fd4d 	bl	8003378 <_ux_dcd_stm32_register_clear>
    }

    /* Get the endpoint address.  */
    stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f810 	bl	8005904 <_ux_dcd_stm32_endpoint_register_address_get>

    /* Clear the endpoint register at the EP address.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, 0);
 80058e4:	2200      	movs	r2, #0
 80058e6:	4601      	mov	r1, r0
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7fd fd56 	bl	800339a <_ux_dcd_stm32_register_write>

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 80058ee:	2000      	movs	r0, #0
 80058f0:	6020      	str	r0, [r4, #0]

    /* This function never fails.  */
    return(UX_SUCCESS);         
}
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
        _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 1 << ed -> ux_dcd_stm32_ed_index);
 80058f4:	68a3      	ldr	r3, [r4, #8]
 80058f6:	2201      	movs	r2, #1
 80058f8:	409a      	lsls	r2, r3
 80058fa:	f640 011c 	movw	r1, #2076	; 0x81c
 80058fe:	f7fd fd3b 	bl	8003378 <_ux_dcd_stm32_register_clear>
 8005902:	e7ec      	b.n	80058de <_ux_dcd_stm32_endpoint_destroy+0x1e>

08005904 <_ux_dcd_stm32_endpoint_register_address_get>:
/**************************************************************************/
ULONG  _ux_dcd_stm32_endpoint_register_address_get(UX_DCD_STM32_ED *ed)
{

    /* Check for endpoint 0.  */
    if (ed -> ux_dcd_stm32_ed_index == 0)
 8005904:	6883      	ldr	r3, [r0, #8]
 8005906:	b143      	cbz	r3, 800591a <_ux_dcd_stm32_endpoint_register_address_get+0x16>
    
    else
    {
                    
        /* Check the endpoint direction for the base.  */
        if (ed -> ux_dcd_stm32_ed_direction  == UX_ENDPOINT_IN)
 8005908:	69c2      	ldr	r2, [r0, #28]
 800590a:	2a80      	cmp	r2, #128	; 0x80
 800590c:	d002      	beq.n	8005914 <_ux_dcd_stm32_endpoint_register_address_get+0x10>
            return(UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));

        else
        
            /* Endpoint is OUT.  */
            return(UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 800590e:	3358      	adds	r3, #88	; 0x58
 8005910:	0158      	lsls	r0, r3, #5
 8005912:	4770      	bx	lr
            return(UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8005914:	3348      	adds	r3, #72	; 0x48
 8005916:	0158      	lsls	r0, r3, #5
 8005918:	4770      	bx	lr
        return(UX_DCD_STM32_OTG_FS_DOEPCTL);
 800591a:	f44f 6030 	mov.w	r0, #2816	; 0xb00
    }
}
 800591e:	4770      	bx	lr

08005920 <_ux_dcd_stm32_endpoint_reset>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4605      	mov	r5, r0
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_register;
ULONG               stm32_endpoint_address;

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8005924:	688c      	ldr	r4, [r1, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_STALLED;
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f023 0304 	bic.w	r3, r3, #4
 800592c:	6023      	str	r3, [r4, #0]

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800592e:	2300      	movs	r3, #0
 8005930:	6063      	str	r3, [r4, #4]

    /* Get the endpoint address.  */
    stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 8005932:	4620      	mov	r0, r4
 8005934:	f7ff ffe6 	bl	8005904 <_ux_dcd_stm32_endpoint_register_address_get>
 8005938:	4606      	mov	r6, r0

    /* Read the current EP register.  */
    stm32_endpoint_register =  _ux_dcd_stm32_register_read(dcd_stm32, stm32_endpoint_address);
 800593a:	4601      	mov	r1, r0
 800593c:	4628      	mov	r0, r5
 800593e:	f7fd fd22 	bl	8003386 <_ux_dcd_stm32_register_read>

    /* Reset the stall bit.  */
    stm32_endpoint_register &= ~UX_DCD_STM32_OTG_FS_DIEPCTL_STALL;
 8005942:	f420 1200 	bic.w	r2, r0, #2097152	; 0x200000

    /* If the endpoint is Bulk or INT we need to reset the PID Data to DATA0.  */
    if (ed -> ux_dcd_stm32_ed_type == UX_BULK_ENDPOINT || ed -> ux_dcd_stm32_ed_type == UX_INTERRUPT_ENDPOINT)
 8005946:	69a3      	ldr	r3, [r4, #24]
 8005948:	3b02      	subs	r3, #2
 800594a:	2b01      	cmp	r3, #1
 800594c:	d905      	bls.n	800595a <_ux_dcd_stm32_endpoint_reset+0x3a>
    
        /* Set the SD0PID flag.  */
        stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_SD0PID;

    /* Write the endpoint register.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, stm32_endpoint_register);
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	f7fd fd22 	bl	800339a <_ux_dcd_stm32_register_write>
        
    /* This function never fails.  */
    return(UX_SUCCESS);         

}
 8005956:	2000      	movs	r0, #0
 8005958:	bd70      	pop	{r4, r5, r6, pc}
        stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_SD0PID;
 800595a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800595e:	e7f6      	b.n	800594e <_ux_dcd_stm32_endpoint_reset+0x2e>

08005960 <_ux_dcd_stm32_endpoint_status>:

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[endpoint_index];

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8005960:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005964:	008b      	lsls	r3, r1, #2
 8005966:	4418      	add	r0, r3
 8005968:	6843      	ldr	r3, [r0, #4]
 800596a:	f013 0f01 	tst.w	r3, #1
 800596e:	d006      	beq.n	800597e <_ux_dcd_stm32_endpoint_status+0x1e>
        return(UX_ERROR);
        
    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8005970:	f013 0f04 	tst.w	r3, #4
 8005974:	d001      	beq.n	800597a <_ux_dcd_stm32_endpoint_status+0x1a>
        return(UX_FALSE);
    else            
        return(UX_TRUE);
 8005976:	2001      	movs	r0, #1
}
 8005978:	4770      	bx	lr
        return(UX_FALSE);
 800597a:	2000      	movs	r0, #0
 800597c:	4770      	bx	lr
        return(UX_ERROR);
 800597e:	20ff      	movs	r0, #255	; 0xff
 8005980:	4770      	bx	lr

08005982 <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 8005982:	2000      	movs	r0, #0
 8005984:	4770      	bx	lr

08005986 <_ux_utility_event_flags_get>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8005986:	b510      	push	{r4, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	461c      	mov	r4, r3

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 800598c:	9b06      	ldr	r3, [sp, #24]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	ab03      	add	r3, sp, #12
 8005992:	f000 fb15 	bl	8005fc0 <_txe_event_flags_get>

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	6023      	str	r3, [r4, #0]
    
    /* Return completion status.  */
    return(status);
}
 800599a:	b004      	add	sp, #16
 800599c:	bd10      	pop	{r4, pc}

0800599e <_ux_utility_thread_suspend>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(TX_THREAD *thread_ptr)
{
 800599e:	b508      	push	{r3, lr}

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 80059a0:	f000 fd94 	bl	80064cc <_txe_thread_suspend>

    /* Return completion status.  */
    return(status);
}
 80059a4:	bd08      	pop	{r3, pc}
	...

080059a8 <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 80059a8:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80059aa:	4c0e      	ldr	r4, [pc, #56]	; (80059e4 <_tx_initialize_kernel_enter+0x3c>)
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80059b2:	d00a      	beq.n	80059ca <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate
		 initialization is in progress.  Note that this variable is
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80059b4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80059b8:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 80059ba:	f7fa fc39 	bl	8000230 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the
		 ThreadX components and the application's initialization
		 function.  */
		_tx_initialize_high_level();
 80059be:	f000 fe8f 	bl	80066e0 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 80059c2:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <_tx_initialize_kernel_enter+0x40>)
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 80059ca:	4a08      	ldr	r2, [pc, #32]	; (80059ec <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80059cc:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 80059d0:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80059d2:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 80059d4:	f7fb fa0c 	bl	8000df0 <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 80059d8:	2300      	movs	r3, #0
 80059da:	6023      	str	r3, [r4, #0]

#ifdef TX_SAFETY_CRITICAL
    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 80059e0:	f7fa bc76 	b.w	80002d0 <_tx_thread_schedule>
 80059e4:	20000158 	.word	0x20000158
 80059e8:	20000530 	.word	0x20000530
 80059ec:	20000ae0 	.word	0x20000ae0

080059f0 <_tx_thread_identify>:
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80059f0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80059f4:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80059f6:	4a02      	ldr	r2, [pc, #8]	; (8005a00 <_tx_thread_identify+0x10>)
 80059f8:	6810      	ldr	r0, [r2, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80059fa:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 80059fe:	4770      	bx	lr
 8005a00:	20000534 	.word	0x20000534

08005a04 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_thread_initialize(VOID)
{
 8005a04:	b538      	push	{r3, r4, r5, lr}
#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Set current thread pointer to NULL. */
	TX_THREAD_SET_CURRENT(TX_NULL)

	/* Initialize the execute thread pointer to NULL. */
	_tx_thread_execute_ptr = TX_NULL;
 8005a06:	480f      	ldr	r0, [pc, #60]	; (8005a44 <_tx_thread_initialize+0x40>)
	TX_THREAD_SET_CURRENT(TX_NULL)
 8005a08:	2400      	movs	r4, #0

	/* Initialize the priority information. */
	TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <_tx_thread_initialize+0x44>)
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
#endif
#endif
	/* Setup the highest priority variable to the max, indicating no thread is currently
	 ready. */
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8005a0c:	2520      	movs	r5, #32
	_tx_thread_execute_ptr = TX_NULL;
 8005a0e:	6004      	str	r4, [r0, #0]

#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Initialize the array of priority head pointers. */
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005a10:	4621      	mov	r1, r4
	TX_THREAD_SET_CURRENT(TX_NULL)
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <_tx_thread_initialize+0x48>)
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8005a14:	480e      	ldr	r0, [pc, #56]	; (8005a50 <_tx_thread_initialize+0x4c>)
	TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8005a16:	601c      	str	r4, [r3, #0]
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8005a18:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <_tx_thread_initialize+0x50>)
	TX_THREAD_SET_CURRENT(TX_NULL)
 8005a1a:	6014      	str	r4, [r2, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005a1c:	2280      	movs	r2, #128	; 0x80
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8005a1e:	6004      	str	r4, [r0, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005a20:	480d      	ldr	r0, [pc, #52]	; (8005a58 <_tx_thread_initialize+0x54>)
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8005a22:	601d      	str	r5, [r3, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005a24:	f001 fe44 	bl	80076b0 <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

	/* Setup the build options flag. This is used to identify how the ThreadX library was constructed. */
	_tx_build_options = _tx_build_options | (((ULONG)(TX_MAX_PRIORITIES / 32)) << 24)
 8005a28:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <_tx_thread_initialize+0x58>)
	_tx_thread_created_ptr = TX_NULL;
 8005a2a:	490d      	ldr	r1, [pc, #52]	; (8005a60 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
			| (((ULONG)1) << 7)
 8005a2c:	6810      	ldr	r0, [r2, #0]
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <_tx_thread_initialize+0x60>)
	_tx_thread_created_ptr = TX_NULL;
 8005a30:	600c      	str	r4, [r1, #0]
			| (((ULONG)1) << 7)
 8005a32:	4303      	orrs	r3, r0
	_tx_thread_created_count = TX_EMPTY;
 8005a34:	4d0c      	ldr	r5, [pc, #48]	; (8005a68 <_tx_thread_initialize+0x64>)
	_tx_thread_preempt_disable = ((UINT)0);
 8005a36:	480d      	ldr	r0, [pc, #52]	; (8005a6c <_tx_thread_initialize+0x68>)
	_tx_thread_mutex_release = TX_NULL;
 8005a38:	490d      	ldr	r1, [pc, #52]	; (8005a70 <_tx_thread_initialize+0x6c>)
	_tx_thread_created_count = TX_EMPTY;
 8005a3a:	602c      	str	r4, [r5, #0]
	_tx_thread_preempt_disable = ((UINT)0);
 8005a3c:	6004      	str	r4, [r0, #0]
	_tx_thread_mutex_release = TX_NULL;
 8005a3e:	600c      	str	r4, [r1, #0]
	_tx_build_options = _tx_build_options | (((ULONG)(TX_MAX_PRIORITIES / 32)) << 24)
 8005a40:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
			;
}
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000538 	.word	0x20000538
 8005a48:	2000051c 	.word	0x2000051c
 8005a4c:	20000534 	.word	0x20000534
 8005a50:	20000540 	.word	0x20000540
 8005a54:	2000053c 	.word	0x2000053c
 8005a58:	20000498 	.word	0x20000498
 8005a5c:	20000524 	.word	0x20000524
 8005a60:	20000520 	.word	0x20000520
 8005a64:	01000080 	.word	0x01000080
 8005a68:	20000528 	.word	0x20000528
 8005a6c:	20000530 	.word	0x20000530
 8005a70:	20000518 	.word	0x20000518

08005a74 <_tx_thread_sleep>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005a76:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005a7a:	b672      	cpsid	i

	/* Lockout interrupts while the thread is being resumed. */
	TX_DISABLE

	/* Pickup thread pointer. */
	TX_THREAD_GET_CURRENT(thread_ptr)
 8005a7c:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <_tx_thread_sleep+0x5c>)
 8005a7e:	681c      	ldr	r4, [r3, #0]

	/* Determine if this is a legal request. */

	/* Is there a current thread?  */
	if (thread_ptr == TX_NULL)
 8005a80:	b1f4      	cbz	r4, 8005ac0 <_tx_thread_sleep+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005a82:	f3ef 8305 	mrs	r3, IPSR

		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
	/* Is the caller an ISR or Initialization?  */
	else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG)0))
 8005a86:	4913      	ldr	r1, [pc, #76]	; (8005ad4 <_tx_thread_sleep+0x60>)
 8005a88:	6809      	ldr	r1, [r1, #0]
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	d118      	bne.n	8005ac0 <_tx_thread_sleep+0x4c>
		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
#ifndef TX_TIMER_PROCESS_IN_ISR
	/* Is the caller the system timer thread?  */
	else if (thread_ptr == &_tx_timer_thread)
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <_tx_thread_sleep+0x64>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d015      	beq.n	8005ac0 <_tx_thread_sleep+0x4c>
		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
#endif
	/* Determine if the requested number of ticks is zero. */
	else if (timer_ticks == ((ULONG)0))
 8005a94:	b1c0      	cbz	r0, 8005ac8 <_tx_thread_sleep+0x54>
		status = TX_SUCCESS;
	}
	else
	{
		/* Determine if the preempt disable flag is non-zero. */
		if (_tx_thread_preempt_disable != ((UINT)0))
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <_tx_thread_sleep+0x68>)
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	b989      	cbnz	r1, 8005ac0 <_tx_thread_sleep+0x4c>

			/* Setup the timeout period. */
			thread_ptr->tx_thread_timer.tx_timer_internal_remaining_ticks = timer_ticks;

			/* Temporarily disable preemption. */
			_tx_thread_preempt_disable++;
 8005a9c:	681d      	ldr	r5, [r3, #0]
			thread_ptr->tx_thread_suspending = TX_TRUE;
 8005a9e:	2601      	movs	r6, #1
			thread_ptr->tx_thread_state = TX_SLEEP;
 8005aa0:	2704      	movs	r7, #4
			thread_ptr->tx_thread_suspend_status = TX_SUCCESS;
 8005aa2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
			_tx_thread_preempt_disable++;
 8005aa6:	4435      	add	r5, r6
			thread_ptr->tx_thread_timer.tx_timer_internal_remaining_ticks = timer_ticks;
 8005aa8:	64e0      	str	r0, [r4, #76]	; 0x4c
			thread_ptr->tx_thread_state = TX_SLEEP;
 8005aaa:	6327      	str	r7, [r4, #48]	; 0x30
			_tx_thread_preempt_disable++;
 8005aac:	601d      	str	r5, [r3, #0]
			thread_ptr->tx_thread_suspending = TX_TRUE;
 8005aae:	63a6      	str	r6, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005ab0:	f382 8810 	msr	PRIMASK, r2

			/* Restore interrupts. */
			TX_RESTORE

			/* Call actual thread suspension routine. */
			_tx_thread_system_suspend(thread_ptr);
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 f813 	bl	8005ae0 <_tx_thread_system_suspend>
#endif

			/* Return status to the caller. */
			status = thread_ptr->tx_thread_suspend_status;
 8005aba:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
		}
	}

	/* Return completion status. */
	return (status);
}
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac0:	f382 8810 	msr	PRIMASK, r2
			status = TX_CALLER_ERROR;
 8005ac4:	2013      	movs	r0, #19
}
 8005ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac8:	f382 8810 	msr	PRIMASK, r2
 8005acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000534 	.word	0x20000534
 8005ad4:	20000158 	.word	0x20000158
 8005ad8:	200005e0 	.word	0x200005e0
 8005adc:	20000530 	.word	0x20000530

08005ae0 <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8005ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8005ae4:	4b57      	ldr	r3, [pc, #348]	; (8005c44 <_tx_thread_system_suspend+0x164>)
{
 8005ae6:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 8005ae8:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005aea:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005aee:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8005af0:	4285      	cmp	r5, r0
 8005af2:	d060      	beq.n	8005bb6 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005af4:	4a54      	ldr	r2, [pc, #336]	; (8005c48 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8005af6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8005af8:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8005afa:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 8005afc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b00:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8005b02:	d015      	beq.n	8005b30 <_tx_thread_system_suspend+0x50>
 8005b04:	4b51      	ldr	r3, [pc, #324]	; (8005c4c <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005b06:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	42ab      	cmp	r3, r5
 8005b0e:	d00d      	beq.n	8005b2c <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005b10:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8005b12:	b95b      	cbnz	r3, 8005b2c <_tx_thread_system_suspend+0x4c>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005b14:	4b4e      	ldr	r3, [pc, #312]	; (8005c50 <_tx_thread_system_suspend+0x170>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b1c:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8005b20:	b923      	cbnz	r3, 8005b2c <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005b22:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8005b26:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005b28:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 8005b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8005b30:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005b32:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 8005b36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 8005b38:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005b3a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 8005b3e:	d050      	beq.n	8005be2 <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005b40:	4f44      	ldr	r7, [pc, #272]	; (8005c54 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8005b42:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005b46:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8005b4a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005b4e:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 8005b50:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005b54:	d037      	beq.n	8005bc6 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 8005b56:	4b3d      	ldr	r3, [pc, #244]	; (8005c4c <_tx_thread_system_suspend+0x16c>)
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	42a1      	cmp	r1, r4
 8005b5c:	d1d3      	bne.n	8005b06 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005b5e:	483e      	ldr	r0, [pc, #248]	; (8005c58 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005b60:	493e      	ldr	r1, [pc, #248]	; (8005c5c <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005b62:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005b64:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005b66:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8005b6a:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005b6c:	b1ec      	cbz	r4, 8005baa <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 8005b6e:	6814      	ldr	r4, [r2, #0]
 8005b70:	3401      	adds	r4, #1
 8005b72:	6014      	str	r4, [r2, #0]
 8005b74:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005b78:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005b7c:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 8005b7e:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8005b80:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 8005b82:	3c01      	subs	r4, #1
 8005b84:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005b86:	fa95 f4a5 	rbit	r4, r5
 8005b8a:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8005b8e:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 8005b92:	f8d0 c000 	ldr.w	ip, [r0]
 8005b96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b98:	4560      	cmp	r0, ip
 8005b9a:	d806      	bhi.n	8005baa <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005b9c:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8005b9e:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005ba0:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005ba4:	ea25 0504 	bic.w	r5, r5, r4
 8005ba8:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005baa:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005bae:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0af      	beq.n	8005b14 <_tx_thread_system_suspend+0x34>
 8005bb4:	e7ba      	b.n	8005b2c <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 8005bb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	3303      	adds	r3, #3
 8005bbc:	d935      	bls.n	8005c2a <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005bbe:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <_tx_thread_system_suspend+0x180>)
 8005bc0:	69e2      	ldr	r2, [r4, #28]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e796      	b.n	8005af4 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005bc6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8005c5c <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 8005bca:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005bce:	f8dc 3000 	ldr.w	r3, [ip]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0bf      	beq.n	8005b56 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005bd6:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005bd8:	ea23 0301 	bic.w	r3, r3, r1
 8005bdc:	f8cc 3000 	str.w	r3, [ip]
 8005be0:	e7b9      	b.n	8005b56 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005be2:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005c64 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005be6:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005be8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8005c5c <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005bec:	f8de 3000 	ldr.w	r3, [lr]
 8005bf0:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 8005bf2:	4f18      	ldr	r7, [pc, #96]	; (8005c54 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005bf4:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005bf6:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 8005bfa:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005bfe:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005c02:	f1b9 0f00 	cmp.w	r9, #0
 8005c06:	d003      	beq.n	8005c10 <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005c08:	ea01 0109 	and.w	r1, r1, r9
 8005c0c:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 8005c10:	b983      	cbnz	r3, 8005c34 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005c12:	4811      	ldr	r0, [pc, #68]	; (8005c58 <_tx_thread_system_suspend+0x178>)
 8005c14:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 8005c16:	490d      	ldr	r1, [pc, #52]	; (8005c4c <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005c18:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8005c1a:	600b      	str	r3, [r1, #0]
 8005c1c:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005c20:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f43f af76 	beq.w	8005b14 <_tx_thread_system_suspend+0x34>
 8005c28:	e780      	b.n	8005b2c <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8005c2a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8005c2e:	f000 f891 	bl	8005d54 <_tx_timer_system_activate>
 8005c32:	e7c4      	b.n	8005bbe <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005c34:	fa93 f3a3 	rbit	r3, r3
 8005c38:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005c3c:	4906      	ldr	r1, [pc, #24]	; (8005c58 <_tx_thread_system_suspend+0x178>)
 8005c3e:	600b      	str	r3, [r1, #0]
 8005c40:	e789      	b.n	8005b56 <_tx_thread_system_suspend+0x76>
 8005c42:	bf00      	nop
 8005c44:	20000534 	.word	0x20000534
 8005c48:	20000530 	.word	0x20000530
 8005c4c:	20000538 	.word	0x20000538
 8005c50:	e000ed04 	.word	0xe000ed04
 8005c54:	20000498 	.word	0x20000498
 8005c58:	2000053c 	.word	0x2000053c
 8005c5c:	20000540 	.word	0x20000540
 8005c60:	200005d0 	.word	0x200005d0
 8005c64:	2000051c 	.word	0x2000051c

08005c68 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005c6c:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005c6e:	4c26      	ldr	r4, [pc, #152]	; (8005d08 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8005c70:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8005d40 <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005c74:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 8005c76:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8005d44 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005c7a:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005c7c:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005c7e:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005c80:	4f23      	ldr	r7, [pc, #140]	; (8005d10 <_tx_timer_initialize+0xa8>)
{
 8005c82:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 8005c84:	4e23      	ldr	r6, [pc, #140]	; (8005d14 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8005c86:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 8005c8a:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005c8e:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 8005c90:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005c92:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005c94:	f001 fd0c 	bl	80076b0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005c98:	4e1f      	ldr	r6, [pc, #124]	; (8005d18 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005c9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005c9e:	4a1f      	ldr	r2, [pc, #124]	; (8005d1c <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005ca0:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005ca4:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005ca6:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005ca8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005d48 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005cac:	4f1c      	ldr	r7, [pc, #112]	; (8005d20 <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005cae:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005cb0:	4661      	mov	r1, ip
 8005cb2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005d4c <_tx_timer_initialize+0xe4>
 8005cb6:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005cb8:	4e1a      	ldr	r6, [pc, #104]	; (8005d24 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005cba:	4c1b      	ldr	r4, [pc, #108]	; (8005d28 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005cbc:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005cc0:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8005cc4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005d50 <_tx_timer_initialize+0xe8>
 8005cc8:	4f18      	ldr	r7, [pc, #96]	; (8005d2c <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005cca:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8005cce:	4d18      	ldr	r5, [pc, #96]	; (8005d30 <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005cd0:	6020      	str	r0, [r4, #0]
 8005cd2:	e003      	b.n	8005cdc <_tx_timer_initialize+0x74>
 8005cd4:	6831      	ldr	r1, [r6, #0]
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8005cdc:	2000      	movs	r0, #0
 8005cde:	9201      	str	r2, [sp, #4]
 8005ce0:	9100      	str	r1, [sp, #0]
 8005ce2:	463a      	mov	r2, r7
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cea:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8005cee:	464b      	mov	r3, r9
 8005cf0:	4810      	ldr	r0, [pc, #64]	; (8005d34 <_tx_timer_initialize+0xcc>)
 8005cf2:	f001 f897 	bl	8006e24 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d1ec      	bne.n	8005cd4 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8005cfa:	4a0f      	ldr	r2, [pc, #60]	; (8005d38 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 8005cfe:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 8005d00:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8005d02:	b007      	add	sp, #28
 8005d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d08:	2000054c 	.word	0x2000054c
 8005d0c:	200006a8 	.word	0x200006a8
 8005d10:	20000ac0 	.word	0x20000ac0
 8005d14:	200005cc 	.word	0x200005cc
 8005d18:	20000548 	.word	0x20000548
 8005d1c:	200006ac 	.word	0x200006ac
 8005d20:	200005d8 	.word	0x200005d8
 8005d24:	20000ab8 	.word	0x20000ab8
 8005d28:	200006b4 	.word	0x200006b4
 8005d2c:	08005da9 	.word	0x08005da9
 8005d30:	08008820 	.word	0x08008820
 8005d34:	200005e0 	.word	0x200005e0
 8005d38:	200006b0 	.word	0x200006b0
 8005d3c:	20000abc 	.word	0x20000abc
 8005d40:	20000ac4 	.word	0x20000ac4
 8005d44:	200005d0 	.word	0x200005d0
 8005d48:	200006b8 	.word	0x200006b8
 8005d4c:	200005d4 	.word	0x200005d4
 8005d50:	4154494d 	.word	0x4154494d

08005d54 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005d54:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005d56:	1e53      	subs	r3, r2, #1
 8005d58:	1cd9      	adds	r1, r3, #3
 8005d5a:	d900      	bls.n	8005d5e <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 8005d5c:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005d5e:	6981      	ldr	r1, [r0, #24]
 8005d60:	2900      	cmp	r1, #0
 8005d62:	d1fb      	bne.n	8005d5c <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005d64:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005d66:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005d68:	490d      	ldr	r1, [pc, #52]	; (8005da0 <_tx_timer_system_activate+0x4c>)
 8005d6a:	bf94      	ite	ls
 8005d6c:	009b      	lslls	r3, r3, #2
 8005d6e:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005d70:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005d72:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005d74:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005d76:	4299      	cmp	r1, r3
 8005d78:	d803      	bhi.n	8005d82 <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005d7a:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005d7c:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	b132      	cbz	r2, 8005d94 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8005d86:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8005d88:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8005d8a:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8005d8c:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8005d90:	6183      	str	r3, [r0, #24]
}
 8005d92:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005d94:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 8005d98:	6018      	str	r0, [r3, #0]
 8005d9a:	e7f9      	b.n	8005d90 <_tx_timer_system_activate+0x3c>
 8005d9c:	20000548 	.word	0x20000548
 8005da0:	200005d8 	.word	0x200005d8
 8005da4:	200006ac 	.word	0x200006ac

08005da8 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005da8:	4b40      	ldr	r3, [pc, #256]	; (8005eac <_tx_timer_thread_entry+0x104>)
 8005daa:	4298      	cmp	r0, r3
 8005dac:	d000      	beq.n	8005db0 <_tx_timer_thread_entry+0x8>
 8005dae:	4770      	bx	lr
{
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	b083      	sub	sp, #12
 8005db6:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8005ec4 <_tx_timer_thread_entry+0x11c>
 8005dba:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8005ec8 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005dbe:	2600      	movs	r6, #0
 8005dc0:	ad01      	add	r5, sp, #4
 8005dc2:	4c3b      	ldr	r4, [pc, #236]	; (8005eb0 <_tx_timer_thread_entry+0x108>)
 8005dc4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8005ebc <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005dc8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005dcc:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 8005dce:	f8db 3000 	ldr.w	r3, [fp]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 8005dd6:	b10a      	cbz	r2, 8005ddc <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005dd8:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005ddc:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 8005de0:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005de4:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005de6:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005dea:	d059      	beq.n	8005ea0 <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005dec:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <_tx_timer_thread_entry+0x10c>)
 8005dee:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005df0:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005df4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005df8:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005dfa:	9f00      	ldr	r7, [sp, #0]
 8005dfc:	b9b7      	cbnz	r7, 8005e2c <_tx_timer_thread_entry+0x84>
 8005dfe:	e034      	b.n	8005e6a <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005e00:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005e02:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005e04:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8005e06:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005e08:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005e0a:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e0c:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005e10:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005e14:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005e16:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005e18:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 8005e1a:	42b8      	cmp	r0, r7
 8005e1c:	d02b      	beq.n	8005e76 <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e1e:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005e22:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005e26:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8005e28:	9f00      	ldr	r7, [sp, #0]
 8005e2a:	b1f7      	cbz	r7, 8005e6a <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005e2c:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 8005e2e:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 8005e30:	42ba      	cmp	r2, r7
 8005e32:	d018      	beq.n	8005e66 <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005e34:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 8005e36:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005e38:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005e3a:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005e3c:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	2a20      	cmp	r2, #32
 8005e44:	d8dc      	bhi.n	8005e00 <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005e46:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005e48:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005e4c:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005e4e:	b113      	cbz	r3, 8005e56 <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005e50:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005e52:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 8005e54:	9701      	str	r7, [sp, #4]
 8005e56:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 8005e58:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e5a:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d0d6      	beq.n	8005e10 <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 8005e62:	4790      	blx	r2
 8005e64:	e7d4      	b.n	8005e10 <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 8005e66:	9600      	str	r6, [sp, #0]
 8005e68:	e7ea      	b.n	8005e40 <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005e6a:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <_tx_timer_thread_entry+0x10c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	b13b      	cbz	r3, 8005e80 <_tx_timer_thread_entry+0xd8>
 8005e70:	f38c 8810 	msr	PRIMASK, ip
 8005e74:	e7a8      	b.n	8005dc8 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8005e76:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7ff ff6b 	bl	8005d54 <_tx_timer_system_activate>
 8005e7e:	e7ce      	b.n	8005e1e <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005e80:	490d      	ldr	r1, [pc, #52]	; (8005eb8 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005e82:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005e84:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 8005e86:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005e88:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 8005e8c:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005e8e:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 8005e92:	600b      	str	r3, [r1, #0]
 8005e94:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005e98:	4808      	ldr	r0, [pc, #32]	; (8005ebc <_tx_timer_thread_entry+0x114>)
 8005e9a:	f7ff fe21 	bl	8005ae0 <_tx_thread_system_suspend>
 8005e9e:	e793      	b.n	8005dc8 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <_tx_timer_thread_entry+0x118>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8cb 3000 	str.w	r3, [fp]
 8005ea8:	e7a0      	b.n	8005dec <_tx_timer_thread_entry+0x44>
 8005eaa:	bf00      	nop
 8005eac:	4154494d 	.word	0x4154494d
 8005eb0:	200006a8 	.word	0x200006a8
 8005eb4:	200005cc 	.word	0x200005cc
 8005eb8:	20000530 	.word	0x20000530
 8005ebc:	200005e0 	.word	0x200005e0
 8005ec0:	200006ac 	.word	0x200006ac
 8005ec4:	20000548 	.word	0x20000548
 8005ec8:	200005d8 	.word	0x200005d8

08005ecc <_txe_event_flags_create>:
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8005ecc:	2a28      	cmp	r2, #40	; 0x28
 8005ece:	d140      	bne.n	8005f52 <_txe_event_flags_create+0x86>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d03e      	beq.n	8005f52 <_txe_event_flags_create+0x86>
{
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005ed6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005eda:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005edc:	4f23      	ldr	r7, [pc, #140]	; (8005f6c <_txe_event_flags_create+0xa0>)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005ee4:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8005ee8:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <_txe_event_flags_create+0xa4>)
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005eea:	4b22      	ldr	r3, [pc, #136]	; (8005f74 <_txe_event_flags_create+0xa8>)
        next_group =   _tx_event_flags_created_ptr;
 8005eec:	6814      	ldr	r4, [r2, #0]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005eee:	681a      	ldr	r2, [r3, #0]
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d00a      	beq.n	8005f0a <_txe_event_flags_create+0x3e>
 8005ef4:	fab2 f382 	clz	r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	b113      	cbz	r3, 8005f02 <_txe_event_flags_create+0x36>
 8005efc:	e005      	b.n	8005f0a <_txe_event_flags_create+0x3e>
 8005efe:	42a0      	cmp	r0, r4
 8005f00:	d003      	beq.n	8005f0a <_txe_event_flags_create+0x3e>
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005f02:	3301      	adds	r3, #1
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8005f04:	69a4      	ldr	r4, [r4, #24]
            if (group_ptr == next_group)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d3f9      	bcc.n	8005efe <_txe_event_flags_create+0x32>
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005f0e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005f12:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005f1a:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005f1e:	f001 f8e7 	bl	80070f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8005f22:	42a5      	cmp	r5, r4
 8005f24:	d01f      	beq.n	8005f66 <_txe_event_flags_create+0x9a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <_txe_event_flags_create+0xac>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005f28:	4814      	ldr	r0, [pc, #80]	; (8005f7c <_txe_event_flags_create+0xb0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005f2c:	4283      	cmp	r3, r0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2013      	moveq	r0, #19
 8005f32:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005f34:	f3ef 8205 	mrs	r2, IPSR
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <_txe_event_flags_create+0xb4>)
 8005f3a:	6819      	ldr	r1, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	d00a      	beq.n	8005f56 <_txe_event_flags_create+0x8a>
 8005f40:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005f4c:	d203      	bcs.n	8005f56 <_txe_event_flags_create+0x8a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005f4e:	2013      	movs	r0, #19
        status =  _tx_event_flags_create(group_ptr, name_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status =  TX_GROUP_ERROR;
 8005f52:	2006      	movs	r0, #6
}
 8005f54:	4770      	bx	lr
    if (status == TX_SUCCESS)
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d1fa      	bne.n	8005f50 <_txe_event_flags_create+0x84>
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
}
 8005f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8005f62:	f000 bad5 	b.w	8006510 <_tx_event_flags_create>
        status =  TX_GROUP_ERROR;
 8005f66:	2006      	movs	r0, #6
}
 8005f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000530 	.word	0x20000530
 8005f70:	20000ac8 	.word	0x20000ac8
 8005f74:	20000aec 	.word	0x20000aec
 8005f78:	20000534 	.word	0x20000534
 8005f7c:	200005e0 	.word	0x200005e0
 8005f80:	20000158 	.word	0x20000158

08005f84 <_txe_event_flags_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8005f84:	b180      	cbz	r0, 8005fa8 <_txe_event_flags_delete+0x24>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8005f86:	6802      	ldr	r2, [r0, #0]
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_txe_event_flags_delete+0x2c>)
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d10c      	bne.n	8005fa8 <_txe_event_flags_delete+0x24>
 8005f8e:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <_txe_event_flags_delete+0x30>)
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d108      	bne.n	8005fac <_txe_event_flags_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005f9a:	4a07      	ldr	r2, [pc, #28]	; (8005fb8 <_txe_event_flags_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <_txe_event_flags_delete+0x38>)
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d003      	beq.n	8005fac <_txe_event_flags_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 8005fa4:	f000 badc 	b.w	8006560 <_tx_event_flags_delete>
        status =  TX_GROUP_ERROR;
 8005fa8:	2006      	movs	r0, #6
 8005faa:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8005fac:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 8005fae:	4770      	bx	lr
 8005fb0:	4456444e 	.word	0x4456444e
 8005fb4:	20000158 	.word	0x20000158
 8005fb8:	20000534 	.word	0x20000534
 8005fbc:	200005e0 	.word	0x200005e0

08005fc0 <_txe_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8005fc0:	b470      	push	{r4, r5, r6}
 8005fc2:	9c03      	ldr	r4, [sp, #12]

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8005fc4:	b118      	cbz	r0, 8005fce <_txe_event_flags_get+0xe>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8005fc6:	4d10      	ldr	r5, [pc, #64]	; (8006008 <_txe_event_flags_get+0x48>)
 8005fc8:	6806      	ldr	r6, [r0, #0]
 8005fca:	42ae      	cmp	r6, r5
 8005fcc:	d002      	beq.n	8005fd4 <_txe_event_flags_get+0x14>
        status =  TX_GROUP_ERROR;
 8005fce:	2006      	movs	r0, #6
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8005fd0:	bc70      	pop	{r4, r5, r6}
 8005fd2:	4770      	bx	lr
    else if (actual_flags_ptr == TX_NULL)
 8005fd4:	b143      	cbz	r3, 8005fe8 <_txe_event_flags_get+0x28>
        if (wait_option != TX_NO_WAIT)
 8005fd6:	b174      	cbz	r4, 8005ff6 <_txe_event_flags_get+0x36>
 8005fd8:	f3ef 8505 	mrs	r5, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005fdc:	4e0b      	ldr	r6, [pc, #44]	; (800600c <_txe_event_flags_get+0x4c>)
 8005fde:	6836      	ldr	r6, [r6, #0]
 8005fe0:	4335      	orrs	r5, r6
 8005fe2:	d003      	beq.n	8005fec <_txe_event_flags_get+0x2c>
                status =  TX_WAIT_ERROR;
 8005fe4:	2004      	movs	r0, #4
 8005fe6:	e7f3      	b.n	8005fd0 <_txe_event_flags_get+0x10>
        status =  TX_PTR_ERROR;
 8005fe8:	2003      	movs	r0, #3
 8005fea:	e7f1      	b.n	8005fd0 <_txe_event_flags_get+0x10>
                TX_THREAD_GET_CURRENT(current_thread)
 8005fec:	4e08      	ldr	r6, [pc, #32]	; (8006010 <_txe_event_flags_get+0x50>)
                if (current_thread == &_tx_timer_thread)
 8005fee:	4d09      	ldr	r5, [pc, #36]	; (8006014 <_txe_event_flags_get+0x54>)
 8005ff0:	6836      	ldr	r6, [r6, #0]
 8005ff2:	42ae      	cmp	r6, r5
 8005ff4:	d0f6      	beq.n	8005fe4 <_txe_event_flags_get+0x24>
        if (get_option > TX_AND_CLEAR)
 8005ff6:	2a03      	cmp	r2, #3
 8005ff8:	d803      	bhi.n	8006002 <_txe_event_flags_get+0x42>
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8005ffa:	9403      	str	r4, [sp, #12]
}
 8005ffc:	bc70      	pop	{r4, r5, r6}
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8005ffe:	f000 bafd 	b.w	80065fc <_tx_event_flags_get>
            status =  TX_OPTION_ERROR;
 8006002:	2008      	movs	r0, #8
    return(status);
 8006004:	e7e4      	b.n	8005fd0 <_txe_event_flags_get+0x10>
 8006006:	bf00      	nop
 8006008:	4456444e 	.word	0x4456444e
 800600c:	20000158 	.word	0x20000158
 8006010:	20000534 	.word	0x20000534
 8006014:	200005e0 	.word	0x200005e0

08006018 <_txe_mutex_create>:
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8006018:	b108      	cbz	r0, 800601e <_txe_mutex_create+0x6>
 800601a:	2b34      	cmp	r3, #52	; 0x34
 800601c:	d001      	beq.n	8006022 <_txe_mutex_create+0xa>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800601e:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 8006020:	4770      	bx	lr
{
 8006022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006026:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800602a:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 800602c:	4f29      	ldr	r7, [pc, #164]	; (80060d4 <_txe_mutex_create+0xbc>)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006034:	f384 8810 	msr	PRIMASK, r4
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8006038:	4c27      	ldr	r4, [pc, #156]	; (80060d8 <_txe_mutex_create+0xc0>)
        next_mutex =   _tx_mutex_created_ptr;
 800603a:	4b28      	ldr	r3, [pc, #160]	; (80060dc <_txe_mutex_create+0xc4>)
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800603c:	6825      	ldr	r5, [r4, #0]
        next_mutex =   _tx_mutex_created_ptr;
 800603e:	681c      	ldr	r4, [r3, #0]
            if (mutex_ptr == next_mutex)
 8006040:	b15d      	cbz	r5, 800605a <_txe_mutex_create+0x42>
 8006042:	1b03      	subs	r3, r0, r4
 8006044:	fab3 f383 	clz	r3, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	b113      	cbz	r3, 8006052 <_txe_mutex_create+0x3a>
 800604c:	e005      	b.n	800605a <_txe_mutex_create+0x42>
 800604e:	42ab      	cmp	r3, r5
 8006050:	d203      	bcs.n	800605a <_txe_mutex_create+0x42>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8006052:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8006054:	3301      	adds	r3, #1
            if (mutex_ptr == next_mutex)
 8006056:	42a0      	cmp	r0, r4
 8006058:	d1f9      	bne.n	800604e <_txe_mutex_create+0x36>
 800605a:	4605      	mov	r5, r0
 800605c:	4616      	mov	r6, r2
 800605e:	4688      	mov	r8, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006060:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006064:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	3b01      	subs	r3, #1
 800606a:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800606c:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8006070:	f001 f83e 	bl	80070f0 <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 8006074:	42a5      	cmp	r5, r4
 8006076:	d015      	beq.n	80060a4 <_txe_mutex_create+0x8c>
                if (inherit != TX_NO_INHERIT)
 8006078:	2e01      	cmp	r6, #1
 800607a:	d81d      	bhi.n	80060b8 <_txe_mutex_create+0xa0>
        TX_THREAD_GET_CURRENT(thread_ptr)
 800607c:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <_txe_mutex_create+0xc8>)
        if (thread_ptr == &_tx_timer_thread)
 800607e:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <_txe_mutex_create+0xcc>)
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d01a      	beq.n	80060bc <_txe_mutex_create+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006086:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800608a:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <_txe_mutex_create+0xd0>)
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	d00b      	beq.n	80060aa <_txe_mutex_create+0x92>
 8006092:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800609e:	d204      	bcs.n	80060aa <_txe_mutex_create+0x92>
            status =  TX_CALLER_ERROR;
 80060a0:	2013      	movs	r0, #19
    return(status);
 80060a2:	e000      	b.n	80060a6 <_txe_mutex_create+0x8e>
        status =  TX_MUTEX_ERROR;
 80060a4:	201c      	movs	r0, #28
}
 80060a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80060aa:	4632      	mov	r2, r6
 80060ac:	4641      	mov	r1, r8
 80060ae:	4628      	mov	r0, r5
}
 80060b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80060b4:	f000 bb4c 	b.w	8006750 <_tx_mutex_create>
                    status =  TX_INHERIT_ERROR;
 80060b8:	201f      	movs	r0, #31
 80060ba:	e7f4      	b.n	80060a6 <_txe_mutex_create+0x8e>
 80060bc:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060c0:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <_txe_mutex_create+0xd0>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	d0eb      	beq.n	80060a0 <_txe_mutex_create+0x88>
 80060c8:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 80060cc:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	e7e9      	b.n	80060a6 <_txe_mutex_create+0x8e>
 80060d2:	bf00      	nop
 80060d4:	20000530 	.word	0x20000530
 80060d8:	20000acc 	.word	0x20000acc
 80060dc:	20000ad0 	.word	0x20000ad0
 80060e0:	20000534 	.word	0x20000534
 80060e4:	200005e0 	.word	0x200005e0
 80060e8:	20000158 	.word	0x20000158

080060ec <_txe_mutex_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80060ec:	b180      	cbz	r0, 8006110 <_txe_mutex_delete+0x24>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80060ee:	6802      	ldr	r2, [r0, #0]
 80060f0:	4b09      	ldr	r3, [pc, #36]	; (8006118 <_txe_mutex_delete+0x2c>)
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d10c      	bne.n	8006110 <_txe_mutex_delete+0x24>
 80060f6:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <_txe_mutex_delete+0x30>)
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	4313      	orrs	r3, r2
 8006100:	d108      	bne.n	8006114 <_txe_mutex_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006102:	4a07      	ldr	r2, [pc, #28]	; (8006120 <_txe_mutex_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <_txe_mutex_delete+0x38>)
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d003      	beq.n	8006114 <_txe_mutex_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800610c:	f000 bb50 	b.w	80067b0 <_tx_mutex_delete>
        status =  TX_MUTEX_ERROR;
 8006110:	201c      	movs	r0, #28
 8006112:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8006114:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 8006116:	4770      	bx	lr
 8006118:	4d555445 	.word	0x4d555445
 800611c:	20000158 	.word	0x20000158
 8006120:	20000534 	.word	0x20000534
 8006124:	200005e0 	.word	0x200005e0

08006128 <_txe_mutex_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8006128:	b118      	cbz	r0, 8006132 <_txe_mutex_get+0xa>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <_txe_mutex_get+0x58>)
 800612c:	6802      	ldr	r2, [r0, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d001      	beq.n	8006136 <_txe_mutex_get+0xe>
        status =  TX_MUTEX_ERROR;
 8006132:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8006134:	4770      	bx	lr
{
 8006136:	b410      	push	{r4}
        if (wait_option != TX_NO_WAIT)
 8006138:	b981      	cbnz	r1, 800615c <_txe_mutex_get+0x34>
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <_txe_mutex_get+0x5c>)
 800613c:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006140:	681c      	ldr	r4, [r3, #0]
 8006142:	4322      	orrs	r2, r4
 8006144:	d006      	beq.n	8006154 <_txe_mutex_get+0x2c>
 8006146:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4313      	orrs	r3, r2
 800614e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006152:	d312      	bcc.n	800617a <_txe_mutex_get+0x52>
}
 8006154:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8006158:	f000 bb84 	b.w	8006864 <_tx_mutex_get>
 800615c:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <_txe_mutex_get+0x5c>)
 8006162:	681c      	ldr	r4, [r3, #0]
 8006164:	4322      	orrs	r2, r4
 8006166:	d104      	bne.n	8006172 <_txe_mutex_get+0x4a>
                TX_THREAD_GET_CURRENT(current_thread)
 8006168:	4c07      	ldr	r4, [pc, #28]	; (8006188 <_txe_mutex_get+0x60>)
                if (current_thread == &_tx_timer_thread)
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <_txe_mutex_get+0x64>)
 800616c:	6824      	ldr	r4, [r4, #0]
 800616e:	4294      	cmp	r4, r2
 8006170:	d1e4      	bne.n	800613c <_txe_mutex_get+0x14>
                status =  TX_WAIT_ERROR;
 8006172:	2004      	movs	r0, #4
}
 8006174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006178:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 800617a:	2013      	movs	r0, #19
    return(status);
 800617c:	e7fa      	b.n	8006174 <_txe_mutex_get+0x4c>
 800617e:	bf00      	nop
 8006180:	4d555445 	.word	0x4d555445
 8006184:	20000158 	.word	0x20000158
 8006188:	20000534 	.word	0x20000534
 800618c:	200005e0 	.word	0x200005e0

08006190 <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8006190:	b190      	cbz	r0, 80061b8 <_txe_mutex_put+0x28>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <_txe_mutex_put+0x30>)
 8006194:	6802      	ldr	r2, [r0, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d10e      	bne.n	80061b8 <_txe_mutex_put+0x28>
 800619a:	f3ef 8305 	mrs	r3, IPSR
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800619e:	4a09      	ldr	r2, [pc, #36]	; (80061c4 <_txe_mutex_put+0x34>)
 80061a0:	6811      	ldr	r1, [r2, #0]
 80061a2:	430b      	orrs	r3, r1
 80061a4:	d006      	beq.n	80061b4 <_txe_mutex_put+0x24>
 80061a6:	f3ef 8105 	mrs	r1, IPSR
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	430b      	orrs	r3, r1
 80061ae:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80061b2:	d303      	bcc.n	80061bc <_txe_mutex_put+0x2c>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80061b4:	f000 bc40 	b.w	8006a38 <_tx_mutex_put>
        status =  TX_MUTEX_ERROR;
 80061b8:	201c      	movs	r0, #28
 80061ba:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 80061bc:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 80061be:	4770      	bx	lr
 80061c0:	4d555445 	.word	0x4d555445
 80061c4:	20000158 	.word	0x20000158

080061c8 <_txe_semaphore_create>:
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d100      	bne.n	80061ce <_txe_semaphore_create+0x6>
 80061cc:	b908      	cbnz	r0, 80061d2 <_txe_semaphore_create+0xa>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80061ce:	200c      	movs	r0, #12
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
    }

    /* Return completion status.  */
    return(status);
}
 80061d0:	4770      	bx	lr
{
 80061d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80061d6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80061da:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 80061dc:	4e21      	ldr	r6, [pc, #132]	; (8006264 <_txe_semaphore_create+0x9c>)
 80061de:	6833      	ldr	r3, [r6, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80061e4:	f384 8810 	msr	PRIMASK, r4
        next_semaphore =  _tx_semaphore_created_ptr;
 80061e8:	4c1f      	ldr	r4, [pc, #124]	; (8006268 <_txe_semaphore_create+0xa0>)
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80061ea:	4b20      	ldr	r3, [pc, #128]	; (800626c <_txe_semaphore_create+0xa4>)
        next_semaphore =  _tx_semaphore_created_ptr;
 80061ec:	6824      	ldr	r4, [r4, #0]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80061ee:	681d      	ldr	r5, [r3, #0]
            if (semaphore_ptr == next_semaphore)
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d00a      	beq.n	800620a <_txe_semaphore_create+0x42>
 80061f4:	fab5 f385 	clz	r3, r5
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	b113      	cbz	r3, 8006202 <_txe_semaphore_create+0x3a>
 80061fc:	e005      	b.n	800620a <_txe_semaphore_create+0x42>
 80061fe:	42a0      	cmp	r0, r4
 8006200:	d003      	beq.n	800620a <_txe_semaphore_create+0x42>
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8006202:	3301      	adds	r3, #1
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8006204:	6964      	ldr	r4, [r4, #20]
            if (semaphore_ptr == next_semaphore)
 8006206:	42ab      	cmp	r3, r5
 8006208:	d3f9      	bcc.n	80061fe <_txe_semaphore_create+0x36>
 800620a:	4615      	mov	r5, r2
 800620c:	4688      	mov	r8, r1
 800620e:	4607      	mov	r7, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006210:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006214:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8006216:	6833      	ldr	r3, [r6, #0]
 8006218:	3b01      	subs	r3, #1
 800621a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800621c:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8006220:	f000 ff66 	bl	80070f0 <_tx_thread_system_preempt_check>
        if (semaphore_ptr == next_semaphore)
 8006224:	42a7      	cmp	r7, r4
 8006226:	d018      	beq.n	800625a <_txe_semaphore_create+0x92>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006228:	4a11      	ldr	r2, [pc, #68]	; (8006270 <_txe_semaphore_create+0xa8>)
            if (thread_ptr == &_tx_timer_thread)
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <_txe_semaphore_create+0xac>)
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d016      	beq.n	8006260 <_txe_semaphore_create+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006232:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <_txe_semaphore_create+0xb0>)
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	d006      	beq.n	800624c <_txe_semaphore_create+0x84>
 800623e:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4313      	orrs	r3, r2
 8006246:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800624a:	d309      	bcc.n	8006260 <_txe_semaphore_create+0x98>
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800624c:	462a      	mov	r2, r5
 800624e:	4641      	mov	r1, r8
 8006250:	4638      	mov	r0, r7
}
 8006252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8006256:	f000 bcf9 	b.w	8006c4c <_tx_semaphore_create>
        status =  TX_SEMAPHORE_ERROR;
 800625a:	200c      	movs	r0, #12
}
 800625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                status =  TX_CALLER_ERROR;
 8006260:	2013      	movs	r0, #19
    return(status);
 8006262:	e7fb      	b.n	800625c <_txe_semaphore_create+0x94>
 8006264:	20000530 	.word	0x20000530
 8006268:	20000ad8 	.word	0x20000ad8
 800626c:	20000ae8 	.word	0x20000ae8
 8006270:	20000534 	.word	0x20000534
 8006274:	200005e0 	.word	0x200005e0
 8006278:	20000158 	.word	0x20000158

0800627c <_txe_semaphore_delete>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800627c:	b180      	cbz	r0, 80062a0 <_txe_semaphore_delete+0x24>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800627e:	6802      	ldr	r2, [r0, #0]
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <_txe_semaphore_delete+0x2c>)
 8006282:	429a      	cmp	r2, r3
 8006284:	d10c      	bne.n	80062a0 <_txe_semaphore_delete+0x24>
 8006286:	f3ef 8305 	mrs	r3, IPSR
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <_txe_semaphore_delete+0x30>)
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	d108      	bne.n	80062a4 <_txe_semaphore_delete+0x28>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006292:	4a07      	ldr	r2, [pc, #28]	; (80062b0 <_txe_semaphore_delete+0x34>)

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <_txe_semaphore_delete+0x38>)
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d003      	beq.n	80062a4 <_txe_semaphore_delete+0x28>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800629c:	f000 bd00 	b.w	8006ca0 <_tx_semaphore_delete>
        status =  TX_SEMAPHORE_ERROR;
 80062a0:	200c      	movs	r0, #12
 80062a2:	4770      	bx	lr
            status =  TX_CALLER_ERROR;
 80062a4:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 80062a6:	4770      	bx	lr
 80062a8:	53454d41 	.word	0x53454d41
 80062ac:	20000158 	.word	0x20000158
 80062b0:	20000534 	.word	0x20000534
 80062b4:	200005e0 	.word	0x200005e0

080062b8 <_txe_semaphore_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80062b8:	b188      	cbz	r0, 80062de <_txe_semaphore_get+0x26>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <_txe_semaphore_get+0x30>)
 80062bc:	6802      	ldr	r2, [r0, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d10d      	bne.n	80062de <_txe_semaphore_get+0x26>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80062c2:	b151      	cbz	r1, 80062da <_txe_semaphore_get+0x22>
 80062c4:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80062c8:	4a08      	ldr	r2, [pc, #32]	; (80062ec <_txe_semaphore_get+0x34>)
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d108      	bne.n	80062e2 <_txe_semaphore_get+0x2a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80062d0:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <_txe_semaphore_get+0x38>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80062d2:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <_txe_semaphore_get+0x3c>)
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d003      	beq.n	80062e2 <_txe_semaphore_get+0x2a>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 80062da:	f000 bd2f 	b.w	8006d3c <_tx_semaphore_get>
        status =  TX_SEMAPHORE_ERROR;
 80062de:	200c      	movs	r0, #12
 80062e0:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 80062e2:	2004      	movs	r0, #4
    }

    /* Return completion status.  */
    return(status);
}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	53454d41 	.word	0x53454d41
 80062ec:	20000158 	.word	0x20000158
 80062f0:	20000534 	.word	0x20000534
 80062f4:	200005e0 	.word	0x200005e0

080062f8 <_txe_semaphore_put>:

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80062f8:	b118      	cbz	r0, 8006302 <_txe_semaphore_put+0xa>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80062fa:	6802      	ldr	r2, [r0, #0]
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <_txe_semaphore_put+0x14>)
 80062fe:	429a      	cmp	r2, r3
 8006300:	d001      	beq.n	8006306 <_txe_semaphore_put+0xe>
        status =  _tx_semaphore_put(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8006302:	200c      	movs	r0, #12
 8006304:	4770      	bx	lr
        status =  _tx_semaphore_put(semaphore_ptr);
 8006306:	f000 bd5b 	b.w	8006dc0 <_tx_semaphore_put>
 800630a:	bf00      	nop
 800630c:	53454d41 	.word	0x53454d41

08006310 <_txe_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr, VOID (*entry_function)(ULONG id),
		ULONG entry_input, VOID* stack_start, ULONG stack_size, UINT priority,
		UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	b085      	sub	sp, #20
 8006316:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 800631a:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800631e:	9401      	str	r4, [sp, #4]
 8006320:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006322:	9403      	str	r4, [sp, #12]
 8006324:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006326:	9402      	str	r4, [sp, #8]
 8006328:	9c14      	ldr	r4, [sp, #80]	; 0x50
	{
		/* Thread pointer is invalid, return appropriate error code.  */
		status = TX_THREAD_ERROR;
	}
	/* Now check for invalid thread control block size.  */
	else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800632a:	2800      	cmp	r0, #0
 800632c:	d079      	beq.n	8006422 <_txe_thread_create+0x112>
 800632e:	2cc8      	cmp	r4, #200	; 0xc8
 8006330:	d177      	bne.n	8006422 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006332:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006336:	b672      	cpsid	i
	{
		/* Disable interrupts.  */
		TX_DISABLE

		/* Increment the preempt disable flag.  */
		_tx_thread_preempt_disable++;
 8006338:	f8df e140 	ldr.w	lr, [pc, #320]	; 800647c <_txe_thread_create+0x16c>
 800633c:	f8de 4000 	ldr.w	r4, [lr]
 8006340:	3401      	adds	r4, #1
 8006342:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006346:	f385 8810 	msr	PRIMASK, r5
		/* Restore interrupts.  */
		TX_RESTORE

		/* Next see if it is already in the created list.  */
		break_flag = TX_FALSE;
		next_thread = _tx_thread_created_ptr;
 800634a:	4c47      	ldr	r4, [pc, #284]	; (8006468 <_txe_thread_create+0x158>)
		work_ptr = TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
		work_ptr = TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG ) 1)));
 800634c:	f108 3cff 	add.w	ip, r8, #4294967295
		stack_end = TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 8006350:	4d46      	ldr	r5, [pc, #280]	; (800646c <_txe_thread_create+0x15c>)
		next_thread = _tx_thread_created_ptr;
 8006352:	6824      	ldr	r4, [r4, #0]
		work_ptr = TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG ) 1)));
 8006354:	44bc      	add	ip, r7
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 8006356:	f8d5 b000 	ldr.w	fp, [r5]
		{
			/* Determine if this thread matches the thread in the list.  */
			if (thread_ptr == next_thread)
 800635a:	1b05      	subs	r5, r0, r4
 800635c:	fab5 f585 	clz	r5, r5
 8006360:	096d      	lsrs	r5, r5, #5
 8006362:	f1bb 0f00 	cmp.w	fp, #0
 8006366:	bf08      	it	eq
 8006368:	2501      	moveq	r5, #1
				/* Set the break flag.  */
				break_flag = TX_TRUE;
			}

			/* Determine if we need to break the loop.  */
			if (break_flag == TX_TRUE)
 800636a:	b985      	cbnz	r5, 800638e <_txe_thread_create+0x7e>
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 800636c:	469a      	mov	sl, r3
				/* Yes, break out of the loop.  */
				break;
			}

			/* Check the stack pointer to see if it overlaps with this thread's stack.  */
			if (stack_start >= next_thread->tx_thread_stack_start)
 800636e:	68e6      	ldr	r6, [r4, #12]
 8006370:	42be      	cmp	r6, r7
 8006372:	d865      	bhi.n	8006440 <_txe_thread_create+0x130>
			{
				if (stack_start < next_thread->tx_thread_stack_end)
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	42bb      	cmp	r3, r7
 8006378:	d962      	bls.n	8006440 <_txe_thread_create+0x130>
					break_flag = TX_TRUE;
				}
			}

			/* Check the end of the stack to see if it is inside this thread's stack area as well.  */
			if (stack_end >= next_thread->tx_thread_stack_start)
 800637a:	4566      	cmp	r6, ip
 800637c:	d803      	bhi.n	8006386 <_txe_thread_create+0x76>
 800637e:	2601      	movs	r6, #1
					stack_start = TX_NULL;
 8006380:	2700      	movs	r7, #0
			{
				if (stack_end < next_thread->tx_thread_stack_end)
 8006382:	4563      	cmp	r3, ip
 8006384:	d951      	bls.n	800642a <_txe_thread_create+0x11a>
 8006386:	4653      	mov	r3, sl
					break_flag = TX_TRUE;
				}
			}

			/* Move to the next thread.  */
			next_thread = next_thread->tx_thread_created_next;
 8006388:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
					stack_start = TX_NULL;
 800638c:	2700      	movs	r7, #0
 800638e:	4605      	mov	r5, r0
 8006390:	469a      	mov	sl, r3
 8006392:	4616      	mov	r6, r2
 8006394:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006396:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800639a:	b672      	cpsid	i

		/* Disable interrupts.  */
		TX_DISABLE

		/* Decrement the preempt disable flag.  */
		_tx_thread_preempt_disable--;
 800639c:	f8de 3000 	ldr.w	r3, [lr]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80063a6:	f382 8810 	msr	PRIMASK, r2

		/* Restore interrupts.  */
		TX_RESTORE

		/* Check for preemption.  */
		_tx_thread_system_preempt_check();
 80063aa:	f000 fea1 	bl	80070f0 <_tx_thread_system_preempt_check>

		/* At this point, check to see if there is a duplicate thread.  */
		if (thread_ptr == next_thread)
 80063ae:	42a5      	cmp	r5, r4
 80063b0:	d037      	beq.n	8006422 <_txe_thread_create+0x112>
		{
			/* Invalid stack or entry point, return appropriate error code.  */
			status = TX_PTR_ERROR;
		}
		/* Check for invalid thread entry point.  */
		else if (entry_function == TX_NULL)
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	d04c      	beq.n	8006450 <_txe_thread_create+0x140>
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d04a      	beq.n	8006450 <_txe_thread_create+0x140>
		{
			/* Invalid stack or entry point, return appropriate error code.  */
			status = TX_PTR_ERROR;
		}
		/* Check the stack size.  */
		else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80063ba:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 80063be:	d945      	bls.n	800644c <_txe_thread_create+0x13c>
		{
			/* Stack is not big enough, return appropriate error code.  */
			status = TX_SIZE_ERROR;
		}
		/* Check the priority specified.  */
		else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80063c0:	f1b9 0f1f 	cmp.w	r9, #31
 80063c4:	d848      	bhi.n	8006458 <_txe_thread_create+0x148>
		{
			/* Invalid priority selected, return appropriate error code.  */
			status = TX_PRIORITY_ERROR;
		}
		/* Check preemption threshold. */
		else if (preempt_threshold > priority)
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	4599      	cmp	r9, r3
 80063ca:	d34b      	bcc.n	8006464 <_txe_thread_create+0x154>
		{
			/* Invalid preempt threshold, return appropriate error code.  */
			status = TX_THRESH_ERROR;
		}
		/* Check the start selection.  */
		else if (auto_start > TX_AUTO_START)
 80063cc:	9b02      	ldr	r3, [sp, #8]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d844      	bhi.n	800645c <_txe_thread_create+0x14c>
		}
		else
		{
#ifndef TX_TIMER_PROCESS_IN_ISR
			/* Pickup thread pointer.  */
			TX_THREAD_GET_CURRENT(current_thread)
 80063d2:	4a27      	ldr	r2, [pc, #156]	; (8006470 <_txe_thread_create+0x160>)

			/* Check for invalid caller of this function.  First check for a calling thread.  */
			if (current_thread == &_tx_timer_thread)
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <_txe_thread_create+0x164>)
 80063d6:	6810      	ldr	r0, [r2, #0]
	status = TX_SUCCESS;
 80063d8:	4298      	cmp	r0, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2013      	moveq	r0, #19
 80063de:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80063e0:	f3ef 8205 	mrs	r2, IPSR
				status = TX_CALLER_ERROR;
			}
#endif

			/* Check for interrupt call.  */
			if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG)0))
 80063e4:	4b24      	ldr	r3, [pc, #144]	; (8006478 <_txe_thread_create+0x168>)
 80063e6:	6819      	ldr	r1, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	d006      	beq.n	80063fa <_txe_thread_create+0xea>
 80063ec:	f3ef 8205 	mrs	r2, IPSR
			{
				/* Now, make sure the call is from an interrupt and not initialization.  */
				if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80063f8:	d332      	bcc.n	8006460 <_txe_thread_create+0x150>
			}
		}
	}

	/* Determine if everything is okay.  */
	if (status == TX_SUCCESS)
 80063fa:	b998      	cbnz	r0, 8006424 <_txe_thread_create+0x114>
	{
		/* Call actual thread create function.  */
		status = _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input, stack_start,
 80063fc:	9b02      	ldr	r3, [sp, #8]
 80063fe:	4628      	mov	r0, r5
 8006400:	9a03      	ldr	r2, [sp, #12]
 8006402:	9901      	ldr	r1, [sp, #4]
 8006404:	9313      	str	r3, [sp, #76]	; 0x4c
 8006406:	4653      	mov	r3, sl
 8006408:	9212      	str	r2, [sp, #72]	; 0x48
 800640a:	4632      	mov	r2, r6
 800640c:	9111      	str	r1, [sp, #68]	; 0x44
 800640e:	4659      	mov	r1, fp
 8006410:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8006414:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
				stack_size, priority, preempt_threshold, time_slice, auto_start);
	}

	/* Return completion status.  */
	return (status);
}
 8006418:	b005      	add	sp, #20
 800641a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status = _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input, stack_start,
 800641e:	f000 bd01 	b.w	8006e24 <_tx_thread_create>
		status = TX_THREAD_ERROR;
 8006422:	200e      	movs	r0, #14
}
 8006424:	b005      	add	sp, #20
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			next_thread = next_thread->tx_thread_created_next;
 800642a:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 800642e:	3501      	adds	r5, #1
			if (break_flag == TX_TRUE)
 8006430:	42a0      	cmp	r0, r4
 8006432:	bf18      	it	ne
 8006434:	455d      	cmpne	r5, fp
 8006436:	d201      	bcs.n	800643c <_txe_thread_create+0x12c>
 8006438:	2e00      	cmp	r6, #0
 800643a:	d098      	beq.n	800636e <_txe_thread_create+0x5e>
 800643c:	4653      	mov	r3, sl
 800643e:	e7a6      	b.n	800638e <_txe_thread_create+0x7e>
			if (stack_end >= next_thread->tx_thread_stack_start)
 8006440:	4566      	cmp	r6, ip
 8006442:	f04f 0600 	mov.w	r6, #0
 8006446:	d8f0      	bhi.n	800642a <_txe_thread_create+0x11a>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	e79a      	b.n	8006382 <_txe_thread_create+0x72>
			status = TX_SIZE_ERROR;
 800644c:	2005      	movs	r0, #5
 800644e:	e7e9      	b.n	8006424 <_txe_thread_create+0x114>
			status = TX_PTR_ERROR;
 8006450:	2003      	movs	r0, #3
}
 8006452:	b005      	add	sp, #20
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = TX_PRIORITY_ERROR;
 8006458:	200f      	movs	r0, #15
 800645a:	e7e3      	b.n	8006424 <_txe_thread_create+0x114>
			status = TX_START_ERROR;
 800645c:	2010      	movs	r0, #16
 800645e:	e7e1      	b.n	8006424 <_txe_thread_create+0x114>
					status = TX_CALLER_ERROR;
 8006460:	2013      	movs	r0, #19
	return (status);
 8006462:	e7df      	b.n	8006424 <_txe_thread_create+0x114>
			status = TX_THRESH_ERROR;
 8006464:	2018      	movs	r0, #24
 8006466:	e7dd      	b.n	8006424 <_txe_thread_create+0x114>
 8006468:	20000520 	.word	0x20000520
 800646c:	20000528 	.word	0x20000528
 8006470:	20000534 	.word	0x20000534
 8006474:	200005e0 	.word	0x200005e0
 8006478:	20000158 	.word	0x20000158
 800647c:	20000530 	.word	0x20000530

08006480 <_txe_thread_delete>:
 8006480:	f3ef 8205 	mrs	r2, IPSR

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006484:	4907      	ldr	r1, [pc, #28]	; (80064a4 <_txe_thread_delete+0x24>)
 8006486:	6809      	ldr	r1, [r1, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	d108      	bne.n	800649e <_txe_thread_delete+0x1e>
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 800648c:	b118      	cbz	r0, 8006496 <_txe_thread_delete+0x16>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800648e:	6802      	ldr	r2, [r0, #0]
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <_txe_thread_delete+0x28>)
 8006492:	429a      	cmp	r2, r3
 8006494:	d001      	beq.n	800649a <_txe_thread_delete+0x1a>
        status =  TX_THREAD_ERROR;
 8006496:	200e      	movs	r0, #14
        status =  _tx_thread_delete(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8006498:	4770      	bx	lr
        status =  _tx_thread_delete(thread_ptr);
 800649a:	f000 bd59 	b.w	8006f50 <_tx_thread_delete>
        status =  TX_CALLER_ERROR;
 800649e:	2013      	movs	r0, #19
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000158 	.word	0x20000158
 80064a8:	54485244 	.word	0x54485244

080064ac <_txe_thread_info_get>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80064ac:	b150      	cbz	r0, 80064c4 <_txe_thread_info_get+0x18>
{
 80064ae:	b430      	push	{r4, r5}
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80064b0:	6805      	ldr	r5, [r0, #0]
 80064b2:	4c05      	ldr	r4, [pc, #20]	; (80064c8 <_txe_thread_info_get+0x1c>)
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d002      	beq.n	80064be <_txe_thread_info_get+0x12>
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
}
 80064b8:	200e      	movs	r0, #14
 80064ba:	bc30      	pop	{r4, r5}
 80064bc:	4770      	bx	lr
 80064be:	bc30      	pop	{r4, r5}
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold, 
 80064c0:	f000 bd74 	b.w	8006fac <_tx_thread_info_get>
}
 80064c4:	200e      	movs	r0, #14
 80064c6:	4770      	bx	lr
 80064c8:	54485244 	.word	0x54485244

080064cc <_txe_thread_suspend>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80064cc:	b118      	cbz	r0, 80064d6 <_txe_thread_suspend+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80064ce:	6802      	ldr	r2, [r0, #0]
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <_txe_thread_suspend+0x14>)
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d001      	beq.n	80064da <_txe_thread_suspend+0xe>
        status =  _tx_thread_suspend(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 80064d6:	200e      	movs	r0, #14
 80064d8:	4770      	bx	lr
        status =  _tx_thread_suspend(thread_ptr);
 80064da:	f000 bdcd 	b.w	8007078 <_tx_thread_suspend>
 80064de:	bf00      	nop
 80064e0:	54485244 	.word	0x54485244

080064e4 <_txe_thread_terminate>:

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80064e4:	b158      	cbz	r0, 80064fe <_txe_thread_terminate+0x1a>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80064e6:	6802      	ldr	r2, [r0, #0]
 80064e8:	4b07      	ldr	r3, [pc, #28]	; (8006508 <_txe_thread_terminate+0x24>)
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d107      	bne.n	80064fe <_txe_thread_terminate+0x1a>
 80064ee:	f3ef 8305 	mrs	r3, IPSR
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80064f2:	4a06      	ldr	r2, [pc, #24]	; (800650c <_txe_thread_terminate+0x28>)
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	d103      	bne.n	8006502 <_txe_thread_terminate+0x1e>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 80064fa:	f000 be9d 	b.w	8007238 <_tx_thread_terminate>
        status =  TX_THREAD_ERROR;
 80064fe:	200e      	movs	r0, #14
 8006500:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8006502:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	54485244 	.word	0x54485244
 800650c:	20000158 	.word	0x20000158

08006510 <_tx_event_flags_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	460c      	mov	r4, r1
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8006514:	2228      	movs	r2, #40	; 0x28
 8006516:	2100      	movs	r1, #0
 8006518:	f001 f8ca 	bl	80076b0 <memset>
 800651c:	4603      	mov	r3, r0

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800651e:	6044      	str	r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006520:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006524:	b672      	cpsid	i
    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8006526:	490b      	ldr	r1, [pc, #44]	; (8006554 <_tx_event_flags_create+0x44>)
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8006528:	480b      	ldr	r0, [pc, #44]	; (8006558 <_tx_event_flags_create+0x48>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 800652a:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800652c:	6018      	str	r0, [r3, #0]
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800652e:	480b      	ldr	r0, [pc, #44]	; (800655c <_tx_event_flags_create+0x4c>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 8006530:	b15a      	cbz	r2, 800654a <_tx_event_flags_create+0x3a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8006532:	6800      	ldr	r0, [r0, #0]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8006534:	69c5      	ldr	r5, [r0, #28]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8006536:	61c3      	str	r3, [r0, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8006538:	61ab      	str	r3, [r5, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800653a:	e9c3 0506 	strd	r0, r5, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800653e:	3201      	adds	r2, #1
 8006540:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006542:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006546:	2000      	movs	r0, #0
 8006548:	bd38      	pop	{r3, r4, r5, pc}
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800654a:	e9c3 3306 	strd	r3, r3, [r3, #24]
        _tx_event_flags_created_ptr =                         group_ptr;
 800654e:	6003      	str	r3, [r0, #0]
 8006550:	e7f5      	b.n	800653e <_tx_event_flags_create+0x2e>
 8006552:	bf00      	nop
 8006554:	20000aec 	.word	0x20000aec
 8006558:	4456444e 	.word	0x4456444e
 800655c:	20000ac8 	.word	0x20000ac8

08006560 <_tx_event_flags_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006566:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800656a:	b672      	cpsid	i

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 800656c:	4920      	ldr	r1, [pc, #128]	; (80065f0 <_tx_event_flags_delete+0x90>)
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 800656e:	2000      	movs	r0, #0
    _tx_event_flags_created_count--;
 8006570:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 8006572:	6018      	str	r0, [r3, #0]
    _tx_event_flags_created_count--;
 8006574:	3a01      	subs	r2, #1
 8006576:	600a      	str	r2, [r1, #0]
    
    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8006578:	2a00      	cmp	r2, #0
 800657a:	d12e      	bne.n	80065da <_tx_event_flags_delete+0x7a>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 800657c:	491d      	ldr	r1, [pc, #116]	; (80065f4 <_tx_event_flags_delete+0x94>)
 800657e:	600a      	str	r2, [r1, #0]
            _tx_event_flags_created_ptr =  next_group;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006580:	4d1d      	ldr	r5, [pc, #116]	; (80065f8 <_tx_event_flags_delete+0x98>)

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8006582:	2700      	movs	r7, #0
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 8006584:	6918      	ldr	r0, [r3, #16]
    _tx_thread_preempt_disable++;
 8006586:	682a      	ldr	r2, [r5, #0]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 8006588:	695c      	ldr	r4, [r3, #20]
    _tx_thread_preempt_disable++;
 800658a:	3201      	adds	r2, #1
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800658c:	611f      	str	r7, [r3, #16]
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800658e:	615f      	str	r7, [r3, #20]
    _tx_thread_preempt_disable++;
 8006590:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006592:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads 
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8006596:	b19c      	cbz	r4, 80065c0 <_tx_event_flags_delete+0x60>
        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006598:	f04f 0801 	mov.w	r8, #1
        suspended_count--;
 800659c:	3c01      	subs	r4, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800659e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80065a2:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80065a4:	682b      	ldr	r3, [r5, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80065a6:	6687      	str	r7, [r0, #104]	; 0x68
        _tx_thread_preempt_disable++;
 80065a8:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80065aa:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80065ae:	6f06      	ldr	r6, [r0, #112]	; 0x70
        _tx_thread_preempt_disable++;
 80065b0:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065b2:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80065b6:	f000 fdb9 	bl	800712c <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80065ba:	4630      	mov	r0, r6
    while (suspended_count != TX_NO_SUSPENSIONS)
 80065bc:	2c00      	cmp	r4, #0
 80065be:	d1ed      	bne.n	800659c <_tx_event_flags_delete+0x3c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80065c0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80065c4:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065cc:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80065d0:	f000 fd8e 	bl	80070f0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 80065d4:	2000      	movs	r0, #0
 80065d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_event_flags_created_ptr == group_ptr)
 80065da:	4806      	ldr	r0, [pc, #24]	; (80065f4 <_tx_event_flags_delete+0x94>)
 80065dc:	6804      	ldr	r4, [r0, #0]
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 80065de:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
        if (_tx_event_flags_created_ptr == group_ptr)
 80065e2:	429c      	cmp	r4, r3
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 80065e4:	61d1      	str	r1, [r2, #28]
            _tx_event_flags_created_ptr =  next_group;
 80065e6:	bf08      	it	eq
 80065e8:	6002      	streq	r2, [r0, #0]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 80065ea:	618a      	str	r2, [r1, #24]
 80065ec:	e7c8      	b.n	8006580 <_tx_event_flags_delete+0x20>
 80065ee:	bf00      	nop
 80065f0:	20000aec 	.word	0x20000aec
 80065f4:	20000ac8 	.word	0x20000ac8
 80065f8:	20000530 	.word	0x20000530

080065fc <_tx_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80065fe:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006602:	b672      	cpsid	i
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8006604:	6a06      	ldr	r6, [r0, #32]
    and_request =  (get_option & TX_AND);
 8006606:	f002 0702 	and.w	r7, r2, #2
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800660a:	6884      	ldr	r4, [r0, #8]

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800660c:	b10e      	cbz	r6, 8006612 <_tx_event_flags_get+0x16>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800660e:	ea24 0406 	bic.w	r4, r4, r6
 8006612:	ea04 0601 	and.w	r6, r4, r1
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8006616:	2f00      	cmp	r7, #0
 8006618:	d03c      	beq.n	8006694 <_tx_event_flags_get+0x98>
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800661a:	42b1      	cmp	r1, r6
 800661c:	d03a      	beq.n	8006694 <_tx_event_flags_get+0x98>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800661e:	9c06      	ldr	r4, [sp, #24]
 8006620:	2c00      	cmp	r4, #0
 8006622:	d04a      	beq.n	80066ba <_tx_event_flags_get+0xbe>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8006624:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80066d8 <_tx_event_flags_get+0xdc>
 8006628:	f8dc 4000 	ldr.w	r4, [ip]
 800662c:	2c00      	cmp	r4, #0
 800662e:	d144      	bne.n	80066ba <_tx_event_flags_get+0xbe>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8006630:	4c28      	ldr	r4, [pc, #160]	; (80066d4 <_tx_event_flags_get+0xd8>)
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8006632:	6946      	ldr	r6, [r0, #20]
                TX_THREAD_GET_CURRENT(thread_ptr)
 8006634:	6824      	ldr	r4, [r4, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8006636:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 80066dc <_tx_event_flags_get+0xe0>
                thread_ptr -> tx_thread_suspension_sequence++;
 800663a:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800663e:	67a1      	str	r1, [r4, #120]	; 0x78
                thread_ptr -> tx_thread_suspension_sequence++;
 8006640:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8006642:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8006646:	e9c4 e01a 	strd	lr, r0, [r4, #104]	; 0x68
                thread_ptr -> tx_thread_suspension_sequence++;
 800664a:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800664e:	2e00      	cmp	r6, #0
 8006650:	d038      	beq.n	80066c4 <_tx_event_flags_get+0xc8>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8006652:	6903      	ldr	r3, [r0, #16]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006654:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006656:	e9c4 321c 	strd	r3, r2, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800665a:	6714      	str	r4, [r2, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800665c:	675c      	str	r4, [r3, #116]	; 0x74

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800665e:	f8dc 3000 	ldr.w	r3, [ip]
                group_ptr -> tx_event_flags_group_suspended_count++;
 8006662:	3601      	adds	r6, #1
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8006664:	2107      	movs	r1, #7
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006666:	2201      	movs	r2, #1
                group_ptr -> tx_event_flags_group_suspended_count++;
 8006668:	6146      	str	r6, [r0, #20]
                _tx_thread_preempt_disable++;
 800666a:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800666c:	9806      	ldr	r0, [sp, #24]
                _tx_thread_preempt_disable++;
 800666e:	f8cc 3000 	str.w	r3, [ip]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006672:	64e0      	str	r0, [r4, #76]	; 0x4c
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8006674:	6321      	str	r1, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006676:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006678:	f385 8810 	msr	PRIMASK, r5

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800667c:	4620      	mov	r0, r4
 800667e:	f7ff fa2f 	bl	8005ae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006682:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006686:	b672      	cpsid	i
    
                /* Disable interrupts.  */
                TX_DISABLE
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8006688:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800668c:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 8006690:	4610      	mov	r0, r2
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (flags_satisfied != ((ULONG) 0))
 8006694:	2e00      	cmp	r6, #0
 8006696:	d0c2      	beq.n	800661e <_tx_event_flags_get+0x22>
        if (clear_request == TX_TRUE)
 8006698:	f012 0201 	ands.w	r2, r2, #1
        *actual_flags_ptr =  current_flags;
 800669c:	601c      	str	r4, [r3, #0]
        if (clear_request == TX_TRUE)
 800669e:	d00d      	beq.n	80066bc <_tx_event_flags_get+0xc0>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80066a0:	6943      	ldr	r3, [r0, #20]
 80066a2:	b10b      	cbz	r3, 80066a8 <_tx_event_flags_get+0xac>
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80066a4:	6902      	ldr	r2, [r0, #16]
 80066a6:	b18a      	cbz	r2, 80066cc <_tx_event_flags_get+0xd0>
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80066a8:	6883      	ldr	r3, [r0, #8]
        status =  TX_SUCCESS;
 80066aa:	2200      	movs	r2, #0
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80066ac:	ea23 0101 	bic.w	r1, r3, r1
                group_ptr -> tx_event_flags_group_current =
 80066b0:	6081      	str	r1, [r0, #8]
 80066b2:	f385 8810 	msr	PRIMASK, r5
}
 80066b6:	4610      	mov	r0, r2
 80066b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                status =  TX_NO_EVENTS;
 80066ba:	2207      	movs	r2, #7
 80066bc:	f385 8810 	msr	PRIMASK, r5
}
 80066c0:	4610      	mov	r0, r2
 80066c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 80066c4:	6104      	str	r4, [r0, #16]
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 80066c6:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 80066ca:	e7c8      	b.n	800665e <_tx_event_flags_get+0x62>
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 80066cc:	6a03      	ldr	r3, [r0, #32]
 80066ce:	4319      	orrs	r1, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 80066d0:	6201      	str	r1, [r0, #32]
 80066d2:	e7f3      	b.n	80066bc <_tx_event_flags_get+0xc0>
 80066d4:	20000534 	.word	0x20000534
 80066d8:	20000530 	.word	0x20000530
 80066dc:	080073fd 	.word	0x080073fd

080066e0 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_high_level(VOID)
{
 80066e0:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the event log, if enabled.  */
	TX_EL_INITIALIZE

	/* Call the thread control initialization function.  */
	_tx_thread_initialize();
 80066e2:	f7ff f98f 	bl	8005a04 <_tx_thread_initialize>
#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Call the semaphore initialization function.  */
	_tx_semaphore_initialize();

	/* Call the queue initialization function.  */
	_tx_queue_initialize();
 80066e6:	4d0e      	ldr	r5, [pc, #56]	; (8006720 <_tx_initialize_high_level+0x40>)
	_tx_timer_initialize();
 80066e8:	f7ff fabe 	bl	8005c68 <_tx_timer_initialize>
	_tx_semaphore_initialize();
 80066ec:	2300      	movs	r3, #0
 80066ee:	490d      	ldr	r1, [pc, #52]	; (8006724 <_tx_initialize_high_level+0x44>)
 80066f0:	4a0d      	ldr	r2, [pc, #52]	; (8006728 <_tx_initialize_high_level+0x48>)
 80066f2:	600b      	str	r3, [r1, #0]
 80066f4:	6013      	str	r3, [r2, #0]
	_tx_queue_initialize();
 80066f6:	4c0d      	ldr	r4, [pc, #52]	; (800672c <_tx_initialize_high_level+0x4c>)

	/* Call the event flag initialization function.  */
	_tx_event_flags_initialize();
 80066f8:	480d      	ldr	r0, [pc, #52]	; (8006730 <_tx_initialize_high_level+0x50>)
 80066fa:	490e      	ldr	r1, [pc, #56]	; (8006734 <_tx_initialize_high_level+0x54>)

	/* Call the block pool initialization function.  */
	_tx_block_pool_initialize();
 80066fc:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <_tx_initialize_high_level+0x58>)
	_tx_queue_initialize();
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	6023      	str	r3, [r4, #0]
	_tx_event_flags_initialize();
 8006702:	6003      	str	r3, [r0, #0]
 8006704:	600b      	str	r3, [r1, #0]
	_tx_block_pool_initialize();
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	4d0c      	ldr	r5, [pc, #48]	; (800673c <_tx_initialize_high_level+0x5c>)

	/* Call the byte pool initialization function.  */
	_tx_byte_pool_initialize();
 800670a:	4c0d      	ldr	r4, [pc, #52]	; (8006740 <_tx_initialize_high_level+0x60>)
 800670c:	480d      	ldr	r0, [pc, #52]	; (8006744 <_tx_initialize_high_level+0x64>)

	/* Call the mutex initialization function.  */
	_tx_mutex_initialize();
 800670e:	490e      	ldr	r1, [pc, #56]	; (8006748 <_tx_initialize_high_level+0x68>)
 8006710:	4a0e      	ldr	r2, [pc, #56]	; (800674c <_tx_initialize_high_level+0x6c>)
	_tx_block_pool_initialize();
 8006712:	602b      	str	r3, [r5, #0]
	_tx_byte_pool_initialize();
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	6003      	str	r3, [r0, #0]
	_tx_mutex_initialize();
 8006718:	600b      	str	r3, [r1, #0]
 800671a:	6013      	str	r3, [r2, #0]
#endif
}
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	bf00      	nop
 8006720:	20000af4 	.word	0x20000af4
 8006724:	20000ad8 	.word	0x20000ad8
 8006728:	20000ae8 	.word	0x20000ae8
 800672c:	20000ad4 	.word	0x20000ad4
 8006730:	20000ac8 	.word	0x20000ac8
 8006734:	20000aec 	.word	0x20000aec
 8006738:	20000af0 	.word	0x20000af0
 800673c:	20000ae4 	.word	0x20000ae4
 8006740:	20000adc 	.word	0x20000adc
 8006744:	20000af8 	.word	0x20000af8
 8006748:	20000ad0 	.word	0x20000ad0
 800674c:	20000acc 	.word	0x20000acc

08006750 <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	460d      	mov	r5, r1
 8006754:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8006756:	2100      	movs	r1, #0
 8006758:	2234      	movs	r2, #52	; 0x34
 800675a:	f000 ffa9 	bl	80076b0 <memset>
 800675e:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8006760:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8006762:	6104      	str	r4, [r0, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006764:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006768:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800676a:	490c      	ldr	r1, [pc, #48]	; (800679c <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800676c:	480c      	ldr	r0, [pc, #48]	; (80067a0 <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800676e:	4e0d      	ldr	r6, [pc, #52]	; (80067a4 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 8006770:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8006772:	4d0d      	ldr	r5, [pc, #52]	; (80067a8 <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8006774:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8006776:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8006778:	480c      	ldr	r0, [pc, #48]	; (80067ac <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 800677a:	b15a      	cbz	r2, 8006794 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800677c:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800677e:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8006780:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8006782:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8006784:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8006788:	3201      	adds	r2, #1
 800678a:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800678c:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006790:	2000      	movs	r0, #0
 8006792:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8006794:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	e7f5      	b.n	8006788 <_tx_mutex_create+0x38>
 800679c:	20000acc 	.word	0x20000acc
 80067a0:	20000518 	.word	0x20000518
 80067a4:	4d555445 	.word	0x4d555445
 80067a8:	08007501 	.word	0x08007501
 80067ac:	20000ad0 	.word	0x20000ad0

080067b0 <_tx_mutex_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80067b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80067b4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80067b8:	b672      	cpsid	i

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 80067ba:	4927      	ldr	r1, [pc, #156]	; (8006858 <_tx_mutex_delete+0xa8>)
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80067bc:	2400      	movs	r4, #0
    _tx_mutex_created_count--;
 80067be:	680b      	ldr	r3, [r1, #0]
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80067c0:	6004      	str	r4, [r0, #0]
    _tx_mutex_created_count--;
 80067c2:	3b01      	subs	r3, #1
 80067c4:	600b      	str	r3, [r1, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d13c      	bne.n	8006844 <_tx_mutex_delete+0x94>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 80067ca:	4924      	ldr	r1, [pc, #144]	; (800685c <_tx_mutex_delete+0xac>)
 80067cc:	600b      	str	r3, [r1, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80067ce:	4e24      	ldr	r6, [pc, #144]	; (8006860 <_tx_mutex_delete+0xb0>)

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80067d0:	2700      	movs	r7, #0

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80067d2:	68c1      	ldr	r1, [r0, #12]
    _tx_thread_preempt_disable++;
 80067d4:	6833      	ldr	r3, [r6, #0]
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 80067d6:	6984      	ldr	r4, [r0, #24]
    _tx_thread_preempt_disable++;
 80067d8:	3301      	adds	r3, #1
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 80067da:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80067dc:	6187      	str	r7, [r0, #24]
    _tx_thread_preempt_disable++;
 80067de:	6033      	str	r3, [r6, #0]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80067e0:	61c7      	str	r7, [r0, #28]
    if (owner_thread != TX_NULL)
 80067e2:	b141      	cbz	r1, 80067f6 <_tx_mutex_delete+0x46>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80067e4:	2301      	movs	r3, #1
 80067e6:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80067e8:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 80067ec:	f000 f924 	bl	8006a38 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80067f0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80067f4:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80067f6:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80067fa:	b1b5      	cbz	r5, 800682a <_tx_mutex_delete+0x7a>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80067fc:	f04f 0800 	mov.w	r8, #0

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006800:	2701      	movs	r7, #1
        suspended_count--;
 8006802:	3d01      	subs	r5, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006804:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006808:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800680a:	6833      	ldr	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800680c:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8006810:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006812:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8006816:	6f22      	ldr	r2, [r4, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006818:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800681a:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800681e:	4620      	mov	r0, r4
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8006820:	4614      	mov	r4, r2
        _tx_thread_system_resume(thread_ptr);
 8006822:	f000 fc83 	bl	800712c <_tx_thread_system_resume>
    while (suspended_count != ((ULONG) 0))
 8006826:	2d00      	cmp	r5, #0
 8006828:	d1eb      	bne.n	8006802 <_tx_mutex_delete+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800682a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800682e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8006830:	6833      	ldr	r3, [r6, #0]
 8006832:	3b01      	subs	r3, #1
 8006834:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006836:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800683a:	f000 fc59 	bl	80070f0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800683e:	2000      	movs	r0, #0
 8006840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_mutex_created_ptr == mutex_ptr)
 8006844:	4c05      	ldr	r4, [pc, #20]	; (800685c <_tx_mutex_delete+0xac>)
 8006846:	6825      	ldr	r5, [r4, #0]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8006848:	e9d0 3108 	ldrd	r3, r1, [r0, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 800684c:	4285      	cmp	r5, r0
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800684e:	6259      	str	r1, [r3, #36]	; 0x24
            _tx_mutex_created_ptr =  next_mutex;
 8006850:	bf08      	it	eq
 8006852:	6023      	streq	r3, [r4, #0]
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8006854:	620b      	str	r3, [r1, #32]
 8006856:	e7ba      	b.n	80067ce <_tx_mutex_delete+0x1e>
 8006858:	20000acc 	.word	0x20000acc
 800685c:	20000ad0 	.word	0x20000ad0
 8006860:	20000530 	.word	0x20000530

08006864 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006866:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800686a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800686c:	4a3b      	ldr	r2, [pc, #236]	; (800695c <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800686e:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006870:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8006872:	b9e3      	cbnz	r3, 80068ae <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8006874:	2301      	movs	r3, #1
 8006876:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800687a:	b1a4      	cbz	r4, 80068a6 <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800687c:	6903      	ldr	r3, [r0, #16]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d103      	bne.n	800688a <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8006882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8006884:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8006886:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8006888:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800688a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800688e:	2b00      	cmp	r3, #0
 8006890:	d044      	beq.n	800691c <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8006892:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8006894:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8006896:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8006898:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800689c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80068a0:	3301      	adds	r3, #1
 80068a2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80068a6:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80068aa:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80068ae:	68c2      	ldr	r2, [r0, #12]
 80068b0:	42a2      	cmp	r2, r4
 80068b2:	d029      	beq.n	8006908 <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 80068b4:	b371      	cbz	r1, 8006914 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80068b6:	4e2a      	ldr	r6, [pc, #168]	; (8006960 <_tx_mutex_get+0xfc>)
 80068b8:	6833      	ldr	r3, [r6, #0]
 80068ba:	bb5b      	cbnz	r3, 8006914 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 80068bc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80068c0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8006964 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 80068c4:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80068c6:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80068c8:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 80068ca:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80068ce:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80068d2:	bb43      	cbnz	r3, 8006926 <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 80068d4:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80068d6:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 80068da:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 80068dc:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80068de:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 80068e2:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 80068e4:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80068e6:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80068e8:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 80068ea:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80068ec:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80068f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80068f2:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80068f6:	6903      	ldr	r3, [r0, #16]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d01d      	beq.n	8006938 <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7ff f8ef 	bl	8005ae0 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 8006902:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8006906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 8006908:	3301      	adds	r3, #1
 800690a:	6083      	str	r3, [r0, #8]
 800690c:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 8006910:	2000      	movs	r0, #0
 8006912:	e7cb      	b.n	80068ac <_tx_mutex_get+0x48>
 8006914:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 8006918:	201d      	movs	r0, #29
}
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800691c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8006920:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 8006924:	e7ba      	b.n	800689c <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8006926:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006928:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800692c:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006930:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006934:	677c      	str	r4, [r7, #116]	; 0x74
 8006936:	e7d0      	b.n	80068da <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8006938:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800693a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800693c:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800693e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8006942:	bf88      	it	hi
 8006944:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8006946:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8006948:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800694a:	bf38      	it	cc
 800694c:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8006950:	4299      	cmp	r1, r3
 8006952:	d2d3      	bcs.n	80068fc <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8006954:	4610      	mov	r0, r2
 8006956:	f000 f807 	bl	8006968 <_tx_mutex_priority_change>
 800695a:	e7cf      	b.n	80068fc <_tx_mutex_get+0x98>
 800695c:	20000534 	.word	0x20000534
 8006960:	20000530 	.word	0x20000530
 8006964:	08007481 	.word	0x08007481

08006968 <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800696e:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006972:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8006974:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006976:	b152      	cbz	r2, 800698e <_tx_mutex_priority_change+0x26>
 8006978:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800697c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800697e:	428a      	cmp	r2, r1
 8006980:	bf28      	it	cs
 8006982:	460a      	movcs	r2, r1
 8006984:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006986:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8006990:	4925      	ldr	r1, [pc, #148]	; (8006a28 <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8006992:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 8006996:	4f25      	ldr	r7, [pc, #148]	; (8006a2c <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8006998:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800699a:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800699e:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80069a0:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80069a2:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80069a6:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80069aa:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 80069ac:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 80069b0:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 80069b4:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 80069b8:	f7ff f892 	bl	8005ae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069bc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069c0:	b672      	cpsid	i
 80069c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 80069c6:	62e5      	str	r5, [r4, #44]	; 0x2c
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	bf28      	it	cs
 80069cc:	462b      	movcs	r3, r5
 80069ce:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069d0:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 fba9 	bl	800712c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069da:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069de:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 80069e0:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 80069e2:	429c      	cmp	r4, r3
 80069e4:	d007      	beq.n	80069f6 <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 80069e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80069e8:	b92a      	cbnz	r2, 80069f6 <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d805      	bhi.n	80069fe <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 80069f2:	4544      	cmp	r4, r8
 80069f4:	d010      	beq.n	8006a18 <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069f6:	f381 8810 	msr	PRIMASK, r1
}
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80069fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006a00:	4283      	cmp	r3, r0
 8006a02:	d9f8      	bls.n	80069f6 <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8006a04:	4282      	cmp	r2, r0
 8006a06:	d207      	bcs.n	8006a18 <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8006a08:	4809      	ldr	r0, [pc, #36]	; (8006a30 <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 8006a0a:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8006a0e:	6803      	ldr	r3, [r0, #0]
 8006a10:	ea43 030a 	orr.w	r3, r3, sl
 8006a14:	6003      	str	r3, [r0, #0]
 8006a16:	e7ee      	b.n	80069f6 <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 8006a18:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 8006a1a:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 8006a1c:	d2eb      	bcs.n	80069f6 <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8006a1e:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <_tx_mutex_priority_change+0xcc>)
 8006a20:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8006a24:	e7e7      	b.n	80069f6 <_tx_mutex_priority_change+0x8e>
 8006a26:	bf00      	nop
 8006a28:	20000530 	.word	0x20000530
 8006a2c:	20000538 	.word	0x20000538
 8006a30:	20000540 	.word	0x20000540
 8006a34:	20000498 	.word	0x20000498

08006a38 <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a3c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a40:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8006a42:	6882      	ldr	r2, [r0, #8]
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	d056      	beq.n	8006af6 <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8006a48:	497e      	ldr	r1, [pc, #504]	; (8006c44 <_tx_mutex_put+0x20c>)
 8006a4a:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8006a4c:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8006a4e:	6809      	ldr	r1, [r1, #0]
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d003      	beq.n	8006a5c <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8006a54:	4e7c      	ldr	r6, [pc, #496]	; (8006c48 <_tx_mutex_put+0x210>)
 8006a56:	6831      	ldr	r1, [r6, #0]
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d04c      	beq.n	8006af6 <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8006a5c:	3a01      	subs	r2, #1
 8006a5e:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	d143      	bne.n	8006aec <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d041      	beq.n	8006aec <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8006a68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006a6c:	3a01      	subs	r2, #1
 8006a6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	d144      	bne.n	8006b00 <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8006a76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8006a7a:	6987      	ldr	r7, [r0, #24]
 8006a7c:	6902      	ldr	r2, [r0, #16]
 8006a7e:	2f00      	cmp	r7, #0
 8006a80:	f000 8082 	beq.w	8006b88 <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006a84:	2a01      	cmp	r2, #1
 8006a86:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8006a88:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006a8c:	f000 8084 	beq.w	8006b98 <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006a90:	69c3      	ldr	r3, [r0, #28]
 8006a92:	4e6d      	ldr	r6, [pc, #436]	; (8006c48 <_tx_mutex_put+0x210>)
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d95d      	bls.n	8006b54 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8006a98:	2f00      	cmp	r7, #0
 8006a9a:	f000 8097 	beq.w	8006bcc <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 8006a9e:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8006aa0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8006aa4:	2a00      	cmp	r2, #0
 8006aa6:	d167      	bne.n	8006b78 <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8006aa8:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8006aac:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8006ab0:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8006ab2:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8006ab4:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8006ab6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 8006aba:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8006abc:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d153      	bne.n	8006b6c <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8006ac4:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006ac6:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006ac8:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 8006aca:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006acc:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006ace:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8006ad2:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ad4:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006ad8:	692b      	ldr	r3, [r5, #16]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	f000 8097 	beq.w	8006c0e <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f000 fb23 	bl	800712c <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8006ae6:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 8006ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aec:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 8006af0:	2000      	movs	r0, #0
}
 8006af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af6:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 8006afa:	201e      	movs	r0, #30
}
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8006b00:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8006b04:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8006b08:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8006b0a:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8006b0c:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8006b0e:	d1b4      	bne.n	8006a7a <_tx_mutex_put+0x42>
 8006b10:	e7b1      	b.n	8006a76 <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006b12:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b14:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b18:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8006b1a:	6832      	ldr	r2, [r6, #0]
 8006b1c:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8006b1e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006b22:	69eb      	ldr	r3, [r5, #28]
 8006b24:	bf28      	it	cs
 8006b26:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 8006b28:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006b2a:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 8006b2c:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006b2e:	d969      	bls.n	8006c04 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006b30:	692a      	ldr	r2, [r5, #16]
 8006b32:	2a01      	cmp	r2, #1
 8006b34:	d176      	bne.n	8006c24 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 8006b36:	6833      	ldr	r3, [r6, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b3c:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 fcff 	bl	8007544 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b46:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b4a:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	69af      	ldr	r7, [r5, #24]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8006b54:	2f00      	cmp	r7, #0
 8006b56:	d039      	beq.n	8006bcc <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006b58:	692b      	ldr	r3, [r5, #16]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d154      	bne.n	8006c08 <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8006b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006b60:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8006b62:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006b64:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8006b66:	616a      	str	r2, [r5, #20]
 8006b68:	69eb      	ldr	r3, [r5, #28]
 8006b6a:	e799      	b.n	8006aa0 <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8006b6c:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8006b70:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8006b72:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8006b74:	6713      	str	r3, [r2, #112]	; 0x70
 8006b76:	e7a6      	b.n	8006ac6 <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8006b78:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8006b7c:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8006b7e:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8006b80:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8006b82:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 8006b86:	e793      	b.n	8006ab0 <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	f47f af7b 	bne.w	8006a84 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8006b8e:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b90:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 8006b94:	4610      	mov	r0, r2
 8006b96:	e7ac      	b.n	8006af2 <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 8006b98:	4e2b      	ldr	r6, [pc, #172]	; (8006c48 <_tx_mutex_put+0x210>)
 8006b9a:	6832      	ldr	r2, [r6, #0]
 8006b9c:	3201      	adds	r2, #1
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8006ba4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	d0b2      	beq.n	8006b12 <_tx_mutex_put+0xda>
 8006bac:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006bae:	2420      	movs	r4, #32
 8006bb0:	e001      	b.n	8006bb6 <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d0ae      	beq.n	8006b14 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8006bb6:	6910      	ldr	r0, [r2, #16]
 8006bb8:	2801      	cmp	r0, #1
 8006bba:	d103      	bne.n	8006bc4 <_tx_mutex_put+0x18c>
 8006bbc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8006bbe:	4284      	cmp	r4, r0
 8006bc0:	bf28      	it	cs
 8006bc2:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8006bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	d1f3      	bne.n	8006bb2 <_tx_mutex_put+0x17a>
 8006bca:	e7a3      	b.n	8006b14 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	6033      	str	r3, [r6, #0]
 8006bd2:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8006bd6:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006bd8:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8006bda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006bdc:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8006bde:	4543      	cmp	r3, r8
 8006be0:	d002      	beq.n	8006be8 <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8006be2:	4641      	mov	r1, r8
 8006be4:	f7ff fec0 	bl	8006968 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006be8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006bec:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8006bee:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8006bf0:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 8006bf2:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8006bf4:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 8006bf6:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006bf8:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 8006bfc:	f000 fa78 	bl	80070f0 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 8006c00:	4620      	mov	r0, r4
 8006c02:	e776      	b.n	8006af2 <_tx_mutex_put+0xba>
 8006c04:	69af      	ldr	r7, [r5, #24]
 8006c06:	e7a5      	b.n	8006b54 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 8006c08:	2400      	movs	r4, #0
 8006c0a:	69eb      	ldr	r3, [r5, #28]
 8006c0c:	e748      	b.n	8006aa0 <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8006c0e:	69eb      	ldr	r3, [r5, #28]
 8006c10:	b953      	cbnz	r3, 8006c28 <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 8006c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c14:	4543      	cmp	r3, r8
 8006c16:	f43f af63 	beq.w	8006ae0 <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7ff fea3 	bl	8006968 <_tx_mutex_priority_change>
 8006c22:	e75d      	b.n	8006ae0 <_tx_mutex_put+0xa8>
 8006c24:	69af      	ldr	r7, [r5, #24]
 8006c26:	e737      	b.n	8006a98 <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 fc8b 	bl	8007544 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c2e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c32:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8006c34:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 8006c36:	b10b      	cbz	r3, 8006c3c <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c3c:	f382 8810 	msr	PRIMASK, r2
 8006c40:	e7e7      	b.n	8006c12 <_tx_mutex_put+0x1da>
 8006c42:	bf00      	nop
 8006c44:	20000534 	.word	0x20000534
 8006c48:	20000530 	.word	0x20000530

08006c4c <_tx_semaphore_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	460d      	mov	r5, r1
 8006c50:	4614      	mov	r4, r2
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8006c52:	2100      	movs	r1, #0
 8006c54:	2220      	movs	r2, #32
 8006c56:	f000 fd2b 	bl	80076b0 <memset>
 8006c5a:	4603      	mov	r3, r0

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8006c5c:	e9c0 5401 	strd	r5, r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c60:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c64:	b672      	cpsid	i
    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006c66:	490b      	ldr	r1, [pc, #44]	; (8006c94 <_tx_semaphore_create+0x48>)
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8006c68:	480b      	ldr	r0, [pc, #44]	; (8006c98 <_tx_semaphore_create+0x4c>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006c6a:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8006c6c:	6018      	str	r0, [r3, #0]
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8006c6e:	480b      	ldr	r0, [pc, #44]	; (8006c9c <_tx_semaphore_create+0x50>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006c70:	b15a      	cbz	r2, 8006c8a <_tx_semaphore_create+0x3e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8006c72:	6800      	ldr	r0, [r0, #0]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8006c74:	6985      	ldr	r5, [r0, #24]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8006c76:	6183      	str	r3, [r0, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8006c78:	616b      	str	r3, [r5, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8006c7a:	e9c3 0505 	strd	r0, r5, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8006c7e:	3201      	adds	r2, #1
 8006c80:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c82:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006c86:	2000      	movs	r0, #0
 8006c88:	bd38      	pop	{r3, r4, r5, pc}
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8006c8a:	e9c3 3305 	strd	r3, r3, [r3, #20]
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8006c8e:	6003      	str	r3, [r0, #0]
 8006c90:	e7f5      	b.n	8006c7e <_tx_semaphore_create+0x32>
 8006c92:	bf00      	nop
 8006c94:	20000ae8 	.word	0x20000ae8
 8006c98:	53454d41 	.word	0x53454d41
 8006c9c:	20000ad8 	.word	0x20000ad8

08006ca0 <_tx_semaphore_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ca6:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006caa:	b672      	cpsid	i

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8006cac:	4920      	ldr	r1, [pc, #128]	; (8006d30 <_tx_semaphore_delete+0x90>)
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8006cae:	2000      	movs	r0, #0
    _tx_semaphore_created_count--;
 8006cb0:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8006cb2:	6018      	str	r0, [r3, #0]
    _tx_semaphore_created_count--;
 8006cb4:	3a01      	subs	r2, #1
 8006cb6:	600a      	str	r2, [r1, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006cb8:	2a00      	cmp	r2, #0
 8006cba:	d12e      	bne.n	8006d1a <_tx_semaphore_delete+0x7a>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8006cbc:	491d      	ldr	r1, [pc, #116]	; (8006d34 <_tx_semaphore_delete+0x94>)
 8006cbe:	600a      	str	r2, [r1, #0]
            _tx_semaphore_created_ptr =  next_semaphore;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006cc0:	4d1d      	ldr	r5, [pc, #116]	; (8006d38 <_tx_semaphore_delete+0x98>)

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006cc2:	2700      	movs	r7, #0
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8006cc4:	68d8      	ldr	r0, [r3, #12]
    _tx_thread_preempt_disable++;
 8006cc6:	682a      	ldr	r2, [r5, #0]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8006cc8:	691c      	ldr	r4, [r3, #16]
    _tx_thread_preempt_disable++;
 8006cca:	3201      	adds	r2, #1
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006ccc:	60df      	str	r7, [r3, #12]
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8006cce:	611f      	str	r7, [r3, #16]
    _tx_thread_preempt_disable++;
 8006cd0:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006cd2:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8006cd6:	b19c      	cbz	r4, 8006d00 <_tx_semaphore_delete+0x60>
        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006cd8:	f04f 0801 	mov.w	r8, #1
        suspended_count--;
 8006cdc:	3c01      	subs	r4, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006cde:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ce2:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8006ce4:	682b      	ldr	r3, [r5, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006ce6:	6687      	str	r7, [r0, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8006ce8:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006cea:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8006cee:	6f06      	ldr	r6, [r0, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006cf0:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006cf2:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006cf6:	f000 fa19 	bl	800712c <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8006cfa:	4630      	mov	r0, r6
    while (suspended_count != TX_NO_SUSPENSIONS)
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d1ed      	bne.n	8006cdc <_tx_semaphore_delete+0x3c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d00:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d04:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d0c:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006d10:	f000 f9ee 	bl	80070f0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006d14:	2000      	movs	r0, #0
 8006d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8006d1a:	4806      	ldr	r0, [pc, #24]	; (8006d34 <_tx_semaphore_delete+0x94>)
 8006d1c:	6804      	ldr	r4, [r0, #0]
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8006d1e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8006d22:	429c      	cmp	r4, r3
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8006d24:	6191      	str	r1, [r2, #24]
            _tx_semaphore_created_ptr =  next_semaphore;
 8006d26:	bf08      	it	eq
 8006d28:	6002      	streq	r2, [r0, #0]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8006d2a:	614a      	str	r2, [r1, #20]
 8006d2c:	e7c8      	b.n	8006cc0 <_tx_semaphore_delete+0x20>
 8006d2e:	bf00      	nop
 8006d30:	20000ae8 	.word	0x20000ae8
 8006d34:	20000ad8 	.word	0x20000ad8
 8006d38:	20000530 	.word	0x20000530

08006d3c <_tx_semaphore_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d3e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d42:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8006d44:	6883      	ldr	r3, [r0, #8]
 8006d46:	bb5b      	cbnz	r3, 8006da0 <_tx_semaphore_get+0x64>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8006d48:	b331      	cbz	r1, 8006d98 <_tx_semaphore_get+0x5c>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006d4a:	4d1a      	ldr	r5, [pc, #104]	; (8006db4 <_tx_semaphore_get+0x78>)
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	bb1b      	cbnz	r3, 8006d98 <_tx_semaphore_get+0x5c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006d50:	4b19      	ldr	r3, [pc, #100]	; (8006db8 <_tx_semaphore_get+0x7c>)

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8006d52:	4f1a      	ldr	r7, [pc, #104]	; (8006dbc <_tx_semaphore_get+0x80>)
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006d54:	681c      	ldr	r4, [r3, #0]
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8006d56:	6903      	ldr	r3, [r0, #16]
            thread_ptr -> tx_thread_suspension_sequence++;
 8006d58:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8006d5c:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 8006d5e:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8006d60:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspension_sequence++;
 8006d62:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8006d66:	b30b      	cbz	r3, 8006dac <_tx_semaphore_get+0x70>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8006d68:	68c6      	ldr	r6, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006d6a:	6f77      	ldr	r7, [r6, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006d6c:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006d70:	673c      	str	r4, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006d72:	6774      	str	r4, [r6, #116]	; 0x74

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006d74:	682e      	ldr	r6, [r5, #0]
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8006d76:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8006d78:	2706      	movs	r7, #6
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8006d7a:	6103      	str	r3, [r0, #16]
            _tx_thread_preempt_disable++;
 8006d7c:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006d7e:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006d80:	64e1      	str	r1, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 8006d82:	602e      	str	r6, [r5, #0]
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8006d84:	6327      	str	r7, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006d86:	63a3      	str	r3, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d88:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7fe fea7 	bl	8005ae0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006d92:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status =  TX_NO_INSTANCE;
    }

    /* Return completion status.  */
    return(status);
}
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d98:	f382 8810 	msr	PRIMASK, r2
        status =  TX_NO_INSTANCE;
 8006d9c:	200d      	movs	r0, #13
}
 8006d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        semaphore_ptr -> tx_semaphore_count--;
 8006da0:	3b01      	subs	r3, #1
 8006da2:	6083      	str	r3, [r0, #8]
 8006da4:	f382 8810 	msr	PRIMASK, r2
    status =  TX_SUCCESS;
 8006da8:	2000      	movs	r0, #0
}
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8006dac:	60c4      	str	r4, [r0, #12]
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8006dae:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8006db2:	e7df      	b.n	8006d74 <_tx_semaphore_get+0x38>
 8006db4:	20000530 	.word	0x20000530
 8006db8:	20000534 	.word	0x20000534
 8006dbc:	080075e9 	.word	0x080075e9

08006dc0 <_tx_semaphore_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006dc4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006dc8:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8006dca:	6903      	ldr	r3, [r0, #16]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8006dcc:	b94b      	cbnz	r3, 8006de2 <_tx_semaphore_put+0x22>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8006dce:	6883      	ldr	r3, [r0, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8006dd0:	69c1      	ldr	r1, [r0, #28]
        semaphore_ptr -> tx_semaphore_count++;
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006dd6:	f382 8810 	msr	PRIMASK, r2
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8006dda:	b101      	cbz	r1, 8006dde <_tx_semaphore_put+0x1e>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8006ddc:	4788      	blx	r1
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
}
 8006dde:	2000      	movs	r0, #0
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006de2:	3b01      	subs	r3, #1
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8006de4:	68c0      	ldr	r0, [r0, #12]
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006de6:	d018      	beq.n	8006e1a <_tx_semaphore_put+0x5a>
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006de8:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8006dec:	60e1      	str	r1, [r4, #12]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006dee:	674d      	str	r5, [r1, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006df0:	6729      	str	r1, [r5, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006df2:	490b      	ldr	r1, [pc, #44]	; (8006e20 <_tx_semaphore_put+0x60>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006df4:	2500      	movs	r5, #0
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8006df6:	6123      	str	r3, [r4, #16]
        _tx_thread_preempt_disable++;
 8006df8:	680b      	ldr	r3, [r1, #0]
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8006dfa:	69e6      	ldr	r6, [r4, #28]
        _tx_thread_preempt_disable++;
 8006dfc:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006dfe:	6685      	str	r5, [r0, #104]	; 0x68
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006e00:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
        _tx_thread_preempt_disable++;
 8006e04:	600b      	str	r3, [r1, #0]
 8006e06:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8006e0a:	f000 f98f 	bl	800712c <_tx_thread_system_resume>
        if (semaphore_put_notify != TX_NULL)
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d0e5      	beq.n	8006dde <_tx_semaphore_put+0x1e>
            (semaphore_put_notify)(semaphore_ptr);
 8006e12:	4620      	mov	r0, r4
 8006e14:	47b0      	blx	r6
}
 8006e16:	2000      	movs	r0, #0
 8006e18:	bd70      	pop	{r4, r5, r6, pc}
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006e1a:	60e3      	str	r3, [r4, #12]
 8006e1c:	e7e9      	b.n	8006df2 <_tx_semaphore_put+0x32>
 8006e1e:	bf00      	nop
 8006e20:	20000530 	.word	0x20000530

08006e24 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr, VOID (*entry_function)(ULONG id),
		ULONG entry_input, VOID* stack_start, ULONG stack_size, UINT priority,
		UINT preempt_threshold, ULONG time_slice, UINT auto_start)
{
 8006e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006e2e:	468b      	mov	fp, r1
 8006e30:	4692      	mov	sl, r2
#endif

#ifndef TX_DISABLE_STACK_FILLING
	/* Set the thread stack to a pattern prior to creating the initial stack frame.
	 * This pattern is used by the stack checking routines to see how much has been used. */
	TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8006e32:	4630      	mov	r0, r6
 8006e34:	462a      	mov	r2, r5
 8006e36:	21ef      	movs	r1, #239	; 0xef
{
 8006e38:	4698      	mov	r8, r3
 8006e3a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8006e3e:	f000 fc37 	bl	80076b0 <memset>
#endif

	/* Prepare the thread control block prior to placing it on the created list. */

	/* Initialize thread control block to all zeros. */
	TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8006e42:	4620      	mov	r0, r4
 8006e44:	22c8      	movs	r2, #200	; 0xc8
 8006e46:	2100      	movs	r1, #0
 8006e48:	f000 fc32 	bl	80076b0 <memset>
	thread_ptr->tx_thread_entry_parameter = entry_input;
	thread_ptr->tx_thread_stack_start = stack_start;
	thread_ptr->tx_thread_stack_size = stack_size;
	thread_ptr->tx_thread_priority = priority;
	thread_ptr->tx_thread_user_priority = priority;
	thread_ptr->tx_thread_time_slice = time_slice;
 8006e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_ptr->tx_thread_new_time_slice = time_slice;
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);

	/* Calculate the end of the thread's stack area. */
	temp_ptr = TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
	temp_ptr = (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG ) 1))));
 8006e4e:	1e6a      	subs	r2, r5, #1
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);
 8006e50:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

	/* Now fill in the values that are required for thread initialization. */
	thread_ptr->tx_thread_state = TX_SUSPENDED;
 8006e54:	2103      	movs	r1, #3

	/* Setup the necessary fields in the thread timer block. */
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8006e56:	4f36      	ldr	r7, [pc, #216]	; (8006f30 <_tx_thread_create+0x10c>)
	temp_ptr = (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG ) 1))));
 8006e58:	4432      	add	r2, r6
	thread_ptr->tx_thread_name = name_ptr;
 8006e5a:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
	thread_ptr->tx_thread_state = TX_SUSPENDED;
 8006e5e:	6321      	str	r1, [r4, #48]	; 0x30
	TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

	/* Call the target specific stack frame building routine to build the 
	 thread's initial stack and to setup the actual stack pointer in the
	 control block. */
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8006e60:	4620      	mov	r0, r4
	thread_ptr->tx_thread_stack_start = stack_start;
 8006e62:	60e6      	str	r6, [r4, #12]
	thread_ptr->tx_thread_priority = priority;
 8006e64:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	thread_ptr->tx_thread_user_priority = priority;
 8006e68:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8006e6c:	65a4      	str	r4, [r4, #88]	; 0x58
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);
 8006e6e:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8006e72:	6567      	str	r7, [r4, #84]	; 0x54
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8006e74:	492f      	ldr	r1, [pc, #188]	; (8006f34 <_tx_thread_create+0x110>)
	thread_ptr->tx_thread_new_time_slice = time_slice;
 8006e76:	e9c4 3306 	strd	r3, r3, [r4, #24]
	thread_ptr->tx_thread_preempt_threshold = preempt_threshold;
 8006e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	thread_ptr->tx_thread_entry_parameter = entry_input;
 8006e7c:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
	thread_ptr->tx_thread_stack_end = TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8006e80:	e9c4 2504 	strd	r2, r5, [r4, #16]
	thread_ptr->tx_thread_preempt_threshold = preempt_threshold;
 8006e84:	63e3      	str	r3, [r4, #60]	; 0x3c
	thread_ptr->tx_thread_user_preempt_threshold = preempt_threshold;
 8006e86:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8006e8a:	f7f9 fad9 	bl	8000440 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006e8e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006e92:	b672      	cpsid	i
	/* Load the thread ID field in the thread control block. */
	thread_ptr->tx_thread_id = TX_THREAD_ID;

	/* Place the thread on the list of created threads.  First,
	 check for an empty list. */
	if (_tx_thread_created_count == TX_EMPTY)
 8006e94:	4828      	ldr	r0, [pc, #160]	; (8006f38 <_tx_thread_create+0x114>)
	thread_ptr->tx_thread_id = TX_THREAD_ID;
 8006e96:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <_tx_thread_create+0x118>)
	if (_tx_thread_created_count == TX_EMPTY)
 8006e98:	6803      	ldr	r3, [r0, #0]
	thread_ptr->tx_thread_id = TX_THREAD_ID;
 8006e9a:	6022      	str	r2, [r4, #0]
	{
		/* The created thread list is empty.  Add thread to empty list. */
		_tx_thread_created_ptr = thread_ptr;
 8006e9c:	4a28      	ldr	r2, [pc, #160]	; (8006f40 <_tx_thread_create+0x11c>)
	if (_tx_thread_created_count == TX_EMPTY)
 8006e9e:	b9db      	cbnz	r3, 8006ed8 <_tx_thread_create+0xb4>
		_tx_thread_created_ptr = thread_ptr;
 8006ea0:	6014      	str	r4, [r2, #0]
		thread_ptr->tx_thread_created_next = thread_ptr;
		thread_ptr->tx_thread_created_previous = thread_ptr;
 8006ea2:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
	/* Log this kernel call. */
	TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE
	/* Temporarily disable preemption. */
	_tx_thread_preempt_disable++;
 8006ea6:	4927      	ldr	r1, [pc, #156]	; (8006f44 <_tx_thread_create+0x120>)
	_tx_thread_created_count++;
 8006ea8:	3301      	adds	r3, #1
	_tx_thread_preempt_disable++;
 8006eaa:	680a      	ldr	r2, [r1, #0]
	_tx_thread_created_count++;
 8006eac:	6003      	str	r3, [r0, #0]
#endif

	/* Determine if an automatic start was requested. If so, call the resume thread function
	 * and then check for a preemption condition. */
	if (auto_start == TX_AUTO_START)
 8006eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	_tx_thread_preempt_disable++;
 8006eb0:	3201      	adds	r2, #1
	if (auto_start == TX_AUTO_START)
 8006eb2:	2b01      	cmp	r3, #1
	_tx_thread_preempt_disable++;
 8006eb4:	600a      	str	r2, [r1, #0]
	if (auto_start == TX_AUTO_START)
 8006eb6:	d12a      	bne.n	8006f0e <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006eb8:	f3ef 8205 	mrs	r2, IPSR
	{
		/* Determine if the create call is being called from initialization. */
		if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8006ebc:	4b22      	ldr	r3, [pc, #136]	; (8006f48 <_tx_thread_create+0x124>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006ec6:	d211      	bcs.n	8006eec <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ec8:	f385 8810 	msr	PRIMASK, r5

		/* Perform any additional activities for tool or user purpose. */
		TX_THREAD_CREATE_EXTENSION(thread_ptr)

		/* Call the resume thread function to make this thread ready. */
		_tx_thread_system_resume(thread_ptr);
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 f92d 	bl	800712c <_tx_thread_system_resume>
#endif
	}

	/* Always return a success. */
	return (TX_SUCCESS);
}
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		next_thread = _tx_thread_created_ptr;
 8006ed8:	6812      	ldr	r2, [r2, #0]
		previous_thread = next_thread->tx_thread_created_previous;
 8006eda:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
		next_thread->tx_thread_created_previous = thread_ptr;
 8006ede:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
		previous_thread->tx_thread_created_next = thread_ptr;
 8006ee2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
		thread_ptr->tx_thread_created_next = next_thread;
 8006ee6:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 8006eea:	e7dc      	b.n	8006ea6 <_tx_thread_create+0x82>
			saved_thread_ptr = _tx_thread_execute_ptr;
 8006eec:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <_tx_thread_create+0x128>)
 8006eee:	681e      	ldr	r6, [r3, #0]
			if (saved_thread_ptr != TX_NULL)
 8006ef0:	b1e6      	cbz	r6, 8006f2c <_tx_thread_create+0x108>
				saved_thread_ptr->tx_thread_preempt_threshold =
 8006ef2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				saved_threshold = saved_thread_ptr->tx_thread_preempt_threshold;
 8006ef4:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
				saved_thread_ptr->tx_thread_preempt_threshold =
 8006ef6:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006ef8:	f385 8810 	msr	PRIMASK, r5
		_tx_thread_system_resume(thread_ptr);
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 f915 	bl	800712c <_tx_thread_system_resume>
		if (saved_thread_ptr != TX_NULL)
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d0e5      	beq.n	8006ed2 <_tx_thread_create+0xae>
			saved_thread_ptr->tx_thread_preempt_threshold = saved_threshold;
 8006f06:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f12:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f16:	b672      	cpsid	i
		_tx_thread_preempt_disable--;
 8006f18:	680b      	ldr	r3, [r1, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f1e:	f382 8810 	msr	PRIMASK, r2
		_tx_thread_system_preempt_check();
 8006f22:	f000 f8e5 	bl	80070f0 <_tx_thread_system_preempt_check>
}
 8006f26:	2000      	movs	r0, #0
 8006f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UINT saved_threshold = ((UINT)0);
 8006f2c:	4637      	mov	r7, r6
 8006f2e:	e7e3      	b.n	8006ef8 <_tx_thread_create+0xd4>
 8006f30:	0800736d 	.word	0x0800736d
 8006f34:	08007011 	.word	0x08007011
 8006f38:	20000528 	.word	0x20000528
 8006f3c:	54485244 	.word	0x54485244
 8006f40:	20000520 	.word	0x20000520
 8006f44:	20000530 	.word	0x20000530
 8006f48:	20000158 	.word	0x20000158
 8006f4c:	20000538 	.word	0x20000538

08006f50 <_tx_thread_delete>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f54:	b672      	cpsid	i
    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006f56:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d81e      	bhi.n	8006f9c <_tx_thread_delete+0x4c>

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8006f5e:	4a11      	ldr	r2, [pc, #68]	; (8006fa4 <_tx_thread_delete+0x54>)
 8006f60:	6813      	ldr	r3, [r2, #0]
{
 8006f62:	b430      	push	{r4, r5}
        _tx_thread_created_count--;
 8006f64:	3b01      	subs	r3, #1
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8006f66:	2400      	movs	r4, #0
 8006f68:	6004      	str	r4, [r0, #0]
        _tx_thread_created_count--;
 8006f6a:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8006f6c:	b17b      	cbz	r3, 8006f8e <_tx_thread_delete+0x3e>
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
            next_thread -> tx_thread_created_previous =  previous_thread;
            previous_thread -> tx_thread_created_next =  next_thread;

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8006f6e:	4c0e      	ldr	r4, [pc, #56]	; (8006fa8 <_tx_thread_delete+0x58>)
 8006f70:	6825      	ldr	r5, [r4, #0]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8006f72:	e9d0 3222 	ldrd	r3, r2, [r0, #136]	; 0x88
            if (_tx_thread_created_ptr == thread_ptr)
 8006f76:	4285      	cmp	r5, r0
            next_thread -> tx_thread_created_previous =  previous_thread;
 8006f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8006f7c:	bf08      	it	eq
 8006f7e:	6023      	streq	r3, [r4, #0]
            previous_thread -> tx_thread_created_next =  next_thread;
 8006f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f84:	f381 8810 	msr	PRIMASK, r1
 8006f88:	2000      	movs	r0, #0
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
}
 8006f8a:	bc30      	pop	{r4, r5}
 8006f8c:	4770      	bx	lr
            _tx_thread_created_ptr =  TX_NULL;
 8006f8e:	4a06      	ldr	r2, [pc, #24]	; (8006fa8 <_tx_thread_delete+0x58>)
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	f381 8810 	msr	PRIMASK, r1
 8006f96:	2000      	movs	r0, #0
}
 8006f98:	bc30      	pop	{r4, r5}
 8006f9a:	4770      	bx	lr
 8006f9c:	f381 8810 	msr	PRIMASK, r1
            status =  TX_DELETE_ERROR;
 8006fa0:	2011      	movs	r0, #17
}
 8006fa2:	4770      	bx	lr
 8006fa4:	20000528 	.word	0x20000528
 8006fa8:	20000520 	.word	0x20000520

08006fac <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	469c      	mov	ip, r3
 8006fb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fb4:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 8006fb8:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006fbc:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006fc0:	b672      	cpsid	i

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8006fc2:	b109      	cbz	r1, 8006fc8 <_tx_thread_info_get+0x1c>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 8006fc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fc6:	600b      	str	r3, [r1, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8006fc8:	b10a      	cbz	r2, 8006fce <_tx_thread_info_get+0x22>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 8006fca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006fcc:	6011      	str	r1, [r2, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8006fce:	f1bc 0f00 	cmp.w	ip, #0
 8006fd2:	d002      	beq.n	8006fda <_tx_thread_info_get+0x2e>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 8006fd4:	6842      	ldr	r2, [r0, #4]
 8006fd6:	f8cc 2000 	str.w	r2, [ip]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8006fda:	f1b8 0f00 	cmp.w	r8, #0
 8006fde:	d003      	beq.n	8006fe8 <_tx_thread_info_get+0x3c>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 8006fe0:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8006fe4:	f8c8 2000 	str.w	r2, [r8]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8006fe8:	b117      	cbz	r7, 8006ff0 <_tx_thread_info_get+0x44>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8006fea:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8006fee:	603b      	str	r3, [r7, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8006ff0:	b10e      	cbz	r6, 8006ff6 <_tx_thread_info_get+0x4a>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8006ff2:	6983      	ldr	r3, [r0, #24]
 8006ff4:	6033      	str	r3, [r6, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8006ff6:	b115      	cbz	r5, 8006ffe <_tx_thread_info_get+0x52>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 8006ff8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006ffc:	602b      	str	r3, [r5, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8006ffe:	b10c      	cbz	r4, 8007004 <_tx_thread_info_get+0x58>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8007000:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007002:	6023      	str	r3, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007004:	f38e 8810 	msr	PRIMASK, lr
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 8007008:	2000      	movs	r0, #0
 800700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700e:	bf00      	nop

08007010 <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007010:	4b16      	ldr	r3, [pc, #88]	; (800706c <_tx_thread_shell_entry+0x5c>)
{
 8007012:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007014:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007016:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800701a:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800701c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007020:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8007024:	b113      	cbz	r3, 800702c <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8007026:	2100      	movs	r1, #0
 8007028:	4620      	mov	r0, r4
 800702a:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800702c:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 8007030:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <_tx_thread_shell_entry+0x60>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	b10b      	cbz	r3, 800703c <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8007038:	4620      	mov	r0, r4
 800703a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800703c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007040:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007042:	4a0c      	ldr	r2, [pc, #48]	; (8007074 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8007044:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007046:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8007048:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 800704c:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800704e:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 8007050:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8007052:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007054:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 8007056:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007058:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800705c:	b10d      	cbz	r5, 8007062 <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800705e:	4620      	mov	r0, r4
 8007060:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8007062:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 8007068:	f7fe bd3a 	b.w	8005ae0 <_tx_thread_system_suspend>
 800706c:	20000534 	.word	0x20000534
 8007070:	20000518 	.word	0x20000518
 8007074:	20000530 	.word	0x20000530

08007078 <_tx_thread_suspend>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8007078:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800707a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800707e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8007080:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007082:	b9cc      	cbnz	r4, 80070b8 <_tx_thread_suspend+0x40>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007084:	f3ef 8205 	mrs	r2, IPSR

        /* Initialize status to success.  */
        status =  TX_SUCCESS;

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == 0)
 8007088:	4916      	ldr	r1, [pc, #88]	; (80070e4 <_tx_thread_suspend+0x6c>)
 800708a:	6809      	ldr	r1, [r1, #0]
        {
        
            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 800708c:	430a      	orrs	r2, r1
 800708e:	d121      	bne.n	80070d4 <_tx_thread_suspend+0x5c>
    TX_THREAD_GET_CURRENT(current_thread)
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <_tx_thread_suspend+0x70>)
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8007092:	4916      	ldr	r1, [pc, #88]	; (80070ec <_tx_thread_suspend+0x74>)
            if (current_thread == thread_ptr)
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	4282      	cmp	r2, r0
 8007098:	d01e      	beq.n	80070d8 <_tx_thread_suspend+0x60>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800709a:	680a      	ldr	r2, [r1, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800709c:	2501      	movs	r5, #1
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800709e:	2603      	movs	r6, #3
            _tx_thread_preempt_disable++;
 80070a0:	442a      	add	r2, r5
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80070a2:	6385      	str	r5, [r0, #56]	; 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80070a4:	2500      	movs	r5, #0
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80070a6:	6306      	str	r6, [r0, #48]	; 0x30
            _tx_thread_preempt_disable++;
 80070a8:	600a      	str	r2, [r1, #0]
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80070aa:	64c5      	str	r5, [r0, #76]	; 0x4c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80070ac:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80070b0:	f7fe fd16 	bl	8005ae0 <_tx_thread_system_suspend>
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 80070b4:	4620      	mov	r0, r4
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 80070b8:	1e62      	subs	r2, r4, #1
 80070ba:	2a01      	cmp	r2, #1
 80070bc:	d804      	bhi.n	80070c8 <_tx_thread_suspend+0x50>
                    status =  TX_SUSPEND_ERROR;
 80070be:	2414      	movs	r4, #20
 80070c0:	f383 8810 	msr	PRIMASK, r3
}
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80070c8:	2c03      	cmp	r4, #3
 80070ca:	d009      	beq.n	80070e0 <_tx_thread_suspend+0x68>
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 80070cc:	2201      	movs	r2, #1
        status =  TX_SUCCESS;
 80070ce:	2400      	movs	r4, #0
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 80070d0:	6342      	str	r2, [r0, #52]	; 0x34
 80070d2:	e7f5      	b.n	80070c0 <_tx_thread_suspend+0x48>
 80070d4:	4905      	ldr	r1, [pc, #20]	; (80070ec <_tx_thread_suspend+0x74>)
 80070d6:	e7e0      	b.n	800709a <_tx_thread_suspend+0x22>
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80070d8:	680a      	ldr	r2, [r1, #0]
 80070da:	2a00      	cmp	r2, #0
 80070dc:	d1ef      	bne.n	80070be <_tx_thread_suspend+0x46>
 80070de:	e7dc      	b.n	800709a <_tx_thread_suspend+0x22>
        status =  TX_SUCCESS;
 80070e0:	2400      	movs	r4, #0
 80070e2:	e7ed      	b.n	80070c0 <_tx_thread_suspend+0x48>
 80070e4:	20000158 	.word	0x20000158
 80070e8:	20000534 	.word	0x20000534
 80070ec:	20000530 	.word	0x20000530

080070f0 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <_tx_thread_system_preempt_check+0x2c>)
 80070f2:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80070f4:	b98b      	cbnz	r3, 800711a <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d00b      	beq.n	800711a <_tx_thread_system_preempt_check+0x2a>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <_tx_thread_system_preempt_check+0x38>)
 8007104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007108:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800710a:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800710e:	b923      	cbnz	r3, 800711a <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007110:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8007114:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007116:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800711a:	4770      	bx	lr
 800711c:	20000530 	.word	0x20000530
 8007120:	20000534 	.word	0x20000534
 8007124:	20000538 	.word	0x20000538
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007130:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007134:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8007136:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007138:	2b00      	cmp	r3, #0
 800713a:	d03f      	beq.n	80071bc <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800713c:	304c      	adds	r0, #76	; 0x4c
 800713e:	f000 f945 	bl	80073cc <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8007142:	4a35      	ldr	r2, [pc, #212]	; (8007218 <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8007144:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800714a:	3b01      	subs	r3, #1
 800714c:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800714e:	b9b8      	cbnz	r0, 8007180 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8007150:	b9f9      	cbnz	r1, 8007192 <_tx_thread_system_resume+0x66>
 8007152:	4b32      	ldr	r3, [pc, #200]	; (800721c <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007154:	4932      	ldr	r1, [pc, #200]	; (8007220 <_tx_thread_system_resume+0xf4>)
 8007156:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007158:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	428b      	cmp	r3, r1
 8007160:	d00d      	beq.n	800717e <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007162:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8007164:	b95b      	cbnz	r3, 800717e <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007166:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <_tx_thread_system_resume+0xf8>)
 8007168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800716e:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8007172:	b923      	cbnz	r3, 800717e <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007174:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8007178:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800717a:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8007180:	3901      	subs	r1, #1
 8007182:	2901      	cmp	r1, #1
 8007184:	d9e5      	bls.n	8007152 <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8007186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007188:	b991      	cbnz	r1, 80071b0 <_tx_thread_system_resume+0x84>
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800718c:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 800718e:	6321      	str	r1, [r4, #48]	; 0x30
 8007190:	e7e0      	b.n	8007154 <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8007192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007194:	b963      	cbnz	r3, 80071b0 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 8007196:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 8007198:	4e23      	ldr	r6, [pc, #140]	; (8007228 <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 800719a:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 800719c:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 80071a0:	b171      	cbz	r1, 80071c0 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80071a2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80071a4:	4b1d      	ldr	r3, [pc, #116]	; (800721c <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80071a6:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80071a8:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80071aa:	e9c4 1008 	strd	r1, r0, [r4, #32]
 80071ae:	e7d1      	b.n	8007154 <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80071b0:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80071b2:	2103      	movs	r1, #3
 80071b4:	4b19      	ldr	r3, [pc, #100]	; (800721c <_tx_thread_system_resume+0xf0>)
 80071b6:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 80071ba:	e7cb      	b.n	8007154 <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80071bc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80071be:	e7c0      	b.n	8007142 <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80071c0:	491a      	ldr	r1, [pc, #104]	; (800722c <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80071c2:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 80071c6:	4f1a      	ldr	r7, [pc, #104]	; (8007230 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80071c8:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80071ca:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80071ce:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 80071d2:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80071d4:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 80071d8:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80071da:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80071de:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 80071e2:	d9b7      	bls.n	8007154 <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 80071e4:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 80071e6:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 80071e8:	b199      	cbz	r1, 8007212 <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80071ea:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80071ec:	4286      	cmp	r6, r0
 80071ee:	d9b1      	bls.n	8007154 <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 80071f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80071f2:	428e      	cmp	r6, r1
 80071f4:	d006      	beq.n	8007204 <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80071f6:	480f      	ldr	r0, [pc, #60]	; (8007234 <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 80071f8:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80071fc:	6801      	ldr	r1, [r0, #0]
 80071fe:	ea41 010c 	orr.w	r1, r1, ip
 8007202:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 8007204:	601c      	str	r4, [r3, #0]
 8007206:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800720a:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0aa      	beq.n	8007166 <_tx_thread_system_resume+0x3a>
}
 8007210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 8007212:	601c      	str	r4, [r3, #0]
 8007214:	e79e      	b.n	8007154 <_tx_thread_system_resume+0x28>
 8007216:	bf00      	nop
 8007218:	20000530 	.word	0x20000530
 800721c:	20000538 	.word	0x20000538
 8007220:	20000534 	.word	0x20000534
 8007224:	e000ed04 	.word	0xe000ed04
 8007228:	20000498 	.word	0x20000498
 800722c:	2000051c 	.word	0x2000051c
 8007230:	2000053c 	.word	0x2000053c
 8007234:	20000540 	.word	0x20000540

08007238 <_tx_thread_terminate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800723c:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007240:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 8007242:	304c      	adds	r0, #76	; 0x4c
 8007244:	f000 f8c2 	bl	80073cc <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8007248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800724a:	2b02      	cmp	r3, #2
 800724c:	d02e      	beq.n	80072ac <_tx_thread_terminate+0x74>
        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800724e:	2b01      	cmp	r3, #1
 8007250:	d02c      	beq.n	80072ac <_tx_thread_terminate+0x74>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8007252:	4d27      	ldr	r5, [pc, #156]	; (80072f0 <_tx_thread_terminate+0xb8>)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8007254:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
        _tx_thread_preempt_disable++;
 8007258:	682a      	ldr	r2, [r5, #0]
 800725a:	3201      	adds	r2, #1
 800725c:	602a      	str	r2, [r5, #0]
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800725e:	bb5b      	cbnz	r3, 80072b8 <_tx_thread_terminate+0x80>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 8007260:	682a      	ldr	r2, [r5, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007262:	2101      	movs	r1, #1
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 8007264:	2002      	movs	r0, #2
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007266:	64e3      	str	r3, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 8007268:	440a      	add	r2, r1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800726a:	63a1      	str	r1, [r4, #56]	; 0x38
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 800726c:	6320      	str	r0, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 800726e:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007270:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 8007274:	b10f      	cbz	r7, 800727a <_tx_thread_terminate+0x42>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8007276:	4620      	mov	r0, r4
 8007278:	47b8      	blx	r7
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800727a:	4620      	mov	r0, r4
 800727c:	f7fe fc30 	bl	8005ae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007280:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007284:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007286:	f383 8810 	msr	PRIMASK, r3
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 800728a:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <_tx_thread_terminate+0xbc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	b10b      	cbz	r3, 8007294 <_tx_thread_terminate+0x5c>
        {

            /* Yes, call the mutex release function via a function pointer that 
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 8007290:	4620      	mov	r0, r4
 8007292:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007294:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007298:	b672      	cpsid	i
        /* Disable interrupts.  */
        TX_DISABLE
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	3b01      	subs	r3, #1
 800729e:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80072a0:	f382 8810 	msr	PRIMASK, r2
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80072a4:	f7ff ff24 	bl	80070f0 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
}
 80072a8:	2000      	movs	r0, #0
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ac:	f386 8810 	msr	PRIMASK, r6
    _tx_thread_system_preempt_check();
 80072b0:	f7ff ff1e 	bl	80070f0 <_tx_thread_system_preempt_check>
}
 80072b4:	2000      	movs	r0, #0
 80072b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 80072b8:	2102      	movs	r1, #2
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80072ba:	2201      	movs	r2, #1
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80072bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 80072be:	6321      	str	r1, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80072c0:	63a2      	str	r2, [r4, #56]	; 0x38
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80072c2:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 80072c6:	f386 8810 	msr	PRIMASK, r6
            if (suspend_cleanup != TX_NULL)
 80072ca:	b10b      	cbz	r3, 80072d0 <_tx_thread_terminate+0x98>
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 80072cc:	4620      	mov	r0, r4
 80072ce:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072d0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80072d4:	b672      	cpsid	i
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80072d6:	2200      	movs	r2, #0
 80072d8:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80072da:	f383 8810 	msr	PRIMASK, r3
            if (entry_exit_notify != TX_NULL)
 80072de:	b117      	cbz	r7, 80072e6 <_tx_thread_terminate+0xae>
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80072e0:	2101      	movs	r1, #1
 80072e2:	4620      	mov	r0, r4
 80072e4:	47b8      	blx	r7
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072e6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80072ea:	b672      	cpsid	i
 80072ec:	e7cb      	b.n	8007286 <_tx_thread_terminate+0x4e>
 80072ee:	bf00      	nop
 80072f0:	20000530 	.word	0x20000530
 80072f4:	20000518 	.word	0x20000518

080072f8 <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80072f8:	4b16      	ldr	r3, [pc, #88]	; (8007354 <_tx_thread_time_slice+0x5c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072fc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007300:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007302:	4915      	ldr	r1, [pc, #84]	; (8007358 <_tx_thread_time_slice+0x60>)
 8007304:	2000      	movs	r0, #0
 8007306:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8007308:	b193      	cbz	r3, 8007330 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800730a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800730c:	b981      	cbnz	r1, 8007330 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800730e:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007310:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8007312:	4298      	cmp	r0, r3
{
 8007314:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8007316:	4c11      	ldr	r4, [pc, #68]	; (800735c <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007318:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800731a:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800731c:	d003      	beq.n	8007326 <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800731e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	4299      	cmp	r1, r3
 8007324:	d007      	beq.n	8007336 <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007326:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800732a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	f382 8810 	msr	PRIMASK, r2
 8007334:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007336:	4c0a      	ldr	r4, [pc, #40]	; (8007360 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800733a:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800733c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007340:	4909      	ldr	r1, [pc, #36]	; (8007368 <_tx_thread_time_slice+0x70>)
 8007342:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007346:	600b      	str	r3, [r1, #0]
 8007348:	f382 8810 	msr	PRIMASK, r2
}
 800734c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000534 	.word	0x20000534
 8007358:	20000ac0 	.word	0x20000ac0
 800735c:	200005d0 	.word	0x200005d0
 8007360:	2000053c 	.word	0x2000053c
 8007364:	20000498 	.word	0x20000498
 8007368:	20000538 	.word	0x20000538

0800736c <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800736c:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800736e:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007372:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007374:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007376:	2a04      	cmp	r2, #4
 8007378:	d008      	beq.n	800738c <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800737a:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800737c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007380:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 8007384:	b162      	cbz	r2, 80073a0 <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007386:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800738a:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 800738c:	4a06      	ldr	r2, [pc, #24]	; (80073a8 <_tx_thread_timeout+0x3c>)
 800738e:	6813      	ldr	r3, [r2, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	f384 8810 	msr	PRIMASK, r4
}
 8007398:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 800739c:	f7ff bec6 	b.w	800712c <_tx_thread_system_resume>
}
 80073a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	20000530 	.word	0x20000530

080073ac <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80073ac:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80073b0:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <_tx_timer_expiration_process+0x18>)
 80073b4:	6813      	ldr	r3, [r2, #0]
 80073b6:	3301      	adds	r3, #1
 80073b8:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80073ba:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80073be:	4802      	ldr	r0, [pc, #8]	; (80073c8 <_tx_timer_expiration_process+0x1c>)
 80073c0:	f7ff beb4 	b.w	800712c <_tx_thread_system_resume>
 80073c4:	20000530 	.word	0x20000530
 80073c8:	200005e0 	.word	0x200005e0

080073cc <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80073cc:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80073ce:	b153      	cbz	r3, 80073e6 <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80073d0:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80073d2:	4290      	cmp	r0, r2
 80073d4:	d008      	beq.n	80073e8 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80073d6:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80073d8:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80073da:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80073dc:	6819      	ldr	r1, [r3, #0]
 80073de:	4281      	cmp	r1, r0
 80073e0:	d008      	beq.n	80073f4 <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	6183      	str	r3, [r0, #24]
    }
}
 80073e6:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4282      	cmp	r2, r0
 80073ec:	d1f9      	bne.n	80073e2 <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e7f6      	b.n	80073e2 <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 80073f4:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e7f3      	b.n	80073e2 <_tx_timer_system_deactivate+0x16>
 80073fa:	bf00      	nop

080073fc <_tx_event_flags_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80073fc:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80073fe:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007402:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <_tx_event_flags_cleanup+0x78>)
 8007406:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8007408:	4294      	cmp	r4, r2
 800740a:	d002      	beq.n	8007412 <_tx_event_flags_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800740c:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007410:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007412:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8007416:	428a      	cmp	r2, r1
 8007418:	d1f8      	bne.n	800740c <_tx_event_flags_cleanup+0x10>
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800741a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (group_ptr != TX_NULL)
 800741c:	2a00      	cmp	r2, #0
 800741e:	d0f5      	beq.n	800740c <_tx_event_flags_cleanup+0x10>
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8007420:	4915      	ldr	r1, [pc, #84]	; (8007478 <_tx_event_flags_cleanup+0x7c>)
 8007422:	6814      	ldr	r4, [r2, #0]
 8007424:	428c      	cmp	r4, r1
 8007426:	d1f1      	bne.n	800740c <_tx_event_flags_cleanup+0x10>
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8007428:	6951      	ldr	r1, [r2, #20]
 800742a:	2900      	cmp	r1, #0
 800742c:	d0ee      	beq.n	800740c <_tx_event_flags_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800742e:	2500      	movs	r5, #0
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8007430:	6914      	ldr	r4, [r2, #16]
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007432:	6685      	str	r5, [r0, #104]	; 0x68
                        if (suspension_head != TX_NULL)
 8007434:	b1dc      	cbz	r4, 800746e <_tx_event_flags_cleanup+0x72>
                            suspended_count--;
 8007436:	3901      	subs	r1, #1
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8007438:	6151      	str	r1, [r2, #20]
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800743a:	b1b1      	cbz	r1, 800746a <_tx_event_flags_cleanup+0x6e>
                                if (suspension_head == thread_ptr)
 800743c:	42a0      	cmp	r0, r4
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800743e:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8007442:	674d      	str	r5, [r1, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8007444:	6729      	str	r1, [r5, #112]	; 0x70
                                if (suspension_head == thread_ptr)
 8007446:	d010      	beq.n	800746a <_tx_event_flags_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8007448:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800744a:	2a07      	cmp	r2, #7
 800744c:	d1de      	bne.n	800740c <_tx_event_flags_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800744e:	490b      	ldr	r1, [pc, #44]	; (800747c <_tx_event_flags_cleanup+0x80>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8007450:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8007454:	680a      	ldr	r2, [r1, #0]
 8007456:	3201      	adds	r2, #1
 8007458:	600a      	str	r2, [r1, #0]
 800745a:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800745e:	f7ff fe65 	bl	800712c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007462:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007466:	b672      	cpsid	i
 8007468:	e7d0      	b.n	800740c <_tx_event_flags_cleanup+0x10>
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800746a:	6111      	str	r1, [r2, #16]
 800746c:	e7ec      	b.n	8007448 <_tx_event_flags_cleanup+0x4c>
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800746e:	2101      	movs	r1, #1
 8007470:	60d1      	str	r1, [r2, #12]
 8007472:	e7e9      	b.n	8007448 <_tx_event_flags_cleanup+0x4c>
 8007474:	080073fd 	.word	0x080073fd
 8007478:	4456444e 	.word	0x4456444e
 800747c:	20000530 	.word	0x20000530

08007480 <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007480:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007482:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007486:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8007488:	4a1a      	ldr	r2, [pc, #104]	; (80074f4 <_tx_mutex_cleanup+0x74>)
 800748a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800748c:	4294      	cmp	r4, r2
 800748e:	d002      	beq.n	8007496 <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007490:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007494:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007496:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800749a:	428a      	cmp	r2, r1
 800749c:	d1f8      	bne.n	8007490 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800749e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	d0f5      	beq.n	8007490 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80074a4:	4914      	ldr	r1, [pc, #80]	; (80074f8 <_tx_mutex_cleanup+0x78>)
 80074a6:	6814      	ldr	r4, [r2, #0]
 80074a8:	428c      	cmp	r4, r1
 80074aa:	d1f1      	bne.n	8007490 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80074ac:	69d1      	ldr	r1, [r2, #28]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	d0ee      	beq.n	8007490 <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 80074b2:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80074b4:	2400      	movs	r4, #0
 80074b6:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 80074b8:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80074ba:	b1c1      	cbz	r1, 80074ee <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80074bc:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80074be:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80074c2:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80074c4:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80074c6:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80074c8:	d011      	beq.n	80074ee <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80074ca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80074cc:	2a0d      	cmp	r2, #13
 80074ce:	d1df      	bne.n	8007490 <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 80074d0:	490a      	ldr	r1, [pc, #40]	; (80074fc <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80074d2:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 80074d4:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80074d6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 80074da:	3201      	adds	r2, #1
 80074dc:	600a      	str	r2, [r1, #0]
 80074de:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 80074e2:	f7ff fe23 	bl	800712c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80074ea:	b672      	cpsid	i
 80074ec:	e7d0      	b.n	8007490 <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80074ee:	6191      	str	r1, [r2, #24]
 80074f0:	e7eb      	b.n	80074ca <_tx_mutex_cleanup+0x4a>
 80074f2:	bf00      	nop
 80074f4:	08007481 	.word	0x08007481
 80074f8:	4d555445 	.word	0x4d555445
 80074fc:	20000530 	.word	0x20000530

08007500 <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007504:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007508:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800750a:	4d0d      	ldr	r5, [pc, #52]	; (8007540 <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800750c:	2601      	movs	r6, #1
 800750e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 8007512:	682a      	ldr	r2, [r5, #0]
 8007514:	4432      	add	r2, r6
 8007516:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 8007518:	b158      	cbz	r0, 8007532 <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800751a:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800751c:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8007520:	f7ff fa8a 	bl	8006a38 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007524:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007528:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800752a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 800752e:	2800      	cmp	r0, #0
 8007530:	d1f2      	bne.n	8007518 <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8007532:	682a      	ldr	r2, [r5, #0]
 8007534:	3a01      	subs	r2, #1
 8007536:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007538:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 800753c:	bd70      	pop	{r4, r5, r6, pc}
 800753e:	bf00      	nop
 8007540:	20000530 	.word	0x20000530

08007544 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007546:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800754a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800754c:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800754e:	2f01      	cmp	r7, #1
 8007550:	d92a      	bls.n	80075a8 <_tx_mutex_prioritize+0x64>
 8007552:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8007554:	2f02      	cmp	r7, #2
 8007556:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007558:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800755a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800755c:	d021      	beq.n	80075a2 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800755e:	f8df c084 	ldr.w	ip, [pc, #132]	; 80075e4 <_tx_mutex_prioritize+0xa0>
 8007562:	4616      	mov	r6, r2
 8007564:	f8dc e000 	ldr.w	lr, [ip]
 8007568:	f10e 0e01 	add.w	lr, lr, #1
 800756c:	f8cc e000 	str.w	lr, [ip]
 8007570:	e007      	b.n	8007582 <_tx_mutex_prioritize+0x3e>
 8007572:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8007574:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007576:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 8007578:	428b      	cmp	r3, r1
 800757a:	461e      	mov	r6, r3
 800757c:	d018      	beq.n	80075b0 <_tx_mutex_prioritize+0x6c>
 800757e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8007580:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007582:	42ab      	cmp	r3, r5
 8007584:	bf88      	it	hi
 8007586:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007588:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800758c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007590:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8007592:	6983      	ldr	r3, [r0, #24]
 8007594:	42b3      	cmp	r3, r6
 8007596:	d1ec      	bne.n	8007572 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8007598:	69c5      	ldr	r5, [r0, #28]
 800759a:	42bd      	cmp	r5, r7
 800759c:	d020      	beq.n	80075e0 <_tx_mutex_prioritize+0x9c>
 800759e:	462f      	mov	r7, r5
 80075a0:	e7e8      	b.n	8007574 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80075a2:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80075a4:	bf38      	it	cc
 80075a6:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80075a8:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 80075ac:	2000      	movs	r0, #0
 80075ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 80075b0:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 80075b4:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 80075b6:	f101 31ff 	add.w	r1, r1, #4294967295
 80075ba:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 80075be:	d009      	beq.n	80075d4 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80075c0:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80075c4:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80075c6:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80075c8:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80075ca:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80075ce:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80075d0:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80075d2:	6182      	str	r2, [r0, #24]
 80075d4:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 80075d8:	f7ff fd8a 	bl	80070f0 <_tx_thread_system_preempt_check>
}
 80075dc:	2000      	movs	r0, #0
 80075de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80075e0:	6f09      	ldr	r1, [r1, #112]	; 0x70
 80075e2:	e7c9      	b.n	8007578 <_tx_mutex_prioritize+0x34>
 80075e4:	20000530 	.word	0x20000530

080075e8 <_tx_semaphore_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80075e8:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80075ea:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80075ee:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80075f0:	4a1a      	ldr	r2, [pc, #104]	; (800765c <_tx_semaphore_cleanup+0x74>)
 80075f2:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80075f4:	4294      	cmp	r4, r2
 80075f6:	d002      	beq.n	80075fe <_tx_semaphore_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80075f8:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80075fc:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80075fe:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8007602:	428a      	cmp	r2, r1
 8007604:	d1f8      	bne.n	80075f8 <_tx_semaphore_cleanup+0x10>
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007606:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (semaphore_ptr != TX_NULL)
 8007608:	2a00      	cmp	r2, #0
 800760a:	d0f5      	beq.n	80075f8 <_tx_semaphore_cleanup+0x10>
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800760c:	4914      	ldr	r1, [pc, #80]	; (8007660 <_tx_semaphore_cleanup+0x78>)
 800760e:	6814      	ldr	r4, [r2, #0]
 8007610:	428c      	cmp	r4, r1
 8007612:	d1f1      	bne.n	80075f8 <_tx_semaphore_cleanup+0x10>
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8007614:	6911      	ldr	r1, [r2, #16]
 8007616:	2900      	cmp	r1, #0
 8007618:	d0ee      	beq.n	80075f8 <_tx_semaphore_cleanup+0x10>
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800761a:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800761c:	2400      	movs	r4, #0
 800761e:	6684      	str	r4, [r0, #104]	; 0x68
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8007620:	6111      	str	r1, [r2, #16]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007622:	b1c1      	cbz	r1, 8007656 <_tx_semaphore_cleanup+0x6e>
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8007624:	68d5      	ldr	r5, [r2, #12]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007626:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800762a:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800762c:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800762e:	6721      	str	r1, [r4, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8007630:	d011      	beq.n	8007656 <_tx_semaphore_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8007632:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007634:	2a06      	cmp	r2, #6
 8007636:	d1df      	bne.n	80075f8 <_tx_semaphore_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8007638:	490a      	ldr	r1, [pc, #40]	; (8007664 <_tx_semaphore_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800763a:	240d      	movs	r4, #13
                            _tx_thread_preempt_disable++;
 800763c:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800763e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8007642:	3201      	adds	r2, #1
 8007644:	600a      	str	r2, [r1, #0]
 8007646:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800764a:	f7ff fd6f 	bl	800712c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800764e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007652:	b672      	cpsid	i
 8007654:	e7d0      	b.n	80075f8 <_tx_semaphore_cleanup+0x10>
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007656:	60d1      	str	r1, [r2, #12]
 8007658:	e7eb      	b.n	8007632 <_tx_semaphore_cleanup+0x4a>
 800765a:	bf00      	nop
 800765c:	080075e9 	.word	0x080075e9
 8007660:	53454d41 	.word	0x53454d41
 8007664:	20000530 	.word	0x20000530

08007668 <__libc_init_array>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	4e0d      	ldr	r6, [pc, #52]	; (80076a0 <__libc_init_array+0x38>)
 800766c:	4c0d      	ldr	r4, [pc, #52]	; (80076a4 <__libc_init_array+0x3c>)
 800766e:	1ba4      	subs	r4, r4, r6
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	2500      	movs	r5, #0
 8007674:	42a5      	cmp	r5, r4
 8007676:	d109      	bne.n	800768c <__libc_init_array+0x24>
 8007678:	4e0b      	ldr	r6, [pc, #44]	; (80076a8 <__libc_init_array+0x40>)
 800767a:	4c0c      	ldr	r4, [pc, #48]	; (80076ac <__libc_init_array+0x44>)
 800767c:	f000 ff9e 	bl	80085bc <_init>
 8007680:	1ba4      	subs	r4, r4, r6
 8007682:	10a4      	asrs	r4, r4, #2
 8007684:	2500      	movs	r5, #0
 8007686:	42a5      	cmp	r5, r4
 8007688:	d105      	bne.n	8007696 <__libc_init_array+0x2e>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007690:	4798      	blx	r3
 8007692:	3501      	adds	r5, #1
 8007694:	e7ee      	b.n	8007674 <__libc_init_array+0xc>
 8007696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800769a:	4798      	blx	r3
 800769c:	3501      	adds	r5, #1
 800769e:	e7f2      	b.n	8007686 <__libc_init_array+0x1e>
 80076a0:	080088d4 	.word	0x080088d4
 80076a4:	080088d4 	.word	0x080088d4
 80076a8:	080088d4 	.word	0x080088d4
 80076ac:	080088d8 	.word	0x080088d8

080076b0 <memset>:
 80076b0:	4402      	add	r2, r0
 80076b2:	4603      	mov	r3, r0
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d100      	bne.n	80076ba <memset+0xa>
 80076b8:	4770      	bx	lr
 80076ba:	f803 1b01 	strb.w	r1, [r3], #1
 80076be:	e7f9      	b.n	80076b4 <memset+0x4>

080076c0 <iprintf>:
 80076c0:	b40f      	push	{r0, r1, r2, r3}
 80076c2:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <iprintf+0x2c>)
 80076c4:	b513      	push	{r0, r1, r4, lr}
 80076c6:	681c      	ldr	r4, [r3, #0]
 80076c8:	b124      	cbz	r4, 80076d4 <iprintf+0x14>
 80076ca:	69a3      	ldr	r3, [r4, #24]
 80076cc:	b913      	cbnz	r3, 80076d4 <iprintf+0x14>
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fa22 	bl	8007b18 <__sinit>
 80076d4:	ab05      	add	r3, sp, #20
 80076d6:	9a04      	ldr	r2, [sp, #16]
 80076d8:	68a1      	ldr	r1, [r4, #8]
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fbdb 	bl	8007e98 <_vfiprintf_r>
 80076e2:	b002      	add	sp, #8
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	b004      	add	sp, #16
 80076ea:	4770      	bx	lr
 80076ec:	2000015c 	.word	0x2000015c

080076f0 <_puts_r>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	460e      	mov	r6, r1
 80076f4:	4605      	mov	r5, r0
 80076f6:	b118      	cbz	r0, 8007700 <_puts_r+0x10>
 80076f8:	6983      	ldr	r3, [r0, #24]
 80076fa:	b90b      	cbnz	r3, 8007700 <_puts_r+0x10>
 80076fc:	f000 fa0c 	bl	8007b18 <__sinit>
 8007700:	69ab      	ldr	r3, [r5, #24]
 8007702:	68ac      	ldr	r4, [r5, #8]
 8007704:	b913      	cbnz	r3, 800770c <_puts_r+0x1c>
 8007706:	4628      	mov	r0, r5
 8007708:	f000 fa06 	bl	8007b18 <__sinit>
 800770c:	4b23      	ldr	r3, [pc, #140]	; (800779c <_puts_r+0xac>)
 800770e:	429c      	cmp	r4, r3
 8007710:	d117      	bne.n	8007742 <_puts_r+0x52>
 8007712:	686c      	ldr	r4, [r5, #4]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	071b      	lsls	r3, r3, #28
 8007718:	d51d      	bpl.n	8007756 <_puts_r+0x66>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	b1db      	cbz	r3, 8007756 <_puts_r+0x66>
 800771e:	3e01      	subs	r6, #1
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007726:	3b01      	subs	r3, #1
 8007728:	60a3      	str	r3, [r4, #8]
 800772a:	b9e9      	cbnz	r1, 8007768 <_puts_r+0x78>
 800772c:	2b00      	cmp	r3, #0
 800772e:	da2e      	bge.n	800778e <_puts_r+0x9e>
 8007730:	4622      	mov	r2, r4
 8007732:	210a      	movs	r1, #10
 8007734:	4628      	mov	r0, r5
 8007736:	f000 f83f 	bl	80077b8 <__swbuf_r>
 800773a:	3001      	adds	r0, #1
 800773c:	d011      	beq.n	8007762 <_puts_r+0x72>
 800773e:	200a      	movs	r0, #10
 8007740:	e011      	b.n	8007766 <_puts_r+0x76>
 8007742:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <_puts_r+0xb0>)
 8007744:	429c      	cmp	r4, r3
 8007746:	d101      	bne.n	800774c <_puts_r+0x5c>
 8007748:	68ac      	ldr	r4, [r5, #8]
 800774a:	e7e3      	b.n	8007714 <_puts_r+0x24>
 800774c:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <_puts_r+0xb4>)
 800774e:	429c      	cmp	r4, r3
 8007750:	bf08      	it	eq
 8007752:	68ec      	ldreq	r4, [r5, #12]
 8007754:	e7de      	b.n	8007714 <_puts_r+0x24>
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f000 f87f 	bl	800785c <__swsetup_r>
 800775e:	2800      	cmp	r0, #0
 8007760:	d0dd      	beq.n	800771e <_puts_r+0x2e>
 8007762:	f04f 30ff 	mov.w	r0, #4294967295
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	2b00      	cmp	r3, #0
 800776a:	da04      	bge.n	8007776 <_puts_r+0x86>
 800776c:	69a2      	ldr	r2, [r4, #24]
 800776e:	429a      	cmp	r2, r3
 8007770:	dc06      	bgt.n	8007780 <_puts_r+0x90>
 8007772:	290a      	cmp	r1, #10
 8007774:	d004      	beq.n	8007780 <_puts_r+0x90>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	6022      	str	r2, [r4, #0]
 800777c:	7019      	strb	r1, [r3, #0]
 800777e:	e7cf      	b.n	8007720 <_puts_r+0x30>
 8007780:	4622      	mov	r2, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f818 	bl	80077b8 <__swbuf_r>
 8007788:	3001      	adds	r0, #1
 800778a:	d1c9      	bne.n	8007720 <_puts_r+0x30>
 800778c:	e7e9      	b.n	8007762 <_puts_r+0x72>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	200a      	movs	r0, #10
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	7018      	strb	r0, [r3, #0]
 8007798:	e7e5      	b.n	8007766 <_puts_r+0x76>
 800779a:	bf00      	nop
 800779c:	08008858 	.word	0x08008858
 80077a0:	08008878 	.word	0x08008878
 80077a4:	08008838 	.word	0x08008838

080077a8 <puts>:
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <puts+0xc>)
 80077aa:	4601      	mov	r1, r0
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f7ff bf9f 	b.w	80076f0 <_puts_r>
 80077b2:	bf00      	nop
 80077b4:	2000015c 	.word	0x2000015c

080077b8 <__swbuf_r>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	460e      	mov	r6, r1
 80077bc:	4614      	mov	r4, r2
 80077be:	4605      	mov	r5, r0
 80077c0:	b118      	cbz	r0, 80077ca <__swbuf_r+0x12>
 80077c2:	6983      	ldr	r3, [r0, #24]
 80077c4:	b90b      	cbnz	r3, 80077ca <__swbuf_r+0x12>
 80077c6:	f000 f9a7 	bl	8007b18 <__sinit>
 80077ca:	4b21      	ldr	r3, [pc, #132]	; (8007850 <__swbuf_r+0x98>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d12a      	bne.n	8007826 <__swbuf_r+0x6e>
 80077d0:	686c      	ldr	r4, [r5, #4]
 80077d2:	69a3      	ldr	r3, [r4, #24]
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	071a      	lsls	r2, r3, #28
 80077da:	d52e      	bpl.n	800783a <__swbuf_r+0x82>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	b363      	cbz	r3, 800783a <__swbuf_r+0x82>
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	6820      	ldr	r0, [r4, #0]
 80077e4:	1ac0      	subs	r0, r0, r3
 80077e6:	6963      	ldr	r3, [r4, #20]
 80077e8:	b2f6      	uxtb	r6, r6
 80077ea:	4283      	cmp	r3, r0
 80077ec:	4637      	mov	r7, r6
 80077ee:	dc04      	bgt.n	80077fa <__swbuf_r+0x42>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f926 	bl	8007a44 <_fflush_r>
 80077f8:	bb28      	cbnz	r0, 8007846 <__swbuf_r+0x8e>
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	60a3      	str	r3, [r4, #8]
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	6022      	str	r2, [r4, #0]
 8007806:	701e      	strb	r6, [r3, #0]
 8007808:	6963      	ldr	r3, [r4, #20]
 800780a:	3001      	adds	r0, #1
 800780c:	4283      	cmp	r3, r0
 800780e:	d004      	beq.n	800781a <__swbuf_r+0x62>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	07db      	lsls	r3, r3, #31
 8007814:	d519      	bpl.n	800784a <__swbuf_r+0x92>
 8007816:	2e0a      	cmp	r6, #10
 8007818:	d117      	bne.n	800784a <__swbuf_r+0x92>
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f000 f911 	bl	8007a44 <_fflush_r>
 8007822:	b190      	cbz	r0, 800784a <__swbuf_r+0x92>
 8007824:	e00f      	b.n	8007846 <__swbuf_r+0x8e>
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <__swbuf_r+0x9c>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d101      	bne.n	8007830 <__swbuf_r+0x78>
 800782c:	68ac      	ldr	r4, [r5, #8]
 800782e:	e7d0      	b.n	80077d2 <__swbuf_r+0x1a>
 8007830:	4b09      	ldr	r3, [pc, #36]	; (8007858 <__swbuf_r+0xa0>)
 8007832:	429c      	cmp	r4, r3
 8007834:	bf08      	it	eq
 8007836:	68ec      	ldreq	r4, [r5, #12]
 8007838:	e7cb      	b.n	80077d2 <__swbuf_r+0x1a>
 800783a:	4621      	mov	r1, r4
 800783c:	4628      	mov	r0, r5
 800783e:	f000 f80d 	bl	800785c <__swsetup_r>
 8007842:	2800      	cmp	r0, #0
 8007844:	d0cc      	beq.n	80077e0 <__swbuf_r+0x28>
 8007846:	f04f 37ff 	mov.w	r7, #4294967295
 800784a:	4638      	mov	r0, r7
 800784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800784e:	bf00      	nop
 8007850:	08008858 	.word	0x08008858
 8007854:	08008878 	.word	0x08008878
 8007858:	08008838 	.word	0x08008838

0800785c <__swsetup_r>:
 800785c:	4b32      	ldr	r3, [pc, #200]	; (8007928 <__swsetup_r+0xcc>)
 800785e:	b570      	push	{r4, r5, r6, lr}
 8007860:	681d      	ldr	r5, [r3, #0]
 8007862:	4606      	mov	r6, r0
 8007864:	460c      	mov	r4, r1
 8007866:	b125      	cbz	r5, 8007872 <__swsetup_r+0x16>
 8007868:	69ab      	ldr	r3, [r5, #24]
 800786a:	b913      	cbnz	r3, 8007872 <__swsetup_r+0x16>
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f953 	bl	8007b18 <__sinit>
 8007872:	4b2e      	ldr	r3, [pc, #184]	; (800792c <__swsetup_r+0xd0>)
 8007874:	429c      	cmp	r4, r3
 8007876:	d10f      	bne.n	8007898 <__swsetup_r+0x3c>
 8007878:	686c      	ldr	r4, [r5, #4]
 800787a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787e:	b29a      	uxth	r2, r3
 8007880:	0715      	lsls	r5, r2, #28
 8007882:	d42c      	bmi.n	80078de <__swsetup_r+0x82>
 8007884:	06d0      	lsls	r0, r2, #27
 8007886:	d411      	bmi.n	80078ac <__swsetup_r+0x50>
 8007888:	2209      	movs	r2, #9
 800788a:	6032      	str	r2, [r6, #0]
 800788c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	f04f 30ff 	mov.w	r0, #4294967295
 8007896:	e03e      	b.n	8007916 <__swsetup_r+0xba>
 8007898:	4b25      	ldr	r3, [pc, #148]	; (8007930 <__swsetup_r+0xd4>)
 800789a:	429c      	cmp	r4, r3
 800789c:	d101      	bne.n	80078a2 <__swsetup_r+0x46>
 800789e:	68ac      	ldr	r4, [r5, #8]
 80078a0:	e7eb      	b.n	800787a <__swsetup_r+0x1e>
 80078a2:	4b24      	ldr	r3, [pc, #144]	; (8007934 <__swsetup_r+0xd8>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	bf08      	it	eq
 80078a8:	68ec      	ldreq	r4, [r5, #12]
 80078aa:	e7e6      	b.n	800787a <__swsetup_r+0x1e>
 80078ac:	0751      	lsls	r1, r2, #29
 80078ae:	d512      	bpl.n	80078d6 <__swsetup_r+0x7a>
 80078b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078b2:	b141      	cbz	r1, 80078c6 <__swsetup_r+0x6a>
 80078b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <__swsetup_r+0x66>
 80078bc:	4630      	mov	r0, r6
 80078be:	f000 fa19 	bl	8007cf4 <_free_r>
 80078c2:	2300      	movs	r3, #0
 80078c4:	6363      	str	r3, [r4, #52]	; 0x34
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	2300      	movs	r3, #0
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f043 0308 	orr.w	r3, r3, #8
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	b94b      	cbnz	r3, 80078f6 <__swsetup_r+0x9a>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ec:	d003      	beq.n	80078f6 <__swsetup_r+0x9a>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 f9bf 	bl	8007c74 <__smakebuf_r>
 80078f6:	89a2      	ldrh	r2, [r4, #12]
 80078f8:	f012 0301 	ands.w	r3, r2, #1
 80078fc:	d00c      	beq.n	8007918 <__swsetup_r+0xbc>
 80078fe:	2300      	movs	r3, #0
 8007900:	60a3      	str	r3, [r4, #8]
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	425b      	negs	r3, r3
 8007906:	61a3      	str	r3, [r4, #24]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b953      	cbnz	r3, 8007922 <__swsetup_r+0xc6>
 800790c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007910:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007914:	d1ba      	bne.n	800788c <__swsetup_r+0x30>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	0792      	lsls	r2, r2, #30
 800791a:	bf58      	it	pl
 800791c:	6963      	ldrpl	r3, [r4, #20]
 800791e:	60a3      	str	r3, [r4, #8]
 8007920:	e7f2      	b.n	8007908 <__swsetup_r+0xac>
 8007922:	2000      	movs	r0, #0
 8007924:	e7f7      	b.n	8007916 <__swsetup_r+0xba>
 8007926:	bf00      	nop
 8007928:	2000015c 	.word	0x2000015c
 800792c:	08008858 	.word	0x08008858
 8007930:	08008878 	.word	0x08008878
 8007934:	08008838 	.word	0x08008838

08007938 <__sflush_r>:
 8007938:	898a      	ldrh	r2, [r1, #12]
 800793a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793e:	4605      	mov	r5, r0
 8007940:	0710      	lsls	r0, r2, #28
 8007942:	460c      	mov	r4, r1
 8007944:	d458      	bmi.n	80079f8 <__sflush_r+0xc0>
 8007946:	684b      	ldr	r3, [r1, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	dc05      	bgt.n	8007958 <__sflush_r+0x20>
 800794c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	dc02      	bgt.n	8007958 <__sflush_r+0x20>
 8007952:	2000      	movs	r0, #0
 8007954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800795a:	2e00      	cmp	r6, #0
 800795c:	d0f9      	beq.n	8007952 <__sflush_r+0x1a>
 800795e:	2300      	movs	r3, #0
 8007960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007964:	682f      	ldr	r7, [r5, #0]
 8007966:	6a21      	ldr	r1, [r4, #32]
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	d032      	beq.n	80079d2 <__sflush_r+0x9a>
 800796c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	075a      	lsls	r2, r3, #29
 8007972:	d505      	bpl.n	8007980 <__sflush_r+0x48>
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	1ac0      	subs	r0, r0, r3
 8007978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800797a:	b10b      	cbz	r3, 8007980 <__sflush_r+0x48>
 800797c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800797e:	1ac0      	subs	r0, r0, r3
 8007980:	2300      	movs	r3, #0
 8007982:	4602      	mov	r2, r0
 8007984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007986:	6a21      	ldr	r1, [r4, #32]
 8007988:	4628      	mov	r0, r5
 800798a:	47b0      	blx	r6
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	d106      	bne.n	80079a0 <__sflush_r+0x68>
 8007992:	6829      	ldr	r1, [r5, #0]
 8007994:	291d      	cmp	r1, #29
 8007996:	d848      	bhi.n	8007a2a <__sflush_r+0xf2>
 8007998:	4a29      	ldr	r2, [pc, #164]	; (8007a40 <__sflush_r+0x108>)
 800799a:	40ca      	lsrs	r2, r1
 800799c:	07d6      	lsls	r6, r2, #31
 800799e:	d544      	bpl.n	8007a2a <__sflush_r+0xf2>
 80079a0:	2200      	movs	r2, #0
 80079a2:	6062      	str	r2, [r4, #4]
 80079a4:	04d9      	lsls	r1, r3, #19
 80079a6:	6922      	ldr	r2, [r4, #16]
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	d504      	bpl.n	80079b6 <__sflush_r+0x7e>
 80079ac:	1c42      	adds	r2, r0, #1
 80079ae:	d101      	bne.n	80079b4 <__sflush_r+0x7c>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b903      	cbnz	r3, 80079b6 <__sflush_r+0x7e>
 80079b4:	6560      	str	r0, [r4, #84]	; 0x54
 80079b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b8:	602f      	str	r7, [r5, #0]
 80079ba:	2900      	cmp	r1, #0
 80079bc:	d0c9      	beq.n	8007952 <__sflush_r+0x1a>
 80079be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079c2:	4299      	cmp	r1, r3
 80079c4:	d002      	beq.n	80079cc <__sflush_r+0x94>
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 f994 	bl	8007cf4 <_free_r>
 80079cc:	2000      	movs	r0, #0
 80079ce:	6360      	str	r0, [r4, #52]	; 0x34
 80079d0:	e7c0      	b.n	8007954 <__sflush_r+0x1c>
 80079d2:	2301      	movs	r3, #1
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b0      	blx	r6
 80079d8:	1c41      	adds	r1, r0, #1
 80079da:	d1c8      	bne.n	800796e <__sflush_r+0x36>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0c5      	beq.n	800796e <__sflush_r+0x36>
 80079e2:	2b1d      	cmp	r3, #29
 80079e4:	d001      	beq.n	80079ea <__sflush_r+0xb2>
 80079e6:	2b16      	cmp	r3, #22
 80079e8:	d101      	bne.n	80079ee <__sflush_r+0xb6>
 80079ea:	602f      	str	r7, [r5, #0]
 80079ec:	e7b1      	b.n	8007952 <__sflush_r+0x1a>
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	e7ad      	b.n	8007954 <__sflush_r+0x1c>
 80079f8:	690f      	ldr	r7, [r1, #16]
 80079fa:	2f00      	cmp	r7, #0
 80079fc:	d0a9      	beq.n	8007952 <__sflush_r+0x1a>
 80079fe:	0793      	lsls	r3, r2, #30
 8007a00:	680e      	ldr	r6, [r1, #0]
 8007a02:	bf08      	it	eq
 8007a04:	694b      	ldreq	r3, [r1, #20]
 8007a06:	600f      	str	r7, [r1, #0]
 8007a08:	bf18      	it	ne
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	eba6 0807 	sub.w	r8, r6, r7
 8007a10:	608b      	str	r3, [r1, #8]
 8007a12:	f1b8 0f00 	cmp.w	r8, #0
 8007a16:	dd9c      	ble.n	8007952 <__sflush_r+0x1a>
 8007a18:	4643      	mov	r3, r8
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	6a21      	ldr	r1, [r4, #32]
 8007a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b0      	blx	r6
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dc06      	bgt.n	8007a36 <__sflush_r+0xfe>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e78e      	b.n	8007954 <__sflush_r+0x1c>
 8007a36:	4407      	add	r7, r0
 8007a38:	eba8 0800 	sub.w	r8, r8, r0
 8007a3c:	e7e9      	b.n	8007a12 <__sflush_r+0xda>
 8007a3e:	bf00      	nop
 8007a40:	20400001 	.word	0x20400001

08007a44 <_fflush_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	690b      	ldr	r3, [r1, #16]
 8007a48:	4605      	mov	r5, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	b1db      	cbz	r3, 8007a86 <_fflush_r+0x42>
 8007a4e:	b118      	cbz	r0, 8007a58 <_fflush_r+0x14>
 8007a50:	6983      	ldr	r3, [r0, #24]
 8007a52:	b90b      	cbnz	r3, 8007a58 <_fflush_r+0x14>
 8007a54:	f000 f860 	bl	8007b18 <__sinit>
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <_fflush_r+0x48>)
 8007a5a:	429c      	cmp	r4, r3
 8007a5c:	d109      	bne.n	8007a72 <_fflush_r+0x2e>
 8007a5e:	686c      	ldr	r4, [r5, #4]
 8007a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a64:	b17b      	cbz	r3, 8007a86 <_fflush_r+0x42>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6e:	f7ff bf63 	b.w	8007938 <__sflush_r>
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <_fflush_r+0x4c>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	d101      	bne.n	8007a7c <_fflush_r+0x38>
 8007a78:	68ac      	ldr	r4, [r5, #8]
 8007a7a:	e7f1      	b.n	8007a60 <_fflush_r+0x1c>
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <_fflush_r+0x50>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	bf08      	it	eq
 8007a82:	68ec      	ldreq	r4, [r5, #12]
 8007a84:	e7ec      	b.n	8007a60 <_fflush_r+0x1c>
 8007a86:	2000      	movs	r0, #0
 8007a88:	bd38      	pop	{r3, r4, r5, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08008858 	.word	0x08008858
 8007a90:	08008878 	.word	0x08008878
 8007a94:	08008838 	.word	0x08008838

08007a98 <std>:
 8007a98:	2300      	movs	r3, #0
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007aa2:	6083      	str	r3, [r0, #8]
 8007aa4:	8181      	strh	r1, [r0, #12]
 8007aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8007aa8:	81c2      	strh	r2, [r0, #14]
 8007aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aae:	6183      	str	r3, [r0, #24]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	305c      	adds	r0, #92	; 0x5c
 8007ab6:	f7ff fdfb 	bl	80076b0 <memset>
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <std+0x38>)
 8007abc:	6263      	str	r3, [r4, #36]	; 0x24
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <std+0x3c>)
 8007ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <std+0x40>)
 8007ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <std+0x44>)
 8007ac8:	6224      	str	r4, [r4, #32]
 8007aca:	6323      	str	r3, [r4, #48]	; 0x30
 8007acc:	bd10      	pop	{r4, pc}
 8007ace:	bf00      	nop
 8007ad0:	080083f5 	.word	0x080083f5
 8007ad4:	08008417 	.word	0x08008417
 8007ad8:	0800844f 	.word	0x0800844f
 8007adc:	08008473 	.word	0x08008473

08007ae0 <_cleanup_r>:
 8007ae0:	4901      	ldr	r1, [pc, #4]	; (8007ae8 <_cleanup_r+0x8>)
 8007ae2:	f000 b885 	b.w	8007bf0 <_fwalk_reent>
 8007ae6:	bf00      	nop
 8007ae8:	08007a45 	.word	0x08007a45

08007aec <__sfmoreglue>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	1e4a      	subs	r2, r1, #1
 8007af0:	2568      	movs	r5, #104	; 0x68
 8007af2:	4355      	muls	r5, r2
 8007af4:	460e      	mov	r6, r1
 8007af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007afa:	f000 f949 	bl	8007d90 <_malloc_r>
 8007afe:	4604      	mov	r4, r0
 8007b00:	b140      	cbz	r0, 8007b14 <__sfmoreglue+0x28>
 8007b02:	2100      	movs	r1, #0
 8007b04:	e9c0 1600 	strd	r1, r6, [r0]
 8007b08:	300c      	adds	r0, #12
 8007b0a:	60a0      	str	r0, [r4, #8]
 8007b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b10:	f7ff fdce 	bl	80076b0 <memset>
 8007b14:	4620      	mov	r0, r4
 8007b16:	bd70      	pop	{r4, r5, r6, pc}

08007b18 <__sinit>:
 8007b18:	6983      	ldr	r3, [r0, #24]
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	bb33      	cbnz	r3, 8007b6e <__sinit+0x56>
 8007b20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007b24:	6503      	str	r3, [r0, #80]	; 0x50
 8007b26:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <__sinit+0x58>)
 8007b28:	4a12      	ldr	r2, [pc, #72]	; (8007b74 <__sinit+0x5c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6282      	str	r2, [r0, #40]	; 0x28
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	bf04      	itt	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	6183      	streq	r3, [r0, #24]
 8007b36:	f000 f81f 	bl	8007b78 <__sfp>
 8007b3a:	6060      	str	r0, [r4, #4]
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 f81b 	bl	8007b78 <__sfp>
 8007b42:	60a0      	str	r0, [r4, #8]
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 f817 	bl	8007b78 <__sfp>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	60e0      	str	r0, [r4, #12]
 8007b4e:	2104      	movs	r1, #4
 8007b50:	6860      	ldr	r0, [r4, #4]
 8007b52:	f7ff ffa1 	bl	8007a98 <std>
 8007b56:	2201      	movs	r2, #1
 8007b58:	2109      	movs	r1, #9
 8007b5a:	68a0      	ldr	r0, [r4, #8]
 8007b5c:	f7ff ff9c 	bl	8007a98 <std>
 8007b60:	2202      	movs	r2, #2
 8007b62:	2112      	movs	r1, #18
 8007b64:	68e0      	ldr	r0, [r4, #12]
 8007b66:	f7ff ff97 	bl	8007a98 <std>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	61a3      	str	r3, [r4, #24]
 8007b6e:	bd10      	pop	{r4, pc}
 8007b70:	08008834 	.word	0x08008834
 8007b74:	08007ae1 	.word	0x08007ae1

08007b78 <__sfp>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <__sfp+0x70>)
 8007b7c:	681e      	ldr	r6, [r3, #0]
 8007b7e:	69b3      	ldr	r3, [r6, #24]
 8007b80:	4607      	mov	r7, r0
 8007b82:	b913      	cbnz	r3, 8007b8a <__sfp+0x12>
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7ff ffc7 	bl	8007b18 <__sinit>
 8007b8a:	3648      	adds	r6, #72	; 0x48
 8007b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	d503      	bpl.n	8007b9c <__sfp+0x24>
 8007b94:	6833      	ldr	r3, [r6, #0]
 8007b96:	b133      	cbz	r3, 8007ba6 <__sfp+0x2e>
 8007b98:	6836      	ldr	r6, [r6, #0]
 8007b9a:	e7f7      	b.n	8007b8c <__sfp+0x14>
 8007b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ba0:	b16d      	cbz	r5, 8007bbe <__sfp+0x46>
 8007ba2:	3468      	adds	r4, #104	; 0x68
 8007ba4:	e7f4      	b.n	8007b90 <__sfp+0x18>
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ff9f 	bl	8007aec <__sfmoreglue>
 8007bae:	6030      	str	r0, [r6, #0]
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1f1      	bne.n	8007b98 <__sfp+0x20>
 8007bb4:	230c      	movs	r3, #12
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4604      	mov	r4, r0
 8007bba:	4620      	mov	r0, r4
 8007bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <__sfp+0x74>)
 8007bc0:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc2:	e9c4 5500 	strd	r5, r5, [r4]
 8007bc6:	60a5      	str	r5, [r4, #8]
 8007bc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007bcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bd8:	f7ff fd6a 	bl	80076b0 <memset>
 8007bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007be4:	e7e9      	b.n	8007bba <__sfp+0x42>
 8007be6:	bf00      	nop
 8007be8:	08008834 	.word	0x08008834
 8007bec:	ffff0001 	.word	0xffff0001

08007bf0 <_fwalk_reent>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4680      	mov	r8, r0
 8007bf6:	4689      	mov	r9, r1
 8007bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	b914      	cbnz	r4, 8007c06 <_fwalk_reent+0x16>
 8007c00:	4630      	mov	r0, r6
 8007c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007c0a:	3f01      	subs	r7, #1
 8007c0c:	d501      	bpl.n	8007c12 <_fwalk_reent+0x22>
 8007c0e:	6824      	ldr	r4, [r4, #0]
 8007c10:	e7f5      	b.n	8007bfe <_fwalk_reent+0xe>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d907      	bls.n	8007c28 <_fwalk_reent+0x38>
 8007c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	d003      	beq.n	8007c28 <_fwalk_reent+0x38>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4640      	mov	r0, r8
 8007c24:	47c8      	blx	r9
 8007c26:	4306      	orrs	r6, r0
 8007c28:	3568      	adds	r5, #104	; 0x68
 8007c2a:	e7ee      	b.n	8007c0a <_fwalk_reent+0x1a>

08007c2c <__swhatbuf_r>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	460e      	mov	r6, r1
 8007c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c34:	2900      	cmp	r1, #0
 8007c36:	b096      	sub	sp, #88	; 0x58
 8007c38:	4614      	mov	r4, r2
 8007c3a:	461d      	mov	r5, r3
 8007c3c:	da07      	bge.n	8007c4e <__swhatbuf_r+0x22>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	602b      	str	r3, [r5, #0]
 8007c42:	89b3      	ldrh	r3, [r6, #12]
 8007c44:	061a      	lsls	r2, r3, #24
 8007c46:	d410      	bmi.n	8007c6a <__swhatbuf_r+0x3e>
 8007c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c4c:	e00e      	b.n	8007c6c <__swhatbuf_r+0x40>
 8007c4e:	466a      	mov	r2, sp
 8007c50:	f000 fc36 	bl	80084c0 <_fstat_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	dbf2      	blt.n	8007c3e <__swhatbuf_r+0x12>
 8007c58:	9a01      	ldr	r2, [sp, #4]
 8007c5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c62:	425a      	negs	r2, r3
 8007c64:	415a      	adcs	r2, r3
 8007c66:	602a      	str	r2, [r5, #0]
 8007c68:	e7ee      	b.n	8007c48 <__swhatbuf_r+0x1c>
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	b016      	add	sp, #88	; 0x58
 8007c72:	bd70      	pop	{r4, r5, r6, pc}

08007c74 <__smakebuf_r>:
 8007c74:	898b      	ldrh	r3, [r1, #12]
 8007c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c78:	079d      	lsls	r5, r3, #30
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	d507      	bpl.n	8007c90 <__smakebuf_r+0x1c>
 8007c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	6123      	str	r3, [r4, #16]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	6163      	str	r3, [r4, #20]
 8007c8c:	b002      	add	sp, #8
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	ab01      	add	r3, sp, #4
 8007c92:	466a      	mov	r2, sp
 8007c94:	f7ff ffca 	bl	8007c2c <__swhatbuf_r>
 8007c98:	9900      	ldr	r1, [sp, #0]
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 f877 	bl	8007d90 <_malloc_r>
 8007ca2:	b948      	cbnz	r0, 8007cb8 <__smakebuf_r+0x44>
 8007ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca8:	059a      	lsls	r2, r3, #22
 8007caa:	d4ef      	bmi.n	8007c8c <__smakebuf_r+0x18>
 8007cac:	f023 0303 	bic.w	r3, r3, #3
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	e7e3      	b.n	8007c80 <__smakebuf_r+0xc>
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <__smakebuf_r+0x7c>)
 8007cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	6020      	str	r0, [r4, #0]
 8007cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	9b00      	ldr	r3, [sp, #0]
 8007cc8:	6163      	str	r3, [r4, #20]
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	6120      	str	r0, [r4, #16]
 8007cce:	b15b      	cbz	r3, 8007ce8 <__smakebuf_r+0x74>
 8007cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f000 fc05 	bl	80084e4 <_isatty_r>
 8007cda:	b128      	cbz	r0, 8007ce8 <__smakebuf_r+0x74>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	431d      	orrs	r5, r3
 8007cec:	81a5      	strh	r5, [r4, #12]
 8007cee:	e7cd      	b.n	8007c8c <__smakebuf_r+0x18>
 8007cf0:	08007ae1 	.word	0x08007ae1

08007cf4 <_free_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	d045      	beq.n	8007d88 <_free_r+0x94>
 8007cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d00:	1f0c      	subs	r4, r1, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfb8      	it	lt
 8007d06:	18e4      	addlt	r4, r4, r3
 8007d08:	f000 fc0e 	bl	8008528 <__malloc_lock>
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	; (8007d8c <_free_r+0x98>)
 8007d0e:	6813      	ldr	r3, [r2, #0]
 8007d10:	4610      	mov	r0, r2
 8007d12:	b933      	cbnz	r3, 8007d22 <_free_r+0x2e>
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6014      	str	r4, [r2, #0]
 8007d18:	4628      	mov	r0, r5
 8007d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1e:	f000 bc04 	b.w	800852a <__malloc_unlock>
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	d90c      	bls.n	8007d40 <_free_r+0x4c>
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	1862      	adds	r2, r4, r1
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bf04      	itt	eq
 8007d2e:	681a      	ldreq	r2, [r3, #0]
 8007d30:	685b      	ldreq	r3, [r3, #4]
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	bf04      	itt	eq
 8007d36:	1852      	addeq	r2, r2, r1
 8007d38:	6022      	streq	r2, [r4, #0]
 8007d3a:	6004      	str	r4, [r0, #0]
 8007d3c:	e7ec      	b.n	8007d18 <_free_r+0x24>
 8007d3e:	4613      	mov	r3, r2
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	b10a      	cbz	r2, 8007d48 <_free_r+0x54>
 8007d44:	42a2      	cmp	r2, r4
 8007d46:	d9fa      	bls.n	8007d3e <_free_r+0x4a>
 8007d48:	6819      	ldr	r1, [r3, #0]
 8007d4a:	1858      	adds	r0, r3, r1
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d10b      	bne.n	8007d68 <_free_r+0x74>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	4401      	add	r1, r0
 8007d54:	1858      	adds	r0, r3, r1
 8007d56:	4282      	cmp	r2, r0
 8007d58:	6019      	str	r1, [r3, #0]
 8007d5a:	d1dd      	bne.n	8007d18 <_free_r+0x24>
 8007d5c:	6810      	ldr	r0, [r2, #0]
 8007d5e:	6852      	ldr	r2, [r2, #4]
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	4401      	add	r1, r0
 8007d64:	6019      	str	r1, [r3, #0]
 8007d66:	e7d7      	b.n	8007d18 <_free_r+0x24>
 8007d68:	d902      	bls.n	8007d70 <_free_r+0x7c>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	e7d3      	b.n	8007d18 <_free_r+0x24>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	1821      	adds	r1, r4, r0
 8007d74:	428a      	cmp	r2, r1
 8007d76:	bf04      	itt	eq
 8007d78:	6811      	ldreq	r1, [r2, #0]
 8007d7a:	6852      	ldreq	r2, [r2, #4]
 8007d7c:	6062      	str	r2, [r4, #4]
 8007d7e:	bf04      	itt	eq
 8007d80:	1809      	addeq	r1, r1, r0
 8007d82:	6021      	streq	r1, [r4, #0]
 8007d84:	605c      	str	r4, [r3, #4]
 8007d86:	e7c7      	b.n	8007d18 <_free_r+0x24>
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000268 	.word	0x20000268

08007d90 <_malloc_r>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	1ccd      	adds	r5, r1, #3
 8007d94:	f025 0503 	bic.w	r5, r5, #3
 8007d98:	3508      	adds	r5, #8
 8007d9a:	2d0c      	cmp	r5, #12
 8007d9c:	bf38      	it	cc
 8007d9e:	250c      	movcc	r5, #12
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	4606      	mov	r6, r0
 8007da4:	db01      	blt.n	8007daa <_malloc_r+0x1a>
 8007da6:	42a9      	cmp	r1, r5
 8007da8:	d903      	bls.n	8007db2 <_malloc_r+0x22>
 8007daa:	230c      	movs	r3, #12
 8007dac:	6033      	str	r3, [r6, #0]
 8007dae:	2000      	movs	r0, #0
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
 8007db2:	f000 fbb9 	bl	8008528 <__malloc_lock>
 8007db6:	4a21      	ldr	r2, [pc, #132]	; (8007e3c <_malloc_r+0xac>)
 8007db8:	6814      	ldr	r4, [r2, #0]
 8007dba:	4621      	mov	r1, r4
 8007dbc:	b991      	cbnz	r1, 8007de4 <_malloc_r+0x54>
 8007dbe:	4c20      	ldr	r4, [pc, #128]	; (8007e40 <_malloc_r+0xb0>)
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	b91b      	cbnz	r3, 8007dcc <_malloc_r+0x3c>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 fb05 	bl	80083d4 <_sbrk_r>
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 fb00 	bl	80083d4 <_sbrk_r>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d124      	bne.n	8007e22 <_malloc_r+0x92>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 fba4 	bl	800852a <__malloc_unlock>
 8007de2:	e7e4      	b.n	8007dae <_malloc_r+0x1e>
 8007de4:	680b      	ldr	r3, [r1, #0]
 8007de6:	1b5b      	subs	r3, r3, r5
 8007de8:	d418      	bmi.n	8007e1c <_malloc_r+0x8c>
 8007dea:	2b0b      	cmp	r3, #11
 8007dec:	d90f      	bls.n	8007e0e <_malloc_r+0x7e>
 8007dee:	600b      	str	r3, [r1, #0]
 8007df0:	50cd      	str	r5, [r1, r3]
 8007df2:	18cc      	adds	r4, r1, r3
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 fb98 	bl	800852a <__malloc_unlock>
 8007dfa:	f104 000b 	add.w	r0, r4, #11
 8007dfe:	1d23      	adds	r3, r4, #4
 8007e00:	f020 0007 	bic.w	r0, r0, #7
 8007e04:	1ac3      	subs	r3, r0, r3
 8007e06:	d0d3      	beq.n	8007db0 <_malloc_r+0x20>
 8007e08:	425a      	negs	r2, r3
 8007e0a:	50e2      	str	r2, [r4, r3]
 8007e0c:	e7d0      	b.n	8007db0 <_malloc_r+0x20>
 8007e0e:	428c      	cmp	r4, r1
 8007e10:	684b      	ldr	r3, [r1, #4]
 8007e12:	bf16      	itet	ne
 8007e14:	6063      	strne	r3, [r4, #4]
 8007e16:	6013      	streq	r3, [r2, #0]
 8007e18:	460c      	movne	r4, r1
 8007e1a:	e7eb      	b.n	8007df4 <_malloc_r+0x64>
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	6849      	ldr	r1, [r1, #4]
 8007e20:	e7cc      	b.n	8007dbc <_malloc_r+0x2c>
 8007e22:	1cc4      	adds	r4, r0, #3
 8007e24:	f024 0403 	bic.w	r4, r4, #3
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d005      	beq.n	8007e38 <_malloc_r+0xa8>
 8007e2c:	1a21      	subs	r1, r4, r0
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 fad0 	bl	80083d4 <_sbrk_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d0cf      	beq.n	8007dd8 <_malloc_r+0x48>
 8007e38:	6025      	str	r5, [r4, #0]
 8007e3a:	e7db      	b.n	8007df4 <_malloc_r+0x64>
 8007e3c:	20000268 	.word	0x20000268
 8007e40:	2000026c 	.word	0x2000026c

08007e44 <__sfputc_r>:
 8007e44:	6893      	ldr	r3, [r2, #8]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	b410      	push	{r4}
 8007e4c:	6093      	str	r3, [r2, #8]
 8007e4e:	da08      	bge.n	8007e62 <__sfputc_r+0x1e>
 8007e50:	6994      	ldr	r4, [r2, #24]
 8007e52:	42a3      	cmp	r3, r4
 8007e54:	db01      	blt.n	8007e5a <__sfputc_r+0x16>
 8007e56:	290a      	cmp	r1, #10
 8007e58:	d103      	bne.n	8007e62 <__sfputc_r+0x1e>
 8007e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e5e:	f7ff bcab 	b.w	80077b8 <__swbuf_r>
 8007e62:	6813      	ldr	r3, [r2, #0]
 8007e64:	1c58      	adds	r0, r3, #1
 8007e66:	6010      	str	r0, [r2, #0]
 8007e68:	7019      	strb	r1, [r3, #0]
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <__sfputs_r>:
 8007e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e74:	4606      	mov	r6, r0
 8007e76:	460f      	mov	r7, r1
 8007e78:	4614      	mov	r4, r2
 8007e7a:	18d5      	adds	r5, r2, r3
 8007e7c:	42ac      	cmp	r4, r5
 8007e7e:	d101      	bne.n	8007e84 <__sfputs_r+0x12>
 8007e80:	2000      	movs	r0, #0
 8007e82:	e007      	b.n	8007e94 <__sfputs_r+0x22>
 8007e84:	463a      	mov	r2, r7
 8007e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ffda 	bl	8007e44 <__sfputc_r>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d1f3      	bne.n	8007e7c <__sfputs_r+0xa>
 8007e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e98 <_vfiprintf_r>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	b09d      	sub	sp, #116	; 0x74
 8007ea0:	4617      	mov	r7, r2
 8007ea2:	461d      	mov	r5, r3
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	b118      	cbz	r0, 8007eb0 <_vfiprintf_r+0x18>
 8007ea8:	6983      	ldr	r3, [r0, #24]
 8007eaa:	b90b      	cbnz	r3, 8007eb0 <_vfiprintf_r+0x18>
 8007eac:	f7ff fe34 	bl	8007b18 <__sinit>
 8007eb0:	4b7c      	ldr	r3, [pc, #496]	; (80080a4 <_vfiprintf_r+0x20c>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	d158      	bne.n	8007f68 <_vfiprintf_r+0xd0>
 8007eb6:	6874      	ldr	r4, [r6, #4]
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	0718      	lsls	r0, r3, #28
 8007ebc:	d55e      	bpl.n	8007f7c <_vfiprintf_r+0xe4>
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d05b      	beq.n	8007f7c <_vfiprintf_r+0xe4>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec8:	2320      	movs	r3, #32
 8007eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ece:	2330      	movs	r3, #48	; 0x30
 8007ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed4:	9503      	str	r5, [sp, #12]
 8007ed6:	f04f 0b01 	mov.w	fp, #1
 8007eda:	46b8      	mov	r8, r7
 8007edc:	4645      	mov	r5, r8
 8007ede:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_vfiprintf_r+0x50>
 8007ee4:	2b25      	cmp	r3, #37	; 0x25
 8007ee6:	d154      	bne.n	8007f92 <_vfiprintf_r+0xfa>
 8007ee8:	ebb8 0a07 	subs.w	sl, r8, r7
 8007eec:	d00b      	beq.n	8007f06 <_vfiprintf_r+0x6e>
 8007eee:	4653      	mov	r3, sl
 8007ef0:	463a      	mov	r2, r7
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff ffbc 	bl	8007e72 <__sfputs_r>
 8007efa:	3001      	adds	r0, #1
 8007efc:	f000 80c2 	beq.w	8008084 <_vfiprintf_r+0x1ec>
 8007f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f02:	4453      	add	r3, sl
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	f898 3000 	ldrb.w	r3, [r8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 80ba 	beq.w	8008084 <_vfiprintf_r+0x1ec>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
 8007f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	9307      	str	r3, [sp, #28]
 8007f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f22:	931a      	str	r3, [sp, #104]	; 0x68
 8007f24:	46a8      	mov	r8, r5
 8007f26:	2205      	movs	r2, #5
 8007f28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007f2c:	485e      	ldr	r0, [pc, #376]	; (80080a8 <_vfiprintf_r+0x210>)
 8007f2e:	f7f8 faaf 	bl	8000490 <memchr>
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	bb78      	cbnz	r0, 8007f96 <_vfiprintf_r+0xfe>
 8007f36:	06d9      	lsls	r1, r3, #27
 8007f38:	bf44      	itt	mi
 8007f3a:	2220      	movmi	r2, #32
 8007f3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f40:	071a      	lsls	r2, r3, #28
 8007f42:	bf44      	itt	mi
 8007f44:	222b      	movmi	r2, #43	; 0x2b
 8007f46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f4a:	782a      	ldrb	r2, [r5, #0]
 8007f4c:	2a2a      	cmp	r2, #42	; 0x2a
 8007f4e:	d02a      	beq.n	8007fa6 <_vfiprintf_r+0x10e>
 8007f50:	9a07      	ldr	r2, [sp, #28]
 8007f52:	46a8      	mov	r8, r5
 8007f54:	2000      	movs	r0, #0
 8007f56:	250a      	movs	r5, #10
 8007f58:	4641      	mov	r1, r8
 8007f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f5e:	3b30      	subs	r3, #48	; 0x30
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d969      	bls.n	8008038 <_vfiprintf_r+0x1a0>
 8007f64:	b360      	cbz	r0, 8007fc0 <_vfiprintf_r+0x128>
 8007f66:	e024      	b.n	8007fb2 <_vfiprintf_r+0x11a>
 8007f68:	4b50      	ldr	r3, [pc, #320]	; (80080ac <_vfiprintf_r+0x214>)
 8007f6a:	429c      	cmp	r4, r3
 8007f6c:	d101      	bne.n	8007f72 <_vfiprintf_r+0xda>
 8007f6e:	68b4      	ldr	r4, [r6, #8]
 8007f70:	e7a2      	b.n	8007eb8 <_vfiprintf_r+0x20>
 8007f72:	4b4f      	ldr	r3, [pc, #316]	; (80080b0 <_vfiprintf_r+0x218>)
 8007f74:	429c      	cmp	r4, r3
 8007f76:	bf08      	it	eq
 8007f78:	68f4      	ldreq	r4, [r6, #12]
 8007f7a:	e79d      	b.n	8007eb8 <_vfiprintf_r+0x20>
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7ff fc6c 	bl	800785c <__swsetup_r>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d09d      	beq.n	8007ec4 <_vfiprintf_r+0x2c>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	b01d      	add	sp, #116	; 0x74
 8007f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f92:	46a8      	mov	r8, r5
 8007f94:	e7a2      	b.n	8007edc <_vfiprintf_r+0x44>
 8007f96:	4a44      	ldr	r2, [pc, #272]	; (80080a8 <_vfiprintf_r+0x210>)
 8007f98:	1a80      	subs	r0, r0, r2
 8007f9a:	fa0b f000 	lsl.w	r0, fp, r0
 8007f9e:	4318      	orrs	r0, r3
 8007fa0:	9004      	str	r0, [sp, #16]
 8007fa2:	4645      	mov	r5, r8
 8007fa4:	e7be      	b.n	8007f24 <_vfiprintf_r+0x8c>
 8007fa6:	9a03      	ldr	r2, [sp, #12]
 8007fa8:	1d11      	adds	r1, r2, #4
 8007faa:	6812      	ldr	r2, [r2, #0]
 8007fac:	9103      	str	r1, [sp, #12]
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	db01      	blt.n	8007fb6 <_vfiprintf_r+0x11e>
 8007fb2:	9207      	str	r2, [sp, #28]
 8007fb4:	e004      	b.n	8007fc0 <_vfiprintf_r+0x128>
 8007fb6:	4252      	negs	r2, r2
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	f898 3000 	ldrb.w	r3, [r8]
 8007fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8007fc6:	d10e      	bne.n	8007fe6 <_vfiprintf_r+0x14e>
 8007fc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8007fce:	d138      	bne.n	8008042 <_vfiprintf_r+0x1aa>
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	9203      	str	r2, [sp, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfb8      	it	lt
 8007fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fe0:	f108 0802 	add.w	r8, r8, #2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	4d33      	ldr	r5, [pc, #204]	; (80080b4 <_vfiprintf_r+0x21c>)
 8007fe8:	f898 1000 	ldrb.w	r1, [r8]
 8007fec:	2203      	movs	r2, #3
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7f8 fa4e 	bl	8000490 <memchr>
 8007ff4:	b140      	cbz	r0, 8008008 <_vfiprintf_r+0x170>
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	1b40      	subs	r0, r0, r5
 8007ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	4303      	orrs	r3, r0
 8008002:	f108 0801 	add.w	r8, r8, #1
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	f898 1000 	ldrb.w	r1, [r8]
 800800c:	482a      	ldr	r0, [pc, #168]	; (80080b8 <_vfiprintf_r+0x220>)
 800800e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008012:	2206      	movs	r2, #6
 8008014:	f108 0701 	add.w	r7, r8, #1
 8008018:	f7f8 fa3a 	bl	8000490 <memchr>
 800801c:	2800      	cmp	r0, #0
 800801e:	d037      	beq.n	8008090 <_vfiprintf_r+0x1f8>
 8008020:	4b26      	ldr	r3, [pc, #152]	; (80080bc <_vfiprintf_r+0x224>)
 8008022:	bb1b      	cbnz	r3, 800806c <_vfiprintf_r+0x1d4>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	3307      	adds	r3, #7
 8008028:	f023 0307 	bic.w	r3, r3, #7
 800802c:	3308      	adds	r3, #8
 800802e:	9303      	str	r3, [sp, #12]
 8008030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008032:	444b      	add	r3, r9
 8008034:	9309      	str	r3, [sp, #36]	; 0x24
 8008036:	e750      	b.n	8007eda <_vfiprintf_r+0x42>
 8008038:	fb05 3202 	mla	r2, r5, r2, r3
 800803c:	2001      	movs	r0, #1
 800803e:	4688      	mov	r8, r1
 8008040:	e78a      	b.n	8007f58 <_vfiprintf_r+0xc0>
 8008042:	2300      	movs	r3, #0
 8008044:	f108 0801 	add.w	r8, r8, #1
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4619      	mov	r1, r3
 800804c:	250a      	movs	r5, #10
 800804e:	4640      	mov	r0, r8
 8008050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008054:	3a30      	subs	r2, #48	; 0x30
 8008056:	2a09      	cmp	r2, #9
 8008058:	d903      	bls.n	8008062 <_vfiprintf_r+0x1ca>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0c3      	beq.n	8007fe6 <_vfiprintf_r+0x14e>
 800805e:	9105      	str	r1, [sp, #20]
 8008060:	e7c1      	b.n	8007fe6 <_vfiprintf_r+0x14e>
 8008062:	fb05 2101 	mla	r1, r5, r1, r2
 8008066:	2301      	movs	r3, #1
 8008068:	4680      	mov	r8, r0
 800806a:	e7f0      	b.n	800804e <_vfiprintf_r+0x1b6>
 800806c:	ab03      	add	r3, sp, #12
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4622      	mov	r2, r4
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <_vfiprintf_r+0x228>)
 8008074:	a904      	add	r1, sp, #16
 8008076:	4630      	mov	r0, r6
 8008078:	f3af 8000 	nop.w
 800807c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008080:	4681      	mov	r9, r0
 8008082:	d1d5      	bne.n	8008030 <_vfiprintf_r+0x198>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	065b      	lsls	r3, r3, #25
 8008088:	f53f af7e 	bmi.w	8007f88 <_vfiprintf_r+0xf0>
 800808c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808e:	e77d      	b.n	8007f8c <_vfiprintf_r+0xf4>
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4622      	mov	r2, r4
 8008096:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <_vfiprintf_r+0x228>)
 8008098:	a904      	add	r1, sp, #16
 800809a:	4630      	mov	r0, r6
 800809c:	f000 f888 	bl	80081b0 <_printf_i>
 80080a0:	e7ec      	b.n	800807c <_vfiprintf_r+0x1e4>
 80080a2:	bf00      	nop
 80080a4:	08008858 	.word	0x08008858
 80080a8:	08008898 	.word	0x08008898
 80080ac:	08008878 	.word	0x08008878
 80080b0:	08008838 	.word	0x08008838
 80080b4:	0800889e 	.word	0x0800889e
 80080b8:	080088a2 	.word	0x080088a2
 80080bc:	00000000 	.word	0x00000000
 80080c0:	08007e73 	.word	0x08007e73

080080c4 <_printf_common>:
 80080c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	4691      	mov	r9, r2
 80080ca:	461f      	mov	r7, r3
 80080cc:	688a      	ldr	r2, [r1, #8]
 80080ce:	690b      	ldr	r3, [r1, #16]
 80080d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bfb8      	it	lt
 80080d8:	4613      	movlt	r3, r2
 80080da:	f8c9 3000 	str.w	r3, [r9]
 80080de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080e2:	4606      	mov	r6, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	b112      	cbz	r2, 80080ee <_printf_common+0x2a>
 80080e8:	3301      	adds	r3, #1
 80080ea:	f8c9 3000 	str.w	r3, [r9]
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	0699      	lsls	r1, r3, #26
 80080f2:	bf42      	ittt	mi
 80080f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080f8:	3302      	addmi	r3, #2
 80080fa:	f8c9 3000 	strmi.w	r3, [r9]
 80080fe:	6825      	ldr	r5, [r4, #0]
 8008100:	f015 0506 	ands.w	r5, r5, #6
 8008104:	d107      	bne.n	8008116 <_printf_common+0x52>
 8008106:	f104 0a19 	add.w	sl, r4, #25
 800810a:	68e3      	ldr	r3, [r4, #12]
 800810c:	f8d9 2000 	ldr.w	r2, [r9]
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	42ab      	cmp	r3, r5
 8008114:	dc28      	bgt.n	8008168 <_printf_common+0xa4>
 8008116:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	3300      	adds	r3, #0
 800811e:	bf18      	it	ne
 8008120:	2301      	movne	r3, #1
 8008122:	0692      	lsls	r2, r2, #26
 8008124:	d42d      	bmi.n	8008182 <_printf_common+0xbe>
 8008126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800812a:	4639      	mov	r1, r7
 800812c:	4630      	mov	r0, r6
 800812e:	47c0      	blx	r8
 8008130:	3001      	adds	r0, #1
 8008132:	d020      	beq.n	8008176 <_printf_common+0xb2>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	68e5      	ldr	r5, [r4, #12]
 8008138:	f8d9 2000 	ldr.w	r2, [r9]
 800813c:	f003 0306 	and.w	r3, r3, #6
 8008140:	2b04      	cmp	r3, #4
 8008142:	bf08      	it	eq
 8008144:	1aad      	subeq	r5, r5, r2
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	6922      	ldr	r2, [r4, #16]
 800814a:	bf0c      	ite	eq
 800814c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008150:	2500      	movne	r5, #0
 8008152:	4293      	cmp	r3, r2
 8008154:	bfc4      	itt	gt
 8008156:	1a9b      	subgt	r3, r3, r2
 8008158:	18ed      	addgt	r5, r5, r3
 800815a:	f04f 0900 	mov.w	r9, #0
 800815e:	341a      	adds	r4, #26
 8008160:	454d      	cmp	r5, r9
 8008162:	d11a      	bne.n	800819a <_printf_common+0xd6>
 8008164:	2000      	movs	r0, #0
 8008166:	e008      	b.n	800817a <_printf_common+0xb6>
 8008168:	2301      	movs	r3, #1
 800816a:	4652      	mov	r2, sl
 800816c:	4639      	mov	r1, r7
 800816e:	4630      	mov	r0, r6
 8008170:	47c0      	blx	r8
 8008172:	3001      	adds	r0, #1
 8008174:	d103      	bne.n	800817e <_printf_common+0xba>
 8008176:	f04f 30ff 	mov.w	r0, #4294967295
 800817a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817e:	3501      	adds	r5, #1
 8008180:	e7c3      	b.n	800810a <_printf_common+0x46>
 8008182:	18e1      	adds	r1, r4, r3
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	2030      	movs	r0, #48	; 0x30
 8008188:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800818c:	4422      	add	r2, r4
 800818e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008192:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008196:	3302      	adds	r3, #2
 8008198:	e7c5      	b.n	8008126 <_printf_common+0x62>
 800819a:	2301      	movs	r3, #1
 800819c:	4622      	mov	r2, r4
 800819e:	4639      	mov	r1, r7
 80081a0:	4630      	mov	r0, r6
 80081a2:	47c0      	blx	r8
 80081a4:	3001      	adds	r0, #1
 80081a6:	d0e6      	beq.n	8008176 <_printf_common+0xb2>
 80081a8:	f109 0901 	add.w	r9, r9, #1
 80081ac:	e7d8      	b.n	8008160 <_printf_common+0x9c>
	...

080081b0 <_printf_i>:
 80081b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081b8:	460c      	mov	r4, r1
 80081ba:	7e09      	ldrb	r1, [r1, #24]
 80081bc:	b085      	sub	sp, #20
 80081be:	296e      	cmp	r1, #110	; 0x6e
 80081c0:	4617      	mov	r7, r2
 80081c2:	4606      	mov	r6, r0
 80081c4:	4698      	mov	r8, r3
 80081c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c8:	f000 80b3 	beq.w	8008332 <_printf_i+0x182>
 80081cc:	d822      	bhi.n	8008214 <_printf_i+0x64>
 80081ce:	2963      	cmp	r1, #99	; 0x63
 80081d0:	d036      	beq.n	8008240 <_printf_i+0x90>
 80081d2:	d80a      	bhi.n	80081ea <_printf_i+0x3a>
 80081d4:	2900      	cmp	r1, #0
 80081d6:	f000 80b9 	beq.w	800834c <_printf_i+0x19c>
 80081da:	2958      	cmp	r1, #88	; 0x58
 80081dc:	f000 8083 	beq.w	80082e6 <_printf_i+0x136>
 80081e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081e8:	e032      	b.n	8008250 <_printf_i+0xa0>
 80081ea:	2964      	cmp	r1, #100	; 0x64
 80081ec:	d001      	beq.n	80081f2 <_printf_i+0x42>
 80081ee:	2969      	cmp	r1, #105	; 0x69
 80081f0:	d1f6      	bne.n	80081e0 <_printf_i+0x30>
 80081f2:	6820      	ldr	r0, [r4, #0]
 80081f4:	6813      	ldr	r3, [r2, #0]
 80081f6:	0605      	lsls	r5, r0, #24
 80081f8:	f103 0104 	add.w	r1, r3, #4
 80081fc:	d52a      	bpl.n	8008254 <_printf_i+0xa4>
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	da03      	bge.n	800820e <_printf_i+0x5e>
 8008206:	222d      	movs	r2, #45	; 0x2d
 8008208:	425b      	negs	r3, r3
 800820a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800820e:	486f      	ldr	r0, [pc, #444]	; (80083cc <_printf_i+0x21c>)
 8008210:	220a      	movs	r2, #10
 8008212:	e039      	b.n	8008288 <_printf_i+0xd8>
 8008214:	2973      	cmp	r1, #115	; 0x73
 8008216:	f000 809d 	beq.w	8008354 <_printf_i+0x1a4>
 800821a:	d808      	bhi.n	800822e <_printf_i+0x7e>
 800821c:	296f      	cmp	r1, #111	; 0x6f
 800821e:	d020      	beq.n	8008262 <_printf_i+0xb2>
 8008220:	2970      	cmp	r1, #112	; 0x70
 8008222:	d1dd      	bne.n	80081e0 <_printf_i+0x30>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	f043 0320 	orr.w	r3, r3, #32
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	e003      	b.n	8008236 <_printf_i+0x86>
 800822e:	2975      	cmp	r1, #117	; 0x75
 8008230:	d017      	beq.n	8008262 <_printf_i+0xb2>
 8008232:	2978      	cmp	r1, #120	; 0x78
 8008234:	d1d4      	bne.n	80081e0 <_printf_i+0x30>
 8008236:	2378      	movs	r3, #120	; 0x78
 8008238:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800823c:	4864      	ldr	r0, [pc, #400]	; (80083d0 <_printf_i+0x220>)
 800823e:	e055      	b.n	80082ec <_printf_i+0x13c>
 8008240:	6813      	ldr	r3, [r2, #0]
 8008242:	1d19      	adds	r1, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6011      	str	r1, [r2, #0]
 8008248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800824c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008250:	2301      	movs	r3, #1
 8008252:	e08c      	b.n	800836e <_printf_i+0x1be>
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6011      	str	r1, [r2, #0]
 8008258:	f010 0f40 	tst.w	r0, #64	; 0x40
 800825c:	bf18      	it	ne
 800825e:	b21b      	sxthne	r3, r3
 8008260:	e7cf      	b.n	8008202 <_printf_i+0x52>
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	6825      	ldr	r5, [r4, #0]
 8008266:	1d18      	adds	r0, r3, #4
 8008268:	6010      	str	r0, [r2, #0]
 800826a:	0628      	lsls	r0, r5, #24
 800826c:	d501      	bpl.n	8008272 <_printf_i+0xc2>
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	e002      	b.n	8008278 <_printf_i+0xc8>
 8008272:	0668      	lsls	r0, r5, #25
 8008274:	d5fb      	bpl.n	800826e <_printf_i+0xbe>
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	4854      	ldr	r0, [pc, #336]	; (80083cc <_printf_i+0x21c>)
 800827a:	296f      	cmp	r1, #111	; 0x6f
 800827c:	bf14      	ite	ne
 800827e:	220a      	movne	r2, #10
 8008280:	2208      	moveq	r2, #8
 8008282:	2100      	movs	r1, #0
 8008284:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008288:	6865      	ldr	r5, [r4, #4]
 800828a:	60a5      	str	r5, [r4, #8]
 800828c:	2d00      	cmp	r5, #0
 800828e:	f2c0 8095 	blt.w	80083bc <_printf_i+0x20c>
 8008292:	6821      	ldr	r1, [r4, #0]
 8008294:	f021 0104 	bic.w	r1, r1, #4
 8008298:	6021      	str	r1, [r4, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d13d      	bne.n	800831a <_printf_i+0x16a>
 800829e:	2d00      	cmp	r5, #0
 80082a0:	f040 808e 	bne.w	80083c0 <_printf_i+0x210>
 80082a4:	4665      	mov	r5, ip
 80082a6:	2a08      	cmp	r2, #8
 80082a8:	d10b      	bne.n	80082c2 <_printf_i+0x112>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	07db      	lsls	r3, r3, #31
 80082ae:	d508      	bpl.n	80082c2 <_printf_i+0x112>
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	bfde      	ittt	le
 80082b8:	2330      	movle	r3, #48	; 0x30
 80082ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082c2:	ebac 0305 	sub.w	r3, ip, r5
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	f8cd 8000 	str.w	r8, [sp]
 80082cc:	463b      	mov	r3, r7
 80082ce:	aa03      	add	r2, sp, #12
 80082d0:	4621      	mov	r1, r4
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff fef6 	bl	80080c4 <_printf_common>
 80082d8:	3001      	adds	r0, #1
 80082da:	d14d      	bne.n	8008378 <_printf_i+0x1c8>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	b005      	add	sp, #20
 80082e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e6:	4839      	ldr	r0, [pc, #228]	; (80083cc <_printf_i+0x21c>)
 80082e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082ec:	6813      	ldr	r3, [r2, #0]
 80082ee:	6821      	ldr	r1, [r4, #0]
 80082f0:	1d1d      	adds	r5, r3, #4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6015      	str	r5, [r2, #0]
 80082f6:	060a      	lsls	r2, r1, #24
 80082f8:	d50b      	bpl.n	8008312 <_printf_i+0x162>
 80082fa:	07ca      	lsls	r2, r1, #31
 80082fc:	bf44      	itt	mi
 80082fe:	f041 0120 	orrmi.w	r1, r1, #32
 8008302:	6021      	strmi	r1, [r4, #0]
 8008304:	b91b      	cbnz	r3, 800830e <_printf_i+0x15e>
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	f022 0220 	bic.w	r2, r2, #32
 800830c:	6022      	str	r2, [r4, #0]
 800830e:	2210      	movs	r2, #16
 8008310:	e7b7      	b.n	8008282 <_printf_i+0xd2>
 8008312:	064d      	lsls	r5, r1, #25
 8008314:	bf48      	it	mi
 8008316:	b29b      	uxthmi	r3, r3
 8008318:	e7ef      	b.n	80082fa <_printf_i+0x14a>
 800831a:	4665      	mov	r5, ip
 800831c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008320:	fb02 3311 	mls	r3, r2, r1, r3
 8008324:	5cc3      	ldrb	r3, [r0, r3]
 8008326:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800832a:	460b      	mov	r3, r1
 800832c:	2900      	cmp	r1, #0
 800832e:	d1f5      	bne.n	800831c <_printf_i+0x16c>
 8008330:	e7b9      	b.n	80082a6 <_printf_i+0xf6>
 8008332:	6813      	ldr	r3, [r2, #0]
 8008334:	6825      	ldr	r5, [r4, #0]
 8008336:	6961      	ldr	r1, [r4, #20]
 8008338:	1d18      	adds	r0, r3, #4
 800833a:	6010      	str	r0, [r2, #0]
 800833c:	0628      	lsls	r0, r5, #24
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	d501      	bpl.n	8008346 <_printf_i+0x196>
 8008342:	6019      	str	r1, [r3, #0]
 8008344:	e002      	b.n	800834c <_printf_i+0x19c>
 8008346:	066a      	lsls	r2, r5, #25
 8008348:	d5fb      	bpl.n	8008342 <_printf_i+0x192>
 800834a:	8019      	strh	r1, [r3, #0]
 800834c:	2300      	movs	r3, #0
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	4665      	mov	r5, ip
 8008352:	e7b9      	b.n	80082c8 <_printf_i+0x118>
 8008354:	6813      	ldr	r3, [r2, #0]
 8008356:	1d19      	adds	r1, r3, #4
 8008358:	6011      	str	r1, [r2, #0]
 800835a:	681d      	ldr	r5, [r3, #0]
 800835c:	6862      	ldr	r2, [r4, #4]
 800835e:	2100      	movs	r1, #0
 8008360:	4628      	mov	r0, r5
 8008362:	f7f8 f895 	bl	8000490 <memchr>
 8008366:	b108      	cbz	r0, 800836c <_printf_i+0x1bc>
 8008368:	1b40      	subs	r0, r0, r5
 800836a:	6060      	str	r0, [r4, #4]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	2300      	movs	r3, #0
 8008372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008376:	e7a7      	b.n	80082c8 <_printf_i+0x118>
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	462a      	mov	r2, r5
 800837c:	4639      	mov	r1, r7
 800837e:	4630      	mov	r0, r6
 8008380:	47c0      	blx	r8
 8008382:	3001      	adds	r0, #1
 8008384:	d0aa      	beq.n	80082dc <_printf_i+0x12c>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	079b      	lsls	r3, r3, #30
 800838a:	d413      	bmi.n	80083b4 <_printf_i+0x204>
 800838c:	68e0      	ldr	r0, [r4, #12]
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	4298      	cmp	r0, r3
 8008392:	bfb8      	it	lt
 8008394:	4618      	movlt	r0, r3
 8008396:	e7a3      	b.n	80082e0 <_printf_i+0x130>
 8008398:	2301      	movs	r3, #1
 800839a:	464a      	mov	r2, r9
 800839c:	4639      	mov	r1, r7
 800839e:	4630      	mov	r0, r6
 80083a0:	47c0      	blx	r8
 80083a2:	3001      	adds	r0, #1
 80083a4:	d09a      	beq.n	80082dc <_printf_i+0x12c>
 80083a6:	3501      	adds	r5, #1
 80083a8:	68e3      	ldr	r3, [r4, #12]
 80083aa:	9a03      	ldr	r2, [sp, #12]
 80083ac:	1a9b      	subs	r3, r3, r2
 80083ae:	42ab      	cmp	r3, r5
 80083b0:	dcf2      	bgt.n	8008398 <_printf_i+0x1e8>
 80083b2:	e7eb      	b.n	800838c <_printf_i+0x1dc>
 80083b4:	2500      	movs	r5, #0
 80083b6:	f104 0919 	add.w	r9, r4, #25
 80083ba:	e7f5      	b.n	80083a8 <_printf_i+0x1f8>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ac      	bne.n	800831a <_printf_i+0x16a>
 80083c0:	7803      	ldrb	r3, [r0, #0]
 80083c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083ca:	e76c      	b.n	80082a6 <_printf_i+0xf6>
 80083cc:	080088a9 	.word	0x080088a9
 80083d0:	080088ba 	.word	0x080088ba

080083d4 <_sbrk_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4c06      	ldr	r4, [pc, #24]	; (80083f0 <_sbrk_r+0x1c>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4605      	mov	r5, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	f000 f8de 	bl	80085a0 <_sbrk>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_sbrk_r+0x1a>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_sbrk_r+0x1a>
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20000afc 	.word	0x20000afc

080083f4 <__sread>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fc:	f000 f896 	bl	800852c <_read_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	bfab      	itete	ge
 8008404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008406:	89a3      	ldrhlt	r3, [r4, #12]
 8008408:	181b      	addge	r3, r3, r0
 800840a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800840e:	bfac      	ite	ge
 8008410:	6563      	strge	r3, [r4, #84]	; 0x54
 8008412:	81a3      	strhlt	r3, [r4, #12]
 8008414:	bd10      	pop	{r4, pc}

08008416 <__swrite>:
 8008416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841a:	461f      	mov	r7, r3
 800841c:	898b      	ldrh	r3, [r1, #12]
 800841e:	05db      	lsls	r3, r3, #23
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4616      	mov	r6, r2
 8008426:	d505      	bpl.n	8008434 <__swrite+0x1e>
 8008428:	2302      	movs	r3, #2
 800842a:	2200      	movs	r2, #0
 800842c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008430:	f000 f868 	bl	8008504 <_lseek_r>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800843a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	4632      	mov	r2, r6
 8008442:	463b      	mov	r3, r7
 8008444:	4628      	mov	r0, r5
 8008446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	f000 b817 	b.w	800847c <_write_r>

0800844e <__sseek>:
 800844e:	b510      	push	{r4, lr}
 8008450:	460c      	mov	r4, r1
 8008452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008456:	f000 f855 	bl	8008504 <_lseek_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	bf15      	itete	ne
 8008460:	6560      	strne	r0, [r4, #84]	; 0x54
 8008462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800846a:	81a3      	strheq	r3, [r4, #12]
 800846c:	bf18      	it	ne
 800846e:	81a3      	strhne	r3, [r4, #12]
 8008470:	bd10      	pop	{r4, pc}

08008472 <__sclose>:
 8008472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008476:	f000 b813 	b.w	80084a0 <_close_r>
	...

0800847c <_write_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4c07      	ldr	r4, [pc, #28]	; (800849c <_write_r+0x20>)
 8008480:	4605      	mov	r5, r0
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
 8008486:	2200      	movs	r2, #0
 8008488:	6022      	str	r2, [r4, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	f7f8 fa42 	bl	8000914 <_write>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_write_r+0x1e>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	b103      	cbz	r3, 800849a <_write_r+0x1e>
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000afc 	.word	0x20000afc

080084a0 <_close_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4c06      	ldr	r4, [pc, #24]	; (80084bc <_close_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4605      	mov	r5, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	f000 f850 	bl	8008550 <_close>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_close_r+0x1a>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_close_r+0x1a>
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000afc 	.word	0x20000afc

080084c0 <_fstat_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4c07      	ldr	r4, [pc, #28]	; (80084e0 <_fstat_r+0x20>)
 80084c4:	2300      	movs	r3, #0
 80084c6:	4605      	mov	r5, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	4611      	mov	r1, r2
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	f000 f847 	bl	8008560 <_fstat>
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	d102      	bne.n	80084dc <_fstat_r+0x1c>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	b103      	cbz	r3, 80084dc <_fstat_r+0x1c>
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	20000afc 	.word	0x20000afc

080084e4 <_isatty_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4c06      	ldr	r4, [pc, #24]	; (8008500 <_isatty_r+0x1c>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4605      	mov	r5, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	f000 f83e 	bl	8008570 <_isatty>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_isatty_r+0x1a>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_isatty_r+0x1a>
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	20000afc 	.word	0x20000afc

08008504 <_lseek_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4c07      	ldr	r4, [pc, #28]	; (8008524 <_lseek_r+0x20>)
 8008508:	4605      	mov	r5, r0
 800850a:	4608      	mov	r0, r1
 800850c:	4611      	mov	r1, r2
 800850e:	2200      	movs	r2, #0
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f000 f834 	bl	8008580 <_lseek>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_lseek_r+0x1e>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	b103      	cbz	r3, 8008522 <_lseek_r+0x1e>
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20000afc 	.word	0x20000afc

08008528 <__malloc_lock>:
 8008528:	4770      	bx	lr

0800852a <__malloc_unlock>:
 800852a:	4770      	bx	lr

0800852c <_read_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4c07      	ldr	r4, [pc, #28]	; (800854c <_read_r+0x20>)
 8008530:	4605      	mov	r5, r0
 8008532:	4608      	mov	r0, r1
 8008534:	4611      	mov	r1, r2
 8008536:	2200      	movs	r2, #0
 8008538:	6022      	str	r2, [r4, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f000 f828 	bl	8008590 <_read>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_read_r+0x1e>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	b103      	cbz	r3, 800854a <_read_r+0x1e>
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	20000afc 	.word	0x20000afc

08008550 <_close>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <_close+0xc>)
 8008552:	2258      	movs	r2, #88	; 0x58
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	4770      	bx	lr
 800855c:	20000afc 	.word	0x20000afc

08008560 <_fstat>:
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <_fstat+0xc>)
 8008562:	2258      	movs	r2, #88	; 0x58
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
 800856a:	4770      	bx	lr
 800856c:	20000afc 	.word	0x20000afc

08008570 <_isatty>:
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <_isatty+0xc>)
 8008572:	2258      	movs	r2, #88	; 0x58
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	2000      	movs	r0, #0
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000afc 	.word	0x20000afc

08008580 <_lseek>:
 8008580:	4b02      	ldr	r3, [pc, #8]	; (800858c <_lseek+0xc>)
 8008582:	2258      	movs	r2, #88	; 0x58
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	4770      	bx	lr
 800858c:	20000afc 	.word	0x20000afc

08008590 <_read>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <_read+0xc>)
 8008592:	2258      	movs	r2, #88	; 0x58
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	4770      	bx	lr
 800859c:	20000afc 	.word	0x20000afc

080085a0 <_sbrk>:
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <_sbrk+0x14>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	4602      	mov	r2, r0
 80085a6:	b909      	cbnz	r1, 80085ac <_sbrk+0xc>
 80085a8:	4903      	ldr	r1, [pc, #12]	; (80085b8 <_sbrk+0x18>)
 80085aa:	6019      	str	r1, [r3, #0]
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	4402      	add	r2, r0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	4770      	bx	lr
 80085b4:	20000270 	.word	0x20000270
 80085b8:	20000b00 	.word	0x20000b00

080085bc <_init>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr

080085c8 <_fini>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr
