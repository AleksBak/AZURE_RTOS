
sample_usbx_device_cdc_acm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000710c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007414  08007414  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08007414  08007414  00017414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800741c  0800741c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  20000180  20000180  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  20000d9c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00106a63  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00013b60  00000000  00000000  00126c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d68  00000000  00000000  0013a770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000025f0  00000000  00000000  0013c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00043cf3  00000000  00000000  0013eac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00042a0e  00000000  00000000  001827bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013d9b3  00000000  00000000  001c51c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00302b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004234  00000000  00000000  00302bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000157b1  00000000  00000000  00306e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000180 	.word	0x20000180
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072c4 	.word	0x080072c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000184 	.word	0x20000184
 800020c:	080072c4 	.word	0x080072c4

08000210 <OTG_HS_IRQHandler>:
.thumb_func
OTG_HS_IRQHandler:
@ VOID UsbInterruptHandler (VOID)
@ {
@
        PUSH    {lr}
 8000210:	b500      	push	{lr}
        BL      _ux_dcd_stm32_interrupt_handler
 8000212:	f002 fd9f 	bl	8002d54 <_ux_dcd_stm32_interrupt_handler>
        POP     {lr}
 8000216:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OTG_FS_IRQHandler>:
.thumb_func
OTG_FS_IRQHandler:
@ VOID UsbInterruptHandler (VOID)
@ {
@
        PUSH    {lr}
 800021c:	b500      	push	{lr}
        BL      _ux_dcd_stm32_interrupt_handler
 800021e:	f002 fd99 	bl	8002d54 <_ux_dcd_stm32_interrupt_handler>
        POP     {lr}
 8000222:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 8000226:	4770      	bx	lr
	...

08000230 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000230:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000232:	481d      	ldr	r0, [pc, #116]	; (80002a8 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000236:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800023a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000240:	491b      	ldr	r1, [pc, #108]	; (80002b0 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000242:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000246:	481b      	ldr	r0, [pc, #108]	; (80002b4 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000248:	4919      	ldr	r1, [pc, #100]	; (80002b0 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800024a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800024c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800024e:	481a      	ldr	r0, [pc, #104]	; (80002b8 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000250:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000252:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000256:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000258:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800025c:	4917      	ldr	r1, [pc, #92]	; (80002bc <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800025e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000260:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000264:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000266:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800026a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800026e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000272:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000278:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800027c:	4770      	bx	lr

0800027e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800027e:	f7ff bffe 	b.w	800027e <__tx_BadHandler>

08000282 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000282:	f7ff bffe 	b.w	8000282 <__tx_HardfaultHandler>

08000286 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000286:	f7ff bffe 	b.w	8000286 <__tx_SVCallHandler>

0800028a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800028a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800028c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000290:	4770      	bx	lr

08000292 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000292:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000294:	f000 f894 	bl	80003c0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000298:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800029c:	4770      	bx	lr

0800029e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800029e:	f7ff bffe 	b.w	800029e <__tx_NMIHandler>

080002a2 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002a2:	f7ff bffe 	b.w	80002a2 <__tx_DBGHandler>
 80002a6:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80002a8:	20000d80 	.word	0x20000d80
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 80002ac:	200013a0 	.word	0x200013a0
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 80002b0:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002b4:	200007d0 	.word	0x200007d0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002b8:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002bc:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002c0:	40ff0000 	.word	0x40ff0000
	...

080002d0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002d0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002d4:	4a22      	ldr	r2, [pc, #136]	; (8000360 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002d6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002d8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002e2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002e6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002ea:	f3bf 8f6f 	isb	sy

080002ee <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002ee:	e7fe      	b.n	80002ee <__tx_wait_here>

080002f0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002f0:	481c      	ldr	r0, [pc, #112]	; (8000364 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002f4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002f8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002fa:	b169      	cbz	r1, 8000318 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002fc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002fe:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 8000302:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000306:	4c19      	ldr	r4, [pc, #100]	; (800036c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 8000308:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 800030c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 800030e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 8000312:	b10d      	cbz	r5, 8000318 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 8000314:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 8000316:	6023      	str	r3, [r4, #0]

08000318 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 8000318:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 800031a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 800031c:	b189      	cbz	r1, 8000342 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 800031e:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000320:	b662      	cpsie	i

08000322 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000322:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000324:	4c11      	ldr	r4, [pc, #68]	; (800036c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000326:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000328:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800032c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800032e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000330:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000334:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000338:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800033c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000340:	4770      	bx	lr

08000342 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000342:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000344:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000346:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000348:	b909      	cbnz	r1, 800034e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800034a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800034c:	e7f9      	b.n	8000342 <__tx_ts_wait>

0800034e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800034e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000352:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000356:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800035a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800035c:	e7e1      	b.n	8000322 <__tx_ts_restore>
 800035e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000360:	200007d4 	.word	0x200007d4
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000364:	200007d8 	.word	0x200007d8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000368:	200007dc 	.word	0x200007dc
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800036c:	20000870 	.word	0x20000870

08000370 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000370:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000372:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000376:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800037a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800037e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000380:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000384:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000386:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000388:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800038a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800038c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800038e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000390:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000392:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000394:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000398:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800039a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800039c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800039e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 80003a2:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 80003a4:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 80003a8:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 80003aa:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 80003ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 80003b0:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 80003b2:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
	...

080003c0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003c0:	4926      	ldr	r1, [pc, #152]	; (800045c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80003c2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 80003c4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80003c8:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80003cc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80003ce:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80003d0:	d008      	beq.n	80003e4 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 80003d2:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80003d6:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80003d8:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80003da:	d103      	bne.n	80003e4 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 80003de:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80003e2:	6018      	str	r0, [r3, #0]

080003e4 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003e4:	4920      	ldr	r1, [pc, #128]	; (8000468 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80003e6:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80003e8:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80003ea:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80003ec:	d004      	beq.n	80003f8 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 80003f0:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80003f4:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80003f6:	e008      	b.n	800040a <__tx_timer_done>

080003f8 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 80003f8:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80003fc:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80003fe:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 8000400:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 8000402:	d101      	bne.n	8000408 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 8000406:	6818      	ldr	r0, [r3, #0]

08000408 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 8000408:	6008      	str	r0, [r1, #0]

0800040a <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 800040c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 800040e:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 8000410:	d103      	bne.n	800041a <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 8000412:	4916      	ldr	r1, [pc, #88]	; (800046c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000414:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 8000416:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 8000418:	d01c      	beq.n	8000454 <__tx_timer_nothing_expired>

0800041a <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 800041a:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 800041e:	4913      	ldr	r1, [pc, #76]	; (800046c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000420:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000422:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000424:	d001      	beq.n	800042a <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 8000426:	f006 fddb 	bl	8006fe0 <_tx_timer_expiration_process>

0800042a <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 800042c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 800042e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000430:	d00e      	beq.n	8000450 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000432:	f006 fd9b 	bl	8006f6c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000436:	4810      	ldr	r0, [pc, #64]	; (8000478 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 8000438:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 800043a:	b949      	cbnz	r1, 8000450 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800043c:	480f      	ldr	r0, [pc, #60]	; (800047c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 800043e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000440:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000442:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 8000446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 800044a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 800044c:	d000      	beq.n	8000450 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 800044e:	6002      	str	r2, [r0, #0]

08000450 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 8000450:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000454 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000454:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 8000458:	4770      	bx	lr
 800045a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 800045c:	20000d64 	.word	0x20000d64
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 8000460:	20000870 	.word	0x20000870
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000464:	20000d60 	.word	0x20000d60
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000468:	200007e8 	.word	0x200007e8
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800046c:	2000086c 	.word	0x2000086c
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000470:	20000878 	.word	0x20000878
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000474:	2000094c 	.word	0x2000094c
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000478:	200007d4 	.word	0x200007d4
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800047c:	200007d8 	.word	0x200007d8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000480:	200007dc 	.word	0x200007dc
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000484:	e000ed04 	.word	0xe000ed04

08000488 <__aeabi_uldivmod>:
 8000488:	b953      	cbnz	r3, 80004a0 <__aeabi_uldivmod+0x18>
 800048a:	b94a      	cbnz	r2, 80004a0 <__aeabi_uldivmod+0x18>
 800048c:	2900      	cmp	r1, #0
 800048e:	bf08      	it	eq
 8000490:	2800      	cmpeq	r0, #0
 8000492:	bf1c      	itt	ne
 8000494:	f04f 31ff 	movne.w	r1, #4294967295
 8000498:	f04f 30ff 	movne.w	r0, #4294967295
 800049c:	f000 b972 	b.w	8000784 <__aeabi_idiv0>
 80004a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a8:	f000 f806 	bl	80004b8 <__udivmoddi4>
 80004ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004b4:	b004      	add	sp, #16
 80004b6:	4770      	bx	lr

080004b8 <__udivmoddi4>:
 80004b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004bc:	9e08      	ldr	r6, [sp, #32]
 80004be:	4604      	mov	r4, r0
 80004c0:	4688      	mov	r8, r1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d14b      	bne.n	800055e <__udivmoddi4+0xa6>
 80004c6:	428a      	cmp	r2, r1
 80004c8:	4615      	mov	r5, r2
 80004ca:	d967      	bls.n	800059c <__udivmoddi4+0xe4>
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	b14a      	cbz	r2, 80004e6 <__udivmoddi4+0x2e>
 80004d2:	f1c2 0720 	rsb	r7, r2, #32
 80004d6:	fa01 f302 	lsl.w	r3, r1, r2
 80004da:	fa20 f707 	lsr.w	r7, r0, r7
 80004de:	4095      	lsls	r5, r2
 80004e0:	ea47 0803 	orr.w	r8, r7, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ea:	0c23      	lsrs	r3, r4, #16
 80004ec:	fbb8 f7fe 	udiv	r7, r8, lr
 80004f0:	fa1f fc85 	uxth.w	ip, r5
 80004f4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fc:	fb07 f10c 	mul.w	r1, r7, ip
 8000500:	4299      	cmp	r1, r3
 8000502:	d909      	bls.n	8000518 <__udivmoddi4+0x60>
 8000504:	18eb      	adds	r3, r5, r3
 8000506:	f107 30ff 	add.w	r0, r7, #4294967295
 800050a:	f080 811b 	bcs.w	8000744 <__udivmoddi4+0x28c>
 800050e:	4299      	cmp	r1, r3
 8000510:	f240 8118 	bls.w	8000744 <__udivmoddi4+0x28c>
 8000514:	3f02      	subs	r7, #2
 8000516:	442b      	add	r3, r5
 8000518:	1a5b      	subs	r3, r3, r1
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000520:	fb0e 3310 	mls	r3, lr, r0, r3
 8000524:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000528:	fb00 fc0c 	mul.w	ip, r0, ip
 800052c:	45a4      	cmp	ip, r4
 800052e:	d909      	bls.n	8000544 <__udivmoddi4+0x8c>
 8000530:	192c      	adds	r4, r5, r4
 8000532:	f100 33ff 	add.w	r3, r0, #4294967295
 8000536:	f080 8107 	bcs.w	8000748 <__udivmoddi4+0x290>
 800053a:	45a4      	cmp	ip, r4
 800053c:	f240 8104 	bls.w	8000748 <__udivmoddi4+0x290>
 8000540:	3802      	subs	r0, #2
 8000542:	442c      	add	r4, r5
 8000544:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000548:	eba4 040c 	sub.w	r4, r4, ip
 800054c:	2700      	movs	r7, #0
 800054e:	b11e      	cbz	r6, 8000558 <__udivmoddi4+0xa0>
 8000550:	40d4      	lsrs	r4, r2
 8000552:	2300      	movs	r3, #0
 8000554:	e9c6 4300 	strd	r4, r3, [r6]
 8000558:	4639      	mov	r1, r7
 800055a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055e:	428b      	cmp	r3, r1
 8000560:	d909      	bls.n	8000576 <__udivmoddi4+0xbe>
 8000562:	2e00      	cmp	r6, #0
 8000564:	f000 80eb 	beq.w	800073e <__udivmoddi4+0x286>
 8000568:	2700      	movs	r7, #0
 800056a:	e9c6 0100 	strd	r0, r1, [r6]
 800056e:	4638      	mov	r0, r7
 8000570:	4639      	mov	r1, r7
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	fab3 f783 	clz	r7, r3
 800057a:	2f00      	cmp	r7, #0
 800057c:	d147      	bne.n	800060e <__udivmoddi4+0x156>
 800057e:	428b      	cmp	r3, r1
 8000580:	d302      	bcc.n	8000588 <__udivmoddi4+0xd0>
 8000582:	4282      	cmp	r2, r0
 8000584:	f200 80fa 	bhi.w	800077c <__udivmoddi4+0x2c4>
 8000588:	1a84      	subs	r4, r0, r2
 800058a:	eb61 0303 	sbc.w	r3, r1, r3
 800058e:	2001      	movs	r0, #1
 8000590:	4698      	mov	r8, r3
 8000592:	2e00      	cmp	r6, #0
 8000594:	d0e0      	beq.n	8000558 <__udivmoddi4+0xa0>
 8000596:	e9c6 4800 	strd	r4, r8, [r6]
 800059a:	e7dd      	b.n	8000558 <__udivmoddi4+0xa0>
 800059c:	b902      	cbnz	r2, 80005a0 <__udivmoddi4+0xe8>
 800059e:	deff      	udf	#255	; 0xff
 80005a0:	fab2 f282 	clz	r2, r2
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	f040 808f 	bne.w	80006c8 <__udivmoddi4+0x210>
 80005aa:	1b49      	subs	r1, r1, r5
 80005ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005b0:	fa1f f885 	uxth.w	r8, r5
 80005b4:	2701      	movs	r7, #1
 80005b6:	fbb1 fcfe 	udiv	ip, r1, lr
 80005ba:	0c23      	lsrs	r3, r4, #16
 80005bc:	fb0e 111c 	mls	r1, lr, ip, r1
 80005c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c4:	fb08 f10c 	mul.w	r1, r8, ip
 80005c8:	4299      	cmp	r1, r3
 80005ca:	d907      	bls.n	80005dc <__udivmoddi4+0x124>
 80005cc:	18eb      	adds	r3, r5, r3
 80005ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005d2:	d202      	bcs.n	80005da <__udivmoddi4+0x122>
 80005d4:	4299      	cmp	r1, r3
 80005d6:	f200 80cd 	bhi.w	8000774 <__udivmoddi4+0x2bc>
 80005da:	4684      	mov	ip, r0
 80005dc:	1a59      	subs	r1, r3, r1
 80005de:	b2a3      	uxth	r3, r4
 80005e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80005e4:	fb0e 1410 	mls	r4, lr, r0, r1
 80005e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005ec:	fb08 f800 	mul.w	r8, r8, r0
 80005f0:	45a0      	cmp	r8, r4
 80005f2:	d907      	bls.n	8000604 <__udivmoddi4+0x14c>
 80005f4:	192c      	adds	r4, r5, r4
 80005f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005fa:	d202      	bcs.n	8000602 <__udivmoddi4+0x14a>
 80005fc:	45a0      	cmp	r8, r4
 80005fe:	f200 80b6 	bhi.w	800076e <__udivmoddi4+0x2b6>
 8000602:	4618      	mov	r0, r3
 8000604:	eba4 0408 	sub.w	r4, r4, r8
 8000608:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800060c:	e79f      	b.n	800054e <__udivmoddi4+0x96>
 800060e:	f1c7 0c20 	rsb	ip, r7, #32
 8000612:	40bb      	lsls	r3, r7
 8000614:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000618:	ea4e 0e03 	orr.w	lr, lr, r3
 800061c:	fa01 f407 	lsl.w	r4, r1, r7
 8000620:	fa20 f50c 	lsr.w	r5, r0, ip
 8000624:	fa21 f30c 	lsr.w	r3, r1, ip
 8000628:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800062c:	4325      	orrs	r5, r4
 800062e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000632:	0c2c      	lsrs	r4, r5, #16
 8000634:	fb08 3319 	mls	r3, r8, r9, r3
 8000638:	fa1f fa8e 	uxth.w	sl, lr
 800063c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000640:	fb09 f40a 	mul.w	r4, r9, sl
 8000644:	429c      	cmp	r4, r3
 8000646:	fa02 f207 	lsl.w	r2, r2, r7
 800064a:	fa00 f107 	lsl.w	r1, r0, r7
 800064e:	d90b      	bls.n	8000668 <__udivmoddi4+0x1b0>
 8000650:	eb1e 0303 	adds.w	r3, lr, r3
 8000654:	f109 30ff 	add.w	r0, r9, #4294967295
 8000658:	f080 8087 	bcs.w	800076a <__udivmoddi4+0x2b2>
 800065c:	429c      	cmp	r4, r3
 800065e:	f240 8084 	bls.w	800076a <__udivmoddi4+0x2b2>
 8000662:	f1a9 0902 	sub.w	r9, r9, #2
 8000666:	4473      	add	r3, lr
 8000668:	1b1b      	subs	r3, r3, r4
 800066a:	b2ad      	uxth	r5, r5
 800066c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000670:	fb08 3310 	mls	r3, r8, r0, r3
 8000674:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000678:	fb00 fa0a 	mul.w	sl, r0, sl
 800067c:	45a2      	cmp	sl, r4
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x1da>
 8000680:	eb1e 0404 	adds.w	r4, lr, r4
 8000684:	f100 33ff 	add.w	r3, r0, #4294967295
 8000688:	d26b      	bcs.n	8000762 <__udivmoddi4+0x2aa>
 800068a:	45a2      	cmp	sl, r4
 800068c:	d969      	bls.n	8000762 <__udivmoddi4+0x2aa>
 800068e:	3802      	subs	r0, #2
 8000690:	4474      	add	r4, lr
 8000692:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000696:	fba0 8902 	umull	r8, r9, r0, r2
 800069a:	eba4 040a 	sub.w	r4, r4, sl
 800069e:	454c      	cmp	r4, r9
 80006a0:	46c2      	mov	sl, r8
 80006a2:	464b      	mov	r3, r9
 80006a4:	d354      	bcc.n	8000750 <__udivmoddi4+0x298>
 80006a6:	d051      	beq.n	800074c <__udivmoddi4+0x294>
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d069      	beq.n	8000780 <__udivmoddi4+0x2c8>
 80006ac:	ebb1 050a 	subs.w	r5, r1, sl
 80006b0:	eb64 0403 	sbc.w	r4, r4, r3
 80006b4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80006b8:	40fd      	lsrs	r5, r7
 80006ba:	40fc      	lsrs	r4, r7
 80006bc:	ea4c 0505 	orr.w	r5, ip, r5
 80006c0:	e9c6 5400 	strd	r5, r4, [r6]
 80006c4:	2700      	movs	r7, #0
 80006c6:	e747      	b.n	8000558 <__udivmoddi4+0xa0>
 80006c8:	f1c2 0320 	rsb	r3, r2, #32
 80006cc:	fa20 f703 	lsr.w	r7, r0, r3
 80006d0:	4095      	lsls	r5, r2
 80006d2:	fa01 f002 	lsl.w	r0, r1, r2
 80006d6:	fa21 f303 	lsr.w	r3, r1, r3
 80006da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006de:	4338      	orrs	r0, r7
 80006e0:	0c01      	lsrs	r1, r0, #16
 80006e2:	fbb3 f7fe 	udiv	r7, r3, lr
 80006e6:	fa1f f885 	uxth.w	r8, r5
 80006ea:	fb0e 3317 	mls	r3, lr, r7, r3
 80006ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f2:	fb07 f308 	mul.w	r3, r7, r8
 80006f6:	428b      	cmp	r3, r1
 80006f8:	fa04 f402 	lsl.w	r4, r4, r2
 80006fc:	d907      	bls.n	800070e <__udivmoddi4+0x256>
 80006fe:	1869      	adds	r1, r5, r1
 8000700:	f107 3cff 	add.w	ip, r7, #4294967295
 8000704:	d22f      	bcs.n	8000766 <__udivmoddi4+0x2ae>
 8000706:	428b      	cmp	r3, r1
 8000708:	d92d      	bls.n	8000766 <__udivmoddi4+0x2ae>
 800070a:	3f02      	subs	r7, #2
 800070c:	4429      	add	r1, r5
 800070e:	1acb      	subs	r3, r1, r3
 8000710:	b281      	uxth	r1, r0
 8000712:	fbb3 f0fe 	udiv	r0, r3, lr
 8000716:	fb0e 3310 	mls	r3, lr, r0, r3
 800071a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800071e:	fb00 f308 	mul.w	r3, r0, r8
 8000722:	428b      	cmp	r3, r1
 8000724:	d907      	bls.n	8000736 <__udivmoddi4+0x27e>
 8000726:	1869      	adds	r1, r5, r1
 8000728:	f100 3cff 	add.w	ip, r0, #4294967295
 800072c:	d217      	bcs.n	800075e <__udivmoddi4+0x2a6>
 800072e:	428b      	cmp	r3, r1
 8000730:	d915      	bls.n	800075e <__udivmoddi4+0x2a6>
 8000732:	3802      	subs	r0, #2
 8000734:	4429      	add	r1, r5
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800073c:	e73b      	b.n	80005b6 <__udivmoddi4+0xfe>
 800073e:	4637      	mov	r7, r6
 8000740:	4630      	mov	r0, r6
 8000742:	e709      	b.n	8000558 <__udivmoddi4+0xa0>
 8000744:	4607      	mov	r7, r0
 8000746:	e6e7      	b.n	8000518 <__udivmoddi4+0x60>
 8000748:	4618      	mov	r0, r3
 800074a:	e6fb      	b.n	8000544 <__udivmoddi4+0x8c>
 800074c:	4541      	cmp	r1, r8
 800074e:	d2ab      	bcs.n	80006a8 <__udivmoddi4+0x1f0>
 8000750:	ebb8 0a02 	subs.w	sl, r8, r2
 8000754:	eb69 020e 	sbc.w	r2, r9, lr
 8000758:	3801      	subs	r0, #1
 800075a:	4613      	mov	r3, r2
 800075c:	e7a4      	b.n	80006a8 <__udivmoddi4+0x1f0>
 800075e:	4660      	mov	r0, ip
 8000760:	e7e9      	b.n	8000736 <__udivmoddi4+0x27e>
 8000762:	4618      	mov	r0, r3
 8000764:	e795      	b.n	8000692 <__udivmoddi4+0x1da>
 8000766:	4667      	mov	r7, ip
 8000768:	e7d1      	b.n	800070e <__udivmoddi4+0x256>
 800076a:	4681      	mov	r9, r0
 800076c:	e77c      	b.n	8000668 <__udivmoddi4+0x1b0>
 800076e:	3802      	subs	r0, #2
 8000770:	442c      	add	r4, r5
 8000772:	e747      	b.n	8000604 <__udivmoddi4+0x14c>
 8000774:	f1ac 0c02 	sub.w	ip, ip, #2
 8000778:	442b      	add	r3, r5
 800077a:	e72f      	b.n	80005dc <__udivmoddi4+0x124>
 800077c:	4638      	mov	r0, r7
 800077e:	e708      	b.n	8000592 <__udivmoddi4+0xda>
 8000780:	4637      	mov	r7, r6
 8000782:	e6e9      	b.n	8000558 <__udivmoddi4+0xa0>

08000784 <__aeabi_idiv0>:
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800078c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000790:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <SCB_EnableICache+0x3c>)
 8000796:	2200      	movs	r2, #0
 8000798:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800079c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007a0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <SCB_EnableICache+0x3c>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <SCB_EnableICache+0x3c>)
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <SCB_EnableDCache+0x7c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007d6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <SCB_EnableDCache+0x7c>)
 80007dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007e0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	0b5b      	lsrs	r3, r3, #13
 80007e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ea:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007f4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	015a      	lsls	r2, r3, #5
 80007fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000804:	490f      	ldr	r1, [pc, #60]	; (8000844 <SCB_EnableDCache+0x7c>)
 8000806:	4313      	orrs	r3, r2
 8000808:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	60ba      	str	r2, [r7, #8]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ef      	bne.n	80007f6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	60fa      	str	r2, [r7, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1e5      	bne.n	80007ec <SCB_EnableDCache+0x24>
 8000820:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <SCB_EnableDCache+0x7c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <SCB_EnableDCache+0x7c>)
 800082a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800082e:	6153      	str	r3, [r2, #20]
 8000830:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000834:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a3c      	ldr	r2, [pc, #240]	; (8000958 <HAL_UART_MspInit+0x110>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d145      	bne.n	80008f6 <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800086a:	4b3c      	ldr	r3, [pc, #240]	; (800095c <HAL_UART_MspInit+0x114>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a3b      	ldr	r2, [pc, #236]	; (800095c <HAL_UART_MspInit+0x114>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b39      	ldr	r3, [pc, #228]	; (800095c <HAL_UART_MspInit+0x114>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <HAL_UART_MspInit+0x114>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a35      	ldr	r2, [pc, #212]	; (800095c <HAL_UART_MspInit+0x114>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <HAL_UART_MspInit+0x114>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <HAL_UART_MspInit+0x114>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a2f      	ldr	r2, [pc, #188]	; (800095c <HAL_UART_MspInit+0x114>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <HAL_UART_MspInit+0x114>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

		/* USART1 GPIO Configuration
		 * PB7 ------> USART1_RX
		 * PA9 ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c2:	2307      	movs	r3, #7
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4824      	ldr	r0, [pc, #144]	; (8000960 <HAL_UART_MspInit+0x118>)
 80008ce:	f000 feb1 	bl	8001634 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e4:	2307      	movs	r3, #7
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481d      	ldr	r0, [pc, #116]	; (8000964 <HAL_UART_MspInit+0x11c>)
 80008f0:	f000 fea0 	bl	8001634 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 80008f4:	e02c      	b.n	8000950 <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <HAL_UART_MspInit+0x120>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d127      	bne.n	8000950 <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <HAL_UART_MspInit+0x114>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <HAL_UART_MspInit+0x114>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6453      	str	r3, [r2, #68]	; 0x44
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <HAL_UART_MspInit+0x114>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_UART_MspInit+0x114>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_UART_MspInit+0x114>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_UART_MspInit+0x114>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000930:	23c0      	movs	r3, #192	; 0xc0
 8000932:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000940:	2308      	movs	r3, #8
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4808      	ldr	r0, [pc, #32]	; (800096c <HAL_UART_MspInit+0x124>)
 800094c:	f000 fe72 	bl	8001634 <HAL_GPIO_Init>
}
 8000950:	bf00      	nop
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40011000 	.word	0x40011000
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40020000 	.word	0x40020000
 8000968:	40011400 	.word	0x40011400
 800096c:	40020800 	.word	0x40020800

08000970 <hardware_rand_initialize>:

void BSP_SDRAM_Init();
void USB_OTG_BSP_HS_Init(void);

void hardware_rand_initialize(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <hardware_rand_initialize+0x20>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a05      	ldr	r2, [pc, #20]	; (8000990 <hardware_rand_initialize+0x20>)
 800097a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097e:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <hardware_rand_initialize+0x24>)
 8000982:	2204      	movs	r2, #4
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40023834 	.word	0x40023834
 8000994:	50060800 	.word	0x50060800

08000998 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART1_UART_Init+0x54>)
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009a0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_USART1_UART_Init+0x54>)
 80009dc:	f001 fb9e 	bl	800211c <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d000      	beq.n	80009e8 <MX_USART1_UART_Init+0x50>
	{
		while (1);
 80009e6:	e7fe      	b.n	80009e6 <MX_USART1_UART_Init+0x4e>
	}
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000364 	.word	0x20000364
 80009f0:	40011000 	.word	0x40011000

080009f4 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b092      	sub	sp, #72	; 0x48
 80009f8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a08:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a12:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000a14:	2319      	movs	r3, #25
 8000a16:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 8000a18:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a22:	2309      	movs	r3, #9
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a26:	463b      	mov	r3, r7
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 ff45 	bl	80018b8 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d000      	beq.n	8000a3e <SystemClock_Config+0x4a>
	{
		while (1);
 8000a3c:	e7fe      	b.n	8000a3c <SystemClock_Config+0x48>
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000a3e:	f000 feff 	bl	8001840 <HAL_PWREx_EnableOverDrive>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d000      	beq.n	8000a52 <SystemClock_Config+0x5e>
	{
		while (1);
 8000a50:	e7fe      	b.n	8000a50 <SystemClock_Config+0x5c>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000a52:	230f      	movs	r3, #15
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6e:	2107      	movs	r1, #7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f91b 	bl	8001cac <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d000      	beq.n	8000a86 <SystemClock_Config+0x92>
	{
		while (1);
 8000a84:	e7fe      	b.n	8000a84 <SystemClock_Config+0x90>
	}
}
 8000a86:	bf00      	nop
 8000a88:	3748      	adds	r7, #72	; 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000a96:	f000 fca5 	bl	80013e4 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MPU_Config+0x84>)
 8000aa0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000aa2:	2311      	movs	r3, #17
 8000aa4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fcad 	bl	8001428 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000ad2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ad6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000ad8:	2316      	movs	r3, #22
 8000ada:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000adc:	2303      	movs	r3, #3
 8000ade:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000af4:	2300      	movs	r3, #0
 8000af6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fc92 	bl	8001428 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b04:	2004      	movs	r0, #4
 8000b06:	f000 fc7d 	bl	8001404 <HAL_MPU_Enable>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20010000 	.word	0x20010000

08000b18 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000b1c:	f7ff fe34 	bl	8000788 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000b20:	f7ff fe52 	bl	80007c8 <SCB_EnableDCache>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <GreenLed_Init>:

static void GreenLed_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	/* enable clock and clear 'MODER1' field for port PI */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <GreenLed_Init+0x40>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <GreenLed_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOI->MODER &= ~GPIO_MODER_MODER1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <GreenLed_Init+0x44>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <GreenLed_Init+0x44>)
 8000b3e:	f023 030c 	bic.w	r3, r3, #12
 8000b42:	6013      	str	r3, [r2, #0]

	/* setup pin PI1 as 'push-pull' output and reset it in '0' */
	GPIOI->MODER |= GPIO_MODER_MODER1_0;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <GreenLed_Init+0x44>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <GreenLed_Init+0x44>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BR_1;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <GreenLed_Init+0x44>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <GreenLed_Init+0x44>)
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	6193      	str	r3, [r2, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40022000 	.word	0x40022000

08000b70 <GreenLed_On>:

void GreenLed_On(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	GPIOI->BSRR |= GPIO_BSRR_BS_1;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <GreenLed_On+0x1c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <GreenLed_On+0x1c>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	6193      	str	r3, [r2, #24]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <GreenLed_Off>:

void GreenLed_Off(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	GPIOI->BSRR |= GPIO_BSRR_BR_1;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <GreenLed_Off+0x1c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <GreenLed_Off+0x1c>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9e:	6193      	str	r3, [r2, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <GreenLed_Toggle>:

void GreenLed_Toggle(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	GPIOI->BSRR |= ((GPIOI->ODR & 0x02) != 0x00u) ? GPIO_BSRR_BR_1 : GPIO_BSRR_BS_1;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <GreenLed_Toggle+0x2c>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <GreenLed_Toggle+0x16>
 8000bc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bc4:	e000      	b.n	8000bc8 <GreenLed_Toggle+0x18>
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <GreenLed_Toggle+0x2c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4903      	ldr	r1, [pc, #12]	; (8000bdc <GreenLed_Toggle+0x2c>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	618b      	str	r3, [r1, #24]
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40022000 	.word	0x40022000

08000be0 <hardware_setup>:

/** Initialize: MPU, CACHE, HAL_Init, Clock, SDRAM, USART1, RNG */
void hardware_setup(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000be4:	f7ff ff54 	bl	8000a90 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000be8:	f7ff ff96 	bl	8000b18 <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000bec:	f000 fb6c 	bl	80012c8 <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000bf0:	f7ff ff00 	bl	80009f4 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000bf4:	f000 fade 	bl	80011b4 <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000bf8:	f7ff fece 	bl	8000998 <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000bfc:	f7ff feb8 	bl	8000970 <hardware_rand_initialize>

	GreenLed_Init();
 8000c00:	f7ff ff92 	bl	8000b28 <GreenLed_Init>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <prvGetRegistersFromStack>:
/*    Other registers will not have changed since the fault occurred,     */
/*    and can be viewed directly in the debugger’s CPU register window.   */
/*                                                                        */
/**************************************************************************/
void prvGetRegistersFromStack(uint32_t* pulFaultStackAddress)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	volatile uint32_t lr;	/* Link register. */
	volatile uint32_t pc;	/* Program counter. */
	volatile uint32_t psr;	/* Program status register. */
#pragma GCC diagnostic pop

	r0 = pulFaultStackAddress[0];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
	r1 = pulFaultStackAddress[1];
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	623b      	str	r3, [r7, #32]
	r2 = pulFaultStackAddress[2];
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	61fb      	str	r3, [r7, #28]
	r3 = pulFaultStackAddress[3];
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	61bb      	str	r3, [r7, #24]

	r12 = pulFaultStackAddress[4];
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	617b      	str	r3, [r7, #20]
	lr = pulFaultStackAddress[5];
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	613b      	str	r3, [r7, #16]
	pc = pulFaultStackAddress[6];	/* contains the program counter value */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	60fb      	str	r3, [r7, #12]
	psr = pulFaultStackAddress[7];
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	60bb      	str	r3, [r7, #8]

	/* When the following line is hit, the variables contain the register values. */
	for (;;);
 8000c40:	e7fe      	b.n	8000c40 <prvGetRegistersFromStack+0x38>

08000c42 <NMI_Handler>:
	 * a precise fault, which makes the fault easier to debug, albeit at the cost of slower
	 * program execution. */
}

void NMI_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
	while(1);
 8000c46:	e7fe      	b.n	8000c46 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	while(1)
	{
		/* fault handler implementation calls a function called 'prvGetRegistersFromStack()' */
		__asm volatile
 8000c4c:	f01e 0f04 	tst.w	lr, #4
 8000c50:	bf0c      	ite	eq
 8000c52:	f3ef 8008 	mrseq	r0, MSP
 8000c56:	f3ef 8009 	mrsne	r0, PSP
 8000c5a:	6981      	ldr	r1, [r0, #24]
 8000c5c:	4a00      	ldr	r2, [pc, #0]	; (8000c60 <HANDLER2_ADDRESS_CONST>)
 8000c5e:	4710      	bx	r2

08000c60 <HANDLER2_ADDRESS_CONST>:
 8000c60:	08000c09 	.word	0x08000c09
 8000c64:	e7f2      	b.n	8000c4c <HardFault_Handler+0x4>

08000c66 <MemManage_Handler>:
		);
	}
}

void MemManage_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
	while(1);
 8000c6a:	e7fe      	b.n	8000c6a <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	while(1);
 8000c70:	e7fe      	b.n	8000c70 <BusFault_Handler+0x4>

08000c72 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
	while(1);
 8000c76:	e7fe      	b.n	8000c76 <UsageFault_Handler+0x4>

08000c78 <main>:
	'C', 'D', 'C', ' ', 'C', 'o', 'n', 'f', 'i', 'g',
};
#endif // @formatter:on

int main(int argc, char** argv)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	/* Setup the hardware: MPU, CACHE, HAL_Init, Clock, SDRAM, USART1, RNG */
	hardware_setup();
 8000c82:	f7ff ffad 	bl	8000be0 <hardware_setup>
	USB_OTG_BSP_HS_Init();
 8000c86:	f000 f8e7 	bl	8000e58 <USB_OTG_BSP_HS_Init>

	_ux_dcd_stm32_delay(100000U);
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <main+0x28>)
 8000c8c:	f001 ff44 	bl	8002b18 <_ux_dcd_stm32_delay>

	/* Enter the ThreadX kernel. */
	tx_kernel_enter();
 8000c90:	f004 fc8c 	bl	80055ac <_tx_initialize_kernel_enter>
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	000186a0 	.word	0x000186a0

08000ca4 <tx_application_define>:
	.ux_slave_class_cdc_acm_instance_deactivate = demo_cdc_instance_deactivate,
	.ux_slave_class_cdc_acm_parameter_change = demo_cdc_acm_parameter_change
};

void tx_application_define(void* first_unused_memory)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b090      	sub	sp, #64	; 0x40
 8000ca8:	af06      	add	r7, sp, #24
 8000caa:	6078      	str	r0, [r7, #4]
	/* Initialize the free memory pointer. */
	CHAR* stack_pointer = (CHAR*)first_unused_memory;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24

	/* Initialize the RAM disk memory. */
	CHAR* memory_pointer = stack_pointer + UX_DEMO_STACK_SIZE;
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cb6:	623b      	str	r3, [r7, #32]

	/* Initialize USBX Memory (no separate pool for cache safe memory) */
	UINT status = _ux_system_initialize(memory_pointer, UX_USBX_MEMORY_SIZE, UX_NULL, 0);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc0:	6a38      	ldr	r0, [r7, #32]
 8000cc2:	f003 f8bb 	bl	8003e3c <_ux_system_initialize>
 8000cc6:	61f8      	str	r0, [r7, #28]
	if (status != UX_SUCCESS)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d13e      	bne.n	8000d4c <tx_application_define+0xa8>
		return;

	ULONG device_framework_length_full_speed = sizeof(device_framework_full_speed);		// 93
 8000cce:	235d      	movs	r3, #93	; 0x5d
 8000cd0:	61bb      	str	r3, [r7, #24]
	ULONG device_framework_length_high_speed = sizeof(device_framework_high_speed);		// 103
 8000cd2:	2367      	movs	r3, #103	; 0x67
 8000cd4:	617b      	str	r3, [r7, #20]
	ULONG string_framework_length = sizeof(string_framework);							// 47
 8000cd6:	234d      	movs	r3, #77	; 0x4d
 8000cd8:	613b      	str	r3, [r7, #16]
	ULONG language_id_framework_length = sizeof(language_id_framework);					// 2
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]

	/* The code below is required for installing the device portion of USBX.
	 * No call back for device status change in this example. */
	status = _ux_device_stack_initialize(device_framework_high_speed,
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9304      	str	r3, [sp, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <tx_application_define+0xb8>)
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <tx_application_define+0xbc>)
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <tx_application_define+0xc0>)
 8000cf6:	6979      	ldr	r1, [r7, #20]
 8000cf8:	481b      	ldr	r0, [pc, #108]	; (8000d68 <tx_application_define+0xc4>)
 8000cfa:	f002 fee5 	bl	8003ac8 <_ux_device_stack_initialize>
 8000cfe:	61f8      	str	r0, [r7, #28]
			device_framework_length_high_speed, device_framework_full_speed,
			device_framework_length_full_speed, string_framework, string_framework_length,
			language_id_framework, language_id_framework_length, UX_NULL);
	if (status != UX_SUCCESS)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d124      	bne.n	8000d50 <tx_application_define+0xac>
		return;

	/* Initialize the device cdc class. This class owns both interfaces starting with 0. */
	status = _ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <tx_application_define+0xc8>)
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4918      	ldr	r1, [pc, #96]	; (8000d70 <tx_application_define+0xcc>)
 8000d10:	4818      	ldr	r0, [pc, #96]	; (8000d74 <tx_application_define+0xd0>)
 8000d12:	f002 fb35 	bl	8003380 <_ux_device_stack_class_register>
 8000d16:	61f8      	str	r0, [r7, #28]
			_ux_device_class_cdc_acm_entry, INTERF_DAT_NUM, INTERF_COM_NUM, (VOID*)&cdc_parameter);
	if (status != UX_SUCCESS)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d11a      	bne.n	8000d54 <tx_application_define+0xb0>
	/* Create the main demo thread.
	 * UINT _tx_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr,
	 * 		VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID* stack_start,
	 * 		ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice,
	 * 		UINT auto_start); */
	status = _tx_thread_create(&demo_thread, "tx demo", demo_thread_entry, 0, stack_pointer,
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9305      	str	r3, [sp, #20]
 8000d22:	2301      	movs	r3, #1
 8000d24:	9304      	str	r3, [sp, #16]
 8000d26:	2314      	movs	r3, #20
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <tx_application_define+0xd4>)
 8000d3c:	490f      	ldr	r1, [pc, #60]	; (8000d7c <tx_application_define+0xd8>)
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <tx_application_define+0xdc>)
 8000d40:	f004 fc58 	bl	80055f4 <_tx_thread_create>
 8000d44:	61f8      	str	r0, [r7, #28]
			UX_DEMO_STACK_SIZE, 20, 20, 1, TX_AUTO_START);
	if (status != TX_SUCCESS)
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	2b00      	cmp	r3, #0
		return;

	return;
 8000d4a:	e004      	b.n	8000d56 <tx_application_define+0xb2>
		return;
 8000d4c:	bf00      	nop
 8000d4e:	e002      	b.n	8000d56 <tx_application_define+0xb2>
		return;
 8000d50:	bf00      	nop
 8000d52:	e000      	b.n	8000d56 <tx_application_define+0xb2>
		return;
 8000d54:	bf00      	nop
}
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200000c8 	.word	0x200000c8
 8000d60:	200000cc 	.word	0x200000cc
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000060 	.word	0x20000060
 8000d6c:	2000011c 	.word	0x2000011c
 8000d70:	0800293d 	.word	0x0800293d
 8000d74:	20000134 	.word	0x20000134
 8000d78:	08000d85 	.word	0x08000d85
 8000d7c:	080072dc 	.word	0x080072dc
 8000d80:	200003e8 	.word	0x200003e8

08000d84 <demo_thread_entry>:

void demo_thread_entry(ULONG arg)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	/* Register the STM32  USB device controllers available in this system */
	ULONG status = _ux_dcd_stm32_initialize(UX_DCD_STM32_OTG_FS_HIGH_SPEED, 0);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <demo_thread_entry+0x74>)
 8000d90:	f001 fed2 	bl	8002b38 <_ux_dcd_stm32_initialize>
 8000d94:	60f8      	str	r0, [r7, #12]
	if (status != UX_SUCCESS)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d128      	bne.n	8000dee <demo_thread_entry+0x6a>
	ULONG requested_length;

	for (;;)
	{
		/* Ensure the CDC class is mounted. */
		if (cdc != UX_NULL)
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <demo_thread_entry+0x78>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d020      	beq.n	8000de6 <demo_thread_entry+0x62>
//				/* And send it again. */
//				status = _ux_device_class_cdc_acm_write(cdc, buffer, 1, &actual_length);
//			}

			/* Fill buffer. */
			buffer[0] = 'a';
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <demo_thread_entry+0x7c>)
 8000da6:	2261      	movs	r2, #97	; 0x61
 8000da8:	701a      	strb	r2, [r3, #0]
			buffer[1] = 'b';
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <demo_thread_entry+0x7c>)
 8000dac:	2262      	movs	r2, #98	; 0x62
 8000dae:	705a      	strb	r2, [r3, #1]
			buffer[2] = 'c';
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <demo_thread_entry+0x7c>)
 8000db2:	2263      	movs	r2, #99	; 0x63
 8000db4:	709a      	strb	r2, [r3, #2]
			buffer[3] = 'd';
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <demo_thread_entry+0x7c>)
 8000db8:	2264      	movs	r2, #100	; 0x64
 8000dba:	70da      	strb	r2, [r3, #3]
			buffer[4] = 'e';
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <demo_thread_entry+0x7c>)
 8000dbe:	2265      	movs	r2, #101	; 0x65
 8000dc0:	711a      	strb	r2, [r3, #4]
			buffer[5] = 'f';
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <demo_thread_entry+0x7c>)
 8000dc4:	2266      	movs	r2, #102	; 0x66
 8000dc6:	715a      	strb	r2, [r3, #5]
			buffer[6] = '\r';
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <demo_thread_entry+0x7c>)
 8000dca:	220d      	movs	r2, #13
 8000dcc:	719a      	strb	r2, [r3, #6]
			buffer[7] = '\n';
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <demo_thread_entry+0x7c>)
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	71da      	strb	r2, [r3, #7]

			/* And send 8 bytes. */
			status = _ux_device_class_cdc_acm_write(cdc, buffer, 8, &actual_length);
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <demo_thread_entry+0x78>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2208      	movs	r2, #8
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <demo_thread_entry+0x7c>)
 8000de0:	f001 fe24 	bl	8002a2c <_ux_device_class_cdc_acm_write>
 8000de4:	60f8      	str	r0, [r7, #12]
//			/* Read from the CDC class. */
//			status = _ux_device_class_cdc_acm_read(cdc, buffer, UX_DEMO_BUFFER_SIZE,
//					&actual_length);
		}

		_tx_thread_sleep(50);
 8000de6:	2032      	movs	r0, #50	; 0x32
 8000de8:	f004 fd10 	bl	800580c <_tx_thread_sleep>
		if (cdc != UX_NULL)
 8000dec:	e7d6      	b.n	8000d9c <demo_thread_entry+0x18>
		return;
 8000dee:	bf00      	nop
	}
}
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40040000 	.word	0x40040000
 8000dfc:	200004b0 	.word	0x200004b0
 8000e00:	200004b4 	.word	0x200004b4

08000e04 <demo_cdc_instance_activate>:

	} while (1);
} */

void demo_cdc_instance_activate(void* cdc_instance)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	/* Save the CDC instance. */
	cdc = (UX_SLAVE_CLASS_CDC_ACM*)cdc_instance;
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <demo_cdc_instance_activate+0x1c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]

	DEBUG_LED_ON();
 8000e12:	f7ff fead 	bl	8000b70 <GreenLed_On>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200004b0 	.word	0x200004b0

08000e24 <demo_cdc_instance_deactivate>:

void demo_cdc_instance_deactivate(void* cdc_instance)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	/* Reset the CDC instance. */
	cdc = UX_NULL;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <demo_cdc_instance_deactivate+0x1c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]

	DEBUG_LED_OFF();
 8000e32:	f7ff fead 	bl	8000b90 <GreenLed_Off>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200004b0 	.word	0x200004b0

08000e44 <demo_cdc_acm_parameter_change>:

void demo_cdc_acm_parameter_change(void* cdc_instance)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	DEBUG_LED_TOGGLE();
 8000e4c:	f7ff feb0 	bl	8000bb0 <GreenLed_Toggle>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <USB_OTG_BSP_HS_Init>:

/** this function repeats the function 'HAL_PCD_MspInit(..)' from the 'usbd_conf.c' */
void USB_OTG_BSP_HS_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0
	/* Configure USB FS GPIOs */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a59      	ldr	r2, [pc, #356]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a47      	ldr	r2, [pc, #284]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
	 * PB5     ------> USB_OTG_HS_ULPI_D7
	 * PC0     ------> USB_OTG_HS_ULPI_STP
	 * PH4     ------> USB_OTG_HS_ULPI_NXT
	 * PC2     ------> USB_OTG_HS_ULPI_DIR
	 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

	/* CLK */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4838      	ldr	r0, [pc, #224]	; (8000fcc <USB_OTG_BSP_HS_Init+0x174>)
 8000eea:	f000 fba3 	bl	8001634 <HAL_GPIO_Init>

	/* D0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000efe:	230a      	movs	r3, #10
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4830      	ldr	r0, [pc, #192]	; (8000fcc <USB_OTG_BSP_HS_Init+0x174>)
 8000f0a:	f000 fb93 	bl	8001634 <HAL_GPIO_Init>

	/* D1 D2 D3 D4 D5 D6 D7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11
 8000f0e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000f12:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <USB_OTG_BSP_HS_Init+0x178>)
 8000f28:	f000 fb84 	bl	8001634 <HAL_GPIO_Init>

	/* STP */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f38:	230a      	movs	r3, #10
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4824      	ldr	r0, [pc, #144]	; (8000fd4 <USB_OTG_BSP_HS_Init+0x17c>)
 8000f44:	f000 fb76 	bl	8001634 <HAL_GPIO_Init>

	/* NXT */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f54:	230a      	movs	r3, #10
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <USB_OTG_BSP_HS_Init+0x180>)
 8000f60:	f000 fb68 	bl	8001634 <HAL_GPIO_Init>

	/* DIR */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f64:	2304      	movs	r3, #4
 8000f66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f70:	230a      	movs	r3, #10
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <USB_OTG_BSP_HS_Init+0x17c>)
 8000f7c:	f000 fb5a 	bl	8001634 <HAL_GPIO_Init>

	/* Enable USB HS Clocks */
	__HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000f86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <USB_OTG_BSP_HS_Init+0x170>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

	/* Set USBHS Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(OTG_HS_IRQn, 4, 0);		// (OTG_HS_IRQn, 0, 0)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	204d      	movs	r0, #77	; 0x4d
 8000fb6:	f000 f9d1 	bl	800135c <HAL_NVIC_SetPriority>

	/* Enable USB HS Interrupt */
	HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000fba:	204d      	movs	r0, #77	; 0x4d
 8000fbc:	f000 fa04 	bl	80013c8 <HAL_NVIC_EnableIRQ>
//	/* Set USBHS Interrupt to the lowest priority */
//	HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);		// (OTG_HS_IRQn, 0, 0)
//
//	/* Enable USB HS Interrupt */
//	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
}
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	; 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40021c00 	.word	0x40021c00

08000fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe2:	490e      	ldr	r1, [pc, #56]	; (800101c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <LoopForever+0xe>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff8:	4c0b      	ldr	r4, [pc, #44]	; (8001028 <LoopForever+0x16>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001006:	f001 fb29 	bl	800265c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800100a:	f006 f92f 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100e:	f7ff fe33 	bl	8000c78 <main>

08001012 <LoopForever>:

LoopForever:
    b LoopForever
 8001012:	e7fe      	b.n	8001012 <LoopForever>
  ldr   r0, =_estack
 8001014:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001020:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 8001024:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001028:	20000d9c 	.word	0x20000d9c

0800102c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC_IRQHandler>
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 800102e:	f7ff be0b 	b.w	8000c48 <HardFault_Handler>

MemManage_Handler:
  b MemManage_Handler
 8001032:	f7ff be18 	b.w	8000c66 <MemManage_Handler>

BusFault_Handler:
  b BusFault_Handler
 8001036:	f7ff be19 	b.w	8000c6c <BusFault_Handler>

UsageFault_Handler:
  b UsageFault_Handler
 800103a:	f7ff be1a 	b.w	8000c72 <UsageFault_Handler>
	...

08001040 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8001040:	4b53      	ldr	r3, [pc, #332]	; (8001190 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001042:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 8001044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001046:	f042 0201 	orr.w	r2, r2, #1
{
 800104a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
{
 800104e:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 8001050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 8001052:	2001      	movs	r0, #1
{
 8001054:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 8001056:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 8001058:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 800105a:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 8001060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001062:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
 8001068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800106e:	9202      	str	r2, [sp, #8]
 8001070:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	f042 0204 	orr.w	r2, r2, #4
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
 800107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107c:	f002 0204 	and.w	r2, r2, #4
 8001080:	9203      	str	r2, [sp, #12]
 8001082:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001086:	432a      	orrs	r2, r5
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
 800108a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108c:	402a      	ands	r2, r5
 800108e:	9204      	str	r2, [sp, #16]
 8001090:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001094:	f042 0210 	orr.w	r2, r2, #16
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
 800109a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109c:	f002 0210 	and.w	r2, r2, #16
 80010a0:	9205      	str	r2, [sp, #20]
 80010a2:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80010a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
 80010ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ae:	f002 0220 	and.w	r2, r2, #32
 80010b2:	9206      	str	r2, [sp, #24]
 80010b4:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010c4:	9207      	str	r2, [sp, #28]
 80010c6:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80010d0:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 80010d4:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 80010d8:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010de:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80010e0:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80010e2:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010e4:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 80010e6:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80010e8:	482a      	ldr	r0, [pc, #168]	; (8001194 <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80010ea:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010ec:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80010ee:	f000 faa1 	bl	8001634 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80010f2:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80010f6:	4621      	mov	r1, r4
 80010f8:	4827      	ldr	r0, [pc, #156]	; (8001198 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80010fa:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80010fc:	f000 fa9a 	bl	8001634 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8001100:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001104:	4621      	mov	r1, r4
 8001106:	4825      	ldr	r0, [pc, #148]	; (800119c <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8001108:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800110a:	f000 fa93 	bl	8001634 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 800110e:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001112:	4621      	mov	r1, r4
 8001114:	4822      	ldr	r0, [pc, #136]	; (80011a0 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 8001116:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001118:	f000 fa8c 	bl	8001634 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 800111c:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001120:	4621      	mov	r1, r4
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8001124:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001126:	f000 fa85 	bl	8001634 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 800112a:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800112c:	4621      	mov	r1, r4
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8001130:	4c1e      	ldr	r4, [pc, #120]	; (80011ac <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8001132:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001134:	f000 fa7e 	bl	8001634 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800113c:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001142:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8001146:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800114c:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800114e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001154:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8001156:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800115a:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115c:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 800115e:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001160:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001162:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001164:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 8001166:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001168:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 800116a:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 800116c:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 800116e:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 8001172:	f000 fa1d 	bl	80015b0 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 8001176:	4620      	mov	r0, r4
 8001178:	f000 f97e 	bl	8001478 <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800117c:	462a      	mov	r2, r5
 800117e:	210f      	movs	r1, #15
 8001180:	2038      	movs	r0, #56	; 0x38
 8001182:	f000 f8eb 	bl	800135c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001186:	2038      	movs	r0, #56	; 0x38
 8001188:	f000 f91e 	bl	80013c8 <HAL_NVIC_EnableIRQ>
}
 800118c:	b00e      	add	sp, #56	; 0x38
 800118e:	bd70      	pop	{r4, r5, r6, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	200001c8 	.word	0x200001c8
 80011b0:	40026410 	.word	0x40026410

080011b4 <BSP_SDRAM_Init>:
{
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011b8:	483d      	ldr	r0, [pc, #244]	; (80012b0 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 80011ba:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011bc:	4d3d      	ldr	r5, [pc, #244]	; (80012b4 <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011be:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 80011c0:	4c3d      	ldr	r4, [pc, #244]	; (80012b8 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 80011c2:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 80011c6:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 80011ca:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 80011ce:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 80011d4:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80011d8:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 80011dc:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011de:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011e0:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80011e2:	4628      	mov	r0, r5
 80011e4:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 80011e6:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 80011e8:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80011ea:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80011ec:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 80011ee:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 80011f2:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 80011f6:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011fa:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011fc:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80011fe:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8001202:	f8c5 8010 	str.w	r8, [r5, #16]
 8001206:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80012c0 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800120a:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 800120e:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001212:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001216:	f7ff ff13 	bl	8001040 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800121a:	4621      	mov	r1, r4
 800121c:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800121e:	4c27      	ldr	r4, [pc, #156]	; (80012bc <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001220:	f000 fe88 	bl	8001f34 <HAL_SDRAM_Init>
 8001224:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001226:	4621      	mov	r1, r4
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800122c:	bf18      	it	ne
 800122e:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001230:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 8001232:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001234:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001238:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 800123c:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800123e:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 8001240:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001242:	f000 fe99 	bl	8001f78 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8001246:	4638      	mov	r0, r7
 8001248:	f000 f862 	bl	8001310 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800124c:	4621      	mov	r1, r4
 800124e:	4628      	mov	r0, r5
 8001250:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001254:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 8001258:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800125c:	f000 fe8c 	bl	8001f78 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001260:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 8001264:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001266:	4621      	mov	r1, r4
 8001268:	4628      	mov	r0, r5
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800126e:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 8001272:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001274:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 8001278:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800127a:	f000 fe7d 	bl	8001f78 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800127e:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001282:	4621      	mov	r1, r4
 8001284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001288:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800128a:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 800128c:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800128e:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 8001292:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001296:	f000 fe6f 	bl	8001f78 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800129a:	4628      	mov	r0, r5
 800129c:	f240 6103 	movw	r1, #1539	; 0x603
 80012a0:	f000 fe84 	bl	8001fac <HAL_SDRAM_ProgramRefreshRate>
}
 80012a4:	f89b 0000 	ldrb.w	r0, [fp]
 80012a8:	b003      	add	sp, #12
 80012aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ae:	bf00      	nop
 80012b0:	a0000140 	.word	0xa0000140
 80012b4:	200006b4 	.word	0x200006b4
 80012b8:	200001ac 	.word	0x200001ac
 80012bc:	2000019c 	.word	0x2000019c
 80012c0:	20000128 	.word	0x20000128

080012c4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ca:	2003      	movs	r0, #3
{
 80012cc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	f000 f82d 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 fe7a 	bl	8001fd4 <HAL_InitTick>
  HAL_MspInit();
 80012e0:	f7ff fff0 	bl	80012c4 <HAL_MspInit>
}
 80012e4:	2000      	movs	r0, #0
 80012e6:	bd08      	pop	{r3, pc}
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x10>)
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_IncTick+0x14>)
 80012f0:	6811      	ldr	r1, [r2, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	440b      	add	r3, r1
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200006e8 	.word	0x200006e8
 8001300:	20000129 	.word	0x20000129

08001304 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001304:	4b01      	ldr	r3, [pc, #4]	; (800130c <HAL_GetTick+0x8>)
 8001306:	6818      	ldr	r0, [r3, #0]
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200006e8 	.word	0x200006e8

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff fff6 	bl	8001304 <HAL_GetTick>
 8001318:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	1c63      	adds	r3, r4, #1
 800131c:	d002      	beq.n	8001324 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_Delay+0x20>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	1b40      	subs	r0, r0, r5
 800132a:	42a0      	cmp	r0, r4
 800132c:	d3fa      	bcc.n	8001324 <HAL_Delay+0x14>
  {
  }
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
 8001330:	20000129 	.word	0x20000129

08001334 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001336:	0200      	lsls	r0, r0, #8
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001346:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800134c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001350:	60c8      	str	r0, [r1, #12]
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_NVIC_SetPriority+0x60>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001364:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001366:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	2d04      	cmp	r5, #4
 800136e:	bf28      	it	cs
 8001370:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	2c06      	cmp	r4, #6
 8001374:	d918      	bls.n	80013a8 <HAL_NVIC_SetPriority+0x4c>
 8001376:	3b03      	subs	r3, #3
 8001378:	f04f 34ff 	mov.w	r4, #4294967295
 800137c:	409c      	lsls	r4, r3
 800137e:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001382:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001386:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	fa02 f205 	lsl.w	r2, r2, r5
 800138c:	ea21 0102 	bic.w	r1, r1, r2
 8001390:	fa01 f203 	lsl.w	r2, r1, r3
 8001394:	ea42 0204 	orr.w	r2, r2, r4
 8001398:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800139c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800139e:	db06      	blt.n	80013ae <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_NVIC_SetPriority+0x64>)
 80013a2:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013a4:	bc30      	pop	{r4, r5}
 80013a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a8:	2400      	movs	r4, #0
 80013aa:	4623      	mov	r3, r4
 80013ac:	e7e9      	b.n	8001382 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	f000 000f 	and.w	r0, r0, #15
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_NVIC_SetPriority+0x68>)
 80013b4:	541a      	strb	r2, [r3, r0]
 80013b6:	bc30      	pop	{r4, r5}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000e400 	.word	0xe000e400
 80013c4:	e000ed14 	.word	0xe000ed14

080013c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013c8:	2800      	cmp	r0, #0
 80013ca:	db07      	blt.n	80013dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013cc:	f000 011f 	and.w	r1, r0, #31
 80013d0:	2301      	movs	r3, #1
 80013d2:	0940      	lsrs	r0, r0, #5
 80013d4:	4a02      	ldr	r2, [pc, #8]	; (80013e0 <HAL_NVIC_EnableIRQ+0x18>)
 80013d6:	408b      	lsls	r3, r1
 80013d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013ea:	2000      	movs	r0, #0
 80013ec:	4904      	ldr	r1, [pc, #16]	; (8001400 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f4:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 80013f6:	6048      	str	r0, [r1, #4]
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	e000ed90 	.word	0xe000ed90

08001404 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001406:	f040 0001 	orr.w	r0, r0, #1
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_MPU_Enable+0x20>)
 800140c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800140e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800141a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	e000ed90 	.word	0xe000ed90

08001428 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_MPU_ConfigRegion+0x4c>)
 800142a:	7843      	ldrb	r3, [r0, #1]
 800142c:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800142e:	7801      	ldrb	r1, [r0, #0]
 8001430:	b911      	cbnz	r1, 8001438 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8001432:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8001434:	6111      	str	r1, [r2, #16]
 8001436:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001438:	6843      	ldr	r3, [r0, #4]
{
 800143a:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800143c:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800143e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001440:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001442:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001444:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001446:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001448:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800144c:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800144e:	430b      	orrs	r3, r1
 8001450:	7a01      	ldrb	r1, [r0, #8]
 8001452:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001456:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001458:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800145c:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800145e:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8001462:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001466:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800146a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 800146e:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001470:	6113      	str	r3, [r2, #16]
}
 8001472:	4770      	bx	lr
 8001474:	e000ed90 	.word	0xe000ed90

08001478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ff42 	bl	8001304 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001480:	2c00      	cmp	r4, #0
 8001482:	d053      	beq.n	800152c <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001484:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001486:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001488:	2100      	movs	r1, #0
 800148a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800148c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001490:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001492:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149c:	e005      	b.n	80014aa <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149e:	f7ff ff31 	bl	8001304 <HAL_GetTick>
 80014a2:	1b40      	subs	r0, r0, r5
 80014a4:	2805      	cmp	r0, #5
 80014a6:	d83a      	bhi.n	800151e <HAL_DMA_Init+0xa6>
 80014a8:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	07d1      	lsls	r1, r2, #31
 80014ae:	d4f6      	bmi.n	800149e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80014b4:	68e1      	ldr	r1, [r4, #12]
 80014b6:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 80014b8:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ba:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014be:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c2:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c4:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c8:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ca:	4d35      	ldr	r5, [pc, #212]	; (80015a0 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ce:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d0:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d6:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d8:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014dc:	d028      	beq.n	8001530 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014e0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014e6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4d2e      	ldr	r5, [pc, #184]	; (80015a4 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80014ec:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014ee:	3a10      	subs	r2, #16
 80014f0:	492d      	ldr	r1, [pc, #180]	; (80015a8 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014f2:	482e      	ldr	r0, [pc, #184]	; (80015ac <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014f4:	fba5 5202 	umull	r5, r2, r5, r2
 80014f8:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80014fa:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014fc:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fe:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001500:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 8001502:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001504:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001508:	bf88      	it	hi
 800150a:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800150c:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150e:	4083      	lsls	r3, r0
  return HAL_OK;
 8001510:	4610      	mov	r0, r2
 8001512:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001514:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001518:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800151c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001520:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001522:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001524:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001526:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
}
 800152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001530:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001534:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001536:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 800153a:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800153e:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8001540:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001542:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001544:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001548:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154a:	2d00      	cmp	r5, #0
 800154c:	d0cc      	beq.n	80014e8 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800154e:	b17e      	cbz	r6, 8001570 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001550:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001554:	d016      	beq.n	8001584 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001556:	2f02      	cmp	r7, #2
 8001558:	d903      	bls.n	8001562 <HAL_DMA_Init+0xea>
 800155a:	2f03      	cmp	r7, #3
 800155c:	d1c4      	bne.n	80014e8 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155e:	01ea      	lsls	r2, r5, #7
 8001560:	d5c2      	bpl.n	80014e8 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001562:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001564:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8001566:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001568:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800156a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800156e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001570:	2f01      	cmp	r7, #1
 8001572:	d003      	beq.n	800157c <HAL_DMA_Init+0x104>
 8001574:	d3f3      	bcc.n	800155e <HAL_DMA_Init+0xe6>
 8001576:	2f02      	cmp	r7, #2
 8001578:	d1b6      	bne.n	80014e8 <HAL_DMA_Init+0x70>
 800157a:	e7f0      	b.n	800155e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800157c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001580:	d1b2      	bne.n	80014e8 <HAL_DMA_Init+0x70>
 8001582:	e7ee      	b.n	8001562 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001584:	2f03      	cmp	r7, #3
 8001586:	d8af      	bhi.n	80014e8 <HAL_DMA_Init+0x70>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <HAL_DMA_Init+0x118>)
 800158a:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800158e:	bf00      	nop
 8001590:	08001563 	.word	0x08001563
 8001594:	0800155f 	.word	0x0800155f
 8001598:	08001563 	.word	0x08001563
 800159c:	0800157d 	.word	0x0800157d
 80015a0:	f010803f 	.word	0xf010803f
 80015a4:	aaaaaaab 	.word	0xaaaaaaab
 80015a8:	fffffc00 	.word	0xfffffc00
 80015ac:	080072e4 	.word	0x080072e4

080015b0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d035      	beq.n	8001620 <HAL_DMA_DeInit+0x70>
 80015b4:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80015b6:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80015ba:	b2c0      	uxtb	r0, r0
 80015bc:	2802      	cmp	r0, #2
 80015be:	d031      	beq.n	8001624 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 80015c0:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 80015c2:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015c4:	b2d1      	uxtb	r1, r2
{
 80015c6:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015c8:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 80015ca:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015cc:	4d16      	ldr	r5, [pc, #88]	; (8001628 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015ce:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 80015d0:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015d4:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015d8:	4d14      	ldr	r5, [pc, #80]	; (800162c <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 80015da:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015dc:	0909      	lsrs	r1, r1, #4
 80015de:	4c14      	ldr	r4, [pc, #80]	; (8001630 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 80015e0:	6010      	str	r0, [r2, #0]
 80015e2:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015e4:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 80015e6:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e8:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 80015ec:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ee:	bf88      	it	hi
 80015f0:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 80015f2:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f4:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 80015f6:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80015f8:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015fa:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 80015fc:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015fe:	65dd      	str	r5, [r3, #92]	; 0x5c
 8001600:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 8001602:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001604:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001610:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001614:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001618:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 800161c:	bc70      	pop	{r4, r5, r6}
 800161e:	4770      	bx	lr
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
 8001622:	4770      	bx	lr
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	aaaaaaab 	.word	0xaaaaaaab
 800162c:	080072e4 	.word	0x080072e4
 8001630:	fffffc00 	.word	0xfffffc00

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001638:	4688      	mov	r8, r1
 800163a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800163c:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001642:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800183c <HAL_GPIO_Init+0x208>
 8001646:	e003      	b.n	8001650 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001648:	3401      	adds	r4, #1
 800164a:	2c10      	cmp	r4, #16
 800164c:	f000 80b6 	beq.w	80017bc <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 8001650:	2301      	movs	r3, #1
 8001652:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001654:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 8001658:	4293      	cmp	r3, r2
 800165a:	d1f5      	bne.n	8001648 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001660:	0067      	lsls	r7, r4, #1
 8001662:	2103      	movs	r1, #3
 8001664:	f025 0c10 	bic.w	ip, r5, #16
 8001668:	40b9      	lsls	r1, r7
 800166a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800166e:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	2b01      	cmp	r3, #1
 8001672:	d810      	bhi.n	8001696 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8001674:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001676:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800167a:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 800167e:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001682:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001684:	40be      	lsls	r6, r7
 8001686:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800168a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800168c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800168e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001692:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001694:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001696:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001698:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800169c:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016a0:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016a4:	fa06 f607 	lsl.w	r6, r6, r7
 80016a8:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 80016ac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ae:	d115      	bne.n	80016dc <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80016b0:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016b2:	f004 0c07 	and.w	ip, r4, #7
 80016b6:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016ba:	f8d8 6010 	ldr.w	r6, [r8, #16]
 80016be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016c2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80016c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ca:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016ce:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016d2:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016d6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 80016da:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 80016dc:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016de:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016e2:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e4:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e6:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e8:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 80016ec:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ee:	d5ab      	bpl.n	8001648 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_GPIO_Init+0x1e0>)
 80016f2:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016f6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80016fc:	4619      	mov	r1, r3
 80016fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001702:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800170a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800170e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	644f      	str	r7, [r1, #68]	; 0x44
 8001712:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001714:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800171c:	9701      	str	r7, [sp, #4]
 800171e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001720:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001722:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001726:	4f3c      	ldr	r7, [pc, #240]	; (8001818 <HAL_GPIO_Init+0x1e4>)
 8001728:	42b8      	cmp	r0, r7
 800172a:	d020      	beq.n	800176e <HAL_GPIO_Init+0x13a>
 800172c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001730:	42b8      	cmp	r0, r7
 8001732:	d046      	beq.n	80017c2 <HAL_GPIO_Init+0x18e>
 8001734:	4f39      	ldr	r7, [pc, #228]	; (800181c <HAL_GPIO_Init+0x1e8>)
 8001736:	42b8      	cmp	r0, r7
 8001738:	d048      	beq.n	80017cc <HAL_GPIO_Init+0x198>
 800173a:	4f39      	ldr	r7, [pc, #228]	; (8001820 <HAL_GPIO_Init+0x1ec>)
 800173c:	42b8      	cmp	r0, r7
 800173e:	d04a      	beq.n	80017d6 <HAL_GPIO_Init+0x1a2>
 8001740:	4f38      	ldr	r7, [pc, #224]	; (8001824 <HAL_GPIO_Init+0x1f0>)
 8001742:	42b8      	cmp	r0, r7
 8001744:	d04c      	beq.n	80017e0 <HAL_GPIO_Init+0x1ac>
 8001746:	4f38      	ldr	r7, [pc, #224]	; (8001828 <HAL_GPIO_Init+0x1f4>)
 8001748:	42b8      	cmp	r0, r7
 800174a:	d053      	beq.n	80017f4 <HAL_GPIO_Init+0x1c0>
 800174c:	4f37      	ldr	r7, [pc, #220]	; (800182c <HAL_GPIO_Init+0x1f8>)
 800174e:	42b8      	cmp	r0, r7
 8001750:	d055      	beq.n	80017fe <HAL_GPIO_Init+0x1ca>
 8001752:	4f37      	ldr	r7, [pc, #220]	; (8001830 <HAL_GPIO_Init+0x1fc>)
 8001754:	42b8      	cmp	r0, r7
 8001756:	d048      	beq.n	80017ea <HAL_GPIO_Init+0x1b6>
 8001758:	4f36      	ldr	r7, [pc, #216]	; (8001834 <HAL_GPIO_Init+0x200>)
 800175a:	42b8      	cmp	r0, r7
 800175c:	d054      	beq.n	8001808 <HAL_GPIO_Init+0x1d4>
 800175e:	4f36      	ldr	r7, [pc, #216]	; (8001838 <HAL_GPIO_Init+0x204>)
 8001760:	42b8      	cmp	r0, r7
 8001762:	bf0c      	ite	eq
 8001764:	2709      	moveq	r7, #9
 8001766:	270a      	movne	r7, #10
 8001768:	fa07 f303 	lsl.w	r3, r7, r3
 800176c:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 800176e:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001770:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 8001772:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001776:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001778:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800177c:	bf54      	ite	pl
 800177e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001780:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001782:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8001784:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001788:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800178c:	bf54      	ite	pl
 800178e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001790:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001792:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8001794:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001798:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 800179c:	bf54      	ite	pl
 800179e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80017a0:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a2:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 80017a4:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 80017a8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	bf54      	ite	pl
 80017ae:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80017b0:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80017b2:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80017b4:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017b8:	f47f af4a 	bne.w	8001650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017bc:	b003      	add	sp, #12
 80017be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c2:	2701      	movs	r7, #1
 80017c4:	fa07 f303 	lsl.w	r3, r7, r3
 80017c8:	4319      	orrs	r1, r3
 80017ca:	e7d0      	b.n	800176e <HAL_GPIO_Init+0x13a>
 80017cc:	2702      	movs	r7, #2
 80017ce:	fa07 f303 	lsl.w	r3, r7, r3
 80017d2:	4319      	orrs	r1, r3
 80017d4:	e7cb      	b.n	800176e <HAL_GPIO_Init+0x13a>
 80017d6:	2703      	movs	r7, #3
 80017d8:	fa07 f303 	lsl.w	r3, r7, r3
 80017dc:	4319      	orrs	r1, r3
 80017de:	e7c6      	b.n	800176e <HAL_GPIO_Init+0x13a>
 80017e0:	2704      	movs	r7, #4
 80017e2:	fa07 f303 	lsl.w	r3, r7, r3
 80017e6:	4319      	orrs	r1, r3
 80017e8:	e7c1      	b.n	800176e <HAL_GPIO_Init+0x13a>
 80017ea:	2707      	movs	r7, #7
 80017ec:	fa07 f303 	lsl.w	r3, r7, r3
 80017f0:	4319      	orrs	r1, r3
 80017f2:	e7bc      	b.n	800176e <HAL_GPIO_Init+0x13a>
 80017f4:	2705      	movs	r7, #5
 80017f6:	fa07 f303 	lsl.w	r3, r7, r3
 80017fa:	4319      	orrs	r1, r3
 80017fc:	e7b7      	b.n	800176e <HAL_GPIO_Init+0x13a>
 80017fe:	2706      	movs	r7, #6
 8001800:	fa07 f303 	lsl.w	r3, r7, r3
 8001804:	4319      	orrs	r1, r3
 8001806:	e7b2      	b.n	800176e <HAL_GPIO_Init+0x13a>
 8001808:	2708      	movs	r7, #8
 800180a:	fa07 f303 	lsl.w	r3, r7, r3
 800180e:	4319      	orrs	r1, r3
 8001810:	e7ad      	b.n	800176e <HAL_GPIO_Init+0x13a>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020800 	.word	0x40020800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40021400 	.word	0x40021400
 800182c:	40021800 	.word	0x40021800
 8001830:	40021c00 	.word	0x40021c00
 8001834:	40022000 	.word	0x40022000
 8001838:	40022400 	.word	0x40022400
 800183c:	40013c00 	.word	0x40013c00

08001840 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001846:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800184a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	6411      	str	r1, [r2, #64]	; 0x40
{
 800184e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001852:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001858:	9201      	str	r2, [sp, #4]
 800185a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001862:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001864:	f7ff fd4e 	bl	8001304 <HAL_GetTick>
 8001868:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800186a:	e005      	b.n	8001878 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800186c:	f7ff fd4a 	bl	8001304 <HAL_GetTick>
 8001870:	1b40      	subs	r0, r0, r5
 8001872:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001876:	d817      	bhi.n	80018a8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	03da      	lsls	r2, r3, #15
 800187c:	d5f6      	bpl.n	800186c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800187e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001880:	4d0c      	ldr	r5, [pc, #48]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001886:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001888:	f7ff fd3c 	bl	8001304 <HAL_GetTick>
 800188c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800188e:	e005      	b.n	800189c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001890:	f7ff fd38 	bl	8001304 <HAL_GetTick>
 8001894:	1b00      	subs	r0, r0, r4
 8001896:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800189a:	d805      	bhi.n	80018a8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800189c:	686b      	ldr	r3, [r5, #4]
 800189e:	039b      	lsls	r3, r3, #14
 80018a0:	d5f6      	bpl.n	8001890 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80018a2:	2000      	movs	r0, #0
}
 80018a4:	b003      	add	sp, #12
 80018a6:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
}
 80018aa:	b003      	add	sp, #12
 80018ac:	bd30      	pop	{r4, r5, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b8:	2800      	cmp	r0, #0
 80018ba:	f000 814c 	beq.w	8001b56 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	6803      	ldr	r3, [r0, #0]
{
 80018c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c4:	07dd      	lsls	r5, r3, #31
{
 80018c6:	b082      	sub	sp, #8
 80018c8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	d535      	bpl.n	8001938 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018cc:	49ac      	ldr	r1, [pc, #688]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 80018ce:	688a      	ldr	r2, [r1, #8]
 80018d0:	f002 020c 	and.w	r2, r2, #12
 80018d4:	2a04      	cmp	r2, #4
 80018d6:	f000 80ff 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	688a      	ldr	r2, [r1, #8]
 80018dc:	f002 020c 	and.w	r2, r2, #12
 80018e0:	2a08      	cmp	r2, #8
 80018e2:	f000 80f5 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	6863      	ldr	r3, [r4, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d010      	beq.n	8001910 <HAL_RCC_OscConfig+0x58>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 811a 	beq.w	8001b28 <HAL_RCC_OscConfig+0x270>
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	4ba1      	ldr	r3, [pc, #644]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f000 8164 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x310>
 8001900:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e004      	b.n	800191a <HAL_RCC_OscConfig+0x62>
 8001910:	4a9b      	ldr	r2, [pc, #620]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff fcf3 	bl	8001304 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4d98      	ldr	r5, [pc, #608]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001920:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e005      	b.n	8001930 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fcee 	bl	8001304 <HAL_GetTick>
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	2864      	cmp	r0, #100	; 0x64
 800192c:	f200 80ef 	bhi.w	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	039a      	lsls	r2, r3, #14
 8001934:	d5f6      	bpl.n	8001924 <HAL_RCC_OscConfig+0x6c>
 8001936:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001938:	079f      	lsls	r7, r3, #30
 800193a:	d442      	bmi.n	80019c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193c:	071a      	lsls	r2, r3, #28
 800193e:	d517      	bpl.n	8001970 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001940:	6963      	ldr	r3, [r4, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80b1 	beq.w	8001aaa <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 800194a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001954:	f7ff fcd6 	bl	8001304 <HAL_GetTick>
 8001958:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	e005      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fcd2 	bl	8001304 <HAL_GetTick>
 8001960:	1b80      	subs	r0, r0, r6
 8001962:	2802      	cmp	r0, #2
 8001964:	f200 80d3 	bhi.w	8001b0e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001968:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800196a:	079b      	lsls	r3, r3, #30
 800196c:	d5f6      	bpl.n	800195c <HAL_RCC_OscConfig+0xa4>
 800196e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	075d      	lsls	r5, r3, #29
 8001972:	d56b      	bpl.n	8001a4c <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001974:	4b82      	ldr	r3, [pc, #520]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001978:	00d0      	lsls	r0, r2, #3
 800197a:	f100 80ee 	bmi.w	8001b5a <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001980:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x2cc>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	05d1      	lsls	r1, r2, #23
 8001998:	f140 80a8 	bpl.w	8001aec <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	68a3      	ldr	r3, [r4, #8]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d039      	beq.n	8001a16 <HAL_RCC_OscConfig+0x15e>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80db 	beq.w	8001b5e <HAL_RCC_OscConfig+0x2a6>
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 80019ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ae:	f000 8113 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x320>
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	671a      	str	r2, [r3, #112]	; 0x70
 80019b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	671a      	str	r2, [r3, #112]	; 0x70
 80019c0:	e02e      	b.n	8001a20 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c2:	4a6f      	ldr	r2, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 80019c4:	6891      	ldr	r1, [r2, #8]
 80019c6:	f011 0f0c 	tst.w	r1, #12
 80019ca:	d063      	beq.n	8001a94 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019cc:	6891      	ldr	r1, [r2, #8]
 80019ce:	f001 010c 	and.w	r1, r1, #12
 80019d2:	2908      	cmp	r1, #8
 80019d4:	d05b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019d6:	68e3      	ldr	r3, [r4, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80e1 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80019de:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 80019e0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ea:	f7ff fc8b 	bl	8001304 <HAL_GetTick>
 80019ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e005      	b.n	80019fe <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fc87 	bl	8001304 <HAL_GetTick>
 80019f6:	1b80      	subs	r0, r0, r6
 80019f8:	2802      	cmp	r0, #2
 80019fa:	f200 8088 	bhi.w	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	682b      	ldr	r3, [r5, #0]
 8001a00:	0798      	lsls	r0, r3, #30
 8001a02:	d5f6      	bpl.n	80019f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	6922      	ldr	r2, [r4, #16]
 8001a08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a10:	602b      	str	r3, [r5, #0]
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	e792      	b.n	800193c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001a18:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fc70 	bl	8001304 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	4e56      	ldr	r6, [pc, #344]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001a26:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	e005      	b.n	8001a3a <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fc69 	bl	8001304 <HAL_GetTick>
 8001a32:	eba0 0008 	sub.w	r0, r0, r8
 8001a36:	42b8      	cmp	r0, r7
 8001a38:	d869      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001a3c:	079b      	lsls	r3, r3, #30
 8001a3e:	d5f6      	bpl.n	8001a2e <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a40:	b125      	cbz	r5, 8001a4c <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001a44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4c:	69a0      	ldr	r0, [r4, #24]
 8001a4e:	b1d0      	cbz	r0, 8001a86 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	f002 020c 	and.w	r2, r2, #12
 8001a58:	2a08      	cmp	r2, #8
 8001a5a:	f000 80c5 	beq.w	8001be8 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5e:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a62:	f000 80eb 	beq.w	8001c3c <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fc49 	bl	8001304 <HAL_GetTick>
 8001a72:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a74:	e004      	b.n	8001a80 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff fc45 	bl	8001304 <HAL_GetTick>
 8001a7a:	1b40      	subs	r0, r0, r5
 8001a7c:	2802      	cmp	r0, #2
 8001a7e:	d846      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	019b      	lsls	r3, r3, #6
 8001a84:	d4f7      	bmi.n	8001a76 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001a86:	2000      	movs	r0, #0
}
 8001a88:	b002      	add	sp, #8
 8001a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	6852      	ldr	r2, [r2, #4]
 8001a90:	0256      	lsls	r6, r2, #9
 8001a92:	d4a0      	bmi.n	80019d6 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a94:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	0795      	lsls	r5, r2, #30
 8001a9a:	d53c      	bpl.n	8001b16 <HAL_RCC_OscConfig+0x25e>
 8001a9c:	68e2      	ldr	r2, [r4, #12]
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d039      	beq.n	8001b16 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
}
 8001aa4:	b002      	add	sp, #8
 8001aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001aac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fc25 	bl	8001304 <HAL_GetTick>
 8001aba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e004      	b.n	8001ac8 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff fc21 	bl	8001304 <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d822      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001aca:	079f      	lsls	r7, r3, #30
 8001acc:	d4f7      	bmi.n	8001abe <HAL_RCC_OscConfig+0x206>
 8001ace:	e74e      	b.n	800196e <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad0:	684a      	ldr	r2, [r1, #4]
 8001ad2:	0250      	lsls	r0, r2, #9
 8001ad4:	f57f af07 	bpl.w	80018e6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	0391      	lsls	r1, r2, #14
 8001ade:	f57f af2b 	bpl.w	8001938 <HAL_RCC_OscConfig+0x80>
 8001ae2:	6862      	ldr	r2, [r4, #4]
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	f47f af27 	bne.w	8001938 <HAL_RCC_OscConfig+0x80>
 8001aea:	e7da      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8001aec:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aee:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001af6:	f7ff fc05 	bl	8001304 <HAL_GetTick>
 8001afa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afc:	6833      	ldr	r3, [r6, #0]
 8001afe:	05da      	lsls	r2, r3, #23
 8001b00:	f53f af4c 	bmi.w	800199c <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b04:	f7ff fbfe 	bl	8001304 <HAL_GetTick>
 8001b08:	1bc0      	subs	r0, r0, r7
 8001b0a:	2864      	cmp	r0, #100	; 0x64
 8001b0c:	d9f6      	bls.n	8001afc <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 8001b0e:	2003      	movs	r0, #3
}
 8001b10:	b002      	add	sp, #8
 8001b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	491a      	ldr	r1, [pc, #104]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001b18:	6920      	ldr	r0, [r4, #16]
 8001b1a:	680a      	ldr	r2, [r1, #0]
 8001b1c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b20:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001b24:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e709      	b.n	800193c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2c:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fbe2 	bl	8001304 <HAL_GetTick>
 8001b40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e004      	b.n	8001b4e <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fbde 	bl	8001304 <HAL_GetTick>
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	2864      	cmp	r0, #100	; 0x64
 8001b4c:	d8df      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	039b      	lsls	r3, r3, #14
 8001b52:	d4f7      	bmi.n	8001b44 <HAL_RCC_OscConfig+0x28c>
 8001b54:	e6ef      	b.n	8001936 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8001b56:	2001      	movs	r0, #1
}
 8001b58:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	e719      	b.n	8001992 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b66:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8001b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b70:	f022 0204 	bic.w	r2, r2, #4
 8001b74:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b76:	f7ff fbc5 	bl	8001304 <HAL_GetTick>
 8001b7a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0x2da>
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff fbbc 	bl	8001304 <HAL_GetTick>
 8001b8c:	1bc0      	subs	r0, r0, r7
 8001b8e:	4540      	cmp	r0, r8
 8001b90:	d8bd      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001b94:	0798      	lsls	r0, r3, #30
 8001b96:	d4f7      	bmi.n	8001b88 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	f43f af57 	beq.w	8001a4c <HAL_RCC_OscConfig+0x194>
 8001b9e:	e750      	b.n	8001a42 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_OscConfig+0x3f0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba4:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bac:	f7ff fbaa 	bl	8001304 <HAL_GetTick>
 8001bb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e004      	b.n	8001bbe <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fba6 	bl	8001304 <HAL_GetTick>
 8001bb8:	1b80      	subs	r0, r0, r6
 8001bba:	2802      	cmp	r0, #2
 8001bbc:	d8a7      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	0799      	lsls	r1, r3, #30
 8001bc2:	d4f7      	bmi.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	e6b9      	b.n	800193c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e6a0      	b.n	800191a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	f042 0204 	orr.w	r2, r2, #4
 8001bdc:	671a      	str	r2, [r3, #112]	; 0x70
 8001bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	671a      	str	r2, [r3, #112]	; 0x70
 8001be6:	e71b      	b.n	8001a20 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be8:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001bea:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bec:	f43f af5a 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf4:	69e1      	ldr	r1, [r4, #28]
 8001bf6:	428b      	cmp	r3, r1
 8001bf8:	f47f af53 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bfc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c00:	6a21      	ldr	r1, [r4, #32]
 8001c02:	428b      	cmp	r3, r1
 8001c04:	f47f af4d 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c0e:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c10:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001c14:	f47f af45 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c1a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c22:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001c26:	f47f af3c 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c2c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c30:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8001c34:	bf14      	ite	ne
 8001c36:	2001      	movne	r0, #1
 8001c38:	2000      	moveq	r0, #0
 8001c3a:	e733      	b.n	8001aa4 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c40:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8001c42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb5e 	bl	8001304 <HAL_GetTick>
 8001c48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff fb5a 	bl	8001304 <HAL_GetTick>
 8001c50:	1b80      	subs	r0, r0, r6
 8001c52:	2802      	cmp	r0, #2
 8001c54:	f63f af5b 	bhi.w	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	0199      	lsls	r1, r3, #6
 8001c5c:	d4f6      	bmi.n	8001c4c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001c62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c64:	4313      	orrs	r3, r2
 8001c66:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001c6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4c0e      	ldr	r4, [pc, #56]	; (8001ca8 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c70:	0852      	lsrs	r2, r2, #1
 8001c72:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c76:	3a01      	subs	r2, #1
 8001c78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb3b 	bl	8001304 <HAL_GetTick>
 8001c8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	e005      	b.n	8001c9e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff fb37 	bl	8001304 <HAL_GetTick>
 8001c96:	1b40      	subs	r0, r0, r5
 8001c98:	2802      	cmp	r0, #2
 8001c9a:	f63f af38 	bhi.w	8001b0e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	019a      	lsls	r2, r3, #6
 8001ca2:	d5f6      	bpl.n	8001c92 <HAL_RCC_OscConfig+0x3da>
 8001ca4:	e6ef      	b.n	8001a86 <HAL_RCC_OscConfig+0x1ce>
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cac:	b178      	cbz	r0, 8001cce <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cae:	4a5e      	ldr	r2, [pc, #376]	; (8001e28 <HAL_RCC_ClockConfig+0x17c>)
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	428b      	cmp	r3, r1
 8001cb8:	d20b      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	f023 030f 	bic.w	r3, r3, #15
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	428b      	cmp	r3, r1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001cce:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8001cd0:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd2:	6803      	ldr	r3, [r0, #0]
{
 8001cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	079d      	lsls	r5, r3, #30
 8001cda:	d514      	bpl.n	8001d06 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	075c      	lsls	r4, r3, #29
 8001cde:	d504      	bpl.n	8001cea <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce0:	4c52      	ldr	r4, [pc, #328]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001ce2:	68a2      	ldr	r2, [r4, #8]
 8001ce4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ce8:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	071a      	lsls	r2, r3, #28
 8001cec:	d504      	bpl.n	8001cf8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cee:	4c4f      	ldr	r4, [pc, #316]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001cf0:	68a2      	ldr	r2, [r4, #8]
 8001cf2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001cf6:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4c4c      	ldr	r4, [pc, #304]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001cfa:	6885      	ldr	r5, [r0, #8]
 8001cfc:	68a2      	ldr	r2, [r4, #8]
 8001cfe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d02:	432a      	orrs	r2, r5
 8001d04:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	07df      	lsls	r7, r3, #31
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	d521      	bpl.n	8001d52 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	d063      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	2a02      	cmp	r2, #2
 8001d1a:	d079      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	0799      	lsls	r1, r3, #30
 8001d1e:	d528      	bpl.n	8001d72 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d20:	4942      	ldr	r1, [pc, #264]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d28:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d32:	f7ff fae7 	bl	8001304 <HAL_GetTick>
 8001d36:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d38:	e004      	b.n	8001d44 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3a:	f7ff fae3 	bl	8001304 <HAL_GetTick>
 8001d3e:	1bc0      	subs	r0, r0, r7
 8001d40:	4540      	cmp	r0, r8
 8001d42:	d863      	bhi.n	8001e0c <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d44:	68b3      	ldr	r3, [r6, #8]
 8001d46:	6862      	ldr	r2, [r4, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d50:	d1f3      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d52:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_RCC_ClockConfig+0x17c>)
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	42ab      	cmp	r3, r5
 8001d5c:	d90c      	bls.n	8001d78 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	f023 030f 	bic.w	r3, r3, #15
 8001d64:	432b      	orrs	r3, r5
 8001d66:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d68:	6813      	ldr	r3, [r2, #0]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	42ab      	cmp	r3, r5
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	075a      	lsls	r2, r3, #29
 8001d7c:	d506      	bpl.n	8001d8c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7e:	492b      	ldr	r1, [pc, #172]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	688a      	ldr	r2, [r1, #8]
 8001d84:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001d88:	4302      	orrs	r2, r0
 8001d8a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	071b      	lsls	r3, r3, #28
 8001d8e:	d507      	bpl.n	8001da0 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001d92:	6921      	ldr	r1, [r4, #16]
 8001d94:	6893      	ldr	r3, [r2, #8]
 8001d96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d9e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da0:	4922      	ldr	r1, [pc, #136]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001da2:	688b      	ldr	r3, [r1, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d01c      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d12b      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db0:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001db2:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db8:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001dba:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001dbe:	d12a      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001dc2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001dc6:	fba1 0100 	umull	r0, r1, r1, r0
 8001dca:	f7fe fb5d 	bl	8000488 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	e003      	b.n	8001de8 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de0:	039e      	lsls	r6, r3, #14
 8001de2:	d49d      	bmi.n	8001d20 <HAL_RCC_ClockConfig+0x74>
 8001de4:	e7c5      	b.n	8001d72 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de8:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_RCC_ClockConfig+0x180>)
 8001dea:	4c13      	ldr	r4, [pc, #76]	; (8001e38 <HAL_RCC_ClockConfig+0x18c>)
 8001dec:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001dee:	4813      	ldr	r0, [pc, #76]	; (8001e3c <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001df4:	4912      	ldr	r1, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8001df6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df8:	5ca2      	ldrb	r2, [r4, r2]
 8001dfa:	40d3      	lsrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001dfe:	f000 f8e9 	bl	8001fd4 <HAL_InitTick>
  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
}
 8001e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001e0a:	e7ed      	b.n	8001de8 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	e7b1      	b.n	8001d74 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	0198      	lsls	r0, r3, #6
 8001e12:	d485      	bmi.n	8001d20 <HAL_RCC_ClockConfig+0x74>
 8001e14:	e7ad      	b.n	8001d72 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001e18:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	fba1 0100 	umull	r0, r1, r1, r0
 8001e22:	f7fe fb31 	bl	8000488 <__aeabi_uldivmod>
 8001e26:	e7d2      	b.n	8001dce <HAL_RCC_ClockConfig+0x122>
 8001e28:	40023c00 	.word	0x40023c00
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	017d7840 	.word	0x017d7840
 8001e38:	08007300 	.word	0x08007300
 8001e3c:	2000012c 	.word	0x2000012c
 8001e40:	20000130 	.word	0x20000130

08001e44 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001e46:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e48:	688b      	ldr	r3, [r1, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d01b      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x46>
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d117      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e56:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e58:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e60:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001e64:	d113      	bne.n	8001e8e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e68:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e6c:	fba1 0100 	umull	r0, r1, r1, r0
 8001e70:	f7fe fb0a 	bl	8000488 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001e80:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e84:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001e88:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001e8c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8e:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e90:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e94:	2300      	movs	r3, #0
 8001e96:	fba1 0100 	umull	r0, r1, r1, r0
 8001e9a:	f7fe faf5 	bl	8000488 <__aeabi_uldivmod>
 8001e9e:	e7e9      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x30>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	017d7840 	.word	0x017d7840

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001eb2:	4905      	ldr	r1, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001eb8:	6808      	ldr	r0, [r1, #0]
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ebc:	40d8      	lsrs	r0, r3
 8001ebe:	4770      	bx	lr
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08007310 	.word	0x08007310
 8001ec8:	20000130 	.word	0x20000130

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001ed2:	4905      	ldr	r1, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ed8:	6808      	ldr	r0, [r1, #0]
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
}
 8001edc:	40d8      	lsrs	r0, r3
 8001ede:	4770      	bx	lr
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08007310 	.word	0x08007310
 8001ee8:	20000130 	.word	0x20000130

08001eec <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eee:	220f      	movs	r2, #15
 8001ef0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001f00:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001f08:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	08db      	lsrs	r3, r3, #3
{
 8001f0e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f10:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f14:	4c05      	ldr	r4, [pc, #20]	; (8001f2c <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f16:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f18:	6823      	ldr	r3, [r4, #0]
}
 8001f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	600b      	str	r3, [r1, #0]
}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8001f34:	b1e8      	cbz	r0, 8001f72 <HAL_SDRAM_Init+0x3e>
{   
 8001f36:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001f38:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f44:	b183      	cbz	r3, 8001f68 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f46:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001f48:	1d21      	adds	r1, r4, #4
 8001f4a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001f50:	f000 fad6 	bl	8002500 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001f54:	4629      	mov	r1, r5
 8001f56:	e9d4 0200 	ldrd	r0, r2, [r4]
 8001f5a:	f000 fb0f 	bl	800257c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001f5e:	2301      	movs	r3, #1
  return HAL_OK;
 8001f60:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001f62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8001f68:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8001f6c:	f7ff ffe0 	bl	8001f30 <HAL_SDRAM_MspInit>
 8001f70:	e7e9      	b.n	8001f46 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001f7a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d010      	beq.n	8001fa6 <HAL_SDRAM_SendCommand+0x2e>
 8001f84:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001f8a:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001f90:	f000 fb46 	bl	8002620 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001f94:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8001f96:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001f98:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8001fa6:	4618      	mov	r0, r3
}
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
 8001faa:	bf00      	nop

08001fac <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001fac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001fb6:	2302      	movs	r3, #2
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001fbc:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001fbe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001fc2:	f000 fb43 	bl	800264c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8001fc8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001fca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001fce:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001fd0:	4618      	mov	r0, r3
}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001fd4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001fd6:	4601      	mov	r1, r0
{
 8001fd8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2036      	movs	r0, #54	; 0x36
 8001fde:	f7ff f9bd 	bl	800135c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fe2:	2036      	movs	r0, #54	; 0x36
 8001fe4:	f7ff f9f0 	bl	80013c8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fea:	a901      	add	r1, sp, #4
 8001fec:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff0:	f042 0210 	orr.w	r2, r2, #16
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002000:	f7ff ff74 	bl	8001eec <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8002004:	9b06      	ldr	r3, [sp, #24]
 8002006:	b9c3      	cbnz	r3, 800203a <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002008:	f7ff ff50 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800200e:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 8002010:	4c10      	ldr	r4, [pc, #64]	; (8002054 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8002012:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002016:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 800201a:	490f      	ldr	r1, [pc, #60]	; (8002058 <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800201c:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800201e:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002020:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 8002022:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 8002024:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002026:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002028:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202a:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800202c:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800202e:	f000 fb25 	bl	800267c <HAL_TIM_Base_Init>
 8002032:	b130      	cbz	r0, 8002042 <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002034:	2001      	movs	r0, #1
}
 8002036:	b009      	add	sp, #36	; 0x24
 8002038:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800203a:	f7ff ff37 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 800203e:	0040      	lsls	r0, r0, #1
 8002040:	e7e4      	b.n	800200c <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8002042:	4620      	mov	r0, r4
 8002044:	f000 fb9e 	bl	8002784 <HAL_TIM_Base_Start_IT>
}
 8002048:	b009      	add	sp, #36	; 0x24
 800204a:	bd30      	pop	{r4, r5, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	431bde83 	.word	0x431bde83
 8002054:	200006ec 	.word	0x200006ec
 8002058:	40001000 	.word	0x40001000

0800205c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 800205c:	f7ff b946 	b.w	80012ec <HAL_IncTick>

08002060 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <TIM6_DAC_IRQHandler+0x8>)
 8002062:	f000 bbad 	b.w	80027c0 <HAL_TIM_IRQHandler>
 8002066:	bf00      	nop
 8002068:	200006ec 	.word	0x200006ec

0800206c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800206c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800206e:	07da      	lsls	r2, r3, #31
{
 8002070:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002072:	d506      	bpl.n	8002082 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002074:	6801      	ldr	r1, [r0, #0]
 8002076:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002078:	684a      	ldr	r2, [r1, #4]
 800207a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800207e:	4322      	orrs	r2, r4
 8002080:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002082:	079c      	lsls	r4, r3, #30
 8002084:	d506      	bpl.n	8002094 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002086:	6801      	ldr	r1, [r0, #0]
 8002088:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800208a:	684a      	ldr	r2, [r1, #4]
 800208c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002090:	4322      	orrs	r2, r4
 8002092:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002094:	0759      	lsls	r1, r3, #29
 8002096:	d506      	bpl.n	80020a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002098:	6801      	ldr	r1, [r0, #0]
 800209a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800209c:	684a      	ldr	r2, [r1, #4]
 800209e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a2:	4322      	orrs	r2, r4
 80020a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020a6:	071a      	lsls	r2, r3, #28
 80020a8:	d506      	bpl.n	80020b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020aa:	6801      	ldr	r1, [r0, #0]
 80020ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80020ae:	684a      	ldr	r2, [r1, #4]
 80020b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b4:	4322      	orrs	r2, r4
 80020b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020b8:	06dc      	lsls	r4, r3, #27
 80020ba:	d506      	bpl.n	80020ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020bc:	6801      	ldr	r1, [r0, #0]
 80020be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80020c0:	688a      	ldr	r2, [r1, #8]
 80020c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020c6:	4322      	orrs	r2, r4
 80020c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ca:	0699      	lsls	r1, r3, #26
 80020cc:	d506      	bpl.n	80020dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020ce:	6801      	ldr	r1, [r0, #0]
 80020d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80020d2:	688a      	ldr	r2, [r1, #8]
 80020d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d8:	4322      	orrs	r2, r4
 80020da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020dc:	065a      	lsls	r2, r3, #25
 80020de:	d50a      	bpl.n	80020f6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020e0:	6801      	ldr	r1, [r0, #0]
 80020e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80020e4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020e6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020ea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80020ee:	ea42 0204 	orr.w	r2, r2, r4
 80020f2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020f4:	d00b      	beq.n	800210e <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	d506      	bpl.n	8002108 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020fa:	6802      	ldr	r2, [r0, #0]
 80020fc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020fe:	6853      	ldr	r3, [r2, #4]
 8002100:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002104:	430b      	orrs	r3, r1
 8002106:	6053      	str	r3, [r2, #4]
  }
}
 8002108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800210c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800210e:	684a      	ldr	r2, [r1, #4]
 8002110:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002112:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002116:	4322      	orrs	r2, r4
 8002118:	604a      	str	r2, [r1, #4]
 800211a:	e7ec      	b.n	80020f6 <UART_AdvFeatureConfig+0x8a>

0800211c <HAL_UART_Init>:
  if (huart == NULL)
 800211c:	2800      	cmp	r0, #0
 800211e:	d04f      	beq.n	80021c0 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002120:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002122:	b570      	push	{r4, r5, r6, lr}
 8002124:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002126:	2b00      	cmp	r3, #0
 8002128:	d045      	beq.n	80021b6 <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 800212a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800212c:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800212e:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002130:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002132:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002134:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002136:	4302      	orrs	r2, r0
 8002138:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800213a:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800213e:	4dbc      	ldr	r5, [pc, #752]	; (8002430 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002140:	4302      	orrs	r2, r0
 8002142:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8002144:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002146:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002148:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800214a:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800214c:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800214e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002150:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8002152:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002154:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 8002156:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215a:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800215c:	4db5      	ldr	r5, [pc, #724]	; (8002434 <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002162:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002164:	ea41 0106 	orr.w	r1, r1, r6
 8002168:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002170:	ea42 0201 	orr.w	r2, r2, r1
 8002174:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002176:	d025      	beq.n	80021c4 <HAL_UART_Init+0xa8>
 8002178:	4aaf      	ldr	r2, [pc, #700]	; (8002438 <HAL_UART_Init+0x31c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d044      	beq.n	8002208 <HAL_UART_Init+0xec>
 800217e:	4aaf      	ldr	r2, [pc, #700]	; (800243c <HAL_UART_Init+0x320>)
 8002180:	4293      	cmp	r3, r2
 8002182:	f000 80f3 	beq.w	800236c <HAL_UART_Init+0x250>
 8002186:	4aae      	ldr	r2, [pc, #696]	; (8002440 <HAL_UART_Init+0x324>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d045      	beq.n	8002218 <HAL_UART_Init+0xfc>
 800218c:	4aad      	ldr	r2, [pc, #692]	; (8002444 <HAL_UART_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	f000 80d8 	beq.w	8002344 <HAL_UART_Init+0x228>
 8002194:	4aac      	ldr	r2, [pc, #688]	; (8002448 <HAL_UART_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f000 8188 	beq.w	80024ac <HAL_UART_Init+0x390>
 800219c:	4aab      	ldr	r2, [pc, #684]	; (800244c <HAL_UART_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	f000 8198 	beq.w	80024d4 <HAL_UART_Init+0x3b8>
 80021a4:	4aaa      	ldr	r2, [pc, #680]	; (8002450 <HAL_UART_Init+0x334>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	f000 815e 	beq.w	8002468 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 80021ac:	2300      	movs	r3, #0
    return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80021b0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80021b6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80021ba:	f7fe fb45 	bl	8000848 <HAL_UART_MspInit>
 80021be:	e7b4      	b.n	800212a <HAL_UART_Init+0xe>
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
}
 80021c2:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021c4:	4ba3      	ldr	r3, [pc, #652]	; (8002454 <HAL_UART_Init+0x338>)
 80021c6:	4aa4      	ldr	r2, [pc, #656]	; (8002458 <HAL_UART_Init+0x33c>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80021d6:	d02f      	beq.n	8002238 <HAL_UART_Init+0x11c>
    switch (clocksource)
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d8e7      	bhi.n	80021ac <HAL_UART_Init+0x90>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_UART_Init+0xc8>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	08002333 	.word	0x08002333
 80021e8:	08002275 	.word	0x08002275
 80021ec:	08002387 	.word	0x08002387
 80021f0:	080021ad 	.word	0x080021ad
 80021f4:	0800235b 	.word	0x0800235b
 80021f8:	080021ad 	.word	0x080021ad
 80021fc:	080021ad 	.word	0x080021ad
 8002200:	080021ad 	.word	0x080021ad
 8002204:	08002397 	.word	0x08002397
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002208:	4b92      	ldr	r3, [pc, #584]	; (8002454 <HAL_UART_Init+0x338>)
 800220a:	4a94      	ldr	r2, [pc, #592]	; (800245c <HAL_UART_Init+0x340>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	e7dc      	b.n	80021d2 <HAL_UART_Init+0xb6>
 8002218:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <HAL_UART_Init+0x338>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	f000 8096 	beq.w	8002354 <HAL_UART_Init+0x238>
 8002228:	d97d      	bls.n	8002326 <HAL_UART_Init+0x20a>
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	f000 80a8 	beq.w	8002380 <HAL_UART_Init+0x264>
 8002230:	2bc0      	cmp	r3, #192	; 0xc0
 8002232:	f000 80c5 	beq.w	80023c0 <HAL_UART_Init+0x2a4>
 8002236:	e7b9      	b.n	80021ac <HAL_UART_Init+0x90>
    switch (clocksource)
 8002238:	2b08      	cmp	r3, #8
 800223a:	d8b7      	bhi.n	80021ac <HAL_UART_Init+0x90>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <HAL_UART_Init+0x128>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002429 	.word	0x08002429
 8002248:	080023ff 	.word	0x080023ff
 800224c:	08002419 	.word	0x08002419
 8002250:	080021ad 	.word	0x080021ad
 8002254:	08002413 	.word	0x08002413
 8002258:	080021ad 	.word	0x080021ad
 800225c:	080021ad 	.word	0x080021ad
 8002260:	080021ad 	.word	0x080021ad
 8002264:	080023c7 	.word	0x080023c7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002268:	2b00      	cmp	r3, #0
 800226a:	d19f      	bne.n	80021ac <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002270:	f000 80c5 	beq.w	80023fe <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002274:	f7ff fe2a 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002278:	6863      	ldr	r3, [r4, #4]
 800227a:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800227e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002282:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002284:	f1a2 0110 	sub.w	r1, r2, #16
 8002288:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800228c:	4299      	cmp	r1, r3
 800228e:	d88d      	bhi.n	80021ac <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 8002290:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8002292:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8002294:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8002296:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800229a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800229c:	2a00      	cmp	r2, #0
 800229e:	f040 8082 	bne.w	80023a6 <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a2:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a4:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022bc:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80022be:	f7ff f821 	bl	8001304 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022c2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80022c4:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	0710      	lsls	r0, r2, #28
 80022ca:	d407      	bmi.n	80022dc <HAL_UART_Init+0x1c0>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022cc:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 80022ce:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80022d0:	6762      	str	r2, [r4, #116]	; 0x74

  return HAL_OK;
 80022d2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80022d4:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80022d6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 80022da:	bd70      	pop	{r4, r5, r6, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022dc:	69dd      	ldr	r5, [r3, #28]
 80022de:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80022e2:	d1f3      	bne.n	80022cc <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e4:	f7ff f80e 	bl	8001304 <HAL_GetTick>
 80022e8:	1b80      	subs	r0, r0, r6
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ea:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80022f0:	f080 80cd 	bcs.w	800248e <HAL_UART_Init+0x372>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	0751      	lsls	r1, r2, #29
 80022f8:	d5f0      	bpl.n	80022dc <HAL_UART_Init+0x1c0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	0512      	lsls	r2, r2, #20
 80022fe:	d5ed      	bpl.n	80022dc <HAL_UART_Init+0x1c0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002300:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8002304:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002306:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002308:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8002310:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	f021 0101 	bic.w	r1, r1, #1
 8002318:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800231a:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800231c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8002320:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002322:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8002324:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f af40 	bne.w	80021ac <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800232c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002330:	d07a      	beq.n	8002428 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002332:	f7ff fdbb 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002336:	6863      	ldr	r3, [r4, #4]
 8002338:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800233c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002340:	b292      	uxth	r2, r2
 8002342:	e79f      	b.n	8002284 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_UART_Init+0x338>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002352:	d12d      	bne.n	80023b0 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002354:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002358:	d05b      	beq.n	8002412 <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 800235a:	f7ff fd73 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800235e:	6863      	ldr	r3, [r4, #4]
 8002360:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8002364:	fbb2 f2f3 	udiv	r2, r2, r3
 8002368:	b292      	uxth	r2, r2
 800236a:	e78b      	b.n	8002284 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_UART_Init+0x338>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002376:	2b10      	cmp	r3, #16
 8002378:	d0ec      	beq.n	8002354 <HAL_UART_Init+0x238>
 800237a:	d9d4      	bls.n	8002326 <HAL_UART_Init+0x20a>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d13b      	bne.n	80023f8 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002380:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002384:	d048      	beq.n	8002418 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002386:	6863      	ldr	r3, [r4, #4]
 8002388:	4a35      	ldr	r2, [pc, #212]	; (8002460 <HAL_UART_Init+0x344>)
 800238a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800238e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002392:	b292      	uxth	r2, r2
 8002394:	e776      	b.n	8002284 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002396:	6863      	ldr	r3, [r4, #4]
 8002398:	085a      	lsrs	r2, r3, #1
 800239a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800239e:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a2:	b292      	uxth	r2, r2
 80023a4:	e76e      	b.n	8002284 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7ff fe60 	bl	800206c <UART_AdvFeatureConfig>
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	e778      	b.n	80022a2 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023b0:	d9b9      	bls.n	8002326 <HAL_UART_Init+0x20a>
 80023b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b6:	d0e3      	beq.n	8002380 <HAL_UART_Init+0x264>
 80023b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023bc:	f47f aef6 	bne.w	80021ac <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80023c4:	d1e7      	bne.n	8002396 <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023c6:	6862      	ldr	r2, [r4, #4]
 80023c8:	0853      	lsrs	r3, r2, #1
 80023ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d2:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023d4:	f1a3 0110 	sub.w	r1, r3, #16
 80023d8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80023dc:	4291      	cmp	r1, r2
 80023de:	f63f aee5 	bhi.w	80021ac <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023e2:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e6:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 80023ea:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 80023f2:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 80023f6:	e750      	b.n	800229a <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d0e1      	beq.n	80023c0 <HAL_UART_Init+0x2a4>
 80023fc:	e6d6      	b.n	80021ac <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 80023fe:	f7ff fd65 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002402:	6862      	ldr	r2, [r4, #4]
 8002404:	0853      	lsrs	r3, r2, #1
 8002406:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800240a:	fbb3 f3f2 	udiv	r3, r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	e7e0      	b.n	80023d4 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002412:	f7ff fd17 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8002416:	e7f4      	b.n	8002402 <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002418:	6862      	ldr	r2, [r4, #4]
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_UART_Init+0x348>)
 800241c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002420:	fbb3 f3f2 	udiv	r3, r3, r2
 8002424:	b29b      	uxth	r3, r3
 8002426:	e7d5      	b.n	80023d4 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002428:	f7ff fd40 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 800242c:	e7e9      	b.n	8002402 <HAL_UART_Init+0x2e6>
 800242e:	bf00      	nop
 8002430:	efff69f3 	.word	0xefff69f3
 8002434:	40011000 	.word	0x40011000
 8002438:	40004400 	.word	0x40004400
 800243c:	40004800 	.word	0x40004800
 8002440:	40004c00 	.word	0x40004c00
 8002444:	40005000 	.word	0x40005000
 8002448:	40011400 	.word	0x40011400
 800244c:	40007800 	.word	0x40007800
 8002450:	40007c00 	.word	0x40007c00
 8002454:	40023800 	.word	0x40023800
 8002458:	080072ec 	.word	0x080072ec
 800245c:	080072f0 	.word	0x080072f0
 8002460:	00f42400 	.word	0x00f42400
 8002464:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_UART_Init+0x3e0>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002476:	f43f af6d 	beq.w	8002354 <HAL_UART_Init+0x238>
 800247a:	f67f af54 	bls.w	8002326 <HAL_UART_Init+0x20a>
 800247e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002482:	f43f af7d 	beq.w	8002380 <HAL_UART_Init+0x264>
 8002486:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800248a:	d099      	beq.n	80023c0 <HAL_UART_Init+0x2a4>
 800248c:	e68e      	b.n	80021ac <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800248e:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8002490:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8002492:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002498:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80024a2:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80024a4:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80024a8:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_UART_Init+0x3e0>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	f43f af4b 	beq.w	8002354 <HAL_UART_Init+0x238>
 80024be:	f67f aed3 	bls.w	8002268 <HAL_UART_Init+0x14c>
 80024c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024c6:	f43f af5b 	beq.w	8002380 <HAL_UART_Init+0x264>
 80024ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024ce:	f43f af77 	beq.w	80023c0 <HAL_UART_Init+0x2a4>
 80024d2:	e66b      	b.n	80021ac <HAL_UART_Init+0x90>
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_UART_Init+0x3e0>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	f43f af37 	beq.w	8002354 <HAL_UART_Init+0x238>
 80024e6:	f67f af1e 	bls.w	8002326 <HAL_UART_Init+0x20a>
 80024ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ee:	f43f af47 	beq.w	8002380 <HAL_UART_Init+0x264>
 80024f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024f6:	f43f af63 	beq.w	80023c0 <HAL_UART_Init+0x2a4>
 80024fa:	e657      	b.n	80021ac <HAL_UART_Init+0x90>
 80024fc:	40023800 	.word	0x40023800

08002500 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002504:	680f      	ldr	r7, [r1, #0]
 8002506:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800250a:	2f01      	cmp	r7, #1
 800250c:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8002510:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 8002514:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8002518:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 800251c:	d012      	beq.n	8002544 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800251e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002520:	4f15      	ldr	r7, [pc, #84]	; (8002578 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002522:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002524:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002528:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800252a:	4322      	orrs	r2, r4
 800252c:	ea42 0308 	orr.w	r3, r2, r8
 8002530:	ea43 030c 	orr.w	r3, r3, ip
 8002534:	4333      	orrs	r3, r6
 8002536:	432b      	orrs	r3, r5
 8002538:	430b      	orrs	r3, r1
 800253a:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800253c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800253e:	2000      	movs	r0, #0
 8002540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002544:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002548:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800254a:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800254c:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002550:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002554:	4c08      	ldr	r4, [pc, #32]	; (8002578 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002556:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800255a:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800255c:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002560:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002564:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002566:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002568:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800256a:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800256c:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800256e:	6043      	str	r3, [r0, #4]
}
 8002570:	2000      	movs	r0, #0
 8002572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002576:	bf00      	nop
 8002578:	ffff8000 	.word	0xffff8000

0800257c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002580:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002582:	2a01      	cmp	r2, #1
 8002584:	68cf      	ldr	r7, [r1, #12]
 8002586:	694e      	ldr	r6, [r1, #20]
 8002588:	f103 33ff 	add.w	r3, r3, #4294967295
 800258c:	684d      	ldr	r5, [r1, #4]
 800258e:	f107 37ff 	add.w	r7, r7, #4294967295
 8002592:	688c      	ldr	r4, [r1, #8]
 8002594:	f106 36ff 	add.w	r6, r6, #4294967295
 8002598:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800259c:	f105 35ff 	add.w	r5, r5, #4294967295
 80025a0:	6809      	ldr	r1, [r1, #0]
 80025a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80025a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80025aa:	ea4f 3707 	mov.w	r7, r7, lsl #12
 80025ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80025b2:	ea4f 5606 	mov.w	r6, r6, lsl #20
 80025b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80025ba:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80025be:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80025c2:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 80025c6:	d012      	beq.n	80025ee <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80025c8:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80025cc:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80025ce:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80025d2:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80025d6:	ea42 0305 	orr.w	r3, r2, r5
 80025da:	430b      	orrs	r3, r1
 80025dc:	ea43 030e 	orr.w	r3, r3, lr
 80025e0:	ea43 030c 	orr.w	r3, r3, ip
 80025e4:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80025e6:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80025e8:	2000      	movs	r0, #0
 80025ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80025ee:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80025f0:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80025f4:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80025f6:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80025fa:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80025fc:	4e07      	ldr	r6, [pc, #28]	; (800261c <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80025fe:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002602:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002606:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002608:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800260c:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800260e:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002610:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002612:	60c3      	str	r3, [r0, #12]
}
 8002614:	2000      	movs	r0, #0
 8002616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800261a:	bf00      	nop
 800261c:	ff0f0fff 	.word	0xff0f0fff

08002620 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002620:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 8002622:	2200      	movs	r2, #0
{
 8002624:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002626:	684d      	ldr	r5, [r1, #4]
{
 8002628:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800262a:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800262c:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 800262e:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002630:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8002632:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002636:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800263a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800263c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002640:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 8002642:	9b01      	ldr	r3, [sp, #4]
 8002644:	6123      	str	r3, [r4, #16]
}
 8002646:	b002      	add	sp, #8
 8002648:	bc30      	pop	{r4, r5}
 800264a:	4770      	bx	lr

0800264c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800264c:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 800264e:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8002650:	6953      	ldr	r3, [r2, #20]
 8002652:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002656:	6151      	str	r1, [r2, #20]
}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800265e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002662:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002666:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800266a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800266e:	6099      	str	r1, [r3, #8]
#endif
}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800267c:	2800      	cmp	r0, #0
 800267e:	d065      	beq.n	800274c <HAL_TIM_Base_Init+0xd0>
{
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002686:	4604      	mov	r4, r0
 8002688:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03b      	beq.n	8002708 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002692:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002694:	4e36      	ldr	r6, [pc, #216]	; (8002770 <HAL_TIM_Base_Init+0xf4>)
 8002696:	4f37      	ldr	r7, [pc, #220]	; (8002774 <HAL_TIM_Base_Init+0xf8>)
 8002698:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800269c:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80026a4:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80026a8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026aa:	fab6 f686 	clz	r6, r6
 80026ae:	fab7 f787 	clz	r7, r7
 80026b2:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80026b6:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80026ba:	d02a      	beq.n	8002712 <HAL_TIM_Base_Init+0x96>
 80026bc:	bb4e      	cbnz	r6, 8002712 <HAL_TIM_Base_Init+0x96>
 80026be:	492e      	ldr	r1, [pc, #184]	; (8002778 <HAL_TIM_Base_Init+0xfc>)
 80026c0:	428a      	cmp	r2, r1
 80026c2:	d045      	beq.n	8002750 <HAL_TIM_Base_Init+0xd4>
 80026c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80026c8:	428a      	cmp	r2, r1
 80026ca:	d041      	beq.n	8002750 <HAL_TIM_Base_Init+0xd4>
 80026cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80026d0:	428a      	cmp	r2, r1
 80026d2:	d042      	beq.n	800275a <HAL_TIM_Base_Init+0xde>
 80026d4:	2f00      	cmp	r7, #0
 80026d6:	d140      	bne.n	800275a <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d8:	4928      	ldr	r1, [pc, #160]	; (800277c <HAL_TIM_Base_Init+0x100>)
 80026da:	428a      	cmp	r2, r1
 80026dc:	d01e      	beq.n	800271c <HAL_TIM_Base_Init+0xa0>
 80026de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80026e2:	428a      	cmp	r2, r1
 80026e4:	d01a      	beq.n	800271c <HAL_TIM_Base_Init+0xa0>
 80026e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80026ea:	428a      	cmp	r2, r1
 80026ec:	d016      	beq.n	800271c <HAL_TIM_Base_Init+0xa0>
 80026ee:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80026f2:	428a      	cmp	r2, r1
 80026f4:	d012      	beq.n	800271c <HAL_TIM_Base_Init+0xa0>
 80026f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80026fa:	428a      	cmp	r2, r1
 80026fc:	d00e      	beq.n	800271c <HAL_TIM_Base_Init+0xa0>
 80026fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002702:	428a      	cmp	r2, r1
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_Init+0xa8>
 8002706:	e009      	b.n	800271c <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002708:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800270c:	f7ff ffb4 	bl	8002678 <HAL_TIM_Base_MspInit>
 8002710:	e7be      	b.n	8002690 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002712:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002716:	68a0      	ldr	r0, [r4, #8]
 8002718:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002720:	6920      	ldr	r0, [r4, #16]
 8002722:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002724:	69a1      	ldr	r1, [r4, #24]
 8002726:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800272e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002730:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002732:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002734:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002736:	b936      	cbnz	r6, 8002746 <HAL_TIM_Base_Init+0xca>
 8002738:	b92f      	cbnz	r7, 8002746 <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273a:	2301      	movs	r3, #1
  return HAL_OK;
 800273c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800273e:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8002740:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8002746:	6963      	ldr	r3, [r4, #20]
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	e7f6      	b.n	800273a <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
}
 800274e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002754:	68a1      	ldr	r1, [r4, #8]
 8002756:	430b      	orrs	r3, r1
 8002758:	e7e0      	b.n	800271c <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	4909      	ldr	r1, [pc, #36]	; (8002780 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002760:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8002764:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002768:	d0d8      	beq.n	800271c <HAL_TIM_Base_Init+0xa0>
 800276a:	2f00      	cmp	r7, #0
 800276c:	d1d6      	bne.n	800271c <HAL_TIM_Base_Init+0xa0>
 800276e:	e7b3      	b.n	80026d8 <HAL_TIM_Base_Init+0x5c>
 8002770:	40010000 	.word	0x40010000
 8002774:	40010400 	.word	0x40010400
 8002778:	40000400 	.word	0x40000400
 800277c:	40014000 	.word	0x40014000
 8002780:	40000c00 	.word	0x40000c00

08002784 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	68d9      	ldr	r1, [r3, #12]
 800278a:	f041 0101 	orr.w	r1, r1, #1
 800278e:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002794:	2a06      	cmp	r2, #6
 8002796:	d006      	beq.n	80027a6 <HAL_TIM_Base_Start_IT+0x22>
 8002798:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	2000      	movs	r0, #0
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	00010007 	.word	0x00010007

080027b0 <HAL_TIM_OC_DelayElapsedCallback>:
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <HAL_TIM_IC_CaptureCallback>:
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop

080027bc <HAL_TIM_TriggerCallback>:
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	0791      	lsls	r1, r2, #30
{
 80027c6:	b510      	push	{r4, lr}
 80027c8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ca:	d502      	bpl.n	80027d2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	0792      	lsls	r2, r2, #30
 80027d0:	d468      	bmi.n	80028a4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	0752      	lsls	r2, r2, #29
 80027d6:	d502      	bpl.n	80027de <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	0750      	lsls	r0, r2, #29
 80027dc:	d44f      	bmi.n	800287e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	0711      	lsls	r1, r2, #28
 80027e2:	d502      	bpl.n	80027ea <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	0712      	lsls	r2, r2, #28
 80027e8:	d437      	bmi.n	800285a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	06d0      	lsls	r0, r2, #27
 80027ee:	d502      	bpl.n	80027f6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	06d1      	lsls	r1, r2, #27
 80027f4:	d41e      	bmi.n	8002834 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	07d2      	lsls	r2, r2, #31
 80027fa:	d502      	bpl.n	8002802 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	07d0      	lsls	r0, r2, #31
 8002800:	d469      	bmi.n	80028d6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	0611      	lsls	r1, r2, #24
 8002806:	d502      	bpl.n	800280e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	0612      	lsls	r2, r2, #24
 800280c:	d46b      	bmi.n	80028e6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	05d0      	lsls	r0, r2, #23
 8002812:	d502      	bpl.n	800281a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	0611      	lsls	r1, r2, #24
 8002818:	d46d      	bmi.n	80028f6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	0652      	lsls	r2, r2, #25
 800281e:	d502      	bpl.n	8002826 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	0650      	lsls	r0, r2, #25
 8002824:	d46f      	bmi.n	8002906 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	0691      	lsls	r1, r2, #26
 800282a:	d502      	bpl.n	8002832 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	0692      	lsls	r2, r2, #26
 8002830:	d449      	bmi.n	80028c6 <HAL_TIM_IRQHandler+0x106>
}
 8002832:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002834:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002838:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800283c:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800283e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002840:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002842:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002846:	d16f      	bne.n	8002928 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002848:	f7ff ffb2 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	4620      	mov	r0, r4
 800284e:	f7ff ffb3 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	2200      	movs	r2, #0
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	7722      	strb	r2, [r4, #28]
 8002858:	e7cd      	b.n	80027f6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800285a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002860:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002862:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002864:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002866:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002868:	079b      	lsls	r3, r3, #30
 800286a:	d15a      	bne.n	8002922 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286c:	f7ff ffa0 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff ffa1 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	2200      	movs	r2, #0
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	7722      	strb	r2, [r4, #28]
 800287c:	e7b5      	b.n	80027ea <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800287e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002882:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002884:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002886:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002888:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800288c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002890:	d144      	bne.n	800291c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	f7ff ff8d 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff ff8e 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289c:	2200      	movs	r2, #0
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	7722      	strb	r2, [r4, #28]
 80028a2:	e79c      	b.n	80027de <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028a4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028aa:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b0:	0799      	lsls	r1, r3, #30
 80028b2:	d130      	bne.n	8002916 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b4:	f7ff ff7c 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff ff7d 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	2200      	movs	r2, #0
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	7722      	strb	r2, [r4, #28]
 80028c4:	e785      	b.n	80027d2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028c6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80028ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028cc:	611a      	str	r2, [r3, #16]
}
 80028ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80028d2:	f000 b82d 	b.w	8002930 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80028da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80028de:	f7ff fbbd 	bl	800205c <HAL_TIM_PeriodElapsedCallback>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	e78d      	b.n	8002802 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80028ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80028ee:	f000 f821 	bl	8002934 <HAL_TIMEx_BreakCallback>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	e78b      	b.n	800280e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80028fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80028fe:	f000 f81b 	bl	8002938 <HAL_TIMEx_Break2Callback>
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	e789      	b.n	800281a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002906:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800290a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800290c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800290e:	f7ff ff55 	bl	80027bc <HAL_TIM_TriggerCallback>
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	e787      	b.n	8002826 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8002916:	f7ff ff4d 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 800291a:	e7d0      	b.n	80028be <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800291c:	f7ff ff4a 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002920:	e7bc      	b.n	800289c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	f7ff ff47 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002926:	e7a6      	b.n	8002876 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002928:	f7ff ff44 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 800292c:	e791      	b.n	8002852 <HAL_TIM_IRQHandler+0x92>
 800292e:	bf00      	nop

08002930 <HAL_TIMEx_CommutCallback>:
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop

08002934 <HAL_TIMEx_BreakCallback>:
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop

08002938 <HAL_TIMEx_Break2Callback>:
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <_ux_device_class_cdc_acm_entry>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND* command)
{
 800293c:	b508      	push	{r3, lr}
	UINT status;

	/* The command request will tell us we need to do here, either a enumeration
	 * query, an activation or a deactivation. */
	switch (command->ux_slave_class_command_request)
 800293e:	6803      	ldr	r3, [r0, #0]
 8002940:	3b01      	subs	r3, #1
 8002942:	2b06      	cmp	r3, #6
 8002944:	d819      	bhi.n	800297a <_ux_device_class_cdc_acm_entry+0x3e>
 8002946:	e8df f003 	tbb	[pc, r3]
 800294a:	0f0a      	.short	0x0f0a
 800294c:	18041512 	.word	0x18041512
 8002950:	07          	.byte	0x07
 8002951:	00          	.byte	0x00
	{
		case UX_SLAVE_CLASS_COMMAND_INITIALIZE:
			/* Call the init function of the CDC ACM class. */
			status = _ux_device_class_cdc_acm_initialize(command);
 8002952:	f000 f817 	bl	8002984 <_ux_device_class_cdc_acm_initialize>
					UX_TRACE_ERRORS, 0, 0)

			/* Return an error. */
			return (UX_FUNCTION_NOT_SUPPORTED);
	}
}
 8002956:	bd08      	pop	{r3, pc}
			status = _ux_device_class_cdc_acm_uninitialize(command);
 8002958:	f000 f856 	bl	8002a08 <_ux_device_class_cdc_acm_uninitialize>
			return status;
 800295c:	e7fb      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
			if (command->ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800295e:	6943      	ldr	r3, [r0, #20]
 8002960:	2b0a      	cmp	r3, #10
 8002962:	d10c      	bne.n	800297e <_ux_device_class_cdc_acm_entry+0x42>
				return (UX_SUCCESS);
 8002964:	2000      	movs	r0, #0
 8002966:	e7f6      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
			status = _ux_device_class_cdc_acm_activate(command);
 8002968:	f001 fc93 	bl	8004292 <_ux_device_class_cdc_acm_activate>
			return status;
 800296c:	e7f3      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
			status = _ux_device_class_cdc_acm_deactivate(command);
 800296e:	f001 fd15 	bl	800439c <_ux_device_class_cdc_acm_deactivate>
			return status;
 8002972:	e7f0      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
			status = _ux_device_class_cdc_acm_control_request(command);
 8002974:	f001 fc9a 	bl	80042ac <_ux_device_class_cdc_acm_control_request>
			return status;
 8002978:	e7ed      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
			return (UX_FUNCTION_NOT_SUPPORTED);
 800297a:	2054      	movs	r0, #84	; 0x54
 800297c:	e7eb      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
				return (UX_NO_CLASS_MATCH);
 800297e:	2057      	movs	r0, #87	; 0x57
 8002980:	e7e9      	b.n	8002956 <_ux_device_class_cdc_acm_entry+0x1a>
	...

08002984 <_ux_device_class_cdc_acm_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND* command)
{
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	4605      	mov	r5, r0
	/* Get the class container. */
	UX_SLAVE_CLASS* class = command->ux_slave_class_command_class_ptr;
 8002988:	6a06      	ldr	r6, [r0, #32]

	/* Create an instance of the device cdc_acm class. */
	UX_SLAVE_CLASS_CDC_ACM* cdc_acm = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 800298a:	f44f 721a 	mov.w	r2, #616	; 0x268
 800298e:	2100      	movs	r1, #0
 8002990:	4608      	mov	r0, r1
 8002992:	f001 faed 	bl	8003f70 <_ux_utility_memory_allocate>
			sizeof(UX_SLAVE_CLASS_CDC_ACM));

	/* Check for successful allocation. */
	if (cdc_acm == UX_NULL)
 8002996:	b388      	cbz	r0, 80029fc <_ux_device_class_cdc_acm_initialize+0x78>
 8002998:	4604      	mov	r4, r0
		return (UX_MEMORY_INSUFFICIENT);

	/* Save the address of the CDC instance inside the CDC container. */
	class->ux_slave_class_instance = (VOID*)cdc_acm;
 800299a:	64b0      	str	r0, [r6, #72]	; 0x48

	/* Get the pointer to the application parameters for the cdc_acm class. */
	UX_SLAVE_CLASS_CDC_ACM_PARAMETER* cdc_acm_parameter = command->ux_slave_class_command_parameter;
 800299c:	6a6b      	ldr	r3, [r5, #36]	; 0x24

	/* Store the start and stop signals if needed by the application. */
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate =
			cdc_acm_parameter->ux_slave_class_cdc_acm_instance_activate;
 800299e:	681a      	ldr	r2, [r3, #0]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate =
 80029a0:	6042      	str	r2, [r0, #4]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate =
			cdc_acm_parameter->ux_slave_class_cdc_acm_instance_deactivate;
 80029a2:	685a      	ldr	r2, [r3, #4]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate =
 80029a4:	6082      	str	r2, [r0, #8]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change =
			cdc_acm_parameter->ux_slave_class_cdc_acm_parameter_change;
 80029a6:	689b      	ldr	r3, [r3, #8]
	cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change =
 80029a8:	60c3      	str	r3, [r0, #12]

	/*--------------------------------------------------------------------------------------------*/

	/* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time. */
	UINT status = _ux_utility_mutex_create(&cdc_acm->ux_slave_class_cdc_acm_endpoint_in_mutex,
 80029aa:	f100 0510 	add.w	r5, r0, #16
 80029ae:	4914      	ldr	r1, [pc, #80]	; (8002a00 <_ux_device_class_cdc_acm_initialize+0x7c>)
 80029b0:	4628      	mov	r0, r5
 80029b2:	f001 fc17 	bl	80041e4 <_ux_utility_mutex_create>
			"ux_slave_class_cdc_acm_in_mutex");

	/* Check Mutex creation error. */
	if (status != UX_SUCCESS)
 80029b6:	b9a0      	cbnz	r0, 80029e2 <_ux_device_class_cdc_acm_initialize+0x5e>
		/* Return fatal error. */
		return (UX_MUTEX_ERROR);
	}

	/* Out Mutex. */
	status = _ux_utility_mutex_create(&cdc_acm->ux_slave_class_cdc_acm_endpoint_out_mutex,
 80029b8:	4912      	ldr	r1, [pc, #72]	; (8002a04 <_ux_device_class_cdc_acm_initialize+0x80>)
 80029ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80029be:	f001 fc11 	bl	80041e4 <_ux_utility_mutex_create>
			"ux_slave_class_cdc_acm_out_mutex");

	/* Check Mutex creation error. */
	if (status != UX_SUCCESS)
 80029c2:	4603      	mov	r3, r0
 80029c4:	b990      	cbnz	r0, 80029ec <_ux_device_class_cdc_acm_initialize+0x68>
		/* Return fatal error. */
		return (UX_MUTEX_ERROR);
	}

	/* Update the line coding fields with default values. */
	cdc_acm->ux_slave_class_cdc_acm_baudrate = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 80029c6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ca:	67a2      	str	r2, [r4, #120]	; 0x78
	cdc_acm->ux_slave_class_cdc_acm_stop_bit = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 80029cc:	2201      	movs	r2, #1
 80029ce:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
	cdc_acm->ux_slave_class_cdc_acm_parity = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 80029d2:	2200      	movs	r2, #0
 80029d4:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
	cdc_acm->ux_slave_class_cdc_acm_data_bit = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 80029d8:	2208      	movs	r2, #8
 80029da:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e

	/* Return completion status. */
	return (UX_SUCCESS);
}
 80029de:	4618      	mov	r0, r3
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
		_ux_utility_memory_free(cdc_acm);
 80029e2:	4620      	mov	r0, r4
 80029e4:	f001 fb72 	bl	80040cc <_ux_utility_memory_free>
		return (UX_MUTEX_ERROR);
 80029e8:	2317      	movs	r3, #23
 80029ea:	e7f8      	b.n	80029de <_ux_device_class_cdc_acm_initialize+0x5a>
		_ux_utility_mutex_delete(&cdc_acm->ux_slave_class_cdc_acm_endpoint_in_mutex);
 80029ec:	4628      	mov	r0, r5
 80029ee:	f001 fc08 	bl	8004202 <_ux_utility_mutex_delete>
		_ux_utility_memory_free(cdc_acm);
 80029f2:	4620      	mov	r0, r4
 80029f4:	f001 fb6a 	bl	80040cc <_ux_utility_memory_free>
		return (UX_MUTEX_ERROR);
 80029f8:	2317      	movs	r3, #23
 80029fa:	e7f0      	b.n	80029de <_ux_device_class_cdc_acm_initialize+0x5a>
		return (UX_MEMORY_INSUFFICIENT);
 80029fc:	2312      	movs	r3, #18
 80029fe:	e7ee      	b.n	80029de <_ux_device_class_cdc_acm_initialize+0x5a>
 8002a00:	08007318 	.word	0x08007318
 8002a04:	08007338 	.word	0x08007338

08002a08 <_ux_device_class_cdc_acm_uninitialize>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8002a08:	b510      	push	{r4, lr}
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8002a0a:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8002a0c:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8002a0e:	b154      	cbz	r4, 8002a26 <_ux_device_class_cdc_acm_uninitialize+0x1e>
    {

        /* Delete the IN endpoint mutex.  */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002a10:	f104 0010 	add.w	r0, r4, #16
 8002a14:	f001 fbf5 	bl	8004202 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8002a18:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8002a1c:	f001 fbf1 	bl	8004202 <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8002a20:	4620      	mov	r0, r4
 8002a22:	f001 fb53 	bl	80040cc <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8002a26:	2000      	movs	r0, #0
 8002a28:	bd10      	pop	{r4, pc}
	...

08002a2c <_ux_device_class_cdc_acm_write>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8002a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a30:	4698      	mov	r8, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_CDC_ACM_WRITE, cdc_acm, buffer, requested_length, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)
  
    /* Check if current cdc-acm is using callback or not. We cannot use direct reads with callback on.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 8002a32:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d069      	beq.n	8002b0e <_ux_device_class_cdc_acm_write+0xe2>
 8002a3a:	460f      	mov	r7, r1
 8002a3c:	4614      	mov	r4, r2
    
        /* Not allowed. */
        return(UX_ERROR);
            
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8002a3e:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <_ux_device_class_cdc_acm_write+0xe8>)
 8002a40:	f8d3 9000 	ldr.w	r9, [r3]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8002a44:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d116      	bne.n	8002a7a <_ux_device_class_cdc_acm_write+0x4e>
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
    }
        
    /* We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8002a4c:	6803      	ldr	r3, [r0, #0]
    
    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 8002a4e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8002a50:	6973      	ldr	r3, [r6, #20]
 8002a52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a56:	d100      	bne.n	8002a5a <_ux_device_class_cdc_acm_write+0x2e>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8002a58:	6a76      	ldr	r6, [r6, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_utility_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002a5a:	f100 0a10 	add.w	sl, r0, #16
 8002a5e:	4650      	mov	r0, sl
 8002a60:	f001 fbd7 	bl	8004212 <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8002a64:	f106 0b30 	add.w	fp, r6, #48	; 0x30

    /* Reset the actual length.  */
    *actual_length =  0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c8 3000 	str.w	r3, [r8]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8002a6e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d008      	beq.n	8002a88 <_ux_device_class_cdc_acm_write+0x5c>
 8002a76:	2500      	movs	r5, #0
 8002a78:	e029      	b.n	8002ace <_ux_device_class_cdc_acm_write+0xa2>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8002a7a:	2251      	movs	r2, #81	; 0x51
 8002a7c:	2107      	movs	r1, #7
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f001 f9ce 	bl	8003e20 <_ux_system_error_handler>
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8002a84:	2551      	movs	r5, #81	; 0x51
 8002a86:	e038      	b.n	8002afa <_ux_device_class_cdc_acm_write+0xce>
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8002a88:	b10c      	cbz	r4, 8002a8e <_ux_device_class_cdc_acm_write+0x62>
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	e01f      	b.n	8002ace <_ux_device_class_cdc_acm_write+0xa2>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4611      	mov	r1, r2
 8002a92:	4658      	mov	r0, fp
 8002a94:	f001 f96a 	bl	8003d6c <_ux_device_stack_transfer_request>
 8002a98:	4605      	mov	r5, r0

        /* Free Mutex resource.  */
        _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002a9a:	4650      	mov	r0, sl
 8002a9c:	f001 fbb5 	bl	800420a <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 8002aa0:	e02b      	b.n	8002afa <_ux_device_class_cdc_acm_write+0xce>
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
                
            else
            
                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 8002aa2:	4625      	mov	r5, r4
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002aaa:	f001 fb04 	bl	80040b6 <_ux_utility_memory_copy>
                                buffer, local_requested_length);
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8002aae:	462a      	mov	r2, r5
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4658      	mov	r0, fp
 8002ab4:	f001 f95a 	bl	8003d6c <_ux_device_stack_transfer_request>
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 8002ab8:	4605      	mov	r5, r0
 8002aba:	b998      	cbnz	r0, 8002ae4 <_ux_device_class_cdc_acm_write+0xb8>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8002abc:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8002abe:	4417      	add	r7, r2
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8002ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f8c8 3000 	str.w	r3, [r8]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8002aca:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002acc:	1ae4      	subs	r4, r4, r3
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8002ace:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d10a      	bne.n	8002aec <_ux_device_class_cdc_acm_write+0xc0>
 8002ad6:	b14c      	cbz	r4, 8002aec <_ux_device_class_cdc_acm_write+0xc0>
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 8002ad8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002adc:	d9e1      	bls.n	8002aa2 <_ux_device_class_cdc_acm_write+0x76>
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 8002ade:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002ae2:	e7df      	b.n	8002aa4 <_ux_device_class_cdc_acm_write+0x78>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002ae4:	4650      	mov	r0, sl
 8002ae6:	f001 fb90 	bl	800420a <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8002aea:	e006      	b.n	8002afa <_ux_device_class_cdc_acm_write+0xce>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8002aec:	4650      	mov	r0, sl
 8002aee:	f001 fb8c 	bl	800420a <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8002af2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d102      	bne.n	8002b00 <_ux_device_class_cdc_acm_write+0xd4>
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
          
}
 8002afa:	4628      	mov	r0, r5
 8002afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8002b00:	2222      	movs	r2, #34	; 0x22
 8002b02:	2107      	movs	r1, #7
 8002b04:	2002      	movs	r0, #2
 8002b06:	f001 f98b 	bl	8003e20 <_ux_system_error_handler>
        return (UX_TRANSFER_NO_ANSWER);
 8002b0a:	2522      	movs	r5, #34	; 0x22
 8002b0c:	e7f5      	b.n	8002afa <_ux_device_class_cdc_acm_write+0xce>
        return(UX_ERROR);
 8002b0e:	25ff      	movs	r5, #255	; 0xff
 8002b10:	e7f3      	b.n	8002afa <_ux_device_class_cdc_acm_write+0xce>
 8002b12:	bf00      	nop
 8002b14:	2000072c 	.word	0x2000072c

08002b18 <_ux_dcd_stm32_delay>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_delay(ULONG usec)
{
 8002b18:	b082      	sub	sp, #8
	volatile ULONG ucount = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9301      	str	r3, [sp, #4]
	ULONG ucount_local;
	ULONG utime_local;

	/* Calculate the time to wait in cycles. */
	volatile ULONG utime = UX_DCD_STM32_CONTROLLER_DELAY * usec;
 8002b1e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002b22:	00c3      	lsls	r3, r0, #3
 8002b24:	9300      	str	r3, [sp, #0]
	/* Now loop to wait. */
	do
	{
		/* Check the count.  Place volatile variables in non-volatile to avoid compiler confusion
		 * regarding the order of volatile comparisons. */
		ucount_local = ++ucount;
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	9301      	str	r3, [sp, #4]
		utime_local = utime;
 8002b2c:	9a00      	ldr	r2, [sp, #0]
		if (ucount_local > utime_local)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d9f9      	bls.n	8002b26 <_ux_dcd_stm32_delay+0xe>
			/* Done. */
			return;

	} while (1);
}
 8002b32:	b002      	add	sp, #8
 8002b34:	4770      	bx	lr
	...

08002b38 <_ux_dcd_stm32_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	4606      	mov	r6, r0
//	UX_DCD_STM32* dcd_stm32;
//	ULONG stm32_register;
//	ULONG fifo_address;

	/* Get the pointer to the DCD.  */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <_ux_dcd_stm32_initialize+0x1e8>)
 8002b3e:	681d      	ldr	r5, [r3, #0]

	/* The controller initialized here is of STM32 type.  */
	dcd->ux_slave_dcd_controller_type = UX_DCD_STM32_SLAVE_CONTROLLER;
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	626b      	str	r3, [r5, #36]	; 0x24

	/* Allocate memory for this STM32 DCD instance.  */
	UX_DCD_STM32* dcd_stm32 = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8002b44:	229c      	movs	r2, #156	; 0x9c
 8002b46:	2100      	movs	r1, #0
 8002b48:	4608      	mov	r0, r1
 8002b4a:	f001 fa11 	bl	8003f70 <_ux_utility_memory_allocate>
			sizeof(UX_DCD_STM32));

	/* Check if memory was properly allocated.  */
	if (dcd_stm32 == UX_NULL)
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	f000 80e3 	beq.w	8002d1a <_ux_dcd_stm32_initialize+0x1e2>
 8002b54:	4604      	mov	r4, r0
		return (UX_MEMORY_INSUFFICIENT);

	/* Set the pointer to the STM32 DCD.  */
	dcd->ux_slave_dcd_controller_hardware = (VOID*)dcd_stm32;
 8002b56:	63e8      	str	r0, [r5, #60]	; 0x3c

	/* Save the base address of the controller.  */
	dcd->ux_slave_dcd_io = dcd_io;
 8002b58:	632e      	str	r6, [r5, #48]	; 0x30
	dcd_stm32->ux_dcd_stm32_base = dcd_io;
 8002b5a:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94

	/* Set the generic DCD owner for the STM32 DCD.  */
	dcd_stm32->ux_dcd_stm32_dcd_owner = dcd;
 8002b5e:	6005      	str	r5, [r0, #0]

	/* Initialize the function collector for this DCD.  */
	dcd->ux_slave_dcd_function = _ux_dcd_stm32_function;
 8002b60:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <_ux_dcd_stm32_initialize+0x1ec>)
 8002b62:	63ab      	str	r3, [r5, #56]	; 0x38

	/* Reset the GINT Global Interrupt Mask register.  */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GAHBCFG,
 8002b64:	2201      	movs	r2, #1
 8002b66:	2108      	movs	r1, #8
 8002b68:	f000 fa1c 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_GAHBCFG_GINT);

	/* Check the controller. Full Speed or HighSpeed initialization.  */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_FULL_SPEED)
 8002b6c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b74:	f000 809f 	beq.w	8002cb6 <_ux_dcd_stm32_initialize+0x17e>
#endif
	}
	else
	{
		/* PHY Selection in HS mode.  */
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002b78:	2210      	movs	r2, #16
 8002b7a:	210c      	movs	r1, #12
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f000 fa1c 	bl	8002fba <_ux_dcd_stm32_register_set>
				UX_DCD_STM32_OTG_FS_GUSBCFG_ULPI_UTMI_SEL);
	}

	/* Spec says wait for 50 cycles.  */
	_ux_dcd_stm32_delay(50);
 8002b82:	2032      	movs	r0, #50	; 0x32
 8002b84:	f7ff ffc8 	bl	8002b18 <_ux_dcd_stm32_delay>

	/* Wait for AHB master Idle State.  */
	do
	{
		/* Spec says wait for 5 cycles.  */
		_ux_dcd_stm32_delay(5);
 8002b88:	2005      	movs	r0, #5
 8002b8a:	f7ff ffc5 	bl	8002b18 <_ux_dcd_stm32_delay>

		/* Read the RST Control register.  */
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 8002b8e:	2110      	movs	r1, #16
 8002b90:	4620      	mov	r0, r4
 8002b92:	f000 fa0e 	bl	8002fb2 <_ux_dcd_stm32_register_read>
	} while ((stm32_register & UX_DCD_STM32_OTG_FS_GRSTCTL_AHBIDL) == 0);
 8002b96:	2800      	cmp	r0, #0
 8002b98:	daf6      	bge.n	8002b88 <_ux_dcd_stm32_initialize+0x50>

	/* Perform the core soft reset.  */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL,
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 fa0b 	bl	8002fba <_ux_dcd_stm32_register_set>

	/* Wait for Soft Reset to be completed.  */
	do
	{
		/* Read the RST Control register.  */
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f000 fa03 	bl	8002fb2 <_ux_dcd_stm32_register_read>
	} while (stm32_register & UX_DCD_STM32_OTG_FS_GRSTCTL_CSRST);
 8002bac:	f010 0f01 	tst.w	r0, #1
 8002bb0:	d1f8      	bne.n	8002ba4 <_ux_dcd_stm32_initialize+0x6c>

	/* Spec says wait for 10 cycles.  */
	_ux_dcd_stm32_delay(10);
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f7ff ffb0 	bl	8002b18 <_ux_dcd_stm32_delay>

	/* Set the controller to device mode.  */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bbc:	210c      	movs	r1, #12
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f000 f9fb 	bl	8002fba <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GUSBCFG_FDMOD);

	/* Spec says wait for 50 cycles.  */
	_ux_dcd_stm32_delay(50);
 8002bc4:	2032      	movs	r0, #50	; 0x32
 8002bc6:	f7ff ffa7 	bl	8002b18 <_ux_dcd_stm32_delay>

	/*--------------------------------------------------------------------------------------------*/

	/* Check the controller. Full Speed or HighSpeed initialization.  */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_FULL_SPEED)
 8002bca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd2:	d07c      	beq.n	8002cce <_ux_dcd_stm32_initialize+0x196>
		/* Set the PHY speed to full speed. */
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
				UX_DCD_STM32_OTG_FS_DCFG_DSPD_FULL_SPEED);

	/* Set the turnaround time.  */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002bd4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8002bd8:	210c      	movs	r1, #12
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f000 f9e2 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_GUSBCFG_TRDT_MASK);
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002be0:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8002be4:	210c      	movs	r1, #12
 8002be6:	4620      	mov	r0, r4
 8002be8:	f000 f9e7 	bl	8002fba <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GUSBCFG_TRDT_8);

	/* Restart the PHY clock. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_PCGCCTL, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f000 f9e7 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Set the Device default address to 0 and the Periodic Frame interval to 80%. */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 8002bf8:	f641 72f0 	movw	r2, #8176	; 0x1ff0
 8002bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c00:	4620      	mov	r0, r4
 8002c02:	f000 f9cf 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
			(UX_DCD_STM32_OTG_FS_DCFG_PFVIL_MASK | UX_DCD_STM32_OTG_FS_DCFG_DAD_MASK));

	/* Set the RX FIFO. Size.  */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRXFSIZ, UX_DCD_STM32_RX_FIFO_SIZE);
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	2124      	movs	r1, #36	; 0x24
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f000 f9db 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Set the fifo address.  */
	ULONG fifo_address = UX_DCD_STM32_RX_FIFO_SIZE;

	/* Set the NP TX FIFO. Size.  */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GNPTXFSIZ, (fifo_address |
 8002c10:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <_ux_dcd_stm32_initialize+0x1f0>)
 8002c12:	2128      	movs	r1, #40	; 0x28
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 f9d6 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Adjust the fifo address.  */
	fifo_address += UX_DCD_STM32_NP_TX_FIFO_SIZE;

	/* We need to setup the IN FIFOs. Check the controller. Full-Speed or High-Speed initialization.  */
	if (dcd_stm32->ux_dcd_stm32_base == UX_DCD_STM32_OTG_FS_HIGH_SPEED)
 8002c1a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8002c1e:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <_ux_dcd_stm32_initialize+0x1f4>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d05b      	beq.n	8002cdc <_ux_dcd_stm32_initialize+0x1a4>
	else
	{
		/* For OTG_FS, the maximum amount of RAM we have for FIFOs is 1.25kb.  */

		/* Set the values for the IN Fifos (3 generic IN Fifos). */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF,
 8002c24:	4a42      	ldr	r2, [pc, #264]	; (8002d30 <_ux_dcd_stm32_initialize+0x1f8>)
 8002c26:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f000 f9cb 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				(fifo_address | (UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS
								<< UX_DCD_STM32_OTG_FS_GNPTXFSIZ_NPTXFSD_SHIFT)));

		/* Adjust the fifo address.  */
		fifo_address += UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS;
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 4,
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <_ux_dcd_stm32_initialize+0x1fc>)
 8002c32:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002c36:	4620      	mov	r0, r4
 8002c38:	f000 f9c5 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				(fifo_address | (UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS
								<< UX_DCD_STM32_OTG_FS_GNPTXFSIZ_NPTXFSD_SHIFT)));

		/* Adjust the fifo address.  */
		fifo_address += UX_DCD_STM32_ENDPOINT_TX_FIFO_SIZE_FS;
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 8,
 8002c3c:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <_ux_dcd_stm32_initialize+0x200>)
 8002c3e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 f9bf 	bl	8002fc6 <_ux_dcd_stm32_register_write>
	}

	/*--------------------------------------------------------------------------------------------*/

	/* Clear DIEPMSK and DOEPMSK.  */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPMSK, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 f9b9 	bl	8002fc6 <_ux_dcd_stm32_register_write>
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPMSK, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	f640 0114 	movw	r1, #2068	; 0x814
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f000 f9b3 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Clear all pending interrupts on endpoint.  */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINT, 0xFFFFFFFF);
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	f640 0118 	movw	r1, #2072	; 0x818
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 f9ac 	bl	8002fc6 <_ux_dcd_stm32_register_write>
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f640 011c 	movw	r1, #2076	; 0x81c
 8002c74:	4620      	mov	r0, r4
 8002c76:	f000 f9a6 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Disable all interrupts.  */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2118      	movs	r1, #24
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f000 f9a1 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Clear all pending interrupts.  */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS, 0xFFFFFFFF);
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	2114      	movs	r1, #20
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f000 f99b 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	/* Enable interrupts for the device mode only.  */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8002c90:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <_ux_dcd_stm32_initialize+0x204>)
 8002c92:	2118      	movs	r1, #24
 8002c94:	4620      	mov	r0, r4
 8002c96:	f000 f990 	bl	8002fba <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GINTMSK_ENUMDNEM |
			UX_DCD_STM32_OTG_FS_GINTMSK_IEPINTM |
			UX_DCD_STM32_OTG_FS_GINTMSK_OEPINTM);

	/* Set the state of the controller to OPERATIONAL now.  */
	dcd->ux_slave_dcd_status = UX_DCD_STATUS_OPERATIONAL;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	622a      	str	r2, [r5, #32]

	/* Set the GINT Global Interrupt Mask register.  */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GAHBCFG,
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f98a 	bl	8002fba <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_GAHBCFG_GINT);

	/* Clear soft disconnect bit.  */
	_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCTL,
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f640 0104 	movw	r1, #2052	; 0x804
 8002cac:	4620      	mov	r0, r4
 8002cae:	f000 f979 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
			UX_DCD_STM32_OTG_FS_DCTL_SDIS);

	/* Return successful completion.  */
	return (UX_SUCCESS);
 8002cb2:	2000      	movs	r0, #0
}
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GUSBCFG,
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	210c      	movs	r1, #12
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f000 f97d 	bl	8002fba <_ux_dcd_stm32_register_set>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GCCFG,
 8002cc0:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002cc4:	2138      	movs	r1, #56	; 0x38
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f000 f977 	bl	8002fba <_ux_dcd_stm32_register_set>
 8002ccc:	e759      	b.n	8002b82 <_ux_dcd_stm32_initialize+0x4a>
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG,
 8002cce:	2203      	movs	r2, #3
 8002cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f000 f970 	bl	8002fba <_ux_dcd_stm32_register_set>
 8002cda:	e77b      	b.n	8002bd4 <_ux_dcd_stm32_initialize+0x9c>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF,
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <_ux_dcd_stm32_initialize+0x208>)
 8002cde:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f000 f96f 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 4,
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <_ux_dcd_stm32_initialize+0x20c>)
 8002cea:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f000 f969 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 8,
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <_ux_dcd_stm32_initialize+0x210>)
 8002cf6:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 f963 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 12,
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <_ux_dcd_stm32_initialize+0x214>)
 8002d02:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d06:	4620      	mov	r0, r4
 8002d08:	f000 f95d 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTXF + 16,
 8002d0c:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <_ux_dcd_stm32_initialize+0x218>)
 8002d0e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002d12:	4620      	mov	r0, r4
 8002d14:	f000 f957 	bl	8002fc6 <_ux_dcd_stm32_register_write>
 8002d18:	e796      	b.n	8002c48 <_ux_dcd_stm32_initialize+0x110>
		return (UX_MEMORY_INSUFFICIENT);
 8002d1a:	2012      	movs	r0, #18
 8002d1c:	e7ca      	b.n	8002cb4 <_ux_dcd_stm32_initialize+0x17c>
 8002d1e:	bf00      	nop
 8002d20:	2000072c 	.word	0x2000072c
 8002d24:	0800476d 	.word	0x0800476d
 8002d28:	00600080 	.word	0x00600080
 8002d2c:	40040000 	.word	0x40040000
 8002d30:	002000e0 	.word	0x002000e0
 8002d34:	00200100 	.word	0x00200100
 8002d38:	00200120 	.word	0x00200120
 8002d3c:	a00c3810 	.word	0xa00c3810
 8002d40:	006000e0 	.word	0x006000e0
 8002d44:	00600140 	.word	0x00600140
 8002d48:	006001a0 	.word	0x006001a0
 8002d4c:	00600200 	.word	0x00600200
 8002d50:	00600260 	.word	0x00600260

08002d54 <_ux_dcd_stm32_interrupt_handler>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_interrupt_handler(VOID)
{
 8002d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//	UX_SLAVE_DCD* dcd;
//	UX_DCD_STM32* dcd_stm32;
//	UX_SLAVE_DEVICE* device;

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8002d58:	4b91      	ldr	r3, [pc, #580]	; (8002fa0 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8002d5a:	681d      	ldr	r5, [r3, #0]

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8002d5c:	6bee      	ldr	r6, [r5, #60]	; 0x3c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Read the interrupt status register from the controller. */
	ULONG stm32_pending_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 8002d5e:	2114      	movs	r1, #20
 8002d60:	4630      	mov	r0, r6
 8002d62:	f000 f926 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 8002d66:	4604      	mov	r4, r0
			UX_DCD_STM32_OTG_FS_GINTSTS);

	/* Mask only with the interrupts we have programmed. */
	ULONG stm32_masked_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 8002d68:	2118      	movs	r1, #24
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	f000 f921 	bl	8002fb2 <_ux_dcd_stm32_register_read>
			UX_DCD_STM32_OTG_FS_GINTMSK);

	/* Source of interrupt must be masked. */
	stm32_pending_interrupt &= stm32_masked_interrupt;
 8002d70:	4004      	ands	r4, r0

	/*----- see 'stm32f7xx_hal_pcd.c' -> 'void HAL_PCD_IRQHandler(PCD_HandleTypeDef* hpcd)' ------*/

	/* Check if we have a SUSPEND. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_USBSUSP)
 8002d72:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002d76:	d110      	bne.n	8002d9a <_ux_dcd_stm32_interrupt_handler+0x46>
			/* Device is reset, the behavior is the same as disconnection. */
			_ux_device_stack_disconnect();
	}

	/* Check if we have an RESUME. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_WKUINT)
 8002d78:	2c00      	cmp	r4, #0
 8002d7a:	db21      	blt.n	8002dc0 <_ux_dcd_stm32_interrupt_handler+0x6c>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_RESUMED);
		}
	}

	/* Check the source of the interrupt. Is it Enumeration Done Interrupt (End of Bus Reset) ? */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_ENUMDNE)
 8002d7c:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8002d80:	d12d      	bne.n	8002dde <_ux_dcd_stm32_interrupt_handler+0x8a>
			device->ux_slave_device_state = UX_DEVICE_ATTACHED;
		}
	}

	/* Check the source of the interrupt. Is it RESET ? */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_USBRST)
 8002d82:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8002d86:	d14d      	bne.n	8002e24 <_ux_dcd_stm32_interrupt_handler+0xd0>
	UX_SLAVE_ENDPOINT* endpoint;

	/* Check the source of the interrupt. Is RX FIFO non Empty interrupt ?
	 * Meaning we have received an OUT or SETUP token.
	 * Reading the FIFO will trigger a Transfer complete interrupt. */
	if (stm32_pending_interrupt & UX_DCD_STM32_OTG_FS_GINTSTS_RFXLVL)
 8002d88:	f014 0f10 	tst.w	r4, #16
 8002d8c:	d158      	bne.n	8002e40 <_ux_dcd_stm32_interrupt_handler+0xec>
	ULONG endpoint_mask;
	ULONG stm32_doepint_register;
	ULONG stm32_diepint_register;

	/* Check the source of the interrupt. Is it a IN or OUT endpoint interrupt ? */
	if (stm32_pending_interrupt & (UX_DCD_STM32_OTG_FS_GINTSTS_IEPINT |
 8002d8e:	f414 2f40 	tst.w	r4, #786432	; 0xc0000
 8002d92:	f040 809c 	bne.w	8002ece <_ux_dcd_stm32_interrupt_handler+0x17a>
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
							stm32_diepint_register);
			}
		}
	}
}
 8002d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8002d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9e:	2114      	movs	r1, #20
 8002da0:	4630      	mov	r0, r6
 8002da2:	f000 f910 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8002da6:	4b7e      	ldr	r3, [pc, #504]	; (8002fa0 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002dae:	b10b      	cbz	r3, 8002db4 <_ux_dcd_stm32_interrupt_handler+0x60>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_SUSPENDED);
 8002db0:	2004      	movs	r0, #4
 8002db2:	4798      	blx	r3
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
 8002db4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0de      	beq.n	8002d78 <_ux_dcd_stm32_interrupt_handler+0x24>
			_ux_device_stack_disconnect();
 8002dba:	f000 fdd7 	bl	800396c <_ux_device_stack_disconnect>
 8002dbe:	e7db      	b.n	8002d78 <_ux_dcd_stm32_interrupt_handler+0x24>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8002dc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dc4:	2114      	movs	r1, #20
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	f000 f8fd 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8002dcc:	4b74      	ldr	r3, [pc, #464]	; (8002fa0 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0d1      	beq.n	8002d7c <_ux_dcd_stm32_interrupt_handler+0x28>
			_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_RESUMED);
 8002dd8:	2005      	movs	r0, #5
 8002dda:	4798      	blx	r3
 8002ddc:	e7ce      	b.n	8002d7c <_ux_dcd_stm32_interrupt_handler+0x28>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8002dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de2:	2114      	movs	r1, #20
 8002de4:	4630      	mov	r0, r6
 8002de6:	f000 f8ee 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		if (device->ux_slave_device_state != UX_DEVICE_ATTACHED
 8002dea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf18      	it	ne
 8002df0:	2b03      	cmpne	r3, #3
 8002df2:	d0c6      	beq.n	8002d82 <_ux_dcd_stm32_interrupt_handler+0x2e>
			ULONG stm32_dsts_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DSTS);
 8002df4:	f640 0108 	movw	r1, #2056	; 0x808
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f000 f8da 	bl	8002fb2 <_ux_dcd_stm32_register_read>
			if ((stm32_dsts_register & UX_DCD_STM32_OTG_FS_DSTS_ENUMSPD_MASK)
 8002dfe:	f010 0f06 	tst.w	r0, #6
 8002e02:	d109      	bne.n	8002e18 <_ux_dcd_stm32_interrupt_handler+0xc4>
				_ux_system_slave->ux_system_slave_speed = UX_HIGH_SPEED_DEVICE;
 8002e04:	4b66      	ldr	r3, [pc, #408]	; (8002fa0 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			_ux_dcd_stm32_initialize_complete();
 8002e0e:	f001 fcef 	bl	80047f0 <_ux_dcd_stm32_initialize_complete>
			device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 8002e12:	2301      	movs	r3, #1
 8002e14:	642b      	str	r3, [r5, #64]	; 0x40
 8002e16:	e7b4      	b.n	8002d82 <_ux_dcd_stm32_interrupt_handler+0x2e>
				_ux_system_slave->ux_system_slave_speed = UX_FULL_SPEED_DEVICE;
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <_ux_dcd_stm32_interrupt_handler+0x24c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8002e22:	e7f4      	b.n	8002e0e <_ux_dcd_stm32_interrupt_handler+0xba>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8002e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e28:	2114      	movs	r1, #20
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f000 f8cb 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		if (device->ux_slave_device_state != UX_DEVICE_RESET)
 8002e30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002e32:	b913      	cbnz	r3, 8002e3a <_ux_dcd_stm32_interrupt_handler+0xe6>
		device->ux_slave_device_state = UX_DEVICE_RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	642b      	str	r3, [r5, #64]	; 0x40
 8002e38:	e7a6      	b.n	8002d88 <_ux_dcd_stm32_interrupt_handler+0x34>
			_ux_device_stack_disconnect();
 8002e3a:	f000 fd97 	bl	800396c <_ux_device_stack_disconnect>
 8002e3e:	e7f9      	b.n	8002e34 <_ux_dcd_stm32_interrupt_handler+0xe0>
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTSTS,
 8002e40:	2210      	movs	r2, #16
 8002e42:	2114      	movs	r1, #20
 8002e44:	4630      	mov	r0, r6
 8002e46:	f000 f8be 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		_ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	2118      	movs	r1, #24
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f000 f8a8 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
		ULONG stm32_grxstp_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8002e54:	2120      	movs	r1, #32
 8002e56:	4630      	mov	r0, r6
 8002e58:	f000 f8ab 	bl	8002fb2 <_ux_dcd_stm32_register_read>
		endpoint_index = stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_EPNUM_MASK;
 8002e5c:	f000 050f 	and.w	r5, r0, #15
		endpoint = ed->ux_dcd_stm32_ed_endpoint;
 8002e60:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002e64:	0093      	lsls	r3, r2, #2
 8002e66:	4433      	add	r3, r6
 8002e68:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
		ULONG transfer_status = (stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_PKTSTS_MASK)
 8002e6c:	f3c0 4343 	ubfx	r3, r0, #17, #4
		ULONG transfer_length = (stm32_grxstp_register & UX_DCD_STM32_OTG_FS_GRXSTSP_BCNT_MASK)
 8002e70:	f3c0 170a 	ubfx	r7, r0, #4, #11
		switch (transfer_status)
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d013      	beq.n	8002ea0 <_ux_dcd_stm32_interrupt_handler+0x14c>
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d10b      	bne.n	8002e94 <_ux_dcd_stm32_interrupt_handler+0x140>
				_ux_dcd_stm32_fifo_read(dcd_stm32, endpoint_index,
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	f10a 0284 	add.w	r2, sl, #132	; 0x84
 8002e82:	4629      	mov	r1, r5
 8002e84:	4630      	mov	r0, r6
 8002e86:	f001 fc35 	bl	80046f4 <_ux_dcd_stm32_fifo_read>
				ed->ux_dcd_stm32_ed_payload_length = transfer_length;
 8002e8a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8002e8e:	00ab      	lsls	r3, r5, #2
 8002e90:	4433      	add	r3, r6
 8002e92:	611f      	str	r7, [r3, #16]
		_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_GINTMSK,
 8002e94:	2210      	movs	r2, #16
 8002e96:	2118      	movs	r1, #24
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 f88e 	bl	8002fba <_ux_dcd_stm32_register_set>
 8002e9e:	e776      	b.n	8002d8e <_ux_dcd_stm32_interrupt_handler+0x3a>
				_ux_dcd_stm32_fifo_read(dcd_stm32, endpoint_index,
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f001 fc23 	bl	80046f4 <_ux_dcd_stm32_fifo_read>
				transfer_request->ux_slave_transfer_request_current_data_pointer += transfer_length;
 8002eae:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8002eb2:	443b      	add	r3, r7
 8002eb4:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
				transfer_request->ux_slave_transfer_request_actual_length += transfer_length;
 8002eb8:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8002ebc:	443b      	add	r3, r7
 8002ebe:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
				ed->ux_dcd_stm32_ed_payload_length = transfer_length;
 8002ec2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8002ec6:	00ab      	lsls	r3, r5, #2
 8002ec8:	4433      	add	r3, r6
 8002eca:	611f      	str	r7, [r3, #16]
				break;
 8002ecc:	e7e2      	b.n	8002e94 <_ux_dcd_stm32_interrupt_handler+0x140>
		ULONG stm32_daint_interrupt = _ux_dcd_stm32_register_read(dcd_stm32,
 8002ece:	f640 0118 	movw	r1, #2072	; 0x818
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f000 f86d 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 8002ed8:	4607      	mov	r7, r0
		for (endpoint_mask = 0; endpoint_mask < 32; endpoint_mask++)
 8002eda:	2400      	movs	r4, #0
 8002edc:	e028      	b.n	8002f30 <_ux_dcd_stm32_interrupt_handler+0x1dc>
					ed = &dcd_stm32->ux_dcd_stm32_ed[endpoint_index];
 8002ede:	00e2      	lsls	r2, r4, #3
 8002ee0:	4422      	add	r2, r4
 8002ee2:	0093      	lsls	r3, r2, #2
 8002ee4:	4433      	add	r3, r6
 8002ee6:	f103 0a04 	add.w	sl, r3, #4
					ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_IDLE;
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
									(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 8002eee:	0161      	lsls	r1, r4, #5
					stm32_diepint_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8002ef0:	f601 1108 	addw	r1, r1, #2312	; 0x908
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f85c 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 8002efa:	4681      	mov	r9, r0
					if (stm32_diepint_register & UX_DCD_STM32_OTG_FS_DIEPINT_XFRC)
 8002efc:	f010 0f01 	tst.w	r0, #1
 8002f00:	d043      	beq.n	8002f8a <_ux_dcd_stm32_interrupt_handler+0x236>
						ed->ux_dcd_stm32_ed_transfer_status =
 8002f02:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8002f06:	0093      	lsls	r3, r2, #2
 8002f08:	4433      	add	r3, r6
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	615a      	str	r2, [r3, #20]
				endpoint_index = endpoint_mask;
 8002f0e:	4625      	mov	r5, r4
				endpoint = ed->ux_dcd_stm32_ed_endpoint;
 8002f10:	f8da 1020 	ldr.w	r1, [sl, #32]
				_ux_dcd_stm32_transfer_callback(dcd_stm32, transfer_request);
 8002f14:	3130      	adds	r1, #48	; 0x30
 8002f16:	4630      	mov	r0, r6
 8002f18:	f000 f859 	bl	8002fce <_ux_dcd_stm32_transfer_callback>
				if (endpoint_mask >= 16)
 8002f1c:	2c0f      	cmp	r4, #15
 8002f1e:	d936      	bls.n	8002f8e <_ux_dcd_stm32_interrupt_handler+0x23a>
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 8002f20:	0169      	lsls	r1, r5, #5
					_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPINT +
 8002f22:	4642      	mov	r2, r8
 8002f24:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f000 f84c 	bl	8002fc6 <_ux_dcd_stm32_register_write>
		for (endpoint_mask = 0; endpoint_mask < 32; endpoint_mask++)
 8002f2e:	3401      	adds	r4, #1
 8002f30:	2c1f      	cmp	r4, #31
 8002f32:	f63f af30 	bhi.w	8002d96 <_ux_dcd_stm32_interrupt_handler+0x42>
			if (stm32_daint_interrupt & (1 << endpoint_mask))
 8002f36:	2301      	movs	r3, #1
 8002f38:	40a3      	lsls	r3, r4
 8002f3a:	423b      	tst	r3, r7
 8002f3c:	d0f7      	beq.n	8002f2e <_ux_dcd_stm32_interrupt_handler+0x1da>
				if (endpoint_mask >= 16)
 8002f3e:	2c0f      	cmp	r4, #15
 8002f40:	d9cd      	bls.n	8002ede <_ux_dcd_stm32_interrupt_handler+0x18a>
					endpoint_index -= 16;
 8002f42:	f1a4 0510 	sub.w	r5, r4, #16
					ed = &dcd_stm32->ux_dcd_stm32_ed[endpoint_index];
 8002f46:	00ea      	lsls	r2, r5, #3
 8002f48:	442a      	add	r2, r5
 8002f4a:	0093      	lsls	r3, r2, #2
 8002f4c:	4433      	add	r3, r6
 8002f4e:	f103 0a04 	add.w	sl, r3, #4
					ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_IDLE;
 8002f52:	2200      	movs	r2, #0
 8002f54:	615a      	str	r2, [r3, #20]
									(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 8002f56:	0169      	lsls	r1, r5, #5
					stm32_doepint_register = _ux_dcd_stm32_register_read(dcd_stm32,
 8002f58:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f000 f828 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 8002f62:	4680      	mov	r8, r0
					if (stm32_doepint_register & UX_DCD_STM32_OTG_FS_DOEPINT_STUP)
 8002f64:	f010 0f08 	tst.w	r0, #8
 8002f68:	d005      	beq.n	8002f76 <_ux_dcd_stm32_interrupt_handler+0x222>
						ed->ux_dcd_stm32_ed_transfer_status = UX_DCD_STM32_ED_TRANSFER_STATUS_SETUP;
 8002f6a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002f6e:	0093      	lsls	r3, r2, #2
 8002f70:	4433      	add	r3, r6
 8002f72:	2201      	movs	r2, #1
 8002f74:	615a      	str	r2, [r3, #20]
					if (stm32_doepint_register & UX_DCD_STM32_OTG_FS_DOEPINT_XFRC)
 8002f76:	f018 0f01 	tst.w	r8, #1
 8002f7a:	d0c9      	beq.n	8002f10 <_ux_dcd_stm32_interrupt_handler+0x1bc>
						ed->ux_dcd_stm32_ed_transfer_status =
 8002f7c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002f80:	0093      	lsls	r3, r2, #2
 8002f82:	4433      	add	r3, r6
 8002f84:	2203      	movs	r2, #3
 8002f86:	615a      	str	r2, [r3, #20]
 8002f88:	e7c2      	b.n	8002f10 <_ux_dcd_stm32_interrupt_handler+0x1bc>
				endpoint_index = endpoint_mask;
 8002f8a:	4625      	mov	r5, r4
 8002f8c:	e7c0      	b.n	8002f10 <_ux_dcd_stm32_interrupt_handler+0x1bc>
							(endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 8002f8e:	0169      	lsls	r1, r5, #5
					_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPINT +
 8002f90:	464a      	mov	r2, r9
 8002f92:	f601 1108 	addw	r1, r1, #2312	; 0x908
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 f815 	bl	8002fc6 <_ux_dcd_stm32_register_write>
 8002f9c:	e7c7      	b.n	8002f2e <_ux_dcd_stm32_interrupt_handler+0x1da>
 8002f9e:	bf00      	nop
 8002fa0:	2000072c 	.word	0x2000072c

08002fa4 <_ux_dcd_stm32_register_clear>:
/*                                                                        */
/**************************************************************************/
VOID  _ux_dcd_stm32_register_clear(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register, ULONG value)
{
    
    *((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register)) &=~ value;
 8002fa4:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8002fa8:	5843      	ldr	r3, [r0, r1]
 8002faa:	ea23 0202 	bic.w	r2, r3, r2
 8002fae:	5042      	str	r2, [r0, r1]
    return;
}
 8002fb0:	4770      	bx	lr

08002fb2 <_ux_dcd_stm32_register_read>:
/*                                                                        */
/**************************************************************************/
ULONG  _ux_dcd_stm32_register_read(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register)
{
        
    return((ULONG)(*((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register))));
 8002fb2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
}
 8002fb6:	5858      	ldr	r0, [r3, r1]
 8002fb8:	4770      	bx	lr

08002fba <_ux_dcd_stm32_register_set>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_dcd_stm32_register_set(UX_DCD_STM32* dcd_stm32, ULONG stm32_register, ULONG value)
{
	*((ULONG*)(dcd_stm32->ux_dcd_stm32_base + stm32_register)) |= value;
 8002fba:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8002fbe:	5843      	ldr	r3, [r0, r1]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	5042      	str	r2, [r0, r1]
	return;
}
 8002fc4:	4770      	bx	lr

08002fc6 <_ux_dcd_stm32_register_write>:
/*                                                                        */
/**************************************************************************/
VOID  _ux_dcd_stm32_register_write(UX_DCD_STM32 *dcd_stm32, ULONG stm32_register, ULONG value)
{
    
    *((ULONG *) (dcd_stm32 -> ux_dcd_stm32_base + stm32_register)) =  value;
 8002fc6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8002fca:	505a      	str	r2, [r3, r1]
    return;
}
 8002fcc:	4770      	bx	lr

08002fce <_ux_dcd_stm32_transfer_callback>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_transfer_callback(UX_DCD_STM32* dcd_stm32, UX_SLAVE_TRANSFER* transfer_request)
{
 8002fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	460c      	mov	r4, r1
//	ULONG endpoint_size_address;
//	ULONG endpoint_control;
//	ULONG endpoint_size;

	/* Get the pointer to the logical endpoint from the transfer request. */
	UX_SLAVE_ENDPOINT* endpoint = transfer_request->ux_slave_transfer_request_endpoint;
 8002fd8:	688d      	ldr	r5, [r1, #8]

	/* Get the endpoint index. */
	ULONG stm32_endpoint_index = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 8002fda:	696b      	ldr	r3, [r5, #20]
			& ~UX_ENDPOINT_DIRECTION;

	/* Get the STM32 endpoint. */
	UX_DCD_STM32_ED* ed = (UX_DCD_STM32_ED*)endpoint->ux_slave_endpoint_ed;
 8002fdc:	68ae      	ldr	r6, [r5, #8]
	ULONG fifo_length;
	ULONG endpoint_size;
	ULONG endpoint_control;

	/* Endpoint 0 is different. */
	if (stm32_endpoint_index == 0)
 8002fde:	f033 0880 	bics.w	r8, r3, #128	; 0x80
 8002fe2:	f040 8111 	bne.w	8003208 <_ux_dcd_stm32_transfer_callback+0x23a>
	{
		/* Check if we have received a SETUP command. */
		if (ed->ux_dcd_stm32_ed_transfer_status == UX_DCD_STM32_ED_TRANSFER_STATUS_SETUP)
 8002fe6:	6933      	ldr	r3, [r6, #16]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d01c      	beq.n	8003026 <_ux_dcd_stm32_transfer_callback+0x58>
					UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA | UX_DCD_STM32_OTG_FS_DOEPCTL_CNAK);
		}
		else
		{
			/* Check if we have received something on endpoint 0 during data phase . */
			if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8002fec:	6873      	ldr	r3, [r6, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	f000 8086 	beq.w	8003100 <_ux_dcd_stm32_transfer_callback+0x132>
			}
			else
			{

				/* Check if we have received something on endpoint 0 during status phase . */
				if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_STATUS_RX)
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	f000 80bb 	beq.w	8003170 <_ux_dcd_stm32_transfer_callback+0x1a2>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
				}
				else
				{
					/* Check if we need to send data again on control endpoint. */
					if (ed->ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	f040 8119 	bne.w	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
					{
						/* Check if we have data to send. */
						if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8003000:	69cb      	ldr	r3, [r1, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 80c7 	bne.w	8003196 <_ux_dcd_stm32_transfer_callback+0x1c8>
						{
							/* There is no data to send but we may need to send a Zero Length Packet. */
							if (transfer_request->ux_slave_transfer_request_force_zlp == UX_TRUE)
 8003008:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800300a:	2b01      	cmp	r3, #1
 800300c:	f000 80b3 	beq.w	8003176 <_ux_dcd_stm32_transfer_callback+0x1a8>
								transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
							}
							else
							{
								/* Set the completion code to no error. */
								transfer_request->ux_slave_transfer_request_completion_code =
 8003010:	2300      	movs	r3, #0
 8003012:	620b      	str	r3, [r1, #32]
										UX_SUCCESS;

								/* The transfer is completed. */
								transfer_request->ux_slave_transfer_request_status =
 8003014:	2302      	movs	r3, #2
 8003016:	600b      	str	r3, [r1, #0]
										UX_TRANSFER_STATUS_COMPLETED;

								/* We are using a Control endpoint, if there is a callback,
								 * invoke it. We are still under ISR. */
								if (transfer_request->ux_slave_transfer_request_completion_function)
 8003018:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800301a:	b10b      	cbz	r3, 8003020 <_ux_dcd_stm32_transfer_callback+0x52>
									transfer_request->ux_slave_transfer_request_completion_function(
 800301c:	4608      	mov	r0, r1
 800301e:	4798      	blx	r3
											transfer_request);

								/* State is now STATUS RX. */
								ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8003020:	2304      	movs	r3, #4
 8003022:	6073      	str	r3, [r6, #4]
 8003024:	e105      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
			_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2120      	movs	r1, #32
 800302a:	f001 fb48 	bl	80046be <_ux_dcd_stm32_fifo_flush>
			transfer_request->ux_slave_transfer_request_actual_length = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	61a3      	str	r3, [r4, #24]
			transfer_request->ux_slave_transfer_request_type = UX_TRANSFER_PHASE_SETUP;
 8003032:	2201      	movs	r2, #1
 8003034:	6062      	str	r2, [r4, #4]
			transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8003036:	6223      	str	r3, [r4, #32]
			ed->ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_STALLED;
 8003038:	6833      	ldr	r3, [r6, #0]
 800303a:	f023 0304 	bic.w	r3, r3, #4
 800303e:	6033      	str	r3, [r6, #0]
			if (*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8003040:	f994 3054 	ldrsb.w	r3, [r4, #84]	; 0x54
 8003044:	2b00      	cmp	r3, #0
 8003046:	db1d      	blt.n	8003084 <_ux_dcd_stm32_transfer_callback+0xb6>
				ed->ux_dcd_stm32_ed_direction = UX_ENDPOINT_OUT;
 8003048:	2300      	movs	r3, #0
 800304a:	61f3      	str	r3, [r6, #28]
				if (*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 800304c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8003050:	b913      	cbnz	r3, 8003058 <_ux_dcd_stm32_transfer_callback+0x8a>
						*(transfer_request->ux_slave_transfer_request_setup + 7) == 0)
 8003052:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
				if (*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8003056:	b1db      	cbz	r3, 8003090 <_ux_dcd_stm32_transfer_callback+0xc2>
			if (((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0) &&
 8003058:	f994 3054 	ldrsb.w	r3, [r4, #84]	; 0x54
 800305c:	2b00      	cmp	r3, #0
 800305e:	db05      	blt.n	800306c <_ux_dcd_stm32_transfer_callback+0x9e>
					*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 8003060:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
			if (((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0) &&
 8003064:	b912      	cbnz	r2, 800306c <_ux_dcd_stm32_transfer_callback+0x9e>
					*(transfer_request->ux_slave_transfer_request_setup + 7) == 0)
 8003066:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
					*(transfer_request->ux_slave_transfer_request_setup + 6) == 0 &&
 800306a:	b1aa      	cbz	r2, 8003098 <_ux_dcd_stm32_transfer_callback+0xca>
				if ((*transfer_request->ux_slave_transfer_request_setup & UX_REQUEST_IN) == 0)
 800306c:	2b00      	cmp	r3, #0
 800306e:	da29      	bge.n	80030c4 <_ux_dcd_stm32_transfer_callback+0xf6>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8003070:	2301      	movs	r3, #1
 8003072:	6073      	str	r3, [r6, #4]
			_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8003074:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8003078:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800307c:	4638      	mov	r0, r7
 800307e:	f7ff ff9c 	bl	8002fba <_ux_dcd_stm32_register_set>
 8003082:	e0d6      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
				ed->ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	61f3      	str	r3, [r6, #28]
				_ux_device_stack_control_request_process(transfer_request);
 8003088:	4620      	mov	r0, r4
 800308a:	f000 f9b9 	bl	8003400 <_ux_device_stack_control_request_process>
 800308e:	e7e3      	b.n	8003058 <_ux_dcd_stm32_transfer_callback+0x8a>
					_ux_device_stack_control_request_process(transfer_request);
 8003090:	4620      	mov	r0, r4
 8003092:	f000 f9b5 	bl	8003400 <_ux_device_stack_control_request_process>
 8003096:	e7df      	b.n	8003058 <_ux_dcd_stm32_transfer_callback+0x8a>
				transfer_request->ux_slave_transfer_request_in_transfer_length = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	61e3      	str	r3, [r4, #28]
				transfer_request->ux_slave_transfer_request_requested_length = 0;
 800309c:	6163      	str	r3, [r4, #20]
				transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	6263      	str	r3, [r4, #36]	; 0x24
				ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80030a2:	2304      	movs	r3, #4
 80030a4:	6073      	str	r3, [r6, #4]
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 80030a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80030aa:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80030ae:	4638      	mov	r0, r7
 80030b0:	f7ff ff89 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 80030b4:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 80030b8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80030bc:	4638      	mov	r0, r7
 80030be:	f7ff ff7c 	bl	8002fba <_ux_dcd_stm32_register_set>
 80030c2:	e7d7      	b.n	8003074 <_ux_dcd_stm32_transfer_callback+0xa6>
							_ux_utility_short_get(
 80030c4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80030c8:	f001 f8c6 	bl	8004258 <_ux_utility_short_get>
					transfer_request->ux_slave_transfer_request_requested_length =
 80030cc:	6160      	str	r0, [r4, #20]
					if (transfer_request->ux_slave_transfer_request_requested_length
 80030ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80030d2:	d80e      	bhi.n	80030f2 <_ux_dcd_stm32_transfer_callback+0x124>
						transfer_request->ux_slave_transfer_request_actual_length = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61a3      	str	r3, [r4, #24]
								transfer_request->ux_slave_transfer_request_data_pointer;
 80030d8:	68e3      	ldr	r3, [r4, #12]
						transfer_request->ux_slave_transfer_request_current_data_pointer =
 80030da:	6123      	str	r3, [r4, #16]
						endpoint_size = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 80030dc:	69ea      	ldr	r2, [r5, #28]
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ,
 80030de:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80030e2:	f44f 6131 	mov.w	r1, #2832	; 0xb10
 80030e6:	4638      	mov	r0, r7
 80030e8:	f7ff ff6d 	bl	8002fc6 <_ux_dcd_stm32_register_write>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_RX;
 80030ec:	2302      	movs	r3, #2
 80030ee:	6073      	str	r3, [r6, #4]
 80030f0:	e7c0      	b.n	8003074 <_ux_dcd_stm32_transfer_callback+0xa6>
						_ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 80030f2:	4629      	mov	r1, r5
 80030f4:	4638      	mov	r0, r7
 80030f6:	f001 fabd 	bl	8004674 <_ux_dcd_stm32_endpoint_stall>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	6073      	str	r3, [r6, #4]
						return (UX_SUCCESS);
 80030fe:	e098      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
				fifo_length = ed->ux_dcd_stm32_ed_payload_length;
 8003100:	68f1      	ldr	r1, [r6, #12]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8003102:	69a2      	ldr	r2, [r4, #24]
						transfer_request->ux_slave_transfer_request_requested_length)
 8003104:	6963      	ldr	r3, [r4, #20]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8003106:	429a      	cmp	r2, r3
 8003108:	d82a      	bhi.n	8003160 <_ux_dcd_stm32_transfer_callback+0x192>
					if ((transfer_request->ux_slave_transfer_request_actual_length ==
 800310a:	d002      	beq.n	8003112 <_ux_dcd_stm32_transfer_callback+0x144>
							(fifo_length != endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize))
 800310c:	69ea      	ldr	r2, [r5, #28]
							transfer_request->ux_slave_transfer_request_requested_length) ||
 800310e:	428a      	cmp	r2, r1
 8003110:	d018      	beq.n	8003144 <_ux_dcd_stm32_transfer_callback+0x176>
						transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8003112:	2500      	movs	r5, #0
 8003114:	6225      	str	r5, [r4, #32]
						_ux_device_stack_control_request_process(transfer_request);
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f972 	bl	8003400 <_ux_device_stack_control_request_process>
						ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800311c:	2303      	movs	r3, #3
 800311e:	6073      	str	r3, [r6, #4]
						transfer_request->ux_slave_transfer_request_in_transfer_length = 0;
 8003120:	61e5      	str	r5, [r4, #28]
						transfer_request->ux_slave_transfer_request_requested_length = 0;
 8003122:	6165      	str	r5, [r4, #20]
						transfer_request->ux_slave_transfer_request_phase =
 8003124:	6263      	str	r3, [r4, #36]	; 0x24
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 8003126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800312a:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800312e:	4638      	mov	r0, r7
 8003130:	f7ff ff49 	bl	8002fc6 <_ux_dcd_stm32_register_write>
						_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8003134:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8003138:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800313c:	4638      	mov	r0, r7
 800313e:	f7ff ff3c 	bl	8002fba <_ux_dcd_stm32_register_set>
 8003142:	e076      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
						_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ,
 8003144:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003148:	f44f 6131 	mov.w	r1, #2832	; 0xb10
 800314c:	f7ff ff3b 	bl	8002fc6 <_ux_dcd_stm32_register_write>
						_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 8003150:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8003154:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8003158:	4638      	mov	r0, r7
 800315a:	f7ff ff2e 	bl	8002fba <_ux_dcd_stm32_register_set>
 800315e:	e068      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
					transfer_request->ux_slave_transfer_request_completion_code =
 8003160:	2327      	movs	r3, #39	; 0x27
 8003162:	6223      	str	r3, [r4, #32]
					if (transfer_request->ux_slave_transfer_request_completion_function)
 8003164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d063      	beq.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
						transfer_request->ux_slave_transfer_request_completion_function(
 800316a:	4620      	mov	r0, r4
 800316c:	4798      	blx	r3
 800316e:	e060      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
					ed->ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_IDLE;
 8003170:	2300      	movs	r3, #0
 8003172:	6073      	str	r3, [r6, #4]
 8003174:	e05d      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
								_ux_dcd_stm32_register_write(dcd_stm32,
 8003176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800317a:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800317e:	f7ff ff22 	bl	8002fc6 <_ux_dcd_stm32_register_write>
								_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8003182:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 8003186:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800318a:	4638      	mov	r0, r7
 800318c:	f7ff ff15 	bl	8002fba <_ux_dcd_stm32_register_set>
								transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	6523      	str	r3, [r4, #80]	; 0x50
 8003194:	e04d      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
							/* Get the size of the transfer, used for a IN transaction only. */
							fifo_length =
									transfer_request->ux_slave_transfer_request_in_transfer_length;

							/* Check if the endpoint size is bigger that data requested. */
							if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8003196:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800319a:	4543      	cmp	r3, r8
 800319c:	d800      	bhi.n	80031a0 <_ux_dcd_stm32_transfer_callback+0x1d2>
							fifo_length =
 800319e:	4698      	mov	r8, r3
								/* Adjust the transfer size. */
								fifo_length = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
							}

							/* Keep the FIFO length in the endpoint. */
							ed->ux_dcd_stm32_ed_payload_length = fifo_length;
 80031a0:	f8c6 800c 	str.w	r8, [r6, #12]
							/* Program the transfer size. */
							endpoint_size = fifo_length;

							/* And packet counts. */
							endpoint_size |= ((fifo_length - 1
									+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 80031a4:	69eb      	ldr	r3, [r5, #28]
 80031a6:	eb03 0208 	add.w	r2, r3, r8
 80031aa:	3a01      	subs	r2, #1
 80031ac:	fbb2 f2f3 	udiv	r2, r2, r3
									endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
									<< UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;

							/* Write the size of the FIFO. */
							_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ,
 80031b0:	ea48 42c2 	orr.w	r2, r8, r2, lsl #19
 80031b4:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80031b8:	4638      	mov	r0, r7
 80031ba:	f7ff ff04 	bl	8002fc6 <_ux_dcd_stm32_register_write>
									endpoint_size);

							/* Read the content of the control register. */
							endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32,
 80031be:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80031c2:	4638      	mov	r0, r7
 80031c4:	f7ff fef5 	bl	8002fb2 <_ux_dcd_stm32_register_read>
							/* Enable the IN endpoint FIFO. */
							endpoint_control |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA
									| UX_DCD_STM32_OTG_FS_DIEPCTL_CNAK;

							/* Write the Endpoint Control register. */
							_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 80031c8:	f040 4204 	orr.w	r2, r0, #2214592512	; 0x84000000
 80031cc:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80031d0:	4638      	mov	r0, r7
 80031d2:	f7ff fef8 	bl	8002fc6 <_ux_dcd_stm32_register_write>
									endpoint_control);

							/* Point the FIFO buffer to the current transfer request buffer address. */
							data_pointer =
 80031d6:	6922      	ldr	r2, [r4, #16]
									transfer_request->ux_slave_transfer_request_current_data_pointer;

							/* Adjust the data pointer. */
							transfer_request->ux_slave_transfer_request_current_data_pointer +=
 80031d8:	eb02 0308 	add.w	r3, r2, r8
 80031dc:	6123      	str	r3, [r4, #16]
									fifo_length;

							/* Adjust the transfer length remaining. */
							transfer_request->ux_slave_transfer_request_in_transfer_length -=
 80031de:	69e3      	ldr	r3, [r4, #28]
 80031e0:	eba3 0308 	sub.w	r3, r3, r8
 80031e4:	61e3      	str	r3, [r4, #28]
									fifo_length;

							/* If this is the last packet, set data end as well. */
							if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 80031e6:	b93b      	cbnz	r3, 80031f8 <_ux_dcd_stm32_transfer_callback+0x22a>
								/* Write to the Fifo.  Last packet. */
								_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index,
 80031e8:	68b1      	ldr	r1, [r6, #8]
 80031ea:	2301      	movs	r3, #1
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4643      	mov	r3, r8
 80031f0:	4638      	mov	r0, r7
 80031f2:	f001 fa9d 	bl	8004730 <_ux_dcd_stm32_fifo_write>
 80031f6:	e01c      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
										data_pointer, fifo_length, UX_TRUE);
							else
								/* Write to the Fifo.  More packets to come. */
								_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index,
 80031f8:	68b1      	ldr	r1, [r6, #8]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	4643      	mov	r3, r8
 8003200:	4638      	mov	r0, r7
 8003202:	f001 fa95 	bl	8004730 <_ux_dcd_stm32_fifo_write>
 8003206:	e014      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
		}
	}
	else
	{
		/* We treat non 0 endpoints here. Look at the direction and determine if this an OUT or IN endpoint. */
		if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8003208:	f013 0f80 	tst.w	r3, #128	; 0x80
 800320c:	d015      	beq.n	800323a <_ux_dcd_stm32_transfer_callback+0x26c>
		}
		else
		{
			/* Update the length of the data sent in previous transaction. */
			transfer_request->ux_slave_transfer_request_actual_length +=
					ed->ux_dcd_stm32_ed_payload_length;
 800320e:	68f2      	ldr	r2, [r6, #12]
			transfer_request->ux_slave_transfer_request_actual_length +=
 8003210:	698b      	ldr	r3, [r1, #24]
 8003212:	4413      	add	r3, r2
 8003214:	618b      	str	r3, [r1, #24]

			/* Check if we have data to send. */
			if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 8003216:	69cb      	ldr	r3, [r1, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d171      	bne.n	8003300 <_ux_dcd_stm32_transfer_callback+0x332>
			{
				/* There is no data to send but we may need to send a Zero Length Packet. */
				if (transfer_request->ux_slave_transfer_request_force_zlp == UX_TRUE)
 800321c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800321e:	2b01      	cmp	r3, #1
 8003220:	d05b      	beq.n	80032da <_ux_dcd_stm32_transfer_callback+0x30c>
					transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
				}
				else
				{
					/* Set the completion code to no error. */
					transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8003222:	2300      	movs	r3, #0
 8003224:	620b      	str	r3, [r1, #32]

					/* The transfer is completed. */
					transfer_request->ux_slave_transfer_request_status =
 8003226:	4608      	mov	r0, r1
 8003228:	2302      	movs	r3, #2
 800322a:	f840 3b2c 	str.w	r3, [r0], #44
							UX_TRANSFER_STATUS_COMPLETED;

					/* Non control endpoint operation, use semaphore. */
					_ux_utility_semaphore_put(
 800322e:	f001 f80f 	bl	8004250 <_ux_utility_semaphore_put>
		}
	}

	/* We are done. */
	return (UX_SUCCESS);
}
 8003232:	2000      	movs	r0, #0
 8003234:	b003      	add	sp, #12
 8003236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE));
 800323a:	ea4f 1948 	mov.w	r9, r8, lsl #5
			ULONG stm32_register = _ux_dcd_stm32_register_read(dcd_stm32,
 800323e:	f609 3108 	addw	r1, r9, #2824	; 0xb08
 8003242:	f7ff feb6 	bl	8002fb2 <_ux_dcd_stm32_register_read>
			if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPINT_XFRC)
 8003246:	f010 0f01 	tst.w	r0, #1
 800324a:	d03d      	beq.n	80032c8 <_ux_dcd_stm32_transfer_callback+0x2fa>
				fifo_length = ed->ux_dcd_stm32_ed_payload_length;
 800324c:	68f1      	ldr	r1, [r6, #12]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 800324e:	69a2      	ldr	r2, [r4, #24]
						transfer_request->ux_slave_transfer_request_requested_length)
 8003250:	6963      	ldr	r3, [r4, #20]
				if (transfer_request->ux_slave_transfer_request_actual_length <=
 8003252:	429a      	cmp	r2, r3
 8003254:	d82f      	bhi.n	80032b6 <_ux_dcd_stm32_transfer_callback+0x2e8>
					if ((transfer_request->ux_slave_transfer_request_actual_length ==
 8003256:	d002      	beq.n	800325e <_ux_dcd_stm32_transfer_callback+0x290>
							(fifo_length != endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize))
 8003258:	69ea      	ldr	r2, [r5, #28]
							transfer_request->ux_slave_transfer_request_requested_length) ||
 800325a:	428a      	cmp	r2, r1
 800325c:	d008      	beq.n	8003270 <_ux_dcd_stm32_transfer_callback+0x2a2>
						transfer_request->ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800325e:	2300      	movs	r3, #0
 8003260:	6223      	str	r3, [r4, #32]
						transfer_request->ux_slave_transfer_request_status =
 8003262:	4620      	mov	r0, r4
 8003264:	2302      	movs	r3, #2
 8003266:	f840 3b2c 	str.w	r3, [r0], #44
						_ux_utility_semaphore_put(
 800326a:	f000 fff1 	bl	8004250 <_ux_utility_semaphore_put>
 800326e:	e7e0      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
						if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 8003270:	4293      	cmp	r3, r2
 8003272:	d900      	bls.n	8003276 <_ux_dcd_stm32_transfer_callback+0x2a8>
							fifo_length = endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8003274:	4613      	mov	r3, r2
						if (fifo_length == 0)
 8003276:	b1db      	cbz	r3, 80032b0 <_ux_dcd_stm32_transfer_callback+0x2e2>
									+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 8003278:	4413      	add	r3, r2
 800327a:	3b01      	subs	r3, #1
 800327c:	fbb3 f3f2 	udiv	r3, r3, r2
							endpoint_size = ((fifo_length - 1
 8003280:	fb03 f202 	mul.w	r2, r3, r2
							endpoint_size |= ((fifo_length - 1
 8003284:	ea42 42c3 	orr.w	r2, r2, r3, lsl #19
						_ux_dcd_stm32_register_write(dcd_stm32,
 8003288:	f509 6131 	add.w	r1, r9, #2832	; 0xb10
 800328c:	4638      	mov	r0, r7
 800328e:	f7ff fe9a 	bl	8002fc6 <_ux_dcd_stm32_register_write>
						endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32,
 8003292:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8003296:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800329a:	4641      	mov	r1, r8
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff fe88 	bl	8002fb2 <_ux_dcd_stm32_register_read>
						_ux_dcd_stm32_register_write(dcd_stm32,
 80032a2:	f040 4204 	orr.w	r2, r0, #2214592512	; 0x84000000
 80032a6:	4641      	mov	r1, r8
 80032a8:	4638      	mov	r0, r7
 80032aa:	f7ff fe8c 	bl	8002fc6 <_ux_dcd_stm32_register_write>
 80032ae:	e7c0      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
							endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;
 80032b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032b4:	e7e8      	b.n	8003288 <_ux_dcd_stm32_transfer_callback+0x2ba>
					transfer_request->ux_slave_transfer_request_completion_code =
 80032b6:	2327      	movs	r3, #39	; 0x27
 80032b8:	6223      	str	r3, [r4, #32]
					transfer_request->ux_slave_transfer_request_status =
 80032ba:	4620      	mov	r0, r4
 80032bc:	2302      	movs	r3, #2
 80032be:	f840 3b2c 	str.w	r3, [r0], #44
					_ux_utility_semaphore_put(
 80032c2:	f000 ffc5 	bl	8004250 <_ux_utility_semaphore_put>
 80032c6:	e7b4      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
				transfer_request->ux_slave_transfer_request_completion_code = UX_TRANSFER_ERROR;
 80032c8:	2323      	movs	r3, #35	; 0x23
 80032ca:	6223      	str	r3, [r4, #32]
				transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_COMPLETED;
 80032cc:	4620      	mov	r0, r4
 80032ce:	2302      	movs	r3, #2
 80032d0:	f840 3b2c 	str.w	r3, [r0], #44
				_ux_utility_semaphore_put(&transfer_request->ux_slave_transfer_request_semaphore);
 80032d4:	f000 ffbc 	bl	8004250 <_ux_utility_semaphore_put>
 80032d8:	e7ab      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
									+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_CHANNEL_SIZE),
 80032da:	ea4f 1148 	mov.w	r1, r8, lsl #5
					_ux_dcd_stm32_register_write(dcd_stm32,
 80032de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032e2:	f501 6111 	add.w	r1, r1, #2320	; 0x910
 80032e6:	f7ff fe6e 	bl	8002fc6 <_ux_dcd_stm32_register_write>
					_ux_dcd_stm32_register_set(dcd_stm32,
 80032ea:	f108 0148 	add.w	r1, r8, #72	; 0x48
 80032ee:	f04f 4204 	mov.w	r2, #2214592512	; 0x84000000
 80032f2:	0149      	lsls	r1, r1, #5
 80032f4:	4638      	mov	r0, r7
 80032f6:	f7ff fe60 	bl	8002fba <_ux_dcd_stm32_register_set>
					transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	6523      	str	r3, [r4, #80]	; 0x50
 80032fe:	e798      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
						+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003300:	f108 0948 	add.w	r9, r8, #72	; 0x48
				ULONG endpoint_control_address = (UX_DCD_STM32_OTG_FS_DIEPCTL
 8003304:	ea4f 1949 	mov.w	r9, r9, lsl #5
						+ (stm32_endpoint_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8003308:	ea4f 1848 	mov.w	r8, r8, lsl #5
				ULONG endpoint_size_address = (UX_DCD_STM32_OTG_FS_DIEPTSIZ
 800330c:	f508 6811 	add.w	r8, r8, #2320	; 0x910
				endpoint_control = _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 8003310:	4649      	mov	r1, r9
 8003312:	f7ff fe4e 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 8003316:	4683      	mov	fp, r0
				fifo_length = transfer_request->ux_slave_transfer_request_in_transfer_length;
 8003318:	69e3      	ldr	r3, [r4, #28]
				if (fifo_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 800331a:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 800331e:	459a      	cmp	sl, r3
 8003320:	d300      	bcc.n	8003324 <_ux_dcd_stm32_transfer_callback+0x356>
				fifo_length = transfer_request->ux_slave_transfer_request_in_transfer_length;
 8003322:	469a      	mov	sl, r3
				ed->ux_dcd_stm32_ed_payload_length = fifo_length;
 8003324:	f8c6 a00c 	str.w	sl, [r6, #12]
						+ endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) /
 8003328:	69eb      	ldr	r3, [r5, #28]
 800332a:	eb03 020a 	add.w	r2, r3, sl
 800332e:	3a01      	subs	r2, #1
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
				_ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size);
 8003334:	ea4a 42c2 	orr.w	r2, sl, r2, lsl #19
 8003338:	4641      	mov	r1, r8
 800333a:	4638      	mov	r0, r7
 800333c:	f7ff fe43 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				_ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8003340:	f04b 4204 	orr.w	r2, fp, #2214592512	; 0x84000000
 8003344:	4649      	mov	r1, r9
 8003346:	4638      	mov	r0, r7
 8003348:	f7ff fe3d 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				data_pointer = transfer_request->ux_slave_transfer_request_current_data_pointer;
 800334c:	6922      	ldr	r2, [r4, #16]
				transfer_request->ux_slave_transfer_request_current_data_pointer += fifo_length;
 800334e:	eb02 030a 	add.w	r3, r2, sl
 8003352:	6123      	str	r3, [r4, #16]
				transfer_request->ux_slave_transfer_request_in_transfer_length -= fifo_length;
 8003354:	69e3      	ldr	r3, [r4, #28]
 8003356:	eba3 030a 	sub.w	r3, r3, sl
 800335a:	61e3      	str	r3, [r4, #28]
				if (transfer_request->ux_slave_transfer_request_in_transfer_length == 0)
 800335c:	b13b      	cbz	r3, 800336e <_ux_dcd_stm32_transfer_callback+0x3a0>
					_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index, data_pointer,
 800335e:	68b1      	ldr	r1, [r6, #8]
 8003360:	2300      	movs	r3, #0
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4653      	mov	r3, sl
 8003366:	4638      	mov	r0, r7
 8003368:	f001 f9e2 	bl	8004730 <_ux_dcd_stm32_fifo_write>
 800336c:	e761      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
					_ux_dcd_stm32_fifo_write(dcd_stm32, ed->ux_dcd_stm32_ed_index, data_pointer,
 800336e:	68b1      	ldr	r1, [r6, #8]
 8003370:	2301      	movs	r3, #1
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4653      	mov	r3, sl
 8003376:	4638      	mov	r0, r7
 8003378:	f001 f9da 	bl	8004730 <_ux_dcd_stm32_fifo_write>
 800337c:	e759      	b.n	8003232 <_ux_dcd_stm32_transfer_callback+0x264>
	...

08003380 <_ux_device_stack_class_register>:
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_class_register(UCHAR* class_name,
		UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT*),
		ULONG configuration_number, ULONG interface_number, VOID* parameter)
{
 8003380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003384:	b08c      	sub	sp, #48	; 0x30
 8003386:	4680      	mov	r8, r0
 8003388:	460d      	mov	r5, r1
 800338a:	4617      	mov	r7, r2
 800338c:	461e      	mov	r6, r3
	/* Get the length of the class name (exclude null-terminator). */
	UINT class_name_length = 0;
 800338e:	a90c      	add	r1, sp, #48	; 0x30
 8003390:	2300      	movs	r3, #0
 8003392:	f841 3d04 	str.w	r3, [r1, #-4]!
	UINT status = _ux_utility_string_length_check(class_name, &class_name_length,
 8003396:	223f      	movs	r2, #63	; 0x3f
 8003398:	f000 ff63 	bl	8004262 <_ux_utility_string_length_check>
			UX_MAX_CLASS_NAME_LENGTH);
	if (status)
 800339c:	4603      	mov	r3, r0
 800339e:	bb48      	cbnz	r0, 80033f4 <_ux_device_stack_class_register+0x74>
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name,
			interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* We need to parse the class table to find an empty spot. */
	UX_SLAVE_CLASS* class = _ux_system_slave->ux_system_slave_class_array;
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <_ux_device_stack_class_register+0x7c>)
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	f8d1 4180 	ldr.w	r4, [r1, #384]	; 0x180
	ULONG class_index;
	UX_SLAVE_CLASS_COMMAND command;
	for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class; class_index++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8d1 2178 	ldr.w	r2, [r1, #376]	; 0x178
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d91f      	bls.n	80033f2 <_ux_device_stack_class_register+0x72>
	{
		/* Check if this class is already used. */
		if (class->ux_slave_class_status == UX_UNUSED)
 80033b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033b4:	b11a      	cbz	r2, 80033be <_ux_device_stack_class_register+0x3e>
			/* Return successful completion. */
			return (UX_SUCCESS);
		}

		/* Move to the next class. */
		class++;
 80033b6:	f504 7498 	add.w	r4, r4, #304	; 0x130
	for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class; class_index++)
 80033ba:	3301      	adds	r3, #1
 80033bc:	e7f5      	b.n	80033aa <_ux_device_stack_class_register+0x2a>
			_ux_utility_memory_copy(class->ux_slave_class_name, class_name, class_name_length + 1);
 80033be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033c0:	3201      	adds	r2, #1
 80033c2:	4641      	mov	r1, r8
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 fe76 	bl	80040b6 <_ux_utility_memory_copy>
			class->ux_slave_class_entry_function = class_entry_function;
 80033ca:	6465      	str	r5, [r4, #68]	; 0x44
			class->ux_slave_class_interface_parameter = parameter;
 80033cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80033ce:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
			class->ux_slave_class_configuration_number = configuration_number;
 80033d2:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
			class->ux_slave_class_interface_number = interface_number;
 80033d6:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
			command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 80033da:	2305      	movs	r3, #5
 80033dc:	9300      	str	r3, [sp, #0]
			command.ux_slave_class_command_parameter = parameter;
 80033de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80033e0:	9309      	str	r3, [sp, #36]	; 0x24
			command.ux_slave_class_command_class_ptr = class;
 80033e2:	9408      	str	r4, [sp, #32]
			status = class_entry_function(&command);
 80033e4:	4668      	mov	r0, sp
 80033e6:	47a8      	blx	r5
			if (status != UX_SUCCESS)
 80033e8:	4603      	mov	r3, r0
 80033ea:	b918      	cbnz	r0, 80033f4 <_ux_device_stack_class_register+0x74>
			class->ux_slave_class_status = UX_USED;
 80033ec:	2201      	movs	r2, #1
 80033ee:	6422      	str	r2, [r4, #64]	; 0x40
			return (UX_SUCCESS);
 80033f0:	e000      	b.n	80033f4 <_ux_device_stack_class_register+0x74>
	}

	/* No more entries in the class table. */
	return (UX_MEMORY_INSUFFICIENT);
 80033f2:	2312      	movs	r3, #18
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	b00c      	add	sp, #48	; 0x30
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fc:	2000072c 	.word	0x2000072c

08003400 <_ux_device_stack_control_request_process>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER* transfer_request)
{
 8003400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003404:	b08f      	sub	sp, #60	; 0x3c
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003406:	4b74      	ldr	r3, [pc, #464]	; (80035d8 <_ux_device_stack_control_request_process+0x1d8>)
 8003408:	681f      	ldr	r7, [r3, #0]
	UINT status = UX_ERROR;
	ULONG application_data_length;
	UX_SLAVE_CLASS_COMMAND class_command;

	/* Ensure that the Setup request has been received correctly. */
	if (transfer_request->ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800340a:	6a04      	ldr	r4, [r0, #32]
 800340c:	2c00      	cmp	r4, #0
 800340e:	f040 80dc 	bne.w	80035ca <_ux_device_stack_control_request_process+0x1ca>
 8003412:	4605      	mov	r5, r0
	{
		/* Seems so far, the Setup request is valid. Extract all fields of the request. */
		ULONG request_type = *transfer_request->ux_slave_transfer_request_setup;
 8003414:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
		ULONG request = *(transfer_request->ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8003418:	f890 9055 	ldrb.w	r9, [r0, #85]	; 0x55
		ULONG request_value = _ux_utility_short_get(
 800341c:	3056      	adds	r0, #86	; 0x56
 800341e:	f000 ff1b 	bl	8004258 <_ux_utility_short_get>
 8003422:	4683      	mov	fp, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_VALUE);
		ULONG request_index = _ux_utility_short_get(
 8003424:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8003428:	f000 ff16 	bl	8004258 <_ux_utility_short_get>
 800342c:	4680      	mov	r8, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_INDEX);
		ULONG request_length = _ux_utility_short_get(
 800342e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8003432:	f000 ff11 	bl	8004258 <_ux_utility_short_get>
 8003436:	4682      	mov	sl, r0
				transfer_request->ux_slave_transfer_request_setup + UX_SETUP_LENGTH);

		if (g_index_1 < REQ_MAX_SIZE)
 8003438:	4b68      	ldr	r3, [pc, #416]	; (80035dc <_ux_device_stack_control_request_process+0x1dc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b1d      	cmp	r3, #29
 800343e:	d805      	bhi.n	800344c <_ux_device_stack_control_request_process+0x4c>
		{
			g_reqArr_1[g_index_1++] = request;
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	4a66      	ldr	r2, [pc, #408]	; (80035dc <_ux_device_stack_control_request_process+0x1dc>)
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	4a66      	ldr	r2, [pc, #408]	; (80035e0 <_ux_device_stack_control_request_process+0x1e0>)
 8003448:	f842 9023 	str.w	r9, [r2, r3, lsl #2]
		}

		/* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned
		 * is not a standard descriptor, treat the command as a CLASS command. */
		if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR)
 800344c:	f1a9 0306 	sub.w	r3, r9, #6
 8003450:	2b01      	cmp	r3, #1
 8003452:	d90b      	bls.n	800346c <_ux_device_stack_control_request_process+0x6c>
			request_type |= UX_REQUEST_TYPE_CLASS;
		}

		/* Check if there is a vendor registered function at the application layer.
		 * If the request is VENDOR and the request match, pass the request to the application. */
		if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8003454:	f006 0360 	and.w	r3, r6, #96	; 0x60
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d011      	beq.n	8003480 <_ux_device_stack_control_request_process+0x80>
			}
		}

		/* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
		 * the function has to be passed to the class layer. */
		if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	bf18      	it	ne
 8003460:	2b20      	cmpne	r3, #32
 8003462:	d151      	bne.n	8003508 <_ux_device_stack_control_request_process+0x108>
				((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
		{
			/* Build all the fields of the Class Command. */
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_REQUEST;
 8003464:	2304      	movs	r3, #4
 8003466:	9302      	str	r3, [sp, #8]
	UINT status = UX_ERROR;
 8003468:	25ff      	movs	r5, #255	; 0xff

			/* We need to find which class this request is for. */
			ULONG class_index;
			for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index++)
 800346a:	e03b      	b.n	80034e4 <_ux_device_stack_control_request_process+0xe4>
				&& (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800346c:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8003470:	f013 0f60 	tst.w	r3, #96	; 0x60
 8003474:	d0ee      	beq.n	8003454 <_ux_device_stack_control_request_process+0x54>
			request_type &= (UINT)~UX_REQUEST_TYPE;
 8003476:	f026 0660 	bic.w	r6, r6, #96	; 0x60
			request_type |= UX_REQUEST_TYPE_CLASS;
 800347a:	f046 0620 	orr.w	r6, r6, #32
 800347e:	e7e9      	b.n	8003454 <_ux_device_stack_control_request_process+0x54>
			if (request == _ux_system_slave->ux_system_slave_device_vendor_request)
 8003480:	4a55      	ldr	r2, [pc, #340]	; (80035d8 <_ux_device_stack_control_request_process+0x1d8>)
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	f8d2 11ec 	ldr.w	r1, [r2, #492]	; 0x1ec
 8003488:	4549      	cmp	r1, r9
 800348a:	d1e7      	bne.n	800345c <_ux_device_stack_control_request_process+0x5c>
				status = _ux_system_slave->ux_system_slave_device_vendor_request_function(
 800348c:	f8d2 41f0 	ldr.w	r4, [r2, #496]	; 0x1f0
 8003490:	68eb      	ldr	r3, [r5, #12]
 8003492:	aa0d      	add	r2, sp, #52	; 0x34
 8003494:	9201      	str	r2, [sp, #4]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4653      	mov	r3, sl
 800349a:	4642      	mov	r2, r8
 800349c:	4659      	mov	r1, fp
 800349e:	4648      	mov	r0, r9
 80034a0:	47a0      	blx	r4
				if (status == UX_SUCCESS)
 80034a2:	4605      	mov	r5, r0
 80034a4:	b948      	cbnz	r0, 80034ba <_ux_device_stack_control_request_process+0xba>
					transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					_ux_device_stack_transfer_request(transfer_request, request_length,
 80034ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80034ae:	4651      	mov	r1, sl
 80034b0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80034b4:	f000 fc5a 	bl	8003d6c <_ux_device_stack_transfer_request>
					return (UX_SUCCESS);
 80034b8:	e088      	b.n	80035cc <_ux_device_stack_control_request_process+0x1cc>
					_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 80034ba:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80034be:	f000 fa8f 	bl	80039e0 <_ux_device_stack_endpoint_stall>
					return (UX_SUCCESS);
 80034c2:	2500      	movs	r5, #0
 80034c4:	e082      	b.n	80035cc <_ux_device_stack_control_request_process+0x1cc>
						continue;
				}

				/* Get the class for the interface. */
				UX_SLAVE_CLASS* class =
						_ux_system_slave->ux_system_slave_interface_class_array[class_index];
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <_ux_device_stack_control_request_process+0x1d8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
				UX_SLAVE_CLASS* class =
 80034ca:	f104 0260 	add.w	r2, r4, #96	; 0x60
 80034ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80034d2:	685b      	ldr	r3, [r3, #4]

				/* If class is not ready, try next. */
				if (class == UX_NULL)
 80034d4:	b12b      	cbz	r3, 80034e2 <_ux_device_stack_control_request_process+0xe2>
					continue;

				/* Memorize the class in the command. */
				class_command.ux_slave_class_command_class_ptr = class;
 80034d6:	930a      	str	r3, [sp, #40]	; 0x28

				/* We have found a potential candidate. Call this registered class entry function. */
				status = class->ux_slave_class_entry_function(&class_command);
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	a802      	add	r0, sp, #8
 80034dc:	4798      	blx	r3

				/* The status simply tells us if the registered class handled the
				 * command - if there was an issue processing the command, it would've
				 * stalled the control endpoint, notifying the host (and not us). */
				if (status == UX_SUCCESS)
 80034de:	4605      	mov	r5, r0
 80034e0:	b158      	cbz	r0, 80034fa <_ux_device_stack_control_request_process+0xfa>
			for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index++)
 80034e2:	3401      	adds	r4, #1
 80034e4:	2c0f      	cmp	r4, #15
 80034e6:	d808      	bhi.n	80034fa <_ux_device_stack_control_request_process+0xfa>
				if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 80034e8:	f006 0303 	and.w	r3, r6, #3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1ea      	bne.n	80034c6 <_ux_device_stack_control_request_process+0xc6>
					if ((request_index & 0xFF) != class_index)
 80034f0:	fa5f f388 	uxtb.w	r3, r8
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	d0e6      	beq.n	80034c6 <_ux_device_stack_control_request_process+0xc6>
 80034f8:	e7f3      	b.n	80034e2 <_ux_device_stack_control_request_process+0xe2>

				/* Not handled, try next. */
			}

			/* If no class handled the command, then we have an error here. */
			if (status != UX_SUCCESS)
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	d066      	beq.n	80035cc <_ux_device_stack_control_request_process+0x1cc>
				/* We stall the command (request not supported). */
				_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 80034fe:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003502:	f000 fa6d 	bl	80039e0 <_ux_device_stack_endpoint_stall>
 8003506:	e061      	b.n	80035cc <_ux_device_stack_control_request_process+0x1cc>

			/* We are done for class/vendor request. */
			return (status);
		}

		if (g_index_2 < REQ_MAX_SIZE)
 8003508:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <_ux_device_stack_control_request_process+0x1e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b1d      	cmp	r3, #29
 800350e:	d805      	bhi.n	800351c <_ux_device_stack_control_request_process+0x11c>
		{
			g_reqArr_2[g_index_2++] = request;
 8003510:	1c59      	adds	r1, r3, #1
 8003512:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <_ux_device_stack_control_request_process+0x1e4>)
 8003514:	6011      	str	r1, [r2, #0]
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <_ux_device_stack_control_request_process+0x1e8>)
 8003518:	f842 9023 	str.w	r9, [r2, r3, lsl #2]
		}

		/* At this point, the request must be a standard request that the device stack should handle.
		 * Requests are here: 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, ..., 6, 6, 6, 6, 6, 6, 6, 1 */
		switch (request)
 800351c:	f1b9 0f0c 	cmp.w	r9, #12
 8003520:	d851      	bhi.n	80035c6 <_ux_device_stack_control_request_process+0x1c6>
 8003522:	e8df f009 	tbb	[pc, r9]
 8003526:	1407      	.short	0x1407
 8003528:	22501b50 	.word	0x22501b50
 800352c:	3632502b 	.word	0x3632502b
 8003530:	4a45      	.short	0x4a45
 8003532:	57          	.byte	0x57
 8003533:	00          	.byte	0x00
		{
			// 0
			case UX_GET_STATUS:
				status = _ux_device_stack_get_status(request_type, request_index, request_length);
 8003534:	4652      	mov	r2, sl
 8003536:	4641      	mov	r1, r8
 8003538:	4630      	mov	r0, r6
 800353a:	f000 fa69 	bl	8003a10 <_ux_device_stack_get_status>
 800353e:	4605      	mov	r5, r0
			default:
				status = UX_FUNCTION_NOT_SUPPORTED;
				break;
		}

		if (status != UX_SUCCESS)
 8003540:	2d00      	cmp	r5, #0
 8003542:	d043      	beq.n	80035cc <_ux_device_stack_control_request_process+0x1cc>
			/* Stall the control endpoint to issue protocol error. */
			_ux_device_stack_endpoint_stall(&device->ux_slave_device_control_endpoint);
 8003544:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003548:	f000 fa4a 	bl	80039e0 <_ux_device_stack_endpoint_stall>
 800354c:	e03e      	b.n	80035cc <_ux_device_stack_control_request_process+0x1cc>
				status = _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800354e:	4642      	mov	r2, r8
 8003550:	4659      	mov	r1, fp
 8003552:	4630      	mov	r0, r6
 8003554:	f001 fbce 	bl	8004cf4 <_ux_device_stack_clear_feature>
 8003558:	4605      	mov	r5, r0
				break;
 800355a:	e7f1      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				status = _ux_device_stack_set_feature(request_type, request_value, request_index);
 800355c:	4642      	mov	r2, r8
 800355e:	4659      	mov	r1, fp
 8003560:	4630      	mov	r0, r6
 8003562:	f000 fbcd 	bl	8003d00 <_ux_device_stack_set_feature>
 8003566:	4605      	mov	r5, r0
				break;
 8003568:	e7ea      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				dcd->ux_slave_dcd_device_address = request_value;
 800356a:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
				status = dcd->ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS,
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	465a      	mov	r2, fp
 8003572:	2111      	movs	r1, #17
 8003574:	4638      	mov	r0, r7
 8003576:	4798      	blx	r3
 8003578:	4605      	mov	r5, r0
				break;
 800357a:	e7e1      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				status = _ux_device_stack_descriptor_send(request_value, request_index,
 800357c:	4652      	mov	r2, sl
 800357e:	4641      	mov	r1, r8
 8003580:	4658      	mov	r0, fp
 8003582:	f000 f833 	bl	80035ec <_ux_device_stack_descriptor_send>
 8003586:	4605      	mov	r5, r0
				break;
 8003588:	e7da      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				status = _ux_device_stack_configuration_get();
 800358a:	f001 fbe9 	bl	8004d60 <_ux_device_stack_configuration_get>
 800358e:	4605      	mov	r5, r0
				break;
 8003590:	e7d6      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				if (g_index_2 < REQ_MAX_SIZE)
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <_ux_device_stack_control_request_process+0x1e4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b1d      	cmp	r3, #29
 8003598:	d805      	bhi.n	80035a6 <_ux_device_stack_control_request_process+0x1a6>
					g_reqArr_2[g_index_2++] = request_value;
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <_ux_device_stack_control_request_process+0x1e4>)
 800359e:	6011      	str	r1, [r2, #0]
 80035a0:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <_ux_device_stack_control_request_process+0x1e8>)
 80035a2:	f842 b023 	str.w	fp, [r2, r3, lsl #2]
				status = _ux_device_stack_configuration_set(request_value);
 80035a6:	4658      	mov	r0, fp
 80035a8:	f001 fbee 	bl	8004d88 <_ux_device_stack_configuration_set>
 80035ac:	4605      	mov	r5, r0
				break;
 80035ae:	e7c7      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				status = _ux_device_stack_alternate_setting_get(request_index);
 80035b0:	4640      	mov	r0, r8
 80035b2:	f001 fa97 	bl	8004ae4 <_ux_device_stack_alternate_setting_get>
 80035b6:	4605      	mov	r5, r0
				break;
 80035b8:	e7c2      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				status = _ux_device_stack_alternate_setting_set(request_index, request_value);
 80035ba:	4659      	mov	r1, fp
 80035bc:	4640      	mov	r0, r8
 80035be:	f001 fab5 	bl	8004b2c <_ux_device_stack_alternate_setting_set>
 80035c2:	4605      	mov	r5, r0
				break;
 80035c4:	e7bc      	b.n	8003540 <_ux_device_stack_control_request_process+0x140>
				status = UX_FUNCTION_NOT_SUPPORTED;
 80035c6:	2554      	movs	r5, #84	; 0x54
 80035c8:	e7bc      	b.n	8003544 <_ux_device_stack_control_request_process+0x144>
	UINT status = UX_ERROR;
 80035ca:	25ff      	movs	r5, #255	; 0xff
	}

	/* Return the function status. */
	return (status);
}
 80035cc:	4628      	mov	r0, r5
 80035ce:	b00f      	add	sp, #60	; 0x3c
 80035d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				status = UX_SUCCESS;
 80035d4:	2500      	movs	r5, #0
 80035d6:	e7f9      	b.n	80035cc <_ux_device_stack_control_request_process+0x1cc>
 80035d8:	2000072c 	.word	0x2000072c
 80035dc:	20000228 	.word	0x20000228
 80035e0:	20000230 	.word	0x20000230
 80035e4:	2000022c 	.word	0x2000022c
 80035e8:	200002a8 	.word	0x200002a8

080035ec <_ux_device_stack_descriptor_send>:
 * 3 -> USB_DESC_TYPE_STRING и req->wValue = USBD_IDX_PRODUCT_STR;
 */
uint8_t g_DescOrder[MAX_DESC_COUNT] = { 0 };

UINT _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 80035ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f0:	b089      	sub	sp, #36	; 0x24
 80035f2:	460f      	mov	r7, r1
 80035f4:	4616      	mov	r6, r2
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index,
			0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80035f6:	4bbe      	ldr	r3, [pc, #760]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 80035f8:	681c      	ldr	r4, [r3, #0]

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Get the control endpoint associated with the device. */
	UX_SLAVE_ENDPOINT* endpoint = &device->ux_slave_device_control_endpoint;
 80035fa:	f104 097c 	add.w	r9, r4, #124	; 0x7c

	/* Get the pointer to the transfer request associated with the endpoint. */
	UX_SLAVE_TRANSFER* transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 80035fe:	f104 08ac 	add.w	r8, r4, #172	; 0xac

	/* Set the direction to OUT. */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8003602:	2303      	movs	r3, #3
 8003604:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	/* Isolate the descriptor index. */
	ULONG descriptor_index = descriptor_type & 0xff;
 8003608:	b2c5      	uxtb	r5, r0

	/* Reset the parsed index. */
	ULONG parsed_descriptor_index = 0;

	/* Shift the descriptor type in the low byte field. */
	descriptor_type = (UCHAR)((descriptor_type >> 8) & 0xff);
 800360a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	/*--------------------------------------------------------------------------------------------*/

	if (g_DescIndex < MAX_DESC_COUNT)
 800360e:	4bb9      	ldr	r3, [pc, #740]	; (80038f4 <_ux_device_stack_descriptor_send+0x308>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b3f      	cmp	r3, #63	; 0x3f
 8003614:	d819      	bhi.n	800364a <_ux_device_stack_descriptor_send+0x5e>
	{
		g_DescOrder[g_DescIndex++] = (uint8_t)descriptor_type;
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	4ab6      	ldr	r2, [pc, #728]	; (80038f4 <_ux_device_stack_descriptor_send+0x308>)
 800361a:	6011      	str	r1, [r2, #0]
 800361c:	4ab6      	ldr	r2, [pc, #728]	; (80038f8 <_ux_device_stack_descriptor_send+0x30c>)
 800361e:	54d0      	strb	r0, [r2, r3]
	ULONG configuration_descriptor_length;

	UCHAR* string_memory;

	/* What type of descriptor do we need to return?  */
	switch (descriptor_type)
 8003620:	3801      	subs	r0, #1
 8003622:	280e      	cmp	r0, #14
 8003624:	f200 819a 	bhi.w	800395c <_ux_device_stack_descriptor_send+0x370>
 8003628:	e8df f010 	tbh	[pc, r0, lsl #1]
 800362c:	00cd0013 	.word	0x00cd0013
 8003630:	01980107 	.word	0x01980107
 8003634:	002e0198 	.word	0x002e0198
 8003638:	0198008f 	.word	0x0198008f
 800363c:	0198004e 	.word	0x0198004e
 8003640:	01980198 	.word	0x01980198
 8003644:	01980198 	.word	0x01980198
 8003648:	006e      	.short	0x006e
		g_DescIndex = 0;
 800364a:	4baa      	ldr	r3, [pc, #680]	; (80038f4 <_ux_device_stack_descriptor_send+0x308>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e7e6      	b.n	8003620 <_ux_device_stack_descriptor_send+0x34>
	{
		case UX_DEVICE_DESCRIPTOR_ITEM:						// 1
			/* Setup the length appropriately. */
			length = (host_length > UX_DEVICE_DESCRIPTOR_LENGTH) ? UX_DEVICE_DESCRIPTOR_LENGTH :
 8003652:	4635      	mov	r5, r6
 8003654:	2e12      	cmp	r6, #18
 8003656:	bf28      	it	cs
 8003658:	2512      	movcs	r5, #18
					host_length;

			g_DescOrder[g_DescIndex++] = (uint8_t)length;
 800365a:	4aa6      	ldr	r2, [pc, #664]	; (80038f4 <_ux_device_stack_descriptor_send+0x308>)
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	4aa5      	ldr	r2, [pc, #660]	; (80038f8 <_ux_device_stack_descriptor_send+0x30c>)
 8003664:	54d5      	strb	r5, [r2, r3]

			/* Copy the device descriptor into the transfer request memory. */
			_ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_data_pointer,
					_ux_system_slave->ux_system_slave_device_framework, length);
 8003666:	4ba2      	ldr	r3, [pc, #648]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 8003668:	681b      	ldr	r3, [r3, #0]
			_ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_data_pointer,
 800366a:	462a      	mov	r2, r5
 800366c:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 8003670:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003674:	f000 fd1f 	bl	80040b6 <_ux_utility_memory_copy>

			/* Perform the data transfer.
			 * transfer_request->ux_slave_transfer_request_endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize == 0 ?*/
			status = _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8003678:	4632      	mov	r2, r6
 800367a:	4629      	mov	r1, r5
 800367c:	4640      	mov	r0, r8
 800367e:	f000 fb75 	bl	8003d6c <_ux_device_stack_transfer_request>
			return (UX_ERROR);
	}

	/* Return the status to the caller. */
	return (status);
}
 8003682:	b009      	add	sp, #36	; 0x24
 8003684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			length = (host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH) ?
 8003688:	4635      	mov	r5, r6
 800368a:	2e0a      	cmp	r6, #10
 800368c:	bf28      	it	cs
 800368e:	250a      	movcs	r5, #10
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003690:	4b97      	ldr	r3, [pc, #604]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003698:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 800369c:	4408      	add	r0, r1
			while (device_framework < device_framework_end)
 800369e:	e000      	b.n	80036a2 <_ux_device_stack_descriptor_send+0xb6>
				device_framework += descriptor_length;
 80036a0:	4411      	add	r1, r2
			while (device_framework < device_framework_end)
 80036a2:	4281      	cmp	r1, r0
 80036a4:	d20e      	bcs.n	80036c4 <_ux_device_stack_descriptor_send+0xd8>
				descriptor_type = *(device_framework + 1);
 80036a6:	784b      	ldrb	r3, [r1, #1]
				descriptor_length = (ULONG)*device_framework;
 80036a8:	780a      	ldrb	r2, [r1, #0]
				if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM)
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d1f8      	bne.n	80036a0 <_ux_device_stack_descriptor_send+0xb4>
					_ux_utility_memory_copy(
 80036ae:	462a      	mov	r2, r5
 80036b0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80036b4:	f000 fcff 	bl	80040b6 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 80036b8:	4632      	mov	r2, r6
 80036ba:	4629      	mov	r1, r5
 80036bc:	4640      	mov	r0, r8
 80036be:	f000 fb55 	bl	8003d6c <_ux_device_stack_transfer_request>
					break;
 80036c2:	e7de      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
	UINT status = UX_ERROR;
 80036c4:	20ff      	movs	r0, #255	; 0xff
 80036c6:	e7dc      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
			length = (host_length > UX_OTG_DESCRIPTOR_LENGTH) ? UX_OTG_DESCRIPTOR_LENGTH :
 80036c8:	4635      	mov	r5, r6
 80036ca:	2e05      	cmp	r6, #5
 80036cc:	bf28      	it	cs
 80036ce:	2505      	movcs	r5, #5
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 80036d0:	4b87      	ldr	r3, [pc, #540]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 80036d8:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 80036dc:	4408      	add	r0, r1
			while (device_framework < device_framework_end)
 80036de:	e000      	b.n	80036e2 <_ux_device_stack_descriptor_send+0xf6>
				device_framework += descriptor_length;
 80036e0:	4411      	add	r1, r2
			while (device_framework < device_framework_end)
 80036e2:	4281      	cmp	r1, r0
 80036e4:	d20e      	bcs.n	8003704 <_ux_device_stack_descriptor_send+0x118>
				descriptor_type = *(device_framework + 1);
 80036e6:	784b      	ldrb	r3, [r1, #1]
				descriptor_length = (ULONG)*device_framework;
 80036e8:	780a      	ldrb	r2, [r1, #0]
				if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM)
 80036ea:	2b09      	cmp	r3, #9
 80036ec:	d1f8      	bne.n	80036e0 <_ux_device_stack_descriptor_send+0xf4>
					_ux_utility_memory_copy(
 80036ee:	462a      	mov	r2, r5
 80036f0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80036f4:	f000 fcdf 	bl	80040b6 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 80036f8:	4632      	mov	r2, r6
 80036fa:	4629      	mov	r1, r5
 80036fc:	4640      	mov	r0, r8
 80036fe:	f000 fb35 	bl	8003d6c <_ux_device_stack_transfer_request>
					break;
 8003702:	e7be      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
	UINT status = UX_ERROR;
 8003704:	20ff      	movs	r0, #255	; 0xff
 8003706:	e7bc      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8003708:	4b79      	ldr	r3, [pc, #484]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8003710:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 8003714:	4429      	add	r1, r5
			while (device_framework < device_framework_end)
 8003716:	e000      	b.n	800371a <_ux_device_stack_descriptor_send+0x12e>
				device_framework += descriptor_length;
 8003718:	4415      	add	r5, r2
			while (device_framework < device_framework_end)
 800371a:	428d      	cmp	r5, r1
 800371c:	d213      	bcs.n	8003746 <_ux_device_stack_descriptor_send+0x15a>
				descriptor_type = *(device_framework + 1);
 800371e:	786b      	ldrb	r3, [r5, #1]
				descriptor_length = (ULONG)*device_framework;
 8003720:	782a      	ldrb	r2, [r5, #0]
				if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d1f8      	bne.n	8003718 <_ux_device_stack_descriptor_send+0x12c>
					length = _ux_utility_short_get(device_framework + 2);
 8003726:	1ca8      	adds	r0, r5, #2
 8003728:	f000 fd96 	bl	8004258 <_ux_utility_short_get>
 800372c:	4607      	mov	r7, r0
					_ux_utility_memory_copy(
 800372e:	4602      	mov	r2, r0
 8003730:	4629      	mov	r1, r5
 8003732:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003736:	f000 fcbe 	bl	80040b6 <_ux_utility_memory_copy>
					status = _ux_device_stack_transfer_request(transfer_request, length,
 800373a:	4632      	mov	r2, r6
 800373c:	4639      	mov	r1, r7
 800373e:	4640      	mov	r0, r8
 8003740:	f000 fb14 	bl	8003d6c <_ux_device_stack_transfer_request>
					break;
 8003744:	e79d      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
	UINT status = UX_ERROR;
 8003746:	20ff      	movs	r0, #255	; 0xff
 8003748:	e79b      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
			device_framework = _ux_system_slave->ux_system_slave_device_framework_full_speed;
 800374a:	4b69      	ldr	r3, [pc, #420]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 7150 	ldr.w	r7, [r3, #336]	; 0x150
			device_framework_length =
 8003752:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
			device_framework_end = device_framework + device_framework_length;
 8003756:	4439      	add	r1, r7
	ULONG parsed_descriptor_index = 0;
 8003758:	2000      	movs	r0, #0
			while (device_framework < device_framework_end)
 800375a:	e028      	b.n	80037ae <_ux_device_stack_descriptor_send+0x1c2>
						_ux_utility_descriptor_parse(device_framework,
 800375c:	466b      	mov	r3, sp
 800375e:	2208      	movs	r2, #8
 8003760:	4966      	ldr	r1, [pc, #408]	; (80038fc <_ux_device_stack_descriptor_send+0x310>)
 8003762:	4638      	mov	r0, r7
 8003764:	f000 fbda 	bl	8003f1c <_ux_utility_descriptor_parse>
						configuration_descriptor_length = configuration_descriptor.wTotalLength;
 8003768:	9d02      	ldr	r5, [sp, #8]
						length = (configuration_descriptor_length < host_length) ?
 800376a:	42b5      	cmp	r5, r6
 800376c:	bf28      	it	cs
 800376e:	4635      	movcs	r5, r6
						if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8003770:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003774:	d90a      	bls.n	800378c <_ux_device_stack_descriptor_send+0x1a0>
							_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8003776:	2212      	movs	r2, #18
 8003778:	2109      	movs	r1, #9
 800377a:	2002      	movs	r0, #2
 800377c:	f000 fb50 	bl	8003e20 <_ux_system_error_handler>
							status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 8003780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003782:	464a      	mov	r2, r9
 8003784:	2114      	movs	r1, #20
 8003786:	4620      	mov	r0, r4
 8003788:	4798      	blx	r3
							break;
 800378a:	e77a      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
						_ux_utility_memory_copy(
 800378c:	462a      	mov	r2, r5
 800378e:	4639      	mov	r1, r7
 8003790:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003794:	f000 fc8f 	bl	80040b6 <_ux_utility_memory_copy>
						*(transfer_request->ux_slave_transfer_request_data_pointer + 1) =
 8003798:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800379c:	2207      	movs	r2, #7
 800379e:	705a      	strb	r2, [r3, #1]
						status = _ux_device_stack_transfer_request(transfer_request, length,
 80037a0:	4632      	mov	r2, r6
 80037a2:	4629      	mov	r1, r5
 80037a4:	4640      	mov	r0, r8
 80037a6:	f000 fae1 	bl	8003d6c <_ux_device_stack_transfer_request>
						break;
 80037aa:	e76a      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
				device_framework += descriptor_length;
 80037ac:	4417      	add	r7, r2
			while (device_framework < device_framework_end)
 80037ae:	428f      	cmp	r7, r1
 80037b0:	d207      	bcs.n	80037c2 <_ux_device_stack_descriptor_send+0x1d6>
				descriptor_type = *(device_framework + 1);
 80037b2:	787b      	ldrb	r3, [r7, #1]
				descriptor_length = (ULONG)*device_framework;
 80037b4:	783a      	ldrb	r2, [r7, #0]
				if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d1f8      	bne.n	80037ac <_ux_device_stack_descriptor_send+0x1c0>
					if (parsed_descriptor_index == descriptor_index)
 80037ba:	42a8      	cmp	r0, r5
 80037bc:	d0ce      	beq.n	800375c <_ux_device_stack_descriptor_send+0x170>
						parsed_descriptor_index++;
 80037be:	3001      	adds	r0, #1
 80037c0:	e7f4      	b.n	80037ac <_ux_device_stack_descriptor_send+0x1c0>
	UINT status = UX_ERROR;
 80037c2:	20ff      	movs	r0, #255	; 0xff
 80037c4:	e75d      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
			device_framework = _ux_system_slave->ux_system_slave_device_framework;
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
			device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 80037ce:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
			device_framework_end = device_framework + device_framework_length;
 80037d2:	4439      	add	r1, r7
	ULONG parsed_descriptor_index = 0;
 80037d4:	2000      	movs	r0, #0
			while (device_framework < device_framework_end)
 80037d6:	e024      	b.n	8003822 <_ux_device_stack_descriptor_send+0x236>
						_ux_utility_descriptor_parse(device_framework,
 80037d8:	466b      	mov	r3, sp
 80037da:	2208      	movs	r2, #8
 80037dc:	4947      	ldr	r1, [pc, #284]	; (80038fc <_ux_device_stack_descriptor_send+0x310>)
 80037de:	4638      	mov	r0, r7
 80037e0:	f000 fb9c 	bl	8003f1c <_ux_utility_descriptor_parse>
						configuration_descriptor_length = configuration_descriptor.wTotalLength;
 80037e4:	9d02      	ldr	r5, [sp, #8]
						length = (configuration_descriptor_length < host_length) ?
 80037e6:	42b5      	cmp	r5, r6
 80037e8:	bf28      	it	cs
 80037ea:	4635      	movcs	r5, r6
						if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80037ec:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80037f0:	d90a      	bls.n	8003808 <_ux_device_stack_descriptor_send+0x21c>
							_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80037f2:	2212      	movs	r2, #18
 80037f4:	2109      	movs	r1, #9
 80037f6:	2002      	movs	r0, #2
 80037f8:	f000 fb12 	bl	8003e20 <_ux_system_error_handler>
							status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 80037fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037fe:	464a      	mov	r2, r9
 8003800:	2114      	movs	r1, #20
 8003802:	4620      	mov	r0, r4
 8003804:	4798      	blx	r3
							break;
 8003806:	e73c      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
						_ux_utility_memory_copy(
 8003808:	462a      	mov	r2, r5
 800380a:	4639      	mov	r1, r7
 800380c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003810:	f000 fc51 	bl	80040b6 <_ux_utility_memory_copy>
						status = _ux_device_stack_transfer_request(transfer_request, length,
 8003814:	4632      	mov	r2, r6
 8003816:	4629      	mov	r1, r5
 8003818:	4640      	mov	r0, r8
 800381a:	f000 faa7 	bl	8003d6c <_ux_device_stack_transfer_request>
						break;
 800381e:	e730      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
				device_framework += descriptor_length;
 8003820:	4417      	add	r7, r2
			while (device_framework < device_framework_end)
 8003822:	428f      	cmp	r7, r1
 8003824:	d207      	bcs.n	8003836 <_ux_device_stack_descriptor_send+0x24a>
				descriptor_type = *(device_framework + 1);
 8003826:	787b      	ldrb	r3, [r7, #1]
				descriptor_length = (ULONG)*device_framework;
 8003828:	783a      	ldrb	r2, [r7, #0]
				if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800382a:	2b02      	cmp	r3, #2
 800382c:	d1f8      	bne.n	8003820 <_ux_device_stack_descriptor_send+0x234>
					if (parsed_descriptor_index == descriptor_index)
 800382e:	42a8      	cmp	r0, r5
 8003830:	d0d2      	beq.n	80037d8 <_ux_device_stack_descriptor_send+0x1ec>
						parsed_descriptor_index++;
 8003832:	3001      	adds	r0, #1
 8003834:	e7f4      	b.n	8003820 <_ux_device_stack_descriptor_send+0x234>
	UINT status = UX_ERROR;
 8003836:	20ff      	movs	r0, #255	; 0xff
 8003838:	e723      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
			if (descriptor_index == 0)
 800383a:	bb75      	cbnz	r5, 800389a <_ux_device_stack_descriptor_send+0x2ae>
				if (_ux_system_slave->ux_system_slave_language_id_framework_length
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
						+ 2> UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8003844:	1c9a      	adds	r2, r3, #2
				if (_ux_system_slave->ux_system_slave_language_id_framework_length
 8003846:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800384a:	d819      	bhi.n	8003880 <_ux_device_stack_descriptor_send+0x294>
				string_memory = transfer_request->ux_slave_transfer_request_data_pointer;
 800384c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
						(UCHAR)(_ux_system_slave->ux_system_slave_language_id_framework_length + 2);
 8003850:	3302      	adds	r3, #2
				*string_memory =
 8003852:	7003      	strb	r3, [r0, #0]
				*(string_memory + 1) = UX_STRING_DESCRIPTOR_ITEM;
 8003854:	2303      	movs	r3, #3
 8003856:	7043      	strb	r3, [r0, #1]
						_ux_system_slave->ux_system_slave_language_id_framework,
 8003858:	4c25      	ldr	r4, [pc, #148]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 800385a:	6823      	ldr	r3, [r4, #0]
				_ux_utility_memory_copy(string_memory + 2,
 800385c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8003860:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 8003864:	3002      	adds	r0, #2
 8003866:	f000 fc26 	bl	80040b6 <_ux_utility_memory_copy>
						> _ux_system_slave->ux_system_slave_language_id_framework_length + 2)
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
 8003870:	3102      	adds	r1, #2
				if (host_length
 8003872:	42b1      	cmp	r1, r6
 8003874:	d20f      	bcs.n	8003896 <_ux_device_stack_descriptor_send+0x2aa>
				status = _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8003876:	4632      	mov	r2, r6
 8003878:	4640      	mov	r0, r8
 800387a:	f000 fa77 	bl	8003d6c <_ux_device_stack_transfer_request>
 800387e:	e700      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
					_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK,
 8003880:	2212      	movs	r2, #18
 8003882:	2109      	movs	r1, #9
 8003884:	2002      	movs	r0, #2
 8003886:	f000 facb 	bl	8003e20 <_ux_system_error_handler>
					status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800388a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800388c:	464a      	mov	r2, r9
 800388e:	2114      	movs	r1, #20
 8003890:	4620      	mov	r0, r4
 8003892:	4798      	blx	r3
					break;
 8003894:	e6f5      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
					length = host_length;
 8003896:	4631      	mov	r1, r6
 8003898:	e7ed      	b.n	8003876 <_ux_device_stack_descriptor_send+0x28a>
				UCHAR* string_framework = _ux_system_slave->ux_system_slave_string_framework;
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <_ux_device_stack_descriptor_send+0x304>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8d3 b160 	ldr.w	fp, [r3, #352]	; 0x160
				ULONG string_framework_length =
 80038a2:	f8d3 a164 	ldr.w	sl, [r3, #356]	; 0x164
				while (string_framework_length != 0)
 80038a6:	e033      	b.n	8003910 <_ux_device_stack_descriptor_send+0x324>
								_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80038a8:	2212      	movs	r2, #18
 80038aa:	2109      	movs	r1, #9
 80038ac:	2002      	movs	r0, #2
 80038ae:	f000 fab7 	bl	8003e20 <_ux_system_error_handler>
								status = dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT,
 80038b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038b4:	464a      	mov	r2, r9
 80038b6:	2114      	movs	r1, #20
 80038b8:	4620      	mov	r0, r4
 80038ba:	4798      	blx	r3
								break;
 80038bc:	e043      	b.n	8003946 <_ux_device_stack_descriptor_send+0x35a>
										+ string_length);
 80038be:	1d18      	adds	r0, r3, #4
								*(string_memory + 2 + (string_length * 2)) = *(string_framework + 4
 80038c0:	3301      	adds	r3, #1
 80038c2:	005a      	lsls	r2, r3, #1
 80038c4:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80038c8:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
								*(string_memory + 2 + (string_length * 2) + 1) = 0;
 80038cc:	3201      	adds	r2, #1
 80038ce:	2000      	movs	r0, #0
 80038d0:	5488      	strb	r0, [r1, r2]
							for (string_length = 0; string_length < *(string_framework + 3);
 80038d2:	f89b 2003 	ldrb.w	r2, [fp, #3]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d8f1      	bhi.n	80038be <_ux_device_stack_descriptor_send+0x2d2>
							if (host_length > (UINT)((*(string_framework + 3) * 2) + 2))
 80038da:	3201      	adds	r2, #1
 80038dc:	0051      	lsls	r1, r2, #1
 80038de:	42b1      	cmp	r1, r6
 80038e0:	d300      	bcc.n	80038e4 <_ux_device_stack_descriptor_send+0x2f8>
								length = host_length;
 80038e2:	4631      	mov	r1, r6
							status = _ux_device_stack_transfer_request(transfer_request, length,
 80038e4:	4632      	mov	r2, r6
 80038e6:	4640      	mov	r0, r8
 80038e8:	f000 fa40 	bl	8003d6c <_ux_device_stack_transfer_request>
							break;
 80038ec:	e02b      	b.n	8003946 <_ux_device_stack_descriptor_send+0x35a>
 80038ee:	bf00      	nop
 80038f0:	2000072c 	.word	0x2000072c
 80038f4:	20000320 	.word	0x20000320
 80038f8:	20000324 	.word	0x20000324
 80038fc:	2000014c 	.word	0x2000014c
					string_framework_length -= (ULONG)*(string_framework + 3) + 4;
 8003900:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8003904:	ebaa 0a03 	sub.w	sl, sl, r3
 8003908:	f1aa 0a04 	sub.w	sl, sl, #4
					string_framework += (ULONG)*(string_framework + 3) + 4;
 800390c:	3304      	adds	r3, #4
 800390e:	449b      	add	fp, r3
				while (string_framework_length != 0)
 8003910:	f1ba 0f00 	cmp.w	sl, #0
 8003914:	d016      	beq.n	8003944 <_ux_device_stack_descriptor_send+0x358>
					ULONG curr_index = _ux_utility_short_get(string_framework);
 8003916:	4658      	mov	r0, fp
 8003918:	f000 fc9e 	bl	8004258 <_ux_utility_short_get>
					if (curr_index == request_index)
 800391c:	42b8      	cmp	r0, r7
 800391e:	d1ef      	bne.n	8003900 <_ux_device_stack_descriptor_send+0x314>
						if (*(string_framework + 2) == descriptor_index)
 8003920:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8003924:	42ab      	cmp	r3, r5
 8003926:	d1eb      	bne.n	8003900 <_ux_device_stack_descriptor_send+0x314>
							if (((*(string_framework + 3) * 2) + 2)
 8003928:	f89b 3003 	ldrb.w	r3, [fp, #3]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	2a80      	cmp	r2, #128	; 0x80
 8003930:	dcba      	bgt.n	80038a8 <_ux_device_stack_descriptor_send+0x2bc>
							string_memory =
 8003932:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
							*string_memory = (UCHAR)((*(string_framework + 3) * 2) + 2);
 8003936:	3301      	adds	r3, #1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	700b      	strb	r3, [r1, #0]
							*(string_memory + 1) = UX_STRING_DESCRIPTOR_ITEM;
 800393c:	2303      	movs	r3, #3
 800393e:	704b      	strb	r3, [r1, #1]
							for (string_length = 0; string_length < *(string_framework + 3);
 8003940:	2300      	movs	r3, #0
 8003942:	e7c6      	b.n	80038d2 <_ux_device_stack_descriptor_send+0x2e6>
	UINT status = UX_ERROR;
 8003944:	20ff      	movs	r0, #255	; 0xff
				if (string_framework_length == 0)
 8003946:	f1ba 0f00 	cmp.w	sl, #0
 800394a:	f47f ae9a 	bne.w	8003682 <_ux_device_stack_descriptor_send+0x96>
					dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800394e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003950:	464a      	mov	r2, r9
 8003952:	2114      	movs	r1, #20
 8003954:	4620      	mov	r0, r4
 8003956:	4798      	blx	r3
					return (UX_ERROR);
 8003958:	20ff      	movs	r0, #255	; 0xff
 800395a:	e692      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
			dcd->ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800395c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800395e:	464a      	mov	r2, r9
 8003960:	2114      	movs	r1, #20
 8003962:	4620      	mov	r0, r4
 8003964:	4798      	blx	r3
			return (UX_ERROR);
 8003966:	20ff      	movs	r0, #255	; 0xff
 8003968:	e68b      	b.n	8003682 <_ux_device_stack_descriptor_send+0x96>
 800396a:	bf00      	nop

0800396c <_ux_device_stack_disconnect>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_disconnect(VOID)
{
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <_ux_device_stack_disconnect+0x70>)
 8003972:	681d      	ldr	r5, [r3, #0]

	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_UNREGISTER(device);

	/* If the device was in the configured state, there may be interfaces attached to the configuration. */
	if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8003974:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003976:	2b03      	cmp	r3, #3
 8003978:	d017      	beq.n	80039aa <_ux_device_stack_disconnect+0x3e>
	/*--------------------------------------------------------------------------------------------*/

	UINT status = UX_ERROR;

	/* If the device was attached, we need to destroy the control endpoint. */
	if (device->ux_slave_device_state == UX_DEVICE_ATTACHED)
 800397a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800397c:	2b01      	cmp	r3, #1
 800397e:	d12b      	bne.n	80039d8 <_ux_device_stack_disconnect+0x6c>
		/* Now we can destroy the default control endpoint. */
		status = dcd->ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8003980:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003982:	f105 027c 	add.w	r2, r5, #124	; 0x7c
 8003986:	210f      	movs	r1, #15
 8003988:	4628      	mov	r0, r5
 800398a:	4798      	blx	r3
 800398c:	4604      	mov	r4, r0
				(VOID*)&device->ux_slave_device_control_endpoint);

	/* We are reverting to configuration 0. */
	device->ux_slave_device_configuration_selected = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

	/* Set the device to be non attached. */
	device->ux_slave_device_state = UX_DEVICE_RESET;
 8003994:	642b      	str	r3, [r5, #64]	; 0x40

	/* Check the status change callback. */
	if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <_ux_device_stack_disconnect+0x70>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800399e:	b10b      	cbz	r3, 80039a4 <_ux_device_stack_disconnect+0x38>
	{
		/* Inform the application if a callback function was programmed. */
		_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_REMOVED);
 80039a0:	200a      	movs	r0, #10
 80039a2:	4798      	blx	r3
	}

	/* Return the status to the caller. */
	return (status);
}
 80039a4:	4620      	mov	r0, r4
 80039a6:	b00c      	add	sp, #48	; 0x30
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
		UX_SLAVE_INTERFACE* interface = device->ux_slave_device_first_interface;
 80039aa:	f8d5 4130 	ldr.w	r4, [r5, #304]	; 0x130
		while (interface != UX_NULL)
 80039ae:	e004      	b.n	80039ba <_ux_device_stack_disconnect+0x4e>
			UX_SLAVE_INTERFACE* next_interface = interface->ux_slave_interface_next_interface;
 80039b0:	6b26      	ldr	r6, [r4, #48]	; 0x30
			_ux_device_stack_interface_delete(interface);
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 f982 	bl	8003cbc <_ux_device_stack_interface_delete>
			interface = next_interface;
 80039b8:	4634      	mov	r4, r6
		while (interface != UX_NULL)
 80039ba:	b154      	cbz	r4, 80039d2 <_ux_device_stack_disconnect+0x66>
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80039bc:	2303      	movs	r3, #3
 80039be:	9301      	str	r3, [sp, #4]
			class_command.ux_slave_class_command_interface = (VOID*)interface;
 80039c0:	9403      	str	r4, [sp, #12]
			UX_SLAVE_CLASS* class = interface->ux_slave_interface_class;
 80039c2:	6863      	ldr	r3, [r4, #4]
			class_command.ux_slave_class_command_class_ptr = class;
 80039c4:	9309      	str	r3, [sp, #36]	; 0x24
			if (class != UX_NULL)
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f2      	beq.n	80039b0 <_ux_device_stack_disconnect+0x44>
				class->ux_slave_class_entry_function(&class_command);
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	a801      	add	r0, sp, #4
 80039ce:	4798      	blx	r3
 80039d0:	e7ee      	b.n	80039b0 <_ux_device_stack_disconnect+0x44>
		device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 80039d2:	2301      	movs	r3, #1
 80039d4:	642b      	str	r3, [r5, #64]	; 0x40
 80039d6:	e7d0      	b.n	800397a <_ux_device_stack_disconnect+0xe>
	UINT status = UX_ERROR;
 80039d8:	24ff      	movs	r4, #255	; 0xff
 80039da:	e7d8      	b.n	800398e <_ux_device_stack_disconnect+0x22>
 80039dc:	2000072c 	.word	0x2000072c

080039e0 <_ux_device_stack_endpoint_stall>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <_ux_device_stack_endpoint_stall+0x2c>)
 80039e6:	6818      	ldr	r0, [r3, #0]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80039e8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80039ec:	b672      	cpsid	i
       resets it.  */
    TX_DISABLE

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	b143      	cbz	r3, 8003a06 <_ux_device_stack_endpoint_stall+0x26>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80039f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039f6:	4622      	mov	r2, r4
 80039f8:	2114      	movs	r1, #20
 80039fa:	4798      	blx	r3
        
        /* Mark the endpoint state.  */
        endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80039fc:	2302      	movs	r3, #2
 80039fe:	6063      	str	r3, [r4, #4]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a00:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);       
}
 8003a04:	bd38      	pop	{r3, r4, r5, pc}
    status =  UX_ERROR;
 8003a06:	20ff      	movs	r0, #255	; 0xff
 8003a08:	e7fa      	b.n	8003a00 <_ux_device_stack_endpoint_stall+0x20>
 8003a0a:	bf00      	nop
 8003a0c:	2000072c 	.word	0x2000072c

08003a10 <_ux_device_stack_get_status>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <_ux_device_stack_get_status+0xb4>)
 8003a14:	681c      	ldr	r4, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8003a16:	f104 07ac 	add.w	r7, r4, #172	; 0xac

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8003a1a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8003a1e:	2300      	movs	r3, #0
 8003a20:	702b      	strb	r3, [r5, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8003a22:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8003a26:	706b      	strb	r3, [r5, #1]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8003a28:	f010 0003 	ands.w	r0, r0, #3
 8003a2c:	d00a      	beq.n	8003a44 <_ux_device_stack_get_status+0x34>
 8003a2e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
 8003a32:	2802      	cmp	r0, #2
 8003a34:	d021      	beq.n	8003a7a <_ux_device_stack_get_status+0x6a>
        break;

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a38:	4632      	mov	r2, r6
 8003a3a:	2114      	movs	r1, #20
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8003a40:	2000      	movs	r0, #0
 8003a42:	e03b      	b.n	8003abc <_ux_device_stack_get_status+0xac>
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8003a44:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
 8003a48:	d030      	beq.n	8003aac <_ux_device_stack_get_status+0x9c>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <_ux_device_stack_get_status+0xb4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d00c      	beq.n	8003a70 <_ux_device_stack_get_status+0x60>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <_ux_device_stack_get_status+0xb4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003a5e:	b373      	cbz	r3, 8003abe <_ux_device_stack_get_status+0xae>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8003a60:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8003a64:	7813      	ldrb	r3, [r2, #0]
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	7013      	strb	r3, [r2, #0]
    data_length = 2;
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	e01e      	b.n	8003aae <_ux_device_stack_get_status+0x9e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8003a70:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e7ed      	b.n	8003a56 <_ux_device_stack_get_status+0x46>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
 8003a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a7c:	f021 0280 	bic.w	r2, r1, #128	; 0x80
 8003a80:	2115      	movs	r1, #21
 8003a82:	4620      	mov	r0, r4
 8003a84:	4798      	blx	r3
        if (status != UX_ERROR)
 8003a86:	28ff      	cmp	r0, #255	; 0xff
 8003a88:	d106      	bne.n	8003a98 <_ux_device_stack_get_status+0x88>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	2114      	movs	r1, #20
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
            return(UX_SUCCESS);            
 8003a94:	2000      	movs	r0, #0
 8003a96:	e011      	b.n	8003abc <_ux_device_stack_get_status+0xac>
            if (status == UX_TRUE)
 8003a98:	2801      	cmp	r0, #1
 8003a9a:	d001      	beq.n	8003aa0 <_ux_device_stack_get_status+0x90>
    data_length = 2;
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	e006      	b.n	8003aae <_ux_device_stack_get_status+0x9e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8003aa0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
    data_length = 2;
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	e000      	b.n	8003aae <_ux_device_stack_get_status+0x9e>
            data_length = 1;
 8003aac:	2101      	movs	r1, #1
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f000 f958 	bl	8003d6c <_ux_device_stack_transfer_request>

    /* Return the function status.  */
    return(status);
}
 8003abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    data_length = 2;
 8003abe:	2102      	movs	r1, #2
 8003ac0:	e7f5      	b.n	8003aae <_ux_device_stack_get_status+0x9e>
 8003ac2:	bf00      	nop
 8003ac4:	2000072c 	.word	0x2000072c

08003ac8 <_ux_device_stack_initialize>:
UINT _ux_device_stack_initialize(UCHAR* device_framework_high_speed,
		ULONG device_framework_length_high_speed, UCHAR* device_framework_full_speed,
		ULONG device_framework_length_full_speed, UCHAR* string_framework,
		ULONG string_framework_length, UCHAR* language_id_framework,
		ULONG language_id_framework_length, UINT (*ux_system_slave_change_function)(ULONG))
{
 8003ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8003acc:	4c79      	ldr	r4, [pc, #484]	; (8003cb4 <_ux_device_stack_initialize+0x1ec>)
 8003ace:	6824      	ldr	r4, [r4, #0]

	/* Store the high speed device framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_device_framework_high_speed = device_framework_high_speed;
 8003ad0:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
	_ux_system_slave->ux_system_slave_device_framework_length_high_speed =
 8003ad4:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
			device_framework_length_high_speed;

	/* Store the string framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_device_framework_full_speed = device_framework_full_speed;
 8003ad8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
	_ux_system_slave->ux_system_slave_device_framework_length_full_speed =
 8003adc:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			device_framework_length_full_speed;

	/* Store the string framework address and length in the project structure. */
	_ux_system_slave->ux_system_slave_string_framework = string_framework;
 8003ae0:	9b06      	ldr	r3, [sp, #24]
 8003ae2:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	_ux_system_slave->ux_system_slave_string_framework_length = string_framework_length;
 8003ae6:	9b07      	ldr	r3, [sp, #28]
 8003ae8:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164

	/* Store the language ID list in the project structure. */
	_ux_system_slave->ux_system_slave_language_id_framework = language_id_framework;
 8003aec:	9b08      	ldr	r3, [sp, #32]
 8003aee:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	_ux_system_slave->ux_system_slave_language_id_framework_length = language_id_framework_length;
 8003af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af4:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

	/* Store the max number of slave class drivers in the project structure. */
	_ux_system_slave->ux_system_slave_max_class = UX_MAX_SLAVE_CLASS_DRIVER;
 8003af8:	2303      	movs	r3, #3
 8003afa:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178

	/* Store the device state change function callback. */
	_ux_system_slave->ux_system_slave_change_function = ux_system_slave_change_function;
 8003afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b00:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8

	/* Allocate memory for the classes. sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow
	 * is checked outside of the function. */
	UCHAR* memory = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8003b04:	f44f 7264 	mov.w	r2, #912	; 0x390
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	f000 fa30 	bl	8003f70 <_ux_utility_memory_allocate>
			sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
	if (memory == UX_NULL)
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f000 80cb 	beq.w	8003cac <_ux_device_stack_initialize+0x1e4>
		return (UX_MEMORY_INSUFFICIENT);

	/* Save this memory allocation in the USBX project. */
	_ux_system_slave->ux_system_slave_class_array = (UX_SLAVE_CLASS*)((void*)memory);
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <_ux_device_stack_initialize+0x1ec>)
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
	UX_SLAVE_TRANSFER* transfer_request =
			&device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

	/* Acquire a buffer for the size of the endpoint. */
	transfer_request->ux_slave_transfer_request_data_pointer =
			_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8003b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b22:	2101      	movs	r1, #1
 8003b24:	2000      	movs	r0, #0
 8003b26:	f000 fa23 	bl	8003f70 <_ux_utility_memory_allocate>
	transfer_request->ux_slave_transfer_request_data_pointer =
 8003b2a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
					UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);

	UINT status;

	/* Ensure we have enough memory. */
	if (transfer_request->ux_slave_transfer_request_data_pointer == UX_NULL)
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d051      	beq.n	8003bd6 <_ux_device_stack_initialize+0x10e>
	if (status == UX_SUCCESS)
	{
		/* We need to determine the maximum number of interfaces and endpoints declared in
		 * the device framework. This mechanism requires that both framework behave the same
		 * way regarding the number of interfaces and endpoints. */
		UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework_full_speed;
 8003b32:	4b60      	ldr	r3, [pc, #384]	; (8003cb4 <_ux_device_stack_initialize+0x1ec>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
		ULONG device_framework_length = _ux_system_slave
 8003b3a:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
				->ux_system_slave_device_framework_length_full_speed;

		/* Reset all values we are using during the scanning of the framework. */
		ULONG local_interfaces_found = 0;
		ULONG local_endpoints_found = 0;
		ULONG endpoints_in_interface_found = 0;
 8003b3e:	2000      	movs	r0, #0
		ULONG local_endpoints_found = 0;
 8003b40:	4606      	mov	r6, r0
		ULONG local_interfaces_found = 0;
 8003b42:	4607      	mov	r7, r0
	ULONG endpoints_found = 0;
 8003b44:	4686      	mov	lr, r0
	ULONG interfaces_found = 0;
 8003b46:	4684      	mov	ip, r0

		/* Parse the device framework and locate interfaces and endpoint descriptor(s). */
		while (device_framework_length != 0)
 8003b48:	e00f      	b.n	8003b6a <_ux_device_stack_initialize+0xa2>
						local_interfaces_found++;
					}
					else
					{
						/* Compare the number of endpoints found in this non 0 alternate setting. */
						if (endpoints_in_interface_found < (ULONG)*(device_framework + 4))
 8003b4a:	791d      	ldrb	r5, [r3, #4]
 8003b4c:	4285      	cmp	r5, r0
 8003b4e:	d90a      	bls.n	8003b66 <_ux_device_stack_initialize+0x9e>
							/* Adjust the number of maximum endpoints in this interface. */
							endpoints_in_interface_found = (ULONG)*(device_framework + 4);
 8003b50:	4628      	mov	r0, r5
 8003b52:	e008      	b.n	8003b66 <_ux_device_stack_initialize+0x9e>

					break;

				case UX_CONFIGURATION_DESCRIPTOR_ITEM:
					/* Check if the number of interfaces found in this configuration is the maximum so far. */
					if (local_interfaces_found > interfaces_found)
 8003b54:	45bc      	cmp	ip, r7
 8003b56:	d200      	bcs.n	8003b5a <_ux_device_stack_initialize+0x92>
						/* We need to adjust the number of maximum interfaces. */
						interfaces_found = local_interfaces_found;
 8003b58:	46bc      	mov	ip, r7

					/* We have a new configuration. We need to reset the number of local interfaces. */
					local_interfaces_found = 0;

					/* Add the cumulated number of endpoints in the previous interface. */
					local_endpoints_found += endpoints_in_interface_found;
 8003b5a:	4406      	add	r6, r0

					/* Check if the number of endpoints found in the previous configuration is the maximum so far. */
					if (local_endpoints_found > endpoints_found)
 8003b5c:	45b6      	cmp	lr, r6
 8003b5e:	d312      	bcc.n	8003b86 <_ux_device_stack_initialize+0xbe>
						/* We need to adjust the number of maximum endpoints. */
						endpoints_found = local_endpoints_found;

					/* We have a new configuration. We need to reset the number of local endpoints. */
					local_endpoints_found = 0;
					endpoints_in_interface_found = 0;
 8003b60:	2000      	movs	r0, #0
					local_endpoints_found = 0;
 8003b62:	4606      	mov	r6, r0
					local_interfaces_found = 0;
 8003b64:	4607      	mov	r7, r0
				default:
					break;
			}

			/* Adjust what is left of the device framework. */
			device_framework_length -= descriptor_length;
 8003b66:	1a52      	subs	r2, r2, r1

			/* Point to the next descriptor. */
			device_framework += descriptor_length;
 8003b68:	440b      	add	r3, r1
		while (device_framework_length != 0)
 8003b6a:	b18a      	cbz	r2, 8003b90 <_ux_device_stack_initialize+0xc8>
			ULONG descriptor_length = (ULONG)*device_framework;
 8003b6c:	7819      	ldrb	r1, [r3, #0]
			UCHAR descriptor_type = *(device_framework + 1);
 8003b6e:	785d      	ldrb	r5, [r3, #1]
			switch (descriptor_type)
 8003b70:	2d02      	cmp	r5, #2
 8003b72:	d0ef      	beq.n	8003b54 <_ux_device_stack_initialize+0x8c>
 8003b74:	2d04      	cmp	r5, #4
 8003b76:	d1f6      	bne.n	8003b66 <_ux_device_stack_initialize+0x9e>
					if (*(device_framework + 3) == 0)
 8003b78:	78dd      	ldrb	r5, [r3, #3]
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	d1e5      	bne.n	8003b4a <_ux_device_stack_initialize+0x82>
						local_endpoints_found += endpoints_in_interface_found;
 8003b7e:	4406      	add	r6, r0
						endpoints_in_interface_found = (ULONG)*(device_framework + 4);
 8003b80:	7918      	ldrb	r0, [r3, #4]
						local_interfaces_found++;
 8003b82:	3701      	adds	r7, #1
 8003b84:	e7ef      	b.n	8003b66 <_ux_device_stack_initialize+0x9e>
						endpoints_found = local_endpoints_found;
 8003b86:	46b6      	mov	lr, r6
					endpoints_in_interface_found = 0;
 8003b88:	2000      	movs	r0, #0
					local_endpoints_found = 0;
 8003b8a:	4606      	mov	r6, r0
					local_interfaces_found = 0;
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	e7ea      	b.n	8003b66 <_ux_device_stack_initialize+0x9e>
		}

		/* Add the cumulated number of endpoints in the previous interface. */
		local_endpoints_found += endpoints_in_interface_found;
 8003b90:	4406      	add	r6, r0

		/* Check if the number of endpoints found in the previous interface is the maximum so far. */
		if (local_endpoints_found > endpoints_found)
 8003b92:	45b6      	cmp	lr, r6
 8003b94:	d300      	bcc.n	8003b98 <_ux_device_stack_initialize+0xd0>
 8003b96:	4676      	mov	r6, lr
			/* We need to adjust the number of maximum endpoints. */
			endpoints_found = local_endpoints_found;

		/* Check if the number of interfaces found in this configuration is the maximum so far. */
		if (local_interfaces_found > interfaces_found)
 8003b98:	45bc      	cmp	ip, r7
 8003b9a:	d300      	bcc.n	8003b9e <_ux_device_stack_initialize+0xd6>
 8003b9c:	4667      	mov	r7, ip
			/* We need to adjust the number of maximum interfaces. */
			interfaces_found = local_interfaces_found;

		/* We do a sanity check on the finding. At least there must be one interface but endpoints
		 * are not necessary. */
		if (interfaces_found == 0)
 8003b9e:	b197      	cbz	r7, 8003bc6 <_ux_device_stack_initialize+0xfe>
		status = UX_SUCCESS;
 8003ba0:	f04f 0800 	mov.w	r8, #0
	}

	/*--------------------------------------------------------------------------------------------*/

	/* Go on to allocate endpoints pool if no error. */
	if (status == UX_SUCCESS)
 8003ba4:	f1b8 0f00 	cmp.w	r8, #0
 8003ba8:	d01a      	beq.n	8003be0 <_ux_device_stack_initialize+0x118>
	/*--------------------------------------------------------------------------------------------*/

	UX_SLAVE_ENDPOINT* endpoints_pool;

	/* Do we need an endpoint pool ?  */
	if (endpoints_found != 0 && status == UX_SUCCESS)
 8003baa:	fab8 f388 	clz	r3, r8
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2e00      	cmp	r6, #0
 8003bb2:	bf08      	it	eq
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	bb23      	cbnz	r3, 8003c02 <_ux_device_stack_initialize+0x13a>
				endpoints_pool++;
			}
		}
	}
	else
		endpoints_pool = UX_NULL;
 8003bb8:	2500      	movs	r5, #0

	/* Return successful completion. */
	if (status == UX_SUCCESS)
 8003bba:	f1b8 0f00 	cmp.w	r8, #0
 8003bbe:	d072      	beq.n	8003ca6 <_ux_device_stack_initialize+0x1de>
		return (UX_SUCCESS);

	/*---------------------------- Free resources when there is error ----------------------------*/

	/* Free device -> ux_slave_device_endpoints_pool. */
	if (endpoints_pool)
 8003bc0:	2d00      	cmp	r5, #0
 8003bc2:	d151      	bne.n	8003c68 <_ux_device_stack_initialize+0x1a0>
 8003bc4:	e05f      	b.n	8003c86 <_ux_device_stack_initialize+0x1be>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT,
 8003bc6:	2242      	movs	r2, #66	; 0x42
 8003bc8:	2103      	movs	r1, #3
 8003bca:	2002      	movs	r0, #2
 8003bcc:	f000 f928 	bl	8003e20 <_ux_system_error_handler>
			status = UX_DESCRIPTOR_CORRUPTED;
 8003bd0:	f04f 0842 	mov.w	r8, #66	; 0x42
 8003bd4:	e7e6      	b.n	8003ba4 <_ux_device_stack_initialize+0xdc>
	ULONG endpoints_found = 0;
 8003bd6:	2600      	movs	r6, #0
	ULONG interfaces_found = 0;
 8003bd8:	4637      	mov	r7, r6
		status = UX_MEMORY_INSUFFICIENT;
 8003bda:	f04f 0812 	mov.w	r8, #18
 8003bde:	e7e1      	b.n	8003ba4 <_ux_device_stack_initialize+0xdc>
		device->ux_slave_device_interfaces_pool_number = interfaces_found;
 8003be0:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
		device->ux_slave_device_endpoints_pool_number = endpoints_found;
 8003be4:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		UX_SLAVE_INTERFACE* interfaces_pool = _ux_utility_memory_allocate_mulc_safe(
 8003be8:	2338      	movs	r3, #56	; 0x38
 8003bea:	463a      	mov	r2, r7
 8003bec:	2100      	movs	r1, #0
 8003bee:	4608      	mov	r0, r1
 8003bf0:	f000 fa52 	bl	8004098 <_ux_utility_memory_allocate_mulc_safe>
		if (interfaces_pool == UX_NULL)
 8003bf4:	b110      	cbz	r0, 8003bfc <_ux_device_stack_initialize+0x134>
			device->ux_slave_device_interfaces_pool = interfaces_pool;
 8003bf6:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8003bfa:	e7d6      	b.n	8003baa <_ux_device_stack_initialize+0xe2>
			status = UX_MEMORY_INSUFFICIENT;
 8003bfc:	f04f 0812 	mov.w	r8, #18
 8003c00:	e7d3      	b.n	8003baa <_ux_device_stack_initialize+0xe2>
		endpoints_pool = _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 8003c02:	2390      	movs	r3, #144	; 0x90
 8003c04:	4632      	mov	r2, r6
 8003c06:	2100      	movs	r1, #0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	f000 fa45 	bl	8004098 <_ux_utility_memory_allocate_mulc_safe>
		if (endpoints_pool == UX_NULL)
 8003c0e:	4605      	mov	r5, r0
 8003c10:	b308      	cbz	r0, 8003c56 <_ux_device_stack_initialize+0x18e>
			device->ux_slave_device_endpoints_pool = endpoints_pool;
 8003c12:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
			while (endpoints_pool < (device->ux_slave_device_endpoints_pool + endpoints_found))
 8003c16:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8003c1a:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
 8003c1e:	010a      	lsls	r2, r1, #4
 8003c20:	4413      	add	r3, r2
 8003c22:	42ab      	cmp	r3, r5
 8003c24:	d9c9      	bls.n	8003bba <_ux_device_stack_initialize+0xf2>
						_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8003c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f000 f99f 	bl	8003f70 <_ux_utility_memory_allocate>
						.ux_slave_transfer_request_data_pointer =
 8003c32:	63e8      	str	r0, [r5, #60]	; 0x3c
				if (endpoints_pool->ux_slave_endpoint_transfer_request
 8003c34:	b148      	cbz	r0, 8003c4a <_ux_device_stack_initialize+0x182>
				status = _ux_utility_semaphore_create(
 8003c36:	2200      	movs	r2, #0
 8003c38:	491f      	ldr	r1, [pc, #124]	; (8003cb8 <_ux_device_stack_initialize+0x1f0>)
 8003c3a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003c3e:	f000 faf5 	bl	800422c <_ux_utility_semaphore_create>
				if (status != UX_SUCCESS)
 8003c42:	4680      	mov	r8, r0
 8003c44:	b920      	cbnz	r0, 8003c50 <_ux_device_stack_initialize+0x188>
				endpoints_pool++;
 8003c46:	3590      	adds	r5, #144	; 0x90
 8003c48:	e7e5      	b.n	8003c16 <_ux_device_stack_initialize+0x14e>
					status = UX_MEMORY_INSUFFICIENT;
 8003c4a:	f04f 0812 	mov.w	r8, #18
 8003c4e:	e7b4      	b.n	8003bba <_ux_device_stack_initialize+0xf2>
					status = UX_SEMAPHORE_ERROR;
 8003c50:	f04f 0815 	mov.w	r8, #21
 8003c54:	e7b1      	b.n	8003bba <_ux_device_stack_initialize+0xf2>
			status = UX_MEMORY_INSUFFICIENT;
 8003c56:	f04f 0812 	mov.w	r8, #18
 8003c5a:	e7b1      	b.n	8003bc0 <_ux_device_stack_initialize+0xf8>
		while (endpoints_pool >= device->ux_slave_device_endpoints_pool)
		{
			/* Delete ux_slave_transfer_request_semaphore. */
			if (endpoints_pool->ux_slave_endpoint_transfer_request
					.ux_slave_transfer_request_semaphore.tx_semaphore_id != 0)
				_ux_utility_semaphore_delete(&endpoints_pool->ux_slave_endpoint_transfer_request
 8003c5c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003c60:	f000 faf2 	bl	8004248 <_ux_utility_semaphore_delete>
 8003c64:	e007      	b.n	8003c76 <_ux_device_stack_initialize+0x1ae>
					.ux_slave_transfer_request_data_pointer)
				_ux_utility_memory_free(endpoints_pool->ux_slave_endpoint_transfer_request
								.ux_slave_transfer_request_data_pointer);

			/* Move to previous endpoint. */
			endpoints_pool--;
 8003c66:	3d90      	subs	r5, #144	; 0x90
		while (endpoints_pool >= device->ux_slave_device_endpoints_pool)
 8003c68:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8003c6c:	42a8      	cmp	r0, r5
 8003c6e:	d808      	bhi.n	8003c82 <_ux_device_stack_initialize+0x1ba>
					.ux_slave_transfer_request_semaphore.tx_semaphore_id != 0)
 8003c70:	6deb      	ldr	r3, [r5, #92]	; 0x5c
			if (endpoints_pool->ux_slave_endpoint_transfer_request
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f2      	bne.n	8003c5c <_ux_device_stack_initialize+0x194>
					.ux_slave_transfer_request_data_pointer)
 8003c76:	6be8      	ldr	r0, [r5, #60]	; 0x3c
			if (endpoints_pool->ux_slave_endpoint_transfer_request
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d0f4      	beq.n	8003c66 <_ux_device_stack_initialize+0x19e>
				_ux_utility_memory_free(endpoints_pool->ux_slave_endpoint_transfer_request
 8003c7c:	f000 fa26 	bl	80040cc <_ux_utility_memory_free>
 8003c80:	e7f1      	b.n	8003c66 <_ux_device_stack_initialize+0x19e>
		}

		_ux_utility_memory_free(device->ux_slave_device_endpoints_pool);
 8003c82:	f000 fa23 	bl	80040cc <_ux_utility_memory_free>
	}

	/* Free device -> ux_slave_device_interfaces_pool. */
	if (device->ux_slave_device_interfaces_pool)
 8003c86:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8003c8a:	b108      	cbz	r0, 8003c90 <_ux_device_stack_initialize+0x1c8>
		_ux_utility_memory_free(device->ux_slave_device_interfaces_pool);
 8003c8c:	f000 fa1e 	bl	80040cc <_ux_utility_memory_free>

	/* Free device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
	 * 		.ux_slave_transfer_request_data_pointer. */
	if (device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
			.ux_slave_transfer_request_data_pointer)
 8003c90:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
 8003c94:	b108      	cbz	r0, 8003c9a <_ux_device_stack_initialize+0x1d2>
		_ux_utility_memory_free(
 8003c96:	f000 fa19 	bl	80040cc <_ux_utility_memory_free>
				device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request
						.ux_slave_transfer_request_data_pointer);

	/* Free _ux_system_slave -> ux_system_slave_class_array. */
	_ux_utility_memory_free(_ux_system_slave->ux_system_slave_class_array);
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <_ux_device_stack_initialize+0x1ec>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8003ca2:	f000 fa13 	bl	80040cc <_ux_utility_memory_free>

	/* Return completion status. */
	return (status);
}
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (UX_MEMORY_INSUFFICIENT);
 8003cac:	f04f 0812 	mov.w	r8, #18
 8003cb0:	e7f9      	b.n	8003ca6 <_ux_device_stack_initialize+0x1de>
 8003cb2:	bf00      	nop
 8003cb4:	2000072c 	.word	0x2000072c
 8003cb8:	0800735c 	.word	0x0800735c

08003cbc <_ux_device_stack_interface_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	4606      	mov	r6, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <_ux_device_stack_interface_delete+0x40>)
 8003cc2:	681f      	ldr	r7, [r3, #0]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 8003cc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8003cc6:	e00d      	b.n	8003ce4 <_ux_device_stack_interface_delete+0x28>

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8003cc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <_ux_device_stack_interface_delete+0x40>)
 8003ccc:	6818      	ldr	r0, [r3, #0]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8003cce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6023      	str	r3, [r4, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8003cda:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8003cdc:	6263      	str	r3, [r4, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8003cde:	62a3      	str	r3, [r4, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8003ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8003ce2:	462c      	mov	r4, r5
    while (next_endpoint != UX_NULL)
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	d1ef      	bne.n	8003cc8 <_ux_device_stack_interface_delete+0xc>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8003ce8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 8003cee:	2000      	movs	r0, #0
 8003cf0:	6070      	str	r0, [r6, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8003cf2:	60b0      	str	r0, [r6, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 8003cf4:	6330      	str	r0, [r6, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8003cf6:	6370      	str	r0, [r6, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 8003cf8:	6030      	str	r0, [r6, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 8003cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cfc:	2000072c 	.word	0x2000072c

08003d00 <_ux_device_stack_set_feature>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8003d00:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <_ux_device_stack_set_feature+0x68>)
 8003d04:	681d      	ldr	r5, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8003d06:	f010 0003 	ands.w	r0, r0, #3
 8003d0a:	d00b      	beq.n	8003d24 <_ux_device_stack_set_feature+0x24>
 8003d0c:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8003d10:	4614      	mov	r4, r2
 8003d12:	2802      	cmp	r0, #2
 8003d14:	d012      	beq.n	8003d3c <_ux_device_stack_set_feature+0x3c>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8003d16:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003d18:	4632      	mov	r2, r6
 8003d1a:	2114      	movs	r1, #20
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8003d20:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8003d24:	2901      	cmp	r1, #1
 8003d26:	d001      	beq.n	8003d2c <_ux_device_stack_set_feature+0x2c>
    return(UX_SUCCESS);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e7fa      	b.n	8003d22 <_ux_device_stack_set_feature+0x22>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8003d2c:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 8003d30:	b1bb      	cbz	r3, 8003d62 <_ux_device_stack_set_feature+0x62>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
                return (UX_SUCCESS);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e7f2      	b.n	8003d22 <_ux_device_stack_set_feature+0x22>
        interface =  device -> ux_slave_device_first_interface;
 8003d3c:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
        while (interface != UX_NULL)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d0e8      	beq.n	8003d16 <_ux_device_stack_set_feature+0x16>
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8003d44:	6b42      	ldr	r2, [r0, #52]	; 0x34
            while (endpoint_target != UX_NULL)
 8003d46:	b152      	cbz	r2, 8003d5e <_ux_device_stack_set_feature+0x5e>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8003d48:	6951      	ldr	r1, [r2, #20]
 8003d4a:	42a1      	cmp	r1, r4
 8003d4c:	d001      	beq.n	8003d52 <_ux_device_stack_set_feature+0x52>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8003d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d50:	e7f9      	b.n	8003d46 <_ux_device_stack_set_feature+0x46>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8003d52:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8003d54:	2114      	movs	r1, #20
 8003d56:	4628      	mov	r0, r5
 8003d58:	47a0      	blx	r4
                    return(UX_SUCCESS);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	e7e1      	b.n	8003d22 <_ux_device_stack_set_feature+0x22>
            interface =  interface -> ux_slave_interface_next_interface;
 8003d5e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003d60:	e7ee      	b.n	8003d40 <_ux_device_stack_set_feature+0x40>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8003d62:	2054      	movs	r0, #84	; 0x54
 8003d64:	e7dd      	b.n	8003d22 <_ux_device_stack_set_feature+0x22>
 8003d66:	bf00      	nop
 8003d68:	2000072c 	.word	0x2000072c

08003d6c <_ux_device_stack_transfer_request>:
		ULONG host_length)
{
	TX_INTERRUPT_SAVE_AREA

	/* Do we have to skip this transfer?  */
	if (transfer_request->ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8003d6c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d051      	beq.n	8003e16 <_ux_device_stack_transfer_request+0xaa>
{
 8003d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003d76:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003d7a:	b672      	cpsid	i
	/* Disable interrupts to prevent the disconnection ISR from preempting us
	 * while we check the device state and set the transfer status. */
	TX_DISABLE

	/* Get the device state. */
	ULONG device_state = _ux_system_slave->ux_system_slave_device.ux_slave_device_state;
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <_ux_device_stack_transfer_request+0xb0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED. */
	if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
			|| (device_state == UX_DEVICE_CONFIGURED))
 8003d82:	3b01      	subs	r3, #1
	if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d821      	bhi.n	8003dcc <_ux_device_stack_transfer_request+0x60>
 8003d88:	4617      	mov	r7, r2
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	4604      	mov	r4, r0
		/* Set the transfer to pending. */
		transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6003      	str	r3, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003d92:	f386 8810 	msr	PRIMASK, r6
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <_ux_device_stack_transfer_request+0xb0>)
 8003d98:	f8d3 8000 	ldr.w	r8, [r3]

	/* Get the endpoint associated with this transaction. */
	UX_SLAVE_ENDPOINT* endpoint = transfer_request->ux_slave_transfer_request_endpoint;
 8003d9c:	6886      	ldr	r6, [r0, #8]

	/* If the endpoint is non Control, check the endpoint direction and set the data phase direction. */
	if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE)
 8003d9e:	69b3      	ldr	r3, [r6, #24]
 8003da0:	f013 0f03 	tst.w	r3, #3
 8003da4:	d119      	bne.n	8003dda <_ux_device_stack_transfer_request+0x6e>
	}

	/* See if we need to force a zero length packet at the end of the transfer. This happens on
	 * a DATA IN and when the host requested length is not met and the last packet is on a boundary.
	 * If slave_length is zero, then it is a explicit ZLP request, no need to force ZLP. */
	if ((transfer_request->ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8003da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d023      	beq.n	8003df4 <_ux_device_stack_transfer_request+0x88>
		transfer_request->ux_slave_transfer_request_force_zlp = UX_TRUE;
	}
	else
	{
		/* Condition is not met, do not force a Zero Length Packet. */
		transfer_request->ux_slave_transfer_request_force_zlp = UX_FALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	6523      	str	r3, [r4, #80]	; 0x50
	}

	/* Reset the number of bytes sent/received. */
	transfer_request->ux_slave_transfer_request_actual_length = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61a3      	str	r3, [r4, #24]

	/* Determine how many bytes to send in this transaction.
	 * We keep track of the original length and have a working length. */
	transfer_request->ux_slave_transfer_request_requested_length = slave_length;
 8003db4:	6165      	str	r5, [r4, #20]
	transfer_request->ux_slave_transfer_request_in_transfer_length = slave_length;
 8003db6:	61e5      	str	r5, [r4, #28]

	/* Save the buffer pointer. */
	transfer_request->ux_slave_transfer_request_current_data_pointer =
			transfer_request->ux_slave_transfer_request_data_pointer;
 8003db8:	68e3      	ldr	r3, [r4, #12]
	transfer_request->ux_slave_transfer_request_current_data_pointer =
 8003dba:	6123      	str	r3, [r4, #16]

	/* Call the DCD driver transfer function.   */
	UINT status = dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8003dbc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	210c      	movs	r1, #12
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	4798      	blx	r3

	/* And return the status. */
	return (status);
}
 8003dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dcc:	f386 8810 	msr	PRIMASK, r6
		return (UX_TRANSFER_NOT_READY);
 8003dd0:	2025      	movs	r0, #37	; 0x25
 8003dd2:	e7f9      	b.n	8003dc8 <_ux_device_stack_transfer_request+0x5c>
			_ux_utility_delay_ms(100);
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	f000 f893 	bl	8003f00 <_ux_utility_delay_ms>
		while (endpoint->ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8003dda:	6873      	ldr	r3, [r6, #4]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d0f9      	beq.n	8003dd4 <_ux_device_stack_transfer_request+0x68>
		if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8003de0:	6973      	ldr	r3, [r6, #20]
 8003de2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003de6:	d002      	beq.n	8003dee <_ux_device_stack_transfer_request+0x82>
			transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	6263      	str	r3, [r4, #36]	; 0x24
 8003dec:	e7db      	b.n	8003da6 <_ux_device_stack_transfer_request+0x3a>
			transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_IN;
 8003dee:	2302      	movs	r3, #2
 8003df0:	6263      	str	r3, [r4, #36]	; 0x24
 8003df2:	e7d8      	b.n	8003da6 <_ux_device_stack_transfer_request+0x3a>
			(slave_length != 0) && (host_length != slave_length) &&
 8003df4:	1bef      	subs	r7, r5, r7
 8003df6:	bf18      	it	ne
 8003df8:	2701      	movne	r7, #1
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	d0d6      	beq.n	8003dac <_ux_device_stack_transfer_request+0x40>
 8003dfe:	2f00      	cmp	r7, #0
 8003e00:	d0d4      	beq.n	8003dac <_ux_device_stack_transfer_request+0x40>
			(slave_length % endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8003e02:	69f2      	ldr	r2, [r6, #28]
 8003e04:	fbb5 f3f2 	udiv	r3, r5, r2
 8003e08:	fb02 5313 	mls	r3, r2, r3, r5
			(slave_length != 0) && (host_length != slave_length) &&
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1cd      	bne.n	8003dac <_ux_device_stack_transfer_request+0x40>
		transfer_request->ux_slave_transfer_request_force_zlp = UX_TRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	6523      	str	r3, [r4, #80]	; 0x50
 8003e14:	e7cc      	b.n	8003db0 <_ux_device_stack_transfer_request+0x44>
		return (UX_SUCCESS);
 8003e16:	2000      	movs	r0, #0
}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000072c 	.word	0x2000072c

08003e20 <_ux_system_error_handler>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8003e20:	b510      	push	{r4, lr}
	/* Save the last system error code.  */
	_ux_system->ux_system_last_error = error_code;
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_ux_system_error_handler+0x18>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58

	/* Increment the total number of system errors.  */
	_ux_system->ux_system_error_count++;
 8003e28:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8003e2a:	3401      	adds	r4, #1
 8003e2c:	65dc      	str	r4, [r3, #92]	; 0x5c

	/* Is there an application call back function to call ? */
	if (_ux_system->ux_system_error_callback_function != UX_NULL)
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e30:	b103      	cbz	r3, 8003e34 <_ux_system_error_handler+0x14>
	{
		/* The callback function is defined, call it.  */
		_ux_system->ux_system_error_callback_function(system_level, system_context, error_code);
 8003e32:	4798      	blx	r3
	}
}
 8003e34:	bd10      	pop	{r4, pc}
 8003e36:	bf00      	nop
 8003e38:	20000734 	.word	0x20000734

08003e3c <_ux_system_initialize>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_initialize(VOID* regular_memory_pool_start, ULONG regular_memory_size,
		VOID* cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460f      	mov	r7, r1
 8003e42:	4615      	mov	r5, r2
 8003e44:	461e      	mov	r6, r3
	/* Reset memory block */
	_ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size);
 8003e46:	460a      	mov	r2, r1
 8003e48:	2100      	movs	r1, #0
 8003e4a:	f000 f9c3 	bl	80041d4 <_ux_utility_memory_set>

	/* Set the _ux_system structure at the start of our regular memory */
	_ux_system = (UX_SYSTEM*)regular_memory_pool_start;
 8003e4e:	4b27      	ldr	r3, [pc, #156]	; (8003eec <_ux_system_initialize+0xb0>)
 8003e50:	601c      	str	r4, [r3, #0]

	/*--------------------------------------------------------------------------------------------*/

#ifndef UX_DEVICE_SIDE_ONLY
	/* Set the _ux_system_host structure. */
	_ux_system_host = (UX_SYSTEM_HOST*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8003e52:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003e56:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <_ux_system_initialize+0xb4>)
 8003e58:	6011      	str	r1, [r2, #0]
	memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_HOST);
#endif

#ifndef UX_HOST_SIDE_ONLY
	/* Set the _ux_system_slave structure. */
	_ux_system_slave = (UX_SYSTEM_SLAVE*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8003e5a:	f504 7158 	add.w	r1, r4, #864	; 0x360
 8003e5e:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <_ux_system_initialize+0xb8>)
 8003e60:	6011      	str	r1, [r2, #0]
	memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

	/* Set the cache safe memory for the dynamic pool */
	_ux_system->ux_system_regular_memory_pool_start =
			(UX_MEMORY_BLOCK*)(((UCHAR*)regular_memory_pool_start) + memory_pool_offset);
 8003e62:	f204 5254 	addw	r2, r4, #1364	; 0x554
	_ux_system->ux_system_regular_memory_pool_start =
 8003e66:	6022      	str	r2, [r4, #0]

	/* Make sure the regular memory pool is aligned properly */
	ALIGN_TYPE int_memory_pool_start = (ALIGN_TYPE)_ux_system->ux_system_regular_memory_pool_start;
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	6813      	ldr	r3, [r2, #0]
	int_memory_pool_start += UX_ALIGN_MIN;
 8003e6c:	330f      	adds	r3, #15
	int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8003e6e:	f023 030f 	bic.w	r3, r3, #15

	/* Set the end of the regular memory pool. */
	VOID* regular_memory_pool_end =
 8003e72:	443c      	add	r4, r7
			(void*)(((UCHAR*)regular_memory_pool_start) + regular_memory_size);

	/* Check if we have memory available. */
	if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8003e74:	429c      	cmp	r4, r3
 8003e76:	d936      	bls.n	8003ee6 <_ux_system_initialize+0xaa>
		/* No memory available. */
		return (UX_MEMORY_INSUFFICIENT);
	}

	/* Now, we have a project structure allocated, save the regular memory allocation details */
	_ux_system->ux_system_regular_memory_pool_size = (ULONG)(((ALIGN_TYPE)regular_memory_pool_end)
 8003e78:	1ae4      	subs	r4, r4, r3
 8003e7a:	6054      	str	r4, [r2, #4]
			- int_memory_pool_start);
	_ux_system->ux_system_regular_memory_pool_free = _ux_system->ux_system_regular_memory_pool_size;
 8003e7c:	6094      	str	r4, [r2, #8]
	_ux_system->ux_system_regular_memory_pool_start = (UX_MEMORY_BLOCK*)int_memory_pool_start;
 8003e7e:	6013      	str	r3, [r2, #0]

	/*--------------------------------------------------------------------------------------------*/

	/* Build the first free memory block */
	UX_MEMORY_BLOCK* memory_block = _ux_system->ux_system_regular_memory_pool_start;
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <_ux_system_initialize+0xb0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
	memory_block->ux_memory_block_size = _ux_system->ux_system_regular_memory_pool_size
 8003e86:	685b      	ldr	r3, [r3, #4]
			- (ULONG)sizeof(UX_MEMORY_BLOCK);
 8003e88:	3b10      	subs	r3, #16
	memory_block->ux_memory_block_size = _ux_system->ux_system_regular_memory_pool_size
 8003e8a:	6013      	str	r3, [r2, #0]
	memory_block->ux_memory_block_status = UX_MEMORY_UNUSED;
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <_ux_system_initialize+0xbc>)
 8003e8e:	6053      	str	r3, [r2, #4]

	/* Check the definition of the cache safe pool. If the application or controller do not require
	 * any cache safe memory, define the cached safe memory region as the regular memory region. */
	if (cache_safe_memory_pool_start == UX_NULL)
 8003e90:	b1f5      	cbz	r5, 8003ed0 <_ux_system_initialize+0x94>
	}
	else
	{
		/* Make sure the cache safe memory pool is aligned properly */
		int_memory_pool_start = (ALIGN_TYPE)cache_safe_memory_pool_start;
		int_memory_pool_start += UX_ALIGN_MIN;
 8003e92:	f105 000f 	add.w	r0, r5, #15
		int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8003e96:	f020 000f 	bic.w	r0, r0, #15

		/* Save the cache safe memory allocation details */
		_ux_system->ux_system_cache_safe_memory_pool_size = cache_safe_memory_size - UX_ALIGN_MIN;
 8003e9a:	4c14      	ldr	r4, [pc, #80]	; (8003eec <_ux_system_initialize+0xb0>)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f1a6 020f 	sub.w	r2, r6, #15
 8003ea2:	611a      	str	r2, [r3, #16]
		_ux_system->ux_system_cache_safe_memory_pool_free = _ux_system
 8003ea4:	615a      	str	r2, [r3, #20]
				->ux_system_cache_safe_memory_pool_size;
		_ux_system->ux_system_cache_safe_memory_pool_start =
 8003ea6:	60d8      	str	r0, [r3, #12]
				(UX_MEMORY_BLOCK*)int_memory_pool_start;

		/* Reset this memory block */
		_ux_utility_memory_set(_ux_system->ux_system_cache_safe_memory_pool_start, 0,
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f000 f993 	bl	80041d4 <_ux_utility_memory_set>
				_ux_system->ux_system_cache_safe_memory_pool_size);

		/* Build the first free memory block */
		memory_block = _ux_system->ux_system_cache_safe_memory_pool_start;
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
		memory_block->ux_memory_block_size = _ux_system->ux_system_cache_safe_memory_pool_size
 8003eb2:	691b      	ldr	r3, [r3, #16]
				- (ULONG)sizeof(UX_MEMORY_BLOCK);
 8003eb4:	3b10      	subs	r3, #16
		memory_block->ux_memory_block_size = _ux_system->ux_system_cache_safe_memory_pool_size
 8003eb6:	6013      	str	r3, [r2, #0]
		memory_block->ux_memory_block_status = UX_MEMORY_UNUSED;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <_ux_system_initialize+0xbc>)
 8003eba:	6053      	str	r3, [r2, #4]
	/* Keep the size in system structure variable. */
	_ux_system->ux_system_debug_log_size = UX_DEBUG_LOG_SIZE;
#endif

	/* Create the Mutex object used by USBX to control critical sections. */
	UINT status = _ux_utility_mutex_create(&_ux_system->ux_system_mutex, "ux_system_mutex");
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <_ux_system_initialize+0xb0>)
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	490e      	ldr	r1, [pc, #56]	; (8003efc <_ux_system_initialize+0xc0>)
 8003ec2:	301c      	adds	r0, #28
 8003ec4:	f000 f98e 	bl	80041e4 <_ux_utility_mutex_create>
	if (status != UX_SUCCESS)
 8003ec8:	4603      	mov	r3, r0
 8003eca:	b950      	cbnz	r0, 8003ee2 <_ux_system_initialize+0xa6>
		return (UX_MUTEX_ERROR);

	return (UX_SUCCESS);
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				->ux_system_regular_memory_pool_size;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <_ux_system_initialize+0xb0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
		_ux_system->ux_system_cache_safe_memory_pool_size = _ux_system
 8003ed6:	611a      	str	r2, [r3, #16]
				->ux_system_regular_memory_pool_free;
 8003ed8:	689a      	ldr	r2, [r3, #8]
		_ux_system->ux_system_cache_safe_memory_pool_free = _ux_system
 8003eda:	615a      	str	r2, [r3, #20]
				->ux_system_regular_memory_pool_start;
 8003edc:	681a      	ldr	r2, [r3, #0]
		_ux_system->ux_system_cache_safe_memory_pool_start = _ux_system
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e7ec      	b.n	8003ebc <_ux_system_initialize+0x80>
		return (UX_MUTEX_ERROR);
 8003ee2:	2317      	movs	r3, #23
 8003ee4:	e7f2      	b.n	8003ecc <_ux_system_initialize+0x90>
		return (UX_MEMORY_INSUFFICIENT);
 8003ee6:	2312      	movs	r3, #18
 8003ee8:	e7f0      	b.n	8003ecc <_ux_system_initialize+0x90>
 8003eea:	bf00      	nop
 8003eec:	20000734 	.word	0x20000734
 8003ef0:	20000738 	.word	0x20000738
 8003ef4:	2000072c 	.word	0x2000072c
 8003ef8:	12345678 	.word	0x12345678
 8003efc:	0800737c 	.word	0x0800737c

08003f00 <_ux_utility_delay_ms>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_delay_ms(ULONG ms_wait)
{
 8003f00:	b508      	push	{r3, lr}
	/* translate ms into ticks. */
	ULONG ticks = (ms_wait * UX_PERIODIC_RATE) / 1000;
 8003f02:	2364      	movs	r3, #100	; 0x64
 8003f04:	fb03 f000 	mul.w	r0, r3, r0
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <_ux_utility_delay_ms+0x18>)
 8003f0a:	fba3 3000 	umull	r3, r0, r3, r0
 8003f0e:	0980      	lsrs	r0, r0, #6

	/* For safety add 1 to ticks. */
	ticks++;

	/* Call ThreadX sleep function. */
	tx_thread_sleep(ticks);
 8003f10:	3001      	adds	r0, #1
 8003f12:	f001 fc7b 	bl	800580c <_tx_thread_sleep>

	/* Return completion status. */
	return;
}
 8003f16:	bd08      	pop	{r3, pc}
 8003f18:	10624dd3 	.word	0x10624dd3

08003f1c <_ux_utility_descriptor_parse>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_descriptor_parse(UCHAR* raw_descriptor, UCHAR* descriptor_structure,
		UINT descriptor_entries, UCHAR* descriptor)
{
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	4605      	mov	r5, r0
 8003f20:	461c      	mov	r4, r3
	/* Loop on all the entries in this descriptor. */
	while (descriptor_entries--)
 8003f22:	e007      	b.n	8003f34 <_ux_utility_descriptor_parse+0x18>
				*((ULONG*)descriptor) = _ux_utility_long_get(raw_descriptor);
				raw_descriptor += 4;
				break;

			case 2:
				*((ULONG*)descriptor) = (ULONG)_ux_utility_short_get(raw_descriptor);
 8003f24:	4628      	mov	r0, r5
 8003f26:	f000 f997 	bl	8004258 <_ux_utility_short_get>
 8003f2a:	6020      	str	r0, [r4, #0]
				raw_descriptor += 2;
 8003f2c:	3502      	adds	r5, #2
				*((ULONG*)descriptor) = (ULONG)*raw_descriptor;
				raw_descriptor++;
		}

		/* Add the size of the component to the destination. */
		descriptor += 4;
 8003f2e:	3404      	adds	r4, #4
	while (descriptor_entries--)
 8003f30:	4632      	mov	r2, r6
		switch (*descriptor_structure++)
 8003f32:	4639      	mov	r1, r7
	while (descriptor_entries--)
 8003f34:	1e56      	subs	r6, r2, #1
 8003f36:	b17a      	cbz	r2, 8003f58 <_ux_utility_descriptor_parse+0x3c>
		switch (*descriptor_structure++)
 8003f38:	1c4f      	adds	r7, r1, #1
 8003f3a:	780b      	ldrb	r3, [r1, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d0f1      	beq.n	8003f24 <_ux_utility_descriptor_parse+0x8>
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d105      	bne.n	8003f50 <_ux_utility_descriptor_parse+0x34>
				*((ULONG*)descriptor) = _ux_utility_long_get(raw_descriptor);
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 f808 	bl	8003f5a <_ux_utility_long_get>
 8003f4a:	6020      	str	r0, [r4, #0]
				raw_descriptor += 4;
 8003f4c:	3504      	adds	r5, #4
				break;
 8003f4e:	e7ee      	b.n	8003f2e <_ux_utility_descriptor_parse+0x12>
				*((ULONG*)descriptor) = (ULONG)*raw_descriptor;
 8003f50:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	e7ea      	b.n	8003f2e <_ux_utility_descriptor_parse+0x12>
	}

	/* Return to caller. */
	return;
}
 8003f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f5a <_ux_utility_long_get>:
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8003f5a:	7803      	ldrb	r3, [r0, #0]
    value |=  (ULONG)*address++ << 8;
 8003f5c:	7842      	ldrb	r2, [r0, #1]
 8003f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    value |=  (ULONG)*address++ << 16;
 8003f62:	7882      	ldrb	r2, [r0, #2]
 8003f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    value |=  (ULONG)*address << 24;
 8003f68:	78c0      	ldrb	r0, [r0, #3]

    /* Return 32-bit value.  */
    return(value);
}
 8003f6a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8003f6e:	4770      	bx	lr

08003f70 <_ux_utility_memory_allocate>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	4606      	mov	r6, r0
 8003f74:	460f      	mov	r7, r1
 8003f76:	4614      	mov	r4, r2
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_utility_mutex_on(&_ux_system -> ux_system_mutex);
 8003f78:	4b44      	ldr	r3, [pc, #272]	; (800408c <_ux_utility_memory_allocate+0x11c>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	301c      	adds	r0, #28
 8003f7e:	f000 f948 	bl	8004212 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8003f82:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003f86:	d003      	beq.n	8003f90 <_ux_utility_memory_allocate+0x20>
        memory_alignment = UX_NO_ALIGN;
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8003f88:	2e0e      	cmp	r6, #14
 8003f8a:	d802      	bhi.n	8003f92 <_ux_utility_memory_allocate+0x22>
        memory_alignment =  UX_ALIGN_MIN;
 8003f8c:	260f      	movs	r6, #15
 8003f8e:	e000      	b.n	8003f92 <_ux_utility_memory_allocate+0x22>
 8003f90:	260f      	movs	r6, #15

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
    memory_alignment++;
 8003f92:	1c75      	adds	r5, r6, #1
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8003f94:	340f      	adds	r4, #15
 8003f96:	f024 040f 	bic.w	r4, r4, #15
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8003f9a:	1931      	adds	r1, r6, r4
 8003f9c:	3110      	adds	r1, #16
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f000 f8ee 	bl	8004180 <_ux_utility_memory_free_block_best_get>

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	b350      	cbz	r0, 8003ffe <_ux_utility_memory_allocate+0x8e>
        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8003fa8:	f100 0210 	add.w	r2, r0, #16

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8003fac:	4216      	tst	r6, r2
 8003fae:	d132      	bne.n	8004016 <_ux_utility_memory_allocate+0xa6>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8003fb0:	f104 0510 	add.w	r5, r4, #16
 8003fb4:	1941      	adds	r1, r0, r5
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8003fb6:	6882      	ldr	r2, [r0, #8]
 8003fb8:	608a      	str	r2, [r1, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8003fba:	60c8      	str	r0, [r1, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8003fbc:	6802      	ldr	r2, [r0, #0]
 8003fbe:	1b12      	subs	r2, r2, r4
 8003fc0:	3a10      	subs	r2, #16
 8003fc2:	5142      	str	r2, [r0, r5]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8003fc4:	4a32      	ldr	r2, [pc, #200]	; (8004090 <_ux_utility_memory_allocate+0x120>)
 8003fc6:	604a      	str	r2, [r1, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8003fc8:	6004      	str	r4, [r0, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8003fca:	6081      	str	r1, [r0, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED;
 8003fcc:	4a31      	ldr	r2, [pc, #196]	; (8004094 <_ux_utility_memory_allocate+0x124>)
 8003fce:	6042      	str	r2, [r0, #4]
        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8003fd0:	f103 0610 	add.w	r6, r3, #16

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested);
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f8fb 	bl	80041d4 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <_ux_utility_memory_allocate+0x11c>)
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	68c2      	ldr	r2, [r0, #12]
 8003fe4:	6803      	ldr	r3, [r0, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d047      	beq.n	800407a <_ux_utility_memory_allocate+0x10a>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
    }
    else
    {

       switch (memory_cache_flag)
 8003fea:	2f01      	cmp	r7, #1
 8003fec:	d149      	bne.n	8004082 <_ux_utility_memory_allocate+0x112>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8003fee:	6943      	ldr	r3, [r0, #20]
 8003ff0:	1b5d      	subs	r5, r3, r5
 8003ff2:	6145      	str	r5, [r0, #20]

        }
    }

    /* Release the protection.  */
    _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8003ff4:	301c      	adds	r0, #28
 8003ff6:	f000 f908 	bl	800420a <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
}                                
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <_ux_utility_memory_allocate+0x11c>)
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	301c      	adds	r0, #28
 8004004:	f000 f901 	bl	800420a <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8004008:	2212      	movs	r2, #18
 800400a:	2108      	movs	r1, #8
 800400c:	2002      	movs	r0, #2
 800400e:	f7ff ff07 	bl	8003e20 <_ux_system_error_handler>
        return(UX_NULL);
 8004012:	2600      	movs	r6, #0
 8004014:	e7f1      	b.n	8003ffa <_ux_utility_memory_allocate+0x8a>
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004016:	f102 0010 	add.w	r0, r2, #16
        int_memory_buffer +=  memory_alignment - 1;
 800401a:	4428      	add	r0, r5
 800401c:	3801      	subs	r0, #1
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 800401e:	ea20 0006 	bic.w	r0, r0, r6
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8004022:	f1a0 0110 	sub.w	r1, r0, #16
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8004026:	60cb      	str	r3, [r1, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8004028:	689d      	ldr	r5, [r3, #8]
 800402a:	608d      	str	r5, [r1, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	f840 5c10 	str.w	r5, [r0, #-16]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED;
 8004032:	4d18      	ldr	r5, [pc, #96]	; (8004094 <_ux_utility_memory_allocate+0x124>)
 8004034:	604d      	str	r5, [r1, #4]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8004036:	6099      	str	r1, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8004038:	1a8a      	subs	r2, r1, r2
 800403a:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800403c:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	3b10      	subs	r3, #16
 8004044:	f840 3c10 	str.w	r3, [r0, #-16]
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8004048:	1b1b      	subs	r3, r3, r4
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 800404a:	2b10      	cmp	r3, #16
 800404c:	d910      	bls.n	8004070 <_ux_utility_memory_allocate+0x100>
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800404e:	190d      	adds	r5, r1, r4
 8004050:	f105 0210 	add.w	r2, r5, #16
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8004054:	688e      	ldr	r6, [r1, #8]
 8004056:	61ae      	str	r6, [r5, #24]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8004058:	61e9      	str	r1, [r5, #28]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800405a:	f1a3 0610 	sub.w	r6, r3, #16
 800405e:	612e      	str	r6, [r5, #16]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8004060:	4d0b      	ldr	r5, [pc, #44]	; (8004090 <_ux_utility_memory_allocate+0x120>)
 8004062:	6055      	str	r5, [r2, #4]
            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8004064:	608a      	str	r2, [r1, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8004066:	f850 2c10 	ldr.w	r2, [r0, #-16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f840 3c10 	str.w	r3, [r0, #-16]
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8004070:	f850 5c10 	ldr.w	r5, [r0, #-16]
 8004074:	3510      	adds	r5, #16
        memory_block =  new_memory_block;
 8004076:	460b      	mov	r3, r1
 8004078:	e7aa      	b.n	8003fd0 <_ux_utility_memory_allocate+0x60>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800407a:	6883      	ldr	r3, [r0, #8]
 800407c:	1b5d      	subs	r5, r3, r5
 800407e:	6085      	str	r5, [r0, #8]
 8004080:	e7b8      	b.n	8003ff4 <_ux_utility_memory_allocate+0x84>
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8004082:	6883      	ldr	r3, [r0, #8]
 8004084:	1b5d      	subs	r5, r3, r5
 8004086:	6085      	str	r5, [r0, #8]
            break;
 8004088:	e7b4      	b.n	8003ff4 <_ux_utility_memory_allocate+0x84>
 800408a:	bf00      	nop
 800408c:	20000734 	.word	0x20000734
 8004090:	12345678 	.word	0x12345678
 8004094:	87654321 	.word	0x87654321

08004098 <_ux_utility_memory_allocate_mulc_safe>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align, ULONG cache, ULONG size_mul_v,
		ULONG size_mul_c)
{
 8004098:	b5d0      	push	{r4, r6, r7, lr}
	return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800409a:	2400      	movs	r4, #0
 800409c:	fba2 6703 	umull	r6, r7, r2, r3
 80040a0:	b92f      	cbnz	r7, 80040ae <_ux_utility_memory_allocate_mulc_safe+0x16>
 80040a2:	b934      	cbnz	r4, 80040b2 <_ux_utility_memory_allocate_mulc_safe+0x1a>
 80040a4:	fb03 f202 	mul.w	r2, r3, r2
 80040a8:	f7ff ff62 	bl	8003f70 <_ux_utility_memory_allocate>
}
 80040ac:	bdd0      	pop	{r4, r6, r7, pc}
	return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80040ae:	2401      	movs	r4, #1
 80040b0:	e7f7      	b.n	80040a2 <_ux_utility_memory_allocate_mulc_safe+0xa>
 80040b2:	2000      	movs	r0, #0
 80040b4:	e7fa      	b.n	80040ac <_ux_utility_memory_allocate_mulc_safe+0x14>

080040b6 <_ux_utility_memory_copy>:
	/* Setup byte oriented source and destination pointers. */
	UCHAR* source = (UCHAR*)memory_source;
	UCHAR* destination = (UCHAR*)memory_destination;

	/* Loop to perform the copy. */
	while (length--)
 80040b6:	e004      	b.n	80040c2 <_ux_utility_memory_copy+0xc>
	{
		/* Copy one byte. */
		*destination++ = *source++;
 80040b8:	780a      	ldrb	r2, [r1, #0]
 80040ba:	7002      	strb	r2, [r0, #0]
 80040bc:	3001      	adds	r0, #1
 80040be:	3101      	adds	r1, #1
	while (length--)
 80040c0:	461a      	mov	r2, r3
 80040c2:	1e53      	subs	r3, r2, #1
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	d1f7      	bne.n	80040b8 <_ux_utility_memory_copy+0x2>
	}

	/* Return to caller. */
	return;
}
 80040c8:	4770      	bx	lr
	...

080040cc <_ux_utility_memory_free>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4604      	mov	r4, r0
UX_MEMORY_BLOCK     *next_block;
ULONG               memory_size_returned;
UCHAR               *memory_address;

    /* Get the mutex as this is a critical section.  */
    _ux_utility_mutex_on(&_ux_system -> ux_system_mutex);
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <_ux_utility_memory_free+0xa8>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	301c      	adds	r0, #28
 80040d6:	f000 f89c 	bl	8004212 <_ux_utility_mutex_on>
    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80040da:	f854 5c10 	ldr.w	r5, [r4, #-16]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != UX_MEMORY_USED)
 80040de:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80040e2:	4b25      	ldr	r3, [pc, #148]	; (8004178 <_ux_utility_memory_free+0xac>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d10d      	bne.n	8004104 <_ux_utility_memory_free+0x38>
 80040e8:	f1a4 0110 	sub.w	r1, r4, #16
 80040ec:	3510      	adds	r5, #16
        /* Return to caller.  */
        return;
    }

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <_ux_utility_memory_free+0xb0>)
 80040f0:	f844 3c0c 	str.w	r3, [r4, #-12]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80040f4:	68cb      	ldr	r3, [r1, #12]
 80040f6:	b183      	cbz	r3, 800411a <_ux_utility_memory_free+0x4e>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80040f8:	6858      	ldr	r0, [r3, #4]
 80040fa:	4a20      	ldr	r2, [pc, #128]	; (800417c <_ux_utility_memory_free+0xb0>)
 80040fc:	4290      	cmp	r0, r2
 80040fe:	d10c      	bne.n	800411a <_ux_utility_memory_free+0x4e>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 8004100:	4619      	mov	r1, r3
 8004102:	e7f7      	b.n	80040f4 <_ux_utility_memory_free+0x28>
        _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <_ux_utility_memory_free+0xa8>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	301c      	adds	r0, #28
 800410a:	f000 f87e 	bl	800420a <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 800410e:	2219      	movs	r2, #25
 8004110:	2108      	movs	r1, #8
 8004112:	2002      	movs	r0, #2
 8004114:	f7ff fe84 	bl	8003e20 <_ux_system_error_handler>
        return;
 8004118:	e02a      	b.n	8004170 <_ux_utility_memory_free+0xa4>
            break;
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 800411a:	688b      	ldr	r3, [r1, #8]
    while (next_block != UX_NULL)
 800411c:	b173      	cbz	r3, 800413c <_ux_utility_memory_free+0x70>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status == UX_MEMORY_USED)
 800411e:	6858      	ldr	r0, [r3, #4]
 8004120:	4a15      	ldr	r2, [pc, #84]	; (8004178 <_ux_utility_memory_free+0xac>)
 8004122:	4290      	cmp	r0, r2
 8004124:	d008      	beq.n	8004138 <_ux_utility_memory_free+0x6c>
            memory_block -> ux_memory_block_next =  next_block;
            next_block -> ux_memory_block_previous =  memory_block;
            break;
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	608a      	str	r2, [r1, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	6808      	ldr	r0, [r1, #0]
 800412e:	4402      	add	r2, r0
 8004130:	3210      	adds	r2, #16
 8004132:	600a      	str	r2, [r1, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	e7f1      	b.n	800411c <_ux_utility_memory_free+0x50>
            memory_block -> ux_memory_block_next =  next_block;
 8004138:	608b      	str	r3, [r1, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 800413a:	60d9      	str	r1, [r3, #12]
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <_ux_utility_memory_free+0xa8>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	68c2      	ldr	r2, [r0, #12]
 8004142:	6803      	ldr	r3, [r0, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d009      	beq.n	800415c <_ux_utility_memory_free+0x90>

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8004148:	428b      	cmp	r3, r1
 800414a:	d80b      	bhi.n	8004164 <_ux_utility_memory_free+0x98>
 800414c:	6842      	ldr	r2, [r0, #4]
 800414e:	4413      	add	r3, r2
 8004150:	428b      	cmp	r3, r1
 8004152:	d907      	bls.n	8004164 <_ux_utility_memory_free+0x98>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8004154:	6883      	ldr	r3, [r0, #8]
 8004156:	441d      	add	r5, r3
 8004158:	6085      	str	r5, [r0, #8]
 800415a:	e006      	b.n	800416a <_ux_utility_memory_free+0x9e>
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800415c:	6883      	ldr	r3, [r0, #8]
 800415e:	441d      	add	r5, r3
 8004160:	6085      	str	r5, [r0, #8]
 8004162:	e002      	b.n	800416a <_ux_utility_memory_free+0x9e>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8004164:	6943      	ldr	r3, [r0, #20]
 8004166:	441d      	add	r5, r3
 8004168:	6145      	str	r5, [r0, #20]
        
    }

    /* Release the protection.  */
    _ux_utility_mutex_off(&_ux_system -> ux_system_mutex);
 800416a:	301c      	adds	r0, #28
 800416c:	f000 f84d 	bl	800420a <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
}
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	20000734 	.word	0x20000734
 8004178:	87654321 	.word	0x87654321
 800417c:	12345678 	.word	0x12345678

08004180 <_ux_utility_memory_free_block_best_get>:

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 8004180:	b118      	cbz	r0, 800418a <_ux_utility_memory_free_block_best_get+0xa>
 8004182:	2801      	cmp	r0, #1
 8004184:	d008      	beq.n	8004198 <_ux_utility_memory_free_block_best_get+0x18>
            break;
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8004186:	2000      	movs	r0, #0
 8004188:	4770      	bx	lr
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <_ux_utility_memory_free_block_best_get+0x4c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8004190:	2000      	movs	r0, #0
    while (memory_block != UX_NULL)
 8004192:	b1cb      	cbz	r3, 80041c8 <_ux_utility_memory_free_block_best_get+0x48>
{
 8004194:	b410      	push	{r4}
 8004196:	e006      	b.n	80041a6 <_ux_utility_memory_free_block_best_get+0x26>
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <_ux_utility_memory_free_block_best_get+0x4c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
            break;
 800419e:	e7f7      	b.n	8004190 <_ux_utility_memory_free_block_best_get+0x10>
                    best_memory_block =  memory_block;
 80041a0:	4618      	mov	r0, r3
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 80041a2:	689b      	ldr	r3, [r3, #8]
    while (memory_block != UX_NULL)
 80041a4:	b16b      	cbz	r3, 80041c2 <_ux_utility_memory_free_block_best_get+0x42>
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80041a6:	685c      	ldr	r4, [r3, #4]
 80041a8:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <_ux_utility_memory_free_block_best_get+0x50>)
 80041aa:	4294      	cmp	r4, r2
 80041ac:	d1f9      	bne.n	80041a2 <_ux_utility_memory_free_block_best_get+0x22>
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	428a      	cmp	r2, r1
 80041b2:	d9f6      	bls.n	80041a2 <_ux_utility_memory_free_block_best_get+0x22>
                if (best_memory_block == UX_NULL)
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d0f3      	beq.n	80041a0 <_ux_utility_memory_free_block_best_get+0x20>
                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 80041b8:	6804      	ldr	r4, [r0, #0]
 80041ba:	42a2      	cmp	r2, r4
 80041bc:	d2f1      	bcs.n	80041a2 <_ux_utility_memory_free_block_best_get+0x22>
                        best_memory_block =  memory_block;
 80041be:	4618      	mov	r0, r3
 80041c0:	e7ef      	b.n	80041a2 <_ux_utility_memory_free_block_best_get+0x22>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
}                                
 80041c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000734 	.word	0x20000734
 80041d0:	12345678 	.word	0x12345678

080041d4 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 80041d4:	e002      	b.n	80041dc <_ux_utility_memory_set+0x8>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 80041d6:	7001      	strb	r1, [r0, #0]
 80041d8:	3001      	adds	r0, #1
    while(length--)
 80041da:	461a      	mov	r2, r3
 80041dc:	1e53      	subs	r3, r2, #1
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d1f9      	bne.n	80041d6 <_ux_utility_memory_set+0x2>
    }

    /* Return to caller.  */
    return; 
}
 80041e2:	4770      	bx	lr

080041e4 <_ux_utility_mutex_create>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_utility_mutex_create(TX_MUTEX* mutex, CHAR* mutex_name)
{
 80041e4:	b510      	push	{r4, lr}
	/* Call ThreadX to create the Mutex object. */
	UINT status = tx_mutex_create(mutex, (CHAR* )mutex_name, TX_NO_INHERIT);
 80041e6:	2334      	movs	r3, #52	; 0x34
 80041e8:	2200      	movs	r2, #0
 80041ea:	f001 febd 	bl	8005f68 <_txe_mutex_create>

	/* Check for status. */
	if (status != UX_SUCCESS)
 80041ee:	4604      	mov	r4, r0
 80041f0:	b908      	cbnz	r0, 80041f6 <_ux_utility_mutex_create+0x12>
		UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)
	}

	/* Return completion status. */
	return (status);
}
 80041f2:	4620      	mov	r0, r4
 80041f4:	bd10      	pop	{r4, pc}
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80041f6:	4602      	mov	r2, r0
 80041f8:	2108      	movs	r1, #8
 80041fa:	2002      	movs	r0, #2
 80041fc:	f7ff fe10 	bl	8003e20 <_ux_system_error_handler>
	return (status);
 8004200:	e7f7      	b.n	80041f2 <_ux_utility_mutex_create+0xe>

08004202 <_ux_utility_mutex_delete>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_utility_mutex_delete(TX_MUTEX* mutex)
{
 8004202:	b508      	push	{r3, lr}
	/* Call ThreadX to delete the Mutex object. */
	UINT status = tx_mutex_delete(mutex);
 8004204:	f001 ff1a 	bl	800603c <_txe_mutex_delete>

	/* Return completion status. */
	return (status);
}
 8004208:	bd08      	pop	{r3, pc}

0800420a <_ux_utility_mutex_off>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_mutex_off(TX_MUTEX* mutex)
{
 800420a:	b508      	push	{r3, lr}
	/* Call ThreadX to release protection.  */
	tx_mutex_put(mutex);
 800420c:	f001 ff68 	bl	80060e0 <_txe_mutex_put>

	/* Return to caller.  */
	return;
}
 8004210:	bd08      	pop	{r3, pc}

08004212 <_ux_utility_mutex_on>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_utility_mutex_on(TX_MUTEX* mutex)
{
 8004212:	b508      	push	{r3, lr}
	/* Call ThreadX to get system mutex. */
	UINT status = tx_mutex_get(mutex, TX_WAIT_FOREVER);
 8004214:	f04f 31ff 	mov.w	r1, #4294967295
 8004218:	f001 ff2e 	bl	8006078 <_txe_mutex_get>

	/* Check for status. */
	if (status != UX_SUCCESS)
 800421c:	b900      	cbnz	r0, 8004220 <_ux_utility_mutex_on+0xe>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
	}

	/* Return to caller. */
	return;
}
 800421e:	bd08      	pop	{r3, pc}
 8004220:	4602      	mov	r2, r0
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8004222:	2108      	movs	r1, #8
 8004224:	2002      	movs	r0, #2
 8004226:	f7ff fdfb 	bl	8003e20 <_ux_system_error_handler>
	return;
 800422a:	e7f8      	b.n	800421e <_ux_utility_mutex_on+0xc>

0800422c <_ux_utility_semaphore_create>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(TX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800422c:	b510      	push	{r4, lr}

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800422e:	2320      	movs	r3, #32
 8004230:	f001 ff72 	bl	8006118 <_txe_semaphore_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8004234:	4604      	mov	r4, r0
 8004236:	b908      	cbnz	r0, 800423c <_ux_utility_semaphore_create+0x10>

    }

    /* Return completion status.  */
    return(status);
}
 8004238:	4620      	mov	r0, r4
 800423a:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800423c:	4602      	mov	r2, r0
 800423e:	2108      	movs	r1, #8
 8004240:	2002      	movs	r0, #2
 8004242:	f7ff fded 	bl	8003e20 <_ux_system_error_handler>
    return(status);
 8004246:	e7f7      	b.n	8004238 <_ux_utility_semaphore_create+0xc>

08004248 <_ux_utility_semaphore_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(TX_SEMAPHORE *semaphore)
{
 8004248:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800424a:	f001 ffbf 	bl	80061cc <_txe_semaphore_delete>

    /* Return completion status.  */
    return(status);
}
 800424e:	bd08      	pop	{r3, pc}

08004250 <_ux_utility_semaphore_put>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(TX_SEMAPHORE *semaphore)
{
 8004250:	b508      	push	{r3, lr}

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8004252:	f001 fff9 	bl	8006248 <_txe_semaphore_put>

    /* Return completion status.  */
    return(status);
}
 8004256:	bd08      	pop	{r3, pc}

08004258 <_ux_utility_short_get>:
/**************************************************************************/
ULONG _ux_utility_short_get(UCHAR* address)
{
	/* In order to make this function endian agnostic and memory alignment
	 * independent, we read a byte at a time from the address. */
	USHORT value = (USHORT)*address++;
 8004258:	7803      	ldrb	r3, [r0, #0]
	value |= (USHORT)(*address << 8);
 800425a:	7840      	ldrb	r0, [r0, #1]

	/* Return to caller. */
	return ((ULONG)value);
}
 800425c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8004260:	4770      	bx	lr

08004262 <_ux_utility_string_length_check>:
{

UINT    string_length;


    if (string == UX_NULL)
 8004262:	b190      	cbz	r0, 800428a <_ux_utility_string_length_check+0x28>
{
 8004264:	b510      	push	{r4, lr}
 8004266:	4604      	mov	r4, r0
        return(UX_ERROR);

    string_length = 0;
 8004268:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 800426a:	5ce0      	ldrb	r0, [r4, r3]
 800426c:	b148      	cbz	r0, 8004282 <_ux_utility_string_length_check+0x20>
            break;

        string_length++;
 800426e:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 8004270:	4293      	cmp	r3, r2
 8004272:	d9fa      	bls.n	800426a <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	2108      	movs	r1, #8
 8004278:	2002      	movs	r0, #2
 800427a:	f7ff fdd1 	bl	8003e20 <_ux_system_error_handler>

            return(UX_ERROR);
 800427e:	20ff      	movs	r0, #255	; 0xff

    if (string_length_ptr)
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
}
 8004280:	bd10      	pop	{r4, pc}
    if (string_length_ptr)
 8004282:	b121      	cbz	r1, 800428e <_ux_utility_string_length_check+0x2c>
        *string_length_ptr = string_length;
 8004284:	600b      	str	r3, [r1, #0]
    return(UX_SUCCESS); 
 8004286:	2000      	movs	r0, #0
 8004288:	e7fa      	b.n	8004280 <_ux_utility_string_length_check+0x1e>
        return(UX_ERROR);
 800428a:	20ff      	movs	r0, #255	; 0xff
}
 800428c:	4770      	bx	lr
    return(UX_SUCCESS); 
 800428e:	2000      	movs	r0, #0
 8004290:	e7f6      	b.n	8004280 <_ux_utility_string_length_check+0x1e>

08004292 <_ux_device_class_cdc_acm_activate>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND* command)
{
 8004292:	b508      	push	{r3, lr}
	/* Get the class container. */
	UX_SLAVE_CLASS* class = command->ux_slave_class_command_class_ptr;
 8004294:	6a03      	ldr	r3, [r0, #32]

	/* Get the class instance in the container. */
	UX_SLAVE_CLASS_CDC_ACM* cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*)class->ux_slave_class_instance;
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48

	/* Get the interface that owns this instance. */
	UX_SLAVE_INTERFACE* interface = (UX_SLAVE_INTERFACE*)command->ux_slave_class_command_interface;
 8004298:	6882      	ldr	r2, [r0, #8]

	/* Store the class instance into the interface. */
	interface->ux_slave_interface_class_instance = (VOID*)cdc_acm;
 800429a:	6093      	str	r3, [r2, #8]

	/* Now the opposite, store the interface in the class instance. */
	cdc_acm->ux_slave_class_cdc_acm_interface = interface;
 800429c:	601a      	str	r2, [r3, #0]

	/* If there is a activate function call it. */
	if (cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	b10a      	cbz	r2, 80042a6 <_ux_device_class_cdc_acm_activate+0x14>
			!= UX_NULL)
	{
		/* Invoke the application. */
		cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 80042a2:	4618      	mov	r0, r3
 80042a4:	4790      	blx	r2
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

	/* Return completion status. */
	return (UX_SUCCESS);
}
 80042a6:	2000      	movs	r0, #0
 80042a8:	bd08      	pop	{r3, pc}
	...

080042ac <_ux_device_class_cdc_acm_control_request>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 80042ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80042b0:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 80042b2:	6c9d      	ldr	r5, [r3, #72]	; 0x48

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80042b4:	4b38      	ldr	r3, [pc, #224]	; (8004398 <_ux_device_class_cdc_acm_control_request+0xec>)
 80042b6:	681c      	ldr	r4, [r3, #0]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 80042b8:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 80042bc:	f504 7081 	add.w	r0, r4, #258	; 0x102
 80042c0:	f7ff ffca 	bl	8004258 <_ux_utility_short_get>
 80042c4:	4680      	mov	r8, r0

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80042c6:	f504 7083 	add.w	r0, r4, #262	; 0x106
 80042ca:	f7ff ffc5 	bl	8004258 <_ux_utility_short_get>

    transmit_length = request_length ;
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80042ce:	2e21      	cmp	r6, #33	; 0x21
 80042d0:	d01d      	beq.n	800430e <_ux_device_class_cdc_acm_control_request+0x62>
 80042d2:	2e22      	cmp	r6, #34	; 0x22
 80042d4:	d003      	beq.n	80042de <_ux_device_class_cdc_acm_control_request+0x32>
 80042d6:	2e20      	cmp	r6, #32
 80042d8:	d040      	beq.n	800435c <_ux_device_class_cdc_acm_control_request+0xb0>
            break ;

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80042da:	20ff      	movs	r0, #255	; 0xff
 80042dc:	e03a      	b.n	8004354 <_ux_device_class_cdc_acm_control_request+0xa8>
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	f885 307f 	strb.w	r3, [r5, #127]	; 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 80042e4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 80042e8:	f018 0f01 	tst.w	r8, #1
 80042ec:	d002      	beq.n	80042f4 <_ux_device_class_cdc_acm_control_request+0x48>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 80042ee:	2301      	movs	r3, #1
 80042f0:	f885 307f 	strb.w	r3, [r5, #127]	; 0x7f
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 80042f4:	f018 0f02 	tst.w	r8, #2
 80042f8:	d002      	beq.n	8004300 <_ux_device_class_cdc_acm_control_request+0x54>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 80042fa:	2301      	movs	r3, #1
 80042fc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8004300:	68eb      	ldr	r3, [r5, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d044      	beq.n	8004390 <_ux_device_class_cdc_acm_control_request+0xe4>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8004306:	4628      	mov	r0, r5
 8004308:	4798      	blx	r3
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800430a:	2000      	movs	r0, #0
 800430c:	e022      	b.n	8004354 <_ux_device_class_cdc_acm_control_request+0xa8>
 800430e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8004312:	4607      	mov	r7, r0
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 8004314:	2807      	cmp	r0, #7
 8004316:	d91f      	bls.n	8004358 <_ux_device_class_cdc_acm_control_request+0xac>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 8004318:	2607      	movs	r6, #7
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800431a:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800431c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8004320:	f000 ff26 	bl	8005170 <_ux_utility_long_put>
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8004324:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004328:	f895 207c 	ldrb.w	r2, [r5, #124]	; 0x7c
 800432c:	711a      	strb	r2, [r3, #4]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800432e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004332:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 8004336:	715a      	strb	r2, [r3, #5]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8004338:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800433c:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
 8004340:	719a      	strb	r2, [r3, #6]
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8004342:	2303      	movs	r3, #3
 8004344:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 8004348:	463a      	mov	r2, r7
 800434a:	4631      	mov	r1, r6
 800434c:	4648      	mov	r0, r9
 800434e:	f7ff fd0d 	bl	8003d6c <_ux_device_stack_transfer_request>
    return(UX_SUCCESS);
 8004352:	2000      	movs	r0, #0
}
 8004354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    transmit_length = request_length ;
 8004358:	4606      	mov	r6, r0
 800435a:	e7de      	b.n	800431a <_ux_device_class_cdc_acm_control_request+0x6e>
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800435c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8004360:	f7ff fdfb 	bl	8003f5a <_ux_utility_long_get>
 8004364:	67a8      	str	r0, [r5, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8004366:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800436a:	791b      	ldrb	r3, [r3, #4]
 800436c:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 8004370:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004374:	795b      	ldrb	r3, [r3, #5]
 8004376:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800437a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800437e:	799b      	ldrb	r3, [r3, #6]
 8004380:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8004384:	68eb      	ldr	r3, [r5, #12]
 8004386:	b12b      	cbz	r3, 8004394 <_ux_device_class_cdc_acm_control_request+0xe8>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8004388:	4628      	mov	r0, r5
 800438a:	4798      	blx	r3
    return(UX_SUCCESS);
 800438c:	2000      	movs	r0, #0
 800438e:	e7e1      	b.n	8004354 <_ux_device_class_cdc_acm_control_request+0xa8>
 8004390:	2000      	movs	r0, #0
 8004392:	e7df      	b.n	8004354 <_ux_device_class_cdc_acm_control_request+0xa8>
 8004394:	2000      	movs	r0, #0
 8004396:	e7dd      	b.n	8004354 <_ux_device_class_cdc_acm_control_request+0xa8>
 8004398:	2000072c 	.word	0x2000072c

0800439c <_ux_device_class_cdc_acm_deactivate>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND* command)
{
 800439c:	b538      	push	{r3, r4, r5, lr}
	/* Get the class container. */
	UX_SLAVE_CLASS* class = command->ux_slave_class_command_class_ptr;
 800439e:	6a03      	ldr	r3, [r0, #32]

	/* Get the class instance in the container. */
	UX_SLAVE_CLASS_CDC_ACM* cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*)class->ux_slave_class_instance;
 80043a0:	6c9c      	ldr	r4, [r3, #72]	; 0x48

	/* We need the interface to the class. */
	UX_SLAVE_INTERFACE* interface = cdc_acm->ux_slave_class_cdc_acm_interface;
 80043a2:	6823      	ldr	r3, [r4, #0]
	/*--------------------------------------------------------------------------------------------*/

	UX_SLAVE_ENDPOINT* endpoint_out;

	/* Locate the endpoints. */
	UX_SLAVE_ENDPOINT* endpoint_in = interface->ux_slave_interface_first_endpoint;
 80043a4:	6b5d      	ldr	r5, [r3, #52]	; 0x34

	/* Check the endpoint direction, if IN we have the correct endpoint. */
	if ((endpoint_in->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 80043a6:	696b      	ldr	r3, [r5, #20]
 80043a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043ac:	d116      	bne.n	80043dc <_ux_device_class_cdc_acm_deactivate+0x40>
	{
		/* Wrong direction, we found the OUT endpoint first. */
		endpoint_out = endpoint_in;

		/* So the next endpoint has to be the IN endpoint. */
		endpoint_in = endpoint_out->ux_slave_endpoint_next_endpoint;
 80043ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
		/* We found the endpoint IN first, so next endpoint is OUT. */
		endpoint_out = endpoint_in->ux_slave_endpoint_next_endpoint;
	}

	/* Terminate the transactions pending on the endpoints. */
	_ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 80043b0:	2126      	movs	r1, #38	; 0x26
 80043b2:	f000 fec5 	bl	8005140 <_ux_device_stack_transfer_all_request_abort>
	_ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 80043b6:	2126      	movs	r1, #38	; 0x26
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 fec1 	bl	8005140 <_ux_device_stack_transfer_all_request_abort>

	/* Terminate transmission and free resources. */
	_ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP,
 80043be:	2200      	movs	r2, #0
 80043c0:	2107      	movs	r1, #7
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 f80e 	bl	80043e4 <_ux_device_class_cdc_acm_ioctl>
			UX_NULL);

	/* If there is a deactivate function call it. */
	if (cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	b10b      	cbz	r3, 80043d0 <_ux_device_class_cdc_acm_deactivate+0x34>
			!= UX_NULL)
	{
		/* Invoke the application. */
		cdc_acm->ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(
 80043cc:	4620      	mov	r0, r4
 80043ce:	4798      	blx	r3
				cdc_acm);
	}

	/* We need to reset the DTR and RTS values so they do not carry over to the
	 next connection. */
	cdc_acm->ux_slave_class_cdc_acm_data_dtr_state = 0;
 80043d0:	2000      	movs	r0, #0
 80043d2:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
	cdc_acm->ux_slave_class_cdc_acm_data_rts_state = 0;
 80043d6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

	/* Return completion status. */
	return (UX_SUCCESS);
}
 80043da:	bd38      	pop	{r3, r4, r5, pc}
	UX_SLAVE_ENDPOINT* endpoint_in = interface->ux_slave_interface_first_endpoint;
 80043dc:	4628      	mov	r0, r5
		endpoint_out = endpoint_in->ux_slave_endpoint_next_endpoint;
 80043de:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80043e0:	e7e6      	b.n	80043b0 <_ux_device_class_cdc_acm_deactivate+0x14>
	...

080043e4 <_ux_device_class_cdc_acm_ioctl>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 80043e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	4604      	mov	r4, r0
 80043ec:	4615      	mov	r5, r2

    /* Let's be optimist ! */
    status = UX_SUCCESS;

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 80043ee:	1e4b      	subs	r3, r1, #1
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	f200 8126 	bhi.w	8004642 <_ux_device_class_cdc_acm_ioctl+0x25e>
 80043f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043fa:	0009      	.short	0x0009
 80043fc:	00260019 	.word	0x00260019
 8004400:	002e0036 	.word	0x002e0036
 8004404:	00f1006c 	.word	0x00f1006c
 8004408:	00580058 	.word	0x00580058
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	6783      	str	r3, [r0, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 8004410:	792b      	ldrb	r3, [r5, #4]
 8004412:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8004416:	796b      	ldrb	r3, [r5, #5]
 8004418:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800441c:	79ab      	ldrb	r3, [r5, #6]
 800441e:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
    status = UX_SUCCESS;
 8004422:	2600      	movs	r6, #0
    }   

    /* Return status to caller.  */
    return(status);
          
}
 8004424:	4630      	mov	r0, r6
 8004426:	b006      	add	sp, #24
 8004428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800442c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800442e:	602b      	str	r3, [r5, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8004430:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004434:	712b      	strb	r3, [r5, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8004436:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800443a:	716b      	strb	r3, [r5, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800443c:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 8004440:	71ab      	strb	r3, [r5, #6]
    status = UX_SUCCESS;
 8004442:	2600      	movs	r6, #0
            break;
 8004444:	e7ee      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 8004446:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800444a:	702b      	strb	r3, [r5, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800444c:	f890 307f 	ldrb.w	r3, [r0, #127]	; 0x7f
 8004450:	706b      	strb	r3, [r5, #1]
    status = UX_SUCCESS;
 8004452:	2600      	movs	r6, #0
            break;
 8004454:	e7e6      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8004456:	782b      	ldrb	r3, [r5, #0]
 8004458:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800445c:	786b      	ldrb	r3, [r5, #1]
 800445e:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
    status = UX_SUCCESS;
 8004462:	2600      	movs	r6, #0
            break;
 8004464:	e7de      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8004466:	6803      	ldr	r3, [r0, #0]
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800446a:	2d01      	cmp	r5, #1
 800446c:	d00b      	beq.n	8004486 <_ux_device_class_cdc_acm_ioctl+0xa2>
 800446e:	2d02      	cmp	r5, #2
 8004470:	d010      	beq.n	8004494 <_ux_device_class_cdc_acm_ioctl+0xb0>
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 8004472:	2653      	movs	r6, #83	; 0x53
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8004474:	f103 0030 	add.w	r0, r3, #48	; 0x30
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b01      	cmp	r3, #1
 800447c:	d1d2      	bne.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 800447e:	2104      	movs	r1, #4
 8004480:	f000 fe3e 	bl	8005100 <_ux_device_stack_transfer_abort>
 8004484:	e7ce      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	f012 0f80 	tst.w	r2, #128	; 0x80
 800448c:	d109      	bne.n	80044a2 <_ux_device_class_cdc_acm_ioctl+0xbe>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    status = UX_SUCCESS;
 8004490:	2600      	movs	r6, #0
 8004492:	e7ef      	b.n	8004474 <_ux_device_class_cdc_acm_ioctl+0x90>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	f012 0f80 	tst.w	r2, #128	; 0x80
 800449a:	d004      	beq.n	80044a6 <_ux_device_class_cdc_acm_ioctl+0xc2>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    status = UX_SUCCESS;
 800449e:	2600      	movs	r6, #0
 80044a0:	e7e8      	b.n	8004474 <_ux_device_class_cdc_acm_ioctl+0x90>
 80044a2:	2600      	movs	r6, #0
 80044a4:	e7e6      	b.n	8004474 <_ux_device_class_cdc_acm_ioctl+0x90>
 80044a6:	2600      	movs	r6, #0
 80044a8:	e7e4      	b.n	8004474 <_ux_device_class_cdc_acm_ioctl+0x90>
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80044aa:	6803      	ldr	r3, [r0, #0]
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 80044b4:	2908      	cmp	r1, #8
 80044b6:	d00a      	beq.n	80044ce <_ux_device_class_cdc_acm_ioctl+0xea>
 80044b8:	2180      	movs	r1, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 80044ba:	428a      	cmp	r2, r1
 80044bc:	d000      	beq.n	80044c0 <_ux_device_class_cdc_acm_ioctl+0xdc>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 80044c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c2:	2a01      	cmp	r2, #1
 80044c4:	f000 80c4 	beq.w	8004650 <_ux_device_class_cdc_acm_ioctl+0x26c>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 80044c8:	67dd      	str	r5, [r3, #124]	; 0x7c
    status = UX_SUCCESS;
 80044ca:	2600      	movs	r6, #0
 80044cc:	e7aa      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 80044ce:	2100      	movs	r1, #0
 80044d0:	e7f3      	b.n	80044ba <_ux_device_class_cdc_acm_ioctl+0xd6>
            if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 80044d2:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f000 80bc 	beq.w	8004654 <_ux_device_class_cdc_acm_ioctl+0x270>
                    _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_THREAD_STACK_SIZE);
 80044dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e0:	2100      	movs	r1, #0
 80044e2:	4608      	mov	r0, r1
 80044e4:	f7ff fd44 	bl	8003f70 <_ux_utility_memory_allocate>
            cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack =  
 80044e8:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
            if (cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack  == UX_NULL)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	f000 80b3 	beq.w	8004658 <_ux_device_class_cdc_acm_ioctl+0x274>
                    _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_THREAD_STACK_SIZE);
 80044f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f6:	2100      	movs	r1, #0
 80044f8:	4608      	mov	r0, r1
 80044fa:	f7ff fd39 	bl	8003f70 <_ux_utility_memory_allocate>
            cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack =  
 80044fe:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
            if (cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack  == UX_NULL)
 8004502:	2800      	cmp	r0, #0
 8004504:	d03d      	beq.n	8004582 <_ux_device_class_cdc_acm_ioctl+0x19e>
            status =  _ux_utility_event_flags_create(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group, "ux_device_class_cdc_acm_event_flag");
 8004506:	f504 770a 	add.w	r7, r4, #552	; 0x228
 800450a:	4955      	ldr	r1, [pc, #340]	; (8004660 <_ux_device_class_cdc_acm_ioctl+0x27c>)
 800450c:	4638      	mov	r0, r7
 800450e:	f000 fe1d 	bl	800514c <_ux_utility_event_flags_create>
            if (status != UX_SUCCESS)
 8004512:	2800      	cmp	r0, #0
 8004514:	d13b      	bne.n	800458e <_ux_device_class_cdc_acm_ioctl+0x1aa>
            status =  _ux_utility_thread_create(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread , "ux_slave_class_cdc_acm_bulkin_thread", 
 8004516:	f104 0888 	add.w	r8, r4, #136	; 0x88
                        (ULONG) (ALIGN_TYPE) cdc_acm, (VOID *) cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack ,
 800451a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
            status =  _ux_utility_thread_create(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread , "ux_slave_class_cdc_acm_bulkin_thread", 
 800451e:	2301      	movs	r3, #1
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	2300      	movs	r3, #0
 8004524:	9304      	str	r3, [sp, #16]
 8004526:	2314      	movs	r3, #20
 8004528:	9303      	str	r3, [sp, #12]
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	9200      	str	r2, [sp, #0]
 8004534:	4623      	mov	r3, r4
 8004536:	4a4b      	ldr	r2, [pc, #300]	; (8004664 <_ux_device_class_cdc_acm_ioctl+0x280>)
 8004538:	494b      	ldr	r1, [pc, #300]	; (8004668 <_ux_device_class_cdc_acm_ioctl+0x284>)
 800453a:	4640      	mov	r0, r8
 800453c:	f000 fe46 	bl	80051cc <_ux_utility_thread_create>
            if (status != UX_SUCCESS)
 8004540:	bb78      	cbnz	r0, 80045a2 <_ux_device_class_cdc_acm_ioctl+0x1be>
                        (ULONG) (ALIGN_TYPE) cdc_acm, (VOID *) cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack ,
 8004542:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
            status =  _ux_utility_thread_create(&cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread , "ux_slave_class_cdc_acm_bulkout_thread", 
 8004546:	2301      	movs	r3, #1
 8004548:	9305      	str	r3, [sp, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	2314      	movs	r3, #20
 8004550:	9303      	str	r3, [sp, #12]
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	9200      	str	r2, [sp, #0]
 800455c:	4623      	mov	r3, r4
 800455e:	4a43      	ldr	r2, [pc, #268]	; (800466c <_ux_device_class_cdc_acm_ioctl+0x288>)
 8004560:	4943      	ldr	r1, [pc, #268]	; (8004670 <_ux_device_class_cdc_acm_ioctl+0x28c>)
 8004562:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8004566:	f000 fe31 	bl	80051cc <_ux_utility_thread_create>
            if (status != UX_SUCCESS)
 800456a:	4606      	mov	r6, r0
 800456c:	bb30      	cbnz	r0, 80045bc <_ux_device_class_cdc_acm_ioctl+0x1d8>
            cdc_acm -> ux_device_class_cdc_acm_write_callback  = callback -> ux_device_class_cdc_acm_parameter_write_callback;
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
            cdc_acm -> ux_device_class_cdc_acm_read_callback = callback -> ux_device_class_cdc_acm_parameter_read_callback;
 8004574:	686b      	ldr	r3, [r5, #4]
 8004576:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
            cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_TRUE;
 800457a:	2301      	movs	r3, #1
 800457c:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
            return(UX_SUCCESS);
 8004580:	e750      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 8004582:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8004586:	f7ff fda1 	bl	80040cc <_ux_utility_memory_free>
                return(UX_MEMORY_INSUFFICIENT);
 800458a:	2612      	movs	r6, #18
 800458c:	e74a      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 800458e:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8004592:	f7ff fd9b 	bl	80040cc <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 8004596:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800459a:	f7ff fd97 	bl	80040cc <_ux_utility_memory_free>
                return(UX_EVENT_ERROR);
 800459e:	2618      	movs	r6, #24
 80045a0:	e740      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_event_flags_delete(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group);
 80045a2:	4638      	mov	r0, r7
 80045a4:	f000 fde0 	bl	8005168 <_ux_utility_event_flags_delete>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 80045a8:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 80045ac:	f7ff fd8e 	bl	80040cc <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 80045b0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80045b4:	f7ff fd8a 	bl	80040cc <_ux_utility_memory_free>
                return(UX_THREAD_ERROR);
 80045b8:	2616      	movs	r6, #22
 80045ba:	e733      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                _ux_utility_event_flags_delete(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group);
 80045bc:	4638      	mov	r0, r7
 80045be:	f000 fdd3 	bl	8005168 <_ux_utility_event_flags_delete>
                _ux_utility_thread_delete(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread);
 80045c2:	4640      	mov	r0, r8
 80045c4:	f000 fe1f 	bl	8005206 <_ux_utility_thread_delete>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 80045c8:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 80045cc:	f7ff fd7e 	bl	80040cc <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 80045d0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80045d4:	f7ff fd7a 	bl	80040cc <_ux_utility_memory_free>
                return(UX_THREAD_ERROR);
 80045d8:	2616      	movs	r6, #22
 80045da:	e723      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
            if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 80045dc:	f8d0 3250 	ldr.w	r3, [r0, #592]	; 0x250
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d13b      	bne.n	800465c <_ux_device_class_cdc_acm_ioctl+0x278>
                interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80045e4:	6803      	ldr	r3, [r0, #0]
                endpoint =  interface -> ux_slave_interface_first_endpoint;
 80045e6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80045e8:	f105 0030 	add.w	r0, r5, #48	; 0x30
                    if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 80045ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d01f      	beq.n	8004632 <_ux_device_class_cdc_acm_ioctl+0x24e>
                endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80045f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80045f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
                    if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d01d      	beq.n	800463a <_ux_device_class_cdc_acm_ioctl+0x256>
                _ux_utility_thread_delete(&cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread);
 80045fe:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8004602:	f000 fe00 	bl	8005206 <_ux_utility_thread_delete>
                _ux_utility_thread_delete(&cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread);
 8004606:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800460a:	f000 fdfc 	bl	8005206 <_ux_utility_thread_delete>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack );
 800460e:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8004612:	f7ff fd5b 	bl	80040cc <_ux_utility_memory_free>
                _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkin_thread_stack );
 8004616:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800461a:	f7ff fd57 	bl	80040cc <_ux_utility_memory_free>
                _ux_utility_event_flags_delete(&cdc_acm -> ux_slave_class_cdc_acm_event_flags_group);
 800461e:	f504 700a 	add.w	r0, r4, #552	; 0x228
 8004622:	f000 fda1 	bl	8005168 <_ux_utility_event_flags_delete>
                cdc_acm -> ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 8004626:	2600      	movs	r6, #0
 8004628:	f8c4 6254 	str.w	r6, [r4, #596]	; 0x254
                cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
 800462c:	f8c4 6250 	str.w	r6, [r4, #592]	; 0x250
            break;                
 8004630:	e6f8      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 8004632:	2104      	movs	r1, #4
 8004634:	f000 fd64 	bl	8005100 <_ux_device_stack_transfer_abort>
 8004638:	e7db      	b.n	80045f2 <_ux_device_class_cdc_acm_ioctl+0x20e>
                        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 800463a:	2104      	movs	r1, #4
 800463c:	f000 fd60 	bl	8005100 <_ux_device_stack_transfer_abort>
 8004640:	e7dd      	b.n	80045fe <_ux_device_class_cdc_acm_ioctl+0x21a>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8004642:	2254      	movs	r2, #84	; 0x54
 8004644:	2107      	movs	r1, #7
 8004646:	2002      	movs	r0, #2
 8004648:	f7ff fbea 	bl	8003e20 <_ux_system_error_handler>
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800464c:	2654      	movs	r6, #84	; 0x54
 800464e:	e6e9      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                status = UX_ERROR;
 8004650:	26ff      	movs	r6, #255	; 0xff
 8004652:	e6e7      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                return(UX_ERROR);
 8004654:	26ff      	movs	r6, #255	; 0xff
 8004656:	e6e5      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                return(UX_MEMORY_INSUFFICIENT);
 8004658:	2612      	movs	r6, #18
 800465a:	e6e3      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
                return(UX_ERROR);                
 800465c:	26ff      	movs	r6, #255	; 0xff
 800465e:	e6e1      	b.n	8004424 <_ux_device_class_cdc_acm_ioctl+0x40>
 8004660:	0800738c 	.word	0x0800738c
 8004664:	08005219 	.word	0x08005219
 8004668:	080073b0 	.word	0x080073b0
 800466c:	080052dd 	.word	0x080052dd
 8004670:	080073d8 	.word	0x080073d8

08004674 <_ux_dcd_stm32_endpoint_stall>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4606      	mov	r6, r0
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_register;
ULONG               stm32_endpoint_address;

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8004678:	688d      	ldr	r5, [r1, #8]

    /* Check the endpoint direction for the base.  */
    if (ed -> ux_dcd_stm32_ed_direction  == UX_ENDPOINT_IN)
 800467a:	69eb      	ldr	r3, [r5, #28]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d015      	beq.n	80046ac <_ux_dcd_stm32_endpoint_stall+0x38>
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));

    else
    
        /* Endpoint is OUT.  */
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004680:	68ac      	ldr	r4, [r5, #8]
 8004682:	3458      	adds	r4, #88	; 0x58
 8004684:	0164      	lsls	r4, r4, #5

    /* Read the current EP register.  */
       stm32_endpoint_register =  _ux_dcd_stm32_register_read(dcd_stm32, stm32_endpoint_address);
 8004686:	4621      	mov	r1, r4
 8004688:	4630      	mov	r0, r6
 800468a:	f7fe fc92 	bl	8002fb2 <_ux_dcd_stm32_register_read>

    /* Check the direction. Is the endpoint IN ? */
    if (ed -> ux_dcd_stm32_ed_direction == UX_ENDPOINT_IN)
 800468e:	69eb      	ldr	r3, [r5, #28]
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d00f      	beq.n	80046b4 <_ux_dcd_stm32_endpoint_stall+0x40>

    /* Set the stall bit.  */
    stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_STALL;

    /* Write the endpoint register.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, stm32_endpoint_register);
 8004694:	f440 1200 	orr.w	r2, r0, #2097152	; 0x200000
 8004698:	4621      	mov	r1, r4
 800469a:	4630      	mov	r0, r6
 800469c:	f7fe fc93 	bl	8002fc6 <_ux_dcd_stm32_register_write>
        
    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	f043 0304 	orr.w	r3, r3, #4
 80046a6:	602b      	str	r3, [r5, #0]

    /* This function never fails.  */
    return(UX_SUCCESS);         
}
 80046a8:	2000      	movs	r0, #0
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
        stm32_endpoint_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80046ac:	68ac      	ldr	r4, [r5, #8]
 80046ae:	3448      	adds	r4, #72	; 0x48
 80046b0:	0164      	lsls	r4, r4, #5
 80046b2:	e7e8      	b.n	8004686 <_ux_dcd_stm32_endpoint_stall+0x12>
        if (stm32_endpoint_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	daed      	bge.n	8004694 <_ux_dcd_stm32_endpoint_stall+0x20>
            stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPDIS;
 80046b8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80046bc:	e7ea      	b.n	8004694 <_ux_dcd_stm32_endpoint_stall+0x20>

080046be <_ux_dcd_stm32_fifo_flush>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_flush(UX_DCD_STM32 *dcd_stm32, ULONG fifo_type, ULONG fifo_index)
{
 80046be:	b538      	push	{r3, r4, r5, lr}
 80046c0:	4604      	mov	r4, r0
 80046c2:	460d      	mov	r5, r1
ULONG    stm32_register;

    /* Check if this is for RX or TX Fifos.  */
    if (fifo_type == UX_DCD_STM32_FLUSH_RX_FIFO)
 80046c4:	2910      	cmp	r1, #16
 80046c6:	d010      	beq.n	80046ea <_ux_dcd_stm32_fifo_flush+0x2c>
    else

        /* Set the Fifo number and the TXFFLSH bit.  */
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
                                    (UX_DCD_STM32_OTG_FS_GRSTCTL_TXFFLSH | 
                                    (fifo_index << UX_DCD_STM32_OTG_FS_GRSTCTL_TXFNUM_SHIFT)));
 80046c8:	0192      	lsls	r2, r2, #6
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
 80046ca:	f042 0220 	orr.w	r2, r2, #32
 80046ce:	2110      	movs	r1, #16
 80046d0:	f7fe fc79 	bl	8002fc6 <_ux_dcd_stm32_register_write>

    /* Wait for the FIFO to be flushed.  */
    do
    {
        /* Read the GRSTCTL register.  */
        stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL);
 80046d4:	2110      	movs	r1, #16
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7fe fc6b 	bl	8002fb2 <_ux_dcd_stm32_register_read>

    } while (stm32_register & fifo_type);
 80046dc:	4205      	tst	r5, r0
 80046de:	d1f9      	bne.n	80046d4 <_ux_dcd_stm32_fifo_flush+0x16>

    /* Spec says to wait for 3 PHY Clocks.  */
    _ux_dcd_stm32_delay(3);    
 80046e0:	2003      	movs	r0, #3
 80046e2:	f7fe fa19 	bl	8002b18 <_ux_dcd_stm32_delay>

    return(UX_SUCCESS);        
}
 80046e6:	2000      	movs	r0, #0
 80046e8:	bd38      	pop	{r3, r4, r5, pc}
        _ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_GRSTCTL, 
 80046ea:	2210      	movs	r2, #16
 80046ec:	4611      	mov	r1, r2
 80046ee:	f7fe fc6a 	bl	8002fc6 <_ux_dcd_stm32_register_write>
 80046f2:	e7ef      	b.n	80046d4 <_ux_dcd_stm32_fifo_flush+0x16>

080046f4 <_ux_dcd_stm32_fifo_read>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_read(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index,
                                        UCHAR *data_pointer, ULONG fifo_length)
{
 80046f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f8:	4607      	mov	r7, r0
 80046fa:	4614      	mov	r4, r2
TX_INTERRUPT_SAVE_AREA
ULONG    fifo_address;
ULONG    fifo_value;

    /* Calculate the address of the FIFO.  */
    fifo_address = UX_DCD_STM32_DATA_FIFO_OFFSET + (endpoint_index * UX_DCD_STM32_DATA_FIFO_SIZE);
 80046fc:	3101      	adds	r1, #1
 80046fe:	030e      	lsls	r6, r1, #12

    /* Number of bytes to read is based on DWORDS.  */
    fifo_length = (fifo_length + 3) / sizeof(ULONG);
 8004700:	3303      	adds	r3, #3
 8004702:	089b      	lsrs	r3, r3, #2
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004704:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004708:	b672      	cpsid	i
    
    /* Lockout interrupts.  */
    TX_DISABLE

    /* Read one DWORD at a time.  */
    while (fifo_length--)
 800470a:	e009      	b.n	8004720 <_ux_dcd_stm32_fifo_read+0x2c>
    {

        /* Read from FIFO.  */
        fifo_value = _ux_dcd_stm32_register_read(dcd_stm32, fifo_address);
 800470c:	4631      	mov	r1, r6
 800470e:	4638      	mov	r0, r7
 8004710:	f7fe fc4f 	bl	8002fb2 <_ux_dcd_stm32_register_read>
        
        /* Store this value in a endian agnostic way.  */
        _ux_utility_long_put(data_pointer, fifo_value);
 8004714:	4601      	mov	r1, r0
 8004716:	4620      	mov	r0, r4
 8004718:	f000 fd2a 	bl	8005170 <_ux_utility_long_put>

        /* Increment the data pointer buffer address.  */
        data_pointer += sizeof(ULONG);
 800471c:	3404      	adds	r4, #4
    while (fifo_length--)
 800471e:	462b      	mov	r3, r5
 8004720:	1e5d      	subs	r5, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f2      	bne.n	800470c <_ux_dcd_stm32_fifo_read+0x18>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004726:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return successful completion.  */
    return(UX_SUCCESS);        
}
 800472a:	2000      	movs	r0, #0
 800472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004730 <_ux_dcd_stm32_fifo_write>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_fifo_write(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index,
                                     UCHAR * data_pointer, ULONG fifo_length, ULONG last_packet_flag)
{
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	4607      	mov	r7, r0
 8004736:	4614      	mov	r4, r2
TX_INTERRUPT_SAVE_AREA
ULONG    fifo_address;
ULONG    fifo_value;

    /* Calculate the address of the FIFO.  */
    fifo_address = UX_DCD_STM32_DATA_FIFO_OFFSET + (endpoint_index * UX_DCD_STM32_DATA_FIFO_SIZE);
 8004738:	3101      	adds	r1, #1
 800473a:	030e      	lsls	r6, r1, #12

    /* Number of bytes to read is based on DWORDS.  */
    fifo_length = (fifo_length + 3) / sizeof(ULONG);
 800473c:	3303      	adds	r3, #3
 800473e:	089b      	lsrs	r3, r3, #2
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004740:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004744:	b672      	cpsid	i
    
    /* Lockout interrupts.  */
    TX_DISABLE

    /* Write one DWORD at a time.  */
    while (fifo_length--)
 8004746:	e009      	b.n	800475c <_ux_dcd_stm32_fifo_write+0x2c>
    {

        /* load the value from the FIFO. This is little/endian agnostic.  */
        fifo_value = _ux_utility_long_get(data_pointer);
 8004748:	4620      	mov	r0, r4
 800474a:	f7ff fc06 	bl	8003f5a <_ux_utility_long_get>

        /* Write from FIFO.  */
        _ux_dcd_stm32_register_write(dcd_stm32, fifo_address, fifo_value);
 800474e:	4602      	mov	r2, r0
 8004750:	4631      	mov	r1, r6
 8004752:	4638      	mov	r0, r7
 8004754:	f7fe fc37 	bl	8002fc6 <_ux_dcd_stm32_register_write>

        /* Increment the data pointer buffer address.  */
        data_pointer += sizeof(ULONG);
 8004758:	3404      	adds	r4, #4
    while (fifo_length--)
 800475a:	462b      	mov	r3, r5
 800475c:	1e5d      	subs	r5, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <_ux_dcd_stm32_fifo_write+0x18>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004762:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return successful completion.  */
    return(UX_SUCCESS);        
}
 8004766:	2000      	movs	r0, #0
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800476c <_ux_dcd_stm32_function>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_function(UX_SLAVE_DCD* dcd, UINT function, VOID* parameter)
{
 800476c:	b508      	push	{r3, lr}
	/* Check the status of the controller. */
	if (dcd->ux_slave_dcd_status == UX_UNUSED)
 800476e:	6a03      	ldr	r3, [r0, #32]
 8004770:	b163      	cbz	r3, 800478c <_ux_dcd_stm32_function+0x20>

		return (UX_CONTROLLER_UNKNOWN);
	}

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 8004772:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

	UINT status;

	/* Look at the function and route it. */
	switch (function)
 8004774:	f1a1 030a 	sub.w	r3, r1, #10
 8004778:	2b0b      	cmp	r3, #11
 800477a:	d832      	bhi.n	80047e2 <_ux_dcd_stm32_function+0x76>
 800477c:	e8df f003 	tbb	[pc, r3]
 8004780:	3111310d 	.word	0x3111310d
 8004784:	251d1915 	.word	0x251d1915
 8004788:	2d212931 	.word	0x2d212931
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD,
 800478c:	2255      	movs	r2, #85	; 0x55
 800478e:	2102      	movs	r1, #2
 8004790:	4608      	mov	r0, r1
 8004792:	f7ff fb45 	bl	8003e20 <_ux_system_error_handler>
		return (UX_CONTROLLER_UNKNOWN);
 8004796:	2055      	movs	r0, #85	; 0x55
			break;
	}

	/* Return completion status. */
	return (status);
}
 8004798:	bd08      	pop	{r3, pc}
			status = _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG*)parameter);
 800479a:	4611      	mov	r1, r2
 800479c:	f000 fef3 	bl	8005586 <_ux_dcd_stm32_frame_number_get>
			break;
 80047a0:	e7fa      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER*)parameter);
 80047a2:	4611      	mov	r1, r2
 80047a4:	f000 f8fc 	bl	80049a0 <_ux_dcd_stm32_transfer_request>
			break;
 80047a8:	e7f6      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 80047aa:	4611      	mov	r1, r2
 80047ac:	f000 fde0 	bl	8005370 <_ux_dcd_stm32_endpoint_create>
			break;
 80047b0:	e7f2      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 80047b2:	4611      	mov	r1, r2
 80047b4:	f000 fe86 	bl	80054c4 <_ux_dcd_stm32_endpoint_destroy>
			break;
 80047b8:	e7ee      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 80047ba:	4611      	mov	r1, r2
 80047bc:	f000 feb2 	bl	8005524 <_ux_dcd_stm32_endpoint_reset>
			break;
 80047c0:	e7ea      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 80047c2:	4611      	mov	r1, r2
 80047c4:	f7ff ff56 	bl	8004674 <_ux_dcd_stm32_endpoint_stall>
			break;
 80047c8:	e7e6      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_address_set(dcd_stm32, (ULONG)parameter);
 80047ca:	4611      	mov	r1, r2
 80047cc:	f000 fdbe 	bl	800534c <_ux_dcd_stm32_address_set>
			break;
 80047d0:	e7e2      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_state_change(dcd_stm32, (ULONG)parameter);
 80047d2:	4611      	mov	r1, r2
 80047d4:	f000 f8e2 	bl	800499c <_ux_dcd_stm32_state_change>
			break;
 80047d8:	e7de      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			status = _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG)parameter);
 80047da:	4611      	mov	r1, r2
 80047dc:	f000 fec2 	bl	8005564 <_ux_dcd_stm32_endpoint_status>
			break;
 80047e0:	e7da      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>
			_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD,
 80047e2:	2254      	movs	r2, #84	; 0x54
 80047e4:	2102      	movs	r1, #2
 80047e6:	4608      	mov	r0, r1
 80047e8:	f7ff fb1a 	bl	8003e20 <_ux_system_error_handler>
			status = UX_FUNCTION_NOT_SUPPORTED;
 80047ec:	2054      	movs	r0, #84	; 0x54
			break;
 80047ee:	e7d3      	b.n	8004798 <_ux_dcd_stm32_function+0x2c>

080047f0 <_ux_dcd_stm32_initialize_complete>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_initialize_complete(VOID)
{
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 80047f2:	4b68      	ldr	r3, [pc, #416]	; (8004994 <_ux_dcd_stm32_initialize_complete+0x1a4>)
 80047f4:	681d      	ldr	r5, [r3, #0]

	/* Get the pointer to the STM32 DCD. */
	UX_DCD_STM32* dcd_stm32 = (UX_DCD_STM32*)dcd->ux_slave_dcd_controller_hardware;
 80047f6:	6bec      	ldr	r4, [r5, #60]	; 0x3c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Are we in DFU mode ? If so, check if we are in a Reset mode. */
	if (_ux_system_slave->ux_system_slave_device_dfu_state_machine ==
 80047f8:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d021      	beq.n	8004844 <_ux_dcd_stm32_initialize_complete+0x54>
				->ux_system_slave_dfu_framework_length;
	}
	else
	{
		/* Set State to App Idle. */
		_ux_system_slave->ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0

		/* Check the speed and set the correct descriptor. */
		if (_ux_system_slave->ux_system_slave_speed == UX_FULL_SPEED_DEVICE)
 8004806:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800480a:	2b01      	cmp	r3, #1
 800480c:	d023      	beq.n	8004856 <_ux_dcd_stm32_initialize_complete+0x66>
		}
		else
		{
			/* The device is operating at high speed. */
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
					->ux_system_slave_device_framework_high_speed;
 800480e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8004812:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
					->ux_system_slave_device_framework_length_high_speed;
 8004816:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 800481a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
		}
	}

	/* Flush the Endpoint Fifos. */
	_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO, UX_DCD_STM32_FLUSH_FIFO_ALL);
 800481e:	2210      	movs	r2, #16
 8004820:	2120      	movs	r1, #32
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff ff4b 	bl	80046be <_ux_dcd_stm32_fifo_flush>
	_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_RX_FIFO, UX_DCD_STM32_FLUSH_FIFO_ALL);
 8004828:	2210      	movs	r2, #16
 800482a:	4611      	mov	r1, r2
 800482c:	4620      	mov	r0, r4
 800482e:	f7ff ff46 	bl	80046be <_ux_dcd_stm32_fifo_flush>

	/* Clear all pending device interrupts. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINT, 0xFFFFFFFF);
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	f640 0118 	movw	r1, #2072	; 0x818
 800483a:	4620      	mov	r0, r4
 800483c:	f7fe fbc3 	bl	8002fc6 <_ux_dcd_stm32_register_write>

	ULONG ed_index;
	ULONG stm32_register;

	/* Reset the IN endpoints. */
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 8004840:	2600      	movs	r6, #0
 8004842:	e025      	b.n	8004890 <_ux_dcd_stm32_initialize_complete+0xa0>
				->ux_system_slave_dfu_framework;
 8004844:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
		_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 8004848:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
				->ux_system_slave_dfu_framework_length;
 800484c:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
		_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8004850:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
 8004854:	e7e3      	b.n	800481e <_ux_dcd_stm32_initialize_complete+0x2e>
					->ux_system_slave_device_framework_full_speed;
 8004856:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
			_ux_system_slave->ux_system_slave_device_framework = _ux_system_slave
 800485a:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
					->ux_system_slave_device_framework_length_full_speed;
 800485e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
			_ux_system_slave->ux_system_slave_device_framework_length = _ux_system_slave
 8004862:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
 8004866:	e7da      	b.n	800481e <_ux_dcd_stm32_initialize_complete+0x2e>

		/* Check if the endpoint is already enabled. */
		if (stm32_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
		{
			/* Set the endpoint disabled bit and SNAK. */
			stm32_register = UX_DCD_STM32_OTG_FS_DIEPCTL_SNAK |
 8004868:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
		else
			/* Reset register. Nothing to do. */
			stm32_register = 0;

		/* Set the Endpoint register. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL +
 800486c:	4639      	mov	r1, r7
 800486e:	4620      	mov	r0, r4
 8004870:	f7fe fba9 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), stm32_register);

		/* Reset the DIEPSIZ register of the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ +
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), 0);
 8004874:	0177      	lsls	r7, r6, #5
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPTSIZ +
 8004876:	2200      	movs	r2, #0
 8004878:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 800487c:	4620      	mov	r0, r4
 800487e:	f7fe fba2 	bl	8002fc6 <_ux_dcd_stm32_register_write>

		/* Reset the interrupt register for the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPINT +
 8004882:	22dd      	movs	r2, #221	; 0xdd
 8004884:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8004888:	4620      	mov	r0, r4
 800488a:	f7fe fb9c 	bl	8002fc6 <_ux_dcd_stm32_register_write>
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 800488e:	3601      	adds	r6, #1
 8004890:	2e03      	cmp	r6, #3
 8004892:	d80a      	bhi.n	80048aa <_ux_dcd_stm32_initialize_complete+0xba>
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL +
 8004894:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8004898:	017f      	lsls	r7, r7, #5
 800489a:	4639      	mov	r1, r7
 800489c:	4620      	mov	r0, r4
 800489e:	f7fe fb88 	bl	8002fb2 <_ux_dcd_stm32_register_read>
		if (stm32_register & UX_DCD_STM32_OTG_FS_DIEPCTL_EPENA)
 80048a2:	2800      	cmp	r0, #0
 80048a4:	dbe0      	blt.n	8004868 <_ux_dcd_stm32_initialize_complete+0x78>
			stm32_register = 0;
 80048a6:	2200      	movs	r2, #0
 80048a8:	e7e0      	b.n	800486c <_ux_dcd_stm32_initialize_complete+0x7c>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), UX_DCD_STM32_OTG_FS_DIEPINT_ALL);
	}

	/* Reset the OUT endpoints. */
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 80048aa:	2600      	movs	r6, #0
 80048ac:	e013      	b.n	80048d6 <_ux_dcd_stm32_initialize_complete+0xe6>

		/* Check if the endpoint is already enabled. */
		if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA)
		{
			/* Set the endpoint disabled bit and SNAK. */
			stm32_register = UX_DCD_STM32_OTG_FS_DOEPCTL_SNAK |
 80048ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
		else
			/* Reset register. Nothing to do. */
			stm32_register = 0;

		/* Set the Endpoint register. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL +
 80048b2:	4639      	mov	r1, r7
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fe fb86 	bl	8002fc6 <_ux_dcd_stm32_register_write>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), stm32_register);

		/* Reset the DIEPSIZ register of the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ +
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), 0);
 80048ba:	0177      	lsls	r7, r6, #5
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPTSIZ +
 80048bc:	2200      	movs	r2, #0
 80048be:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7fe fb7f 	bl	8002fc6 <_ux_dcd_stm32_register_write>

		/* Reset the interrupt register for the endpoint. */
		_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPINT +
 80048c8:	225d      	movs	r2, #93	; 0x5d
 80048ca:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fe fb79 	bl	8002fc6 <_ux_dcd_stm32_register_write>
	for (ed_index = 0; ed_index < UX_DCD_STM32_MAX_ED; ed_index++)
 80048d4:	3601      	adds	r6, #1
 80048d6:	2e03      	cmp	r6, #3
 80048d8:	d80a      	bhi.n	80048f0 <_ux_dcd_stm32_initialize_complete+0x100>
		stm32_register = _ux_dcd_stm32_register_read(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL +
 80048da:	f106 0758 	add.w	r7, r6, #88	; 0x58
 80048de:	017f      	lsls	r7, r7, #5
 80048e0:	4639      	mov	r1, r7
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7fe fb65 	bl	8002fb2 <_ux_dcd_stm32_register_read>
		if (stm32_register & UX_DCD_STM32_OTG_FS_DOEPCTL_EPENA)
 80048e8:	2800      	cmp	r0, #0
 80048ea:	dbe0      	blt.n	80048ae <_ux_dcd_stm32_initialize_complete+0xbe>
			stm32_register = 0;
 80048ec:	2200      	movs	r2, #0
 80048ee:	e7e0      	b.n	80048b2 <_ux_dcd_stm32_initialize_complete+0xc2>
				(ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE), UX_DCD_STM32_OTG_FS_DOEPINT_ALL);
	}

	/* Set the DOEPMSK register. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPMSK,
 80048f0:	224b      	movs	r2, #75	; 0x4b
 80048f2:	f640 0114 	movw	r1, #2068	; 0x814
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7fe fb65 	bl	8002fc6 <_ux_dcd_stm32_register_write>
			UX_DCD_STM32_OTG_FS_DOEPMSK_XFRCM | UX_DCD_STM32_OTG_FS_DOEPMSK_STUPM |
			UX_DCD_STM32_OTG_FS_DOEPMSK_EPDM | UX_DCD_STM32_OTG_FS_DOEPMSK_B2BSTUP);

	/* Set the DIEPMSK register. */
	_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPMSK,
 80048fc:	220b      	movs	r2, #11
 80048fe:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8004902:	4620      	mov	r0, r4
 8004904:	f7fe fb5f 	bl	8002fc6 <_ux_dcd_stm32_register_write>
			UX_DCD_STM32_OTG_FS_DIEPMSK_XFRCM | UX_DCD_STM32_OTG_FS_DIEPMSK_EPDM |
			UX_DCD_STM32_OTG_FS_DIEPMSK_TOM);

	/* Reset the Global IN/OUT NAK. */
	_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCTL,
 8004908:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800490c:	f640 0104 	movw	r1, #2052	; 0x804
 8004910:	4620      	mov	r0, r4
 8004912:	f7fe fb52 	bl	8002fba <_ux_dcd_stm32_register_set>
			UX_DCD_STM32_OTG_FS_DCTL_CGONAK | UX_DCD_STM32_OTG_FS_DCTL_CGINAK);

	/* Reset the device address. */
	_ux_dcd_stm32_address_set(dcd_stm32, 0);
 8004916:	2100      	movs	r1, #0
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fd17 	bl	800534c <_ux_dcd_stm32_address_set>

	/*--------------------------------------------------------------------------------------------*/

	/* Get the device framework pointer. */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 800491e:	4c1d      	ldr	r4, [pc, #116]	; (8004994 <_ux_dcd_stm32_initialize_complete+0x1a4>)
 8004920:	6820      	ldr	r0, [r4, #0]

	/* And create the decompressed device descriptor structure. */
	_ux_utility_descriptor_parse(device_framework, _ux_system_device_descriptor_structure,
 8004922:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8004926:	220e      	movs	r2, #14
 8004928:	491b      	ldr	r1, [pc, #108]	; (8004998 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 800492a:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 800492e:	f7ff faf5 	bl	8003f1c <_ux_utility_descriptor_parse>
			UX_DEVICE_DESCRIPTOR_ENTRIES, (UCHAR*)&device->ux_slave_device_descriptor);

	/* Now we create a transfer request to accept the first SETUP packet and get the ball running.
	 * First get the address of the endpoint transfer request container. */
	UX_SLAVE_TRANSFER* transfer_request =
 8004932:	f105 06ac 	add.w	r6, r5, #172	; 0xac
			&device->ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

	/* Set the timeout to be for Control Endpoint. */
	transfer_request->ux_slave_transfer_request_timeout = MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8004936:	2364      	movs	r3, #100	; 0x64
 8004938:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8

	/* Adjust the current data pointer as well. */
	transfer_request->ux_slave_transfer_request_current_data_pointer =
			transfer_request->ux_slave_transfer_request_data_pointer;
 800493c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
	transfer_request->ux_slave_transfer_request_current_data_pointer =
 8004940:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc

	/* Update the transfer request endpoint pointer with the default endpoint. */
	transfer_request->ux_slave_transfer_request_endpoint =
			&device->ux_slave_device_control_endpoint;
 8004944:	f105 027c 	add.w	r2, r5, #124	; 0x7c
	transfer_request->ux_slave_transfer_request_endpoint =
 8004948:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4

	/* The control endpoint max packet size needs to be filled manually in its descriptor. */
	transfer_request->ux_slave_transfer_request_endpoint->ux_slave_endpoint_descriptor
			.wMaxPacketSize = device->ux_slave_device_descriptor.bMaxPacketSize0;
 800494c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800494e:	61d3      	str	r3, [r2, #28]

	/* On the control endpoint, always expect the maximum. */
	transfer_request->ux_slave_transfer_request_requested_length =
 8004950:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
			&device->ux_slave_device_control_endpoint;

	/* Create the default control endpoint attached to the device. Once this endpoint is enabled,
	 * the host can then send a setup packet. The device controller will receive it and will call
	 * the setup function module. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8004954:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004956:	210e      	movs	r1, #14
 8004958:	4628      	mov	r0, r5
 800495a:	4798      	blx	r3
			(VOID*)&device->ux_slave_device_control_endpoint);

	/* Ensure the control endpoint is properly reset. */
	device->ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800495c:	2300      	movs	r3, #0
 800495e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	/* Mark the phase as SETUP. */
	transfer_request->ux_slave_transfer_request_type = UX_TRANSFER_PHASE_SETUP;
 8004962:	2201      	movs	r2, #1
 8004964:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0

	/* Mark this transfer request as pending. */
	transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8004968:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/* Ask for 8 bytes of the SETUP packet. */
	transfer_request->ux_slave_transfer_request_requested_length = UX_SETUP_SIZE;
 800496c:	2208      	movs	r2, #8
 800496e:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	transfer_request->ux_slave_transfer_request_in_transfer_length = UX_SETUP_SIZE;
 8004972:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8

	/* Reset the number of bytes sent/received. */
	transfer_request->ux_slave_transfer_request_actual_length = 0;
 8004976:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	/* Call the DCD driver transfer function. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800497a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800497c:	4632      	mov	r2, r6
 800497e:	210c      	movs	r1, #12
 8004980:	4628      	mov	r0, r5
 8004982:	4798      	blx	r3

	/* Check the status change callback. */
	if (_ux_system_slave->ux_system_slave_change_function != UX_NULL)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800498a:	b10b      	cbz	r3, 8004990 <_ux_dcd_stm32_initialize_complete+0x1a0>
	{
		/* Inform the application if a callback function was programmed. */
		_ux_system_slave->ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800498c:	2001      	movs	r0, #1
 800498e:	4798      	blx	r3
	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

	/* We are now ready for the USB device to accept the first packet when connected. */
	return (UX_SUCCESS);
}
 8004990:	2000      	movs	r0, #0
 8004992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004994:	2000072c 	.word	0x2000072c
 8004998:	20000154 	.word	0x20000154

0800499c <_ux_dcd_stm32_state_change>:
UINT  _ux_dcd_stm32_state_change(UX_DCD_STM32 *dcd_stm32, ULONG state)
{

    /* This function always succeeds.  */
    return(UX_SUCCESS);         
}
 800499c:	2000      	movs	r0, #0
 800499e:	4770      	bx	lr

080049a0 <_ux_dcd_stm32_transfer_request>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b083      	sub	sp, #12
 80049a6:	4607      	mov	r7, r0
 80049a8:	460c      	mov	r4, r1
ULONG                    endpoint_control;
ULONG                    endpoint_size;
UINT                    status;                            

    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80049aa:	f8d1 a008 	ldr.w	sl, [r1, #8]

    /* Get the physical endpoint from the logical endpoint.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80049ae:	f8da 6008 	ldr.w	r6, [sl, #8]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 80049b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d01f      	beq.n	80049f8 <_ux_dcd_stm32_transfer_request+0x58>
    {

        /* We have a request for a SETUP or OUT Endpoint.  */

        /* Compute the endpoint address.  */
        endpoint_control_address = (UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80049b8:	68b5      	ldr	r5, [r6, #8]
 80049ba:	f105 0858 	add.w	r8, r5, #88	; 0x58
 80049be:	ea4f 1848 	mov.w	r8, r8, lsl #5

        /* And the size register.  */
        endpoint_size_address = (UX_DCD_STM32_OTG_FS_DOEPTSIZ + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80049c2:	016d      	lsls	r5, r5, #5
 80049c4:	f505 6531 	add.w	r5, r5, #2832	; 0xb10
        
        /* Read the content of the control register.  */
        endpoint_control  =  _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 80049c8:	4641      	mov	r1, r8
 80049ca:	f7fe faf2 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 80049ce:	4681      	mov	r9, r0

        /* Get the size of the transfer, used for a IN transaction only.  */
        fifo_length =  transfer_request -> ux_slave_transfer_request_requested_length;
 80049d0:	6962      	ldr	r2, [r4, #20]

        /* Check if the endpoint size is bigger that data requested. */
        if(fifo_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80049d2:	f8da 301c 	ldr.w	r3, [sl, #28]
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d200      	bcs.n	80049dc <_ux_dcd_stm32_transfer_request+0x3c>
        {

            /* Adjust the transfer size.  */
            fifo_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80049da:	461a      	mov	r2, r3
        }

        /* Check if size is 0 as in ZLP.  */
        if (fifo_length == 0)
 80049dc:	2a00      	cmp	r2, #0
 80049de:	d05a      	beq.n	8004a96 <_ux_dcd_stm32_transfer_request+0xf6>
        
        else
        {

            /* If this is a SETUP phase, we need to have 3 packets in the pipe possible.  */
            if (transfer_request -> ux_slave_transfer_request_type ==  UX_TRANSFER_PHASE_SETUP)
 80049e0:	6861      	ldr	r1, [r4, #4]
 80049e2:	2901      	cmp	r1, #1
 80049e4:	d06c      	beq.n	8004ac0 <_ux_dcd_stm32_transfer_request+0x120>
            }
            else
            {
            
                /* Program the transfer size.  */
                endpoint_size = ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 80049e6:	441a      	add	r2, r3
 80049e8:	3a01      	subs	r2, #1
 80049ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
                                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) * 
                                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
                
                /* And packet counts.  */
                endpoint_size |= ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 80049f2:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 80049f6:	e050      	b.n	8004a9a <_ux_dcd_stm32_transfer_request+0xfa>
        endpoint_control_address = (UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 80049f8:	68b3      	ldr	r3, [r6, #8]
 80049fa:	f103 0948 	add.w	r9, r3, #72	; 0x48
 80049fe:	ea4f 1949 	mov.w	r9, r9, lsl #5
        endpoint_size_address = (UX_DCD_STM32_OTG_FS_DIEPTSIZ + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8004a02:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8004a06:	f508 6811 	add.w	r8, r8, #2320	; 0x910
        endpoint_control  =  _ux_dcd_stm32_register_read(dcd_stm32, endpoint_control_address);
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	f7fe fad1 	bl	8002fb2 <_ux_dcd_stm32_register_read>
 8004a10:	4683      	mov	fp, r0
        fifo_length =  transfer_request -> ux_slave_transfer_request_requested_length;
 8004a12:	6965      	ldr	r5, [r4, #20]
        if(fifo_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8004a14:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	d200      	bcs.n	8004a1e <_ux_dcd_stm32_transfer_request+0x7e>
            fifo_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8004a1c:	461d      	mov	r5, r3
        if (fifo_length == 0)
 8004a1e:	b31d      	cbz	r5, 8004a68 <_ux_dcd_stm32_transfer_request+0xc8>
            endpoint_size |= ((fifo_length - 1 + endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) / 
 8004a20:	195a      	adds	r2, r3, r5
 8004a22:	3a01      	subs	r2, #1
 8004a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a28:	ea45 42c2 	orr.w	r2, r5, r2, lsl #19
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size); 
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f7fe fac9 	bl	8002fc6 <_ux_dcd_stm32_register_write>
          _ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8004a34:	f04b 4204 	orr.w	r2, fp, #2214592512	; 0x84000000
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f7fe fac3 	bl	8002fc6 <_ux_dcd_stm32_register_write>
        ed -> ux_dcd_stm32_ed_payload_length =  fifo_length;
 8004a40:	60f5      	str	r5, [r6, #12]
        fifo_buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8004a42:	68e2      	ldr	r2, [r4, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer += fifo_length;
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	442b      	add	r3, r5
 8004a48:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_in_transfer_length -= fifo_length;
 8004a4a:	69e3      	ldr	r3, [r4, #28]
 8004a4c:	1b5b      	subs	r3, r3, r5
 8004a4e:	61e3      	str	r3, [r4, #28]
        if (transfer_request -> ux_slave_transfer_request_in_transfer_length == 0)
 8004a50:	b96b      	cbnz	r3, 8004a6e <_ux_dcd_stm32_transfer_request+0xce>
            _ux_dcd_stm32_fifo_write(dcd_stm32, ed -> ux_dcd_stm32_ed_index, fifo_buffer, fifo_length, UX_TRUE);
 8004a52:	68b1      	ldr	r1, [r6, #8]
 8004a54:	2301      	movs	r3, #1
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	462b      	mov	r3, r5
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	f7ff fe68 	bl	8004730 <_ux_dcd_stm32_fifo_write>
        if (ed -> ux_dcd_stm32_ed_index != 0)
 8004a60:	68b3      	ldr	r3, [r6, #8]
 8004a62:	b963      	cbnz	r3, 8004a7e <_ux_dcd_stm32_transfer_request+0xde>
            return(UX_SUCCESS);
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8004a64:	2300      	movs	r3, #0
 8004a66:	e027      	b.n	8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
            endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;                        
 8004a68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a6c:	e7de      	b.n	8004a2c <_ux_dcd_stm32_transfer_request+0x8c>
            _ux_dcd_stm32_fifo_write(dcd_stm32, ed -> ux_dcd_stm32_ed_index, fifo_buffer, fifo_length, UX_FALSE);
 8004a6e:	68b1      	ldr	r1, [r6, #8]
 8004a70:	2300      	movs	r3, #0
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	462b      	mov	r3, r5
 8004a76:	4638      	mov	r0, r7
 8004a78:	f7ff fe5a 	bl	8004730 <_ux_dcd_stm32_fifo_write>
 8004a7c:	e7f0      	b.n	8004a60 <_ux_dcd_stm32_transfer_request+0xc0>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore, UX_WAIT_FOREVER);
 8004a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a82:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004a86:	f000 fb7d 	bl	8005184 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	b9a0      	cbnz	r0, 8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8004a8e:	6a22      	ldr	r2, [r4, #32]
 8004a90:	b192      	cbz	r2, 8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8004a92:	4613      	mov	r3, r2
 8004a94:	e010      	b.n	8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
            endpoint_size = 1 << UX_DCD_STM32_OTG_FS_DIEPTSIZ_PKTCNT_SHIFT;                        
 8004a96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_size_address, endpoint_size); 
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7fe fa92 	bl	8002fc6 <_ux_dcd_stm32_register_write>
        ed -> ux_dcd_stm32_ed_payload_length = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60f3      	str	r3, [r6, #12]
        _ux_dcd_stm32_register_write(dcd_stm32, endpoint_control_address, endpoint_control);
 8004aa6:	f049 4204 	orr.w	r2, r9, #2214592512	; 0x84000000
 8004aaa:	4641      	mov	r1, r8
 8004aac:	4638      	mov	r0, r7
 8004aae:	f7fe fa8a 	bl	8002fc6 <_ux_dcd_stm32_register_write>
        if (ed -> ux_dcd_stm32_ed_index != 0)
 8004ab2:	68b3      	ldr	r3, [r6, #8]
 8004ab4:	b933      	cbnz	r3, 8004ac4 <_ux_dcd_stm32_transfer_request+0x124>
    return(UX_SUCCESS);
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	b003      	add	sp, #12
 8004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                endpoint_size |=  UX_DCD_STM32_OTG_FS_DOEPTSIZ_STUPCNT_DEFAULT << UX_DCD_STM32_OTG_FS_DOEPTSIZ_STUPCNT_SHIFT;
 8004ac0:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <_ux_dcd_stm32_transfer_request+0x140>)
 8004ac2:	e7ea      	b.n	8004a9a <_ux_dcd_stm32_transfer_request+0xfa>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore, UX_WAIT_FOREVER);
 8004ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004acc:	f000 fb5a 	bl	8005184 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8004ad6:	6a22      	ldr	r2, [r4, #32]
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	d0ed      	beq.n	8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8004adc:	4613      	mov	r3, r2
 8004ade:	e7eb      	b.n	8004ab8 <_ux_dcd_stm32_transfer_request+0x118>
 8004ae0:	60080018 	.word	0x60080018

08004ae4 <_ux_device_stack_alternate_setting_get>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8004ae4:	b510      	push	{r4, lr}
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <_ux_device_stack_alternate_setting_get+0x44>)
 8004ae8:	681c      	ldr	r4, [r3, #0]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8004aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d119      	bne.n	8004b24 <_ux_device_stack_alternate_setting_get+0x40>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8004af0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130

        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 8004af4:	b1a3      	cbz	r3, 8004b20 <_ux_device_stack_alternate_setting_get+0x3c>
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	4282      	cmp	r2, r0
 8004afa:	d001      	beq.n	8004b00 <_ux_device_stack_alternate_setting_get+0x1c>
                /* Return the function status.  */
                return(status);
            }

            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	e7f9      	b.n	8004af4 <_ux_device_stack_alternate_setting_get+0x10>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8004b00:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8004b04:	7e1b      	ldrb	r3, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8004b06:	7013      	strb	r3, [r2, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8004b08:	2101      	movs	r1, #1
 8004b0a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8004b14:	460a      	mov	r2, r1
 8004b16:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8004b1a:	f7ff f927 	bl	8003d6c <_ux_device_stack_transfer_request>
                return(status);
 8004b1e:	e002      	b.n	8004b26 <_ux_device_stack_alternate_setting_get+0x42>
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8004b20:	20ff      	movs	r0, #255	; 0xff
 8004b22:	e000      	b.n	8004b26 <_ux_device_stack_alternate_setting_get+0x42>
 8004b24:	20ff      	movs	r0, #255	; 0xff
}
 8004b26:	bd10      	pop	{r4, pc}
 8004b28:	2000072c 	.word	0x2000072c

08004b2c <_ux_device_stack_alternate_setting_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	b09f      	sub	sp, #124	; 0x7c
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value,
			alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004b32:	4b6c      	ldr	r3, [pc, #432]	; (8004ce4 <_ux_device_stack_alternate_setting_set+0x1b8>)
 8004b34:	f8d3 8000 	ldr.w	r8, [r3]
 8004b38:	f8cd 8004 	str.w	r8, [sp, #4]

	/* We may have multiple configurations!  */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8004b3c:	f8d8 4148 	ldr.w	r4, [r8, #328]	; 0x148
	ULONG device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8004b40:	f8d8 614c 	ldr.w	r6, [r8, #332]	; 0x14c

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;

	/* Protocol error must be reported when it's unconfigured */
	if (device->ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8004b44:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	f040 80bf 	bne.w	8004ccc <_ux_device_stack_alternate_setting_set+0x1a0>
 8004b4e:	f108 0b40 	add.w	fp, r8, #64	; 0x40
		return UX_FUNCTION_NOT_SUPPORTED;

	/* Find the current interface. */
	UX_SLAVE_INTERFACE* interface = device->ux_slave_device_first_interface;
 8004b52:	f8d8 5130 	ldr.w	r5, [r8, #304]	; 0x130

	/* Scan all interfaces if any. */
	while (interface != UX_NULL)
 8004b56:	b125      	cbz	r5, 8004b62 <_ux_device_stack_alternate_setting_set+0x36>
	{
		if (interface->ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8004b58:	696b      	ldr	r3, [r5, #20]
 8004b5a:	4283      	cmp	r3, r0
 8004b5c:	d001      	beq.n	8004b62 <_ux_device_stack_alternate_setting_set+0x36>
			break;
		else
			interface = interface->ux_slave_interface_next_interface;
 8004b5e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004b60:	e7f9      	b.n	8004b56 <_ux_device_stack_alternate_setting_set+0x2a>
 8004b62:	468a      	mov	sl, r1
 8004b64:	4681      	mov	r9, r0
	}

	/* We must have found the interface pointer for the interface value
	 requested by the caller. */
	if (interface == UX_NULL)
 8004b66:	b12d      	cbz	r5, 8004b74 <_ux_device_stack_alternate_setting_set+0x48>
		return (UX_INTERFACE_HANDLE_UNKNOWN);
	}

	/* If the host is requesting a change of alternate setting to the current one,
	 we do not need to do any work. */
	if (interface->ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8004b68:	69ab      	ldr	r3, [r5, #24]
 8004b6a:	428b      	cmp	r3, r1
 8004b6c:	f040 809a 	bne.w	8004ca4 <_ux_device_stack_alternate_setting_set+0x178>
		return (UX_SUCCESS);
 8004b70:	2300      	movs	r3, #0
 8004b72:	e0ac      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
		_ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS,
 8004b74:	2252      	movs	r2, #82	; 0x52
 8004b76:	2107      	movs	r1, #7
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f7ff f951 	bl	8003e20 <_ux_system_error_handler>
		return (UX_INTERFACE_HANDLE_UNKNOWN);
 8004b7e:	2352      	movs	r3, #82	; 0x52
 8004b80:	e0a5      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
							 * the endpoints associated with the previous alternate setting. */
							endpoint = interface->ux_slave_interface_first_endpoint;
							while (endpoint != UX_NULL)
							{
								/* Abort any pending transfer. */
								_ux_device_stack_transfer_all_request_abort(endpoint,
 8004b82:	2126      	movs	r1, #38	; 0x26
 8004b84:	4638      	mov	r0, r7
 8004b86:	f000 fadb 	bl	8005140 <_ux_device_stack_transfer_all_request_abort>
										UX_TRANSFER_BUS_RESET);

								/* The device controller must be called to destroy the endpoint. */
								dcd->ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8004b8a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8004b8e:	463a      	mov	r2, r7
 8004b90:	210f      	movs	r1, #15
 8004b92:	9801      	ldr	r0, [sp, #4]
 8004b94:	4798      	blx	r3
										(VOID*)endpoint);

								/* Get the next endpoint. */
								next_endpoint = endpoint->ux_slave_endpoint_next_endpoint;
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24

								/* Free the endpoint. */
								endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	603b      	str	r3, [r7, #0]

								/* Make sure the endpoint instance is now cleaned up. */
								endpoint->ux_slave_endpoint_state = 0;
 8004b9c:	607b      	str	r3, [r7, #4]
								endpoint->ux_slave_endpoint_next_endpoint = UX_NULL;
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
								endpoint->ux_slave_endpoint_interface = UX_NULL;
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
								endpoint->ux_slave_endpoint_device = UX_NULL;
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

								/* Now we refresh the endpoint pointer. */
								endpoint = next_endpoint;
 8004ba4:	4617      	mov	r7, r2
							while (endpoint != UX_NULL)
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	d1eb      	bne.n	8004b82 <_ux_device_stack_alternate_setting_set+0x56>
							}

							/* Now clear the interface endpoint entry. */
							interface->ux_slave_interface_first_endpoint = UX_NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	636b      	str	r3, [r5, #52]	; 0x34

							/* Point beyond the interface descriptor. */
							device_framework_length -= (ULONG)*device_framework;
 8004bae:	7827      	ldrb	r7, [r4, #0]
 8004bb0:	1bf6      	subs	r6, r6, r7
							device_framework += (ULONG)*device_framework;
 8004bb2:	4427      	add	r7, r4

							/* Parse the device framework and locate endpoint descriptor(s). */
							while (device_framework_length != 0)
 8004bb4:	e035      	b.n	8004c22 <_ux_device_stack_alternate_setting_set+0xf6>
								{
									case UX_ENDPOINT_DESCRIPTOR_ITEM:

										/* Find a free endpoint in the pool and hook it to the 
										 existing interface after it's created by DCD. */
										endpoint = device->ux_slave_device_endpoints_pool;
 8004bb6:	f8d8 413c 	ldr.w	r4, [r8, #316]	; 0x13c
										endpoints_pool_number =
 8004bba:	f8d8 3140 	ldr.w	r3, [r8, #320]	; 0x140
												device->ux_slave_device_endpoints_pool_number;
										while (endpoints_pool_number != 0)
 8004bbe:	b133      	cbz	r3, 8004bce <_ux_device_stack_alternate_setting_set+0xa2>
										{
											/* Check if this endpoint is free. */
											if (endpoint->ux_slave_endpoint_status == UX_UNUSED)
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	b112      	cbz	r2, 8004bca <_ux_device_stack_alternate_setting_set+0x9e>
												endpoint->ux_slave_endpoint_status = UX_USED;
												break;
											}

											/* Try the next endpoint. */
											endpoint++;
 8004bc4:	3490      	adds	r4, #144	; 0x90

											/* Decrement the number of endpoints to scan from the pool. */
											endpoints_pool_number--;
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	e7f9      	b.n	8004bbe <_ux_device_stack_alternate_setting_set+0x92>
												endpoint->ux_slave_endpoint_status = UX_USED;
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6022      	str	r2, [r4, #0]
										}

										/* Did we find a free endpoint ?  */
										if (endpoints_pool_number == 0)
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8081 	beq.w	8004cd6 <_ux_device_stack_alternate_setting_set+0x1aa>
											return (UX_MEMORY_INSUFFICIENT);

										/* Parse the descriptor in something more readable. */
										_ux_utility_descriptor_parse(device_framework,
 8004bd4:	f104 030c 	add.w	r3, r4, #12
 8004bd8:	2206      	movs	r2, #6
 8004bda:	4943      	ldr	r1, [pc, #268]	; (8004ce8 <_ux_device_stack_alternate_setting_set+0x1bc>)
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff f99d 	bl	8003f1c <_ux_utility_descriptor_parse>
										/* Now we create a transfer request to accept transfer on this endpoint. */
										transfer_request =
												&endpoint->ux_slave_endpoint_transfer_request;

										/* We store the endpoint in the transfer request as well. */
										transfer_request->ux_slave_transfer_request_endpoint =
 8004be2:	63a4      	str	r4, [r4, #56]	; 0x38
												endpoint;

										/* By default the timeout is infinite on request. */
										transfer_request->ux_slave_transfer_request_timeout =
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	67e3      	str	r3, [r4, #124]	; 0x7c
												UX_WAIT_FOREVER;

										/* Attach the interface to the endpoint. */
										endpoint->ux_slave_endpoint_interface = interface;
 8004bea:	62a5      	str	r5, [r4, #40]	; 0x28

										/* Attach the device to the endpoint. */
										endpoint->ux_slave_endpoint_device = device;
 8004bec:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c

										/* Create the endpoint at the DCD level. */
										status = dcd->ux_slave_dcd_function(dcd,
 8004bf0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	210e      	movs	r1, #14
 8004bf8:	9801      	ldr	r0, [sp, #4]
 8004bfa:	4798      	blx	r3
												UX_DCD_CREATE_ENDPOINT, (VOID*)endpoint);

										/* Do a sanity check on endpoint creation. */
										if (status != UX_SUCCESS)
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	b918      	cbnz	r0, 8004c08 <_ux_device_stack_alternate_setting_set+0xdc>
											endpoint->ux_slave_endpoint_status = UX_UNUSED;
											return (status);
										}

										/* Attach this endpoint to the end of the endpoint chain. */
										if (interface->ux_slave_interface_first_endpoint == UX_NULL)
 8004c00:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004c02:	b92a      	cbnz	r2, 8004c10 <_ux_device_stack_alternate_setting_set+0xe4>
										{
											interface->ux_slave_interface_first_endpoint = endpoint;
 8004c04:	636c      	str	r4, [r5, #52]	; 0x34
 8004c06:	e009      	b.n	8004c1c <_ux_device_stack_alternate_setting_set+0xf0>
											endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6022      	str	r2, [r4, #0]
											return (status);
 8004c0c:	e05f      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
											/* Multiple endpoints exist, so find the end of the chain. */
											endpoint_link =
													interface->ux_slave_interface_first_endpoint;
											while (endpoint_link->ux_slave_endpoint_next_endpoint
													!= UX_NULL)
												endpoint_link =
 8004c0e:	461a      	mov	r2, r3
											while (endpoint_link->ux_slave_endpoint_next_endpoint
 8004c10:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1fb      	bne.n	8004c0e <_ux_device_stack_alternate_setting_set+0xe2>
														endpoint_link->ux_slave_endpoint_next_endpoint;
											endpoint_link->ux_slave_endpoint_next_endpoint =
 8004c16:	6254      	str	r4, [r2, #36]	; 0x24
 8004c18:	e000      	b.n	8004c1c <_ux_device_stack_alternate_setting_set+0xf0>
									case UX_INTERFACE_DESCRIPTOR_ITEM:
										/* We have found a new configuration or interface descriptor,
										 * this is the end of the current interface. The search for
										 * the endpoints must be terminated as if it was the end of
										 * the entire descriptor. */
										device_framework_length = descriptor_length;
 8004c1a:	464e      	mov	r6, r9
										/* We have found another descriptor embedded in the interface. Ignore it. */
										break;
								}

								/* Adjust what is left of the device framework. */
								device_framework_length -= descriptor_length;
 8004c1c:	eba6 0609 	sub.w	r6, r6, r9

								/* Point to the next descriptor. */
								device_framework += descriptor_length;
 8004c20:	444f      	add	r7, r9
							while (device_framework_length != 0)
 8004c22:	b14e      	cbz	r6, 8004c38 <_ux_device_stack_alternate_setting_set+0x10c>
								descriptor_length = (ULONG)*device_framework;
 8004c24:	f897 9000 	ldrb.w	r9, [r7]
								descriptor_type = *(device_framework + 1);
 8004c28:	787b      	ldrb	r3, [r7, #1]
								switch (descriptor_type)
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d0f5      	beq.n	8004c1a <_ux_device_stack_alternate_setting_set+0xee>
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d0c1      	beq.n	8004bb6 <_ux_device_stack_alternate_setting_set+0x8a>
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d1f2      	bne.n	8004c1c <_ux_device_stack_alternate_setting_set+0xf0>
 8004c36:	e7f0      	b.n	8004c1a <_ux_device_stack_alternate_setting_set+0xee>
							}

							/* The interface descriptor in the current class must be changed to the new alternate setting. */
							_ux_utility_memory_copy(&interface->ux_slave_interface_descriptor,
 8004c38:	2224      	movs	r2, #36	; 0x24
 8004c3a:	a90d      	add	r1, sp, #52	; 0x34
 8004c3c:	f105 000c 	add.w	r0, r5, #12
 8004c40:	f7ff fa39 	bl	80040b6 <_ux_utility_memory_copy>
									&interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR));

							/* Get the class for the interface. */
							class =
									_ux_system_slave->ux_system_slave_interface_class_array[interface->ux_slave_interface_descriptor.bInterfaceNumber];
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <_ux_device_stack_alternate_setting_set+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	696a      	ldr	r2, [r5, #20]
							class =
 8004c4a:	3260      	adds	r2, #96	; 0x60
 8004c4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004c50:	685b      	ldr	r3, [r3, #4]

							/* Check if class driver is available. */
							if (class == UX_NULL || class->ux_slave_class_status == UX_UNUSED)
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d041      	beq.n	8004cda <_ux_device_stack_alternate_setting_set+0x1ae>
 8004c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	d040      	beq.n	8004cde <_ux_device_stack_alternate_setting_set+0x1b2>
							{
								return (UX_NO_CLASS_MATCH);
							}

							/* The interface attached to this configuration must be changed at the class level. */
							class_command.ux_slave_class_command_request =
 8004c5c:	2206      	movs	r2, #6
 8004c5e:	9202      	str	r2, [sp, #8]
									UX_SLAVE_CLASS_COMMAND_CHANGE;
							class_command.ux_slave_class_command_interface = (VOID*)interface;
 8004c60:	9504      	str	r5, [sp, #16]

							/* And store it. */
							class_command.ux_slave_class_command_class_ptr = class;
 8004c62:	930a      	str	r3, [sp, #40]	; 0x28

							/* We can now memorize the interface pointer associated with this class. */
							class->ux_slave_class_interface = interface;
 8004c64:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128

							/* We have found a potential candidate. Call this registered class entry
							 * function to change the alternate setting. */
							status = class->ux_slave_class_entry_function(&class_command);
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	a802      	add	r0, sp, #8
 8004c6c:	4798      	blx	r3
 8004c6e:	4603      	mov	r3, r0

							/* We are done here. */
							return (status);
 8004c70:	e02d      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
						}
					}

					/* Adjust what is left of the device framework. */
					device_framework_length -= descriptor_length;
 8004c72:	1bf6      	subs	r6, r6, r7

					/* Point to the next descriptor. */
					device_framework += descriptor_length;
 8004c74:	443c      	add	r4, r7
				while (device_framework_length != 0)
 8004c76:	b18e      	cbz	r6, 8004c9c <_ux_device_stack_alternate_setting_set+0x170>
					descriptor_length = (ULONG)*device_framework;
 8004c78:	7827      	ldrb	r7, [r4, #0]
					descriptor_type = *(device_framework + 1);
 8004c7a:	7863      	ldrb	r3, [r4, #1]
					if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d1f8      	bne.n	8004c72 <_ux_device_stack_alternate_setting_set+0x146>
						_ux_utility_descriptor_parse(device_framework,
 8004c80:	ab0d      	add	r3, sp, #52	; 0x34
 8004c82:	2209      	movs	r2, #9
 8004c84:	4919      	ldr	r1, [pc, #100]	; (8004cec <_ux_device_stack_alternate_setting_set+0x1c0>)
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff f948 	bl	8003f1c <_ux_utility_descriptor_parse>
						if (interface_descriptor.bInterfaceNumber == interface_value &&
 8004c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c8e:	454b      	cmp	r3, r9
 8004c90:	d1ef      	bne.n	8004c72 <_ux_device_stack_alternate_setting_set+0x146>
								interface_descriptor.bAlternateSetting == alternate_setting_value)
 8004c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
						if (interface_descriptor.bInterfaceNumber == interface_value &&
 8004c94:	4553      	cmp	r3, sl
 8004c96:	d1ec      	bne.n	8004c72 <_ux_device_stack_alternate_setting_set+0x146>
							endpoint = interface->ux_slave_interface_first_endpoint;
 8004c98:	6b6f      	ldr	r7, [r5, #52]	; 0x34
							while (endpoint != UX_NULL)
 8004c9a:	e784      	b.n	8004ba6 <_ux_device_stack_alternate_setting_set+0x7a>
		/* Point to the next descriptor. */
		device_framework += descriptor_length;
	}

	/* Return error completion. */
	return (UX_ERROR);
 8004c9c:	23ff      	movs	r3, #255	; 0xff
 8004c9e:	e016      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
		device_framework_length -= descriptor_length;
 8004ca0:	1bf6      	subs	r6, r6, r7
		device_framework += descriptor_length;
 8004ca2:	443c      	add	r4, r7
	while (device_framework_length != 0)
 8004ca4:	b186      	cbz	r6, 8004cc8 <_ux_device_stack_alternate_setting_set+0x19c>
		descriptor_length = (ULONG)*device_framework;
 8004ca6:	7827      	ldrb	r7, [r4, #0]
		descriptor_type = *(device_framework + 1);
 8004ca8:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d1f8      	bne.n	8004ca0 <_ux_device_stack_alternate_setting_set+0x174>
			_ux_utility_descriptor_parse(device_framework,
 8004cae:	ab16      	add	r3, sp, #88	; 0x58
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	490f      	ldr	r1, [pc, #60]	; (8004cf0 <_ux_device_stack_alternate_setting_set+0x1c4>)
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff f931 	bl	8003f1c <_ux_utility_descriptor_parse>
					== device->ux_slave_device_configuration_selected)
 8004cba:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
			if (configuration_descriptor.bConfigurationValue
 8004cbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1ed      	bne.n	8004ca0 <_ux_device_stack_alternate_setting_set+0x174>
				device_framework_length = configuration_descriptor.wTotalLength;
 8004cc4:	9e18      	ldr	r6, [sp, #96]	; 0x60
				while (device_framework_length != 0)
 8004cc6:	e7d6      	b.n	8004c76 <_ux_device_stack_alternate_setting_set+0x14a>
	return (UX_ERROR);
 8004cc8:	23ff      	movs	r3, #255	; 0xff
 8004cca:	e000      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
		return UX_FUNCTION_NOT_SUPPORTED;
 8004ccc:	2354      	movs	r3, #84	; 0x54
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	b01f      	add	sp, #124	; 0x7c
 8004cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
											return (UX_MEMORY_INSUFFICIENT);
 8004cd6:	2312      	movs	r3, #18
 8004cd8:	e7f9      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
								return (UX_NO_CLASS_MATCH);
 8004cda:	2357      	movs	r3, #87	; 0x57
 8004cdc:	e7f7      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
 8004cde:	2357      	movs	r3, #87	; 0x57
 8004ce0:	e7f5      	b.n	8004cce <_ux_device_stack_alternate_setting_set+0x1a2>
 8004ce2:	bf00      	nop
 8004ce4:	2000072c 	.word	0x2000072c
 8004ce8:	20000164 	.word	0x20000164
 8004cec:	2000016c 	.word	0x2000016c
 8004cf0:	2000014c 	.word	0x2000014c

08004cf4 <_ux_device_stack_clear_feature>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8004cf4:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <_ux_device_stack_clear_feature+0x68>)
 8004cf8:	681d      	ldr	r5, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8004cfa:	f010 0003 	ands.w	r0, r0, #3
 8004cfe:	d00b      	beq.n	8004d18 <_ux_device_stack_clear_feature+0x24>
 8004d00:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8004d04:	4611      	mov	r1, r2
 8004d06:	2802      	cmp	r0, #2
 8004d08:	d011      	beq.n	8004d2e <_ux_device_stack_clear_feature+0x3a>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8004d0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	2114      	movs	r1, #20
 8004d10:	4628      	mov	r0, r5
 8004d12:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8004d14:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8004d18:	2901      	cmp	r1, #1
 8004d1a:	d001      	beq.n	8004d20 <_ux_device_stack_clear_feature+0x2c>
    return(UX_SUCCESS);
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e7fa      	b.n	8004d16 <_ux_device_stack_clear_feature+0x22>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8004d20:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 8004d24:	b1c3      	cbz	r3, 8004d58 <_ux_device_stack_clear_feature+0x64>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8004d26:	2000      	movs	r0, #0
 8004d28:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
 8004d2c:	e7f3      	b.n	8004d16 <_ux_device_stack_clear_feature+0x22>
        interface =  device -> ux_slave_device_first_interface;
 8004d2e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
        while (interface != UX_NULL)
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d0e9      	beq.n	8004d0a <_ux_device_stack_clear_feature+0x16>
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8004d36:	6b44      	ldr	r4, [r0, #52]	; 0x34
            while (endpoint_target != UX_NULL)
 8004d38:	b164      	cbz	r4, 8004d54 <_ux_device_stack_clear_feature+0x60>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8004d3a:	6963      	ldr	r3, [r4, #20]
 8004d3c:	428b      	cmp	r3, r1
 8004d3e:	d001      	beq.n	8004d44 <_ux_device_stack_clear_feature+0x50>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8004d40:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8004d42:	e7f9      	b.n	8004d38 <_ux_device_stack_clear_feature+0x44>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8004d44:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d46:	4622      	mov	r2, r4
 8004d48:	2110      	movs	r1, #16
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	4798      	blx	r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6060      	str	r0, [r4, #4]
                    return(UX_SUCCESS);
 8004d52:	e7e0      	b.n	8004d16 <_ux_device_stack_clear_feature+0x22>
            interface =  interface -> ux_slave_interface_next_interface;
 8004d54:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004d56:	e7ec      	b.n	8004d32 <_ux_device_stack_clear_feature+0x3e>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8004d58:	2054      	movs	r0, #84	; 0x54
 8004d5a:	e7dc      	b.n	8004d16 <_ux_device_stack_clear_feature+0x22>
 8004d5c:	2000072c 	.word	0x2000072c

08004d60 <_ux_device_stack_configuration_get>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_configuration_get(VOID)
{
 8004d60:	b508      	push	{r3, lr}
	UX_SLAVE_DEVICE* device;
	UX_SLAVE_ENDPOINT* endpoint;
	UINT status;

	/* Get the pointer to the device.  */
	device = &_ux_system_slave->ux_system_slave_device;
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <_ux_device_stack_configuration_get+0x24>)
 8004d64:	6818      	ldr	r0, [r3, #0]

	/* Get the pointer to the transfer request associated with the endpoint.  */
	transfer_request = &endpoint->ux_slave_endpoint_transfer_request;

	/* Set the value of the configuration in the buffer.  */
	*transfer_request->ux_slave_transfer_request_data_pointer =
 8004d66:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
			(UCHAR)device->ux_slave_device_configuration_selected;
 8004d6a:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
	*transfer_request->ux_slave_transfer_request_data_pointer =
 8004d6e:	701a      	strb	r2, [r3, #0]
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET,
			device->ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS,
			0, 0)

	/* Set the phase of the transfer to data out.  */
	transfer_request->ux_slave_transfer_request_phase = UX_TRANSFER_PHASE_DATA_OUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	/* Send the descriptor with the appropriate length to the host.  */
	status = _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8004d76:	2201      	movs	r2, #1
 8004d78:	4611      	mov	r1, r2
 8004d7a:	30ac      	adds	r0, #172	; 0xac
 8004d7c:	f7fe fff6 	bl	8003d6c <_ux_device_stack_transfer_request>

	/* Return the function status.  */
	return (status);
}
 8004d80:	bd08      	pop	{r3, pc}
 8004d82:	bf00      	nop
 8004d84:	2000072c 	.word	0x2000072c

08004d88 <_ux_device_stack_configuration_set>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	b09f      	sub	sp, #124	; 0x7c
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004d8e:	4b7d      	ldr	r3, [pc, #500]	; (8004f84 <_ux_device_stack_configuration_set+0x1fc>)
 8004d90:	681d      	ldr	r5, [r3, #0]

	/* Reset the IAD flag. */
	ULONG iad_flag = UX_FALSE;

	/* If the configuration value is already selected, keep it. */
	if (device->ux_slave_device_configuration_selected == configuration_value)
 8004d92:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8004d96:	4283      	cmp	r3, r0
 8004d98:	f000 80ed 	beq.w	8004f76 <_ux_device_stack_configuration_set+0x1ee>
 8004d9c:	4606      	mov	r6, r0
		return (UX_SUCCESS);

	/* We may have multiple configurations !, the index will tell us what
	 configuration descriptor we need to return. */
	UCHAR* device_framework = _ux_system_slave->ux_system_slave_device_framework;
 8004d9e:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
	ULONG device_framework_length = _ux_system_slave->ux_system_slave_device_framework_length;
 8004da2:	f8d5 714c 	ldr.w	r7, [r5, #332]	; 0x14c

	/*--------------------------------------------------------------------------------------------*/

	ULONG descriptor_length;
	UCHAR descriptor_type;
	UX_CONFIGURATION_DESCRIPTOR configuration_descriptor = { 0 };
 8004da6:	2220      	movs	r2, #32
 8004da8:	2100      	movs	r1, #0
 8004daa:	a816      	add	r0, sp, #88	; 0x58
 8004dac:	f002 fa82 	bl	80072b4 <memset>

	/* Parse the device framework and locate a configuration descriptor. */
	while (device_framework_length != 0)
 8004db0:	e002      	b.n	8004db8 <_ux_device_stack_configuration_set+0x30>
				/* The configuration is found. */
				break;
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 8004db2:	eba7 0708 	sub.w	r7, r7, r8
		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 8004db6:	4444      	add	r4, r8
	while (device_framework_length != 0)
 8004db8:	b16f      	cbz	r7, 8004dd6 <_ux_device_stack_configuration_set+0x4e>
		descriptor_length = (ULONG)*device_framework;
 8004dba:	f894 8000 	ldrb.w	r8, [r4]
		descriptor_type = *(device_framework + 1);
 8004dbe:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d1f6      	bne.n	8004db2 <_ux_device_stack_configuration_set+0x2a>
			_ux_utility_descriptor_parse(device_framework,
 8004dc4:	ab16      	add	r3, sp, #88	; 0x58
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	496f      	ldr	r1, [pc, #444]	; (8004f88 <_ux_device_stack_configuration_set+0x200>)
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f7ff f8a6 	bl	8003f1c <_ux_utility_descriptor_parse>
			if (configuration_descriptor.bConfigurationValue == configuration_value)
 8004dd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004dd2:	42b3      	cmp	r3, r6
 8004dd4:	d1ed      	bne.n	8004db2 <_ux_device_stack_configuration_set+0x2a>
	}

	/* Configuration not found. */
	if (device_framework_length == 0 && configuration_value != 0)
 8004dd6:	1c33      	adds	r3, r6, #0
 8004dd8:	bf18      	it	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2f00      	cmp	r7, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	461f      	moveq	r7, r3
 8004de2:	2700      	movne	r7, #0
 8004de4:	2f00      	cmp	r7, #0
 8004de6:	f040 80ca 	bne.w	8004f7e <_ux_device_stack_configuration_set+0x1f6>
	UX_SLAVE_INTERFACE* next_interface;
	UX_SLAVE_CLASS* class;
	UX_SLAVE_CLASS_COMMAND class_command;

	/* We unmount the configuration if there is previous configuration selected. */
	if (device->ux_slave_device_configuration_selected)
 8004dea:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8004dee:	b1ab      	cbz	r3, 8004e1c <_ux_device_stack_configuration_set+0x94>
	{
		/* Get the pointer to the first interface. */
		interface = device->ux_slave_device_first_interface;
 8004df0:	f8d5 7130 	ldr.w	r7, [r5, #304]	; 0x130
 8004df4:	46a0      	mov	r8, r4

		/* Deactivate all the interfaces if any. */
		while (interface != UX_NULL)
 8004df6:	e004      	b.n	8004e02 <_ux_device_stack_configuration_set+0x7a>
			if (class != UX_NULL)
				/* Call the class with the DEACTIVATE signal. */
				class->ux_slave_class_entry_function(&class_command);

			/* Get the next interface. */
			next_interface = interface->ux_slave_interface_next_interface;
 8004df8:	6b3c      	ldr	r4, [r7, #48]	; 0x30

			/* Remove the interface and all endpoints associated with it. */
			_ux_device_stack_interface_delete(interface);
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f7fe ff5e 	bl	8003cbc <_ux_device_stack_interface_delete>

			/* Now we refresh the interface pointer. */
			interface = next_interface;
 8004e00:	4627      	mov	r7, r4
		while (interface != UX_NULL)
 8004e02:	b157      	cbz	r7, 8004e1a <_ux_device_stack_configuration_set+0x92>
			class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8004e04:	2303      	movs	r3, #3
 8004e06:	930b      	str	r3, [sp, #44]	; 0x2c
			class_command.ux_slave_class_command_interface = (VOID*)interface;
 8004e08:	970d      	str	r7, [sp, #52]	; 0x34
			class = interface->ux_slave_interface_class;
 8004e0a:	687b      	ldr	r3, [r7, #4]
			class_command.ux_slave_class_command_class_ptr = class;
 8004e0c:	9313      	str	r3, [sp, #76]	; 0x4c
			if (class != UX_NULL)
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f2      	beq.n	8004df8 <_ux_device_stack_configuration_set+0x70>
				class->ux_slave_class_entry_function(&class_command);
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	a80b      	add	r0, sp, #44	; 0x2c
 8004e16:	4798      	blx	r3
 8004e18:	e7ee      	b.n	8004df8 <_ux_device_stack_configuration_set+0x70>
 8004e1a:	4644      	mov	r4, r8
		}
	}

	/* No configuration is selected. */
	device->ux_slave_device_configuration_selected = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

	/* Mark the device as attached now. */
	device->ux_slave_device_state = UX_DEVICE_ATTACHED;
 8004e22:	2201      	movs	r2, #1
 8004e24:	642a      	str	r2, [r5, #64]	; 0x40

	/* The DCD needs to update the device state too. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID*) UX_DEVICE_ATTACHED);
 8004e26:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e28:	2113      	movs	r1, #19
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	4798      	blx	r3

	/* If the host tries to unconfigure, we are done. */
	if (configuration_value == 0)
 8004e2e:	b90e      	cbnz	r6, 8004e34 <_ux_device_stack_configuration_set+0xac>
		return (UX_SUCCESS);
 8004e30:	2000      	movs	r0, #0
 8004e32:	e0a1      	b.n	8004f78 <_ux_device_stack_configuration_set+0x1f0>

	/* Memorize the configuration selected. */
	device->ux_slave_device_configuration_selected = configuration_value;
 8004e34:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c

	/*--------------------------------------------------------------------------------------------*/

	/* We have found the configuration value requested by the host.
	 * Create the configuration descriptor and attach it to the device. */
	_ux_utility_descriptor_parse(device_framework,
 8004e38:	f505 7388 	add.w	r3, r5, #272	; 0x110
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	4952      	ldr	r1, [pc, #328]	; (8004f88 <_ux_device_stack_configuration_set+0x200>)
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7ff f86b 	bl	8003f1c <_ux_utility_descriptor_parse>
			UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
			(UCHAR*)&device->ux_slave_device_configuration_descriptor);

	/* Configuration character D6 is for Self-powered */
	_ux_system_slave->ux_system_slave_power_state =
			(configuration_descriptor.bmAttributes & 0x40) ?
 8004e46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
					UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8004e48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e4c:	d00f      	beq.n	8004e6e <_ux_device_stack_configuration_set+0xe6>
 8004e4e:	2102      	movs	r1, #2
	_ux_system_slave->ux_system_slave_power_state =
 8004e50:	4a4c      	ldr	r2, [pc, #304]	; (8004f84 <_ux_device_stack_configuration_set+0x1fc>)
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8

	/* Configuration character D5 is for Remote Wakeup */
	_ux_system_slave->ux_system_slave_remote_wakeup_capability =
			(configuration_descriptor.bmAttributes & 0x20) ?
					UX_TRUE : UX_FALSE;
 8004e58:	f3c3 1340 	ubfx	r3, r3, #5, #1
	_ux_system_slave->ux_system_slave_remote_wakeup_capability =
 8004e5c:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc

	/* Search only in current configuration */
	device_framework_length = configuration_descriptor.wTotalLength;
 8004e60:	9f18      	ldr	r7, [sp, #96]	; 0x60

	UX_INTERFACE_DESCRIPTOR interface_descriptor;
	ULONG iad_first_interface = 0;
	ULONG iad_number_interfaces = 0;
	ULONG class_index;
	UX_SLAVE_CLASS* current_class = UX_NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	9301      	str	r3, [sp, #4]
	ULONG iad_number_interfaces = 0;
 8004e66:	4699      	mov	r9, r3
	ULONG iad_first_interface = 0;
 8004e68:	469b      	mov	fp, r3
 8004e6a:	46ca      	mov	sl, r9

	/*  We need to scan all the interface descriptors following this configuration descriptor and
	 * enable all endpoints associated with the default alternate setting of each interface. */
	while (device_framework_length != 0)
 8004e6c:	e006      	b.n	8004e7c <_ux_device_stack_configuration_set+0xf4>
					UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8004e6e:	2101      	movs	r1, #1
 8004e70:	e7ee      	b.n	8004e50 <_ux_device_stack_configuration_set+0xc8>
			/* Get the number of interfaces we have in the IAD. */
			iad_number_interfaces = (ULONG)*(device_framework + 3);
		}

		/* Check if this is an interface descriptor. */
		if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d010      	beq.n	8004e98 <_ux_device_stack_configuration_set+0x110>
				_ux_device_stack_interface_set(device_framework, device_framework_length, 0);
			}
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 8004e76:	eba7 0708 	sub.w	r7, r7, r8

		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 8004e7a:	4444      	add	r4, r8
	while (device_framework_length != 0)
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	d072      	beq.n	8004f66 <_ux_device_stack_configuration_set+0x1de>
		descriptor_length = (ULONG)*device_framework;
 8004e80:	f894 8000 	ldrb.w	r8, [r4]
		descriptor_type = *(device_framework + 1);
 8004e84:	7863      	ldrb	r3, [r4, #1]
		if (descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8004e86:	2b0b      	cmp	r3, #11
 8004e88:	d1f3      	bne.n	8004e72 <_ux_device_stack_configuration_set+0xea>
			iad_first_interface = (ULONG)*(device_framework + 2);
 8004e8a:	f894 a002 	ldrb.w	sl, [r4, #2]
			iad_number_interfaces = (ULONG)*(device_framework + 3);
 8004e8e:	f894 9003 	ldrb.w	r9, [r4, #3]
			iad_flag = UX_TRUE;
 8004e92:	f04f 0b01 	mov.w	fp, #1
 8004e96:	e7ec      	b.n	8004e72 <_ux_device_stack_configuration_set+0xea>
			_ux_utility_descriptor_parse(device_framework,
 8004e98:	ab02      	add	r3, sp, #8
 8004e9a:	2209      	movs	r2, #9
 8004e9c:	493b      	ldr	r1, [pc, #236]	; (8004f8c <_ux_device_stack_configuration_set+0x204>)
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7ff f83c 	bl	8003f1c <_ux_utility_descriptor_parse>
			if (interface_descriptor.bAlternateSetting == 0)
 8004ea4:	9b05      	ldr	r3, [sp, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <_ux_device_stack_configuration_set+0xee>
				if (iad_flag == UX_TRUE)
 8004eaa:	f1bb 0f01 	cmp.w	fp, #1
 8004eae:	d132      	bne.n	8004f16 <_ux_device_stack_configuration_set+0x18e>
					if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8004eb0:	9904      	ldr	r1, [sp, #16]
 8004eb2:	4551      	cmp	r1, sl
 8004eb4:	d00d      	beq.n	8004ed2 <_ux_device_stack_configuration_set+0x14a>
						_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 8004eb6:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <_ux_device_stack_configuration_set+0x1fc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 8004ebe:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004ec2:	9b01      	ldr	r3, [sp, #4]
 8004ec4:	f8cc 3004 	str.w	r3, [ip, #4]
					if (iad_number_interfaces == 0)
 8004ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8004ecc:	d145      	bne.n	8004f5a <_ux_device_stack_configuration_set+0x1d2>
						iad_flag = UX_FALSE;
 8004ece:	46cb      	mov	fp, r9
 8004ed0:	e043      	b.n	8004f5a <_ux_device_stack_configuration_set+0x1d2>
						class = _ux_system_slave->ux_system_slave_class_array;
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	; (8004f84 <_ux_device_stack_configuration_set+0x1fc>)
 8004ed4:	6810      	ldr	r0, [r2, #0]
 8004ed6:	f8d0 2180 	ldr.w	r2, [r0, #384]	; 0x180
 8004eda:	46ac      	mov	ip, r5
						for (class_index = 0;
 8004edc:	e002      	b.n	8004ee4 <_ux_device_stack_configuration_set+0x15c>
							class++;
 8004ede:	f502 7298 	add.w	r2, r2, #304	; 0x130
								class_index++)
 8004ee2:	3301      	adds	r3, #1
								class_index < _ux_system_slave->ux_system_slave_max_class;
 8004ee4:	f8d0 5178 	ldr.w	r5, [r0, #376]	; 0x178
						for (class_index = 0;
 8004ee8:	429d      	cmp	r5, r3
 8004eea:	d912      	bls.n	8004f12 <_ux_device_stack_configuration_set+0x18a>
							if (class->ux_slave_class_status == UX_USED)
 8004eec:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8004eee:	2d01      	cmp	r5, #1
 8004ef0:	d1f5      	bne.n	8004ede <_ux_device_stack_configuration_set+0x156>
										== class->ux_slave_class_interface_number) &&
 8004ef2:	f8d2 5120 	ldr.w	r5, [r2, #288]	; 0x120
								if ((interface_descriptor.bInterfaceNumber
 8004ef6:	42a9      	cmp	r1, r5
 8004ef8:	d1f1      	bne.n	8004ede <_ux_device_stack_configuration_set+0x156>
												== class->ux_slave_class_configuration_number))
 8004efa:	f8d2 5124 	ldr.w	r5, [r2, #292]	; 0x124
										== class->ux_slave_class_interface_number) &&
 8004efe:	42b5      	cmp	r5, r6
 8004f00:	d1ed      	bne.n	8004ede <_ux_device_stack_configuration_set+0x156>
 8004f02:	4665      	mov	r5, ip
									_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 8004f04:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 8004f08:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8004f0c:	6042      	str	r2, [r0, #4]
									current_class = class;
 8004f0e:	9201      	str	r2, [sp, #4]
									break;
 8004f10:	e7da      	b.n	8004ec8 <_ux_device_stack_configuration_set+0x140>
 8004f12:	4665      	mov	r5, ip
 8004f14:	e7d8      	b.n	8004ec8 <_ux_device_stack_configuration_set+0x140>
					class = _ux_system_slave->ux_system_slave_class_array;
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <_ux_device_stack_configuration_set+0x1fc>)
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
					for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class;
 8004f1e:	465a      	mov	r2, fp
 8004f20:	46ac      	mov	ip, r5
 8004f22:	e002      	b.n	8004f2a <_ux_device_stack_configuration_set+0x1a2>
						class++;
 8004f24:	f503 7398 	add.w	r3, r3, #304	; 0x130
							class_index++)
 8004f28:	3201      	adds	r2, #1
					for (class_index = 0; class_index < _ux_system_slave->ux_system_slave_max_class;
 8004f2a:	f8d0 1178 	ldr.w	r1, [r0, #376]	; 0x178
 8004f2e:	4291      	cmp	r1, r2
 8004f30:	d912      	bls.n	8004f58 <_ux_device_stack_configuration_set+0x1d0>
						if (class->ux_slave_class_status == UX_USED)
 8004f32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f34:	2901      	cmp	r1, #1
 8004f36:	d1f5      	bne.n	8004f24 <_ux_device_stack_configuration_set+0x19c>
							if ((interface_descriptor.bInterfaceNumber
 8004f38:	9904      	ldr	r1, [sp, #16]
									== class->ux_slave_class_interface_number)
 8004f3a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
							if ((interface_descriptor.bInterfaceNumber
 8004f3e:	42a9      	cmp	r1, r5
 8004f40:	d1f0      	bne.n	8004f24 <_ux_device_stack_configuration_set+0x19c>
											== class->ux_slave_class_configuration_number))
 8004f42:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
									&&
 8004f46:	42b5      	cmp	r5, r6
 8004f48:	d1ec      	bne.n	8004f24 <_ux_device_stack_configuration_set+0x19c>
 8004f4a:	4665      	mov	r5, ip
								_ux_system_slave->ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] =
 8004f4c:	f101 0c60 	add.w	ip, r1, #96	; 0x60
 8004f50:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8004f54:	6043      	str	r3, [r0, #4]
								break;
 8004f56:	e000      	b.n	8004f5a <_ux_device_stack_configuration_set+0x1d2>
 8004f58:	4665      	mov	r5, ip
				_ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f816 	bl	8004f90 <_ux_device_stack_interface_set>
 8004f64:	e787      	b.n	8004e76 <_ux_device_stack_configuration_set+0xee>
	}

	/* Mark the device as configured now. */
	device->ux_slave_device_state = UX_DEVICE_CONFIGURED;
 8004f66:	2203      	movs	r2, #3
 8004f68:	642a      	str	r2, [r5, #64]	; 0x40

	/* The DCD needs to update the device state too. */
	dcd->ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID*) UX_DEVICE_CONFIGURED);
 8004f6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f6c:	2113      	movs	r1, #19
 8004f6e:	4628      	mov	r0, r5
 8004f70:	4798      	blx	r3

	/* Configuration mounted. */
	return (UX_SUCCESS);
 8004f72:	2000      	movs	r0, #0
 8004f74:	e000      	b.n	8004f78 <_ux_device_stack_configuration_set+0x1f0>
		return (UX_SUCCESS);
 8004f76:	2000      	movs	r0, #0
}
 8004f78:	b01f      	add	sp, #124	; 0x7c
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (UX_ERROR);
 8004f7e:	20ff      	movs	r0, #255	; 0xff
 8004f80:	e7fa      	b.n	8004f78 <_ux_device_stack_configuration_set+0x1f0>
 8004f82:	bf00      	nop
 8004f84:	2000072c 	.word	0x2000072c
 8004f88:	2000014c 	.word	0x2000014c
 8004f8c:	2000016c 	.word	0x2000016c

08004f90 <_ux_device_stack_interface_set>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_interface_set(UCHAR* device_framework, ULONG device_framework_length,
		ULONG alternate_setting_value)
{
 8004f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0,
			UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8004f94:	4b3c      	ldr	r3, [pc, #240]	; (8005088 <_ux_device_stack_interface_set+0xf8>)
 8004f96:	681f      	ldr	r7, [r3, #0]
 8004f98:	46b8      	mov	r8, r7

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8004f9a:	f107 0940 	add.w	r9, r7, #64	; 0x40

	/*--------------------------------------------------------------------------------------------*/

	/* Find a free interface in the pool and hook it to the existing interface. */
	UX_SLAVE_INTERFACE* interface = device->ux_slave_device_interfaces_pool;
 8004f9e:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134

	ULONG interfaces_pool_number = device->ux_slave_device_interfaces_pool_number;
 8004fa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
	while (interfaces_pool_number != 0)
 8004fa6:	b133      	cbz	r3, 8004fb6 <_ux_device_stack_interface_set+0x26>
	{
		/* Check if this interface is free. */
		if (interface->ux_slave_interface_status == UX_UNUSED)
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	b112      	cbz	r2, 8004fb2 <_ux_device_stack_interface_set+0x22>
			interface->ux_slave_interface_status = UX_USED;
			break;
		}

		/* Try the next interface. */
		interface++;
 8004fac:	3438      	adds	r4, #56	; 0x38

		/* Decrement the number of interfaces left to scan in the pool. */
		interfaces_pool_number--;
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	e7f9      	b.n	8004fa6 <_ux_device_stack_interface_set+0x16>
			interface->ux_slave_interface_status = UX_USED;
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	6022      	str	r2, [r4, #0]
	}

	/* Did we find a free interface ?  */
	if (interfaces_pool_number == 0)
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d05f      	beq.n	800507a <_ux_device_stack_interface_set+0xea>
 8004fba:	468a      	mov	sl, r1
 8004fbc:	4606      	mov	r6, r0

	/* If trace is enabled, register this object. */
	UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, interface, 0, 0, 0)

	/* Parse the descriptor in something more readable. */
	_ux_utility_descriptor_parse(device_framework, _ux_system_interface_descriptor_structure,
 8004fbe:	f104 030c 	add.w	r3, r4, #12
 8004fc2:	2209      	movs	r2, #9
 8004fc4:	4931      	ldr	r1, [pc, #196]	; (800508c <_ux_device_stack_interface_set+0xfc>)
 8004fc6:	f7fe ffa9 	bl	8003f1c <_ux_utility_descriptor_parse>
			UX_INTERFACE_DESCRIPTOR_ENTRIES, (UCHAR*)&interface->ux_slave_interface_descriptor);

	/*--------------------------------------------------------------------------------------------*/

	/* Attach this interface to the end of the interface chain. */
	if (device->ux_slave_device_first_interface == UX_NULL)
 8004fca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004fce:	b91a      	cbnz	r2, 8004fd8 <_ux_device_stack_interface_set+0x48>
	{
		device->ux_slave_device_first_interface = interface;
 8004fd0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004fd4:	e004      	b.n	8004fe0 <_ux_device_stack_interface_set+0x50>
	{
		/* Multiple interfaces exist, so find the end of the chain. */
		UX_SLAVE_INTERFACE* interface_link = device->ux_slave_device_first_interface;

		while (interface_link->ux_slave_interface_next_interface != UX_NULL)
			interface_link = interface_link->ux_slave_interface_next_interface;
 8004fd6:	461a      	mov	r2, r3
		while (interface_link->ux_slave_interface_next_interface != UX_NULL)
 8004fd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1fb      	bne.n	8004fd6 <_ux_device_stack_interface_set+0x46>

		interface_link->ux_slave_interface_next_interface = interface;
 8004fde:	6314      	str	r4, [r2, #48]	; 0x30
	}

	/* Point beyond the interface descriptor. */
	device_framework_length -= (ULONG)*device_framework;
 8004fe0:	7830      	ldrb	r0, [r6, #0]
 8004fe2:	ebaa 0a00 	sub.w	sl, sl, r0
	device_framework += (ULONG)*device_framework;
 8004fe6:	4406      	add	r6, r0
	UCHAR descriptor_type;
	ULONG endpoints_pool_number;
	UINT status;

	/* Parse the device framework and locate endpoint descriptor(s). */
	while (device_framework_length != 0)
 8004fe8:	e031      	b.n	800504e <_ux_device_stack_interface_set+0xbe>
		switch (descriptor_type)
		{
			case UX_ENDPOINT_DESCRIPTOR_ITEM:
				/* Find a free endpoint in the pool and hook it to the existing interface
				 * after it's created by DCD. */
				endpoint = device->ux_slave_device_endpoints_pool;
 8004fea:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
				endpoints_pool_number = device->ux_slave_device_endpoints_pool_number;
 8004fee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
				while (endpoints_pool_number != 0)
 8004ff2:	b133      	cbz	r3, 8005002 <_ux_device_stack_interface_set+0x72>
				{
					/* Check if this endpoint is free. */
					if (endpoint->ux_slave_endpoint_status == UX_UNUSED)
 8004ff4:	682a      	ldr	r2, [r5, #0]
 8004ff6:	b112      	cbz	r2, 8004ffe <_ux_device_stack_interface_set+0x6e>
						endpoint->ux_slave_endpoint_status = UX_USED;
						break;
					}

					/* Try the next endpoint. */
					endpoint++;
 8004ff8:	3590      	adds	r5, #144	; 0x90

					/* Decrement the number of endpoints to scan from the pool. */
					endpoints_pool_number--;
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	e7f9      	b.n	8004ff2 <_ux_device_stack_interface_set+0x62>
						endpoint->ux_slave_endpoint_status = UX_USED;
 8004ffe:	2201      	movs	r2, #1
 8005000:	602a      	str	r2, [r5, #0]
				}

				/* Did we find a free endpoint ?  */
				if (endpoints_pool_number == 0)
 8005002:	2b00      	cmp	r3, #0
 8005004:	d03d      	beq.n	8005082 <_ux_device_stack_interface_set+0xf2>
					return (UX_MEMORY_INSUFFICIENT);

				/* Parse the descriptor in something more readable. */
				_ux_utility_descriptor_parse(device_framework,
 8005006:	f105 030c 	add.w	r3, r5, #12
 800500a:	2206      	movs	r2, #6
 800500c:	4920      	ldr	r1, [pc, #128]	; (8005090 <_ux_device_stack_interface_set+0x100>)
 800500e:	4630      	mov	r0, r6
 8005010:	f7fe ff84 	bl	8003f1c <_ux_utility_descriptor_parse>

				/* Now we create a transfer request to accept transfer on this endpoint. */
				transfer_request = &endpoint->ux_slave_endpoint_transfer_request;

				/* We store the endpoint in the transfer request as well. */
				transfer_request->ux_slave_transfer_request_endpoint = endpoint;
 8005014:	63ad      	str	r5, [r5, #56]	; 0x38

				/* By default the timeout is infinite on request. */
				transfer_request->ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	67eb      	str	r3, [r5, #124]	; 0x7c

				/* Attach the interface to the endpoint. */
				endpoint->ux_slave_endpoint_interface = interface;
 800501c:	62ac      	str	r4, [r5, #40]	; 0x28

				/* Attach the device to the endpoint. */
				endpoint->ux_slave_endpoint_device = device;
 800501e:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c

				/* Create the endpoint at the DCD level. */
				status = dcd->ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID*)endpoint);
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	462a      	mov	r2, r5
 8005026:	210e      	movs	r1, #14
 8005028:	4640      	mov	r0, r8
 800502a:	4798      	blx	r3

				/* Do a sanity check on endpoint creation. */
				if (status != UX_SUCCESS)
 800502c:	4603      	mov	r3, r0
 800502e:	b918      	cbnz	r0, 8005038 <_ux_device_stack_interface_set+0xa8>
					endpoint->ux_slave_endpoint_status = UX_UNUSED;
					return (status);
				}

				/* Attach this endpoint to the end of the endpoint chain. */
				if (interface->ux_slave_interface_first_endpoint == UX_NULL)
 8005030:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005032:	b92a      	cbnz	r2, 8005040 <_ux_device_stack_interface_set+0xb0>
				{
					interface->ux_slave_interface_first_endpoint = endpoint;
 8005034:	6365      	str	r5, [r4, #52]	; 0x34
 8005036:	e007      	b.n	8005048 <_ux_device_stack_interface_set+0xb8>
					endpoint->ux_slave_endpoint_status = UX_UNUSED;
 8005038:	2200      	movs	r2, #0
 800503a:	602a      	str	r2, [r5, #0]
					return (status);
 800503c:	e01e      	b.n	800507c <_ux_device_stack_interface_set+0xec>
				else
				{
					/* Multiple endpoints exist, so find the end of the chain. */
					endpoint_link = interface->ux_slave_interface_first_endpoint;
					while (endpoint_link->ux_slave_endpoint_next_endpoint != UX_NULL)
						endpoint_link = endpoint_link->ux_slave_endpoint_next_endpoint;
 800503e:	461a      	mov	r2, r3
					while (endpoint_link->ux_slave_endpoint_next_endpoint != UX_NULL)
 8005040:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1fb      	bne.n	800503e <_ux_device_stack_interface_set+0xae>
					endpoint_link->ux_slave_endpoint_next_endpoint = endpoint;
 8005046:	6255      	str	r5, [r2, #36]	; 0x24
			default:
				break;
		}

		/* Adjust what is left of the device framework. */
		device_framework_length -= descriptor_length;
 8005048:	ebaa 0a0b 	sub.w	sl, sl, fp

		/* Point to the next descriptor. */
		device_framework += descriptor_length;
 800504c:	445e      	add	r6, fp
	while (device_framework_length != 0)
 800504e:	f1ba 0f00 	cmp.w	sl, #0
 8005052:	d00d      	beq.n	8005070 <_ux_device_stack_interface_set+0xe0>
		descriptor_length = (ULONG)*device_framework;
 8005054:	f896 b000 	ldrb.w	fp, [r6]
		descriptor_type = *(device_framework + 1);
 8005058:	7873      	ldrb	r3, [r6, #1]
		switch (descriptor_type)
 800505a:	2b04      	cmp	r3, #4
 800505c:	d003      	beq.n	8005066 <_ux_device_stack_interface_set+0xd6>
 800505e:	2b05      	cmp	r3, #5
 8005060:	d0c3      	beq.n	8004fea <_ux_device_stack_interface_set+0x5a>
 8005062:	2b02      	cmp	r3, #2
 8005064:	d1f0      	bne.n	8005048 <_ux_device_stack_interface_set+0xb8>
				status = _ux_device_stack_interface_start(interface);
 8005066:	4620      	mov	r0, r4
 8005068:	f000 f814 	bl	8005094 <_ux_device_stack_interface_start>
 800506c:	4603      	mov	r3, r0
				return (status);
 800506e:	e005      	b.n	800507c <_ux_device_stack_interface_set+0xec>
	}

	/* The interface attached to this configuration must be started at the class level. */
	status = _ux_device_stack_interface_start(interface);
 8005070:	4620      	mov	r0, r4
 8005072:	f000 f80f 	bl	8005094 <_ux_device_stack_interface_start>
 8005076:	4603      	mov	r3, r0

	/* Return the status to the caller. */
	return (status);
 8005078:	e000      	b.n	800507c <_ux_device_stack_interface_set+0xec>
		return (UX_MEMORY_INSUFFICIENT);
 800507a:	2312      	movs	r3, #18
}
 800507c:	4618      	mov	r0, r3
 800507e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return (UX_MEMORY_INSUFFICIENT);
 8005082:	2312      	movs	r3, #18
 8005084:	e7fa      	b.n	800507c <_ux_device_stack_interface_set+0xec>
 8005086:	bf00      	nop
 8005088:	2000072c 	.word	0x2000072c
 800508c:	2000016c 	.word	0x2000016c
 8005090:	20000164 	.word	0x20000164

08005094 <_ux_device_stack_interface_start>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_interface_start(UX_SLAVE_INTERFACE* interface)
{
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
	/* Get the class for the interface. */
	UX_SLAVE_CLASS* class =
			_ux_system_slave->
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <_ux_device_stack_interface_start+0x68>)
 800509a:	681d      	ldr	r5, [r3, #0]
					ux_system_slave_interface_class_array[interface->ux_slave_interface_descriptor.bInterfaceNumber];
 800509c:	6943      	ldr	r3, [r0, #20]
	UX_SLAVE_CLASS* class =
 800509e:	3360      	adds	r3, #96	; 0x60
 80050a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80050a4:	685e      	ldr	r6, [r3, #4]

	/* Check if class driver is available. */
	if (class == UX_NULL)
 80050a6:	b32e      	cbz	r6, 80050f4 <_ux_device_stack_interface_start+0x60>
 80050a8:	4604      	mov	r4, r0
	 * 		UINT ux_slave_class_command_protocol;
	 * 		struct UX_SLAVE_CLASS_STRUCT* ux_slave_class_command_class_ptr;
	 * 		VOID* ux_slave_class_command_parameter;
	 * 		VOID* ux_slave_class_command_interface_number;
	 * } UX_SLAVE_CLASS_COMMAND; */
	UX_SLAVE_CLASS_COMMAND class_command = { 0 };
 80050aa:	2228      	movs	r2, #40	; 0x28
 80050ac:	2100      	movs	r1, #0
 80050ae:	a802      	add	r0, sp, #8
 80050b0:	f002 f900 	bl	80072b4 <memset>

	/* Build all the fields of the Class Command. */
	class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_QUERY;
 80050b4:	2301      	movs	r3, #1
 80050b6:	9301      	str	r3, [sp, #4]
	class_command.ux_slave_class_command_interface = (VOID*)interface;
 80050b8:	9403      	str	r4, [sp, #12]
	class_command.ux_slave_class_command_pid = device->ux_slave_device_descriptor.idProduct;
 80050ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050bc:	9304      	str	r3, [sp, #16]
	class_command.ux_slave_class_command_vid = device->ux_slave_device_descriptor.idVendor;
 80050be:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80050c0:	9305      	str	r3, [sp, #20]
	class_command.ux_slave_class_command_class =
			interface->ux_slave_interface_descriptor.bInterfaceClass;
 80050c2:	6a23      	ldr	r3, [r4, #32]
	class_command.ux_slave_class_command_class =
 80050c4:	9306      	str	r3, [sp, #24]
	class_command.ux_slave_class_command_subclass =
			interface->ux_slave_interface_descriptor.bInterfaceSubClass;
 80050c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	class_command.ux_slave_class_command_subclass =
 80050c8:	9307      	str	r3, [sp, #28]
	class_command.ux_slave_class_command_protocol =
			interface->ux_slave_interface_descriptor.bInterfaceProtocol;
 80050ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	class_command.ux_slave_class_command_protocol =
 80050cc:	9308      	str	r3, [sp, #32]

	/* We can now memorize the interface pointer associated with this class. */
	class->ux_slave_class_interface = interface;
 80050ce:	f8c6 4128 	str.w	r4, [r6, #296]	; 0x128

	/* We have found a potential candidate. Call this registered class entry function. */
	UINT status = class->ux_slave_class_entry_function(&class_command);
 80050d2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80050d4:	a801      	add	r0, sp, #4
 80050d6:	4798      	blx	r3

	/* The status tells us if the registered class wants to own this class. */
	if (status == UX_SUCCESS)
 80050d8:	b970      	cbnz	r0, 80050f8 <_ux_device_stack_interface_start+0x64>
	{
		/* Store the class container. */
		class_command.ux_slave_class_command_class_ptr = class;
 80050da:	9609      	str	r6, [sp, #36]	; 0x24

		/* Store the command. */
		class_command.ux_slave_class_command_request = UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 80050dc:	a80c      	add	r0, sp, #48	; 0x30
 80050de:	2302      	movs	r3, #2
 80050e0:	f840 3d2c 	str.w	r3, [r0, #-44]!

		/* Activate the class. */
		status = class->ux_slave_class_entry_function(&class_command);
 80050e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80050e6:	4798      	blx	r3

		/* If the class was successfully activated, set the class for the interface. */
		if (status == UX_SUCCESS)
 80050e8:	4603      	mov	r3, r0
 80050ea:	b900      	cbnz	r0, 80050ee <_ux_device_stack_interface_start+0x5a>
			interface->ux_slave_interface_class = class;
 80050ec:	6066      	str	r6, [r4, #4]
		return (status);
	}

	/* There is no driver who want to own this class!  */
	return (UX_NO_CLASS_MATCH);
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	b00c      	add	sp, #48	; 0x30
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
		return (UX_NO_CLASS_MATCH);
 80050f4:	2357      	movs	r3, #87	; 0x57
 80050f6:	e7fa      	b.n	80050ee <_ux_device_stack_interface_start+0x5a>
	return (UX_NO_CLASS_MATCH);
 80050f8:	2357      	movs	r3, #87	; 0x57
 80050fa:	e7f8      	b.n	80050ee <_ux_device_stack_interface_start+0x5a>
 80050fc:	2000072c 	.word	0x2000072c

08005100 <_ux_device_stack_transfer_abort>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER* transfer_request, ULONG completion_code)
{
 8005100:	b570      	push	{r4, r5, r6, lr}
	/* If trace is enabled, insert this event into the trace buffer. */
	UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code,
			0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

	/* Get the pointer to the DCD. */
	UX_SLAVE_DCD* dcd = &_ux_system_slave->ux_system_slave_dcd;
 8005102:	4b0e      	ldr	r3, [pc, #56]	; (800513c <_ux_device_stack_transfer_abort+0x3c>)
 8005104:	681b      	ldr	r3, [r3, #0]

	/* Sets the completion code due to bus reset. */
	transfer_request->ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8005106:	2226      	movs	r2, #38	; 0x26
 8005108:	6202      	str	r2, [r0, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800510a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800510e:	b672      	cpsid	i

	/* Ensure we're not preempted by the transfer completion ISR. */
	TX_DISABLE

	/* It's possible the transfer already completed. Ensure it hasn't before doing the abort. */
	if (transfer_request->ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8005110:	6802      	ldr	r2, [r0, #0]
 8005112:	2a01      	cmp	r2, #1
 8005114:	d10f      	bne.n	8005136 <_ux_device_stack_transfer_abort+0x36>
 8005116:	4604      	mov	r4, r0
	{
		/* Call the DCD if necessary for cleaning up the pending transfer. */
		dcd->ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID*)transfer_request);
 8005118:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800511a:	4602      	mov	r2, r0
 800511c:	210d      	movs	r1, #13
 800511e:	4618      	mov	r0, r3
 8005120:	47b0      	blx	r6
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005122:	f385 8810 	msr	PRIMASK, r5
		TX_RESTORE

		/* We need to set the completion code for the transfer to aborted. Note that the transfer
		 * request function cannot simultaneously modify this because if the transfer was pending,
		 * then the transfer's thread is currently waiting for it to complete. */
		transfer_request->ux_slave_transfer_request_status = UX_TRANSFER_STATUS_ABORT;
 8005126:	4620      	mov	r0, r4
 8005128:	2304      	movs	r3, #4
 800512a:	f840 3b2c 	str.w	r3, [r0], #44

		/* Wake up the device driver who is waiting on the semaphore. */
		_ux_utility_semaphore_put(&transfer_request->ux_slave_transfer_request_semaphore);
 800512e:	f7ff f88f 	bl	8004250 <_ux_utility_semaphore_put>
		TX_RESTORE
	}

	/* This function never fails. */
	return (UX_SUCCESS);
}
 8005132:	2000      	movs	r0, #0
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	f385 8810 	msr	PRIMASK, r5
 800513a:	e7fa      	b.n	8005132 <_ux_device_stack_transfer_abort+0x32>
 800513c:	2000072c 	.word	0x2000072c

08005140 <_ux_device_stack_transfer_all_request_abort>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8005140:	b508      	push	{r3, lr}

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8005142:	3030      	adds	r0, #48	; 0x30
 8005144:	f7ff ffdc 	bl	8005100 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8005148:	2000      	movs	r0, #0
 800514a:	bd08      	pop	{r3, pc}

0800514c <_ux_utility_event_flags_create>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name)
{
 800514c:	b510      	push	{r4, lr}

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 800514e:	2228      	movs	r2, #40	; 0x28
 8005150:	f000 fe64 	bl	8005e1c <_txe_event_flags_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8005154:	4604      	mov	r4, r0
 8005156:	b908      	cbnz	r0, 800515c <_ux_utility_event_flags_create+0x10>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
}
 8005158:	4620      	mov	r0, r4
 800515a:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 800515c:	2218      	movs	r2, #24
 800515e:	2108      	movs	r1, #8
 8005160:	2002      	movs	r0, #2
 8005162:	f7fe fe5d 	bl	8003e20 <_ux_system_error_handler>
    return(status);
 8005166:	e7f7      	b.n	8005158 <_ux_utility_event_flags_create+0xc>

08005168 <_ux_utility_event_flags_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)            
{
 8005168:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 800516a:	f000 feb3 	bl	8005ed4 <_txe_event_flags_delete>

    /* Return completion status.  */
    return(status);
}
 800516e:	bd08      	pop	{r3, pc}

08005170 <_ux_utility_long_put>:
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8005170:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8005172:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005176:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8005178:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800517c:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800517e:	0e09      	lsrs	r1, r1, #24
 8005180:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 8005182:	4770      	bx	lr

08005184 <_ux_utility_semaphore_get>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(TX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8005184:	b530      	push	{r4, r5, lr}
 8005186:	b08f      	sub	sp, #60	; 0x3c
 8005188:	4604      	mov	r4, r0
 800518a:	460d      	mov	r5, r1
ULONG       time_slice;
TX_THREAD   *next_thread;
TX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 800518c:	f000 fac8 	bl	8005720 <_tx_thread_identify>

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 8005190:	ab06      	add	r3, sp, #24
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	ab07      	add	r3, sp, #28
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	ab08      	add	r3, sp, #32
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	ab09      	add	r3, sp, #36	; 0x24
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	ab0a      	add	r3, sp, #40	; 0x28
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	ab0b      	add	r3, sp, #44	; 0x2c
 80051a6:	aa0c      	add	r2, sp, #48	; 0x30
 80051a8:	a90d      	add	r1, sp, #52	; 0x34
 80051aa:	f001 f927 	bl	80063fc <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <_ux_utility_semaphore_get+0x44>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6999      	ldr	r1, [r3, #24]
 80051b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051b6:	4291      	cmp	r1, r2
 80051b8:	d200      	bcs.n	80051bc <_ux_utility_semaphore_get+0x38>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 80051ba:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 80051bc:	4629      	mov	r1, r5
 80051be:	4620      	mov	r0, r4
 80051c0:	f001 f822 	bl	8006208 <_txe_semaphore_get>

    /* Return completion status.  */
    return(status);
}
 80051c4:	b00f      	add	sp, #60	; 0x3c
 80051c6:	bd30      	pop	{r4, r5, pc}
 80051c8:	20000734 	.word	0x20000734

080051cc <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(TX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b088      	sub	sp, #32

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 80051d0:	24c8      	movs	r4, #200	; 0xc8
 80051d2:	9406      	str	r4, [sp, #24]
 80051d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80051d6:	9405      	str	r4, [sp, #20]
 80051d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80051da:	9404      	str	r4, [sp, #16]
 80051dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80051de:	9403      	str	r4, [sp, #12]
 80051e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80051e2:	9402      	str	r4, [sp, #8]
 80051e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80051e6:	9401      	str	r4, [sp, #4]
 80051e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051ea:	9400      	str	r4, [sp, #0]
 80051ec:	f001 f838 	bl	8006260 <_txe_thread_create>
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80051f0:	4604      	mov	r4, r0
 80051f2:	b910      	cbnz	r0, 80051fa <_ux_utility_thread_create+0x2e>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
}
 80051f4:	4620      	mov	r0, r4
 80051f6:	b008      	add	sp, #32
 80051f8:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80051fa:	4602      	mov	r2, r0
 80051fc:	2108      	movs	r1, #8
 80051fe:	2002      	movs	r0, #2
 8005200:	f7fe fe0e 	bl	8003e20 <_ux_system_error_handler>
    return(status);
 8005204:	e7f6      	b.n	80051f4 <_ux_utility_thread_create+0x28>

08005206 <_ux_utility_thread_delete>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(TX_THREAD *thread_ptr)
{
 8005206:	b510      	push	{r4, lr}
 8005208:	4604      	mov	r4, r0

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 800520a:	f001 f913 	bl	8006434 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 800520e:	4620      	mov	r0, r4
 8005210:	f001 f8de 	bl	80063d0 <_txe_thread_delete>

    /* Return completion status.  */
    return(status);
}
 8005214:	bd10      	pop	{r4, pc}
	...

08005218 <_ux_device_class_cdc_acm_bulkin_thread>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _ux_device_class_cdc_acm_bulkin_thread(ULONG cdc_acm_class)
{
 8005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	4606      	mov	r6, r0

	/* Get the cdc_acm instance from this class container. */
	UX_THREAD_EXTENSION_PTR_GET(cdc_acm, UX_SLAVE_CLASS_CDC_ACM, cdc_acm_class)

	/* Get the pointer to the device. */
	UX_SLAVE_DEVICE* device = &_ux_system_slave->ux_system_slave_device;
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <_ux_device_class_cdc_acm_bulkin_thread+0xc0>)
 8005222:	f8d3 a000 	ldr.w	sl, [r3]

	/* This is the first time we are activated. We need the interface to the class. */
	UX_SLAVE_INTERFACE* interface = cdc_acm->ux_slave_class_cdc_acm_interface;
 8005226:	6803      	ldr	r3, [r0, #0]

	/* Locate the endpoints. */
	UX_SLAVE_ENDPOINT* endpoint = interface->ux_slave_interface_first_endpoint;
 8005228:	6b5f      	ldr	r7, [r3, #52]	; 0x34

	/* Check the endpoint direction, if IN we have the correct endpoint. */
	if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005230:	d14f      	bne.n	80052d2 <_ux_device_class_cdc_acm_bulkin_thread+0xba>
			!= UX_ENDPOINT_IN)
	{
		/* So the next endpoint has to be the IN endpoint. */
		endpoint = endpoint->ux_slave_endpoint_next_endpoint;
 8005232:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 8005234:	e04d      	b.n	80052d2 <_ux_device_class_cdc_acm_bulkin_thread+0xba>
				sent_length = 0;

				/* Special ZLP case. */
				if (total_length == 0)
					/* Send the zlp to the host. */
					status = _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	4611      	mov	r1, r2
 800523a:	4648      	mov	r0, r9
 800523c:	f7fe fd96 	bl	8003d6c <_ux_device_stack_transfer_request>
 8005240:	4601      	mov	r1, r0
				sent_length = 0;
 8005242:	46a8      	mov	r8, r5
						}
					}
				}

				/* Schedule of transmission was completed. */
				cdc_acm->ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c6 3254 	str.w	r3, [r6, #596]	; 0x254

				/* We get here when the entire user data payload has been sent or if there is an error. */
				/* If there is a callback defined by the application, send the transaction event to it. */
				if (cdc_acm->ux_device_class_cdc_acm_write_callback != UX_NULL)
 800524a:	f8d6 3220 	ldr.w	r3, [r6, #544]	; 0x220
 800524e:	2b00      	cmp	r3, #0
 8005250:	d137      	bne.n	80052c2 <_ux_device_class_cdc_acm_bulkin_thread+0xaa>
		while (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8005252:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8005256:	2b03      	cmp	r3, #3
 8005258:	d137      	bne.n	80052ca <_ux_device_class_cdc_acm_bulkin_thread+0xb2>
			status = _ux_utility_event_flags_get(&cdc_acm->ux_slave_class_cdc_acm_event_flags_group,
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	ab03      	add	r3, sp, #12
 8005262:	2201      	movs	r2, #1
 8005264:	4611      	mov	r1, r2
 8005266:	f506 700a 	add.w	r0, r6, #552	; 0x228
 800526a:	f000 f98e 	bl	800558a <_ux_utility_event_flags_get>
			if (status == UX_SUCCESS)
 800526e:	4601      	mov	r1, r0
 8005270:	bb58      	cbnz	r0, 80052ca <_ux_device_class_cdc_acm_bulkin_thread+0xb2>
				total_length = cdc_acm->ux_slave_class_cdc_acm_callback_total_length;
 8005272:	f8d6 5258 	ldr.w	r5, [r6, #600]	; 0x258
						cdc_acm->ux_slave_class_cdc_acm_callback_data_pointer;
 8005276:	f8d6 325c 	ldr.w	r3, [r6, #604]	; 0x25c
				cdc_acm->ux_slave_class_cdc_acm_callback_current_data_pointer =
 800527a:	f8c6 3260 	str.w	r3, [r6, #608]	; 0x260
				if (total_length == 0)
 800527e:	2d00      	cmp	r5, #0
 8005280:	d0d9      	beq.n	8005236 <_ux_device_class_cdc_acm_bulkin_thread+0x1e>
				sent_length = 0;
 8005282:	f04f 0800 	mov.w	r8, #0
 8005286:	e000      	b.n	800528a <_ux_device_class_cdc_acm_bulkin_thread+0x72>
							total_length = 0;
 8005288:	2500      	movs	r5, #0
					while (total_length)
 800528a:	2d00      	cmp	r5, #0
 800528c:	d0da      	beq.n	8005244 <_ux_device_class_cdc_acm_bulkin_thread+0x2c>
						if (total_length > endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 800528e:	69fc      	ldr	r4, [r7, #28]
 8005290:	42ac      	cmp	r4, r5
 8005292:	d300      	bcc.n	8005296 <_ux_device_class_cdc_acm_bulkin_thread+0x7e>
							transfer_length = total_length;
 8005294:	462c      	mov	r4, r5
						_ux_utility_memory_copy(
 8005296:	4622      	mov	r2, r4
 8005298:	f8d6 1260 	ldr.w	r1, [r6, #608]	; 0x260
 800529c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800529e:	f7fe ff0a 	bl	80040b6 <_ux_utility_memory_copy>
						status = _ux_device_stack_transfer_request(transfer_request,
 80052a2:	4622      	mov	r2, r4
 80052a4:	4621      	mov	r1, r4
 80052a6:	4648      	mov	r0, r9
 80052a8:	f7fe fd60 	bl	8003d6c <_ux_device_stack_transfer_request>
						if (status != UX_SUCCESS)
 80052ac:	4601      	mov	r1, r0
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d1ea      	bne.n	8005288 <_ux_device_class_cdc_acm_bulkin_thread+0x70>
							sent_length += transfer_length;
 80052b2:	44a0      	add	r8, r4
							total_length -= transfer_length;
 80052b4:	1b2d      	subs	r5, r5, r4
							cdc_acm->ux_slave_class_cdc_acm_callback_current_data_pointer +=
 80052b6:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
 80052ba:	441c      	add	r4, r3
 80052bc:	f8c6 4260 	str.w	r4, [r6, #608]	; 0x260
 80052c0:	e7e3      	b.n	800528a <_ux_device_class_cdc_acm_bulkin_thread+0x72>
					/* Callback exists. */
					cdc_acm->ux_device_class_cdc_acm_write_callback(cdc_acm, status, sent_length);
 80052c2:	4642      	mov	r2, r8
 80052c4:	4630      	mov	r0, r6
 80052c6:	4798      	blx	r3
 80052c8:	e7c3      	b.n	8005252 <_ux_device_class_cdc_acm_bulkin_thread+0x3a>
				break;
			}
		}

		/* We need to suspend ourselves. We will be resumed by the device enumeration module or when a change of alternate setting happens. */
		_ux_utility_thread_suspend(&cdc_acm->ux_slave_class_cdc_acm_bulkin_thread);
 80052ca:	f106 0088 	add.w	r0, r6, #136	; 0x88
 80052ce:	f000 f968 	bl	80055a2 <_ux_utility_thread_suspend>
		transfer_request = &endpoint->ux_slave_endpoint_transfer_request;
 80052d2:	f107 0930 	add.w	r9, r7, #48	; 0x30
		while (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80052d6:	e7bc      	b.n	8005252 <_ux_device_class_cdc_acm_bulkin_thread+0x3a>
 80052d8:	2000072c 	.word	0x2000072c

080052dc <_ux_device_class_cdc_acm_bulkout_thread>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_cdc_acm_bulkout_thread(ULONG cdc_acm_class)
{
 80052dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	4607      	mov	r7, r0

    /* Cast properly the cdc_acm instance.  */
    UX_THREAD_EXTENSION_PTR_GET(cdc_acm, UX_SLAVE_CLASS_CDC_ACM, cdc_acm_class)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <_ux_device_class_cdc_acm_bulkout_thread+0x6c>)
 80052e4:	681d      	ldr	r5, [r3, #0]

    /* This is the first time we are activated. We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80052e6:	6803      	ldr	r3, [r0, #0]

    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 80052e8:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 80052ea:	6963      	ldr	r3, [r4, #20]
 80052ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052f0:	d027      	beq.n	8005342 <_ux_device_class_cdc_acm_bulkout_thread+0x66>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80052f2:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80052f4:	e025      	b.n	8005342 <_ux_device_class_cdc_acm_bulkout_thread+0x66>
                }
                else
                {

                    /* We have an error. If there is a callback defined by the application, send the transaction event to it.  */
                    if (cdc_acm -> ux_device_class_cdc_acm_read_callback != UX_NULL)
 80052f6:	f8d7 8224 	ldr.w	r8, [r7, #548]	; 0x224
 80052fa:	f1b8 0f00 	cmp.w	r8, #0
 80052fe:	d003      	beq.n	8005308 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>

                        /* Callback exists. */
                        cdc_acm -> ux_device_class_cdc_acm_read_callback(cdc_acm, status, UX_NULL, 0);
 8005300:	2300      	movs	r3, #0
 8005302:	461a      	mov	r2, r3
 8005304:	4638      	mov	r0, r7
 8005306:	47c0      	blx	r8
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8005308:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800530a:	2b03      	cmp	r3, #3
 800530c:	d115      	bne.n	800533a <_ux_device_class_cdc_acm_bulkout_thread+0x5e>
            status =  _ux_device_stack_transfer_request(transfer_request, endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 800530e:	69e2      	ldr	r2, [r4, #28]
 8005310:	4611      	mov	r1, r2
 8005312:	4630      	mov	r0, r6
 8005314:	f7fe fd2a 	bl	8003d6c <_ux_device_stack_transfer_request>
            if (status == UX_SUCCESS)
 8005318:	4601      	mov	r1, r0
 800531a:	2800      	cmp	r0, #0
 800531c:	d1f4      	bne.n	8005308 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
                if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800531e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e8      	bne.n	80052f6 <_ux_device_class_cdc_acm_bulkout_thread+0x1a>
                    if (cdc_acm -> ux_device_class_cdc_acm_read_callback != UX_NULL)
 8005324:	f8d7 8224 	ldr.w	r8, [r7, #548]	; 0x224
 8005328:	f1b8 0f00 	cmp.w	r8, #0
 800532c:	d0ec      	beq.n	8005308 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
                        cdc_acm -> ux_device_class_cdc_acm_read_callback(cdc_acm, UX_SUCCESS, transfer_request -> ux_slave_transfer_request_data_pointer,
 800532e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005330:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005332:	2100      	movs	r1, #0
 8005334:	4638      	mov	r0, r7
 8005336:	47c0      	blx	r8
 8005338:	e7e6      	b.n	8005308 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
                }
            }
        }

    /* We need to suspend ourselves. We will be resumed by the application if needed.  */
    _ux_utility_thread_suspend(&cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread);
 800533a:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800533e:	f000 f930 	bl	80055a2 <_ux_utility_thread_suspend>
        transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8005342:	f104 0630 	add.w	r6, r4, #48	; 0x30
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8005346:	e7df      	b.n	8005308 <_ux_device_class_cdc_acm_bulkout_thread+0x2c>
 8005348:	2000072c 	.word	0x2000072c

0800534c <_ux_dcd_stm32_address_set>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_address_set(UX_DCD_STM32 *dcd_stm32, ULONG address)
{
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1

    /* Clear the previous address.  */
    _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG, UX_DCD_STM32_OTG_FS_DCFG_DAD_MASK);
 8005352:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 8005356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800535a:	f7fd fe23 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
    
    /* Store the new address of the device.  */
    _ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DCFG, address << UX_DCD_STM32_OTG_FS_DCFG_DAD_SHIFT);
 800535e:	012a      	lsls	r2, r5, #4
 8005360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005364:	4620      	mov	r0, r4
 8005366:	f7fd fe28 	bl	8002fba <_ux_dcd_stm32_register_set>

    /* This function always succeeds.  */
    return(UX_SUCCESS);         
}
 800536a:	2000      	movs	r0, #0
 800536c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005370 <_ux_dcd_stm32_endpoint_create>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _ux_dcd_stm32_endpoint_create(UX_DCD_STM32* dcd_stm32, UX_SLAVE_ENDPOINT* endpoint)
{
 8005370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	ULONG stm32_endpoint_register;
//	ULONG stm32_endpoint_address;

	/* The endpoint index in the array of the STM32 must match the endpoint number.
	 * The STM32 has 4 endpoints maximum. Each can be IN/OUT. */
	ULONG stm32_endpoint_index = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 8005374:	694c      	ldr	r4, [r1, #20]
 8005376:	f024 0480 	bic.w	r4, r4, #128	; 0x80
			& ~UX_ENDPOINT_DIRECTION;

	/* Fetch the address of the physical endpoint. */
	UX_DCD_STM32_ED* ed = &dcd_stm32->ux_dcd_stm32_ed[stm32_endpoint_index];
 800537a:	00e2      	lsls	r2, r4, #3
 800537c:	4422      	add	r2, r4
 800537e:	0093      	lsls	r3, r2, #2
 8005380:	4403      	add	r3, r0
 8005382:	f103 0804 	add.w	r8, r3, #4

	ULONG stm32_endpoint_register;
	ULONG stm32_endpoint_address;

	/* Check the endpoint status, if it is free, reserve it. If not reject this endpoint. */
	if ((ed->ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f013 0f01 	tst.w	r3, #1
 800538c:	f040 808e 	bne.w	80054ac <_ux_dcd_stm32_endpoint_create+0x13c>
 8005390:	460d      	mov	r5, r1
 8005392:	4606      	mov	r6, r0
	{
		/* We can use this endpoint. */
		ed->ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_USED;
 8005394:	00e2      	lsls	r2, r4, #3
 8005396:	4422      	add	r2, r4
 8005398:	0097      	lsls	r7, r2, #2
 800539a:	4407      	add	r7, r0
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	607b      	str	r3, [r7, #4]

		/* Keep the physical endpoint address in the endpoint container. */
		endpoint->ux_slave_endpoint_ed = (VOID*)ed;
 80053a2:	f8c1 8008 	str.w	r8, [r1, #8]

		/* Save the endpoint pointer. */
		ed->ux_dcd_stm32_ed_endpoint = endpoint;
 80053a6:	6279      	str	r1, [r7, #36]	; 0x24

		/* And its index. */
		ed->ux_dcd_stm32_ed_index = stm32_endpoint_index;
 80053a8:	60fc      	str	r4, [r7, #12]

		/* And its direction. */
		ed->ux_dcd_stm32_ed_direction = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80053aa:	694b      	ldr	r3, [r1, #20]
				& UX_ENDPOINT_DIRECTION;
 80053ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
		ed->ux_dcd_stm32_ed_direction = endpoint->ux_slave_endpoint_descriptor.bEndpointAddress
 80053b0:	623b      	str	r3, [r7, #32]

		/* And its type. */
		ed->ux_dcd_stm32_ed_type = endpoint->ux_slave_endpoint_descriptor.bmAttributes
 80053b2:	698b      	ldr	r3, [r1, #24]
				& UX_MASK_ENDPOINT_TYPE;
 80053b4:	f003 0303 	and.w	r3, r3, #3
		ed->ux_dcd_stm32_ed_type = endpoint->ux_slave_endpoint_descriptor.bmAttributes
 80053b8:	61fb      	str	r3, [r7, #28]

		/* Reset the endpoint. */
		_ux_dcd_stm32_endpoint_reset(dcd_stm32, endpoint);
 80053ba:	f000 f8b3 	bl	8005524 <_ux_dcd_stm32_endpoint_reset>

		/* Reset the endpoint register. */
		stm32_endpoint_register = 0;

		/* For IN endpoint, the FIFO number is stored in the DIEPCTL register. */
		if (ed->ux_dcd_stm32_ed_direction == UX_ENDPOINT_IN)
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d00d      	beq.n	80053e0 <_ux_dcd_stm32_endpoint_create+0x70>
		stm32_endpoint_register = 0;
 80053c4:	2700      	movs	r7, #0
			/* Set the FIFO number based on the endpoint index. */
			stm32_endpoint_register |= stm32_endpoint_index
					<< UX_DCD_STM32_OTG_FS_DIEPCTL_TXFNUM_SHIFT;

		/* Set USBAEP Active endpoint bit. */
		stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_USBAEP;
 80053c6:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000

		/* Build the endpoint DIEP or DOEP register. */
		switch (ed->ux_dcd_stm32_ed_type)
 80053ca:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80053ce:	0093      	lsls	r3, r2, #2
 80053d0:	4433      	add	r3, r6
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d86c      	bhi.n	80054b2 <_ux_dcd_stm32_endpoint_create+0x142>
 80053d8:	e8df f003 	tbb	[pc, r3]
 80053dc:	55505a04 	.word	0x55505a04
					<< UX_DCD_STM32_OTG_FS_DIEPCTL_TXFNUM_SHIFT;
 80053e0:	05a7      	lsls	r7, r4, #22
 80053e2:	e7f0      	b.n	80053c6 <_ux_dcd_stm32_endpoint_create+0x56>
		{
			case UX_CONTROL_ENDPOINT:
				/* Set the MaxPacketSize. This is different for Control endpoints and other endpoints. */
				switch (endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 80053e4:	69eb      	ldr	r3, [r5, #28]
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d046      	beq.n	8005478 <_ux_dcd_stm32_endpoint_create+0x108>
 80053ea:	d905      	bls.n	80053f8 <_ux_dcd_stm32_endpoint_create+0x88>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d007      	beq.n	8005400 <_ux_dcd_stm32_endpoint_create+0x90>
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d106      	bne.n	8005402 <_ux_dcd_stm32_endpoint_create+0x92>
				{
					/* Is it 64 bytes ? */
					case 64:
						stm32_endpoint_register = 0;
 80053f4:	2700      	movs	r7, #0
 80053f6:	e004      	b.n	8005402 <_ux_dcd_stm32_endpoint_create+0x92>
				switch (endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize)
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d102      	bne.n	8005402 <_ux_dcd_stm32_endpoint_create+0x92>
						stm32_endpoint_register = 2;
						break;

					/* Is it 8 bytes ? */
					case 8:
						stm32_endpoint_register = 3;
 80053fc:	2703      	movs	r7, #3
						break;
 80053fe:	e000      	b.n	8005402 <_ux_dcd_stm32_endpoint_create+0x92>
						stm32_endpoint_register = 1;
 8005400:	2701      	movs	r7, #1
					default:
						break;
				}

				/* Set the UX_DCD_STM32_OTG_FS_DIEPCTL register. */
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DIEPCTL,
 8005402:	463a      	mov	r2, r7
 8005404:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8005408:	4630      	mov	r0, r6
 800540a:	f7fd fddc 	bl	8002fc6 <_ux_dcd_stm32_register_write>
						stm32_endpoint_register);

				/* Set the DAINTMSK field for control endpoint IN. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 800540e:	2201      	movs	r2, #1
 8005410:	40a2      	lsls	r2, r4
 8005412:	f640 011c 	movw	r1, #2076	; 0x81c
 8005416:	4630      	mov	r0, r6
 8005418:	f7fd fdcf 	bl	8002fba <_ux_dcd_stm32_register_set>
						1 << stm32_endpoint_index);

				/* Set the UX_DCD_STM32_OTG_FS_DOEPCTL register. */
				_ux_dcd_stm32_register_write(dcd_stm32, UX_DCD_STM32_OTG_FS_DOEPCTL,
 800541c:	463a      	mov	r2, r7
 800541e:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005422:	4630      	mov	r0, r6
 8005424:	f7fd fdcf 	bl	8002fc6 <_ux_dcd_stm32_register_write>
						stm32_endpoint_register);

				/* Set the DAINTMSK field for control endpoint OUT. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 8005428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800542c:	40a2      	lsls	r2, r4
 800542e:	f640 011c 	movw	r1, #2076	; 0x81c
 8005432:	4630      	mov	r0, r6
 8005434:	f7fd fdc1 	bl	8002fba <_ux_dcd_stm32_register_set>
			default:
				return (UX_ERROR);
		}

		/* Continue initialization for non control endpoints. */
		if (ed->ux_dcd_stm32_ed_type != UX_CONTROL_ENDPOINT)
 8005438:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800543c:	0093      	lsls	r3, r2, #2
 800543e:	4433      	add	r3, r6
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	b3c3      	cbz	r3, 80054b6 <_ux_dcd_stm32_endpoint_create+0x146>
		{
			/* Set the endpoint direction. */
			if ((endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION)
 8005444:	696b      	ldr	r3, [r5, #20]
 8005446:	f013 0f80 	tst.w	r3, #128	; 0x80
 800544a:	d026      	beq.n	800549a <_ux_dcd_stm32_endpoint_create+0x12a>
					== UX_ENDPOINT_IN)
			{
				/* Reset FIFO for endpoint IN. */
				_ux_dcd_stm32_fifo_flush(dcd_stm32, UX_DCD_STM32_FLUSH_TX_FIFO,
 800544c:	4622      	mov	r2, r4
 800544e:	2120      	movs	r1, #32
 8005450:	4630      	mov	r0, r6
 8005452:	f7ff f934 	bl	80046be <_ux_dcd_stm32_fifo_flush>
						stm32_endpoint_index);

				/* Set the DAINTMSK field for endpoint IN. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 8005456:	2201      	movs	r2, #1
 8005458:	40a2      	lsls	r2, r4
 800545a:	f640 011c 	movw	r1, #2076	; 0x81c
 800545e:	4630      	mov	r0, r6
 8005460:	f7fd fdab 	bl	8002fba <_ux_dcd_stm32_register_set>
				/* Set the DAINTMSK field for endpoint OUT. */
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
						0x10000 << stm32_endpoint_index);

			/* Get the endpoint address. */
			stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 8005464:	4640      	mov	r0, r8
 8005466:	f000 f84f 	bl	8005508 <_ux_dcd_stm32_endpoint_register_address_get>

			/* Set the endpoint register at the EP address. */
			_ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address,
 800546a:	463a      	mov	r2, r7
 800546c:	4601      	mov	r1, r0
 800546e:	4630      	mov	r0, r6
 8005470:	f7fd fda9 	bl	8002fc6 <_ux_dcd_stm32_register_write>
					stm32_endpoint_register);
		}

		/* Return successful completion. */
		return (UX_SUCCESS);
 8005474:	2000      	movs	r0, #0
 8005476:	e01a      	b.n	80054ae <_ux_dcd_stm32_endpoint_create+0x13e>
						stm32_endpoint_register = 2;
 8005478:	2702      	movs	r7, #2
						break;
 800547a:	e7c2      	b.n	8005402 <_ux_dcd_stm32_endpoint_create+0x92>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 800547c:	69eb      	ldr	r3, [r5, #28]
 800547e:	433b      	orrs	r3, r7
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_BULK
 8005480:	4f0e      	ldr	r7, [pc, #56]	; (80054bc <_ux_dcd_stm32_endpoint_create+0x14c>)
 8005482:	431f      	orrs	r7, r3
				break;
 8005484:	e7d8      	b.n	8005438 <_ux_dcd_stm32_endpoint_create+0xc8>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8005486:	69eb      	ldr	r3, [r5, #28]
 8005488:	433b      	orrs	r3, r7
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_INTERRUPT
 800548a:	4f0d      	ldr	r7, [pc, #52]	; (80054c0 <_ux_dcd_stm32_endpoint_create+0x150>)
 800548c:	431f      	orrs	r7, r3
				break;
 800548e:	e7d3      	b.n	8005438 <_ux_dcd_stm32_endpoint_create+0xc8>
				stm32_endpoint_register |= endpoint->ux_slave_endpoint_descriptor.wMaxPacketSize;
 8005490:	69eb      	ldr	r3, [r5, #28]
 8005492:	431f      	orrs	r7, r3
				stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_EPTYP_ISO
 8005494:	f447 2790 	orr.w	r7, r7, #294912	; 0x48000
				break;
 8005498:	e7ce      	b.n	8005438 <_ux_dcd_stm32_endpoint_create+0xc8>
				_ux_dcd_stm32_register_set(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK,
 800549a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800549e:	40a2      	lsls	r2, r4
 80054a0:	f640 011c 	movw	r1, #2076	; 0x81c
 80054a4:	4630      	mov	r0, r6
 80054a6:	f7fd fd88 	bl	8002fba <_ux_dcd_stm32_register_set>
 80054aa:	e7db      	b.n	8005464 <_ux_dcd_stm32_endpoint_create+0xf4>
	}

	/* Return an error. */
	return (UX_NO_ED_AVAILABLE);
 80054ac:	2014      	movs	r0, #20
}
 80054ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return (UX_ERROR);
 80054b2:	20ff      	movs	r0, #255	; 0xff
 80054b4:	e7fb      	b.n	80054ae <_ux_dcd_stm32_endpoint_create+0x13e>
		return (UX_SUCCESS);
 80054b6:	2000      	movs	r0, #0
 80054b8:	e7f9      	b.n	80054ae <_ux_dcd_stm32_endpoint_create+0x13e>
 80054ba:	bf00      	nop
 80054bc:	18088000 	.word	0x18088000
 80054c0:	180c8000 	.word	0x180c8000

080054c4 <_ux_dcd_stm32_endpoint_destroy>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4605      	mov	r5, r0

UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_address;

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80054c8:	688c      	ldr	r4, [r1, #8]

    /* Set the endpoint direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 80054ca:	694b      	ldr	r3, [r1, #20]
 80054cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054d0:	d112      	bne.n	80054f8 <_ux_dcd_stm32_endpoint_destroy+0x34>
    }            
    else
    {
    
        /* Clear the DAINTMSK field for endpoint OUT.  */
        _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 0x1000 << ed -> ux_dcd_stm32_ed_index);
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054d8:	409a      	lsls	r2, r3
 80054da:	f640 011c 	movw	r1, #2076	; 0x81c
 80054de:	f7fd fd61 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
    }

    /* Get the endpoint address.  */
    stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 f810 	bl	8005508 <_ux_dcd_stm32_endpoint_register_address_get>

    /* Clear the endpoint register at the EP address.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, 0);
 80054e8:	2200      	movs	r2, #0
 80054ea:	4601      	mov	r1, r0
 80054ec:	4628      	mov	r0, r5
 80054ee:	f7fd fd6a 	bl	8002fc6 <_ux_dcd_stm32_register_write>

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 80054f2:	2000      	movs	r0, #0
 80054f4:	6020      	str	r0, [r4, #0]

    /* This function never fails.  */
    return(UX_SUCCESS);         
}
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
        _ux_dcd_stm32_register_clear(dcd_stm32, UX_DCD_STM32_OTG_FS_DAINTMSK, 1 << ed -> ux_dcd_stm32_ed_index);
 80054f8:	68a3      	ldr	r3, [r4, #8]
 80054fa:	2201      	movs	r2, #1
 80054fc:	409a      	lsls	r2, r3
 80054fe:	f640 011c 	movw	r1, #2076	; 0x81c
 8005502:	f7fd fd4f 	bl	8002fa4 <_ux_dcd_stm32_register_clear>
 8005506:	e7ec      	b.n	80054e2 <_ux_dcd_stm32_endpoint_destroy+0x1e>

08005508 <_ux_dcd_stm32_endpoint_register_address_get>:
/**************************************************************************/
ULONG  _ux_dcd_stm32_endpoint_register_address_get(UX_DCD_STM32_ED *ed)
{

    /* Check for endpoint 0.  */
    if (ed -> ux_dcd_stm32_ed_index == 0)
 8005508:	6883      	ldr	r3, [r0, #8]
 800550a:	b143      	cbz	r3, 800551e <_ux_dcd_stm32_endpoint_register_address_get+0x16>
    
    else
    {
                    
        /* Check the endpoint direction for the base.  */
        if (ed -> ux_dcd_stm32_ed_direction  == UX_ENDPOINT_IN)
 800550c:	69c2      	ldr	r2, [r0, #28]
 800550e:	2a80      	cmp	r2, #128	; 0x80
 8005510:	d002      	beq.n	8005518 <_ux_dcd_stm32_endpoint_register_address_get+0x10>
            return(UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));

        else
        
            /* Endpoint is OUT.  */
            return(UX_DCD_STM32_OTG_FS_DOEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8005512:	3358      	adds	r3, #88	; 0x58
 8005514:	0158      	lsls	r0, r3, #5
 8005516:	4770      	bx	lr
            return(UX_DCD_STM32_OTG_FS_DIEPCTL + (ed -> ux_dcd_stm32_ed_index * UX_DCD_STM32_ENDPOINT_SPACE_SIZE));
 8005518:	3348      	adds	r3, #72	; 0x48
 800551a:	0158      	lsls	r0, r3, #5
 800551c:	4770      	bx	lr
        return(UX_DCD_STM32_OTG_FS_DOEPCTL);
 800551e:	f44f 6030 	mov.w	r0, #2816	; 0xb00
    }
}
 8005522:	4770      	bx	lr

08005524 <_ux_dcd_stm32_endpoint_reset>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4605      	mov	r5, r0
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_register;
ULONG               stm32_endpoint_address;

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8005528:	688c      	ldr	r4, [r1, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_STALLED;
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	f023 0304 	bic.w	r3, r3, #4
 8005530:	6023      	str	r3, [r4, #0]

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8005532:	2300      	movs	r3, #0
 8005534:	6063      	str	r3, [r4, #4]

    /* Get the endpoint address.  */
    stm32_endpoint_address = _ux_dcd_stm32_endpoint_register_address_get(ed);
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff ffe6 	bl	8005508 <_ux_dcd_stm32_endpoint_register_address_get>
 800553c:	4606      	mov	r6, r0

    /* Read the current EP register.  */
    stm32_endpoint_register =  _ux_dcd_stm32_register_read(dcd_stm32, stm32_endpoint_address);
 800553e:	4601      	mov	r1, r0
 8005540:	4628      	mov	r0, r5
 8005542:	f7fd fd36 	bl	8002fb2 <_ux_dcd_stm32_register_read>

    /* Reset the stall bit.  */
    stm32_endpoint_register &= ~UX_DCD_STM32_OTG_FS_DIEPCTL_STALL;
 8005546:	f420 1200 	bic.w	r2, r0, #2097152	; 0x200000

    /* If the endpoint is Bulk or INT we need to reset the PID Data to DATA0.  */
    if (ed -> ux_dcd_stm32_ed_type == UX_BULK_ENDPOINT || ed -> ux_dcd_stm32_ed_type == UX_INTERRUPT_ENDPOINT)
 800554a:	69a3      	ldr	r3, [r4, #24]
 800554c:	3b02      	subs	r3, #2
 800554e:	2b01      	cmp	r3, #1
 8005550:	d905      	bls.n	800555e <_ux_dcd_stm32_endpoint_reset+0x3a>
    
        /* Set the SD0PID flag.  */
        stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_SD0PID;

    /* Write the endpoint register.  */
    _ux_dcd_stm32_register_write(dcd_stm32, stm32_endpoint_address, stm32_endpoint_register);
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	f7fd fd36 	bl	8002fc6 <_ux_dcd_stm32_register_write>
        
    /* This function never fails.  */
    return(UX_SUCCESS);         

}
 800555a:	2000      	movs	r0, #0
 800555c:	bd70      	pop	{r4, r5, r6, pc}
        stm32_endpoint_register |= UX_DCD_STM32_OTG_FS_DIEPCTL_SD0PID;
 800555e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005562:	e7f6      	b.n	8005552 <_ux_dcd_stm32_endpoint_reset+0x2e>

08005564 <_ux_dcd_stm32_endpoint_status>:

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[endpoint_index];

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8005564:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005568:	008b      	lsls	r3, r1, #2
 800556a:	4418      	add	r0, r3
 800556c:	6843      	ldr	r3, [r0, #4]
 800556e:	f013 0f01 	tst.w	r3, #1
 8005572:	d006      	beq.n	8005582 <_ux_dcd_stm32_endpoint_status+0x1e>
        return(UX_ERROR);
        
    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8005574:	f013 0f04 	tst.w	r3, #4
 8005578:	d001      	beq.n	800557e <_ux_dcd_stm32_endpoint_status+0x1a>
        return(UX_FALSE);
    else            
        return(UX_TRUE);
 800557a:	2001      	movs	r0, #1
}
 800557c:	4770      	bx	lr
        return(UX_FALSE);
 800557e:	2000      	movs	r0, #0
 8005580:	4770      	bx	lr
        return(UX_ERROR);
 8005582:	20ff      	movs	r0, #255	; 0xff
 8005584:	4770      	bx	lr

08005586 <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 8005586:	2000      	movs	r0, #0
 8005588:	4770      	bx	lr

0800558a <_ux_utility_event_flags_get>:
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800558a:	b510      	push	{r4, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	461c      	mov	r4, r3

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 8005590:	9b06      	ldr	r3, [sp, #24]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	ab03      	add	r3, sp, #12
 8005596:	f000 fcbb 	bl	8005f10 <_txe_event_flags_get>

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	6023      	str	r3, [r4, #0]
    
    /* Return completion status.  */
    return(status);
}
 800559e:	b004      	add	sp, #16
 80055a0:	bd10      	pop	{r4, pc}

080055a2 <_ux_utility_thread_suspend>:
/*                                                                        */ 
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(TX_THREAD *thread_ptr)
{
 80055a2:	b508      	push	{r3, lr}

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 80055a4:	f000 ff3a 	bl	800641c <_txe_thread_suspend>

    /* Return completion status.  */
    return(status);
}
 80055a8:	bd08      	pop	{r3, pc}
	...

080055ac <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 80055ac:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80055ae:	4c0e      	ldr	r4, [pc, #56]	; (80055e8 <_tx_initialize_kernel_enter+0x3c>)
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80055b6:	d00a      	beq.n	80055ce <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate
		 initialization is in progress.  Note that this variable is
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80055b8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80055bc:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 80055be:	f7fa fe37 	bl	8000230 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the
		 ThreadX components and the application's initialization
		 function.  */
		_tx_initialize_high_level();
 80055c2:	f001 f835 	bl	8006630 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <_tx_initialize_kernel_enter+0x40>)
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	3301      	adds	r3, #1
 80055cc:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80055d0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 80055d4:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80055d6:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 80055d8:	f7fb fb64 	bl	8000ca4 <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 80055dc:	2300      	movs	r3, #0
 80055de:	6023      	str	r3, [r4, #0]

#ifdef TX_SAFETY_CRITICAL
    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80055e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 80055e4:	f7fa be74 	b.w	80002d0 <_tx_thread_schedule>
 80055e8:	20000178 	.word	0x20000178
 80055ec:	200007d4 	.word	0x200007d4
 80055f0:	20000d80 	.word	0x20000d80

080055f4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr, VOID (*entry_function)(ULONG id),
		ULONG entry_input, VOID* stack_start, ULONG stack_size, UINT priority,
		UINT preempt_threshold, ULONG time_slice, UINT auto_start)
{
 80055f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80055fa:	4604      	mov	r4, r0
 80055fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80055fe:	468b      	mov	fp, r1
 8005600:	4692      	mov	sl, r2
#endif

#ifndef TX_DISABLE_STACK_FILLING
	/* Set the thread stack to a pattern prior to creating the initial stack frame.
	 * This pattern is used by the stack checking routines to see how much has been used. */
	TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8005602:	4630      	mov	r0, r6
 8005604:	462a      	mov	r2, r5
 8005606:	21ef      	movs	r1, #239	; 0xef
{
 8005608:	4698      	mov	r8, r3
 800560a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800560e:	f001 fe51 	bl	80072b4 <memset>
#endif

	/* Prepare the thread control block prior to placing it on the created list. */

	/* Initialize thread control block to all zeros. */
	TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8005612:	4620      	mov	r0, r4
 8005614:	22c8      	movs	r2, #200	; 0xc8
 8005616:	2100      	movs	r1, #0
 8005618:	f001 fe4c 	bl	80072b4 <memset>
	thread_ptr->tx_thread_entry_parameter = entry_input;
	thread_ptr->tx_thread_stack_start = stack_start;
	thread_ptr->tx_thread_stack_size = stack_size;
	thread_ptr->tx_thread_priority = priority;
	thread_ptr->tx_thread_user_priority = priority;
	thread_ptr->tx_thread_time_slice = time_slice;
 800561c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_ptr->tx_thread_new_time_slice = time_slice;
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);

	/* Calculate the end of the thread's stack area. */
	temp_ptr = TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
	temp_ptr = (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG ) 1))));
 800561e:	1e6a      	subs	r2, r5, #1
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);
 8005620:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

	/* Now fill in the values that are required for thread initialization. */
	thread_ptr->tx_thread_state = TX_SUSPENDED;
 8005624:	2103      	movs	r1, #3

	/* Setup the necessary fields in the thread timer block. */
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8005626:	4f36      	ldr	r7, [pc, #216]	; (8005700 <_tx_thread_create+0x10c>)
	temp_ptr = (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG ) 1))));
 8005628:	4432      	add	r2, r6
	thread_ptr->tx_thread_name = name_ptr;
 800562a:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
	thread_ptr->tx_thread_state = TX_SUSPENDED;
 800562e:	6321      	str	r1, [r4, #48]	; 0x30
	TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

	/* Call the target specific stack frame building routine to build the 
	 thread's initial stack and to setup the actual stack pointer in the
	 control block. */
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005630:	4620      	mov	r0, r4
	thread_ptr->tx_thread_stack_start = stack_start;
 8005632:	60e6      	str	r6, [r4, #12]
	thread_ptr->tx_thread_priority = priority;
 8005634:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	thread_ptr->tx_thread_user_priority = priority;
 8005638:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800563c:	65a4      	str	r4, [r4, #88]	; 0x58
	thread_ptr->tx_thread_inherit_priority = ((UINT) TX_MAX_PRIORITIES);
 800563e:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
	TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8005642:	6567      	str	r7, [r4, #84]	; 0x54
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005644:	492f      	ldr	r1, [pc, #188]	; (8005704 <_tx_thread_create+0x110>)
	thread_ptr->tx_thread_new_time_slice = time_slice;
 8005646:	e9c4 3306 	strd	r3, r3, [r4, #24]
	thread_ptr->tx_thread_preempt_threshold = preempt_threshold;
 800564a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	thread_ptr->tx_thread_entry_parameter = entry_input;
 800564c:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
	thread_ptr->tx_thread_stack_end = TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8005650:	e9c4 2504 	strd	r2, r5, [r4, #16]
	thread_ptr->tx_thread_preempt_threshold = preempt_threshold;
 8005654:	63e3      	str	r3, [r4, #60]	; 0x3c
	thread_ptr->tx_thread_user_preempt_threshold = preempt_threshold;
 8005656:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	_tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800565a:	f7fa fe89 	bl	8000370 <_tx_thread_stack_build>
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800565e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005662:	b672      	cpsid	i
	/* Load the thread ID field in the thread control block. */
	thread_ptr->tx_thread_id = TX_THREAD_ID;

	/* Place the thread on the list of created threads.  First,
	 check for an empty list. */
	if (_tx_thread_created_count == TX_EMPTY)
 8005664:	4828      	ldr	r0, [pc, #160]	; (8005708 <_tx_thread_create+0x114>)
	thread_ptr->tx_thread_id = TX_THREAD_ID;
 8005666:	4a29      	ldr	r2, [pc, #164]	; (800570c <_tx_thread_create+0x118>)
	if (_tx_thread_created_count == TX_EMPTY)
 8005668:	6803      	ldr	r3, [r0, #0]
	thread_ptr->tx_thread_id = TX_THREAD_ID;
 800566a:	6022      	str	r2, [r4, #0]
	{
		/* The created thread list is empty.  Add thread to empty list. */
		_tx_thread_created_ptr = thread_ptr;
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <_tx_thread_create+0x11c>)
	if (_tx_thread_created_count == TX_EMPTY)
 800566e:	b9db      	cbnz	r3, 80056a8 <_tx_thread_create+0xb4>
		_tx_thread_created_ptr = thread_ptr;
 8005670:	6014      	str	r4, [r2, #0]
		thread_ptr->tx_thread_created_next = thread_ptr;
		thread_ptr->tx_thread_created_previous = thread_ptr;
 8005672:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
	/* Log this kernel call. */
	TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE
	/* Temporarily disable preemption. */
	_tx_thread_preempt_disable++;
 8005676:	4927      	ldr	r1, [pc, #156]	; (8005714 <_tx_thread_create+0x120>)
	_tx_thread_created_count++;
 8005678:	3301      	adds	r3, #1
	_tx_thread_preempt_disable++;
 800567a:	680a      	ldr	r2, [r1, #0]
	_tx_thread_created_count++;
 800567c:	6003      	str	r3, [r0, #0]
#endif

	/* Determine if an automatic start was requested. If so, call the resume thread function
	 * and then check for a preemption condition. */
	if (auto_start == TX_AUTO_START)
 800567e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	_tx_thread_preempt_disable++;
 8005680:	3201      	adds	r2, #1
	if (auto_start == TX_AUTO_START)
 8005682:	2b01      	cmp	r3, #1
	_tx_thread_preempt_disable++;
 8005684:	600a      	str	r2, [r1, #0]
	if (auto_start == TX_AUTO_START)
 8005686:	d12a      	bne.n	80056de <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005688:	f3ef 8205 	mrs	r2, IPSR
	{
		/* Determine if the create call is being called from initialization. */
		if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800568c:	4b22      	ldr	r3, [pc, #136]	; (8005718 <_tx_thread_create+0x124>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005696:	d211      	bcs.n	80056bc <_tx_thread_create+0xc8>
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005698:	f385 8810 	msr	PRIMASK, r5

		/* Perform any additional activities for tool or user purpose. */
		TX_THREAD_CREATE_EXTENSION(thread_ptr)

		/* Call the resume thread function to make this thread ready. */
		_tx_thread_system_resume(thread_ptr);
 800569c:	4620      	mov	r0, r4
 800569e:	f000 f909 	bl	80058b4 <_tx_thread_system_resume>
#endif
	}

	/* Always return a success. */
	return (TX_SUCCESS);
}
 80056a2:	2000      	movs	r0, #0
 80056a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		next_thread = _tx_thread_created_ptr;
 80056a8:	6812      	ldr	r2, [r2, #0]
		previous_thread = next_thread->tx_thread_created_previous;
 80056aa:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
		next_thread->tx_thread_created_previous = thread_ptr;
 80056ae:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
		previous_thread->tx_thread_created_next = thread_ptr;
 80056b2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
		thread_ptr->tx_thread_created_next = next_thread;
 80056b6:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 80056ba:	e7dc      	b.n	8005676 <_tx_thread_create+0x82>
			saved_thread_ptr = _tx_thread_execute_ptr;
 80056bc:	4b17      	ldr	r3, [pc, #92]	; (800571c <_tx_thread_create+0x128>)
 80056be:	681e      	ldr	r6, [r3, #0]
			if (saved_thread_ptr != TX_NULL)
 80056c0:	b1e6      	cbz	r6, 80056fc <_tx_thread_create+0x108>
				saved_thread_ptr->tx_thread_preempt_threshold =
 80056c2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				saved_threshold = saved_thread_ptr->tx_thread_preempt_threshold;
 80056c4:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
				saved_thread_ptr->tx_thread_preempt_threshold =
 80056c6:	63f3      	str	r3, [r6, #60]	; 0x3c
 80056c8:	f385 8810 	msr	PRIMASK, r5
		_tx_thread_system_resume(thread_ptr);
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 f8f1 	bl	80058b4 <_tx_thread_system_resume>
		if (saved_thread_ptr != TX_NULL)
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	d0e5      	beq.n	80056a2 <_tx_thread_create+0xae>
			saved_thread_ptr->tx_thread_preempt_threshold = saved_threshold;
 80056d6:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 80056d8:	2000      	movs	r0, #0
 80056da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056de:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80056e2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80056e6:	b672      	cpsid	i
		_tx_thread_preempt_disable--;
 80056e8:	680b      	ldr	r3, [r1, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80056ee:	f382 8810 	msr	PRIMASK, r2
		_tx_thread_system_preempt_check();
 80056f2:	f000 f8c1 	bl	8005878 <_tx_thread_system_preempt_check>
}
 80056f6:	2000      	movs	r0, #0
 80056f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UINT saved_threshold = ((UINT)0);
 80056fc:	4637      	mov	r7, r6
 80056fe:	e7e3      	b.n	80056c8 <_tx_thread_create+0xd4>
 8005700:	08005b49 	.word	0x08005b49
 8005704:	080057a5 	.word	0x080057a5
 8005708:	200007cc 	.word	0x200007cc
 800570c:	54485244 	.word	0x54485244
 8005710:	200007c4 	.word	0x200007c4
 8005714:	200007d4 	.word	0x200007d4
 8005718:	20000178 	.word	0x20000178
 800571c:	200007dc 	.word	0x200007dc

08005720 <_tx_thread_identify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005720:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005724:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005726:	4a02      	ldr	r2, [pc, #8]	; (8005730 <_tx_thread_identify+0x10>)
 8005728:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800572a:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 800572e:	4770      	bx	lr
 8005730:	200007d8 	.word	0x200007d8

08005734 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_thread_initialize(VOID)
{
 8005734:	b538      	push	{r3, r4, r5, lr}
#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Set current thread pointer to NULL. */
	TX_THREAD_SET_CURRENT(TX_NULL)

	/* Initialize the execute thread pointer to NULL. */
	_tx_thread_execute_ptr = TX_NULL;
 8005736:	480f      	ldr	r0, [pc, #60]	; (8005774 <_tx_thread_initialize+0x40>)
	TX_THREAD_SET_CURRENT(TX_NULL)
 8005738:	2400      	movs	r4, #0

	/* Initialize the priority information. */
	TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800573a:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <_tx_thread_initialize+0x44>)
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
#endif
#endif
	/* Setup the highest priority variable to the max, indicating no thread is currently
	 ready. */
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 800573c:	2520      	movs	r5, #32
	_tx_thread_execute_ptr = TX_NULL;
 800573e:	6004      	str	r4, [r0, #0]

#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Initialize the array of priority head pointers. */
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005740:	4621      	mov	r1, r4
	TX_THREAD_SET_CURRENT(TX_NULL)
 8005742:	4a0e      	ldr	r2, [pc, #56]	; (800577c <_tx_thread_initialize+0x48>)
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8005744:	480e      	ldr	r0, [pc, #56]	; (8005780 <_tx_thread_initialize+0x4c>)
	TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8005746:	601c      	str	r4, [r3, #0]
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <_tx_thread_initialize+0x50>)
	TX_THREAD_SET_CURRENT(TX_NULL)
 800574a:	6014      	str	r4, [r2, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800574c:	2280      	movs	r2, #128	; 0x80
	TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 800574e:	6004      	str	r4, [r0, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005750:	480d      	ldr	r0, [pc, #52]	; (8005788 <_tx_thread_initialize+0x54>)
	_tx_thread_highest_priority = ((UINT) TX_MAX_PRIORITIES);
 8005752:	601d      	str	r5, [r3, #0]
	TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005754:	f001 fdae 	bl	80072b4 <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

	/* Setup the build options flag. This is used to identify how the ThreadX library was constructed. */
	_tx_build_options = _tx_build_options | (((ULONG)(TX_MAX_PRIORITIES / 32)) << 24)
 8005758:	4a0c      	ldr	r2, [pc, #48]	; (800578c <_tx_thread_initialize+0x58>)
	_tx_thread_created_ptr = TX_NULL;
 800575a:	490d      	ldr	r1, [pc, #52]	; (8005790 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
			| (((ULONG)1) << 7)
 800575c:	6810      	ldr	r0, [r2, #0]
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <_tx_thread_initialize+0x60>)
	_tx_thread_created_ptr = TX_NULL;
 8005760:	600c      	str	r4, [r1, #0]
			| (((ULONG)1) << 7)
 8005762:	4303      	orrs	r3, r0
	_tx_thread_created_count = TX_EMPTY;
 8005764:	4d0c      	ldr	r5, [pc, #48]	; (8005798 <_tx_thread_initialize+0x64>)
	_tx_thread_preempt_disable = ((UINT)0);
 8005766:	480d      	ldr	r0, [pc, #52]	; (800579c <_tx_thread_initialize+0x68>)
	_tx_thread_mutex_release = TX_NULL;
 8005768:	490d      	ldr	r1, [pc, #52]	; (80057a0 <_tx_thread_initialize+0x6c>)
	_tx_thread_created_count = TX_EMPTY;
 800576a:	602c      	str	r4, [r5, #0]
	_tx_thread_preempt_disable = ((UINT)0);
 800576c:	6004      	str	r4, [r0, #0]
	_tx_thread_mutex_release = TX_NULL;
 800576e:	600c      	str	r4, [r1, #0]
	_tx_build_options = _tx_build_options | (((ULONG)(TX_MAX_PRIORITIES / 32)) << 24)
 8005770:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
			;
}
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	200007dc 	.word	0x200007dc
 8005778:	200007c0 	.word	0x200007c0
 800577c:	200007d8 	.word	0x200007d8
 8005780:	200007e4 	.word	0x200007e4
 8005784:	200007e0 	.word	0x200007e0
 8005788:	2000073c 	.word	0x2000073c
 800578c:	200007c8 	.word	0x200007c8
 8005790:	200007c4 	.word	0x200007c4
 8005794:	01000080 	.word	0x01000080
 8005798:	200007cc 	.word	0x200007cc
 800579c:	200007d4 	.word	0x200007d4
 80057a0:	200007bc 	.word	0x200007bc

080057a4 <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <_tx_thread_shell_entry+0x5c>)
{
 80057a6:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 80057a8:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80057aa:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80057ae:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80057b0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80057b4:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80057b8:	b113      	cbz	r3, 80057c0 <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80057ba:	2100      	movs	r1, #0
 80057bc:	4620      	mov	r0, r4
 80057be:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80057c0:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 80057c4:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <_tx_thread_shell_entry+0x60>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b10b      	cbz	r3, 80057d0 <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80057cc:	4620      	mov	r0, r4
 80057ce:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80057d0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80057d4:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80057d8:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80057da:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80057dc:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 80057e0:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80057e2:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 80057e4:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80057e6:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80057e8:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 80057ea:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80057ec:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80057f0:	b10d      	cbz	r5, 80057f6 <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80057f2:	4620      	mov	r0, r4
 80057f4:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80057f6:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80057f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 80057fc:	f000 b8e0 	b.w	80059c0 <_tx_thread_system_suspend>
 8005800:	200007d8 	.word	0x200007d8
 8005804:	200007bc 	.word	0x200007bc
 8005808:	200007d4 	.word	0x200007d4

0800580c <_tx_thread_sleep>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800580e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005812:	b672      	cpsid	i

	/* Lockout interrupts while the thread is being resumed. */
	TX_DISABLE

	/* Pickup thread pointer. */
	TX_THREAD_GET_CURRENT(thread_ptr)
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <_tx_thread_sleep+0x5c>)
 8005816:	681c      	ldr	r4, [r3, #0]

	/* Determine if this is a legal request. */

	/* Is there a current thread?  */
	if (thread_ptr == TX_NULL)
 8005818:	b1f4      	cbz	r4, 8005858 <_tx_thread_sleep+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800581a:	f3ef 8305 	mrs	r3, IPSR

		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
	/* Is the caller an ISR or Initialization?  */
	else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG)0))
 800581e:	4913      	ldr	r1, [pc, #76]	; (800586c <_tx_thread_sleep+0x60>)
 8005820:	6809      	ldr	r1, [r1, #0]
 8005822:	430b      	orrs	r3, r1
 8005824:	d118      	bne.n	8005858 <_tx_thread_sleep+0x4c>
		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
#ifndef TX_TIMER_PROCESS_IN_ISR
	/* Is the caller the system timer thread?  */
	else if (thread_ptr == &_tx_timer_thread)
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <_tx_thread_sleep+0x64>)
 8005828:	429c      	cmp	r4, r3
 800582a:	d015      	beq.n	8005858 <_tx_thread_sleep+0x4c>
		/* Illegal caller of this service. */
		status = TX_CALLER_ERROR;
	}
#endif
	/* Determine if the requested number of ticks is zero. */
	else if (timer_ticks == ((ULONG)0))
 800582c:	b1c0      	cbz	r0, 8005860 <_tx_thread_sleep+0x54>
		status = TX_SUCCESS;
	}
	else
	{
		/* Determine if the preempt disable flag is non-zero. */
		if (_tx_thread_preempt_disable != ((UINT)0))
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <_tx_thread_sleep+0x68>)
 8005830:	6819      	ldr	r1, [r3, #0]
 8005832:	b989      	cbnz	r1, 8005858 <_tx_thread_sleep+0x4c>

			/* Setup the timeout period. */
			thread_ptr->tx_thread_timer.tx_timer_internal_remaining_ticks = timer_ticks;

			/* Temporarily disable preemption. */
			_tx_thread_preempt_disable++;
 8005834:	681d      	ldr	r5, [r3, #0]
			thread_ptr->tx_thread_suspending = TX_TRUE;
 8005836:	2601      	movs	r6, #1
			thread_ptr->tx_thread_state = TX_SLEEP;
 8005838:	2704      	movs	r7, #4
			thread_ptr->tx_thread_suspend_status = TX_SUCCESS;
 800583a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
			_tx_thread_preempt_disable++;
 800583e:	4435      	add	r5, r6
			thread_ptr->tx_thread_timer.tx_timer_internal_remaining_ticks = timer_ticks;
 8005840:	64e0      	str	r0, [r4, #76]	; 0x4c
			thread_ptr->tx_thread_state = TX_SLEEP;
 8005842:	6327      	str	r7, [r4, #48]	; 0x30
			_tx_thread_preempt_disable++;
 8005844:	601d      	str	r5, [r3, #0]
			thread_ptr->tx_thread_suspending = TX_TRUE;
 8005846:	63a6      	str	r6, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005848:	f382 8810 	msr	PRIMASK, r2

			/* Restore interrupts. */
			TX_RESTORE

			/* Call actual thread suspension routine. */
			_tx_thread_system_suspend(thread_ptr);
 800584c:	4620      	mov	r0, r4
 800584e:	f000 f8b7 	bl	80059c0 <_tx_thread_system_suspend>
#endif

			/* Return status to the caller. */
			status = thread_ptr->tx_thread_suspend_status;
 8005852:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
		}
	}

	/* Return completion status. */
	return (status);
}
 8005856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005858:	f382 8810 	msr	PRIMASK, r2
			status = TX_CALLER_ERROR;
 800585c:	2013      	movs	r0, #19
}
 800585e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005860:	f382 8810 	msr	PRIMASK, r2
 8005864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005866:	bf00      	nop
 8005868:	200007d8 	.word	0x200007d8
 800586c:	20000178 	.word	0x20000178
 8005870:	20000880 	.word	0x20000880
 8005874:	200007d4 	.word	0x200007d4

08005878 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <_tx_thread_system_preempt_check+0x2c>)
 800587a:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800587c:	b98b      	cbnz	r3, 80058a2 <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d00b      	beq.n	80058a2 <_tx_thread_system_preempt_check+0x2a>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <_tx_thread_system_preempt_check+0x38>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005892:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8005896:	b923      	cbnz	r3, 80058a2 <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005898:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800589c:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800589e:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80058a2:	4770      	bx	lr
 80058a4:	200007d4 	.word	0x200007d4
 80058a8:	200007d8 	.word	0x200007d8
 80058ac:	200007dc 	.word	0x200007dc
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80058b8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80058bc:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80058be:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03f      	beq.n	8005944 <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80058c4:	304c      	adds	r0, #76	; 0x4c
 80058c6:	f000 f9ff 	bl	8005cc8 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80058ca:	4a35      	ldr	r2, [pc, #212]	; (80059a0 <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80058cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80058d2:	3b01      	subs	r3, #1
 80058d4:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80058d6:	b9b8      	cbnz	r0, 8005908 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80058d8:	b9f9      	cbnz	r1, 800591a <_tx_thread_system_resume+0x66>
 80058da:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80058dc:	4932      	ldr	r1, [pc, #200]	; (80059a8 <_tx_thread_system_resume+0xf4>)
 80058de:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80058e0:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	428b      	cmp	r3, r1
 80058e8:	d00d      	beq.n	8005906 <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80058ea:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 80058ec:	b95b      	cbnz	r3, 8005906 <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <_tx_thread_system_resume+0xf8>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80058f6:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 80058fa:	b923      	cbnz	r3, 8005906 <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80058fc:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8005900:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005902:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8005906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005908:	3901      	subs	r1, #1
 800590a:	2901      	cmp	r1, #1
 800590c:	d9e5      	bls.n	80058da <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800590e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005910:	b991      	cbnz	r1, 8005938 <_tx_thread_system_resume+0x84>
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8005914:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 8005916:	6321      	str	r1, [r4, #48]	; 0x30
 8005918:	e7e0      	b.n	80058dc <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800591a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800591c:	b963      	cbnz	r3, 8005938 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 800591e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 8005920:	4e23      	ldr	r6, [pc, #140]	; (80059b0 <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 8005922:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 8005924:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 8005928:	b171      	cbz	r1, 8005948 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800592a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800592e:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8005930:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8005932:	e9c4 1008 	strd	r1, r0, [r4, #32]
 8005936:	e7d1      	b.n	80058dc <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8005938:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800593a:	2103      	movs	r1, #3
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <_tx_thread_system_resume+0xf0>)
 800593e:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 8005942:	e7cb      	b.n	80058dc <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8005944:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005946:	e7c0      	b.n	80058ca <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8005948:	491a      	ldr	r1, [pc, #104]	; (80059b4 <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800594a:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 800594e:	4f1a      	ldr	r7, [pc, #104]	; (80059b8 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8005950:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005952:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8005956:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 800595a:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800595c:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 8005960:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8005962:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8005966:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 800596a:	d9b7      	bls.n	80058dc <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 800596c:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 800596e:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 8005970:	b199      	cbz	r1, 800599a <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8005972:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8005974:	4286      	cmp	r6, r0
 8005976:	d9b1      	bls.n	80058dc <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8005978:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800597a:	428e      	cmp	r6, r1
 800597c:	d006      	beq.n	800598c <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800597e:	480f      	ldr	r0, [pc, #60]	; (80059bc <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8005980:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8005984:	6801      	ldr	r1, [r0, #0]
 8005986:	ea41 010c 	orr.w	r1, r1, ip
 800598a:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 800598c:	601c      	str	r4, [r3, #0]
 800598e:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005992:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0aa      	beq.n	80058ee <_tx_thread_system_resume+0x3a>
}
 8005998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 800599a:	601c      	str	r4, [r3, #0]
 800599c:	e79e      	b.n	80058dc <_tx_thread_system_resume+0x28>
 800599e:	bf00      	nop
 80059a0:	200007d4 	.word	0x200007d4
 80059a4:	200007dc 	.word	0x200007dc
 80059a8:	200007d8 	.word	0x200007d8
 80059ac:	e000ed04 	.word	0xe000ed04
 80059b0:	2000073c 	.word	0x2000073c
 80059b4:	200007c0 	.word	0x200007c0
 80059b8:	200007e0 	.word	0x200007e0
 80059bc:	200007e4 	.word	0x200007e4

080059c0 <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80059c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80059c4:	4b57      	ldr	r3, [pc, #348]	; (8005b24 <_tx_thread_system_suspend+0x164>)
{
 80059c6:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 80059c8:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80059ca:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80059ce:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80059d0:	4285      	cmp	r5, r0
 80059d2:	d060      	beq.n	8005a96 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80059d4:	4a54      	ldr	r2, [pc, #336]	; (8005b28 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80059d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 80059d8:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80059da:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 80059dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80059e0:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80059e2:	d015      	beq.n	8005a10 <_tx_thread_system_suspend+0x50>
 80059e4:	4b51      	ldr	r3, [pc, #324]	; (8005b2c <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80059e6:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	42ab      	cmp	r3, r5
 80059ee:	d00d      	beq.n	8005a0c <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80059f0:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 80059f2:	b95b      	cbnz	r3, 8005a0c <_tx_thread_system_suspend+0x4c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80059f4:	4b4e      	ldr	r3, [pc, #312]	; (8005b30 <_tx_thread_system_suspend+0x170>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80059fc:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8005a00:	b923      	cbnz	r3, 8005a0c <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005a02:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8005a06:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005a08:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 8005a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8005a10:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005a12:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 8005a16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 8005a18:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005a1a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 8005a1e:	d050      	beq.n	8005ac2 <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005a20:	4f44      	ldr	r7, [pc, #272]	; (8005b34 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8005a22:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005a26:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8005a2a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005a2e:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 8005a30:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005a34:	d037      	beq.n	8005aa6 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 8005a36:	4b3d      	ldr	r3, [pc, #244]	; (8005b2c <_tx_thread_system_suspend+0x16c>)
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	42a1      	cmp	r1, r4
 8005a3c:	d1d3      	bne.n	80059e6 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005a3e:	483e      	ldr	r0, [pc, #248]	; (8005b38 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005a40:	493e      	ldr	r1, [pc, #248]	; (8005b3c <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005a42:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005a44:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005a46:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8005a4a:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005a4c:	b1ec      	cbz	r4, 8005a8a <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 8005a4e:	6814      	ldr	r4, [r2, #0]
 8005a50:	3401      	adds	r4, #1
 8005a52:	6014      	str	r4, [r2, #0]
 8005a54:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005a58:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005a5c:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 8005a5e:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8005a60:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 8005a62:	3c01      	subs	r4, #1
 8005a64:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005a66:	fa95 f4a5 	rbit	r4, r5
 8005a6a:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8005a6e:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 8005a72:	f8d0 c000 	ldr.w	ip, [r0]
 8005a76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a78:	4560      	cmp	r0, ip
 8005a7a:	d806      	bhi.n	8005a8a <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005a7c:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8005a7e:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005a80:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005a84:	ea25 0504 	bic.w	r5, r5, r4
 8005a88:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005a8a:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005a8e:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0af      	beq.n	80059f4 <_tx_thread_system_suspend+0x34>
 8005a94:	e7ba      	b.n	8005a0c <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 8005a96:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	3303      	adds	r3, #3
 8005a9c:	d935      	bls.n	8005b0a <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005a9e:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <_tx_thread_system_suspend+0x180>)
 8005aa0:	69e2      	ldr	r2, [r4, #28]
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e796      	b.n	80059d4 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005aa6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8005b3c <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 8005aaa:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005aae:	f8dc 3000 	ldr.w	r3, [ip]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0bf      	beq.n	8005a36 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005ab6:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005ab8:	ea23 0301 	bic.w	r3, r3, r1
 8005abc:	f8cc 3000 	str.w	r3, [ip]
 8005ac0:	e7b9      	b.n	8005a36 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005ac2:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005b44 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005ac6:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005ac8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8005b3c <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005acc:	f8de 3000 	ldr.w	r3, [lr]
 8005ad0:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 8005ad2:	4f18      	ldr	r7, [pc, #96]	; (8005b34 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005ad4:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005ad6:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 8005ada:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005ade:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	d003      	beq.n	8005af0 <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005ae8:	ea01 0109 	and.w	r1, r1, r9
 8005aec:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 8005af0:	b983      	cbnz	r3, 8005b14 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005af2:	4811      	ldr	r0, [pc, #68]	; (8005b38 <_tx_thread_system_suspend+0x178>)
 8005af4:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 8005af6:	490d      	ldr	r1, [pc, #52]	; (8005b2c <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005af8:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8005afa:	600b      	str	r3, [r1, #0]
 8005afc:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005b00:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f43f af76 	beq.w	80059f4 <_tx_thread_system_suspend+0x34>
 8005b08:	e780      	b.n	8005a0c <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8005b0a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8005b0e:	f000 f8b1 	bl	8005c74 <_tx_timer_system_activate>
 8005b12:	e7c4      	b.n	8005a9e <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005b14:	fa93 f3a3 	rbit	r3, r3
 8005b18:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005b1c:	4906      	ldr	r1, [pc, #24]	; (8005b38 <_tx_thread_system_suspend+0x178>)
 8005b1e:	600b      	str	r3, [r1, #0]
 8005b20:	e789      	b.n	8005a36 <_tx_thread_system_suspend+0x76>
 8005b22:	bf00      	nop
 8005b24:	200007d8 	.word	0x200007d8
 8005b28:	200007d4 	.word	0x200007d4
 8005b2c:	200007dc 	.word	0x200007dc
 8005b30:	e000ed04 	.word	0xe000ed04
 8005b34:	2000073c 	.word	0x2000073c
 8005b38:	200007e0 	.word	0x200007e0
 8005b3c:	200007e4 	.word	0x200007e4
 8005b40:	20000870 	.word	0x20000870
 8005b44:	200007c0 	.word	0x200007c0

08005b48 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005b48:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005b4a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005b4e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8005b50:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005b52:	2a04      	cmp	r2, #4
 8005b54:	d008      	beq.n	8005b68 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8005b56:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8005b58:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005b5c:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 8005b60:	b162      	cbz	r2, 8005b7c <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8005b62:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8005b66:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 8005b68:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <_tx_thread_timeout+0x3c>)
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	f384 8810 	msr	PRIMASK, r4
}
 8005b74:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 8005b78:	f7ff be9c 	b.w	80058b4 <_tx_thread_system_resume>
}
 8005b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	200007d4 	.word	0x200007d4

08005b88 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005b8c:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005b8e:	4c26      	ldr	r4, [pc, #152]	; (8005c28 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8005b90:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8005c60 <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005b94:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 8005b96:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8005c64 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005b9a:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005b9c:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005b9e:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005ba0:	4f23      	ldr	r7, [pc, #140]	; (8005c30 <_tx_timer_initialize+0xa8>)
{
 8005ba2:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 8005ba4:	4e23      	ldr	r6, [pc, #140]	; (8005c34 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8005ba6:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 8005baa:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005bae:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 8005bb0:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005bb2:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005bb4:	f001 fb7e 	bl	80072b4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005bb8:	4e1f      	ldr	r6, [pc, #124]	; (8005c38 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005bba:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005bc0:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005bc4:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005bc6:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005bc8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005c68 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005bcc:	4f1c      	ldr	r7, [pc, #112]	; (8005c40 <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005bce:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005bd0:	4661      	mov	r1, ip
 8005bd2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005c6c <_tx_timer_initialize+0xe4>
 8005bd6:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005bd8:	4e1a      	ldr	r6, [pc, #104]	; (8005c44 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005bda:	4c1b      	ldr	r4, [pc, #108]	; (8005c48 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005bdc:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005be0:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8005be4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005c70 <_tx_timer_initialize+0xe8>
 8005be8:	4f18      	ldr	r7, [pc, #96]	; (8005c4c <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005bea:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8005bee:	4d18      	ldr	r5, [pc, #96]	; (8005c50 <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005bf0:	6020      	str	r0, [r4, #0]
 8005bf2:	e003      	b.n	8005bfc <_tx_timer_initialize+0x74>
 8005bf4:	6831      	ldr	r1, [r6, #0]
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	9201      	str	r2, [sp, #4]
 8005c00:	9100      	str	r1, [sp, #0]
 8005c02:	463a      	mov	r2, r7
 8005c04:	4629      	mov	r1, r5
 8005c06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c0a:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8005c0e:	464b      	mov	r3, r9
 8005c10:	4810      	ldr	r0, [pc, #64]	; (8005c54 <_tx_timer_initialize+0xcc>)
 8005c12:	f7ff fcef 	bl	80055f4 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d1ec      	bne.n	8005bf4 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8005c1a:	4a0f      	ldr	r2, [pc, #60]	; (8005c58 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 8005c1e:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 8005c20:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8005c22:	b007      	add	sp, #28
 8005c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c28:	200007ec 	.word	0x200007ec
 8005c2c:	20000948 	.word	0x20000948
 8005c30:	20000d60 	.word	0x20000d60
 8005c34:	2000086c 	.word	0x2000086c
 8005c38:	200007e8 	.word	0x200007e8
 8005c3c:	2000094c 	.word	0x2000094c
 8005c40:	20000878 	.word	0x20000878
 8005c44:	20000d58 	.word	0x20000d58
 8005c48:	20000954 	.word	0x20000954
 8005c4c:	08005cf9 	.word	0x08005cf9
 8005c50:	08007400 	.word	0x08007400
 8005c54:	20000880 	.word	0x20000880
 8005c58:	20000950 	.word	0x20000950
 8005c5c:	20000d5c 	.word	0x20000d5c
 8005c60:	20000d64 	.word	0x20000d64
 8005c64:	20000870 	.word	0x20000870
 8005c68:	20000958 	.word	0x20000958
 8005c6c:	20000874 	.word	0x20000874
 8005c70:	4154494d 	.word	0x4154494d

08005c74 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005c74:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005c76:	1e53      	subs	r3, r2, #1
 8005c78:	1cd9      	adds	r1, r3, #3
 8005c7a:	d900      	bls.n	8005c7e <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 8005c7c:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005c7e:	6981      	ldr	r1, [r0, #24]
 8005c80:	2900      	cmp	r1, #0
 8005c82:	d1fb      	bne.n	8005c7c <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005c84:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005c86:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005c88:	490d      	ldr	r1, [pc, #52]	; (8005cc0 <_tx_timer_system_activate+0x4c>)
 8005c8a:	bf94      	ite	ls
 8005c8c:	009b      	lslls	r3, r3, #2
 8005c8e:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005c90:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005c92:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005c94:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005c96:	4299      	cmp	r1, r3
 8005c98:	d803      	bhi.n	8005ca2 <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005c9c:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	b132      	cbz	r2, 8005cb4 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8005ca6:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8005ca8:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8005caa:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8005cac:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8005cb0:	6183      	str	r3, [r0, #24]
}
 8005cb2:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005cb4:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 8005cb8:	6018      	str	r0, [r3, #0]
 8005cba:	e7f9      	b.n	8005cb0 <_tx_timer_system_activate+0x3c>
 8005cbc:	200007e8 	.word	0x200007e8
 8005cc0:	20000878 	.word	0x20000878
 8005cc4:	2000094c 	.word	0x2000094c

08005cc8 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005cc8:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005cca:	b153      	cbz	r3, 8005ce2 <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005ccc:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005cce:	4290      	cmp	r0, r2
 8005cd0:	d008      	beq.n	8005ce4 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005cd2:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005cd4:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005cd6:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	4281      	cmp	r1, r0
 8005cdc:	d008      	beq.n	8005cf0 <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6183      	str	r3, [r0, #24]
    }
}
 8005ce2:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4282      	cmp	r2, r0
 8005ce8:	d1f9      	bne.n	8005cde <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e7f6      	b.n	8005cde <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005cf0:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	e7f3      	b.n	8005cde <_tx_timer_system_deactivate+0x16>
 8005cf6:	bf00      	nop

08005cf8 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005cf8:	4b40      	ldr	r3, [pc, #256]	; (8005dfc <_tx_timer_thread_entry+0x104>)
 8005cfa:	4298      	cmp	r0, r3
 8005cfc:	d000      	beq.n	8005d00 <_tx_timer_thread_entry+0x8>
 8005cfe:	4770      	bx	lr
{
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b083      	sub	sp, #12
 8005d06:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8005e14 <_tx_timer_thread_entry+0x11c>
 8005d0a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8005e18 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005d0e:	2600      	movs	r6, #0
 8005d10:	ad01      	add	r5, sp, #4
 8005d12:	4c3b      	ldr	r4, [pc, #236]	; (8005e00 <_tx_timer_thread_entry+0x108>)
 8005d14:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8005e0c <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d18:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d1c:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 8005d1e:	f8db 3000 	ldr.w	r3, [fp]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 8005d26:	b10a      	cbz	r2, 8005d2c <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005d28:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005d2c:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 8005d30:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005d34:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005d36:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005d3a:	d059      	beq.n	8005df0 <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005d3c:	4b31      	ldr	r3, [pc, #196]	; (8005e04 <_tx_timer_thread_entry+0x10c>)
 8005d3e:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005d40:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d44:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d48:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005d4a:	9f00      	ldr	r7, [sp, #0]
 8005d4c:	b9b7      	cbnz	r7, 8005d7c <_tx_timer_thread_entry+0x84>
 8005d4e:	e034      	b.n	8005dba <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005d50:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005d52:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005d54:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8005d56:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005d58:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005d5a:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005d5c:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d60:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d64:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005d66:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005d68:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 8005d6a:	42b8      	cmp	r0, r7
 8005d6c:	d02b      	beq.n	8005dc6 <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005d6e:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d72:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d76:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8005d78:	9f00      	ldr	r7, [sp, #0]
 8005d7a:	b1f7      	cbz	r7, 8005dba <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005d7c:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 8005d7e:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 8005d80:	42ba      	cmp	r2, r7
 8005d82:	d018      	beq.n	8005db6 <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005d84:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 8005d86:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005d88:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005d8a:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005d8c:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	2a20      	cmp	r2, #32
 8005d94:	d8dc      	bhi.n	8005d50 <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005d96:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005d98:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005d9c:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005d9e:	b113      	cbz	r3, 8005da6 <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005da0:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005da2:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 8005da4:	9701      	str	r7, [sp, #4]
 8005da6:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 8005da8:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005daa:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d0d6      	beq.n	8005d60 <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 8005db2:	4790      	blx	r2
 8005db4:	e7d4      	b.n	8005d60 <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 8005db6:	9600      	str	r6, [sp, #0]
 8005db8:	e7ea      	b.n	8005d90 <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <_tx_timer_thread_entry+0x10c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	b13b      	cbz	r3, 8005dd0 <_tx_timer_thread_entry+0xd8>
 8005dc0:	f38c 8810 	msr	PRIMASK, ip
 8005dc4:	e7a8      	b.n	8005d18 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8005dc6:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7ff ff53 	bl	8005c74 <_tx_timer_system_activate>
 8005dce:	e7ce      	b.n	8005d6e <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005dd0:	490d      	ldr	r1, [pc, #52]	; (8005e08 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005dd2:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005dd4:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 8005dd6:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005dd8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 8005ddc:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005dde:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 8005de2:	600b      	str	r3, [r1, #0]
 8005de4:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005de8:	4808      	ldr	r0, [pc, #32]	; (8005e0c <_tx_timer_thread_entry+0x114>)
 8005dea:	f7ff fde9 	bl	80059c0 <_tx_thread_system_suspend>
 8005dee:	e793      	b.n	8005d18 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <_tx_timer_thread_entry+0x118>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8cb 3000 	str.w	r3, [fp]
 8005df8:	e7a0      	b.n	8005d3c <_tx_timer_thread_entry+0x44>
 8005dfa:	bf00      	nop
 8005dfc:	4154494d 	.word	0x4154494d
 8005e00:	20000948 	.word	0x20000948
 8005e04:	2000086c 	.word	0x2000086c
 8005e08:	200007d4 	.word	0x200007d4
 8005e0c:	20000880 	.word	0x20000880
 8005e10:	2000094c 	.word	0x2000094c
 8005e14:	200007e8 	.word	0x200007e8
 8005e18:	20000878 	.word	0x20000878

08005e1c <_txe_event_flags_create>:
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8005e1c:	2a28      	cmp	r2, #40	; 0x28
 8005e1e:	d140      	bne.n	8005ea2 <_txe_event_flags_create+0x86>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d03e      	beq.n	8005ea2 <_txe_event_flags_create+0x86>
{
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005e26:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005e2a:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005e2c:	4f23      	ldr	r7, [pc, #140]	; (8005ebc <_txe_event_flags_create+0xa0>)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e34:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <_txe_event_flags_create+0xa4>)
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005e3a:	4b22      	ldr	r3, [pc, #136]	; (8005ec4 <_txe_event_flags_create+0xa8>)
        next_group =   _tx_event_flags_created_ptr;
 8005e3c:	6814      	ldr	r4, [r2, #0]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005e3e:	681a      	ldr	r2, [r3, #0]
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8005e40:	42a0      	cmp	r0, r4
 8005e42:	d00a      	beq.n	8005e5a <_txe_event_flags_create+0x3e>
 8005e44:	fab2 f382 	clz	r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	b113      	cbz	r3, 8005e52 <_txe_event_flags_create+0x36>
 8005e4c:	e005      	b.n	8005e5a <_txe_event_flags_create+0x3e>
 8005e4e:	42a0      	cmp	r0, r4
 8005e50:	d003      	beq.n	8005e5a <_txe_event_flags_create+0x3e>
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005e52:	3301      	adds	r3, #1
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8005e54:	69a4      	ldr	r4, [r4, #24]
            if (group_ptr == next_group)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d3f9      	bcc.n	8005e4e <_txe_event_flags_create+0x32>
 8005e5a:	460e      	mov	r6, r1
 8005e5c:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005e5e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005e62:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e6a:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005e6e:	f7ff fd03 	bl	8005878 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8005e72:	42a5      	cmp	r5, r4
 8005e74:	d01f      	beq.n	8005eb6 <_txe_event_flags_create+0x9a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <_txe_event_flags_create+0xac>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005e78:	4814      	ldr	r0, [pc, #80]	; (8005ecc <_txe_event_flags_create+0xb0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005e7c:	4283      	cmp	r3, r0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2013      	moveq	r0, #19
 8005e82:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e84:	f3ef 8205 	mrs	r2, IPSR
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <_txe_event_flags_create+0xb4>)
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	d00a      	beq.n	8005ea6 <_txe_event_flags_create+0x8a>
 8005e90:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005e9c:	d203      	bcs.n	8005ea6 <_txe_event_flags_create+0x8a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005e9e:	2013      	movs	r0, #19
        status =  _tx_event_flags_create(group_ptr, name_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8005ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status =  TX_GROUP_ERROR;
 8005ea2:	2006      	movs	r0, #6
}
 8005ea4:	4770      	bx	lr
    if (status == TX_SUCCESS)
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d1fa      	bne.n	8005ea0 <_txe_event_flags_create+0x84>
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
}
 8005eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8005eb2:	f000 bad5 	b.w	8006460 <_tx_event_flags_create>
        status =  TX_GROUP_ERROR;
 8005eb6:	2006      	movs	r0, #6
}
 8005eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200007d4 	.word	0x200007d4
 8005ec0:	20000d68 	.word	0x20000d68
 8005ec4:	20000d8c 	.word	0x20000d8c
 8005ec8:	200007d8 	.word	0x200007d8
 8005ecc:	20000880 	.word	0x20000880
 8005ed0:	20000178 	.word	0x20000178

08005ed4 <_txe_event_flags_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8005ed4:	b180      	cbz	r0, 8005ef8 <_txe_event_flags_delete+0x24>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8005ed6:	6802      	ldr	r2, [r0, #0]
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <_txe_event_flags_delete+0x2c>)
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10c      	bne.n	8005ef8 <_txe_event_flags_delete+0x24>
 8005ede:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005ee2:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <_txe_event_flags_delete+0x30>)
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d108      	bne.n	8005efc <_txe_event_flags_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005eea:	4a07      	ldr	r2, [pc, #28]	; (8005f08 <_txe_event_flags_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <_txe_event_flags_delete+0x38>)
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d003      	beq.n	8005efc <_txe_event_flags_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 8005ef4:	f000 badc 	b.w	80064b0 <_tx_event_flags_delete>
        status =  TX_GROUP_ERROR;
 8005ef8:	2006      	movs	r0, #6
 8005efa:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8005efc:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 8005efe:	4770      	bx	lr
 8005f00:	4456444e 	.word	0x4456444e
 8005f04:	20000178 	.word	0x20000178
 8005f08:	200007d8 	.word	0x200007d8
 8005f0c:	20000880 	.word	0x20000880

08005f10 <_txe_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8005f10:	b470      	push	{r4, r5, r6}
 8005f12:	9c03      	ldr	r4, [sp, #12]

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8005f14:	b118      	cbz	r0, 8005f1e <_txe_event_flags_get+0xe>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8005f16:	4d10      	ldr	r5, [pc, #64]	; (8005f58 <_txe_event_flags_get+0x48>)
 8005f18:	6806      	ldr	r6, [r0, #0]
 8005f1a:	42ae      	cmp	r6, r5
 8005f1c:	d002      	beq.n	8005f24 <_txe_event_flags_get+0x14>
        status =  TX_GROUP_ERROR;
 8005f1e:	2006      	movs	r0, #6
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8005f20:	bc70      	pop	{r4, r5, r6}
 8005f22:	4770      	bx	lr
    else if (actual_flags_ptr == TX_NULL)
 8005f24:	b143      	cbz	r3, 8005f38 <_txe_event_flags_get+0x28>
        if (wait_option != TX_NO_WAIT)
 8005f26:	b174      	cbz	r4, 8005f46 <_txe_event_flags_get+0x36>
 8005f28:	f3ef 8505 	mrs	r5, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005f2c:	4e0b      	ldr	r6, [pc, #44]	; (8005f5c <_txe_event_flags_get+0x4c>)
 8005f2e:	6836      	ldr	r6, [r6, #0]
 8005f30:	4335      	orrs	r5, r6
 8005f32:	d003      	beq.n	8005f3c <_txe_event_flags_get+0x2c>
                status =  TX_WAIT_ERROR;
 8005f34:	2004      	movs	r0, #4
 8005f36:	e7f3      	b.n	8005f20 <_txe_event_flags_get+0x10>
        status =  TX_PTR_ERROR;
 8005f38:	2003      	movs	r0, #3
 8005f3a:	e7f1      	b.n	8005f20 <_txe_event_flags_get+0x10>
                TX_THREAD_GET_CURRENT(current_thread)
 8005f3c:	4e08      	ldr	r6, [pc, #32]	; (8005f60 <_txe_event_flags_get+0x50>)
                if (current_thread == &_tx_timer_thread)
 8005f3e:	4d09      	ldr	r5, [pc, #36]	; (8005f64 <_txe_event_flags_get+0x54>)
 8005f40:	6836      	ldr	r6, [r6, #0]
 8005f42:	42ae      	cmp	r6, r5
 8005f44:	d0f6      	beq.n	8005f34 <_txe_event_flags_get+0x24>
        if (get_option > TX_AND_CLEAR)
 8005f46:	2a03      	cmp	r2, #3
 8005f48:	d803      	bhi.n	8005f52 <_txe_event_flags_get+0x42>
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8005f4a:	9403      	str	r4, [sp, #12]
}
 8005f4c:	bc70      	pop	{r4, r5, r6}
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8005f4e:	f000 bafd 	b.w	800654c <_tx_event_flags_get>
            status =  TX_OPTION_ERROR;
 8005f52:	2008      	movs	r0, #8
    return(status);
 8005f54:	e7e4      	b.n	8005f20 <_txe_event_flags_get+0x10>
 8005f56:	bf00      	nop
 8005f58:	4456444e 	.word	0x4456444e
 8005f5c:	20000178 	.word	0x20000178
 8005f60:	200007d8 	.word	0x200007d8
 8005f64:	20000880 	.word	0x20000880

08005f68 <_txe_mutex_create>:
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8005f68:	b108      	cbz	r0, 8005f6e <_txe_mutex_create+0x6>
 8005f6a:	2b34      	cmp	r3, #52	; 0x34
 8005f6c:	d001      	beq.n	8005f72 <_txe_mutex_create+0xa>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8005f6e:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 8005f70:	4770      	bx	lr
{
 8005f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005f76:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005f7a:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8005f7c:	4f29      	ldr	r7, [pc, #164]	; (8006024 <_txe_mutex_create+0xbc>)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005f84:	f384 8810 	msr	PRIMASK, r4
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8005f88:	4c27      	ldr	r4, [pc, #156]	; (8006028 <_txe_mutex_create+0xc0>)
        next_mutex =   _tx_mutex_created_ptr;
 8005f8a:	4b28      	ldr	r3, [pc, #160]	; (800602c <_txe_mutex_create+0xc4>)
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8005f8c:	6825      	ldr	r5, [r4, #0]
        next_mutex =   _tx_mutex_created_ptr;
 8005f8e:	681c      	ldr	r4, [r3, #0]
            if (mutex_ptr == next_mutex)
 8005f90:	b15d      	cbz	r5, 8005faa <_txe_mutex_create+0x42>
 8005f92:	1b03      	subs	r3, r0, r4
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	b113      	cbz	r3, 8005fa2 <_txe_mutex_create+0x3a>
 8005f9c:	e005      	b.n	8005faa <_txe_mutex_create+0x42>
 8005f9e:	42ab      	cmp	r3, r5
 8005fa0:	d203      	bcs.n	8005faa <_txe_mutex_create+0x42>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8005fa2:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8005fa4:	3301      	adds	r3, #1
            if (mutex_ptr == next_mutex)
 8005fa6:	42a0      	cmp	r0, r4
 8005fa8:	d1f9      	bne.n	8005f9e <_txe_mutex_create+0x36>
 8005faa:	4605      	mov	r5, r0
 8005fac:	4616      	mov	r6, r2
 8005fae:	4688      	mov	r8, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005fb0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005fb4:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005fbc:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8005fc0:	f7ff fc5a 	bl	8005878 <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 8005fc4:	42a5      	cmp	r5, r4
 8005fc6:	d015      	beq.n	8005ff4 <_txe_mutex_create+0x8c>
                if (inherit != TX_NO_INHERIT)
 8005fc8:	2e01      	cmp	r6, #1
 8005fca:	d81d      	bhi.n	8006008 <_txe_mutex_create+0xa0>
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005fcc:	4a18      	ldr	r2, [pc, #96]	; (8006030 <_txe_mutex_create+0xc8>)
        if (thread_ptr == &_tx_timer_thread)
 8005fce:	4b19      	ldr	r3, [pc, #100]	; (8006034 <_txe_mutex_create+0xcc>)
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d01a      	beq.n	800600c <_txe_mutex_create+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005fd6:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <_txe_mutex_create+0xd0>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	d00b      	beq.n	8005ffa <_txe_mutex_create+0x92>
 8005fe2:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005fee:	d204      	bcs.n	8005ffa <_txe_mutex_create+0x92>
            status =  TX_CALLER_ERROR;
 8005ff0:	2013      	movs	r0, #19
    return(status);
 8005ff2:	e000      	b.n	8005ff6 <_txe_mutex_create+0x8e>
        status =  TX_MUTEX_ERROR;
 8005ff4:	201c      	movs	r0, #28
}
 8005ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	4628      	mov	r0, r5
}
 8006000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8006004:	f000 bb4c 	b.w	80066a0 <_tx_mutex_create>
                    status =  TX_INHERIT_ERROR;
 8006008:	201f      	movs	r0, #31
 800600a:	e7f4      	b.n	8005ff6 <_txe_mutex_create+0x8e>
 800600c:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <_txe_mutex_create+0xd0>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	d0eb      	beq.n	8005ff0 <_txe_mutex_create+0x88>
 8006018:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 800601c:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	e7e9      	b.n	8005ff6 <_txe_mutex_create+0x8e>
 8006022:	bf00      	nop
 8006024:	200007d4 	.word	0x200007d4
 8006028:	20000d6c 	.word	0x20000d6c
 800602c:	20000d70 	.word	0x20000d70
 8006030:	200007d8 	.word	0x200007d8
 8006034:	20000880 	.word	0x20000880
 8006038:	20000178 	.word	0x20000178

0800603c <_txe_mutex_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800603c:	b180      	cbz	r0, 8006060 <_txe_mutex_delete+0x24>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800603e:	6802      	ldr	r2, [r0, #0]
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <_txe_mutex_delete+0x2c>)
 8006042:	429a      	cmp	r2, r3
 8006044:	d10c      	bne.n	8006060 <_txe_mutex_delete+0x24>
 8006046:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800604a:	4a08      	ldr	r2, [pc, #32]	; (800606c <_txe_mutex_delete+0x30>)
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	4313      	orrs	r3, r2
 8006050:	d108      	bne.n	8006064 <_txe_mutex_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006052:	4a07      	ldr	r2, [pc, #28]	; (8006070 <_txe_mutex_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <_txe_mutex_delete+0x38>)
 8006056:	6812      	ldr	r2, [r2, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d003      	beq.n	8006064 <_txe_mutex_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800605c:	f000 bb50 	b.w	8006700 <_tx_mutex_delete>
        status =  TX_MUTEX_ERROR;
 8006060:	201c      	movs	r0, #28
 8006062:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8006064:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 8006066:	4770      	bx	lr
 8006068:	4d555445 	.word	0x4d555445
 800606c:	20000178 	.word	0x20000178
 8006070:	200007d8 	.word	0x200007d8
 8006074:	20000880 	.word	0x20000880

08006078 <_txe_mutex_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8006078:	b118      	cbz	r0, 8006082 <_txe_mutex_get+0xa>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <_txe_mutex_get+0x58>)
 800607c:	6802      	ldr	r2, [r0, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d001      	beq.n	8006086 <_txe_mutex_get+0xe>
        status =  TX_MUTEX_ERROR;
 8006082:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8006084:	4770      	bx	lr
{
 8006086:	b410      	push	{r4}
        if (wait_option != TX_NO_WAIT)
 8006088:	b981      	cbnz	r1, 80060ac <_txe_mutex_get+0x34>
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <_txe_mutex_get+0x5c>)
 800608c:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006090:	681c      	ldr	r4, [r3, #0]
 8006092:	4322      	orrs	r2, r4
 8006094:	d006      	beq.n	80060a4 <_txe_mutex_get+0x2c>
 8006096:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4313      	orrs	r3, r2
 800609e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80060a2:	d312      	bcc.n	80060ca <_txe_mutex_get+0x52>
}
 80060a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80060a8:	f000 bb84 	b.w	80067b4 <_tx_mutex_get>
 80060ac:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <_txe_mutex_get+0x5c>)
 80060b2:	681c      	ldr	r4, [r3, #0]
 80060b4:	4322      	orrs	r2, r4
 80060b6:	d104      	bne.n	80060c2 <_txe_mutex_get+0x4a>
                TX_THREAD_GET_CURRENT(current_thread)
 80060b8:	4c07      	ldr	r4, [pc, #28]	; (80060d8 <_txe_mutex_get+0x60>)
                if (current_thread == &_tx_timer_thread)
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <_txe_mutex_get+0x64>)
 80060bc:	6824      	ldr	r4, [r4, #0]
 80060be:	4294      	cmp	r4, r2
 80060c0:	d1e4      	bne.n	800608c <_txe_mutex_get+0x14>
                status =  TX_WAIT_ERROR;
 80060c2:	2004      	movs	r0, #4
}
 80060c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c8:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 80060ca:	2013      	movs	r0, #19
    return(status);
 80060cc:	e7fa      	b.n	80060c4 <_txe_mutex_get+0x4c>
 80060ce:	bf00      	nop
 80060d0:	4d555445 	.word	0x4d555445
 80060d4:	20000178 	.word	0x20000178
 80060d8:	200007d8 	.word	0x200007d8
 80060dc:	20000880 	.word	0x20000880

080060e0 <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80060e0:	b190      	cbz	r0, 8006108 <_txe_mutex_put+0x28>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <_txe_mutex_put+0x30>)
 80060e4:	6802      	ldr	r2, [r0, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d10e      	bne.n	8006108 <_txe_mutex_put+0x28>
 80060ea:	f3ef 8305 	mrs	r3, IPSR
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060ee:	4a09      	ldr	r2, [pc, #36]	; (8006114 <_txe_mutex_put+0x34>)
 80060f0:	6811      	ldr	r1, [r2, #0]
 80060f2:	430b      	orrs	r3, r1
 80060f4:	d006      	beq.n	8006104 <_txe_mutex_put+0x24>
 80060f6:	f3ef 8105 	mrs	r1, IPSR
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80060fa:	6813      	ldr	r3, [r2, #0]
 80060fc:	430b      	orrs	r3, r1
 80060fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006102:	d303      	bcc.n	800610c <_txe_mutex_put+0x2c>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8006104:	f000 bc40 	b.w	8006988 <_tx_mutex_put>
        status =  TX_MUTEX_ERROR;
 8006108:	201c      	movs	r0, #28
 800610a:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 800610c:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 800610e:	4770      	bx	lr
 8006110:	4d555445 	.word	0x4d555445
 8006114:	20000178 	.word	0x20000178

08006118 <_txe_semaphore_create>:
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8006118:	2b20      	cmp	r3, #32
 800611a:	d100      	bne.n	800611e <_txe_semaphore_create+0x6>
 800611c:	b908      	cbnz	r0, 8006122 <_txe_semaphore_create+0xa>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800611e:	200c      	movs	r0, #12
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
    }

    /* Return completion status.  */
    return(status);
}
 8006120:	4770      	bx	lr
{
 8006122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006126:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800612a:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 800612c:	4e21      	ldr	r6, [pc, #132]	; (80061b4 <_txe_semaphore_create+0x9c>)
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	3301      	adds	r3, #1
 8006132:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006134:	f384 8810 	msr	PRIMASK, r4
        next_semaphore =  _tx_semaphore_created_ptr;
 8006138:	4c1f      	ldr	r4, [pc, #124]	; (80061b8 <_txe_semaphore_create+0xa0>)
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <_txe_semaphore_create+0xa4>)
        next_semaphore =  _tx_semaphore_created_ptr;
 800613c:	6824      	ldr	r4, [r4, #0]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800613e:	681d      	ldr	r5, [r3, #0]
            if (semaphore_ptr == next_semaphore)
 8006140:	42a0      	cmp	r0, r4
 8006142:	d00a      	beq.n	800615a <_txe_semaphore_create+0x42>
 8006144:	fab5 f385 	clz	r3, r5
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	b113      	cbz	r3, 8006152 <_txe_semaphore_create+0x3a>
 800614c:	e005      	b.n	800615a <_txe_semaphore_create+0x42>
 800614e:	42a0      	cmp	r0, r4
 8006150:	d003      	beq.n	800615a <_txe_semaphore_create+0x42>
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8006152:	3301      	adds	r3, #1
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8006154:	6964      	ldr	r4, [r4, #20]
            if (semaphore_ptr == next_semaphore)
 8006156:	42ab      	cmp	r3, r5
 8006158:	d3f9      	bcc.n	800614e <_txe_semaphore_create+0x36>
 800615a:	4615      	mov	r5, r2
 800615c:	4688      	mov	r8, r1
 800615e:	4607      	mov	r7, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006160:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006164:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	3b01      	subs	r3, #1
 800616a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800616c:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8006170:	f7ff fb82 	bl	8005878 <_tx_thread_system_preempt_check>
        if (semaphore_ptr == next_semaphore)
 8006174:	42a7      	cmp	r7, r4
 8006176:	d018      	beq.n	80061aa <_txe_semaphore_create+0x92>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006178:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <_txe_semaphore_create+0xa8>)
            if (thread_ptr == &_tx_timer_thread)
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <_txe_semaphore_create+0xac>)
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d016      	beq.n	80061b0 <_txe_semaphore_create+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006182:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006186:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <_txe_semaphore_create+0xb0>)
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	d006      	beq.n	800619c <_txe_semaphore_create+0x84>
 800618e:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4313      	orrs	r3, r2
 8006196:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800619a:	d309      	bcc.n	80061b0 <_txe_semaphore_create+0x98>
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800619c:	462a      	mov	r2, r5
 800619e:	4641      	mov	r1, r8
 80061a0:	4638      	mov	r0, r7
}
 80061a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80061a6:	f000 bcf9 	b.w	8006b9c <_tx_semaphore_create>
        status =  TX_SEMAPHORE_ERROR;
 80061aa:	200c      	movs	r0, #12
}
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                status =  TX_CALLER_ERROR;
 80061b0:	2013      	movs	r0, #19
    return(status);
 80061b2:	e7fb      	b.n	80061ac <_txe_semaphore_create+0x94>
 80061b4:	200007d4 	.word	0x200007d4
 80061b8:	20000d78 	.word	0x20000d78
 80061bc:	20000d88 	.word	0x20000d88
 80061c0:	200007d8 	.word	0x200007d8
 80061c4:	20000880 	.word	0x20000880
 80061c8:	20000178 	.word	0x20000178

080061cc <_txe_semaphore_delete>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80061cc:	b180      	cbz	r0, 80061f0 <_txe_semaphore_delete+0x24>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80061ce:	6802      	ldr	r2, [r0, #0]
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <_txe_semaphore_delete+0x2c>)
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d10c      	bne.n	80061f0 <_txe_semaphore_delete+0x24>
 80061d6:	f3ef 8305 	mrs	r3, IPSR
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80061da:	4a08      	ldr	r2, [pc, #32]	; (80061fc <_txe_semaphore_delete+0x30>)
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	4313      	orrs	r3, r2
 80061e0:	d108      	bne.n	80061f4 <_txe_semaphore_delete+0x28>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80061e2:	4a07      	ldr	r2, [pc, #28]	; (8006200 <_txe_semaphore_delete+0x34>)

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <_txe_semaphore_delete+0x38>)
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d003      	beq.n	80061f4 <_txe_semaphore_delete+0x28>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 80061ec:	f000 bd00 	b.w	8006bf0 <_tx_semaphore_delete>
        status =  TX_SEMAPHORE_ERROR;
 80061f0:	200c      	movs	r0, #12
 80061f2:	4770      	bx	lr
            status =  TX_CALLER_ERROR;
 80061f4:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 80061f6:	4770      	bx	lr
 80061f8:	53454d41 	.word	0x53454d41
 80061fc:	20000178 	.word	0x20000178
 8006200:	200007d8 	.word	0x200007d8
 8006204:	20000880 	.word	0x20000880

08006208 <_txe_semaphore_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006208:	b188      	cbz	r0, 800622e <_txe_semaphore_get+0x26>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800620a:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <_txe_semaphore_get+0x30>)
 800620c:	6802      	ldr	r2, [r0, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d10d      	bne.n	800622e <_txe_semaphore_get+0x26>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006212:	b151      	cbz	r1, 800622a <_txe_semaphore_get+0x22>
 8006214:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <_txe_semaphore_get+0x34>)
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	d108      	bne.n	8006232 <_txe_semaphore_get+0x2a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8006220:	4a07      	ldr	r2, [pc, #28]	; (8006240 <_txe_semaphore_get+0x38>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <_txe_semaphore_get+0x3c>)
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d003      	beq.n	8006232 <_txe_semaphore_get+0x2a>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800622a:	f000 bd2f 	b.w	8006c8c <_tx_semaphore_get>
        status =  TX_SEMAPHORE_ERROR;
 800622e:	200c      	movs	r0, #12
 8006230:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 8006232:	2004      	movs	r0, #4
    }

    /* Return completion status.  */
    return(status);
}
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	53454d41 	.word	0x53454d41
 800623c:	20000178 	.word	0x20000178
 8006240:	200007d8 	.word	0x200007d8
 8006244:	20000880 	.word	0x20000880

08006248 <_txe_semaphore_put>:

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006248:	b118      	cbz	r0, 8006252 <_txe_semaphore_put+0xa>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800624a:	6802      	ldr	r2, [r0, #0]
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <_txe_semaphore_put+0x14>)
 800624e:	429a      	cmp	r2, r3
 8006250:	d001      	beq.n	8006256 <_txe_semaphore_put+0xe>
        status =  _tx_semaphore_put(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8006252:	200c      	movs	r0, #12
 8006254:	4770      	bx	lr
        status =  _tx_semaphore_put(semaphore_ptr);
 8006256:	f000 bd5b 	b.w	8006d10 <_tx_semaphore_put>
 800625a:	bf00      	nop
 800625c:	53454d41 	.word	0x53454d41

08006260 <_txe_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr, VOID (*entry_function)(ULONG id),
		ULONG entry_input, VOID* stack_start, ULONG stack_size, UINT priority,
		UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	b085      	sub	sp, #20
 8006266:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 800626a:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800626e:	9401      	str	r4, [sp, #4]
 8006270:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006272:	9403      	str	r4, [sp, #12]
 8006274:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006276:	9402      	str	r4, [sp, #8]
 8006278:	9c14      	ldr	r4, [sp, #80]	; 0x50
	{
		/* Thread pointer is invalid, return appropriate error code.  */
		status = TX_THREAD_ERROR;
	}
	/* Now check for invalid thread control block size.  */
	else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800627a:	2800      	cmp	r0, #0
 800627c:	d079      	beq.n	8006372 <_txe_thread_create+0x112>
 800627e:	2cc8      	cmp	r4, #200	; 0xc8
 8006280:	d177      	bne.n	8006372 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006282:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006286:	b672      	cpsid	i
	{
		/* Disable interrupts.  */
		TX_DISABLE

		/* Increment the preempt disable flag.  */
		_tx_thread_preempt_disable++;
 8006288:	f8df e140 	ldr.w	lr, [pc, #320]	; 80063cc <_txe_thread_create+0x16c>
 800628c:	f8de 4000 	ldr.w	r4, [lr]
 8006290:	3401      	adds	r4, #1
 8006292:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006296:	f385 8810 	msr	PRIMASK, r5
		/* Restore interrupts.  */
		TX_RESTORE

		/* Next see if it is already in the created list.  */
		break_flag = TX_FALSE;
		next_thread = _tx_thread_created_ptr;
 800629a:	4c47      	ldr	r4, [pc, #284]	; (80063b8 <_txe_thread_create+0x158>)
		work_ptr = TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
		work_ptr = TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG ) 1)));
 800629c:	f108 3cff 	add.w	ip, r8, #4294967295
		stack_end = TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 80062a0:	4d46      	ldr	r5, [pc, #280]	; (80063bc <_txe_thread_create+0x15c>)
		next_thread = _tx_thread_created_ptr;
 80062a2:	6824      	ldr	r4, [r4, #0]
		work_ptr = TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG ) 1)));
 80062a4:	44bc      	add	ip, r7
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 80062a6:	f8d5 b000 	ldr.w	fp, [r5]
		{
			/* Determine if this thread matches the thread in the list.  */
			if (thread_ptr == next_thread)
 80062aa:	1b05      	subs	r5, r0, r4
 80062ac:	fab5 f585 	clz	r5, r5
 80062b0:	096d      	lsrs	r5, r5, #5
 80062b2:	f1bb 0f00 	cmp.w	fp, #0
 80062b6:	bf08      	it	eq
 80062b8:	2501      	moveq	r5, #1
				/* Set the break flag.  */
				break_flag = TX_TRUE;
			}

			/* Determine if we need to break the loop.  */
			if (break_flag == TX_TRUE)
 80062ba:	b985      	cbnz	r5, 80062de <_txe_thread_create+0x7e>
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 80062bc:	469a      	mov	sl, r3
				/* Yes, break out of the loop.  */
				break;
			}

			/* Check the stack pointer to see if it overlaps with this thread's stack.  */
			if (stack_start >= next_thread->tx_thread_stack_start)
 80062be:	68e6      	ldr	r6, [r4, #12]
 80062c0:	42be      	cmp	r6, r7
 80062c2:	d865      	bhi.n	8006390 <_txe_thread_create+0x130>
			{
				if (stack_start < next_thread->tx_thread_stack_end)
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	42bb      	cmp	r3, r7
 80062c8:	d962      	bls.n	8006390 <_txe_thread_create+0x130>
					break_flag = TX_TRUE;
				}
			}

			/* Check the end of the stack to see if it is inside this thread's stack area as well.  */
			if (stack_end >= next_thread->tx_thread_stack_start)
 80062ca:	4566      	cmp	r6, ip
 80062cc:	d803      	bhi.n	80062d6 <_txe_thread_create+0x76>
 80062ce:	2601      	movs	r6, #1
					stack_start = TX_NULL;
 80062d0:	2700      	movs	r7, #0
			{
				if (stack_end < next_thread->tx_thread_stack_end)
 80062d2:	4563      	cmp	r3, ip
 80062d4:	d951      	bls.n	800637a <_txe_thread_create+0x11a>
 80062d6:	4653      	mov	r3, sl
					break_flag = TX_TRUE;
				}
			}

			/* Move to the next thread.  */
			next_thread = next_thread->tx_thread_created_next;
 80062d8:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
					stack_start = TX_NULL;
 80062dc:	2700      	movs	r7, #0
 80062de:	4605      	mov	r5, r0
 80062e0:	469a      	mov	sl, r3
 80062e2:	4616      	mov	r6, r2
 80062e4:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80062e6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80062ea:	b672      	cpsid	i

		/* Disable interrupts.  */
		TX_DISABLE

		/* Decrement the preempt disable flag.  */
		_tx_thread_preempt_disable--;
 80062ec:	f8de 3000 	ldr.w	r3, [lr]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80062f6:	f382 8810 	msr	PRIMASK, r2

		/* Restore interrupts.  */
		TX_RESTORE

		/* Check for preemption.  */
		_tx_thread_system_preempt_check();
 80062fa:	f7ff fabd 	bl	8005878 <_tx_thread_system_preempt_check>

		/* At this point, check to see if there is a duplicate thread.  */
		if (thread_ptr == next_thread)
 80062fe:	42a5      	cmp	r5, r4
 8006300:	d037      	beq.n	8006372 <_txe_thread_create+0x112>
		{
			/* Invalid stack or entry point, return appropriate error code.  */
			status = TX_PTR_ERROR;
		}
		/* Check for invalid thread entry point.  */
		else if (entry_function == TX_NULL)
 8006302:	2e00      	cmp	r6, #0
 8006304:	d04c      	beq.n	80063a0 <_txe_thread_create+0x140>
 8006306:	2f00      	cmp	r7, #0
 8006308:	d04a      	beq.n	80063a0 <_txe_thread_create+0x140>
		{
			/* Invalid stack or entry point, return appropriate error code.  */
			status = TX_PTR_ERROR;
		}
		/* Check the stack size.  */
		else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800630a:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 800630e:	d945      	bls.n	800639c <_txe_thread_create+0x13c>
		{
			/* Stack is not big enough, return appropriate error code.  */
			status = TX_SIZE_ERROR;
		}
		/* Check the priority specified.  */
		else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8006310:	f1b9 0f1f 	cmp.w	r9, #31
 8006314:	d848      	bhi.n	80063a8 <_txe_thread_create+0x148>
		{
			/* Invalid priority selected, return appropriate error code.  */
			status = TX_PRIORITY_ERROR;
		}
		/* Check preemption threshold. */
		else if (preempt_threshold > priority)
 8006316:	9b01      	ldr	r3, [sp, #4]
 8006318:	4599      	cmp	r9, r3
 800631a:	d34b      	bcc.n	80063b4 <_txe_thread_create+0x154>
		{
			/* Invalid preempt threshold, return appropriate error code.  */
			status = TX_THRESH_ERROR;
		}
		/* Check the start selection.  */
		else if (auto_start > TX_AUTO_START)
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d844      	bhi.n	80063ac <_txe_thread_create+0x14c>
		}
		else
		{
#ifndef TX_TIMER_PROCESS_IN_ISR
			/* Pickup thread pointer.  */
			TX_THREAD_GET_CURRENT(current_thread)
 8006322:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <_txe_thread_create+0x160>)

			/* Check for invalid caller of this function.  First check for a calling thread.  */
			if (current_thread == &_tx_timer_thread)
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <_txe_thread_create+0x164>)
 8006326:	6810      	ldr	r0, [r2, #0]
	status = TX_SUCCESS;
 8006328:	4298      	cmp	r0, r3
 800632a:	bf0c      	ite	eq
 800632c:	2013      	moveq	r0, #19
 800632e:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006330:	f3ef 8205 	mrs	r2, IPSR
				status = TX_CALLER_ERROR;
			}
#endif

			/* Check for interrupt call.  */
			if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG)0))
 8006334:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <_txe_thread_create+0x168>)
 8006336:	6819      	ldr	r1, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	d006      	beq.n	800634a <_txe_thread_create+0xea>
 800633c:	f3ef 8205 	mrs	r2, IPSR
			{
				/* Now, make sure the call is from an interrupt and not initialization.  */
				if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006348:	d332      	bcc.n	80063b0 <_txe_thread_create+0x150>
			}
		}
	}

	/* Determine if everything is okay.  */
	if (status == TX_SUCCESS)
 800634a:	b998      	cbnz	r0, 8006374 <_txe_thread_create+0x114>
	{
		/* Call actual thread create function.  */
		status = _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input, stack_start,
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	4628      	mov	r0, r5
 8006350:	9a03      	ldr	r2, [sp, #12]
 8006352:	9901      	ldr	r1, [sp, #4]
 8006354:	9313      	str	r3, [sp, #76]	; 0x4c
 8006356:	4653      	mov	r3, sl
 8006358:	9212      	str	r2, [sp, #72]	; 0x48
 800635a:	4632      	mov	r2, r6
 800635c:	9111      	str	r1, [sp, #68]	; 0x44
 800635e:	4659      	mov	r1, fp
 8006360:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8006364:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
				stack_size, priority, preempt_threshold, time_slice, auto_start);
	}

	/* Return completion status.  */
	return (status);
}
 8006368:	b005      	add	sp, #20
 800636a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status = _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input, stack_start,
 800636e:	f7ff b941 	b.w	80055f4 <_tx_thread_create>
		status = TX_THREAD_ERROR;
 8006372:	200e      	movs	r0, #14
}
 8006374:	b005      	add	sp, #20
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			next_thread = next_thread->tx_thread_created_next;
 800637a:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
		for (i = ((ULONG)0); i < _tx_thread_created_count; i++)
 800637e:	3501      	adds	r5, #1
			if (break_flag == TX_TRUE)
 8006380:	42a0      	cmp	r0, r4
 8006382:	bf18      	it	ne
 8006384:	455d      	cmpne	r5, fp
 8006386:	d201      	bcs.n	800638c <_txe_thread_create+0x12c>
 8006388:	2e00      	cmp	r6, #0
 800638a:	d098      	beq.n	80062be <_txe_thread_create+0x5e>
 800638c:	4653      	mov	r3, sl
 800638e:	e7a6      	b.n	80062de <_txe_thread_create+0x7e>
			if (stack_end >= next_thread->tx_thread_stack_start)
 8006390:	4566      	cmp	r6, ip
 8006392:	f04f 0600 	mov.w	r6, #0
 8006396:	d8f0      	bhi.n	800637a <_txe_thread_create+0x11a>
 8006398:	6923      	ldr	r3, [r4, #16]
 800639a:	e79a      	b.n	80062d2 <_txe_thread_create+0x72>
			status = TX_SIZE_ERROR;
 800639c:	2005      	movs	r0, #5
 800639e:	e7e9      	b.n	8006374 <_txe_thread_create+0x114>
			status = TX_PTR_ERROR;
 80063a0:	2003      	movs	r0, #3
}
 80063a2:	b005      	add	sp, #20
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = TX_PRIORITY_ERROR;
 80063a8:	200f      	movs	r0, #15
 80063aa:	e7e3      	b.n	8006374 <_txe_thread_create+0x114>
			status = TX_START_ERROR;
 80063ac:	2010      	movs	r0, #16
 80063ae:	e7e1      	b.n	8006374 <_txe_thread_create+0x114>
					status = TX_CALLER_ERROR;
 80063b0:	2013      	movs	r0, #19
	return (status);
 80063b2:	e7df      	b.n	8006374 <_txe_thread_create+0x114>
			status = TX_THRESH_ERROR;
 80063b4:	2018      	movs	r0, #24
 80063b6:	e7dd      	b.n	8006374 <_txe_thread_create+0x114>
 80063b8:	200007c4 	.word	0x200007c4
 80063bc:	200007cc 	.word	0x200007cc
 80063c0:	200007d8 	.word	0x200007d8
 80063c4:	20000880 	.word	0x20000880
 80063c8:	20000178 	.word	0x20000178
 80063cc:	200007d4 	.word	0x200007d4

080063d0 <_txe_thread_delete>:
 80063d0:	f3ef 8205 	mrs	r2, IPSR

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80063d4:	4907      	ldr	r1, [pc, #28]	; (80063f4 <_txe_thread_delete+0x24>)
 80063d6:	6809      	ldr	r1, [r1, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	d108      	bne.n	80063ee <_txe_thread_delete+0x1e>
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 80063dc:	b118      	cbz	r0, 80063e6 <_txe_thread_delete+0x16>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80063de:	6802      	ldr	r2, [r0, #0]
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <_txe_thread_delete+0x28>)
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d001      	beq.n	80063ea <_txe_thread_delete+0x1a>
        status =  TX_THREAD_ERROR;
 80063e6:	200e      	movs	r0, #14
        status =  _tx_thread_delete(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 80063e8:	4770      	bx	lr
        status =  _tx_thread_delete(thread_ptr);
 80063ea:	f000 bcc3 	b.w	8006d74 <_tx_thread_delete>
        status =  TX_CALLER_ERROR;
 80063ee:	2013      	movs	r0, #19
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000178 	.word	0x20000178
 80063f8:	54485244 	.word	0x54485244

080063fc <_txe_thread_info_get>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80063fc:	b150      	cbz	r0, 8006414 <_txe_thread_info_get+0x18>
{
 80063fe:	b430      	push	{r4, r5}
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8006400:	6805      	ldr	r5, [r0, #0]
 8006402:	4c05      	ldr	r4, [pc, #20]	; (8006418 <_txe_thread_info_get+0x1c>)
 8006404:	42a5      	cmp	r5, r4
 8006406:	d002      	beq.n	800640e <_txe_thread_info_get+0x12>
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
}
 8006408:	200e      	movs	r0, #14
 800640a:	bc30      	pop	{r4, r5}
 800640c:	4770      	bx	lr
 800640e:	bc30      	pop	{r4, r5}
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold, 
 8006410:	f000 bcde 	b.w	8006dd0 <_tx_thread_info_get>
}
 8006414:	200e      	movs	r0, #14
 8006416:	4770      	bx	lr
 8006418:	54485244 	.word	0x54485244

0800641c <_txe_thread_suspend>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800641c:	b118      	cbz	r0, 8006426 <_txe_thread_suspend+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800641e:	6802      	ldr	r2, [r0, #0]
 8006420:	4b03      	ldr	r3, [pc, #12]	; (8006430 <_txe_thread_suspend+0x14>)
 8006422:	429a      	cmp	r2, r3
 8006424:	d001      	beq.n	800642a <_txe_thread_suspend+0xe>
        status =  _tx_thread_suspend(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8006426:	200e      	movs	r0, #14
 8006428:	4770      	bx	lr
        status =  _tx_thread_suspend(thread_ptr);
 800642a:	f000 bd03 	b.w	8006e34 <_tx_thread_suspend>
 800642e:	bf00      	nop
 8006430:	54485244 	.word	0x54485244

08006434 <_txe_thread_terminate>:

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8006434:	b158      	cbz	r0, 800644e <_txe_thread_terminate+0x1a>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8006436:	6802      	ldr	r2, [r0, #0]
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <_txe_thread_terminate+0x24>)
 800643a:	429a      	cmp	r2, r3
 800643c:	d107      	bne.n	800644e <_txe_thread_terminate+0x1a>
 800643e:	f3ef 8305 	mrs	r3, IPSR
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006442:	4a06      	ldr	r2, [pc, #24]	; (800645c <_txe_thread_terminate+0x28>)
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	d103      	bne.n	8006452 <_txe_thread_terminate+0x1e>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 800644a:	f000 bd2f 	b.w	8006eac <_tx_thread_terminate>
        status =  TX_THREAD_ERROR;
 800644e:	200e      	movs	r0, #14
 8006450:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 8006452:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	54485244 	.word	0x54485244
 800645c:	20000178 	.word	0x20000178

08006460 <_tx_event_flags_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	460c      	mov	r4, r1
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8006464:	2228      	movs	r2, #40	; 0x28
 8006466:	2100      	movs	r1, #0
 8006468:	f000 ff24 	bl	80072b4 <memset>
 800646c:	4603      	mov	r3, r0

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800646e:	6044      	str	r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006470:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006474:	b672      	cpsid	i
    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8006476:	490b      	ldr	r1, [pc, #44]	; (80064a4 <_tx_event_flags_create+0x44>)
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8006478:	480b      	ldr	r0, [pc, #44]	; (80064a8 <_tx_event_flags_create+0x48>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 800647a:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800647c:	6018      	str	r0, [r3, #0]
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800647e:	480b      	ldr	r0, [pc, #44]	; (80064ac <_tx_event_flags_create+0x4c>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 8006480:	b15a      	cbz	r2, 800649a <_tx_event_flags_create+0x3a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8006482:	6800      	ldr	r0, [r0, #0]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8006484:	69c5      	ldr	r5, [r0, #28]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8006486:	61c3      	str	r3, [r0, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8006488:	61ab      	str	r3, [r5, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800648a:	e9c3 0506 	strd	r0, r5, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800648e:	3201      	adds	r2, #1
 8006490:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006492:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006496:	2000      	movs	r0, #0
 8006498:	bd38      	pop	{r3, r4, r5, pc}
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800649a:	e9c3 3306 	strd	r3, r3, [r3, #24]
        _tx_event_flags_created_ptr =                         group_ptr;
 800649e:	6003      	str	r3, [r0, #0]
 80064a0:	e7f5      	b.n	800648e <_tx_event_flags_create+0x2e>
 80064a2:	bf00      	nop
 80064a4:	20000d8c 	.word	0x20000d8c
 80064a8:	4456444e 	.word	0x4456444e
 80064ac:	20000d68 	.word	0x20000d68

080064b0 <_tx_event_flags_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80064b6:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80064ba:	b672      	cpsid	i

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 80064bc:	4920      	ldr	r1, [pc, #128]	; (8006540 <_tx_event_flags_delete+0x90>)
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 80064be:	2000      	movs	r0, #0
    _tx_event_flags_created_count--;
 80064c0:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 80064c2:	6018      	str	r0, [r3, #0]
    _tx_event_flags_created_count--;
 80064c4:	3a01      	subs	r2, #1
 80064c6:	600a      	str	r2, [r1, #0]
    
    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d12e      	bne.n	800652a <_tx_event_flags_delete+0x7a>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 80064cc:	491d      	ldr	r1, [pc, #116]	; (8006544 <_tx_event_flags_delete+0x94>)
 80064ce:	600a      	str	r2, [r1, #0]
            _tx_event_flags_created_ptr =  next_group;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80064d0:	4d1d      	ldr	r5, [pc, #116]	; (8006548 <_tx_event_flags_delete+0x98>)

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80064d2:	2700      	movs	r7, #0
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 80064d4:	6918      	ldr	r0, [r3, #16]
    _tx_thread_preempt_disable++;
 80064d6:	682a      	ldr	r2, [r5, #0]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 80064d8:	695c      	ldr	r4, [r3, #20]
    _tx_thread_preempt_disable++;
 80064da:	3201      	adds	r2, #1
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80064dc:	611f      	str	r7, [r3, #16]
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 80064de:	615f      	str	r7, [r3, #20]
    _tx_thread_preempt_disable++;
 80064e0:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80064e2:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads 
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80064e6:	b19c      	cbz	r4, 8006510 <_tx_event_flags_delete+0x60>
        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80064e8:	f04f 0801 	mov.w	r8, #1
        suspended_count--;
 80064ec:	3c01      	subs	r4, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80064ee:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80064f2:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80064f4:	682b      	ldr	r3, [r5, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80064f6:	6687      	str	r7, [r0, #104]	; 0x68
        _tx_thread_preempt_disable++;
 80064f8:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80064fa:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80064fe:	6f06      	ldr	r6, [r0, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006500:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006502:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006506:	f7ff f9d5 	bl	80058b4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800650a:	4630      	mov	r0, r6
    while (suspended_count != TX_NO_SUSPENSIONS)
 800650c:	2c00      	cmp	r4, #0
 800650e:	d1ed      	bne.n	80064ec <_tx_event_flags_delete+0x3c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006510:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006514:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	3b01      	subs	r3, #1
 800651a:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800651c:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006520:	f7ff f9aa 	bl	8005878 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006524:	2000      	movs	r0, #0
 8006526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_event_flags_created_ptr == group_ptr)
 800652a:	4806      	ldr	r0, [pc, #24]	; (8006544 <_tx_event_flags_delete+0x94>)
 800652c:	6804      	ldr	r4, [r0, #0]
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 800652e:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
        if (_tx_event_flags_created_ptr == group_ptr)
 8006532:	429c      	cmp	r4, r3
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 8006534:	61d1      	str	r1, [r2, #28]
            _tx_event_flags_created_ptr =  next_group;
 8006536:	bf08      	it	eq
 8006538:	6002      	streq	r2, [r0, #0]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 800653a:	618a      	str	r2, [r1, #24]
 800653c:	e7c8      	b.n	80064d0 <_tx_event_flags_delete+0x20>
 800653e:	bf00      	nop
 8006540:	20000d8c 	.word	0x20000d8c
 8006544:	20000d68 	.word	0x20000d68
 8006548:	200007d4 	.word	0x200007d4

0800654c <_tx_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800654e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006552:	b672      	cpsid	i
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8006554:	6a06      	ldr	r6, [r0, #32]
    and_request =  (get_option & TX_AND);
 8006556:	f002 0702 	and.w	r7, r2, #2
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800655a:	6884      	ldr	r4, [r0, #8]

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800655c:	b10e      	cbz	r6, 8006562 <_tx_event_flags_get+0x16>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800655e:	ea24 0406 	bic.w	r4, r4, r6
 8006562:	ea04 0601 	and.w	r6, r4, r1
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8006566:	2f00      	cmp	r7, #0
 8006568:	d03c      	beq.n	80065e4 <_tx_event_flags_get+0x98>
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800656a:	42b1      	cmp	r1, r6
 800656c:	d03a      	beq.n	80065e4 <_tx_event_flags_get+0x98>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800656e:	9c06      	ldr	r4, [sp, #24]
 8006570:	2c00      	cmp	r4, #0
 8006572:	d04a      	beq.n	800660a <_tx_event_flags_get+0xbe>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8006574:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8006628 <_tx_event_flags_get+0xdc>
 8006578:	f8dc 4000 	ldr.w	r4, [ip]
 800657c:	2c00      	cmp	r4, #0
 800657e:	d144      	bne.n	800660a <_tx_event_flags_get+0xbe>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8006580:	4c28      	ldr	r4, [pc, #160]	; (8006624 <_tx_event_flags_get+0xd8>)
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8006582:	6946      	ldr	r6, [r0, #20]
                TX_THREAD_GET_CURRENT(thread_ptr)
 8006584:	6824      	ldr	r4, [r4, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8006586:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 800662c <_tx_event_flags_get+0xe0>
                thread_ptr -> tx_thread_suspension_sequence++;
 800658a:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800658e:	67a1      	str	r1, [r4, #120]	; 0x78
                thread_ptr -> tx_thread_suspension_sequence++;
 8006590:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8006592:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8006596:	e9c4 e01a 	strd	lr, r0, [r4, #104]	; 0x68
                thread_ptr -> tx_thread_suspension_sequence++;
 800659a:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800659e:	2e00      	cmp	r6, #0
 80065a0:	d038      	beq.n	8006614 <_tx_event_flags_get+0xc8>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 80065a2:	6903      	ldr	r3, [r0, #16]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80065a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80065a6:	e9c4 321c 	strd	r3, r2, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80065aa:	6714      	str	r4, [r2, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80065ac:	675c      	str	r4, [r3, #116]	; 0x74

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80065ae:	f8dc 3000 	ldr.w	r3, [ip]
                group_ptr -> tx_event_flags_group_suspended_count++;
 80065b2:	3601      	adds	r6, #1
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 80065b4:	2107      	movs	r1, #7
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80065b6:	2201      	movs	r2, #1
                group_ptr -> tx_event_flags_group_suspended_count++;
 80065b8:	6146      	str	r6, [r0, #20]
                _tx_thread_preempt_disable++;
 80065ba:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80065bc:	9806      	ldr	r0, [sp, #24]
                _tx_thread_preempt_disable++;
 80065be:	f8cc 3000 	str.w	r3, [ip]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80065c2:	64e0      	str	r0, [r4, #76]	; 0x4c
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 80065c4:	6321      	str	r1, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80065c6:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065c8:	f385 8810 	msr	PRIMASK, r5

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7ff f9f7 	bl	80059c0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80065d2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80065d6:	b672      	cpsid	i
    
                /* Disable interrupts.  */
                TX_DISABLE
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80065d8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065dc:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 80065e0:	4610      	mov	r0, r2
 80065e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (flags_satisfied != ((ULONG) 0))
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	d0c2      	beq.n	800656e <_tx_event_flags_get+0x22>
        if (clear_request == TX_TRUE)
 80065e8:	f012 0201 	ands.w	r2, r2, #1
        *actual_flags_ptr =  current_flags;
 80065ec:	601c      	str	r4, [r3, #0]
        if (clear_request == TX_TRUE)
 80065ee:	d00d      	beq.n	800660c <_tx_event_flags_get+0xc0>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80065f0:	6943      	ldr	r3, [r0, #20]
 80065f2:	b10b      	cbz	r3, 80065f8 <_tx_event_flags_get+0xac>
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80065f4:	6902      	ldr	r2, [r0, #16]
 80065f6:	b18a      	cbz	r2, 800661c <_tx_event_flags_get+0xd0>
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80065f8:	6883      	ldr	r3, [r0, #8]
        status =  TX_SUCCESS;
 80065fa:	2200      	movs	r2, #0
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80065fc:	ea23 0101 	bic.w	r1, r3, r1
                group_ptr -> tx_event_flags_group_current =
 8006600:	6081      	str	r1, [r0, #8]
 8006602:	f385 8810 	msr	PRIMASK, r5
}
 8006606:	4610      	mov	r0, r2
 8006608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                status =  TX_NO_EVENTS;
 800660a:	2207      	movs	r2, #7
 800660c:	f385 8810 	msr	PRIMASK, r5
}
 8006610:	4610      	mov	r0, r2
 8006612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8006614:	6104      	str	r4, [r0, #16]
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8006616:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 800661a:	e7c8      	b.n	80065ae <_tx_event_flags_get+0x62>
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800661c:	6a03      	ldr	r3, [r0, #32]
 800661e:	4319      	orrs	r1, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 8006620:	6201      	str	r1, [r0, #32]
 8006622:	e7f3      	b.n	800660c <_tx_event_flags_get+0xc0>
 8006624:	200007d8 	.word	0x200007d8
 8006628:	200007d4 	.word	0x200007d4
 800662c:	08007001 	.word	0x08007001

08006630 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_high_level(VOID)
{
 8006630:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the event log, if enabled.  */
	TX_EL_INITIALIZE

	/* Call the thread control initialization function.  */
	_tx_thread_initialize();
 8006632:	f7ff f87f 	bl	8005734 <_tx_thread_initialize>
#ifndef TX_DISABLE_REDUNDANT_CLEARING
	/* Call the semaphore initialization function.  */
	_tx_semaphore_initialize();

	/* Call the queue initialization function.  */
	_tx_queue_initialize();
 8006636:	4d0e      	ldr	r5, [pc, #56]	; (8006670 <_tx_initialize_high_level+0x40>)
	_tx_timer_initialize();
 8006638:	f7ff faa6 	bl	8005b88 <_tx_timer_initialize>
	_tx_semaphore_initialize();
 800663c:	2300      	movs	r3, #0
 800663e:	490d      	ldr	r1, [pc, #52]	; (8006674 <_tx_initialize_high_level+0x44>)
 8006640:	4a0d      	ldr	r2, [pc, #52]	; (8006678 <_tx_initialize_high_level+0x48>)
 8006642:	600b      	str	r3, [r1, #0]
 8006644:	6013      	str	r3, [r2, #0]
	_tx_queue_initialize();
 8006646:	4c0d      	ldr	r4, [pc, #52]	; (800667c <_tx_initialize_high_level+0x4c>)

	/* Call the event flag initialization function.  */
	_tx_event_flags_initialize();
 8006648:	480d      	ldr	r0, [pc, #52]	; (8006680 <_tx_initialize_high_level+0x50>)
 800664a:	490e      	ldr	r1, [pc, #56]	; (8006684 <_tx_initialize_high_level+0x54>)

	/* Call the block pool initialization function.  */
	_tx_block_pool_initialize();
 800664c:	4a0e      	ldr	r2, [pc, #56]	; (8006688 <_tx_initialize_high_level+0x58>)
	_tx_queue_initialize();
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	6023      	str	r3, [r4, #0]
	_tx_event_flags_initialize();
 8006652:	6003      	str	r3, [r0, #0]
 8006654:	600b      	str	r3, [r1, #0]
	_tx_block_pool_initialize();
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4d0c      	ldr	r5, [pc, #48]	; (800668c <_tx_initialize_high_level+0x5c>)

	/* Call the byte pool initialization function.  */
	_tx_byte_pool_initialize();
 800665a:	4c0d      	ldr	r4, [pc, #52]	; (8006690 <_tx_initialize_high_level+0x60>)
 800665c:	480d      	ldr	r0, [pc, #52]	; (8006694 <_tx_initialize_high_level+0x64>)

	/* Call the mutex initialization function.  */
	_tx_mutex_initialize();
 800665e:	490e      	ldr	r1, [pc, #56]	; (8006698 <_tx_initialize_high_level+0x68>)
 8006660:	4a0e      	ldr	r2, [pc, #56]	; (800669c <_tx_initialize_high_level+0x6c>)
	_tx_block_pool_initialize();
 8006662:	602b      	str	r3, [r5, #0]
	_tx_byte_pool_initialize();
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	6003      	str	r3, [r0, #0]
	_tx_mutex_initialize();
 8006668:	600b      	str	r3, [r1, #0]
 800666a:	6013      	str	r3, [r2, #0]
#endif
}
 800666c:	bd38      	pop	{r3, r4, r5, pc}
 800666e:	bf00      	nop
 8006670:	20000d94 	.word	0x20000d94
 8006674:	20000d78 	.word	0x20000d78
 8006678:	20000d88 	.word	0x20000d88
 800667c:	20000d74 	.word	0x20000d74
 8006680:	20000d68 	.word	0x20000d68
 8006684:	20000d8c 	.word	0x20000d8c
 8006688:	20000d90 	.word	0x20000d90
 800668c:	20000d84 	.word	0x20000d84
 8006690:	20000d7c 	.word	0x20000d7c
 8006694:	20000d98 	.word	0x20000d98
 8006698:	20000d70 	.word	0x20000d70
 800669c:	20000d6c 	.word	0x20000d6c

080066a0 <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	460d      	mov	r5, r1
 80066a4:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80066a6:	2100      	movs	r1, #0
 80066a8:	2234      	movs	r2, #52	; 0x34
 80066aa:	f000 fe03 	bl	80072b4 <memset>
 80066ae:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80066b0:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80066b2:	6104      	str	r4, [r0, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80066b4:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80066b8:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80066ba:	490c      	ldr	r1, [pc, #48]	; (80066ec <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80066bc:	480c      	ldr	r0, [pc, #48]	; (80066f0 <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80066be:	4e0d      	ldr	r6, [pc, #52]	; (80066f4 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 80066c0:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80066c2:	4d0d      	ldr	r5, [pc, #52]	; (80066f8 <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80066c4:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80066c6:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80066c8:	480c      	ldr	r0, [pc, #48]	; (80066fc <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 80066ca:	b15a      	cbz	r2, 80066e4 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80066cc:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80066ce:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80066d0:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80066d2:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80066d4:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80066d8:	3201      	adds	r2, #1
 80066da:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80066dc:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 80066e0:	2000      	movs	r0, #0
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80066e4:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	e7f5      	b.n	80066d8 <_tx_mutex_create+0x38>
 80066ec:	20000d6c 	.word	0x20000d6c
 80066f0:	200007bc 	.word	0x200007bc
 80066f4:	4d555445 	.word	0x4d555445
 80066f8:	08007105 	.word	0x08007105
 80066fc:	20000d70 	.word	0x20000d70

08006700 <_tx_mutex_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006704:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006708:	b672      	cpsid	i

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800670a:	4927      	ldr	r1, [pc, #156]	; (80067a8 <_tx_mutex_delete+0xa8>)
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800670c:	2400      	movs	r4, #0
    _tx_mutex_created_count--;
 800670e:	680b      	ldr	r3, [r1, #0]
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8006710:	6004      	str	r4, [r0, #0]
    _tx_mutex_created_count--;
 8006712:	3b01      	subs	r3, #1
 8006714:	600b      	str	r3, [r1, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8006716:	2b00      	cmp	r3, #0
 8006718:	d13c      	bne.n	8006794 <_tx_mutex_delete+0x94>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800671a:	4924      	ldr	r1, [pc, #144]	; (80067ac <_tx_mutex_delete+0xac>)
 800671c:	600b      	str	r3, [r1, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800671e:	4e24      	ldr	r6, [pc, #144]	; (80067b0 <_tx_mutex_delete+0xb0>)

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8006720:	2700      	movs	r7, #0

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8006722:	68c1      	ldr	r1, [r0, #12]
    _tx_thread_preempt_disable++;
 8006724:	6833      	ldr	r3, [r6, #0]
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8006726:	6984      	ldr	r4, [r0, #24]
    _tx_thread_preempt_disable++;
 8006728:	3301      	adds	r3, #1
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800672a:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800672c:	6187      	str	r7, [r0, #24]
    _tx_thread_preempt_disable++;
 800672e:	6033      	str	r3, [r6, #0]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8006730:	61c7      	str	r7, [r0, #28]
    if (owner_thread != TX_NULL)
 8006732:	b141      	cbz	r1, 8006746 <_tx_mutex_delete+0x46>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8006734:	2301      	movs	r3, #1
 8006736:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006738:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800673c:	f000 f924 	bl	8006988 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006740:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006744:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006746:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800674a:	b1b5      	cbz	r5, 800677a <_tx_mutex_delete+0x7a>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800674c:	f04f 0800 	mov.w	r8, #0

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006750:	2701      	movs	r7, #1
        suspended_count--;
 8006752:	3d01      	subs	r5, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006754:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006758:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800675a:	6833      	ldr	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800675c:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8006760:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006762:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8006766:	6f22      	ldr	r2, [r4, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006768:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800676a:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800676e:	4620      	mov	r0, r4
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8006770:	4614      	mov	r4, r2
        _tx_thread_system_resume(thread_ptr);
 8006772:	f7ff f89f 	bl	80058b4 <_tx_thread_system_resume>
    while (suspended_count != ((ULONG) 0))
 8006776:	2d00      	cmp	r5, #0
 8006778:	d1eb      	bne.n	8006752 <_tx_mutex_delete+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800677a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800677e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8006780:	6833      	ldr	r3, [r6, #0]
 8006782:	3b01      	subs	r3, #1
 8006784:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006786:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800678a:	f7ff f875 	bl	8005878 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800678e:	2000      	movs	r0, #0
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_mutex_created_ptr == mutex_ptr)
 8006794:	4c05      	ldr	r4, [pc, #20]	; (80067ac <_tx_mutex_delete+0xac>)
 8006796:	6825      	ldr	r5, [r4, #0]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8006798:	e9d0 3108 	ldrd	r3, r1, [r0, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 800679c:	4285      	cmp	r5, r0
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800679e:	6259      	str	r1, [r3, #36]	; 0x24
            _tx_mutex_created_ptr =  next_mutex;
 80067a0:	bf08      	it	eq
 80067a2:	6023      	streq	r3, [r4, #0]
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80067a4:	620b      	str	r3, [r1, #32]
 80067a6:	e7ba      	b.n	800671e <_tx_mutex_delete+0x1e>
 80067a8:	20000d6c 	.word	0x20000d6c
 80067ac:	20000d70 	.word	0x20000d70
 80067b0:	200007d4 	.word	0x200007d4

080067b4 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80067b6:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80067ba:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80067bc:	4a3b      	ldr	r2, [pc, #236]	; (80068ac <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80067be:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 80067c0:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80067c2:	b9e3      	cbnz	r3, 80067fe <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80067c4:	2301      	movs	r3, #1
 80067c6:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80067ca:	b1a4      	cbz	r4, 80067f6 <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80067cc:	6903      	ldr	r3, [r0, #16]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d103      	bne.n	80067da <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80067d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80067d4:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80067d6:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80067d8:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80067da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d044      	beq.n	800686c <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80067e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80067e4:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80067e6:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80067e8:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80067ec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80067f0:	3301      	adds	r3, #1
 80067f2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80067f6:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80067fa:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 80067fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80067fe:	68c2      	ldr	r2, [r0, #12]
 8006800:	42a2      	cmp	r2, r4
 8006802:	d029      	beq.n	8006858 <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 8006804:	b371      	cbz	r1, 8006864 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8006806:	4e2a      	ldr	r6, [pc, #168]	; (80068b0 <_tx_mutex_get+0xfc>)
 8006808:	6833      	ldr	r3, [r6, #0]
 800680a:	bb5b      	cbnz	r3, 8006864 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 800680c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8006810:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80068b4 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 8006814:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8006816:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8006818:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 800681a:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800681e:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8006822:	bb43      	cbnz	r3, 8006876 <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8006824:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8006826:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 800682a:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 800682c:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800682e:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 8006832:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 8006834:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006836:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006838:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 800683a:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800683c:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006840:	63a3      	str	r3, [r4, #56]	; 0x38
 8006842:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006846:	6903      	ldr	r3, [r0, #16]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d01d      	beq.n	8006888 <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 800684c:	4620      	mov	r0, r4
 800684e:	f7ff f8b7 	bl	80059c0 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 8006852:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8006856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 8006858:	3301      	adds	r3, #1
 800685a:	6083      	str	r3, [r0, #8]
 800685c:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 8006860:	2000      	movs	r0, #0
 8006862:	e7cb      	b.n	80067fc <_tx_mutex_get+0x48>
 8006864:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 8006868:	201d      	movs	r0, #29
}
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800686c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8006870:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 8006874:	e7ba      	b.n	80067ec <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8006876:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006878:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800687c:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006880:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006884:	677c      	str	r4, [r7, #116]	; 0x74
 8006886:	e7d0      	b.n	800682a <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8006888:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800688a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800688c:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800688e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8006892:	bf88      	it	hi
 8006894:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8006896:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8006898:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800689a:	bf38      	it	cc
 800689c:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80068a0:	4299      	cmp	r1, r3
 80068a2:	d2d3      	bcs.n	800684c <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80068a4:	4610      	mov	r0, r2
 80068a6:	f000 f807 	bl	80068b8 <_tx_mutex_priority_change>
 80068aa:	e7cf      	b.n	800684c <_tx_mutex_get+0x98>
 80068ac:	200007d8 	.word	0x200007d8
 80068b0:	200007d4 	.word	0x200007d4
 80068b4:	08007085 	.word	0x08007085

080068b8 <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80068b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80068be:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80068c2:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 80068c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80068c6:	b152      	cbz	r2, 80068de <_tx_mutex_priority_change+0x26>
 80068c8:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80068cc:	62c1      	str	r1, [r0, #44]	; 0x2c
 80068ce:	428a      	cmp	r2, r1
 80068d0:	bf28      	it	cs
 80068d2:	460a      	movcs	r2, r1
 80068d4:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80068d6:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80068da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068de:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80068e0:	4925      	ldr	r1, [pc, #148]	; (8006978 <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80068e2:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 80068e6:	4f25      	ldr	r7, [pc, #148]	; (800697c <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80068e8:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80068ea:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80068ee:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80068f0:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80068f2:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80068f6:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80068fa:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 80068fc:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 8006900:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 8006904:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 8006908:	f7ff f85a 	bl	80059c0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800690c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006910:	b672      	cpsid	i
 8006912:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 8006916:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006918:	42ab      	cmp	r3, r5
 800691a:	bf28      	it	cs
 800691c:	462b      	movcs	r3, r5
 800691e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006920:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8006924:	4620      	mov	r0, r4
 8006926:	f7fe ffc5 	bl	80058b4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800692a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800692e:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 8006930:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 8006932:	429c      	cmp	r4, r3
 8006934:	d007      	beq.n	8006946 <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 8006936:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006938:	b92a      	cbnz	r2, 8006946 <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800693e:	4293      	cmp	r3, r2
 8006940:	d805      	bhi.n	800694e <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 8006942:	4544      	cmp	r4, r8
 8006944:	d010      	beq.n	8006968 <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006946:	f381 8810 	msr	PRIMASK, r1
}
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800694e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006950:	4283      	cmp	r3, r0
 8006952:	d9f8      	bls.n	8006946 <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8006954:	4282      	cmp	r2, r0
 8006956:	d207      	bcs.n	8006968 <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8006958:	4809      	ldr	r0, [pc, #36]	; (8006980 <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 800695a:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800695e:	6803      	ldr	r3, [r0, #0]
 8006960:	ea43 030a 	orr.w	r3, r3, sl
 8006964:	6003      	str	r3, [r0, #0]
 8006966:	e7ee      	b.n	8006946 <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 8006968:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 800696a:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 800696c:	d2eb      	bcs.n	8006946 <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800696e:	4a05      	ldr	r2, [pc, #20]	; (8006984 <_tx_mutex_priority_change+0xcc>)
 8006970:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8006974:	e7e7      	b.n	8006946 <_tx_mutex_priority_change+0x8e>
 8006976:	bf00      	nop
 8006978:	200007d4 	.word	0x200007d4
 800697c:	200007dc 	.word	0x200007dc
 8006980:	200007e4 	.word	0x200007e4
 8006984:	2000073c 	.word	0x2000073c

08006988 <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8006988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800698c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006990:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8006992:	6882      	ldr	r2, [r0, #8]
 8006994:	2a00      	cmp	r2, #0
 8006996:	d056      	beq.n	8006a46 <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8006998:	497e      	ldr	r1, [pc, #504]	; (8006b94 <_tx_mutex_put+0x20c>)
 800699a:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800699c:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800699e:	6809      	ldr	r1, [r1, #0]
 80069a0:	428b      	cmp	r3, r1
 80069a2:	d003      	beq.n	80069ac <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80069a4:	4e7c      	ldr	r6, [pc, #496]	; (8006b98 <_tx_mutex_put+0x210>)
 80069a6:	6831      	ldr	r1, [r6, #0]
 80069a8:	2900      	cmp	r1, #0
 80069aa:	d04c      	beq.n	8006a46 <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 80069ac:	3a01      	subs	r2, #1
 80069ae:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	d143      	bne.n	8006a3c <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d041      	beq.n	8006a3c <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80069b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80069bc:	3a01      	subs	r2, #1
 80069be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d144      	bne.n	8006a50 <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80069c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80069ca:	6987      	ldr	r7, [r0, #24]
 80069cc:	6902      	ldr	r2, [r0, #16]
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	f000 8082 	beq.w	8006ad8 <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80069d4:	2a01      	cmp	r2, #1
 80069d6:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 80069d8:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80069dc:	f000 8084 	beq.w	8006ae8 <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80069e0:	69c3      	ldr	r3, [r0, #28]
 80069e2:	4e6d      	ldr	r6, [pc, #436]	; (8006b98 <_tx_mutex_put+0x210>)
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d95d      	bls.n	8006aa4 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80069e8:	2f00      	cmp	r7, #0
 80069ea:	f000 8097 	beq.w	8006b1c <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 80069ee:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 80069f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	d167      	bne.n	8006ac8 <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80069f8:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80069fc:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8006a00:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8006a02:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8006a04:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8006a06:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 8006a0a:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8006a0c:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d153      	bne.n	8006abc <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8006a14:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006a16:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a18:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 8006a1a:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a1c:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006a1e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8006a22:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a24:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006a28:	692b      	ldr	r3, [r5, #16]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	f000 8097 	beq.w	8006b5e <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7fe ff3f 	bl	80058b4 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8006a36:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 8006a40:	2000      	movs	r0, #0
}
 8006a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a46:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 8006a4a:	201e      	movs	r0, #30
}
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8006a50:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8006a54:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8006a58:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8006a5a:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8006a5c:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8006a5e:	d1b4      	bne.n	80069ca <_tx_mutex_put+0x42>
 8006a60:	e7b1      	b.n	80069c6 <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006a62:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a64:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a68:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8006a6a:	6832      	ldr	r2, [r6, #0]
 8006a6c:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8006a6e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006a72:	69eb      	ldr	r3, [r5, #28]
 8006a74:	bf28      	it	cs
 8006a76:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 8006a78:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006a7a:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 8006a7c:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8006a7e:	d969      	bls.n	8006b54 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006a80:	692a      	ldr	r2, [r5, #16]
 8006a82:	2a01      	cmp	r2, #1
 8006a84:	d176      	bne.n	8006b74 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 8006a86:	6833      	ldr	r3, [r6, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a8c:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 fb59 	bl	8007148 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a96:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a9a:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 8006a9c:	6833      	ldr	r3, [r6, #0]
 8006a9e:	69af      	ldr	r7, [r5, #24]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8006aa4:	2f00      	cmp	r7, #0
 8006aa6:	d039      	beq.n	8006b1c <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8006aa8:	692b      	ldr	r3, [r5, #16]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d154      	bne.n	8006b58 <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8006aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006ab0:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8006ab2:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006ab4:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8006ab6:	616a      	str	r2, [r5, #20]
 8006ab8:	69eb      	ldr	r3, [r5, #28]
 8006aba:	e799      	b.n	80069f0 <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8006abc:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8006ac0:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8006ac2:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8006ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac6:	e7a6      	b.n	8006a16 <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8006ac8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8006acc:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8006ace:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8006ad0:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8006ad2:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 8006ad6:	e793      	b.n	8006a00 <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	f47f af7b 	bne.w	80069d4 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8006ade:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ae0:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	e7ac      	b.n	8006a42 <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 8006ae8:	4e2b      	ldr	r6, [pc, #172]	; (8006b98 <_tx_mutex_put+0x210>)
 8006aea:	6832      	ldr	r2, [r6, #0]
 8006aec:	3201      	adds	r2, #1
 8006aee:	6032      	str	r2, [r6, #0]
 8006af0:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8006af4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 8006af8:	2900      	cmp	r1, #0
 8006afa:	d0b2      	beq.n	8006a62 <_tx_mutex_put+0xda>
 8006afc:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006afe:	2420      	movs	r4, #32
 8006b00:	e001      	b.n	8006b06 <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d0ae      	beq.n	8006a64 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8006b06:	6910      	ldr	r0, [r2, #16]
 8006b08:	2801      	cmp	r0, #1
 8006b0a:	d103      	bne.n	8006b14 <_tx_mutex_put+0x18c>
 8006b0c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8006b0e:	4284      	cmp	r4, r0
 8006b10:	bf28      	it	cs
 8006b12:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8006b14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8006b16:	4291      	cmp	r1, r2
 8006b18:	d1f3      	bne.n	8006b02 <_tx_mutex_put+0x17a>
 8006b1a:	e7a3      	b.n	8006a64 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 8006b1c:	6833      	ldr	r3, [r6, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8006b26:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006b28:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8006b2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8006b2c:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8006b2e:	4543      	cmp	r3, r8
 8006b30:	d002      	beq.n	8006b38 <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8006b32:	4641      	mov	r1, r8
 8006b34:	f7ff fec0 	bl	80068b8 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b38:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b3c:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8006b3e:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8006b40:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 8006b42:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8006b44:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 8006b46:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b48:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 8006b4c:	f7fe fe94 	bl	8005878 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 8006b50:	4620      	mov	r0, r4
 8006b52:	e776      	b.n	8006a42 <_tx_mutex_put+0xba>
 8006b54:	69af      	ldr	r7, [r5, #24]
 8006b56:	e7a5      	b.n	8006aa4 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 8006b58:	2400      	movs	r4, #0
 8006b5a:	69eb      	ldr	r3, [r5, #28]
 8006b5c:	e748      	b.n	80069f0 <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8006b5e:	69eb      	ldr	r3, [r5, #28]
 8006b60:	b953      	cbnz	r3, 8006b78 <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 8006b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b64:	4543      	cmp	r3, r8
 8006b66:	f43f af63 	beq.w	8006a30 <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff fea3 	bl	80068b8 <_tx_mutex_priority_change>
 8006b72:	e75d      	b.n	8006a30 <_tx_mutex_put+0xa8>
 8006b74:	69af      	ldr	r7, [r5, #24]
 8006b76:	e737      	b.n	80069e8 <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 fae5 	bl	8007148 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b7e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b82:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8006b84:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 8006b86:	b10b      	cbz	r3, 8006b8c <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b8c:	f382 8810 	msr	PRIMASK, r2
 8006b90:	e7e7      	b.n	8006b62 <_tx_mutex_put+0x1da>
 8006b92:	bf00      	nop
 8006b94:	200007d8 	.word	0x200007d8
 8006b98:	200007d4 	.word	0x200007d4

08006b9c <_tx_semaphore_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	4614      	mov	r4, r2
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f000 fb85 	bl	80072b4 <memset>
 8006baa:	4603      	mov	r3, r0

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8006bac:	e9c0 5401 	strd	r5, r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006bb0:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006bb4:	b672      	cpsid	i
    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006bb6:	490b      	ldr	r1, [pc, #44]	; (8006be4 <_tx_semaphore_create+0x48>)
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8006bb8:	480b      	ldr	r0, [pc, #44]	; (8006be8 <_tx_semaphore_create+0x4c>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006bba:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8006bbc:	6018      	str	r0, [r3, #0]
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8006bbe:	480b      	ldr	r0, [pc, #44]	; (8006bec <_tx_semaphore_create+0x50>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006bc0:	b15a      	cbz	r2, 8006bda <_tx_semaphore_create+0x3e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8006bc2:	6800      	ldr	r0, [r0, #0]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8006bc4:	6985      	ldr	r5, [r0, #24]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8006bc6:	6183      	str	r3, [r0, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8006bc8:	616b      	str	r3, [r5, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8006bca:	e9c3 0505 	strd	r0, r5, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8006bce:	3201      	adds	r2, #1
 8006bd0:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006bd2:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8006bda:	e9c3 3305 	strd	r3, r3, [r3, #20]
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8006bde:	6003      	str	r3, [r0, #0]
 8006be0:	e7f5      	b.n	8006bce <_tx_semaphore_create+0x32>
 8006be2:	bf00      	nop
 8006be4:	20000d88 	.word	0x20000d88
 8006be8:	53454d41 	.word	0x53454d41
 8006bec:	20000d78 	.word	0x20000d78

08006bf0 <_tx_semaphore_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8006bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf4:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006bf6:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006bfa:	b672      	cpsid	i

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8006bfc:	4920      	ldr	r1, [pc, #128]	; (8006c80 <_tx_semaphore_delete+0x90>)
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8006bfe:	2000      	movs	r0, #0
    _tx_semaphore_created_count--;
 8006c00:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8006c02:	6018      	str	r0, [r3, #0]
    _tx_semaphore_created_count--;
 8006c04:	3a01      	subs	r2, #1
 8006c06:	600a      	str	r2, [r1, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	d12e      	bne.n	8006c6a <_tx_semaphore_delete+0x7a>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8006c0c:	491d      	ldr	r1, [pc, #116]	; (8006c84 <_tx_semaphore_delete+0x94>)
 8006c0e:	600a      	str	r2, [r1, #0]
            _tx_semaphore_created_ptr =  next_semaphore;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006c10:	4d1d      	ldr	r5, [pc, #116]	; (8006c88 <_tx_semaphore_delete+0x98>)

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006c12:	2700      	movs	r7, #0
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8006c14:	68d8      	ldr	r0, [r3, #12]
    _tx_thread_preempt_disable++;
 8006c16:	682a      	ldr	r2, [r5, #0]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8006c18:	691c      	ldr	r4, [r3, #16]
    _tx_thread_preempt_disable++;
 8006c1a:	3201      	adds	r2, #1
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006c1c:	60df      	str	r7, [r3, #12]
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8006c1e:	611f      	str	r7, [r3, #16]
    _tx_thread_preempt_disable++;
 8006c20:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c22:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8006c26:	b19c      	cbz	r4, 8006c50 <_tx_semaphore_delete+0x60>
        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006c28:	f04f 0801 	mov.w	r8, #1
        suspended_count--;
 8006c2c:	3c01      	subs	r4, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c2e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c32:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8006c34:	682b      	ldr	r3, [r5, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006c36:	6687      	str	r7, [r0, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8006c38:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006c3a:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8006c3e:	6f06      	ldr	r6, [r0, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006c40:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c42:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006c46:	f7fe fe35 	bl	80058b4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8006c4a:	4630      	mov	r0, r6
    while (suspended_count != TX_NO_SUSPENSIONS)
 8006c4c:	2c00      	cmp	r4, #0
 8006c4e:	d1ed      	bne.n	8006c2c <_tx_semaphore_delete+0x3c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c50:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c54:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c5c:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006c60:	f7fe fe0a 	bl	8005878 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8006c64:	2000      	movs	r0, #0
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8006c6a:	4806      	ldr	r0, [pc, #24]	; (8006c84 <_tx_semaphore_delete+0x94>)
 8006c6c:	6804      	ldr	r4, [r0, #0]
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8006c6e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8006c72:	429c      	cmp	r4, r3
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8006c74:	6191      	str	r1, [r2, #24]
            _tx_semaphore_created_ptr =  next_semaphore;
 8006c76:	bf08      	it	eq
 8006c78:	6002      	streq	r2, [r0, #0]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8006c7a:	614a      	str	r2, [r1, #20]
 8006c7c:	e7c8      	b.n	8006c10 <_tx_semaphore_delete+0x20>
 8006c7e:	bf00      	nop
 8006c80:	20000d88 	.word	0x20000d88
 8006c84:	20000d78 	.word	0x20000d78
 8006c88:	200007d4 	.word	0x200007d4

08006c8c <_tx_semaphore_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c8e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c92:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8006c94:	6883      	ldr	r3, [r0, #8]
 8006c96:	bb5b      	cbnz	r3, 8006cf0 <_tx_semaphore_get+0x64>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8006c98:	b331      	cbz	r1, 8006ce8 <_tx_semaphore_get+0x5c>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006c9a:	4d1a      	ldr	r5, [pc, #104]	; (8006d04 <_tx_semaphore_get+0x78>)
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	bb1b      	cbnz	r3, 8006ce8 <_tx_semaphore_get+0x5c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <_tx_semaphore_get+0x7c>)

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8006ca2:	4f1a      	ldr	r7, [pc, #104]	; (8006d0c <_tx_semaphore_get+0x80>)
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006ca4:	681c      	ldr	r4, [r3, #0]
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8006ca6:	6903      	ldr	r3, [r0, #16]
            thread_ptr -> tx_thread_suspension_sequence++;
 8006ca8:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8006cac:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 8006cae:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8006cb0:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspension_sequence++;
 8006cb2:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8006cb6:	b30b      	cbz	r3, 8006cfc <_tx_semaphore_get+0x70>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8006cb8:	68c6      	ldr	r6, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006cba:	6f77      	ldr	r7, [r6, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006cbc:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006cc0:	673c      	str	r4, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006cc2:	6774      	str	r4, [r6, #116]	; 0x74

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006cc4:	682e      	ldr	r6, [r5, #0]
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8006cc6:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8006cc8:	2706      	movs	r7, #6
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8006cca:	6103      	str	r3, [r0, #16]
            _tx_thread_preempt_disable++;
 8006ccc:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006cce:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006cd0:	64e1      	str	r1, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 8006cd2:	602e      	str	r6, [r5, #0]
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8006cd4:	6327      	str	r7, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006cd6:	63a3      	str	r3, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006cd8:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7fe fe6f 	bl	80059c0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006ce2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status =  TX_NO_INSTANCE;
    }

    /* Return completion status.  */
    return(status);
}
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	f382 8810 	msr	PRIMASK, r2
        status =  TX_NO_INSTANCE;
 8006cec:	200d      	movs	r0, #13
}
 8006cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        semaphore_ptr -> tx_semaphore_count--;
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	6083      	str	r3, [r0, #8]
 8006cf4:	f382 8810 	msr	PRIMASK, r2
    status =  TX_SUCCESS;
 8006cf8:	2000      	movs	r0, #0
}
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8006cfc:	60c4      	str	r4, [r0, #12]
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8006cfe:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8006d02:	e7df      	b.n	8006cc4 <_tx_semaphore_get+0x38>
 8006d04:	200007d4 	.word	0x200007d4
 8006d08:	200007d8 	.word	0x200007d8
 8006d0c:	080071ed 	.word	0x080071ed

08006d10 <_tx_semaphore_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d14:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d18:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8006d1a:	6903      	ldr	r3, [r0, #16]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8006d1c:	b94b      	cbnz	r3, 8006d32 <_tx_semaphore_put+0x22>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8006d1e:	6883      	ldr	r3, [r0, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8006d20:	69c1      	ldr	r1, [r0, #28]
        semaphore_ptr -> tx_semaphore_count++;
 8006d22:	3301      	adds	r3, #1
 8006d24:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d26:	f382 8810 	msr	PRIMASK, r2
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8006d2a:	b101      	cbz	r1, 8006d2e <_tx_semaphore_put+0x1e>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8006d2c:	4788      	blx	r1
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
}
 8006d2e:	2000      	movs	r0, #0
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006d32:	3b01      	subs	r3, #1
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8006d34:	68c0      	ldr	r0, [r0, #12]
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006d36:	d018      	beq.n	8006d6a <_tx_semaphore_put+0x5a>
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006d38:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8006d3c:	60e1      	str	r1, [r4, #12]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006d3e:	674d      	str	r5, [r1, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006d40:	6729      	str	r1, [r5, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8006d42:	490b      	ldr	r1, [pc, #44]	; (8006d70 <_tx_semaphore_put+0x60>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006d44:	2500      	movs	r5, #0
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8006d46:	6123      	str	r3, [r4, #16]
        _tx_thread_preempt_disable++;
 8006d48:	680b      	ldr	r3, [r1, #0]
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8006d4a:	69e6      	ldr	r6, [r4, #28]
        _tx_thread_preempt_disable++;
 8006d4c:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006d4e:	6685      	str	r5, [r0, #104]	; 0x68
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006d50:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
        _tx_thread_preempt_disable++;
 8006d54:	600b      	str	r3, [r1, #0]
 8006d56:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8006d5a:	f7fe fdab 	bl	80058b4 <_tx_thread_system_resume>
        if (semaphore_put_notify != TX_NULL)
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	d0e5      	beq.n	8006d2e <_tx_semaphore_put+0x1e>
            (semaphore_put_notify)(semaphore_ptr);
 8006d62:	4620      	mov	r0, r4
 8006d64:	47b0      	blx	r6
}
 8006d66:	2000      	movs	r0, #0
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006d6a:	60e3      	str	r3, [r4, #12]
 8006d6c:	e7e9      	b.n	8006d42 <_tx_semaphore_put+0x32>
 8006d6e:	bf00      	nop
 8006d70:	200007d4 	.word	0x200007d4

08006d74 <_tx_thread_delete>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d74:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d78:	b672      	cpsid	i
    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006d7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d81e      	bhi.n	8006dc0 <_tx_thread_delete+0x4c>

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8006d82:	4a11      	ldr	r2, [pc, #68]	; (8006dc8 <_tx_thread_delete+0x54>)
 8006d84:	6813      	ldr	r3, [r2, #0]
{
 8006d86:	b430      	push	{r4, r5}
        _tx_thread_created_count--;
 8006d88:	3b01      	subs	r3, #1
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	6004      	str	r4, [r0, #0]
        _tx_thread_created_count--;
 8006d8e:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8006d90:	b17b      	cbz	r3, 8006db2 <_tx_thread_delete+0x3e>
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
            next_thread -> tx_thread_created_previous =  previous_thread;
            previous_thread -> tx_thread_created_next =  next_thread;

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8006d92:	4c0e      	ldr	r4, [pc, #56]	; (8006dcc <_tx_thread_delete+0x58>)
 8006d94:	6825      	ldr	r5, [r4, #0]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8006d96:	e9d0 3222 	ldrd	r3, r2, [r0, #136]	; 0x88
            if (_tx_thread_created_ptr == thread_ptr)
 8006d9a:	4285      	cmp	r5, r0
            next_thread -> tx_thread_created_previous =  previous_thread;
 8006d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8006da0:	bf08      	it	eq
 8006da2:	6023      	streq	r3, [r4, #0]
            previous_thread -> tx_thread_created_next =  next_thread;
 8006da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006da8:	f381 8810 	msr	PRIMASK, r1
 8006dac:	2000      	movs	r0, #0
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
}
 8006dae:	bc30      	pop	{r4, r5}
 8006db0:	4770      	bx	lr
            _tx_thread_created_ptr =  TX_NULL;
 8006db2:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <_tx_thread_delete+0x58>)
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	f381 8810 	msr	PRIMASK, r1
 8006dba:	2000      	movs	r0, #0
}
 8006dbc:	bc30      	pop	{r4, r5}
 8006dbe:	4770      	bx	lr
 8006dc0:	f381 8810 	msr	PRIMASK, r1
            status =  TX_DELETE_ERROR;
 8006dc4:	2011      	movs	r0, #17
}
 8006dc6:	4770      	bx	lr
 8006dc8:	200007cc 	.word	0x200007cc
 8006dcc:	200007c4 	.word	0x200007c4

08006dd0 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8006dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd4:	469c      	mov	ip, r3
 8006dd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dd8:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 8006ddc:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006de0:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006de4:	b672      	cpsid	i

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8006de6:	b109      	cbz	r1, 8006dec <_tx_thread_info_get+0x1c>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 8006de8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006dea:	600b      	str	r3, [r1, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8006dec:	b10a      	cbz	r2, 8006df2 <_tx_thread_info_get+0x22>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 8006dee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006df0:	6011      	str	r1, [r2, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8006df2:	f1bc 0f00 	cmp.w	ip, #0
 8006df6:	d002      	beq.n	8006dfe <_tx_thread_info_get+0x2e>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 8006df8:	6842      	ldr	r2, [r0, #4]
 8006dfa:	f8cc 2000 	str.w	r2, [ip]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8006dfe:	f1b8 0f00 	cmp.w	r8, #0
 8006e02:	d003      	beq.n	8006e0c <_tx_thread_info_get+0x3c>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 8006e04:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8006e08:	f8c8 2000 	str.w	r2, [r8]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8006e0c:	b117      	cbz	r7, 8006e14 <_tx_thread_info_get+0x44>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8006e0e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8006e12:	603b      	str	r3, [r7, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8006e14:	b10e      	cbz	r6, 8006e1a <_tx_thread_info_get+0x4a>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8006e16:	6983      	ldr	r3, [r0, #24]
 8006e18:	6033      	str	r3, [r6, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8006e1a:	b115      	cbz	r5, 8006e22 <_tx_thread_info_get+0x52>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 8006e1c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006e20:	602b      	str	r3, [r5, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8006e22:	b10c      	cbz	r4, 8006e28 <_tx_thread_info_get+0x58>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8006e24:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006e26:	6023      	str	r3, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e28:	f38e 8810 	msr	PRIMASK, lr
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e32:	bf00      	nop

08006e34 <_tx_thread_suspend>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8006e34:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006e36:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006e3a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8006e3c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006e3e:	b9cc      	cbnz	r4, 8006e74 <_tx_thread_suspend+0x40>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006e40:	f3ef 8205 	mrs	r2, IPSR

        /* Initialize status to success.  */
        status =  TX_SUCCESS;

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == 0)
 8006e44:	4916      	ldr	r1, [pc, #88]	; (8006ea0 <_tx_thread_suspend+0x6c>)
 8006e46:	6809      	ldr	r1, [r1, #0]
        {
        
            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	d121      	bne.n	8006e90 <_tx_thread_suspend+0x5c>
    TX_THREAD_GET_CURRENT(current_thread)
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <_tx_thread_suspend+0x70>)
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8006e4e:	4916      	ldr	r1, [pc, #88]	; (8006ea8 <_tx_thread_suspend+0x74>)
            if (current_thread == thread_ptr)
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	4282      	cmp	r2, r0
 8006e54:	d01e      	beq.n	8006e94 <_tx_thread_suspend+0x60>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006e56:	680a      	ldr	r2, [r1, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006e58:	2501      	movs	r5, #1
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8006e5a:	2603      	movs	r6, #3
            _tx_thread_preempt_disable++;
 8006e5c:	442a      	add	r2, r5
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006e5e:	6385      	str	r5, [r0, #56]	; 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006e60:	2500      	movs	r5, #0
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8006e62:	6306      	str	r6, [r0, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8006e64:	600a      	str	r2, [r1, #0]
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006e66:	64c5      	str	r5, [r0, #76]	; 0x4c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e68:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006e6c:	f7fe fda8 	bl	80059c0 <_tx_thread_system_suspend>
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8006e70:	4620      	mov	r0, r4
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8006e74:	1e62      	subs	r2, r4, #1
 8006e76:	2a01      	cmp	r2, #1
 8006e78:	d804      	bhi.n	8006e84 <_tx_thread_suspend+0x50>
                    status =  TX_SUSPEND_ERROR;
 8006e7a:	2414      	movs	r4, #20
 8006e7c:	f383 8810 	msr	PRIMASK, r3
}
 8006e80:	4620      	mov	r0, r4
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8006e84:	2c03      	cmp	r4, #3
 8006e86:	d009      	beq.n	8006e9c <_tx_thread_suspend+0x68>
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8006e88:	2201      	movs	r2, #1
        status =  TX_SUCCESS;
 8006e8a:	2400      	movs	r4, #0
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8006e8c:	6342      	str	r2, [r0, #52]	; 0x34
 8006e8e:	e7f5      	b.n	8006e7c <_tx_thread_suspend+0x48>
 8006e90:	4905      	ldr	r1, [pc, #20]	; (8006ea8 <_tx_thread_suspend+0x74>)
 8006e92:	e7e0      	b.n	8006e56 <_tx_thread_suspend+0x22>
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8006e94:	680a      	ldr	r2, [r1, #0]
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d1ef      	bne.n	8006e7a <_tx_thread_suspend+0x46>
 8006e9a:	e7dc      	b.n	8006e56 <_tx_thread_suspend+0x22>
        status =  TX_SUCCESS;
 8006e9c:	2400      	movs	r4, #0
 8006e9e:	e7ed      	b.n	8006e7c <_tx_thread_suspend+0x48>
 8006ea0:	20000178 	.word	0x20000178
 8006ea4:	200007d8 	.word	0x200007d8
 8006ea8:	200007d4 	.word	0x200007d4

08006eac <_tx_thread_terminate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006eb0:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006eb4:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 8006eb6:	304c      	adds	r0, #76	; 0x4c
 8006eb8:	f7fe ff06 	bl	8005cc8 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8006ebc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d02e      	beq.n	8006f20 <_tx_thread_terminate+0x74>
        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d02c      	beq.n	8006f20 <_tx_thread_terminate+0x74>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8006ec6:	4d27      	ldr	r5, [pc, #156]	; (8006f64 <_tx_thread_terminate+0xb8>)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8006ec8:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
        _tx_thread_preempt_disable++;
 8006ecc:	682a      	ldr	r2, [r5, #0]
 8006ece:	3201      	adds	r2, #1
 8006ed0:	602a      	str	r2, [r5, #0]
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006ed2:	bb5b      	cbnz	r3, 8006f2c <_tx_thread_terminate+0x80>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 8006ed4:	682a      	ldr	r2, [r5, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006ed6:	2101      	movs	r1, #1
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 8006ed8:	2002      	movs	r0, #2
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006eda:	64e3      	str	r3, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 8006edc:	440a      	add	r2, r1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006ede:	63a1      	str	r1, [r4, #56]	; 0x38
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 8006ee0:	6320      	str	r0, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8006ee2:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ee4:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 8006ee8:	b10f      	cbz	r7, 8006eee <_tx_thread_terminate+0x42>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8006eea:	4620      	mov	r0, r4
 8006eec:	47b8      	blx	r7
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7fe fd66 	bl	80059c0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ef4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ef8:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006efa:	f383 8810 	msr	PRIMASK, r3
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <_tx_thread_terminate+0xbc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	b10b      	cbz	r3, 8006f08 <_tx_thread_terminate+0x5c>
        {

            /* Yes, call the mutex release function via a function pointer that 
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 8006f04:	4620      	mov	r0, r4
 8006f06:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f08:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f0c:	b672      	cpsid	i
        /* Disable interrupts.  */
        TX_DISABLE
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f14:	f382 8810 	msr	PRIMASK, r2
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006f18:	f7fe fcae 	bl	8005878 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
}
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f20:	f386 8810 	msr	PRIMASK, r6
    _tx_thread_system_preempt_check();
 8006f24:	f7fe fca8 	bl	8005878 <_tx_thread_system_preempt_check>
}
 8006f28:	2000      	movs	r0, #0
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 8006f2c:	2102      	movs	r1, #2
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006f2e:	2201      	movs	r2, #1
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006f30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 8006f32:	6321      	str	r1, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006f34:	63a2      	str	r2, [r4, #56]	; 0x38
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006f36:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8006f3a:	f386 8810 	msr	PRIMASK, r6
            if (suspend_cleanup != TX_NULL)
 8006f3e:	b10b      	cbz	r3, 8006f44 <_tx_thread_terminate+0x98>
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006f40:	4620      	mov	r0, r4
 8006f42:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f48:	b672      	cpsid	i
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f4e:	f383 8810 	msr	PRIMASK, r3
            if (entry_exit_notify != TX_NULL)
 8006f52:	b117      	cbz	r7, 8006f5a <_tx_thread_terminate+0xae>
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8006f54:	2101      	movs	r1, #1
 8006f56:	4620      	mov	r0, r4
 8006f58:	47b8      	blx	r7
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f5a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f5e:	b672      	cpsid	i
 8006f60:	e7cb      	b.n	8006efa <_tx_thread_terminate+0x4e>
 8006f62:	bf00      	nop
 8006f64:	200007d4 	.word	0x200007d4
 8006f68:	200007bc 	.word	0x200007bc

08006f6c <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006f6c:	4b16      	ldr	r3, [pc, #88]	; (8006fc8 <_tx_thread_time_slice+0x5c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f70:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f74:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006f76:	4915      	ldr	r1, [pc, #84]	; (8006fcc <_tx_thread_time_slice+0x60>)
 8006f78:	2000      	movs	r0, #0
 8006f7a:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8006f7c:	b193      	cbz	r3, 8006fa4 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f80:	b981      	cbnz	r1, 8006fa4 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006f82:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006f84:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006f86:	4298      	cmp	r0, r3
{
 8006f88:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006f8a:	4c11      	ldr	r4, [pc, #68]	; (8006fd0 <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006f8c:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006f8e:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006f90:	d003      	beq.n	8006f9a <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006f92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d007      	beq.n	8006faa <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f9a:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8006f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	f382 8810 	msr	PRIMASK, r2
 8006fa8:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006faa:	4c0a      	ldr	r4, [pc, #40]	; (8006fd4 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006fac:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006fae:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006fb0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006fb4:	4909      	ldr	r1, [pc, #36]	; (8006fdc <_tx_thread_time_slice+0x70>)
 8006fb6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fba:	600b      	str	r3, [r1, #0]
 8006fbc:	f382 8810 	msr	PRIMASK, r2
}
 8006fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	200007d8 	.word	0x200007d8
 8006fcc:	20000d60 	.word	0x20000d60
 8006fd0:	20000870 	.word	0x20000870
 8006fd4:	200007e0 	.word	0x200007e0
 8006fd8:	2000073c 	.word	0x2000073c
 8006fdc:	200007dc 	.word	0x200007dc

08006fe0 <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006fe0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006fe4:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8006fe6:	4a04      	ldr	r2, [pc, #16]	; (8006ff8 <_tx_timer_expiration_process+0x18>)
 8006fe8:	6813      	ldr	r3, [r2, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006fee:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8006ff2:	4802      	ldr	r0, [pc, #8]	; (8006ffc <_tx_timer_expiration_process+0x1c>)
 8006ff4:	f7fe bc5e 	b.w	80058b4 <_tx_thread_system_resume>
 8006ff8:	200007d4 	.word	0x200007d4
 8006ffc:	20000880 	.word	0x20000880

08007000 <_tx_event_flags_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007000:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007006:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8007008:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <_tx_event_flags_cleanup+0x78>)
 800700a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800700c:	4294      	cmp	r4, r2
 800700e:	d002      	beq.n	8007016 <_tx_event_flags_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007010:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007014:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007016:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800701a:	428a      	cmp	r2, r1
 800701c:	d1f8      	bne.n	8007010 <_tx_event_flags_cleanup+0x10>
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800701e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (group_ptr != TX_NULL)
 8007020:	2a00      	cmp	r2, #0
 8007022:	d0f5      	beq.n	8007010 <_tx_event_flags_cleanup+0x10>
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8007024:	4915      	ldr	r1, [pc, #84]	; (800707c <_tx_event_flags_cleanup+0x7c>)
 8007026:	6814      	ldr	r4, [r2, #0]
 8007028:	428c      	cmp	r4, r1
 800702a:	d1f1      	bne.n	8007010 <_tx_event_flags_cleanup+0x10>
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800702c:	6951      	ldr	r1, [r2, #20]
 800702e:	2900      	cmp	r1, #0
 8007030:	d0ee      	beq.n	8007010 <_tx_event_flags_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007032:	2500      	movs	r5, #0
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8007034:	6914      	ldr	r4, [r2, #16]
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007036:	6685      	str	r5, [r0, #104]	; 0x68
                        if (suspension_head != TX_NULL)
 8007038:	b1dc      	cbz	r4, 8007072 <_tx_event_flags_cleanup+0x72>
                            suspended_count--;
 800703a:	3901      	subs	r1, #1
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800703c:	6151      	str	r1, [r2, #20]
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800703e:	b1b1      	cbz	r1, 800706e <_tx_event_flags_cleanup+0x6e>
                                if (suspension_head == thread_ptr)
 8007040:	42a0      	cmp	r0, r4
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8007042:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8007046:	674d      	str	r5, [r1, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8007048:	6729      	str	r1, [r5, #112]	; 0x70
                                if (suspension_head == thread_ptr)
 800704a:	d010      	beq.n	800706e <_tx_event_flags_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800704c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800704e:	2a07      	cmp	r2, #7
 8007050:	d1de      	bne.n	8007010 <_tx_event_flags_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8007052:	490b      	ldr	r1, [pc, #44]	; (8007080 <_tx_event_flags_cleanup+0x80>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8007054:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8007058:	680a      	ldr	r2, [r1, #0]
 800705a:	3201      	adds	r2, #1
 800705c:	600a      	str	r2, [r1, #0]
 800705e:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8007062:	f7fe fc27 	bl	80058b4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007066:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800706a:	b672      	cpsid	i
 800706c:	e7d0      	b.n	8007010 <_tx_event_flags_cleanup+0x10>
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800706e:	6111      	str	r1, [r2, #16]
 8007070:	e7ec      	b.n	800704c <_tx_event_flags_cleanup+0x4c>
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8007072:	2101      	movs	r1, #1
 8007074:	60d1      	str	r1, [r2, #12]
 8007076:	e7e9      	b.n	800704c <_tx_event_flags_cleanup+0x4c>
 8007078:	08007001 	.word	0x08007001
 800707c:	4456444e 	.word	0x4456444e
 8007080:	200007d4 	.word	0x200007d4

08007084 <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007084:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007086:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800708a:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <_tx_mutex_cleanup+0x74>)
 800708e:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8007090:	4294      	cmp	r4, r2
 8007092:	d002      	beq.n	800709a <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007094:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007098:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800709a:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800709e:	428a      	cmp	r2, r1
 80070a0:	d1f8      	bne.n	8007094 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80070a2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 80070a4:	2a00      	cmp	r2, #0
 80070a6:	d0f5      	beq.n	8007094 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80070a8:	4914      	ldr	r1, [pc, #80]	; (80070fc <_tx_mutex_cleanup+0x78>)
 80070aa:	6814      	ldr	r4, [r2, #0]
 80070ac:	428c      	cmp	r4, r1
 80070ae:	d1f1      	bne.n	8007094 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80070b0:	69d1      	ldr	r1, [r2, #28]
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d0ee      	beq.n	8007094 <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 80070b6:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80070b8:	2400      	movs	r4, #0
 80070ba:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 80070bc:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80070be:	b1c1      	cbz	r1, 80070f2 <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80070c0:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80070c2:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80070c6:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80070c8:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80070ca:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80070cc:	d011      	beq.n	80070f2 <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80070ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80070d0:	2a0d      	cmp	r2, #13
 80070d2:	d1df      	bne.n	8007094 <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 80070d4:	490a      	ldr	r1, [pc, #40]	; (8007100 <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80070d6:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 80070d8:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80070da:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 80070de:	3201      	adds	r2, #1
 80070e0:	600a      	str	r2, [r1, #0]
 80070e2:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 80070e6:	f7fe fbe5 	bl	80058b4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80070ea:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80070ee:	b672      	cpsid	i
 80070f0:	e7d0      	b.n	8007094 <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80070f2:	6191      	str	r1, [r2, #24]
 80070f4:	e7eb      	b.n	80070ce <_tx_mutex_cleanup+0x4a>
 80070f6:	bf00      	nop
 80070f8:	08007085 	.word	0x08007085
 80070fc:	4d555445 	.word	0x4d555445
 8007100:	200007d4 	.word	0x200007d4

08007104 <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007108:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800710c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800710e:	4d0d      	ldr	r5, [pc, #52]	; (8007144 <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007110:	2601      	movs	r6, #1
 8007112:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 8007116:	682a      	ldr	r2, [r5, #0]
 8007118:	4432      	add	r2, r6
 800711a:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 800711c:	b158      	cbz	r0, 8007136 <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800711e:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007120:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8007124:	f7ff fc30 	bl	8006988 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007128:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800712c:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800712e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 8007132:	2800      	cmp	r0, #0
 8007134:	d1f2      	bne.n	800711c <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8007136:	682a      	ldr	r2, [r5, #0]
 8007138:	3a01      	subs	r2, #1
 800713a:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800713c:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	bf00      	nop
 8007144:	200007d4 	.word	0x200007d4

08007148 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800714a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800714e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007150:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8007152:	2f01      	cmp	r7, #1
 8007154:	d92a      	bls.n	80071ac <_tx_mutex_prioritize+0x64>
 8007156:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8007158:	2f02      	cmp	r7, #2
 800715a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800715c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800715e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8007160:	d021      	beq.n	80071a6 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8007162:	f8df c084 	ldr.w	ip, [pc, #132]	; 80071e8 <_tx_mutex_prioritize+0xa0>
 8007166:	4616      	mov	r6, r2
 8007168:	f8dc e000 	ldr.w	lr, [ip]
 800716c:	f10e 0e01 	add.w	lr, lr, #1
 8007170:	f8cc e000 	str.w	lr, [ip]
 8007174:	e007      	b.n	8007186 <_tx_mutex_prioritize+0x3e>
 8007176:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8007178:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800717a:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 800717c:	428b      	cmp	r3, r1
 800717e:	461e      	mov	r6, r3
 8007180:	d018      	beq.n	80071b4 <_tx_mutex_prioritize+0x6c>
 8007182:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8007184:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007186:	42ab      	cmp	r3, r5
 8007188:	bf88      	it	hi
 800718a:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800718c:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007190:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007194:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8007196:	6983      	ldr	r3, [r0, #24]
 8007198:	42b3      	cmp	r3, r6
 800719a:	d1ec      	bne.n	8007176 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800719c:	69c5      	ldr	r5, [r0, #28]
 800719e:	42bd      	cmp	r5, r7
 80071a0:	d020      	beq.n	80071e4 <_tx_mutex_prioritize+0x9c>
 80071a2:	462f      	mov	r7, r5
 80071a4:	e7e8      	b.n	8007178 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80071a6:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80071a8:	bf38      	it	cc
 80071aa:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80071ac:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 80071b4:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 80071b8:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 80071ba:	f101 31ff 	add.w	r1, r1, #4294967295
 80071be:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 80071c2:	d009      	beq.n	80071d8 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80071c4:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80071c8:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80071ca:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80071cc:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80071ce:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80071d2:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80071d4:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80071d6:	6182      	str	r2, [r0, #24]
 80071d8:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 80071dc:	f7fe fb4c 	bl	8005878 <_tx_thread_system_preempt_check>
}
 80071e0:	2000      	movs	r0, #0
 80071e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80071e4:	6f09      	ldr	r1, [r1, #112]	; 0x70
 80071e6:	e7c9      	b.n	800717c <_tx_mutex_prioritize+0x34>
 80071e8:	200007d4 	.word	0x200007d4

080071ec <_tx_semaphore_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80071ec:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80071ee:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80071f2:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80071f4:	4a1a      	ldr	r2, [pc, #104]	; (8007260 <_tx_semaphore_cleanup+0x74>)
 80071f6:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80071f8:	4294      	cmp	r4, r2
 80071fa:	d002      	beq.n	8007202 <_tx_semaphore_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80071fc:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007200:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007202:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8007206:	428a      	cmp	r2, r1
 8007208:	d1f8      	bne.n	80071fc <_tx_semaphore_cleanup+0x10>
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800720a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (semaphore_ptr != TX_NULL)
 800720c:	2a00      	cmp	r2, #0
 800720e:	d0f5      	beq.n	80071fc <_tx_semaphore_cleanup+0x10>
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8007210:	4914      	ldr	r1, [pc, #80]	; (8007264 <_tx_semaphore_cleanup+0x78>)
 8007212:	6814      	ldr	r4, [r2, #0]
 8007214:	428c      	cmp	r4, r1
 8007216:	d1f1      	bne.n	80071fc <_tx_semaphore_cleanup+0x10>
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8007218:	6911      	ldr	r1, [r2, #16]
 800721a:	2900      	cmp	r1, #0
 800721c:	d0ee      	beq.n	80071fc <_tx_semaphore_cleanup+0x10>
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800721e:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007220:	2400      	movs	r4, #0
 8007222:	6684      	str	r4, [r0, #104]	; 0x68
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8007224:	6111      	str	r1, [r2, #16]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007226:	b1c1      	cbz	r1, 800725a <_tx_semaphore_cleanup+0x6e>
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8007228:	68d5      	ldr	r5, [r2, #12]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800722a:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800722e:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007230:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007232:	6721      	str	r1, [r4, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8007234:	d011      	beq.n	800725a <_tx_semaphore_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8007236:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007238:	2a06      	cmp	r2, #6
 800723a:	d1df      	bne.n	80071fc <_tx_semaphore_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800723c:	490a      	ldr	r1, [pc, #40]	; (8007268 <_tx_semaphore_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800723e:	240d      	movs	r4, #13
                            _tx_thread_preempt_disable++;
 8007240:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8007242:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8007246:	3201      	adds	r2, #1
 8007248:	600a      	str	r2, [r1, #0]
 800724a:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800724e:	f7fe fb31 	bl	80058b4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007252:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007256:	b672      	cpsid	i
 8007258:	e7d0      	b.n	80071fc <_tx_semaphore_cleanup+0x10>
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800725a:	60d1      	str	r1, [r2, #12]
 800725c:	e7eb      	b.n	8007236 <_tx_semaphore_cleanup+0x4a>
 800725e:	bf00      	nop
 8007260:	080071ed 	.word	0x080071ed
 8007264:	53454d41 	.word	0x53454d41
 8007268:	200007d4 	.word	0x200007d4

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0d      	ldr	r6, [pc, #52]	; (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	; (80072a8 <__libc_init_array+0x3c>)
 8007272:	1ba4      	subs	r4, r4, r6
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2500      	movs	r5, #0
 8007278:	42a5      	cmp	r5, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4e0b      	ldr	r6, [pc, #44]	; (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	; (80072b0 <__libc_init_array+0x44>)
 8007280:	f000 f820 	bl	80072c4 <_init>
 8007284:	1ba4      	subs	r4, r4, r6
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2500      	movs	r5, #0
 800728a:	42a5      	cmp	r5, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007294:	4798      	blx	r3
 8007296:	3501      	adds	r5, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800729e:	4798      	blx	r3
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	0800741c 	.word	0x0800741c
 80072a8:	0800741c 	.word	0x0800741c
 80072ac:	0800741c 	.word	0x0800741c
 80072b0:	08007420 	.word	0x08007420

080072b4 <memset>:
 80072b4:	4402      	add	r2, r0
 80072b6:	4603      	mov	r3, r0
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d100      	bne.n	80072be <memset+0xa>
 80072bc:	4770      	bx	lr
 80072be:	f803 1b01 	strb.w	r1, [r3], #1
 80072c2:	e7f9      	b.n	80072b8 <memset+0x4>

080072c4 <_init>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr

080072d0 <_fini>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr
