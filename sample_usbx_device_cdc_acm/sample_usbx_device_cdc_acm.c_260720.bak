/**************************************************************************/
/**                                                                       */
/** USBX Device CDC/ACM Example for STM32F746-DISCO Board                 */
/**                                                                       */
/** This example illustrates USBX working on a STM32F7xx processor        */
/**                                                                       */
/** This demo will show the device side of USBX. It will make the device  */
/** appear as a serial device based on CDC ACM on a host.                 */
/**                                                                       */
/** This code assumes the interrupt handler for the USB (device)          */
/** is calling the proper handlers in USBX.                               */
/**                                                                       */
/**************************************************************************/

/* Include necessary system files. */
#include "ux_api.h"
#include "ux_system.h"
#include "ux_utility.h"
#include "ux_dcd_stm32.h"
#include "ux_device_class_cdc_acm.h"
#include "ux_device_stack.h"

#include "stm32f7xx.h"
#include "stm32f7xx_hal.h"

void hardware_setup(void);

/* Define local constants. */
#define UX_DEMO_DEBUG_SIZE                  (4096 * 8)
#define UX_DEMO_STACK_SIZE                  4096
#define UX_DEMO_BUFFER_SIZE                 512
#define UX_USBX_MEMORY_SIZE                 (32 * 1024)

/* Define local function prototypes */
void demo_thread_entry(ULONG arg);
void demo_cdc_instance_activate(   void* cdc_instance);
void demo_cdc_instance_deactivate( void* cdc_instance);
void demo_cdc_acm_parameter_change(void* cdc_instance);
void USB_OTG_BSP_HS_Init(void);

// @formatter:off
#if 1
#define LOBYTE(x)							((uint8_t)((x) & 0x00FFU))
#define HIBYTE(x)							((uint8_t)(((x) & 0xFF00U) >> 8U))

#define USB_CLASS_COMMUNICATIONS			0x02
#define USB_CLASS_MISCELLANEOUS				0xEF

#define USB_CDC_ACM_SUBCLASS				0x02
#define USB_CDC_AT_COMMAND_PROTOCOL			0x01
#define USB_CLASS_CDC_DATA					0x0A

#define USB_DESCTYPE_CS_INTERFACE			0x24					/* CDC interface descriptor type */
#define USBD_LPM_ENABLED					0

#define USB_ID_SETTINGS						1						/* Select: 1, 2, or 3 */

#if (USB_ID_SETTINGS == 1)
#define USBD_VID							0x0483
#define USBD_PID							0x5740
#define USBD_DEV							0x0200
#elif (USB_ID_SETTINGS == 2)
#define USBD_VID							0x8484
#define USBD_PID							0x0000
#define USBD_DEV							0x0001
#elif (USB_ID_SETTINGS == 3)
#define USBD_VID							0x0283
#define USBD_PID							0x01FF
#define USBD_DEV							0x0200
#endif

#define CDC_CMD_PACKET_SIZE					8U			/* Control Endpoint Packet size */
#define CDC_DATA_FS_MAX_PACKET_SIZE			64U			/* FS Endpoint IN & OUT Packet size */
#define CDC_DATA_HS_MAX_PACKET_SIZE			512U		/* HS Endpoint IN & OUT Packet size */

#define CDC_FS_BINTERVAL					0x10U		/* 0x10 - 16 ms */
#define CDC_HS_BINTERVAL					0x10U		/* 0x10 */

#define INTERF_COM_NUM						0x00		/* Control Interface (0) */
#define INTERF_DAT_NUM						0x01		/* Data Interface (1) */
#endif

/* UCHAR device_framework_full_speed[] */
#if 1
UCHAR device_framework_full_speed[] =
{
	/* Device Descriptor (must be first in this array) */
	0x12,										/* 0 bLength */
	UX_DEVICE_DESCRIPTOR_ITEM,					/* 1 bDescriptorType     : Device Descriptor */
	0x00,										/* 2 bcdUSB */
	0x02,										/* 3 bcdUSB */
	USB_CLASS_MISCELLANEOUS,					/* 4 bDeviceClass        : if there 3 bytes one by one are equal */
	0x02,										/* 5 bDeviceSubClass     : to 0xEF, 0x02 and 0x01,  */
	0x01,										/* 6 bDeviceProtocol     : then here Composite Device with IAD (see below) */
	0x40,										/* 7 bMaxPacketSize0     : (only 8, 16, 32, or 64 are valid) */
	LOBYTE(USBD_VID),							/* 8 idVendor */
	HIBYTE(USBD_VID),							/* 9 idVendor */
	LOBYTE(USBD_PID),							/* 10 idProduct */
	HIBYTE(USBD_PID),							/* 11 idProduct */
	LOBYTE(USBD_DEV),							/* 12 bcdDevice */
	HIBYTE(USBD_DEV),							/* 13 bcdDevice */
	0x01,										/* 14 iManufacturer      : Index of Manufacturer string (String Descriptor 1) */
	0x02,										/* 15 iProduct           : Index of Product string (String Descriptor 2) */
	0x03,										/* 16 iSerialNumber      : Index of Serial Number string (String Descriptor 3) */
	0x01,										/* 17 bNumConfigurations : 1 Configuration used */

	/*--------------------------------------------------------------------------------------------*/

	/* Configuration Descriptor */
	0x09,										/* 0 bLength */
	UX_CONFIGURATION_DESCRIPTOR_ITEM,			/* 1 bDescriptorType     : Configuration Descriptor */
	0x4B,										/* 2 wTotalLength        : This will be calculated at run-time. (0x4B) */
	0x00,										/* 3 wTotalLength        : This will be calculated at run-time. */
	0x02,										/* 4 bNumInterfaces      : 2 Interfaces */
	0x01,										/* 5 bConfigurationValue : Configuration 1 */
	0x00,										/* 6 iConfiguration      : No String Descriptor */
	0x80 | (1 << 6) | (0 << 5),					/* 7 bmAttributes        : D7-Reserved, set 1; D6-Self Powered; D5-Remote Wakeup; D4..0-Reserved, set 0 */
	0x32,										/* 8 bMaxPower           : 0x32 = 100 mA */

	/* Interface Association Descriptor (IAD) (should be declared before the Interfaces and contain
	 * the first interface of the CDC-ACM class and how many interfaces are attached) */
	0x08,										/* 0 bLength */
	UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM,	/* 1 bDescriptorType     : */
	INTERF_COM_NUM,								/* 2 bFirstInterface     : */
	0x02,										/* 3 bInterfaceCount     : */
	0x02,										/* 4 bFunctionClass      : Communications and CDC Control */
	0x02,										/* 5 bFunctionSubClass   : Abstract Control Model */
	0x01,										/* 6 bFunctionProtocol   : Standard or enhanced AT Command set protocol */
	0x00,										/* 7 iFunction           : No String Descriptor */

	/*--------------------------------------------------------------------------------------------*/

	/* (not used by USBX) */
#if 1
	/* Header Functional Descriptor */
	0x05,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x00,										/* 2 bDescriptorSubtype     : HEADER (0x00) */
	0x10,										/* 3 bcdCDC                 : CDC Version 1.10 */
	0x01,										/* 4 bcdCDC */

	/* Call Management Functional Descriptor */
	0x05,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x01,										/* 2 bDescriptorSubtype     : CALL MANAGEMENT (0x01) */
	0x03,										/* 3 bmCapabilities */
	INTERF_DAT_NUM,								/* 4 bDataInterface */

	/* Abstract Control Management (ACM) Functional Descriptor */
	0x04,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x02,										/* 2 bDescriptorSubtype     : ABSTRACT CONTROL MANAGEMENT (0x02) */
	0x02,										/* 3 bmCapabilities         : Supports subset of ACM commands:
					D7..4	: 0x00 (Reserved)
					D3		: 0x00 (not supports the notification Network_Connection)
					D2		: 0x00 (not supports the request Send_Break)
					D1		: 0x01 (supports the request combination of Set_Line_Coding,
							  Set_Control_Line_State, Get_Line_Coding, and the notification Serial_State)
					D0		: 0x00 (not supports the request combination of Set_Comm_Feature,
							  Clear_Comm_Feature, and Get_Comm_Feature) */

	/* Union Functional Descriptor */
	0x05,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x06,										/* 2 bDescriptorSubtype     : UNION (0x06) */
	INTERF_COM_NUM,								/* 3 bControlInterface      : Interface 0 */
	INTERF_DAT_NUM,								/* 4 bSubordinateInterface0 : Interface 1 */
#endif

	/*--------------------------------------------------------------------------------------------*/

	/* Command Interface Descriptor */
	0x09,										/* 0 bLength */
	UX_INTERFACE_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Interface Descriptor */
	INTERF_COM_NUM,								/* 2 bInterfaceNumber    : Identification number of this Interface */
	0x00,										/* 3 bAlternateSetting   : No alternate for 'SET INTERFACE' Request */
	0x01,										/* 4 bNumEndpoints       : 1 Endpoint for this Command Interface */
	USB_CLASS_COMMUNICATIONS,					/* 5 bInterfaceClass     : Communications and CDC Control (0x02) */
	USB_CDC_ACM_SUBCLASS,						/* 6 bInterfaceSubClass  : Abstract Control Model (0x02) */
	USB_CDC_AT_COMMAND_PROTOCOL,				/* 7 bInterfaceProtocol  : AT Commands defined by ITU-T V.250 etc (0x01) */
	0x00,										/* 8 iInterface Index    : No String Descriptor */

	/* Command Endpoint Descriptor */
	0x07,										/* 0 bLength */
	UX_ENDPOINT_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Endpoint Descriptor */
	(UX_ENDPOINT_IN | 3),						/* 2 bEndpointAddress    : IN EP address for CDC commands (3 or 2) */
	UX_INTERRUPT_ENDPOINT,						/* 3 bmAttributes        : EP type is Interrupt */
	LOBYTE(CDC_CMD_PACKET_SIZE),				/* 4 wMaxPacketSize */
	HIBYTE(CDC_CMD_PACKET_SIZE),				/* 5 wMaxPacketSize */
	CDC_FS_BINTERVAL,							/* 6 bInterval           : */

	/* Data Interface Descriptor */
	0x09,										/* 0 bLength */
	UX_INTERFACE_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Interface Descriptor */
	INTERF_DAT_NUM,								/* 2 bInterfaceNumber    : Index of this Interface */
	0x00,										/* 3 bAlternateSetting   : No alternate for 'SET INTERFACE' Request */
	0x02,										/* 4 bNumEndpoints       : 2 Endpoints for this Data Interface */
	USB_CLASS_CDC_DATA,							/* 5 bInterfaceClass     : Data Interface Class (0x0A) */
	0x00,										/* 6 bInterfaceSubClass  : No class specific subclass required */
	0x00,										/* 7 bInterfaceProtocol  : No class specific protocol required */
	0x00,										/* 8 iInterface Index    : No string descriptor */

	/* Data Endpoint Descriptor (IN) */
	0x07,										/* 0 bLength */
	UX_ENDPOINT_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Endpoint Descriptor */
	(UX_ENDPOINT_IN | 1),						/* 2 bEndpointAddress    : EP address for Data IN (1) */
	UX_BULK_ENDPOINT,							/* 3 bmAttributes        : EP type is Bulk */
	LOBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),		/* 4 wMaxPacketSize */
	HIBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),		/* 5 wMaxPacketSize */
	0x00,										/* 6 bInterval           : never NAKs */

	/* Data Endpoint Descriptor (OUT) */
	0x07,										/* 0 bLength: Endpoint Descriptor size */
	UX_ENDPOINT_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Endpoint Descriptor */
	(UX_ENDPOINT_OUT | 2),						/* 2 bEndpointAddress    : EP address for Data OUT (2 or 1) */
	UX_BULK_ENDPOINT,							/* 3 bmAttributes        : EP type is Bulk */
	LOBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),		/* 4 wMaxPacketSize */
	HIBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),		/* 5 wMaxPacketSize */
	0x00,										/* 6 bInterval           : never NAKs */
};
#endif

/* UCHAR device_framework_high_speed[] */
#if 1
UCHAR device_framework_high_speed[] =
{
	/* Device Descriptor (must be first in this array) */
	0x12,										/* 0 bLength */
	UX_DEVICE_DESCRIPTOR_ITEM,					/* 1 bDescriptorType     : Device Descriptor */
#if (USBD_LPM_ENABLED == 1)
	/* changed to USB version 2.01 in order to support LPM L1 suspend resume test of USBCV3.0 */
	0x01,										/* 2 bcdUSB */
	0x02,										/* 3 bcdUSB */
#else
	0x00,										/* 2 bcdUSB */
	0x02,										/* 3 bcdUSB */
#endif
	USB_CLASS_MISCELLANEOUS,					/* 4 bDeviceClass        : if there 3 bytes one by one are equal */
	0x02,										/* 5 bDeviceSubClass     : to 0xEF, 0x02 and 0x01,  */
	0x01,										/* 6 bDeviceProtocol     : then here Composite Device with IAD (see below) */
	0x40,										/* 7 bMaxPacketSize0     : (only 8, 16, 32, or 64 are valid) */
	LOBYTE(USBD_VID),							/* 8 idVendor */
	HIBYTE(USBD_VID),							/* 9 idVendor */
	LOBYTE(USBD_PID),							/* 10 idProduct */
	HIBYTE(USBD_PID),							/* 11 idProduct */
	LOBYTE(USBD_DEV),							/* 12 bcdDevice */
	HIBYTE(USBD_DEV),							/* 13 bcdDevice */
	0x01,										/* 14 iManufacturer      : Index of Manufacturer string (String Descriptor 1) */
	0x02,										/* 15 iProduct           : Index of Product string (String Descriptor 2) */
	0x03,										/* 16 iSerialNumber      : Index of Serial Number string (String Descriptor 3) */
	0x01,										/* 17 bNumConfigurations : 1 Configuration used */

	/*--------------------------------------------------------------------------------------------*/

#if (USBD_LPM_ENABLED == 1)
	/* Binary Object Store (BOS) Descriptor */
	0x05,										/* 0 bLength */
	UX_BOS_DESCRIPTOR_ITEM,						/* 1 bDescriptorType */
	0x0C,										/* 2 wTotalLength        : Length of this descriptor and all of its sub descriptors */
	0x00,										/* 3 wTotalLength        : Length of this descriptor and all of its sub descriptors */
	0x01,										/* 4 bNumDeviceCaps      : The number of separate device capability descriptors in the BOS */

	/* Device Capability Descriptor (USB 2.0 Extension Descriptor) */
	0x07,										/* 0 bLength */
	UX_BOS_DEVICE_CAPABILITY_DESCRIPTOR_ITEM,	/* 1 bDescriptorType     : Device Capability Descriptor */
	0x02,										/* 2 bDevCapabilityType  : USB 2.0 Extension */
	0x02,										/* 3 dev_capability_data : size varies - LPM capability bit set */
	0x00,										/* 4 dev_capability_data : size varies */
	0x00,										/* 5 dev_capability_data : size varies */
	0x00,										/* 6 dev_capability_data : size varies */
#endif

	/* Device Qualifier Descriptor (describes information about a high-speed capable device that
	 * would change if the device were operating at the other speed) */
	0x0A,										/* 0 bLength */
	UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM,		/* 1 bDescriptorType */
	0x00,										/* 2 bcdUSB              : 0x0200 (must be at least 2.0) */
	0x02,										/* 3 bcdUSB */
	USB_CLASS_COMMUNICATIONS,					/* 4 bDeviceClass        : Device Class */
	0x00,										/* 5 bDeviceSubClass     : none */
	0x00,										/* 6 bDeviceProtocol     : none */
	0x40,										/* 7 bMaxPacketSize      : size for other speed*/
	0x01,										/* 8 bNumConfigs         : 1 (number of Other-speed Configurations) */
	0x00,										/* 9 bReserved           : 0 (must be zero) */

	/*--------------------------------------------------------------------------------------------*/

	/* Configuration Descriptor */
	0x09,										/* 0 bLength */
	UX_CONFIGURATION_DESCRIPTOR_ITEM,			/* 1 bDescriptorType     : Configuration Descriptor */
	0x4B,										/* 2 wTotalLength        : This will be calculated at run-time. (0x4B) */
	0x00,										/* 3 wTotalLength        : This will be calculated at run-time. */
	0x02,										/* 4 bNumInterfaces      : 2 Interfaces used */
	0x01,										/* 5 bConfigurationValue : Configuration 1 */
	0x00,										/* 6 iConfiguration      : No String Descriptor */
	0x80 | (1 << 6) | (0 << 5),					/* 7 bmAttributes        : D7-Reserved, set 1; D6-Self Powered; D5-Remote Wakeup; D4..0-Reserved, set 0 */
	0x32,										/* 8 bMaxPower           : 0x32 = 100 mA, 0xFA = 500 mA */

	/* Interface Association Descriptor (IAD) (should be declared before the Interfaces and contain
	 * the first interface of the CDC-ACM class and how many interfaces are attached) */
	0x08,										/* 0 bLength */
	UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM,	/* 1 bDescriptorType     : */
	INTERF_COM_NUM,								/* 2 bFirstInterface     : */
	0x02,										/* 3 bInterfaceCount     : */
	0x02,										/* 4 bFunctionClass      : Communications and CDC Control */
	0x02,										/* 5 bFunctionSubClass   : Abstract Control Model */
	0x01,										/* 6 bFunctionProtocol   : Standard or enhanced AT Command set protocol */
	0x00,										/* 7 iFunction           : No String Descriptor */

	/*--------------------------------------------------------------------------------------------*/

	/* (not used by USBX) */
#if 1
	/* Header Functional Descriptor */
	0x05,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x00,										/* 2 bDescriptorSubtype     : HEADER (0x00) */
	0x10,										/* 3 bcdCDC                 : CDC Version 1.10 */
	0x01,										/* 4 bcdCDC */

	/* Call Management Functional Descriptor */
	0x05,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x01,										/* 2 bDescriptorSubtype     : CALL MANAGEMENT (0x01) */
	0x00,								/*0x03*//* 3 bmCapabilities */
	INTERF_DAT_NUM,								/* 4 bDataInterface */

	/* Abstract Control Management (ACM) Functional Descriptor */
	0x04,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x02,										/* 2 bDescriptorSubtype     : ABSTRACT CONTROL MANAGEMENT (0x02) */
	0x02,										/* 3 bmCapabilities         : Supports subset of ACM commands:
					D7..4	: 0x00 (Reserved)
					D3		: 0x00 (not supports the notification Network_Connection)
					D2		: 0x00 (not supports the request Send_Break)
					D1		: 0x01 (supports the request combination of Set_Line_Coding,
							  Set_Control_Line_State, Get_Line_Coding, and the notification Serial_State)
					D0		: 0x00 (not supports the request combination of Set_Comm_Feature,
							  Clear_Comm_Feature, and Get_Comm_Feature) */

	/* Union Functional Descriptor */
	0x05,										/* 0 bFunctionLength */
	USB_DESCTYPE_CS_INTERFACE,					/* 1 bDescriptorType        : CS_INTERFACE */
	0x06,										/* 2 bDescriptorSubtype     : UNION (0x06) */
	INTERF_COM_NUM,								/* 3 bControlInterface      : Interface 0 */
	INTERF_DAT_NUM,								/* 4 bSubordinateInterface0 : Interface 1 */
#endif

	/*--------------------------------------------------------------------------------------------*/

	/* Command Interface Descriptor */
	0x09,										/* 0 bLength */
	UX_INTERFACE_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Interface Descriptor */
	INTERF_COM_NUM,								/* 2 bInterfaceNumber    : Index of this Interface */
	0x00,										/* 3 bAlternateSetting   : No alternate for 'SET INTERFACE' Request */
	0x01,										/* 4 bNumEndpoints       : 1 Endpoint for this Command Interface */
	USB_CLASS_COMMUNICATIONS,					/* 5 bInterfaceClass     : Communications and CDC Control (0x02) */
	USB_CDC_ACM_SUBCLASS,						/* 6 bInterfaceSubClass  : Abstract Control Model (0x02) */
	USB_CDC_AT_COMMAND_PROTOCOL,				/* 7 bInterfaceProtocol  : AT Commands defined by ITU-T V.250 etc (0x01) */
	0x00,										/* 8 iInterface Index    : No string descriptor */

	/* Command Endpoint Descriptor */
	0x07,										/* 0 bLength */
	UX_ENDPOINT_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Endpoint Descriptor */
	(UX_ENDPOINT_IN | 3),						/* 2 bEndpointAddress    : IN EP address for CDC commands (3 or 2) */
	UX_INTERRUPT_ENDPOINT,						/* 3 bmAttributes        : EP type is Interrupt */
	LOBYTE(CDC_CMD_PACKET_SIZE),				/* 4 wMaxPacketSize */
	HIBYTE(CDC_CMD_PACKET_SIZE),				/* 5 wMaxPacketSize */
	CDC_HS_BINTERVAL,							/* 6 bInterval           : */

	/* Data Interface Descriptor */
	0x09,										/* 0 bLength */
	UX_INTERFACE_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Interface Descriptor */
	INTERF_DAT_NUM,								/* 2 bInterfaceNumber    : Index of this Interface */
	0x00,										/* 3 bAlternateSetting   : No alternate for 'SET INTERFACE' Request */
	0x02,										/* 4 bNumEndpoints       : 2 Endpoints for this Data Interface */
	USB_CLASS_CDC_DATA,							/* 5 bInterfaceClass     : Data Interface Class (0x0A) */
	0x00,										/* 6 bInterfaceSubClass  : No class specific subclass required */
	0x00,										/* 7 bInterfaceProtocol  : No class specific protocol required */
	0x00,										/* 8 iInterface Index    : No string descriptor */

	/* Data Endpoint Descriptor (IN) */
	0x07,										/* 0 bLength */
	UX_ENDPOINT_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Endpoint Descriptor */
	(UX_ENDPOINT_IN | 1),						/* 2 bEndpointAddress    : EP address for Data IN (1) */
	UX_BULK_ENDPOINT,							/* 3 bmAttributes        : EP type is Bulk */
	LOBYTE(CDC_DATA_HS_MAX_PACKET_SIZE),		/* 4 wMaxPacketSize */
	HIBYTE(CDC_DATA_HS_MAX_PACKET_SIZE),		/* 5 wMaxPacketSize */
	0x00,										/* 6 bInterval           : never NAKs */

	/* Data Endpoint Descriptor (OUT) */
	0x07,										/* 0 bLength: Endpoint Descriptor size */
	UX_ENDPOINT_DESCRIPTOR_ITEM,				/* 1 bDescriptorType     : Endpoint Descriptor */
	(UX_ENDPOINT_OUT | 2),						/* 2 bEndpointAddress    : EP address for Data OUT (2 or 1) */
	UX_BULK_ENDPOINT,							/* 3 bmAttributes        : EP type is Bulk */
	LOBYTE(CDC_DATA_HS_MAX_PACKET_SIZE),		/* 4 wMaxPacketSize */
	HIBYTE(CDC_DATA_HS_MAX_PACKET_SIZE),		/* 5 wMaxPacketSize */
	0x00,										/* 6 bInterval           : never NAKs */
};
#endif

/* UCHAR language_id_framework[] + UCHAR string_framework[] */
#if 1
/* Multiple languages are supported on the device, to add a language besides english,
 * the Unicode language code must be appended to the language_id_framework array and
 * the length adjusted accordingly. */
UCHAR language_id_framework[] =
{
	/* String Descriptor 0 (Language) */
	0x09, 0x04									/* English - United States */
};

UCHAR string_framework[] =
{
	/* String Descriptor 1 (Manufacturer - see 'Device Descriptor') */
	0x09, 0x04,						/* English - United States */
	0x01,							/* Index of the descriptor */
#if (USB_ID_SETTINGS == 1)
	0x12,							/* Length of string below (ASCII) */
	'S', 'T', 'M', 'i', 'c', 'r', 'o', 'e', 'l', 'e', 'c', 't', 'r', 'o', 'n', 'i', 'c', 's',
#elif (USB_ID_SETTINGS == 2)
	0x0C,							/* Length of string below (ASCII) */
	'E', 'x', 'p', 'r', 'e', 's', ' ', 'L', 'o', 'g', 'i', 'c',
#elif (USB_ID_SETTINGS == 3)
	0x0C,							/* Length of string below (ASCII) */
	'E', 'x', 'p', 'r', 'e', 's', ' ', 'L', 'o', 'g', 'i', 'c',
#endif

	/* String Descriptor 2 (Product - see 'Device Descriptor') */
	0x09, 0x04,						/* English - United States */
	0x02,							/* Index of the descriptor */
#if (USB_ID_SETTINGS == 1)
	0x15,							/* Length of string below (ASCII) */
	'S', 'T', 'M', '3', '2', ' ', 'V', 'i', 'r', 't', 'u', 'a', 'l', ' ', 'C', 'o', 'm', 'P', 'o', 'r', 't',
#elif (USB_ID_SETTINGS == 2)
	0x13,							/* Length of string below (ASCII) */
	'E', 'L', ' ', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'e', ' ', 'd', 'e', 'v', 'i', 'c', 'e',
#elif (USB_ID_SETTINGS == 3)
	0x13,							/* Length of string below (ASCII) */
	'E', 'L', ' ', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'e', ' ', 'd', 'e', 'v', 'i', 'c', 'e',
#endif

	/* String Descriptor 3 (Serial Number - see 'Device Descriptor') */
	0x09, 0x04,						/* English - United States */
	0x03,							/* Index of the descriptor */
#if (USB_ID_SETTINGS == 1)
	0x0C,							/* Length of string below (ASCII) */
	'3', '9', '7', '4', '3', '9', '6', 'C', '3', '0', '3', '5',
#elif (USB_ID_SETTINGS == 2)
	0x04,							/* Length of string below (ASCII) */
	'0', '0', '0', '1',
#elif (USB_ID_SETTINGS == 3)
	0x04,							/* Length of string below (ASCII) */
	'0', '0', '0', '1',
#endif

	/* String Descriptor 4 (Config) */
	0x09, 0x04,						/* English - United States */
	0x04,							/* Index of the descriptor */
	0x0A,							/* Length of string below (ASCII) */
	'C', 'D', 'C', ' ', 'C', 'o', 'n', 'f', 'i', 'g',
};
#endif // @formatter:on

int main(int argc, char** argv)
{
	/* Setup the hardware: MPU, CACHE, HAL_Init, Clock, SDRAM, USART1, RNG */
	hardware_setup();
	USB_OTG_BSP_HS_Init();

	_ux_dcd_stm32_delay(100000U);

	/* Enter the ThreadX kernel. */
	tx_kernel_enter();
}

/* Define local variables and definitions. */
UX_SLAVE_CLASS_CDC_ACM* cdc;
TX_THREAD demo_thread;
UCHAR buffer[UX_DEMO_BUFFER_SIZE];
UX_SLAVE_CLASS_CDC_ACM_PARAMETER cdc_parameter =
{
	/* Set the parameters for callback when insertion/extraction of a CDC device. */
	.ux_slave_class_cdc_acm_instance_activate = demo_cdc_instance_activate,
	.ux_slave_class_cdc_acm_instance_deactivate = demo_cdc_instance_deactivate,
	.ux_slave_class_cdc_acm_parameter_change = demo_cdc_acm_parameter_change
};

void tx_application_define(void* first_unused_memory)
{
	/* Initialize the free memory pointer. */
	CHAR* stack_pointer = (CHAR*)first_unused_memory;

	/* Initialize the RAM disk memory. */
	CHAR* memory_pointer = stack_pointer + UX_DEMO_STACK_SIZE;

	/* Initialize USBX Memory (no separate pool for cache safe memory) */
	UINT status = _ux_system_initialize(memory_pointer, UX_USBX_MEMORY_SIZE, UX_NULL, 0);
	if (status != UX_SUCCESS)
		return;

	ULONG device_framework_length_full_speed = sizeof(device_framework_full_speed);		// 93
	ULONG device_framework_length_high_speed = sizeof(device_framework_high_speed);		// 103
	ULONG string_framework_length = sizeof(string_framework);							// 47
	ULONG language_id_framework_length = sizeof(language_id_framework);					// 2

	/* The code below is required for installing the device portion of USBX.
	 * No call back for device status change in this example. */
	status = _ux_device_stack_initialize(device_framework_high_speed,
			device_framework_length_high_speed, device_framework_full_speed,
			device_framework_length_full_speed, string_framework, string_framework_length,
			language_id_framework, language_id_framework_length, UX_NULL);
	if (status != UX_SUCCESS)
		return;

	/* Initialize the device cdc class. This class owns both interfaces starting with 0. */
	status = _ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
			_ux_device_class_cdc_acm_entry, INTERF_DAT_NUM, INTERF_COM_NUM, (VOID*)&cdc_parameter);
	if (status != UX_SUCCESS)
		return;

	/* Create the main demo thread.
	 * UINT _tx_thread_create(TX_THREAD* thread_ptr, CHAR* name_ptr,
	 * 		VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID* stack_start,
	 * 		ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice,
	 * 		UINT auto_start); */
	status = _tx_thread_create(&demo_thread, "tx demo", demo_thread_entry, 0, stack_pointer,
			UX_DEMO_STACK_SIZE, 20, 20, 1, TX_AUTO_START);
	if (status != TX_SUCCESS)
		return;

	printf("\r\nDemo Thread created...\r\n");

	return;
}

void demo_thread_entry(ULONG arg)
{
	/* Register the STM32  USB device controllers available in this system */
	ULONG status = _ux_dcd_stm32_initialize(UX_DCD_STM32_OTG_FS_HIGH_SPEED, 0);
	if (status != UX_SUCCESS)
		return;

	ULONG actual_length;
	ULONG requested_length;

	for (;;)
	{
		/* Ensure the CDC class is mounted. */
		if (cdc != UX_NULL)
		{
//			/* Read from the CDC class. */
//			status = _ux_device_class_cdc_acm_read(cdc, buffer, UX_DEMO_BUFFER_SIZE,
//					&actual_length);
//
//			/* The actual length becomes the requested length. */
//			requested_length = actual_length;
//
//			/* Check the status.  If OK, we will write to the CDC instance. */
//			status = _ux_device_class_cdc_acm_write(cdc, buffer, requested_length, &actual_length);
//
//			/* Check for CR/LF. */
//			if (buffer[requested_length - 1] == '\r')
//			{
//				/* Copy LF value into user buffer. */
//				_ux_utility_memory_copy(buffer, "\n", 1);
//
//				/* And send it again. */
//				status = _ux_device_class_cdc_acm_write(cdc, buffer, 1, &actual_length);
//			}

			/* Fill buffer. */
			buffer[0] = 'a';
			buffer[1] = 'b';
			buffer[2] = 'c';
			buffer[3] = 'd';
			buffer[4] = 'e';
			buffer[5] = 'f';
			buffer[6] = '\r';
			buffer[7] = '\n';

			/* And send 8 bytes. */
			status = _ux_device_class_cdc_acm_write(cdc, buffer, 8, &actual_length);

//			/* And send 0 byte packet. Forced ZLP. */
//			status = _ux_device_class_cdc_acm_write(cdc, buffer, 0, &actual_length);
//
//			/* Read from the CDC class. */
//			status = _ux_device_class_cdc_acm_read(cdc, buffer, UX_DEMO_BUFFER_SIZE,
//					&actual_length);
		}

		_tx_thread_sleep(50);
	}
}

/* static void Mb_usbfs_rcv_task(ULONG ptr)
{
	UINT res;
	ULONG actual_length;
	ULONG actual_flags;
	T_usbfs_drv_cbl* p = (T_usbfs_drv_cbl*)ptr;
	uint32_t n;

	do
	{
		if (p->active)
		{
			n = p->head_n;
			res = ux_device_class_cdc_acm_read(p->cdc, p->rd_pack[n].buff, USBDRV_BUFFER_MAX_LENGTH,
					&actual_length); // Чтение пакета из USB

			p->rd_pack[n].len = actual_length;
			if (res == UX_SUCCESS)
			{
				// Перемещаем указатель головы очереди
				n++;
				if (n >= IN_BUF_QUANTITY)
					n = 0;
				p->head_n = n;

				// Выставляем флаг выполненного чтения
				if (tx_event_flags_set(&(p->evt), MB_USBFS_READ_DONE, TX_OR) != TX_SUCCESS)
				{
					tx_thread_sleep(2); // Задержка после ошибки
				}

				// Если все буферы на прием заполнены, то значит системе не требуются данные
				if (p->tail_n == n)
				{
					// Перестаем принимать данные из USB и ждем когда система обработает уже принятые данные и подаст сигнал к началу приема по USB
					p->no_space = 1;
					if (tx_event_flags_get(&(p->evt), MB_USBFS_READ_REQUEST, TX_AND_CLEAR,
							&actual_flags, TX_WAIT_FOREVER) != TX_SUCCESS)
					{
						tx_thread_sleep(2); // Задержка после ошибки
					}
				}
			}
			else
			{
				tx_thread_sleep(2); // Задержка после ошибки
			}
		}
		else
		{
			tx_thread_sleep(2); // Задержки после ошибки нужны для того чтобы задача не захватила все ресурсы в случает постоянного появления ошибки
		}

	} while (1);
} */

void demo_cdc_instance_activate(void* cdc_instance)
{
	/* Save the CDC instance. */
	cdc = (UX_SLAVE_CLASS_CDC_ACM*)cdc_instance;

	DEBUG_LED_ON();
}

void demo_cdc_instance_deactivate(void* cdc_instance)
{
	/* Reset the CDC instance. */
	cdc = UX_NULL;

	DEBUG_LED_OFF();
}

void demo_cdc_acm_parameter_change(void* cdc_instance)
{
	DEBUG_LED_TOGGLE();
}

/** this function repeats the function 'HAL_PCD_MspInit(..)' from the 'usbd_conf.c' */
void USB_OTG_BSP_HS_Init(void)
{
	/* Configure USB FS GPIOs */
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* USB_OTG_HS GPIO Configuration:
	 * PA5     ------> USB_OTG_HS_ULPI_CK
	 * PA3     ------> USB_OTG_HS_ULPI_D0
	 * PB0     ------> USB_OTG_HS_ULPI_D1
	 * PB1     ------> USB_OTG_HS_ULPI_D2
	 * PB10    ------> USB_OTG_HS_ULPI_D3
	 * PB11    ------> USB_OTG_HS_ULPI_D4
	 * PB12    ------> USB_OTG_HS_ULPI_D5
	 * PB13    ------> USB_OTG_HS_ULPI_D6
	 * PB5     ------> USB_OTG_HS_ULPI_D7
	 * PC0     ------> USB_OTG_HS_ULPI_STP
	 * PH4     ------> USB_OTG_HS_ULPI_NXT
	 * PC2     ------> USB_OTG_HS_ULPI_DIR
	 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* CLK */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* D0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* D1 D2 D3 D4 D5 D6 D7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11
			| GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/* STP */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* NXT */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/* DIR */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* Enable USB HS Clocks */
	__HAL_RCC_USB_OTG_HS_CLK_ENABLE();
	__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();

	/* Set USBHS Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(OTG_HS_IRQn, 4, 0);		// (OTG_HS_IRQn, 0, 0)

	/* Enable USB HS Interrupt */
	HAL_NVIC_EnableIRQ(OTG_HS_IRQn);

//	/* Set USBHS Interrupt to the lowest priority */
//	HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);		// (OTG_HS_IRQn, 0, 0)
//
//	/* Enable USB HS Interrupt */
//	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
}

/* Definition of STM32 registers. */
#if 1
#define STM32_RCC                           0x40021000
#define STM32_RCC_CR                        (*(volatile unsigned long*)(STM32_RCC + 0x00000000))
#define STM32_RCC_CR_HSEON                  0x00010000
#define STM32_RCC_CR_HSERDY                 0x00020000
#define STM32_RCC_CR_HSEBYP                 0x00040000
#define STM32_RCC_CR_PLL2RDY                0x08000000
#define STM32_RCC_CR_PLLRDY                 0x02000000
#define STM32_RCC_CFGR                      (*(volatile unsigned long*)(STM32_RCC + 0x00000004))
#define STM32_RCC_CFGR_HPRE                 0x000000F0
#define STM32_RCC_CFGR_SYSCLK_DIV1          0x00000000
#define STM32_RCC_CFGR_HCLK_DIV1            0x00000000
#define STM32_RCC_CFGR_HCLK_DIV2            0x00000400
#define STM32_RCC_CFGR_HCLK_MASK            0x00003800
#define STM32_RCC_CFGR_PCLK1_MASK           0x00000700
#define STM32_RCC_CFGR_PLL_MASK             0x003F0000
#define STM32_RCC_CFGR_SW_MASK              0x00000003
#define STM32_RCC_CFGR_SWS_MASK             0x0000000C
#define STM32_RCC_CFGR_SYSCLK_PLLCLK        0x00000002
#define STM32_RCC_CFGR_SYSCLK_PLLCLK_STAT   0x00000008
#define STM32_RCC_CIR                       (*(volatile unsigned long*)(STM32_RCC + 0x00000008))

#define STM32_RCC_AHBENR                    (*(volatile unsigned long*)(STM32_RCC + 0x00000014))
#define STM32_RCC_AHBENR_OTGFSEN            0x00001000

#define STM32_RCC_CFGR2                     (*(volatile unsigned long*)(STM32_RCC + 0x0000002C))
#define STM32_RCC_CFGR2_PREDIV1             0x0000000F
#define STM32_RCC_CFGR2_PREDIV1_DIV5        0x00000004
#define STM32_RCC_CFGR2_PREDIV1_SRC         0x00010000
#define STM32_RCC_CFGR2_PREDIV2             0x000000F0
#define STM32_RCC_CFGR2_PREDIV2_DIV5        0x00000040
#define STM32_RCC_CFGR2_PLL2MUL             0x00000F00
#define STM32_RCC_CFGR2_PLL2MUL_MASK        0xFFC2FFFF
#define STM32_RCC_CFGR2_PLL2MUL_8           0x00000600
#define STM32_RCC_CFGR2_PLLMULL_9           0x001C0000

#define STM32_FLASH                         0x40022000
#define STM32_FLASH_ACR                     (*(volatile unsigned long*)(STM32_FLASH + 0x00000000))
#define STM32_FLASH_ACR_PREFETCH_ENABLE     0x00000010
#define STM32_FLASH_ACR_LATENCY_MASK        0x00000038
#define STM32_FLASH_ACR_LATENCY_2           0x00000002

#define STM32_BB_BASE                       0x42420000
#define STM32_PLL2                          (*(volatile unsigned long*)(STM32_BB_BASE + 0x00000068))
#define STM32_PLL                           (*(volatile unsigned long*)(STM32_BB_BASE + 0x00000060))

#define STM32CFGR_OTGFSPRE_BB               0x424200D8
#endif

void _hardware_setup(void)
{
	/* Reset the STM32 board. */
	STM32_RCC_CR |= 0x00000001;
	STM32_RCC_CFGR &= 0xf0ff0000;
	STM32_RCC_CR &= 0xfef6ffff;
	STM32_RCC_CR &= 0xffbfffff;
	STM32_RCC_CFGR &= 0xff80ffff;
	STM32_RCC_CR &= 0xebffffff;
	STM32_RCC_CIR = 0x00ff0000;
	STM32_RCC_CFGR2 = 0;

	/* Set the RCC_CR register. Enable HSE. */
	STM32_RCC_CR &= ~STM32_RCC_CR_HSEON;
	STM32_RCC_CR &= ~STM32_RCC_CR_HSEBYP;
	STM32_RCC_CR |= STM32_RCC_CR_HSEON;

	/* Wait for HSE to be ready. */
	while ((STM32_RCC_CR & STM32_RCC_CR_HSERDY) == 0);

	/* Enable prefetch buffer. */
	STM32_FLASH_ACR |= STM32_FLASH_ACR_PREFETCH_ENABLE;

	/* Flash 2 wait state latency. */
	STM32_FLASH_ACR &= STM32_FLASH_ACR_LATENCY_MASK;
	STM32_FLASH_ACR |= STM32_FLASH_ACR_LATENCY_2;

	/* Set the Clock to SYSCLK Divisor 1. */
	STM32_RCC_CFGR &= ~STM32_RCC_CFGR_HPRE;
	STM32_RCC_CFGR |= STM32_RCC_CFGR_SYSCLK_DIV1;

	/* Set the PCLK2 to HCLK Divisor 1. */
	STM32_RCC_CFGR &= ~STM32_RCC_CFGR_HCLK_MASK;
	STM32_RCC_CFGR |= STM32_RCC_CFGR_HCLK_DIV1;

	/* Set the PCLK1 to HCLK Divisor 2. */
	STM32_RCC_CFGR &= ~STM32_RCC_CFGR_PCLK1_MASK;
	STM32_RCC_CFGR |= STM32_RCC_CFGR_HCLK_DIV2;

	/* Set the PREDIV2 register to Div 5. */
	STM32_RCC_CFGR2 &= ~STM32_RCC_CFGR2_PREDIV2;
	STM32_RCC_CFGR2 |= STM32_RCC_CFGR2_PREDIV2_DIV5;

	/* Set the PLLMUL register to 8. */
	STM32_RCC_CFGR2 &= ~STM32_RCC_CFGR2_PLL2MUL;
	STM32_RCC_CFGR2 |= STM32_RCC_CFGR2_PLL2MUL_8;

	/* Enable PLL2. */
	STM32_PLL2 = 1;

	/* Wait for PLL2 to be ready. */
	while ((STM32_RCC_CR & STM32_RCC_CR_PLL2RDY) == 0);

	/* Set the PREDIV1 register to Div 5. */
	STM32_RCC_CFGR2 &= ~(STM32_RCC_CFGR2_PREDIV1 | STM32_RCC_CFGR2_PREDIV1_SRC);
	STM32_RCC_CFGR2 |= STM32_RCC_CFGR2_PREDIV1_DIV5 | STM32_RCC_CFGR2_PREDIV1_SRC;

	/* Set the PLLMUL register to 9. */
	STM32_RCC_CFGR &= STM32_RCC_CFGR2_PLL2MUL_MASK;
	STM32_RCC_CFGR |= STM32_RCC_CFGR2_PLLMULL_9 | STM32_RCC_CFGR2_PREDIV1_SRC;

	/* Enable PLL. */
	STM32_PLL = 1;

	/* Wait for PLL to be ready. */
	while ((STM32_RCC_CR & STM32_RCC_CR_PLLRDY) == 0);

	/* Select PLL as system clock source. */
	STM32_RCC_CFGR &= ~STM32_RCC_CFGR_SW_MASK;
	STM32_RCC_CFGR |= STM32_RCC_CFGR_SYSCLK_PLLCLK;

	/* Wait till PLL is used as system clock source. */
	while ((STM32_RCC_CFGR & STM32_RCC_CFGR_SYSCLK_PLLCLK_STAT) == 0);

	/* Select USBCLK source.*/
	STM32_PLL = 0;

	/* Enable the USB clock. */
	STM32_RCC_AHBENR |= STM32_RCC_AHBENR_OTGFSEN;
}
