
sample_filex_ram_disk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009488  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009718  08009718  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009718  08009718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009720  08009720  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009724  08009724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031c4  20000080  20000080  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003244  20003244  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ffe9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000bafc  00000000  00000000  00090099  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  0009bb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002088  00000000  00000000  0009d028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038125  00000000  00000000  0009f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000292e7  00000000  00000000  000d71d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00132805  00000000  00000000  001004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  00232cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e8  00000000  00000000  00232dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00017bd9  00000000  00000000  002364a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009640 	.word	0x08009640

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009640 	.word	0x08009640

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000212:	481d      	ldr	r0, [pc, #116]	; (8000288 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000214:	491d      	ldr	r1, [pc, #116]	; (800028c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000216:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800021a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000220:	491b      	ldr	r1, [pc, #108]	; (8000290 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000222:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000228:	4919      	ldr	r1, [pc, #100]	; (8000290 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800022a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000230:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000232:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000236:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000238:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800023c:	4917      	ldr	r1, [pc, #92]	; (800029c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800023e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000240:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000244:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000246:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800024a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800024e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000252:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000256:	4912      	ldr	r1, [pc, #72]	; (80002a0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000258:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800025c:	4770      	bx	lr

0800025e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_BadHandler>

08000262 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000262:	f7ff bffe 	b.w	8000262 <__tx_HardfaultHandler>

08000266 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000266:	f7ff bffe 	b.w	8000266 <__tx_SVCallHandler>

0800026a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800026c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000270:	4770      	bx	lr

08000272 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000272:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000274:	f000 f86c 	bl	8000350 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000278:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800027c:	4770      	bx	lr

0800027e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800027e:	f7ff bffe 	b.w	800027e <__tx_NMIHandler>

08000282 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000282:	f7ff bffe 	b.w	8000282 <__tx_DBGHandler>
 8000286:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000288:	20003228 	.word	0x20003228
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 800028c:	20003848 	.word	0x20003848
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000290:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000294:	20002c74 	.word	0x20002c74
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000298:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800029c:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002a0:	40ff0000 	.word	0x40ff0000
	...

080002b0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002b0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002b4:	4a22      	ldr	r2, [pc, #136]	; (8000340 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002b6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002b8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002be:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002c2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002c6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002ca:	f3bf 8f6f 	isb	sy

080002ce <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002ce:	e7fe      	b.n	80002ce <__tx_wait_here>

080002d0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002d0:	481c      	ldr	r0, [pc, #112]	; (8000344 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002d4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002d8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002da:	b169      	cbz	r1, 80002f8 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002dc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002de:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 80002e2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80002e6:	4c19      	ldr	r4, [pc, #100]	; (800034c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 80002e8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 80002ec:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 80002ee:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 80002f2:	b10d      	cbz	r5, 80002f8 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80002f4:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 80002f6:	6023      	str	r3, [r4, #0]

080002f8 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80002f8:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80002fa:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 80002fc:	b189      	cbz	r1, 8000322 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80002fe:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000300:	b662      	cpsie	i

08000302 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000302:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000304:	4c11      	ldr	r4, [pc, #68]	; (800034c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000306:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000308:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800030c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800030e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000310:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000314:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800033c:	e7e1      	b.n	8000302 <__tx_ts_restore>
 800033e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000340:	20002c78 	.word	0x20002c78
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000344:	20002c7c 	.word	0x20002c7c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000348:	20002c80 	.word	0x20002c80
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800034c:	20002d18 	.word	0x20002d18

08000350 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000350:	4926      	ldr	r1, [pc, #152]	; (80003ec <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 8000352:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 8000354:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 8000358:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 800035c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 800035e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 8000360:	d008      	beq.n	8000374 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 8000362:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 8000366:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 8000368:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 800036a:	d103      	bne.n	8000374 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 800036e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 8000372:	6018      	str	r0, [r3, #0]

08000374 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000374:	4920      	ldr	r1, [pc, #128]	; (80003f8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 8000376:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 8000378:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 800037a:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 800037c:	d004      	beq.n	8000388 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 8000380:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 8000384:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 8000386:	e008      	b.n	800039a <__tx_timer_done>

08000388 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 8000388:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 800038e:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 8000390:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 8000392:	d101      	bne.n	8000398 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 8000396:	6818      	ldr	r0, [r3, #0]

08000398 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 8000398:	6008      	str	r0, [r1, #0]

0800039a <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 800039c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 800039e:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80003a0:	d103      	bne.n	80003aa <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80003a2:	4916      	ldr	r1, [pc, #88]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003a4:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80003a6:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80003a8:	d01c      	beq.n	80003e4 <__tx_timer_nothing_expired>

080003aa <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 80003aa:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 80003ae:	4913      	ldr	r1, [pc, #76]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003b0:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 80003b2:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 80003b4:	d001      	beq.n	80003ba <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 80003b6:	f009 f8fb 	bl	80095b0 <_tx_timer_expiration_process>

080003ba <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 80003bc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 80003be:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 80003c0:	d00e      	beq.n	80003e0 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 80003c2:	f009 f89b 	bl	80094fc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 80003c8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 80003ca:	b949      	cbnz	r1, 80003e0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 80003ce:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 80003d2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 80003d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 80003da:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 80003dc:	d000      	beq.n	80003e0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 80003de:	6002      	str	r2, [r0, #0]

080003e0 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 80003e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003e4 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 80003e4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 80003e8:	4770      	bx	lr
 80003ea:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003ec:	2000320c 	.word	0x2000320c
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003f0:	20002d18 	.word	0x20002d18
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003f4:	20003208 	.word	0x20003208
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003f8:	20002c90 	.word	0x20002c90
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003fc:	20002d14 	.word	0x20002d14
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000400:	20002d20 	.word	0x20002d20
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000404:	20002df4 	.word	0x20002df4
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000408:	20002c78 	.word	0x20002c78
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800040c:	20002c7c 	.word	0x20002c7c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000410:	20002c80 	.word	0x20002c80
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000414:	e000ed04 	.word	0xe000ed04
	...

08000420 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800042e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000440:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000442:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000444:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000448:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800044a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800044c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800044e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000452:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000458:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800045a:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 800045c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000460:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000462:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <__aeabi_uldivmod>:
 8000468:	b953      	cbnz	r3, 8000480 <__aeabi_uldivmod+0x18>
 800046a:	b94a      	cbnz	r2, 8000480 <__aeabi_uldivmod+0x18>
 800046c:	2900      	cmp	r1, #0
 800046e:	bf08      	it	eq
 8000470:	2800      	cmpeq	r0, #0
 8000472:	bf1c      	itt	ne
 8000474:	f04f 31ff 	movne.w	r1, #4294967295
 8000478:	f04f 30ff 	movne.w	r0, #4294967295
 800047c:	f000 b972 	b.w	8000764 <__aeabi_idiv0>
 8000480:	f1ad 0c08 	sub.w	ip, sp, #8
 8000484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000488:	f000 f806 	bl	8000498 <__udivmoddi4>
 800048c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr

08000498 <__udivmoddi4>:
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	9e08      	ldr	r6, [sp, #32]
 800049e:	4604      	mov	r4, r0
 80004a0:	4688      	mov	r8, r1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d14b      	bne.n	800053e <__udivmoddi4+0xa6>
 80004a6:	428a      	cmp	r2, r1
 80004a8:	4615      	mov	r5, r2
 80004aa:	d967      	bls.n	800057c <__udivmoddi4+0xe4>
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	b14a      	cbz	r2, 80004c6 <__udivmoddi4+0x2e>
 80004b2:	f1c2 0720 	rsb	r7, r2, #32
 80004b6:	fa01 f302 	lsl.w	r3, r1, r2
 80004ba:	fa20 f707 	lsr.w	r7, r0, r7
 80004be:	4095      	lsls	r5, r2
 80004c0:	ea47 0803 	orr.w	r8, r7, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	0c23      	lsrs	r3, r4, #16
 80004cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80004d0:	fa1f fc85 	uxth.w	ip, r5
 80004d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004dc:	fb07 f10c 	mul.w	r1, r7, ip
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d909      	bls.n	80004f8 <__udivmoddi4+0x60>
 80004e4:	18eb      	adds	r3, r5, r3
 80004e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ea:	f080 811b 	bcs.w	8000724 <__udivmoddi4+0x28c>
 80004ee:	4299      	cmp	r1, r3
 80004f0:	f240 8118 	bls.w	8000724 <__udivmoddi4+0x28c>
 80004f4:	3f02      	subs	r7, #2
 80004f6:	442b      	add	r3, r5
 80004f8:	1a5b      	subs	r3, r3, r1
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000500:	fb0e 3310 	mls	r3, lr, r0, r3
 8000504:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000508:	fb00 fc0c 	mul.w	ip, r0, ip
 800050c:	45a4      	cmp	ip, r4
 800050e:	d909      	bls.n	8000524 <__udivmoddi4+0x8c>
 8000510:	192c      	adds	r4, r5, r4
 8000512:	f100 33ff 	add.w	r3, r0, #4294967295
 8000516:	f080 8107 	bcs.w	8000728 <__udivmoddi4+0x290>
 800051a:	45a4      	cmp	ip, r4
 800051c:	f240 8104 	bls.w	8000728 <__udivmoddi4+0x290>
 8000520:	3802      	subs	r0, #2
 8000522:	442c      	add	r4, r5
 8000524:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000528:	eba4 040c 	sub.w	r4, r4, ip
 800052c:	2700      	movs	r7, #0
 800052e:	b11e      	cbz	r6, 8000538 <__udivmoddi4+0xa0>
 8000530:	40d4      	lsrs	r4, r2
 8000532:	2300      	movs	r3, #0
 8000534:	e9c6 4300 	strd	r4, r3, [r6]
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	428b      	cmp	r3, r1
 8000540:	d909      	bls.n	8000556 <__udivmoddi4+0xbe>
 8000542:	2e00      	cmp	r6, #0
 8000544:	f000 80eb 	beq.w	800071e <__udivmoddi4+0x286>
 8000548:	2700      	movs	r7, #0
 800054a:	e9c6 0100 	strd	r0, r1, [r6]
 800054e:	4638      	mov	r0, r7
 8000550:	4639      	mov	r1, r7
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	fab3 f783 	clz	r7, r3
 800055a:	2f00      	cmp	r7, #0
 800055c:	d147      	bne.n	80005ee <__udivmoddi4+0x156>
 800055e:	428b      	cmp	r3, r1
 8000560:	d302      	bcc.n	8000568 <__udivmoddi4+0xd0>
 8000562:	4282      	cmp	r2, r0
 8000564:	f200 80fa 	bhi.w	800075c <__udivmoddi4+0x2c4>
 8000568:	1a84      	subs	r4, r0, r2
 800056a:	eb61 0303 	sbc.w	r3, r1, r3
 800056e:	2001      	movs	r0, #1
 8000570:	4698      	mov	r8, r3
 8000572:	2e00      	cmp	r6, #0
 8000574:	d0e0      	beq.n	8000538 <__udivmoddi4+0xa0>
 8000576:	e9c6 4800 	strd	r4, r8, [r6]
 800057a:	e7dd      	b.n	8000538 <__udivmoddi4+0xa0>
 800057c:	b902      	cbnz	r2, 8000580 <__udivmoddi4+0xe8>
 800057e:	deff      	udf	#255	; 0xff
 8000580:	fab2 f282 	clz	r2, r2
 8000584:	2a00      	cmp	r2, #0
 8000586:	f040 808f 	bne.w	80006a8 <__udivmoddi4+0x210>
 800058a:	1b49      	subs	r1, r1, r5
 800058c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000590:	fa1f f885 	uxth.w	r8, r5
 8000594:	2701      	movs	r7, #1
 8000596:	fbb1 fcfe 	udiv	ip, r1, lr
 800059a:	0c23      	lsrs	r3, r4, #16
 800059c:	fb0e 111c 	mls	r1, lr, ip, r1
 80005a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a4:	fb08 f10c 	mul.w	r1, r8, ip
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d907      	bls.n	80005bc <__udivmoddi4+0x124>
 80005ac:	18eb      	adds	r3, r5, r3
 80005ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005b2:	d202      	bcs.n	80005ba <__udivmoddi4+0x122>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	f200 80cd 	bhi.w	8000754 <__udivmoddi4+0x2bc>
 80005ba:	4684      	mov	ip, r0
 80005bc:	1a59      	subs	r1, r3, r1
 80005be:	b2a3      	uxth	r3, r4
 80005c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80005c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005cc:	fb08 f800 	mul.w	r8, r8, r0
 80005d0:	45a0      	cmp	r8, r4
 80005d2:	d907      	bls.n	80005e4 <__udivmoddi4+0x14c>
 80005d4:	192c      	adds	r4, r5, r4
 80005d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005da:	d202      	bcs.n	80005e2 <__udivmoddi4+0x14a>
 80005dc:	45a0      	cmp	r8, r4
 80005de:	f200 80b6 	bhi.w	800074e <__udivmoddi4+0x2b6>
 80005e2:	4618      	mov	r0, r3
 80005e4:	eba4 0408 	sub.w	r4, r4, r8
 80005e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ec:	e79f      	b.n	800052e <__udivmoddi4+0x96>
 80005ee:	f1c7 0c20 	rsb	ip, r7, #32
 80005f2:	40bb      	lsls	r3, r7
 80005f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005fc:	fa01 f407 	lsl.w	r4, r1, r7
 8000600:	fa20 f50c 	lsr.w	r5, r0, ip
 8000604:	fa21 f30c 	lsr.w	r3, r1, ip
 8000608:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800060c:	4325      	orrs	r5, r4
 800060e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000612:	0c2c      	lsrs	r4, r5, #16
 8000614:	fb08 3319 	mls	r3, r8, r9, r3
 8000618:	fa1f fa8e 	uxth.w	sl, lr
 800061c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000620:	fb09 f40a 	mul.w	r4, r9, sl
 8000624:	429c      	cmp	r4, r3
 8000626:	fa02 f207 	lsl.w	r2, r2, r7
 800062a:	fa00 f107 	lsl.w	r1, r0, r7
 800062e:	d90b      	bls.n	8000648 <__udivmoddi4+0x1b0>
 8000630:	eb1e 0303 	adds.w	r3, lr, r3
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	f080 8087 	bcs.w	800074a <__udivmoddi4+0x2b2>
 800063c:	429c      	cmp	r4, r3
 800063e:	f240 8084 	bls.w	800074a <__udivmoddi4+0x2b2>
 8000642:	f1a9 0902 	sub.w	r9, r9, #2
 8000646:	4473      	add	r3, lr
 8000648:	1b1b      	subs	r3, r3, r4
 800064a:	b2ad      	uxth	r5, r5
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3310 	mls	r3, r8, r0, r3
 8000654:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000658:	fb00 fa0a 	mul.w	sl, r0, sl
 800065c:	45a2      	cmp	sl, r4
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x1da>
 8000660:	eb1e 0404 	adds.w	r4, lr, r4
 8000664:	f100 33ff 	add.w	r3, r0, #4294967295
 8000668:	d26b      	bcs.n	8000742 <__udivmoddi4+0x2aa>
 800066a:	45a2      	cmp	sl, r4
 800066c:	d969      	bls.n	8000742 <__udivmoddi4+0x2aa>
 800066e:	3802      	subs	r0, #2
 8000670:	4474      	add	r4, lr
 8000672:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	eba4 040a 	sub.w	r4, r4, sl
 800067e:	454c      	cmp	r4, r9
 8000680:	46c2      	mov	sl, r8
 8000682:	464b      	mov	r3, r9
 8000684:	d354      	bcc.n	8000730 <__udivmoddi4+0x298>
 8000686:	d051      	beq.n	800072c <__udivmoddi4+0x294>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d069      	beq.n	8000760 <__udivmoddi4+0x2c8>
 800068c:	ebb1 050a 	subs.w	r5, r1, sl
 8000690:	eb64 0403 	sbc.w	r4, r4, r3
 8000694:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000698:	40fd      	lsrs	r5, r7
 800069a:	40fc      	lsrs	r4, r7
 800069c:	ea4c 0505 	orr.w	r5, ip, r5
 80006a0:	e9c6 5400 	strd	r5, r4, [r6]
 80006a4:	2700      	movs	r7, #0
 80006a6:	e747      	b.n	8000538 <__udivmoddi4+0xa0>
 80006a8:	f1c2 0320 	rsb	r3, r2, #32
 80006ac:	fa20 f703 	lsr.w	r7, r0, r3
 80006b0:	4095      	lsls	r5, r2
 80006b2:	fa01 f002 	lsl.w	r0, r1, r2
 80006b6:	fa21 f303 	lsr.w	r3, r1, r3
 80006ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006be:	4338      	orrs	r0, r7
 80006c0:	0c01      	lsrs	r1, r0, #16
 80006c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80006c6:	fa1f f885 	uxth.w	r8, r5
 80006ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80006ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d2:	fb07 f308 	mul.w	r3, r7, r8
 80006d6:	428b      	cmp	r3, r1
 80006d8:	fa04 f402 	lsl.w	r4, r4, r2
 80006dc:	d907      	bls.n	80006ee <__udivmoddi4+0x256>
 80006de:	1869      	adds	r1, r5, r1
 80006e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006e4:	d22f      	bcs.n	8000746 <__udivmoddi4+0x2ae>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d92d      	bls.n	8000746 <__udivmoddi4+0x2ae>
 80006ea:	3f02      	subs	r7, #2
 80006ec:	4429      	add	r1, r5
 80006ee:	1acb      	subs	r3, r1, r3
 80006f0:	b281      	uxth	r1, r0
 80006f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006fe:	fb00 f308 	mul.w	r3, r0, r8
 8000702:	428b      	cmp	r3, r1
 8000704:	d907      	bls.n	8000716 <__udivmoddi4+0x27e>
 8000706:	1869      	adds	r1, r5, r1
 8000708:	f100 3cff 	add.w	ip, r0, #4294967295
 800070c:	d217      	bcs.n	800073e <__udivmoddi4+0x2a6>
 800070e:	428b      	cmp	r3, r1
 8000710:	d915      	bls.n	800073e <__udivmoddi4+0x2a6>
 8000712:	3802      	subs	r0, #2
 8000714:	4429      	add	r1, r5
 8000716:	1ac9      	subs	r1, r1, r3
 8000718:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800071c:	e73b      	b.n	8000596 <__udivmoddi4+0xfe>
 800071e:	4637      	mov	r7, r6
 8000720:	4630      	mov	r0, r6
 8000722:	e709      	b.n	8000538 <__udivmoddi4+0xa0>
 8000724:	4607      	mov	r7, r0
 8000726:	e6e7      	b.n	80004f8 <__udivmoddi4+0x60>
 8000728:	4618      	mov	r0, r3
 800072a:	e6fb      	b.n	8000524 <__udivmoddi4+0x8c>
 800072c:	4541      	cmp	r1, r8
 800072e:	d2ab      	bcs.n	8000688 <__udivmoddi4+0x1f0>
 8000730:	ebb8 0a02 	subs.w	sl, r8, r2
 8000734:	eb69 020e 	sbc.w	r2, r9, lr
 8000738:	3801      	subs	r0, #1
 800073a:	4613      	mov	r3, r2
 800073c:	e7a4      	b.n	8000688 <__udivmoddi4+0x1f0>
 800073e:	4660      	mov	r0, ip
 8000740:	e7e9      	b.n	8000716 <__udivmoddi4+0x27e>
 8000742:	4618      	mov	r0, r3
 8000744:	e795      	b.n	8000672 <__udivmoddi4+0x1da>
 8000746:	4667      	mov	r7, ip
 8000748:	e7d1      	b.n	80006ee <__udivmoddi4+0x256>
 800074a:	4681      	mov	r9, r0
 800074c:	e77c      	b.n	8000648 <__udivmoddi4+0x1b0>
 800074e:	3802      	subs	r0, #2
 8000750:	442c      	add	r4, r5
 8000752:	e747      	b.n	80005e4 <__udivmoddi4+0x14c>
 8000754:	f1ac 0c02 	sub.w	ip, ip, #2
 8000758:	442b      	add	r3, r5
 800075a:	e72f      	b.n	80005bc <__udivmoddi4+0x124>
 800075c:	4638      	mov	r0, r7
 800075e:	e708      	b.n	8000572 <__udivmoddi4+0xda>
 8000760:	4637      	mov	r7, r6
 8000762:	e6e9      	b.n	8000538 <__udivmoddi4+0xa0>

08000764 <__aeabi_idiv0>:
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SCB_EnableICache+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800077c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000780:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <SCB_EnableICache+0x3c>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <SCB_EnableICache+0x3c>)
 800078a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000794:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007c0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0b5b      	lsrs	r3, r3, #13
 80007c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ca:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007d4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	015a      	lsls	r2, r3, #5
 80007da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007e4:	490f      	ldr	r1, [pc, #60]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1ef      	bne.n	80007d6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	60fa      	str	r2, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1e5      	bne.n	80007cc <SCB_EnableDCache+0x24>
 8000800:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <SCB_EnableDCache+0x7c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <SCB_EnableDCache+0x7c>)
 800080a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000814:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <hardware_rand_initialize>:

	return len;
}

void hardware_rand_initialize(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <hardware_rand_initialize+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <hardware_rand_initialize+0x20>)
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <hardware_rand_initialize+0x24>)
 800083a:	2204      	movs	r2, #4
 800083c:	601a      	str	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023834 	.word	0x40023834
 800084c:	50060800 	.word	0x50060800

08000850 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a3c      	ldr	r2, [pc, #240]	; (8000960 <HAL_UART_MspInit+0x110>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d145      	bne.n	80008fe <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <HAL_UART_MspInit+0x114>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PB7     ------> USART1_RX
		 PA9     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ca:	2307      	movs	r3, #7
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4824      	ldr	r0, [pc, #144]	; (8000968 <HAL_UART_MspInit+0x118>)
 80008d6:	f000 fd41 	bl	800135c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008de:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ec:	2307      	movs	r3, #7
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <HAL_UART_MspInit+0x11c>)
 80008f8:	f000 fd30 	bl	800135c <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 80008fc:	e02c      	b.n	8000958 <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x120>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d127      	bne.n	8000958 <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_UART_MspInit+0x114>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <HAL_UART_MspInit+0x114>)
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	6453      	str	r3, [r2, #68]	; 0x44
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_UART_MspInit+0x114>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000948:	2308      	movs	r3, #8
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <HAL_UART_MspInit+0x124>)
 8000954:	f000 fd02 	bl	800135c <HAL_GPIO_Init>
}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40011000 	.word	0x40011000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40020000 	.word	0x40020000
 8000970:	40011400 	.word	0x40011400
 8000974:	40020800 	.word	0x40020800

08000978 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 8000980:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009bc:	f001 fa42 	bl	8001e44 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <MX_USART1_UART_Init+0x50>
	{
		while (1);
 80009c6:	e7fe      	b.n	80009c6 <MX_USART1_UART_Init+0x4e>
	}
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000128 	.word	0x20000128
 80009d0:	40011000 	.word	0x40011000

080009d4 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b092      	sub	sp, #72	; 0x48
 80009d8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 80009f4:	2319      	movs	r3, #25
 80009f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 80009f8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a02:	2309      	movs	r3, #9
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a06:	463b      	mov	r3, r7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fde9 	bl	80015e0 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d000      	beq.n	8000a1e <SystemClock_Config+0x4a>
	{
		while (1)
 8000a1c:	e7fe      	b.n	8000a1c <SystemClock_Config+0x48>
			;
		}
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000a1e:	f000 fda3 	bl	8001568 <HAL_PWREx_EnableOverDrive>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d000      	beq.n	8000a32 <SystemClock_Config+0x5e>
	{
		while (1)
 8000a30:	e7fe      	b.n	8000a30 <SystemClock_Config+0x5c>
			;
		}
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000a32:	230f      	movs	r3, #15
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2302      	movs	r3, #2
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4e:	2107      	movs	r1, #7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 ffbf 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d000      	beq.n	8000a66 <SystemClock_Config+0x92>
	{
		while (1)
 8000a64:	e7fe      	b.n	8000a64 <SystemClock_Config+0x90>
		{
			;
		}
	}
}
 8000a66:	bf00      	nop
 8000a68:	3748      	adds	r7, #72	; 0x48
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000a76:	f000 fb49 	bl	800110c <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MPU_Config+0x84>)
 8000a80:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000a82:	2311      	movs	r3, #17
 8000a84:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a86:	2303      	movs	r3, #3
 8000a88:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fb51 	bl	8001150 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000ab2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ab6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000ab8:	2316      	movs	r3, #22
 8000aba:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000abc:	2303      	movs	r3, #3
 8000abe:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000adc:	463b      	mov	r3, r7
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fb36 	bl	8001150 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f000 fb21 	bl	800112c <HAL_MPU_Enable>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20010000 	.word	0x20010000

08000af8 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000afc:	f7ff fe34 	bl	8000768 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000b00:	f7ff fe52 	bl	80007a8 <SCB_EnableDCache>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <hardware_setup>:

void hardware_setup(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000b0c:	f7ff ffb0 	bl	8000a70 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000b10:	f7ff fff2 	bl	8000af8 <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000b14:	f000 fa6c 	bl	8000ff0 <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000b18:	f7ff ff5c 	bl	80009d4 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000b1c:	f000 f9de 	bl	8000edc <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000b20:	f7ff ff2a 	bl	8000978 <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000b24:	f7ff fe80 	bl	8000828 <hardware_rand_initialize>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <main>:
ULONG           thread_0_counter;

VOID hardware_setup(void);

int main(int argc, char ** argv)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    /* Setup the hardware. */
    hardware_setup();
 8000b36:	f7ff ffe7 	bl	8000b08 <hardware_setup>

    /* Enter the ThreadX kernel.  */
    tx_kernel_enter();
 8000b3a:	f007 fc47 	bl	80083cc <_tx_initialize_kernel_enter>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <tx_application_define>:


/* Define what the initial system looks like.  */

void    tx_application_define(void *first_unused_memory)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af08      	add	r7, sp, #32
 8000b4e:	6078      	str	r0, [r7, #4]

CHAR    *pointer;

    /* Put first available memory address into a character pointer.  */
    pointer =  (CHAR *) first_unused_memory;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60fb      	str	r3, [r7, #12]

    /* Put system definition stuff in here, e.g. thread creates and other assorted
       create information.  */

    /* Create the main thread.  */
    tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0,  
 8000b54:	23c8      	movs	r3, #200	; 0xc8
 8000b56:	9306      	str	r3, [sp, #24]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <tx_application_define+0x50>)
 8000b76:	4909      	ldr	r1, [pc, #36]	; (8000b9c <tx_application_define+0x54>)
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <tx_application_define+0x58>)
 8000b7a:	f008 fa51 	bl	8009020 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);
    pointer = pointer + DEMO_STACK_SIZE;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000b84:	60fb      	str	r3, [r7, #12]

    /* Save the memory pointer for the RAM disk.  */
    ram_disk_memory =  pointer;
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <tx_application_define+0x5c>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6013      	str	r3, [r2, #0]

    /* Initialize FileX.  */
    fx_system_initialize();
 8000b8c:	f001 fdd6 	bl	800273c <_fx_system_initialize>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08000ba9 	.word	0x08000ba9
 8000b9c:	08009658 	.word	0x08009658
 8000ba0:	20000598 	.word	0x20000598
 8000ba4:	20000590 	.word	0x20000590

08000ba8 <thread_0_entry>:



void    thread_0_entry(ULONG thread_input)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
 8000bae:	6078      	str	r0, [r7, #4]
CHAR        local_buffer[30];


    /* Format the RAM disk - the memory for the RAM disk was setup in 
       tx_application_define above.  */
    fx_media_format(&ram_disk, 
 8000bb0:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <thread_0_entry+0x13c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9308      	str	r3, [sp, #32]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9307      	str	r3, [sp, #28]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	9306      	str	r3, [sp, #24]
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	9305      	str	r3, [sp, #20]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9304      	str	r3, [sp, #16]
 8000bce:	2320      	movs	r3, #32
 8000bd0:	9303      	str	r3, [sp, #12]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9302      	str	r3, [sp, #8]
 8000bd6:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <thread_0_entry+0x140>)
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	4b42      	ldr	r3, [pc, #264]	; (8000cec <thread_0_entry+0x144>)
 8000be2:	4943      	ldr	r1, [pc, #268]	; (8000cf0 <thread_0_entry+0x148>)
 8000be4:	4843      	ldr	r0, [pc, #268]	; (8000cf4 <thread_0_entry+0x14c>)
 8000be6:	f001 ffe1 	bl	8002bac <_fxe_media_format>
    /* Loop to repeat the demo over and over!  */
    do
    {

        /* Open the RAM disk.  */
        status =  fx_media_open(&ram_disk, "RAM DISK", _fx_ram_driver, ram_disk_memory, media_memory, sizeof(media_memory));
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <thread_0_entry+0x13c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8000bf2:	9302      	str	r3, [sp, #8]
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	; (8000cec <thread_0_entry+0x144>)
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	4a3b      	ldr	r2, [pc, #236]	; (8000cf0 <thread_0_entry+0x148>)
 8000c02:	493d      	ldr	r1, [pc, #244]	; (8000cf8 <thread_0_entry+0x150>)
 8000c04:	483b      	ldr	r0, [pc, #236]	; (8000cf4 <thread_0_entry+0x14c>)
 8000c06:	f001 fff5 	bl	8002bf4 <_fxe_media_open>
 8000c0a:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the media open status.  */
        if (status != FX_SUCCESS)
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d153      	bne.n	8000cba <thread_0_entry+0x112>
            /* Error, break the loop!  */
            break;
        }

        /* Create a file called TEST.TXT in the root directory.  */
        status =  fx_file_create(&ram_disk, "TEST.TXT");
 8000c12:	493a      	ldr	r1, [pc, #232]	; (8000cfc <thread_0_entry+0x154>)
 8000c14:	4837      	ldr	r0, [pc, #220]	; (8000cf4 <thread_0_entry+0x14c>)
 8000c16:	f001 fee3 	bl	80029e0 <_fxe_file_create>
 8000c1a:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the create status.  */
        if (status != FX_SUCCESS)
 8000c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <thread_0_entry+0x80>
        {

            /* Check for an already created status. This is expected on the
               second pass of this loop!  */
            if (status != FX_ALREADY_CREATED)
 8000c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c24:	2b0b      	cmp	r3, #11
 8000c26:	d14a      	bne.n	8000cbe <thread_0_entry+0x116>
                break;
            }
        }

        /* Open the test file.  */
        status =  fx_file_open(&ram_disk, &my_file, "TEST.TXT", FX_OPEN_FOR_WRITE);
 8000c28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <thread_0_entry+0x154>)
 8000c32:	4933      	ldr	r1, [pc, #204]	; (8000d00 <thread_0_entry+0x158>)
 8000c34:	482f      	ldr	r0, [pc, #188]	; (8000cf4 <thread_0_entry+0x14c>)
 8000c36:	f001 feed 	bl	8002a14 <_fxe_file_open>
 8000c3a:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file open status.  */
        if (status != FX_SUCCESS)
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d13f      	bne.n	8000cc2 <thread_0_entry+0x11a>
            /* Error opening file, break the loop.  */
            break;
        }

        /* Seek to the beginning of the test file.  */
        status =  fx_file_seek(&my_file, 0);
 8000c42:	2100      	movs	r1, #0
 8000c44:	482e      	ldr	r0, [pc, #184]	; (8000d00 <thread_0_entry+0x158>)
 8000c46:	f001 ff5d 	bl	8002b04 <_fxe_file_seek>
 8000c4a:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file seek status.  */
        if (status != FX_SUCCESS)
 8000c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d139      	bne.n	8000cc6 <thread_0_entry+0x11e>
            /* Error performing file seek, break the loop.  */
            break;
        }

        /* Write a string to the test file.  */
        status =  fx_file_write(&my_file, " ABCDEFGHIJKLMNOPQRSTUVWXYZ\n", 28);
 8000c52:	221c      	movs	r2, #28
 8000c54:	492b      	ldr	r1, [pc, #172]	; (8000d04 <thread_0_entry+0x15c>)
 8000c56:	482a      	ldr	r0, [pc, #168]	; (8000d00 <thread_0_entry+0x158>)
 8000c58:	f001 ff6e 	bl	8002b38 <_fxe_file_write>
 8000c5c:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file write status.  */
        if (status != FX_SUCCESS)
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d132      	bne.n	8000cca <thread_0_entry+0x122>
            /* Error writing to a file, break the loop.  */
            break;
        }

        /* Seek to the beginning of the test file.  */
        status =  fx_file_seek(&my_file, 0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	4826      	ldr	r0, [pc, #152]	; (8000d00 <thread_0_entry+0x158>)
 8000c68:	f001 ff4c 	bl	8002b04 <_fxe_file_seek>
 8000c6c:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file seek status.  */
        if (status != FX_SUCCESS)
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d12c      	bne.n	8000cce <thread_0_entry+0x126>
            /* Error performing file seek, break the loop.  */
            break;
        }

        /* Read the first 28 bytes of the test file.  */
        status =  fx_file_read(&my_file, local_buffer, 28, &actual);
 8000c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c78:	f107 0108 	add.w	r1, r7, #8
 8000c7c:	221c      	movs	r2, #28
 8000c7e:	4820      	ldr	r0, [pc, #128]	; (8000d00 <thread_0_entry+0x158>)
 8000c80:	f001 ff1c 	bl	8002abc <_fxe_file_read>
 8000c84:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file read status.  */
        if ((status != FX_SUCCESS) || (actual != 28))
 8000c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d126      	bne.n	8000cda <thread_0_entry+0x132>
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	2b1c      	cmp	r3, #28
 8000c90:	d123      	bne.n	8000cda <thread_0_entry+0x132>
            /* Error reading file, break the loop.  */
            break;
        }

        /* Close the test file.  */
        status =  fx_file_close(&my_file);
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <thread_0_entry+0x158>)
 8000c94:	f001 fe8a 	bl	80029ac <_fxe_file_close>
 8000c98:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the file close status.  */
        if (status != FX_SUCCESS)
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d118      	bne.n	8000cd2 <thread_0_entry+0x12a>
            /* Error closing the file, break the loop.  */
            break;
        }

        /* Close the media.  */
        status =  fx_media_close(&ram_disk);
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <thread_0_entry+0x14c>)
 8000ca2:	f001 ff69 	bl	8002b78 <_fxe_media_close>
 8000ca6:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the media close status.  */
        if (status != FX_SUCCESS)
 8000ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d113      	bne.n	8000cd6 <thread_0_entry+0x12e>
            break;
        }

        /* Increment the thread counter, which represents the number
           of successful passes through this loop.  */
        thread_0_counter++;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <thread_0_entry+0x160>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <thread_0_entry+0x160>)
 8000cb6:	6013      	str	r3, [r2, #0]
        status =  fx_media_open(&ram_disk, "RAM DISK", _fx_ram_driver, ram_disk_memory, media_memory, sizeof(media_memory));
 8000cb8:	e797      	b.n	8000bea <thread_0_entry+0x42>
            break;
 8000cba:	bf00      	nop
 8000cbc:	e00c      	b.n	8000cd8 <thread_0_entry+0x130>
                break;
 8000cbe:	bf00      	nop
 8000cc0:	e00a      	b.n	8000cd8 <thread_0_entry+0x130>
            break;
 8000cc2:	bf00      	nop
 8000cc4:	e008      	b.n	8000cd8 <thread_0_entry+0x130>
            break;
 8000cc6:	bf00      	nop
 8000cc8:	e006      	b.n	8000cd8 <thread_0_entry+0x130>
            break;
 8000cca:	bf00      	nop
 8000ccc:	e004      	b.n	8000cd8 <thread_0_entry+0x130>
            break;
 8000cce:	bf00      	nop
 8000cd0:	e002      	b.n	8000cd8 <thread_0_entry+0x130>
            break;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <thread_0_entry+0x130>
            break;
 8000cd6:	bf00      	nop

    } while (1);

    /* If we get here the FileX test failed!  */
    return;
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
}
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000590 	.word	0x20000590
 8000ce8:	08009664 	.word	0x08009664
 8000cec:	200001a8 	.word	0x200001a8
 8000cf0:	08002665 	.word	0x08002665
 8000cf4:	20000660 	.word	0x20000660
 8000cf8:	08009670 	.word	0x08009670
 8000cfc:	0800967c 	.word	0x0800967c
 8000d00:	200003b0 	.word	0x200003b0
 8000d04:	08009688 	.word	0x08009688
 8000d08:	200003a8 	.word	0x200003a8

08000d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0b      	ldr	r4, [pc, #44]	; (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d36:	f001 fb25 	bl	8002384 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f008 fc49 	bl	80095d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fef5 	bl	8000b2c <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d50:	08009728 	.word	0x08009728
  ldr r2, =_sbss
 8000d54:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d58:	20003244 	.word	0x20003244

08000d5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>

08000d5e <HardFault_Handler>:
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler>

08000d60 <MemManage_Handler>:

MemManage_Handler:
  b MemManage_Handler
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler>

08000d62 <BusFault_Handler>:

BusFault_Handler:
  b BusFault_Handler
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler>

08000d64 <UsageFault_Handler>:

UsageFault_Handler:
  b UsageFault_Handler
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler>
	...

08000d68 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 8000d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
{
 8000d72:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
{
 8000d76:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 8000d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 8000d7a:	2001      	movs	r0, #1
{
 8000d7c:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 8000d7e:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 8000d80:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 8000d82:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 8000d84:	9201      	str	r2, [sp, #4]
 8000d86:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 8000d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d92:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000d96:	9202      	str	r2, [sp, #8]
 8000d98:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9c:	f042 0204 	orr.w	r2, r2, #4
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
 8000da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da4:	f002 0204 	and.w	r2, r2, #4
 8000da8:	9203      	str	r2, [sp, #12]
 8000daa:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dae:	432a      	orrs	r2, r5
 8000db0:	631a      	str	r2, [r3, #48]	; 0x30
 8000db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db4:	402a      	ands	r2, r5
 8000db6:	9204      	str	r2, [sp, #16]
 8000db8:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dbc:	f042 0210 	orr.w	r2, r2, #16
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc4:	f002 0210 	and.w	r2, r2, #16
 8000dc8:	9205      	str	r2, [sp, #20]
 8000dca:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dce:	f042 0220 	orr.w	r2, r2, #32
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd6:	f002 0220 	and.w	r2, r2, #32
 8000dda:	9206      	str	r2, [sp, #24]
 8000ddc:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
 8000de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000dec:	9207      	str	r2, [sp, #28]
 8000dee:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000df8:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 8000dfc:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8000e00:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e06:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e08:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000e0a:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0c:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 8000e0e:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000e12:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e14:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000e16:	f000 faa1 	bl	800135c <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8000e1a:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4827      	ldr	r0, [pc, #156]	; (8000ec0 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8000e22:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000e24:	f000 fa9a 	bl	800135c <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8000e28:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8000e30:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e32:	f000 fa93 	bl	800135c <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 8000e36:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	4822      	ldr	r0, [pc, #136]	; (8000ec8 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 8000e3e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000e40:	f000 fa8c 	bl	800135c <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8000e44:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e48:	4621      	mov	r1, r4
 8000e4a:	4820      	ldr	r0, [pc, #128]	; (8000ecc <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8000e4c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e4e:	f000 fa85 	bl	800135c <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8000e52:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000e54:	4621      	mov	r1, r4
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8000e58:	4c1e      	ldr	r4, [pc, #120]	; (8000ed4 <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8000e5a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000e5c:	f000 fa7e 	bl	800135c <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e60:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e64:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e6e:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8000e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e74:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e7c:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8000e7e:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e82:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e84:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 8000e86:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000e88:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e8a:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e8c:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 8000e8e:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e90:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e92:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000e94:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8000e96:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 8000e9a:	f000 fa1d 	bl	80012d8 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f000 f97e 	bl	80011a0 <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000ea4:	462a      	mov	r2, r5
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	2038      	movs	r0, #56	; 0x38
 8000eaa:	f000 f8eb 	bl	8001084 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000eae:	2038      	movs	r0, #56	; 0x38
 8000eb0:	f000 f91e 	bl	80010f0 <HAL_NVIC_EnableIRQ>
}
 8000eb4:	b00e      	add	sp, #56	; 0x38
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40021c00 	.word	0x40021c00
 8000ed4:	200000c8 	.word	0x200000c8
 8000ed8:	40026410 	.word	0x40026410

08000edc <BSP_SDRAM_Init>:
{
 8000edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000ee0:	483d      	ldr	r0, [pc, #244]	; (8000fd8 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 8000ee2:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000ee4:	4d3d      	ldr	r5, [pc, #244]	; (8000fdc <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ee6:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 8000ee8:	4c3d      	ldr	r4, [pc, #244]	; (8000fe0 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8000eea:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8000eee:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 8000ef2:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 8000ef6:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 8000efc:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f00:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 8000f04:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f06:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f08:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 8000f0e:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 8000f10:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f12:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f14:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 8000f16:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 8000f1a:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 8000f1e:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f22:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f24:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f26:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8000f2a:	f8c5 8010 	str.w	r8, [r5, #16]
 8000f2e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8000fe8 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f32:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 8000f36:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f3a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f3e:	f7ff ff13 	bl	8000d68 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f42:	4621      	mov	r1, r4
 8000f44:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f46:	4c27      	ldr	r4, [pc, #156]	; (8000fe4 <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f48:	f000 fe88 	bl	8001c5c <HAL_SDRAM_Init>
 8000f4c:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f54:	bf18      	it	ne
 8000f56:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f58:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 8000f5a:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f5c:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f60:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 8000f64:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f66:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 8000f68:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f6a:	f000 fe99 	bl	8001ca0 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f000 f862 	bl	8001038 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f74:	4621      	mov	r1, r4
 8000f76:	4628      	mov	r0, r5
 8000f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f7c:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 8000f80:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f84:	f000 fe8c 	bl	8001ca0 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000f88:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 8000f8c:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4628      	mov	r0, r5
 8000f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000f96:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 8000f9a:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f9c:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 8000fa0:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fa2:	f000 fe7d 	bl	8001ca0 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 8000fa6:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000faa:	4621      	mov	r1, r4
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 8000fb2:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 8000fb4:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fb6:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 8000fba:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fbe:	f000 fe6f 	bl	8001ca0 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f240 6103 	movw	r1, #1539	; 0x603
 8000fc8:	f000 fe84 	bl	8001cd4 <HAL_SDRAM_ProgramRefreshRate>
}
 8000fcc:	f89b 0000 	ldrb.w	r0, [fp]
 8000fd0:	b003      	add	sp, #12
 8000fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd6:	bf00      	nop
 8000fd8:	a0000140 	.word	0xa0000140
 8000fdc:	20002b18 	.word	0x20002b18
 8000fe0:	200000ac 	.word	0x200000ac
 8000fe4:	2000009c 	.word	0x2000009c
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
{
 8000ff4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	f000 f82d 	bl	800105c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	200f      	movs	r0, #15
 8001004:	f000 fe7a 	bl	8001cfc <HAL_InitTick>
  HAL_MspInit();
 8001008:	f7ff fff0 	bl	8000fec <HAL_MspInit>
}
 800100c:	2000      	movs	r0, #0
 800100e:	bd08      	pop	{r3, pc}
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x10>)
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_IncTick+0x14>)
 8001018:	6811      	ldr	r1, [r2, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	440b      	add	r3, r1
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20002b4c 	.word	0x20002b4c
 8001028:	20000001 	.word	0x20000001

0800102c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <HAL_GetTick+0x8>)
 800102e:	6818      	ldr	r0, [r3, #0]
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20002b4c 	.word	0x20002b4c

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff6 	bl	800102c <HAL_GetTick>
 8001040:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	1c63      	adds	r3, r4, #1
 8001044:	d002      	beq.n	800104c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_Delay+0x20>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	42a0      	cmp	r0, r4
 8001054:	d3fa      	bcc.n	800104c <HAL_Delay+0x14>
  {
  }
}
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000001 	.word	0x20000001

0800105c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105e:	0200      	lsls	r0, r0, #8
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001062:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800106e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001074:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001076:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001078:	60c8      	str	r0, [r1, #12]
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	05fa0000 	.word	0x05fa0000

08001084 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_NVIC_SetPriority+0x60>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	2d04      	cmp	r5, #4
 8001096:	bf28      	it	cs
 8001098:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	2c06      	cmp	r4, #6
 800109c:	d918      	bls.n	80010d0 <HAL_NVIC_SetPriority+0x4c>
 800109e:	3b03      	subs	r3, #3
 80010a0:	f04f 34ff 	mov.w	r4, #4294967295
 80010a4:	409c      	lsls	r4, r3
 80010a6:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80010ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	fa02 f205 	lsl.w	r2, r2, r5
 80010b4:	ea21 0102 	bic.w	r1, r1, r2
 80010b8:	fa01 f203 	lsl.w	r2, r1, r3
 80010bc:	ea42 0204 	orr.w	r2, r2, r4
 80010c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80010c4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80010c6:	db06      	blt.n	80010d6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_NVIC_SetPriority+0x64>)
 80010ca:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010cc:	bc30      	pop	{r4, r5}
 80010ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d0:	2400      	movs	r4, #0
 80010d2:	4623      	mov	r3, r4
 80010d4:	e7e9      	b.n	80010aa <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	f000 000f 	and.w	r0, r0, #15
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_NVIC_SetPriority+0x68>)
 80010dc:	541a      	strb	r2, [r3, r0]
 80010de:	bc30      	pop	{r4, r5}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	e000e400 	.word	0xe000e400
 80010ec:	e000ed14 	.word	0xe000ed14

080010f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010f0:	2800      	cmp	r0, #0
 80010f2:	db07      	blt.n	8001104 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f4:	f000 011f 	and.w	r1, r0, #31
 80010f8:	2301      	movs	r3, #1
 80010fa:	0940      	lsrs	r0, r0, #5
 80010fc:	4a02      	ldr	r2, [pc, #8]	; (8001108 <HAL_NVIC_EnableIRQ+0x18>)
 80010fe:	408b      	lsls	r3, r1
 8001100:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800110c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001112:	2000      	movs	r0, #0
 8001114:	4904      	ldr	r1, [pc, #16]	; (8001128 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001116:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111c:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800111e:	6048      	str	r0, [r1, #4]
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	e000ed90 	.word	0xe000ed90

0800112c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800112e:	f040 0001 	orr.w	r0, r0, #1
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_MPU_Enable+0x20>)
 8001134:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001136:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800113e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001142:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	e000ed90 	.word	0xe000ed90

08001150 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_MPU_ConfigRegion+0x4c>)
 8001152:	7843      	ldrb	r3, [r0, #1]
 8001154:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8001156:	7801      	ldrb	r1, [r0, #0]
 8001158:	b911      	cbnz	r1, 8001160 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800115a:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800115c:	6111      	str	r1, [r2, #16]
 800115e:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001160:	6843      	ldr	r3, [r0, #4]
{
 8001162:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001164:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001166:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001168:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800116a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800116c:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800116e:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001170:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001174:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001176:	430b      	orrs	r3, r1
 8001178:	7a01      	ldrb	r1, [r0, #8]
 800117a:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800117e:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001180:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001184:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001186:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800118a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800118e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001192:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 8001196:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001198:	6113      	str	r3, [r2, #16]
}
 800119a:	4770      	bx	lr
 800119c:	e000ed90 	.word	0xe000ed90

080011a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ff42 	bl	800102c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011a8:	2c00      	cmp	r4, #0
 80011aa:	d053      	beq.n	8001254 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ac:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ae:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80011b0:	2100      	movs	r1, #0
 80011b2:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80011b8:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80011ba:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c4:	e005      	b.n	80011d2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c6:	f7ff ff31 	bl	800102c <HAL_GetTick>
 80011ca:	1b40      	subs	r0, r0, r5
 80011cc:	2805      	cmp	r0, #5
 80011ce:	d83a      	bhi.n	8001246 <HAL_DMA_Init+0xa6>
 80011d0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	07d1      	lsls	r1, r2, #31
 80011d6:	d4f6      	bmi.n	80011c6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80011dc:	68e1      	ldr	r1, [r4, #12]
 80011de:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 80011e0:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e8:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ea:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ec:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f2:	4d35      	ldr	r5, [pc, #212]	; (80012c8 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f4:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f6:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fe:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001200:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001204:	d028      	beq.n	8001258 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001208:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800120a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800120e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4d2e      	ldr	r5, [pc, #184]	; (80012cc <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001214:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001216:	3a10      	subs	r2, #16
 8001218:	492d      	ldr	r1, [pc, #180]	; (80012d0 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800121a:	482e      	ldr	r0, [pc, #184]	; (80012d4 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800121c:	fba5 5202 	umull	r5, r2, r5, r2
 8001220:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001222:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001224:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001226:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001228:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 800122a:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122c:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001230:	bf88      	it	hi
 8001232:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001234:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001236:	4083      	lsls	r3, r0
  return HAL_OK;
 8001238:	4610      	mov	r0, r2
 800123a:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123c:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001240:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001246:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001248:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800124a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
}
 8001256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001258:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800125c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800125e:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001262:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001266:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8001268:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800126a:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800126c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001270:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001272:	2d00      	cmp	r5, #0
 8001274:	d0cc      	beq.n	8001210 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001276:	b17e      	cbz	r6, 8001298 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001278:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800127c:	d016      	beq.n	80012ac <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800127e:	2f02      	cmp	r7, #2
 8001280:	d903      	bls.n	800128a <HAL_DMA_Init+0xea>
 8001282:	2f03      	cmp	r7, #3
 8001284:	d1c4      	bne.n	8001210 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001286:	01ea      	lsls	r2, r5, #7
 8001288:	d5c2      	bpl.n	8001210 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800128a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800128c:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800128e:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001290:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001292:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001298:	2f01      	cmp	r7, #1
 800129a:	d003      	beq.n	80012a4 <HAL_DMA_Init+0x104>
 800129c:	d3f3      	bcc.n	8001286 <HAL_DMA_Init+0xe6>
 800129e:	2f02      	cmp	r7, #2
 80012a0:	d1b6      	bne.n	8001210 <HAL_DMA_Init+0x70>
 80012a2:	e7f0      	b.n	8001286 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012a4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80012a8:	d1b2      	bne.n	8001210 <HAL_DMA_Init+0x70>
 80012aa:	e7ee      	b.n	800128a <HAL_DMA_Init+0xea>
    switch (tmp)
 80012ac:	2f03      	cmp	r7, #3
 80012ae:	d8af      	bhi.n	8001210 <HAL_DMA_Init+0x70>
 80012b0:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_DMA_Init+0x118>)
 80012b2:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	0800128b 	.word	0x0800128b
 80012bc:	08001287 	.word	0x08001287
 80012c0:	0800128b 	.word	0x0800128b
 80012c4:	080012a5 	.word	0x080012a5
 80012c8:	f010803f 	.word	0xf010803f
 80012cc:	aaaaaaab 	.word	0xaaaaaaab
 80012d0:	fffffc00 	.word	0xfffffc00
 80012d4:	080096a8 	.word	0x080096a8

080012d8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80012d8:	2800      	cmp	r0, #0
 80012da:	d035      	beq.n	8001348 <HAL_DMA_DeInit+0x70>
 80012dc:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80012de:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80012e2:	b2c0      	uxtb	r0, r0
 80012e4:	2802      	cmp	r0, #2
 80012e6:	d031      	beq.n	800134c <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 80012e8:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 80012ea:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012ec:	b2d1      	uxtb	r1, r2
{
 80012ee:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012f0:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 80012f2:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012f4:	4d16      	ldr	r5, [pc, #88]	; (8001350 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80012f6:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 80012f8:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012fc:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001300:	4d14      	ldr	r5, [pc, #80]	; (8001354 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 8001302:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001304:	0909      	lsrs	r1, r1, #4
 8001306:	4c14      	ldr	r4, [pc, #80]	; (8001358 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 8001308:	6010      	str	r0, [r2, #0]
 800130a:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800130c:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 800130e:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001310:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 8001314:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001316:	bf88      	it	hi
 8001318:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 800131a:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800131c:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 800131e:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8001320:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001322:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 8001324:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001326:	65dd      	str	r5, [r3, #92]	; 0x5c
 8001328:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 800132a:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132c:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001338:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800133c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001340:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 8001344:	bc70      	pop	{r4, r5, r6}
 8001346:	4770      	bx	lr
    return HAL_ERROR;
 8001348:	2001      	movs	r0, #1
 800134a:	4770      	bx	lr
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	aaaaaaab 	.word	0xaaaaaaab
 8001354:	080096a8 	.word	0x080096a8
 8001358:	fffffc00 	.word	0xfffffc00

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	4688      	mov	r8, r1
 8001362:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001364:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001564 <HAL_GPIO_Init+0x208>
 800136e:	e003      	b.n	8001378 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001370:	3401      	adds	r4, #1
 8001372:	2c10      	cmp	r4, #16
 8001374:	f000 80b6 	beq.w	80014e4 <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 8001378:	2301      	movs	r3, #1
 800137a:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137c:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 8001380:	4293      	cmp	r3, r2
 8001382:	d1f5      	bne.n	8001370 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001388:	0067      	lsls	r7, r4, #1
 800138a:	2103      	movs	r1, #3
 800138c:	f025 0c10 	bic.w	ip, r5, #16
 8001390:	40b9      	lsls	r1, r7
 8001392:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001396:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	2b01      	cmp	r3, #1
 800139a:	d810      	bhi.n	80013be <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 800139c:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800139e:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013a2:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 80013a6:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013aa:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80013ac:	40be      	lsls	r6, r7
 80013ae:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80013b2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80013b4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b6:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013ba:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80013bc:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80013be:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013c4:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013c8:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013cc:	fa06 f607 	lsl.w	r6, r6, r7
 80013d0:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 80013d4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d6:	d115      	bne.n	8001404 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80013d8:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013da:	f004 0c07 	and.w	ip, r4, #7
 80013de:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013e2:	f8d8 6010 	ldr.w	r6, [r8, #16]
 80013e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80013ee:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013f2:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f6:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013fa:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013fe:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 8001402:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 8001404:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001406:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800140a:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800140c:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140e:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001410:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 8001414:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001416:	d5ab      	bpl.n	8001370 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <HAL_GPIO_Init+0x1e0>)
 800141a:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800141e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8001424:	4619      	mov	r1, r3
 8001426:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800142a:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001432:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001436:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001438:	644f      	str	r7, [r1, #68]	; 0x44
 800143a:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800143c:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001444:	9701      	str	r7, [sp, #4]
 8001446:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001448:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800144a:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800144e:	4f3c      	ldr	r7, [pc, #240]	; (8001540 <HAL_GPIO_Init+0x1e4>)
 8001450:	42b8      	cmp	r0, r7
 8001452:	d020      	beq.n	8001496 <HAL_GPIO_Init+0x13a>
 8001454:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001458:	42b8      	cmp	r0, r7
 800145a:	d046      	beq.n	80014ea <HAL_GPIO_Init+0x18e>
 800145c:	4f39      	ldr	r7, [pc, #228]	; (8001544 <HAL_GPIO_Init+0x1e8>)
 800145e:	42b8      	cmp	r0, r7
 8001460:	d048      	beq.n	80014f4 <HAL_GPIO_Init+0x198>
 8001462:	4f39      	ldr	r7, [pc, #228]	; (8001548 <HAL_GPIO_Init+0x1ec>)
 8001464:	42b8      	cmp	r0, r7
 8001466:	d04a      	beq.n	80014fe <HAL_GPIO_Init+0x1a2>
 8001468:	4f38      	ldr	r7, [pc, #224]	; (800154c <HAL_GPIO_Init+0x1f0>)
 800146a:	42b8      	cmp	r0, r7
 800146c:	d04c      	beq.n	8001508 <HAL_GPIO_Init+0x1ac>
 800146e:	4f38      	ldr	r7, [pc, #224]	; (8001550 <HAL_GPIO_Init+0x1f4>)
 8001470:	42b8      	cmp	r0, r7
 8001472:	d053      	beq.n	800151c <HAL_GPIO_Init+0x1c0>
 8001474:	4f37      	ldr	r7, [pc, #220]	; (8001554 <HAL_GPIO_Init+0x1f8>)
 8001476:	42b8      	cmp	r0, r7
 8001478:	d055      	beq.n	8001526 <HAL_GPIO_Init+0x1ca>
 800147a:	4f37      	ldr	r7, [pc, #220]	; (8001558 <HAL_GPIO_Init+0x1fc>)
 800147c:	42b8      	cmp	r0, r7
 800147e:	d048      	beq.n	8001512 <HAL_GPIO_Init+0x1b6>
 8001480:	4f36      	ldr	r7, [pc, #216]	; (800155c <HAL_GPIO_Init+0x200>)
 8001482:	42b8      	cmp	r0, r7
 8001484:	d054      	beq.n	8001530 <HAL_GPIO_Init+0x1d4>
 8001486:	4f36      	ldr	r7, [pc, #216]	; (8001560 <HAL_GPIO_Init+0x204>)
 8001488:	42b8      	cmp	r0, r7
 800148a:	bf0c      	ite	eq
 800148c:	2709      	moveq	r7, #9
 800148e:	270a      	movne	r7, #10
 8001490:	fa07 f303 	lsl.w	r3, r7, r3
 8001494:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8001496:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001498:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 800149a:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149e:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 80014a0:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80014a4:	bf54      	ite	pl
 80014a6:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80014a8:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014aa:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 80014ac:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 80014b0:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	bf54      	ite	pl
 80014b6:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80014b8:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ba:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 80014bc:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 80014c0:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	bf54      	ite	pl
 80014c6:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80014c8:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 80014cc:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 80014d0:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	bf54      	ite	pl
 80014d6:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80014d8:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80014da:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80014dc:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014e0:	f47f af4a 	bne.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	b003      	add	sp, #12
 80014e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ea:	2701      	movs	r7, #1
 80014ec:	fa07 f303 	lsl.w	r3, r7, r3
 80014f0:	4319      	orrs	r1, r3
 80014f2:	e7d0      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 80014f4:	2702      	movs	r7, #2
 80014f6:	fa07 f303 	lsl.w	r3, r7, r3
 80014fa:	4319      	orrs	r1, r3
 80014fc:	e7cb      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 80014fe:	2703      	movs	r7, #3
 8001500:	fa07 f303 	lsl.w	r3, r7, r3
 8001504:	4319      	orrs	r1, r3
 8001506:	e7c6      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 8001508:	2704      	movs	r7, #4
 800150a:	fa07 f303 	lsl.w	r3, r7, r3
 800150e:	4319      	orrs	r1, r3
 8001510:	e7c1      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 8001512:	2707      	movs	r7, #7
 8001514:	fa07 f303 	lsl.w	r3, r7, r3
 8001518:	4319      	orrs	r1, r3
 800151a:	e7bc      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 800151c:	2705      	movs	r7, #5
 800151e:	fa07 f303 	lsl.w	r3, r7, r3
 8001522:	4319      	orrs	r1, r3
 8001524:	e7b7      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 8001526:	2706      	movs	r7, #6
 8001528:	fa07 f303 	lsl.w	r3, r7, r3
 800152c:	4319      	orrs	r1, r3
 800152e:	e7b2      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 8001530:	2708      	movs	r7, #8
 8001532:	fa07 f303 	lsl.w	r3, r7, r3
 8001536:	4319      	orrs	r1, r3
 8001538:	e7ad      	b.n	8001496 <HAL_GPIO_Init+0x13a>
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40021400 	.word	0x40021400
 8001554:	40021800 	.word	0x40021800
 8001558:	40021c00 	.word	0x40021c00
 800155c:	40022000 	.word	0x40022000
 8001560:	40022400 	.word	0x40022400
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800156e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001572:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001576:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800157a:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800158a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800158c:	f7ff fd4e 	bl	800102c <HAL_GetTick>
 8001590:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001592:	e005      	b.n	80015a0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001594:	f7ff fd4a 	bl	800102c <HAL_GetTick>
 8001598:	1b40      	subs	r0, r0, r5
 800159a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800159e:	d817      	bhi.n	80015d0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015a0:	6863      	ldr	r3, [r4, #4]
 80015a2:	03da      	lsls	r2, r3, #15
 80015a4:	d5f6      	bpl.n	8001594 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015a6:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a8:	4d0c      	ldr	r5, [pc, #48]	; (80015dc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ae:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80015b0:	f7ff fd3c 	bl	800102c <HAL_GetTick>
 80015b4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015b6:	e005      	b.n	80015c4 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b8:	f7ff fd38 	bl	800102c <HAL_GetTick>
 80015bc:	1b00      	subs	r0, r0, r4
 80015be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015c2:	d805      	bhi.n	80015d0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c4:	686b      	ldr	r3, [r5, #4]
 80015c6:	039b      	lsls	r3, r3, #14
 80015c8:	d5f6      	bpl.n	80015b8 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80015ca:	2000      	movs	r0, #0
}
 80015cc:	b003      	add	sp, #12
 80015ce:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
}
 80015d2:	b003      	add	sp, #12
 80015d4:	bd30      	pop	{r4, r5, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	f000 814c 	beq.w	800187e <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	6803      	ldr	r3, [r0, #0]
{
 80015e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ec:	07dd      	lsls	r5, r3, #31
{
 80015ee:	b082      	sub	sp, #8
 80015f0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	d535      	bpl.n	8001660 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f4:	49ac      	ldr	r1, [pc, #688]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 80015f6:	688a      	ldr	r2, [r1, #8]
 80015f8:	f002 020c 	and.w	r2, r2, #12
 80015fc:	2a04      	cmp	r2, #4
 80015fe:	f000 80ff 	beq.w	8001800 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	688a      	ldr	r2, [r1, #8]
 8001604:	f002 020c 	and.w	r2, r2, #12
 8001608:	2a08      	cmp	r2, #8
 800160a:	f000 80f5 	beq.w	80017f8 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d010      	beq.n	8001638 <HAL_RCC_OscConfig+0x58>
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 811a 	beq.w	8001850 <HAL_RCC_OscConfig+0x270>
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	4ba1      	ldr	r3, [pc, #644]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	f000 8164 	beq.w	80018f0 <HAL_RCC_OscConfig+0x310>
 8001628:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e004      	b.n	8001642 <HAL_RCC_OscConfig+0x62>
 8001638:	4a9b      	ldr	r2, [pc, #620]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fcf3 	bl	800102c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4d98      	ldr	r5, [pc, #608]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001648:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e005      	b.n	8001658 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fcee 	bl	800102c <HAL_GetTick>
 8001650:	1b80      	subs	r0, r0, r6
 8001652:	2864      	cmp	r0, #100	; 0x64
 8001654:	f200 80ef 	bhi.w	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	039a      	lsls	r2, r3, #14
 800165c:	d5f6      	bpl.n	800164c <HAL_RCC_OscConfig+0x6c>
 800165e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001660:	079f      	lsls	r7, r3, #30
 8001662:	d442      	bmi.n	80016ea <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001664:	071a      	lsls	r2, r3, #28
 8001666:	d517      	bpl.n	8001698 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001668:	6963      	ldr	r3, [r4, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80b1 	beq.w	80017d2 <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	4b8d      	ldr	r3, [pc, #564]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001672:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001674:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800167c:	f7ff fcd6 	bl	800102c <HAL_GetTick>
 8001680:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e005      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fcd2 	bl	800102c <HAL_GetTick>
 8001688:	1b80      	subs	r0, r0, r6
 800168a:	2802      	cmp	r0, #2
 800168c:	f200 80d3 	bhi.w	8001836 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001690:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001692:	079b      	lsls	r3, r3, #30
 8001694:	d5f6      	bpl.n	8001684 <HAL_RCC_OscConfig+0xa4>
 8001696:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	075d      	lsls	r5, r3, #29
 800169a:	d56b      	bpl.n	8001774 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169c:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a0:	00d0      	lsls	r0, r2, #3
 80016a2:	f100 80ee 	bmi.w	8001882 <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80016a8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x2cc>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	05d1      	lsls	r1, r2, #23
 80016c0:	f140 80a8 	bpl.w	8001814 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	68a3      	ldr	r3, [r4, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d039      	beq.n	800173e <HAL_RCC_OscConfig+0x15e>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80db 	beq.w	8001886 <HAL_RCC_OscConfig+0x2a6>
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	4b75      	ldr	r3, [pc, #468]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 80016d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016d6:	f000 8113 	beq.w	8001900 <HAL_RCC_OscConfig+0x320>
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	671a      	str	r2, [r3, #112]	; 0x70
 80016e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	671a      	str	r2, [r3, #112]	; 0x70
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ea:	4a6f      	ldr	r2, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 80016ec:	6891      	ldr	r1, [r2, #8]
 80016ee:	f011 0f0c 	tst.w	r1, #12
 80016f2:	d063      	beq.n	80017bc <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f4:	6891      	ldr	r1, [r2, #8]
 80016f6:	f001 010c 	and.w	r1, r1, #12
 80016fa:	2908      	cmp	r1, #8
 80016fc:	d05b      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016fe:	68e3      	ldr	r3, [r4, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80e1 	beq.w	80018c8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001706:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001708:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001712:	f7ff fc8b 	bl	800102c <HAL_GetTick>
 8001716:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e005      	b.n	8001726 <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fc87 	bl	800102c <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	2802      	cmp	r0, #2
 8001722:	f200 8088 	bhi.w	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	0798      	lsls	r0, r3, #30
 800172a:	d5f6      	bpl.n	800171a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	6922      	ldr	r2, [r4, #16]
 8001730:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001734:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001738:	602b      	str	r3, [r5, #0]
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	e792      	b.n	8001664 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173e:	4a5a      	ldr	r2, [pc, #360]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001740:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fc70 	bl	800102c <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	4e56      	ldr	r6, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800174e:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	e005      	b.n	8001762 <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fc69 	bl	800102c <HAL_GetTick>
 800175a:	eba0 0008 	sub.w	r0, r0, r8
 800175e:	42b8      	cmp	r0, r7
 8001760:	d869      	bhi.n	8001836 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001764:	079b      	lsls	r3, r3, #30
 8001766:	d5f6      	bpl.n	8001756 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001768:	b125      	cbz	r5, 8001774 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 800176c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001774:	69a0      	ldr	r0, [r4, #24]
 8001776:	b1d0      	cbz	r0, 80017ae <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	f002 020c 	and.w	r2, r2, #12
 8001780:	2a08      	cmp	r2, #8
 8001782:	f000 80c5 	beq.w	8001910 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001786:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	f000 80eb 	beq.w	8001964 <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001794:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001796:	f7ff fc49 	bl	800102c <HAL_GetTick>
 800179a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179c:	e004      	b.n	80017a8 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fc45 	bl	800102c <HAL_GetTick>
 80017a2:	1b40      	subs	r0, r0, r5
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d846      	bhi.n	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	019b      	lsls	r3, r3, #6
 80017ac:	d4f7      	bmi.n	800179e <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80017ae:	2000      	movs	r0, #0
}
 80017b0:	b002      	add	sp, #8
 80017b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	6852      	ldr	r2, [r2, #4]
 80017b8:	0256      	lsls	r6, r2, #9
 80017ba:	d4a0      	bmi.n	80016fe <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017bc:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	0795      	lsls	r5, r2, #30
 80017c2:	d53c      	bpl.n	800183e <HAL_RCC_OscConfig+0x25e>
 80017c4:	68e2      	ldr	r2, [r4, #12]
 80017c6:	2a01      	cmp	r2, #1
 80017c8:	d039      	beq.n	800183e <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
}
 80017cc:	b002      	add	sp, #8
 80017ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 80017d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d6:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80017de:	f7ff fc25 	bl	800102c <HAL_GetTick>
 80017e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e004      	b.n	80017f0 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc21 	bl	800102c <HAL_GetTick>
 80017ea:	1b80      	subs	r0, r0, r6
 80017ec:	2802      	cmp	r0, #2
 80017ee:	d822      	bhi.n	8001836 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017f2:	079f      	lsls	r7, r3, #30
 80017f4:	d4f7      	bmi.n	80017e6 <HAL_RCC_OscConfig+0x206>
 80017f6:	e74e      	b.n	8001696 <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f8:	684a      	ldr	r2, [r1, #4]
 80017fa:	0250      	lsls	r0, r2, #9
 80017fc:	f57f af07 	bpl.w	800160e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	0391      	lsls	r1, r2, #14
 8001806:	f57f af2b 	bpl.w	8001660 <HAL_RCC_OscConfig+0x80>
 800180a:	6862      	ldr	r2, [r4, #4]
 800180c:	2a00      	cmp	r2, #0
 800180e:	f47f af27 	bne.w	8001660 <HAL_RCC_OscConfig+0x80>
 8001812:	e7da      	b.n	80017ca <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8001814:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8001818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800181e:	f7ff fc05 	bl	800102c <HAL_GetTick>
 8001822:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	6833      	ldr	r3, [r6, #0]
 8001826:	05da      	lsls	r2, r3, #23
 8001828:	f53f af4c 	bmi.w	80016c4 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182c:	f7ff fbfe 	bl	800102c <HAL_GetTick>
 8001830:	1bc0      	subs	r0, r0, r7
 8001832:	2864      	cmp	r0, #100	; 0x64
 8001834:	d9f6      	bls.n	8001824 <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 8001836:	2003      	movs	r0, #3
}
 8001838:	b002      	add	sp, #8
 800183a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	491a      	ldr	r1, [pc, #104]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001840:	6920      	ldr	r0, [r4, #16]
 8001842:	680a      	ldr	r2, [r1, #0]
 8001844:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001848:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800184c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	e709      	b.n	8001664 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
 8001852:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001854:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001862:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001864:	f7ff fbe2 	bl	800102c <HAL_GetTick>
 8001868:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e004      	b.n	8001876 <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fbde 	bl	800102c <HAL_GetTick>
 8001870:	1b80      	subs	r0, r0, r6
 8001872:	2864      	cmp	r0, #100	; 0x64
 8001874:	d8df      	bhi.n	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	039b      	lsls	r3, r3, #14
 800187a:	d4f7      	bmi.n	800186c <HAL_RCC_OscConfig+0x28c>
 800187c:	e6ef      	b.n	800165e <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
}
 8001880:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 8001882:	2500      	movs	r5, #0
 8001884:	e719      	b.n	80016ba <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	671a      	str	r2, [r3, #112]	; 0x70
 8001896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001898:	f022 0204 	bic.w	r2, r2, #4
 800189c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800189e:	f7ff fbc5 	bl	800102c <HAL_GetTick>
 80018a2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_OscConfig+0x2da>
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fbbc 	bl	800102c <HAL_GetTick>
 80018b4:	1bc0      	subs	r0, r0, r7
 80018b6:	4540      	cmp	r0, r8
 80018b8:	d8bd      	bhi.n	8001836 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80018bc:	0798      	lsls	r0, r3, #30
 80018be:	d4f7      	bmi.n	80018b0 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 80018c0:	2d00      	cmp	r5, #0
 80018c2:	f43f af57 	beq.w	8001774 <HAL_RCC_OscConfig+0x194>
 80018c6:	e750      	b.n	800176a <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80018c8:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x3f0>)
 80018ca:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018cc:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018d4:	f7ff fbaa 	bl	800102c <HAL_GetTick>
 80018d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e004      	b.n	80018e6 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff fba6 	bl	800102c <HAL_GetTick>
 80018e0:	1b80      	subs	r0, r0, r6
 80018e2:	2802      	cmp	r0, #2
 80018e4:	d8a7      	bhi.n	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	0799      	lsls	r1, r3, #30
 80018ea:	d4f7      	bmi.n	80018dc <HAL_RCC_OscConfig+0x2fc>
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	e6b9      	b.n	8001664 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e6a0      	b.n	8001642 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	f042 0204 	orr.w	r2, r2, #4
 8001904:	671a      	str	r2, [r3, #112]	; 0x70
 8001906:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	671a      	str	r2, [r3, #112]	; 0x70
 800190e:	e71b      	b.n	8001748 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001910:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001912:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	f43f af5a 	beq.w	80017cc <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001918:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191c:	69e1      	ldr	r1, [r4, #28]
 800191e:	428b      	cmp	r3, r1
 8001920:	f47f af53 	bne.w	80017ca <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001924:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001928:	6a21      	ldr	r1, [r4, #32]
 800192a:	428b      	cmp	r3, r1
 800192c:	f47f af4d 	bne.w	80017ca <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001934:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001936:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001938:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800193c:	f47f af45 	bne.w	80017ca <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001942:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800194e:	f47f af3c 	bne.w	80017ca <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001952:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001954:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001958:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 800195c:	bf14      	ite	ne
 800195e:	2001      	movne	r0, #1
 8001960:	2000      	moveq	r0, #0
 8001962:	e733      	b.n	80017cc <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8001964:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001968:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800196a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800196c:	f7ff fb5e 	bl	800102c <HAL_GetTick>
 8001970:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	e005      	b.n	8001980 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fb5a 	bl	800102c <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	2802      	cmp	r0, #2
 800197c:	f63f af5b 	bhi.w	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	0199      	lsls	r1, r3, #6
 8001984:	d4f6      	bmi.n	8001974 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800198a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800198c:	4313      	orrs	r3, r2
 800198e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001992:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4c0e      	ldr	r4, [pc, #56]	; (80019d0 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800199e:	3a01      	subs	r2, #1
 80019a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80019a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb3b 	bl	800102c <HAL_GetTick>
 80019b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	e005      	b.n	80019c6 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fb37 	bl	800102c <HAL_GetTick>
 80019be:	1b40      	subs	r0, r0, r5
 80019c0:	2802      	cmp	r0, #2
 80019c2:	f63f af38 	bhi.w	8001836 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	019a      	lsls	r2, r3, #6
 80019ca:	d5f6      	bpl.n	80019ba <HAL_RCC_OscConfig+0x3da>
 80019cc:	e6ef      	b.n	80017ae <HAL_RCC_OscConfig+0x1ce>
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d4:	b178      	cbz	r0, 80019f6 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d6:	4a5e      	ldr	r2, [pc, #376]	; (8001b50 <HAL_RCC_ClockConfig+0x17c>)
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	428b      	cmp	r3, r1
 80019e0:	d20b      	bcs.n	80019fa <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f023 030f 	bic.w	r3, r3, #15
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ec:	6813      	ldr	r3, [r2, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	428b      	cmp	r3, r1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80019f6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 80019f8:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fa:	6803      	ldr	r3, [r0, #0]
{
 80019fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	079d      	lsls	r5, r3, #30
 8001a02:	d514      	bpl.n	8001a2e <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	075c      	lsls	r4, r3, #29
 8001a06:	d504      	bpl.n	8001a12 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a08:	4c52      	ldr	r4, [pc, #328]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001a0a:	68a2      	ldr	r2, [r4, #8]
 8001a0c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001a10:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	071a      	lsls	r2, r3, #28
 8001a14:	d504      	bpl.n	8001a20 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a16:	4c4f      	ldr	r4, [pc, #316]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001a18:	68a2      	ldr	r2, [r4, #8]
 8001a1a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001a1e:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4c4c      	ldr	r4, [pc, #304]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001a22:	6885      	ldr	r5, [r0, #8]
 8001a24:	68a2      	ldr	r2, [r4, #8]
 8001a26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a2a:	432a      	orrs	r2, r5
 8001a2c:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	07df      	lsls	r7, r3, #31
 8001a30:	4604      	mov	r4, r0
 8001a32:	460d      	mov	r5, r1
 8001a34:	d521      	bpl.n	8001a7a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a38:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3c:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	d063      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a40:	2a02      	cmp	r2, #2
 8001a42:	d079      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	0799      	lsls	r1, r3, #30
 8001a46:	d528      	bpl.n	8001a9a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a48:	4942      	ldr	r1, [pc, #264]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a50:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001a5a:	f7ff fae7 	bl	800102c <HAL_GetTick>
 8001a5e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a60:	e004      	b.n	8001a6c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7ff fae3 	bl	800102c <HAL_GetTick>
 8001a66:	1bc0      	subs	r0, r0, r7
 8001a68:	4540      	cmp	r0, r8
 8001a6a:	d863      	bhi.n	8001b34 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6c:	68b3      	ldr	r3, [r6, #8]
 8001a6e:	6862      	ldr	r2, [r4, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a78:	d1f3      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_RCC_ClockConfig+0x17c>)
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	42ab      	cmp	r3, r5
 8001a84:	d90c      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	f023 030f 	bic.w	r3, r3, #15
 8001a8c:	432b      	orrs	r3, r5
 8001a8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	42ab      	cmp	r3, r5
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
}
 8001a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	075a      	lsls	r2, r3, #29
 8001aa4:	d506      	bpl.n	8001ab4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa6:	492b      	ldr	r1, [pc, #172]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001aa8:	68e0      	ldr	r0, [r4, #12]
 8001aaa:	688a      	ldr	r2, [r1, #8]
 8001aac:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001ab0:	4302      	orrs	r2, r0
 8001ab2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	071b      	lsls	r3, r3, #28
 8001ab6:	d507      	bpl.n	8001ac8 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001aba:	6921      	ldr	r1, [r4, #16]
 8001abc:	6893      	ldr	r3, [r2, #8]
 8001abe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ac2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ac6:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac8:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001aca:	688b      	ldr	r3, [r1, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d01c      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x13a>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d12b      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ada:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001adc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae0:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ae2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001ae6:	d12a      	bne.n	8001b3e <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <HAL_RCC_ClockConfig+0x184>)
 8001aea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001aee:	fba1 0100 	umull	r0, r1, r1, r0
 8001af2:	f7fe fcb9 	bl	8000468 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b06:	e003      	b.n	8001b10 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b08:	039e      	lsls	r6, r3, #14
 8001b0a:	d49d      	bmi.n	8001a48 <HAL_RCC_ClockConfig+0x74>
 8001b0c:	e7c5      	b.n	8001a9a <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b10:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_RCC_ClockConfig+0x180>)
 8001b12:	4c13      	ldr	r4, [pc, #76]	; (8001b60 <HAL_RCC_ClockConfig+0x18c>)
 8001b14:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b18:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001b1c:	4912      	ldr	r1, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8001b1e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b20:	5ca2      	ldrb	r2, [r4, r2]
 8001b22:	40d3      	lsrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001b26:	f000 f8e9 	bl	8001cfc <HAL_InitTick>
  return HAL_OK;
 8001b2a:	2000      	movs	r0, #0
}
 8001b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x184>)
 8001b32:	e7ed      	b.n	8001b10 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8001b34:	2003      	movs	r0, #3
 8001b36:	e7b1      	b.n	8001a9c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	0198      	lsls	r0, r3, #6
 8001b3a:	d485      	bmi.n	8001a48 <HAL_RCC_ClockConfig+0x74>
 8001b3c:	e7ad      	b.n	8001a9a <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <HAL_RCC_ClockConfig+0x188>)
 8001b40:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b44:	2300      	movs	r3, #0
 8001b46:	fba1 0100 	umull	r0, r1, r1, r0
 8001b4a:	f7fe fc8d 	bl	8000468 <__aeabi_uldivmod>
 8001b4e:	e7d2      	b.n	8001af6 <HAL_RCC_ClockConfig+0x122>
 8001b50:	40023c00 	.word	0x40023c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	017d7840 	.word	0x017d7840
 8001b60:	080096c4 	.word	0x080096c4
 8001b64:	20000004 	.word	0x20000004
 8001b68:	20000008 	.word	0x20000008

08001b6c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001b6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b70:	688b      	ldr	r3, [r1, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d01b      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d117      	bne.n	8001bae <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b80:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b88:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001b8c:	d113      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	480f      	ldr	r0, [pc, #60]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x60>)
 8001b90:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b94:	fba1 0100 	umull	r0, r1, r1, r0
 8001b98:	f7fe fc66 	bl	8000468 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001ba8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001bb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001bb4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001bb8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	fba1 0100 	umull	r0, r1, r1, r0
 8001bc2:	f7fe fc51 	bl	8000468 <__aeabi_uldivmod>
 8001bc6:	e7e9      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x30>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	017d7840 	.word	0x017d7840

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001bda:	4905      	ldr	r1, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001be0:	6808      	ldr	r0, [r1, #0]
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001be4:	40d8      	lsrs	r0, r3
 8001be6:	4770      	bx	lr
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080096d4 	.word	0x080096d4
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001bfa:	4905      	ldr	r1, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c00:	6808      	ldr	r0, [r1, #0]
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c04:	40d8      	lsrs	r0, r3
 8001c06:	4770      	bx	lr
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	080096d4 	.word	0x080096d4
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c16:	220f      	movs	r2, #15
 8001c18:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001c28:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001c30:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	08db      	lsrs	r3, r3, #3
{
 8001c36:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c38:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3c:	4c05      	ldr	r4, [pc, #20]	; (8001c54 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c3e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c40:	6823      	ldr	r3, [r4, #0]
}
 8001c42:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	600b      	str	r3, [r1, #0]
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8001c5c:	b1e8      	cbz	r0, 8001c9a <HAL_SDRAM_Init+0x3e>
{   
 8001c5e:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001c60:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001c64:	4604      	mov	r4, r0
 8001c66:	460d      	mov	r5, r1
 8001c68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c6c:	b183      	cbz	r3, 8001c90 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001c6e:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001c70:	1d21      	adds	r1, r4, #4
 8001c72:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001c74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001c78:	f000 fad6 	bl	8002228 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	e9d4 0200 	ldrd	r0, r2, [r4]
 8001c82:	f000 fb0f 	bl	80022a4 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001c86:	2301      	movs	r3, #1
  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001c8a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8001c90:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8001c94:	f7ff ffe0 	bl	8001c58 <HAL_SDRAM_MspInit>
 8001c98:	e7e9      	b.n	8001c6e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001ca0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001ca2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d010      	beq.n	8001cce <HAL_SDRAM_SendCommand+0x2e>
 8001cac:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001cb2:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001cb4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001cb8:	f000 fb46 	bl	8002348 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001cbc:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8001cbe:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001cc0:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8001cce:	4618      	mov	r0, r3
}
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	bf00      	nop

08001cd4 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001cd4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001cde:	2302      	movs	r3, #2
{
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001ce4:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001ce6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001cea:	f000 fb43 	bl	8002374 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001cee:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8001cf0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001cf2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001cf6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001cf8:	4618      	mov	r0, r3
}
 8001cfa:	4770      	bx	lr

08001cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001cfc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001cfe:	4601      	mov	r1, r0
{
 8001d00:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2036      	movs	r0, #54	; 0x36
 8001d06:	f7ff f9bd 	bl	8001084 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d0a:	2036      	movs	r0, #54	; 0x36
 8001d0c:	f7ff f9f0 	bl	80010f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d12:	a901      	add	r1, sp, #4
 8001d14:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d18:	f042 0210 	orr.w	r2, r2, #16
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	9302      	str	r3, [sp, #8]
 8001d26:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d28:	f7ff ff74 	bl	8001c14 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001d2c:	9b06      	ldr	r3, [sp, #24]
 8001d2e:	b9c3      	cbnz	r3, 8001d62 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d30:	f7ff ff50 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8001d36:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 8001d38:	4c10      	ldr	r4, [pc, #64]	; (8001d7c <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001d3a:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d3e:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 8001d42:	490f      	ldr	r1, [pc, #60]	; (8001d80 <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001d44:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001d46:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d48:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 8001d4a:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 8001d4c:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d4e:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001d54:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001d56:	f000 fb25 	bl	80023a4 <HAL_TIM_Base_Init>
 8001d5a:	b130      	cbz	r0, 8001d6a <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	b009      	add	sp, #36	; 0x24
 8001d60:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d62:	f7ff ff37 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8001d66:	0040      	lsls	r0, r0, #1
 8001d68:	e7e4      	b.n	8001d34 <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f000 fb9e 	bl	80024ac <HAL_TIM_Base_Start_IT>
}
 8001d70:	b009      	add	sp, #36	; 0x24
 8001d72:	bd30      	pop	{r4, r5, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	20002b50 	.word	0x20002b50
 8001d80:	40001000 	.word	0x40001000

08001d84 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8001d84:	f7ff b946 	b.w	8001014 <HAL_IncTick>

08001d88 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001d88:	4801      	ldr	r0, [pc, #4]	; (8001d90 <TIM6_DAC_IRQHandler+0x8>)
 8001d8a:	f000 bbad 	b.w	80024e8 <HAL_TIM_IRQHandler>
 8001d8e:	bf00      	nop
 8001d90:	20002b50 	.word	0x20002b50

08001d94 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d96:	07da      	lsls	r2, r3, #31
{
 8001d98:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d9a:	d506      	bpl.n	8001daa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d9c:	6801      	ldr	r1, [r0, #0]
 8001d9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001da0:	684a      	ldr	r2, [r1, #4]
 8001da2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001da6:	4322      	orrs	r2, r4
 8001da8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001daa:	079c      	lsls	r4, r3, #30
 8001dac:	d506      	bpl.n	8001dbc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dae:	6801      	ldr	r1, [r0, #0]
 8001db0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001db2:	684a      	ldr	r2, [r1, #4]
 8001db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001db8:	4322      	orrs	r2, r4
 8001dba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001dbc:	0759      	lsls	r1, r3, #29
 8001dbe:	d506      	bpl.n	8001dce <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dc0:	6801      	ldr	r1, [r0, #0]
 8001dc2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001dc4:	684a      	ldr	r2, [r1, #4]
 8001dc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dca:	4322      	orrs	r2, r4
 8001dcc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001dce:	071a      	lsls	r2, r3, #28
 8001dd0:	d506      	bpl.n	8001de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dd2:	6801      	ldr	r1, [r0, #0]
 8001dd4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001dd6:	684a      	ldr	r2, [r1, #4]
 8001dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ddc:	4322      	orrs	r2, r4
 8001dde:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001de0:	06dc      	lsls	r4, r3, #27
 8001de2:	d506      	bpl.n	8001df2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001de4:	6801      	ldr	r1, [r0, #0]
 8001de6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001de8:	688a      	ldr	r2, [r1, #8]
 8001dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dee:	4322      	orrs	r2, r4
 8001df0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001df2:	0699      	lsls	r1, r3, #26
 8001df4:	d506      	bpl.n	8001e04 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001df6:	6801      	ldr	r1, [r0, #0]
 8001df8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001dfa:	688a      	ldr	r2, [r1, #8]
 8001dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e00:	4322      	orrs	r2, r4
 8001e02:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e04:	065a      	lsls	r2, r3, #25
 8001e06:	d50a      	bpl.n	8001e1e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e08:	6801      	ldr	r1, [r0, #0]
 8001e0a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e0c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e0e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e12:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e16:	ea42 0204 	orr.w	r2, r2, r4
 8001e1a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e1c:	d00b      	beq.n	8001e36 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	d506      	bpl.n	8001e30 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e22:	6802      	ldr	r2, [r0, #0]
 8001e24:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e26:	6853      	ldr	r3, [r2, #4]
 8001e28:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6053      	str	r3, [r2, #4]
  }
}
 8001e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e34:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e36:	684a      	ldr	r2, [r1, #4]
 8001e38:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e3a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001e3e:	4322      	orrs	r2, r4
 8001e40:	604a      	str	r2, [r1, #4]
 8001e42:	e7ec      	b.n	8001e1e <UART_AdvFeatureConfig+0x8a>

08001e44 <HAL_UART_Init>:
  if (huart == NULL)
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d04f      	beq.n	8001ee8 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e48:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001e4a:	b570      	push	{r4, r5, r6, lr}
 8001e4c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d045      	beq.n	8001ede <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 8001e52:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e54:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e56:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e58:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e5a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8001e5c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e5e:	4302      	orrs	r2, r0
 8001e60:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8001e62:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e66:	4dbc      	ldr	r5, [pc, #752]	; (8002158 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e68:	4302      	orrs	r2, r0
 8001e6a:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8001e6c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e6e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e70:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e72:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e74:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e76:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e78:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8001e7a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e7c:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 8001e7e:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e82:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e84:	4db5      	ldr	r5, [pc, #724]	; (800215c <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e86:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e8a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8c:	ea41 0106 	orr.w	r1, r1, r6
 8001e90:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001e98:	ea42 0201 	orr.w	r2, r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e9e:	d025      	beq.n	8001eec <HAL_UART_Init+0xa8>
 8001ea0:	4aaf      	ldr	r2, [pc, #700]	; (8002160 <HAL_UART_Init+0x31c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d044      	beq.n	8001f30 <HAL_UART_Init+0xec>
 8001ea6:	4aaf      	ldr	r2, [pc, #700]	; (8002164 <HAL_UART_Init+0x320>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f000 80f3 	beq.w	8002094 <HAL_UART_Init+0x250>
 8001eae:	4aae      	ldr	r2, [pc, #696]	; (8002168 <HAL_UART_Init+0x324>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d045      	beq.n	8001f40 <HAL_UART_Init+0xfc>
 8001eb4:	4aad      	ldr	r2, [pc, #692]	; (800216c <HAL_UART_Init+0x328>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	f000 80d8 	beq.w	800206c <HAL_UART_Init+0x228>
 8001ebc:	4aac      	ldr	r2, [pc, #688]	; (8002170 <HAL_UART_Init+0x32c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f000 8188 	beq.w	80021d4 <HAL_UART_Init+0x390>
 8001ec4:	4aab      	ldr	r2, [pc, #684]	; (8002174 <HAL_UART_Init+0x330>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	f000 8198 	beq.w	80021fc <HAL_UART_Init+0x3b8>
 8001ecc:	4aaa      	ldr	r2, [pc, #680]	; (8002178 <HAL_UART_Init+0x334>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	f000 815e 	beq.w	8002190 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 8001ed4:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8001ed8:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ede:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001ee2:	f7fe fcb5 	bl	8000850 <HAL_UART_MspInit>
 8001ee6:	e7b4      	b.n	8001e52 <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
}
 8001eea:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eec:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_UART_Init+0x338>)
 8001eee:	4aa4      	ldr	r2, [pc, #656]	; (8002180 <HAL_UART_Init+0x33c>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001efa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001efe:	d02f      	beq.n	8001f60 <HAL_UART_Init+0x11c>
    switch (clocksource)
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d8e7      	bhi.n	8001ed4 <HAL_UART_Init+0x90>
 8001f04:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <HAL_UART_Init+0xc8>)
 8001f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0a:	bf00      	nop
 8001f0c:	0800205b 	.word	0x0800205b
 8001f10:	08001f9d 	.word	0x08001f9d
 8001f14:	080020af 	.word	0x080020af
 8001f18:	08001ed5 	.word	0x08001ed5
 8001f1c:	08002083 	.word	0x08002083
 8001f20:	08001ed5 	.word	0x08001ed5
 8001f24:	08001ed5 	.word	0x08001ed5
 8001f28:	08001ed5 	.word	0x08001ed5
 8001f2c:	080020bf 	.word	0x080020bf
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f30:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_UART_Init+0x338>)
 8001f32:	4a94      	ldr	r2, [pc, #592]	; (8002184 <HAL_UART_Init+0x340>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	e7dc      	b.n	8001efa <HAL_UART_Init+0xb6>
 8001f40:	4b8e      	ldr	r3, [pc, #568]	; (800217c <HAL_UART_Init+0x338>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	f000 8096 	beq.w	800207c <HAL_UART_Init+0x238>
 8001f50:	d97d      	bls.n	800204e <HAL_UART_Init+0x20a>
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	f000 80a8 	beq.w	80020a8 <HAL_UART_Init+0x264>
 8001f58:	2bc0      	cmp	r3, #192	; 0xc0
 8001f5a:	f000 80c5 	beq.w	80020e8 <HAL_UART_Init+0x2a4>
 8001f5e:	e7b9      	b.n	8001ed4 <HAL_UART_Init+0x90>
    switch (clocksource)
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d8b7      	bhi.n	8001ed4 <HAL_UART_Init+0x90>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <HAL_UART_Init+0x128>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08002151 	.word	0x08002151
 8001f70:	08002127 	.word	0x08002127
 8001f74:	08002141 	.word	0x08002141
 8001f78:	08001ed5 	.word	0x08001ed5
 8001f7c:	0800213b 	.word	0x0800213b
 8001f80:	08001ed5 	.word	0x08001ed5
 8001f84:	08001ed5 	.word	0x08001ed5
 8001f88:	08001ed5 	.word	0x08001ed5
 8001f8c:	080020ef 	.word	0x080020ef
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d19f      	bne.n	8001ed4 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001f98:	f000 80c5 	beq.w	8002126 <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f9c:	f7ff fe2a 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001fa0:	6863      	ldr	r3, [r4, #4]
 8001fa2:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8001fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001faa:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fac:	f1a2 0110 	sub.w	r1, r2, #16
 8001fb0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001fb4:	4299      	cmp	r1, r3
 8001fb6:	d88d      	bhi.n	8001ed4 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 8001fb8:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8001fba:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8001fbc:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8001fbe:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	f040 8082 	bne.w	80020ce <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fca:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fcc:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fda:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001fe6:	f7ff f821 	bl	800102c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001fec:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	0710      	lsls	r0, r2, #28
 8001ff2:	d407      	bmi.n	8002004 <HAL_UART_Init+0x1c0>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8001ff6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ff8:	6762      	str	r2, [r4, #116]	; 0x74

  return HAL_OK;
 8001ffa:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001ffe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8002002:	bd70      	pop	{r4, r5, r6, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002004:	69dd      	ldr	r5, [r3, #28]
 8002006:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800200a:	d1f3      	bne.n	8001ff4 <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200c:	f7ff f80e 	bl	800102c <HAL_GetTick>
 8002010:	1b80      	subs	r0, r0, r6
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002012:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002014:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002018:	f080 80cd 	bcs.w	80021b6 <HAL_UART_Init+0x372>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	0751      	lsls	r1, r2, #29
 8002020:	d5f0      	bpl.n	8002004 <HAL_UART_Init+0x1c0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	0512      	lsls	r2, r2, #20
 8002026:	d5ed      	bpl.n	8002004 <HAL_UART_Init+0x1c0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002028:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 800202c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800202e:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002030:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8002038:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	f021 0101 	bic.w	r1, r1, #1
 8002040:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002042:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002044:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8002048:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800204a:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800204c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800204e:	2b00      	cmp	r3, #0
 8002050:	f47f af40 	bne.w	8001ed4 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002054:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002058:	d07a      	beq.n	8002150 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800205a:	f7ff fdbb 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8002064:	fbb2 f2f3 	udiv	r2, r2, r3
 8002068:	b292      	uxth	r2, r2
 800206a:	e79f      	b.n	8001fac <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_UART_Init+0x338>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207a:	d12d      	bne.n	80020d8 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800207c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002080:	d05b      	beq.n	800213a <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002082:	f7ff fd73 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002086:	6863      	ldr	r3, [r4, #4]
 8002088:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800208c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002090:	b292      	uxth	r2, r2
 8002092:	e78b      	b.n	8001fac <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_UART_Init+0x338>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d0ec      	beq.n	800207c <HAL_UART_Init+0x238>
 80020a2:	d9d4      	bls.n	800204e <HAL_UART_Init+0x20a>
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d13b      	bne.n	8002120 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80020ac:	d048      	beq.n	8002140 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020ae:	6863      	ldr	r3, [r4, #4]
 80020b0:	4a35      	ldr	r2, [pc, #212]	; (8002188 <HAL_UART_Init+0x344>)
 80020b2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80020b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ba:	b292      	uxth	r2, r2
 80020bc:	e776      	b.n	8001fac <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	085a      	lsrs	r2, r3, #1
 80020c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80020c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ca:	b292      	uxth	r2, r2
 80020cc:	e76e      	b.n	8001fac <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff fe60 	bl	8001d94 <UART_AdvFeatureConfig>
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	e778      	b.n	8001fca <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020d8:	d9b9      	bls.n	800204e <HAL_UART_Init+0x20a>
 80020da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020de:	d0e3      	beq.n	80020a8 <HAL_UART_Init+0x264>
 80020e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020e4:	f47f aef6 	bne.w	8001ed4 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80020ec:	d1e7      	bne.n	80020be <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020ee:	6862      	ldr	r2, [r4, #4]
 80020f0:	0853      	lsrs	r3, r2, #1
 80020f2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80020f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020fa:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	f1a3 0110 	sub.w	r1, r3, #16
 8002100:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002104:	4291      	cmp	r1, r2
 8002106:	f63f aee5 	bhi.w	8001ed4 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800210a:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800210e:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 8002112:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 800211a:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 800211e:	e750      	b.n	8001fc2 <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002120:	2b30      	cmp	r3, #48	; 0x30
 8002122:	d0e1      	beq.n	80020e8 <HAL_UART_Init+0x2a4>
 8002124:	e6d6      	b.n	8001ed4 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002126:	f7ff fd65 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800212a:	6862      	ldr	r2, [r4, #4]
 800212c:	0853      	lsrs	r3, r2, #1
 800212e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002132:	fbb3 f3f2 	udiv	r3, r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	e7e0      	b.n	80020fc <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 800213a:	f7ff fd17 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 800213e:	e7f4      	b.n	800212a <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002140:	6862      	ldr	r2, [r4, #4]
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_UART_Init+0x348>)
 8002144:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002148:	fbb3 f3f2 	udiv	r3, r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	e7d5      	b.n	80020fc <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002150:	f7ff fd40 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002154:	e7e9      	b.n	800212a <HAL_UART_Init+0x2e6>
 8002156:	bf00      	nop
 8002158:	efff69f3 	.word	0xefff69f3
 800215c:	40011000 	.word	0x40011000
 8002160:	40004400 	.word	0x40004400
 8002164:	40004800 	.word	0x40004800
 8002168:	40004c00 	.word	0x40004c00
 800216c:	40005000 	.word	0x40005000
 8002170:	40011400 	.word	0x40011400
 8002174:	40007800 	.word	0x40007800
 8002178:	40007c00 	.word	0x40007c00
 800217c:	40023800 	.word	0x40023800
 8002180:	080096b0 	.word	0x080096b0
 8002184:	080096b4 	.word	0x080096b4
 8002188:	00f42400 	.word	0x00f42400
 800218c:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_UART_Init+0x3e0>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800219a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800219e:	f43f af6d 	beq.w	800207c <HAL_UART_Init+0x238>
 80021a2:	f67f af54 	bls.w	800204e <HAL_UART_Init+0x20a>
 80021a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021aa:	f43f af7d 	beq.w	80020a8 <HAL_UART_Init+0x264>
 80021ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80021b2:	d099      	beq.n	80020e8 <HAL_UART_Init+0x2a4>
 80021b4:	e68e      	b.n	8001ed4 <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b6:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80021b8:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80021ba:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80021ca:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80021cc:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80021d0:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_UART_Init+0x3e0>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e2:	f43f af4b 	beq.w	800207c <HAL_UART_Init+0x238>
 80021e6:	f67f aed3 	bls.w	8001f90 <HAL_UART_Init+0x14c>
 80021ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ee:	f43f af5b 	beq.w	80020a8 <HAL_UART_Init+0x264>
 80021f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021f6:	f43f af77 	beq.w	80020e8 <HAL_UART_Init+0x2a4>
 80021fa:	e66b      	b.n	8001ed4 <HAL_UART_Init+0x90>
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_UART_Init+0x3e0>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220a:	f43f af37 	beq.w	800207c <HAL_UART_Init+0x238>
 800220e:	f67f af1e 	bls.w	800204e <HAL_UART_Init+0x20a>
 8002212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002216:	f43f af47 	beq.w	80020a8 <HAL_UART_Init+0x264>
 800221a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800221e:	f43f af63 	beq.w	80020e8 <HAL_UART_Init+0x2a4>
 8002222:	e657      	b.n	8001ed4 <HAL_UART_Init+0x90>
 8002224:	40023800 	.word	0x40023800

08002228 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800222c:	680f      	ldr	r7, [r1, #0]
 800222e:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8002232:	2f01      	cmp	r7, #1
 8002234:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8002238:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 800223c:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8002240:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8002244:	d012      	beq.n	800226c <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002246:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002248:	4f15      	ldr	r7, [pc, #84]	; (80022a0 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800224a:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800224c:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002250:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002252:	4322      	orrs	r2, r4
 8002254:	ea42 0308 	orr.w	r3, r2, r8
 8002258:	ea43 030c 	orr.w	r3, r3, ip
 800225c:	4333      	orrs	r3, r6
 800225e:	432b      	orrs	r3, r5
 8002260:	430b      	orrs	r3, r1
 8002262:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002264:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8002266:	2000      	movs	r0, #0
 8002268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800226c:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002270:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002272:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002274:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002278:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800227c:	4c08      	ldr	r4, [pc, #32]	; (80022a0 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800227e:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002282:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002284:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002288:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800228c:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800228e:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002290:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002292:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002294:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002296:	6043      	str	r3, [r0, #4]
}
 8002298:	2000      	movs	r0, #0
 800229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800229e:	bf00      	nop
 80022a0:	ffff8000 	.word	0xffff8000

080022a4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a8:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80022aa:	2a01      	cmp	r2, #1
 80022ac:	68cf      	ldr	r7, [r1, #12]
 80022ae:	694e      	ldr	r6, [r1, #20]
 80022b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80022b4:	684d      	ldr	r5, [r1, #4]
 80022b6:	f107 37ff 	add.w	r7, r7, #4294967295
 80022ba:	688c      	ldr	r4, [r1, #8]
 80022bc:	f106 36ff 	add.w	r6, r6, #4294967295
 80022c0:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80022c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80022c8:	6809      	ldr	r1, [r1, #0]
 80022ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80022ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80022d2:	ea4f 3707 	mov.w	r7, r7, lsl #12
 80022d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80022da:	ea4f 5606 	mov.w	r6, r6, lsl #20
 80022de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80022e2:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80022e6:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80022ea:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 80022ee:	d012      	beq.n	8002316 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80022f0:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80022f4:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80022f6:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80022fa:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80022fe:	ea42 0305 	orr.w	r3, r2, r5
 8002302:	430b      	orrs	r3, r1
 8002304:	ea43 030e 	orr.w	r3, r3, lr
 8002308:	ea43 030c 	orr.w	r3, r3, ip
 800230c:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800230e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8002310:	2000      	movs	r0, #0
 8002312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002316:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002318:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800231c:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800231e:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002322:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002324:	4e07      	ldr	r6, [pc, #28]	; (8002344 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002326:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800232a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800232e:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002330:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002334:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002336:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002338:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800233a:	60c3      	str	r3, [r0, #12]
}
 800233c:	2000      	movs	r0, #0
 800233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002342:	bf00      	nop
 8002344:	ff0f0fff 	.word	0xff0f0fff

08002348 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002348:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 800234a:	2200      	movs	r2, #0
{
 800234c:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800234e:	684d      	ldr	r5, [r1, #4]
{
 8002350:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002352:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8002354:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 8002356:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002358:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800235a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800235e:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8002362:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002364:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002368:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800236a:	9b01      	ldr	r3, [sp, #4]
 800236c:	6123      	str	r3, [r4, #16]
}
 800236e:	b002      	add	sp, #8
 8002370:	bc30      	pop	{r4, r5}
 8002372:	4770      	bx	lr

08002374 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002374:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8002376:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8002378:	6953      	ldr	r3, [r2, #20]
 800237a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800237e:	6151      	str	r1, [r2, #20]
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop

08002384 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002386:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800238a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800238e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002396:	6099      	str	r1, [r3, #8]
#endif
}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop

080023a4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d065      	beq.n	8002474 <HAL_TIM_Base_Init+0xd0>
{
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80023aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023ae:	4604      	mov	r4, r0
 80023b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03b      	beq.n	8002430 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023ba:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	4e36      	ldr	r6, [pc, #216]	; (8002498 <HAL_TIM_Base_Init+0xf4>)
 80023be:	4f37      	ldr	r7, [pc, #220]	; (800249c <HAL_TIM_Base_Init+0xf8>)
 80023c0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80023c4:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80023cc:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80023d0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d2:	fab6 f686 	clz	r6, r6
 80023d6:	fab7 f787 	clz	r7, r7
 80023da:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80023de:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80023e2:	d02a      	beq.n	800243a <HAL_TIM_Base_Init+0x96>
 80023e4:	bb4e      	cbnz	r6, 800243a <HAL_TIM_Base_Init+0x96>
 80023e6:	492e      	ldr	r1, [pc, #184]	; (80024a0 <HAL_TIM_Base_Init+0xfc>)
 80023e8:	428a      	cmp	r2, r1
 80023ea:	d045      	beq.n	8002478 <HAL_TIM_Base_Init+0xd4>
 80023ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023f0:	428a      	cmp	r2, r1
 80023f2:	d041      	beq.n	8002478 <HAL_TIM_Base_Init+0xd4>
 80023f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023f8:	428a      	cmp	r2, r1
 80023fa:	d042      	beq.n	8002482 <HAL_TIM_Base_Init+0xde>
 80023fc:	2f00      	cmp	r7, #0
 80023fe:	d140      	bne.n	8002482 <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002400:	4928      	ldr	r1, [pc, #160]	; (80024a4 <HAL_TIM_Base_Init+0x100>)
 8002402:	428a      	cmp	r2, r1
 8002404:	d01e      	beq.n	8002444 <HAL_TIM_Base_Init+0xa0>
 8002406:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800240a:	428a      	cmp	r2, r1
 800240c:	d01a      	beq.n	8002444 <HAL_TIM_Base_Init+0xa0>
 800240e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002412:	428a      	cmp	r2, r1
 8002414:	d016      	beq.n	8002444 <HAL_TIM_Base_Init+0xa0>
 8002416:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800241a:	428a      	cmp	r2, r1
 800241c:	d012      	beq.n	8002444 <HAL_TIM_Base_Init+0xa0>
 800241e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002422:	428a      	cmp	r2, r1
 8002424:	d00e      	beq.n	8002444 <HAL_TIM_Base_Init+0xa0>
 8002426:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800242a:	428a      	cmp	r2, r1
 800242c:	d10e      	bne.n	800244c <HAL_TIM_Base_Init+0xa8>
 800242e:	e009      	b.n	8002444 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002430:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002434:	f7ff ffb4 	bl	80023a0 <HAL_TIM_Base_MspInit>
 8002438:	e7be      	b.n	80023b8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243a:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800243e:	68a0      	ldr	r0, [r4, #8]
 8002440:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002448:	6920      	ldr	r0, [r4, #16]
 800244a:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244c:	69a1      	ldr	r1, [r4, #24]
 800244e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002452:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002454:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002456:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002458:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800245c:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800245e:	b936      	cbnz	r6, 800246e <HAL_TIM_Base_Init+0xca>
 8002460:	b92f      	cbnz	r7, 800246e <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002462:	2301      	movs	r3, #1
  return HAL_OK;
 8002464:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002466:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8002468:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 800246e:	6963      	ldr	r3, [r4, #20]
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	e7f6      	b.n	8002462 <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8002474:	2001      	movs	r0, #1
}
 8002476:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800247c:	68a1      	ldr	r1, [r4, #8]
 800247e:	430b      	orrs	r3, r1
 8002480:	e7e0      	b.n	8002444 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	4909      	ldr	r1, [pc, #36]	; (80024a8 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002488:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800248c:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002490:	d0d8      	beq.n	8002444 <HAL_TIM_Base_Init+0xa0>
 8002492:	2f00      	cmp	r7, #0
 8002494:	d1d6      	bne.n	8002444 <HAL_TIM_Base_Init+0xa0>
 8002496:	e7b3      	b.n	8002400 <HAL_TIM_Base_Init+0x5c>
 8002498:	40010000 	.word	0x40010000
 800249c:	40010400 	.word	0x40010400
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40000c00 	.word	0x40000c00

080024ac <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ac:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	f041 0101 	orr.w	r1, r1, #1
 80024b6:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024bc:	2a06      	cmp	r2, #6
 80024be:	d006      	beq.n	80024ce <HAL_TIM_Base_Start_IT+0x22>
 80024c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	2000      	movs	r0, #0
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	00010007 	.word	0x00010007

080024d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_TIM_IC_CaptureCallback>:
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <HAL_TIM_TriggerCallback>:
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	0791      	lsls	r1, r2, #30
{
 80024ee:	b510      	push	{r4, lr}
 80024f0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f2:	d502      	bpl.n	80024fa <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	0792      	lsls	r2, r2, #30
 80024f8:	d468      	bmi.n	80025cc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	0752      	lsls	r2, r2, #29
 80024fe:	d502      	bpl.n	8002506 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	0750      	lsls	r0, r2, #29
 8002504:	d44f      	bmi.n	80025a6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	0711      	lsls	r1, r2, #28
 800250a:	d502      	bpl.n	8002512 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	0712      	lsls	r2, r2, #28
 8002510:	d437      	bmi.n	8002582 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	06d0      	lsls	r0, r2, #27
 8002516:	d502      	bpl.n	800251e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	06d1      	lsls	r1, r2, #27
 800251c:	d41e      	bmi.n	800255c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	07d2      	lsls	r2, r2, #31
 8002522:	d502      	bpl.n	800252a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	07d0      	lsls	r0, r2, #31
 8002528:	d469      	bmi.n	80025fe <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	0611      	lsls	r1, r2, #24
 800252e:	d502      	bpl.n	8002536 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	0612      	lsls	r2, r2, #24
 8002534:	d46b      	bmi.n	800260e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	05d0      	lsls	r0, r2, #23
 800253a:	d502      	bpl.n	8002542 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	0611      	lsls	r1, r2, #24
 8002540:	d46d      	bmi.n	800261e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	0652      	lsls	r2, r2, #25
 8002546:	d502      	bpl.n	800254e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	0650      	lsls	r0, r2, #25
 800254c:	d46f      	bmi.n	800262e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	0691      	lsls	r1, r2, #26
 8002552:	d502      	bpl.n	800255a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	0692      	lsls	r2, r2, #26
 8002558:	d449      	bmi.n	80025ee <HAL_TIM_IRQHandler+0x106>
}
 800255a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800255c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002560:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002564:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002566:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002568:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800256e:	d16f      	bne.n	8002650 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002570:	f7ff ffb2 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff ffb3 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	2200      	movs	r2, #0
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	7722      	strb	r2, [r4, #28]
 8002580:	e7cd      	b.n	800251e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002582:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002588:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800258a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002590:	079b      	lsls	r3, r3, #30
 8002592:	d15a      	bne.n	800264a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002594:	f7ff ffa0 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ffa1 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	2200      	movs	r2, #0
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	7722      	strb	r2, [r4, #28]
 80025a4:	e7b5      	b.n	8002512 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025aa:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80025ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ae:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80025b8:	d144      	bne.n	8002644 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	f7ff ff8d 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff ff8e 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c4:	2200      	movs	r2, #0
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	7722      	strb	r2, [r4, #28]
 80025ca:	e79c      	b.n	8002506 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025cc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d2:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d8:	0799      	lsls	r1, r3, #30
 80025da:	d130      	bne.n	800263e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025dc:	f7ff ff7c 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff ff7d 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	2200      	movs	r2, #0
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	7722      	strb	r2, [r4, #28]
 80025ec:	e785      	b.n	80024fa <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80025f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f4:	611a      	str	r2, [r3, #16]
}
 80025f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80025fa:	f000 b82d 	b.w	8002658 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002602:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002604:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	f7ff fbbd 	bl	8001d84 <HAL_TIM_PeriodElapsedCallback>
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	e78d      	b.n	800252a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800260e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002612:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002614:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002616:	f000 f821 	bl	800265c <HAL_TIMEx_BreakCallback>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	e78b      	b.n	8002536 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800261e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002622:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002624:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002626:	f000 f81b 	bl	8002660 <HAL_TIMEx_Break2Callback>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	e789      	b.n	8002542 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800262e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002632:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002634:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002636:	f7ff ff55 	bl	80024e4 <HAL_TIM_TriggerCallback>
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	e787      	b.n	800254e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800263e:	f7ff ff4d 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 8002642:	e7d0      	b.n	80025e6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002644:	f7ff ff4a 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 8002648:	e7bc      	b.n	80025c4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800264a:	f7ff ff47 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 800264e:	e7a6      	b.n	800259e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002650:	f7ff ff44 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 8002654:	e791      	b.n	800257a <HAL_TIM_IRQHandler+0x92>
 8002656:	bf00      	nop

08002658 <HAL_TIMEx_CommutCallback>:
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <HAL_TIMEx_BreakCallback>:
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <HAL_TIMEx_Break2Callback>:
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <_fx_ram_driver>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_ram_driver(FX_MEDIA *media_ptr)
{
 8002664:	b538      	push	{r3, r4, r5, lr}
                                                    FX_DIRECTORY_SECTOR
                                                    FX_DATA_SECTOR
     */

    /* Process the driver request specified in the media control block.  */
    switch (media_ptr -> fx_media_driver_request)
 8002666:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800266a:	4604      	mov	r4, r0
    switch (media_ptr -> fx_media_driver_request)
 800266c:	2b08      	cmp	r3, #8
 800266e:	d84e      	bhi.n	800270e <_fx_ram_driver+0xaa>
 8002670:	e8df f003 	tbb	[pc, r3]
 8002674:	0b0b0f38 	.word	0x0b0b0f38
 8002678:	2d4d240b 	.word	0x2d4d240b
 800267c:	0b          	.byte	0x0b
 800267d:	00          	.byte	0x00
            media_ptr -> fx_media_driver_status =  FX_BUFFER_ERROR;
            break;
        }

        /* Copy the RAM boot sector into the destination.  */
        _fx_utility_memory_copy(source_buffer, media_ptr -> fx_media_driver_buffer,
 800267e:	4602      	mov	r2, r0
 8002680:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002684:	4628      	mov	r0, r5
 8002686:	f000 f98b 	bl	80029a0 <_fx_utility_memory_copy>
                                bytes_per_sector);

        /* Successful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800268a:	2300      	movs	r3, #0
 800268c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        /* Invalid driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
        break;
    }
    }
}
 8002690:	bd38      	pop	{r3, r4, r5, pc}
            ((media_ptr -> fx_media_driver_logical_sector + 
 8002692:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002694:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
             media_ptr -> fx_media_bytes_per_sector);
 8002698:	6a83      	ldr	r3, [r0, #40]	; 0x28
            ((media_ptr -> fx_media_driver_logical_sector + 
 800269a:	4411      	add	r1, r2
        destination_buffer =  ((UCHAR *)media_ptr -> fx_media_driver_info) +
 800269c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
        _fx_utility_memory_copy(media_ptr -> fx_media_driver_buffer, destination_buffer,
 80026a0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80026a4:	fb03 0101 	mla	r1, r3, r1, r0
 80026a8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80026ac:	fb02 f203 	mul.w	r2, r2, r3
 80026b0:	f000 f976 	bl	80029a0 <_fx_utility_memory_copy>
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
        source_buffer =  (UCHAR *)media_ptr -> fx_media_driver_info;
 80026bc:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
        if ((source_buffer[0] != (UCHAR)0xEB)  ||
 80026c0:	782b      	ldrb	r3, [r5, #0]
 80026c2:	2beb      	cmp	r3, #235	; 0xeb
 80026c4:	d027      	beq.n	8002716 <_fx_ram_driver+0xb2>
            media_ptr -> fx_media_driver_status =  FX_MEDIA_INVALID;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 80026cc:	bd38      	pop	{r3, r4, r5, pc}
        _fx_utility_memory_copy(media_ptr -> fx_media_driver_buffer, destination_buffer,
 80026ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80026d0:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80026d4:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 80026d8:	f000 f962 	bl	80029a0 <_fx_utility_memory_copy>
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 80026e2:	bd38      	pop	{r3, r4, r5, pc}
            ((media_ptr -> fx_media_driver_logical_sector + 
 80026e4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80026e6:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
             media_ptr -> fx_media_bytes_per_sector);
 80026ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        source_buffer =  ((UCHAR *)media_ptr -> fx_media_driver_info) +
 80026ec:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            ((media_ptr -> fx_media_driver_logical_sector + 
 80026f0:	4410      	add	r0, r2
        _fx_utility_memory_copy(source_buffer, media_ptr -> fx_media_driver_buffer,
 80026f2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80026f6:	fb03 1000 	mla	r0, r3, r0, r1
 80026fa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80026fe:	fb02 f203 	mul.w	r2, r2, r3
 8002702:	f000 f94d 	bl	80029a0 <_fx_utility_memory_copy>
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800270c:	bd38      	pop	{r3, r4, r5, pc}
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 800270e:	2390      	movs	r3, #144	; 0x90
 8002710:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
}
 8002714:	bd38      	pop	{r3, r4, r5, pc}
            ((source_buffer[1] != (UCHAR)0x34)  &&
 8002716:	786b      	ldrb	r3, [r5, #1]
        if ((source_buffer[0] != (UCHAR)0xEB)  ||
 8002718:	2b34      	cmp	r3, #52	; 0x34
 800271a:	d001      	beq.n	8002720 <_fx_ram_driver+0xbc>
 800271c:	2b76      	cmp	r3, #118	; 0x76
 800271e:	d1d2      	bne.n	80026c6 <_fx_ram_driver+0x62>
             (source_buffer[1] != (UCHAR)0x76)) ||          /* exFAT jump code.  */
 8002720:	78ab      	ldrb	r3, [r5, #2]
 8002722:	2b90      	cmp	r3, #144	; 0x90
 8002724:	d1cf      	bne.n	80026c6 <_fx_ram_driver+0x62>
        bytes_per_sector =  _fx_utility_16_unsigned_read(&source_buffer[FX_BYTES_SECTOR]);
 8002726:	f105 000b 	add.w	r0, r5, #11
 800272a:	f000 f933 	bl	8002994 <_fx_utility_16_unsigned_read>
        if (bytes_per_sector > media_ptr -> fx_media_memory_size)
 800272e:	68e3      	ldr	r3, [r4, #12]
 8002730:	4283      	cmp	r3, r0
 8002732:	d2a4      	bcs.n	800267e <_fx_ram_driver+0x1a>
            media_ptr -> fx_media_driver_status =  FX_BUFFER_ERROR;
 8002734:	2321      	movs	r3, #33	; 0x21
 8002736:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800273a:	bd38      	pop	{r3, r4, r5, pc}

0800273c <_fx_system_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800273c:	b570      	push	{r4, r5, r6, lr}
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800273e:	2300      	movs	r3, #0
{
 8002740:	b084      	sub	sp, #16
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8002742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002746:	2001      	movs	r0, #1
    _fx_system_media_opened_ptr =       FX_NULL;
 8002748:	4917      	ldr	r1, [pc, #92]	; (80027a8 <_fx_system_initialize+0x6c>)
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800274a:	2510      	movs	r5, #16
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800274c:	9002      	str	r0, [sp, #8]
    _fx_system_date =   FX_INITIAL_DATE;
 800274e:	f644 2621 	movw	r6, #18977	; 0x4a21
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8002752:	9201      	str	r2, [sp, #4]
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8002754:	f44f 7080 	mov.w	r0, #256	; 0x100
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8002758:	9200      	str	r2, [sp, #0]
    _fx_system_media_opened_count =     0;
 800275a:	4c14      	ldr	r4, [pc, #80]	; (80027ac <_fx_system_initialize+0x70>)
    _fx_system_media_opened_ptr =       FX_NULL;
 800275c:	600b      	str	r3, [r1, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800275e:	4914      	ldr	r1, [pc, #80]	; (80027b0 <_fx_system_initialize+0x74>)
    _fx_system_media_opened_count =     0;
 8002760:	6023      	str	r3, [r4, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8002762:	600b      	str	r3, [r1, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8002764:	f103 438e 	add.w	r3, r3, #1191182336	; 0x47000000
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8002768:	4c12      	ldr	r4, [pc, #72]	; (80027b4 <_fx_system_initialize+0x78>)
    _fx_system_date =   FX_INITIAL_DATE;
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <_fx_system_initialize+0x7c>)
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800276c:	f1a3 13a7 	sub.w	r3, r3, #10944679	; 0xa700a7
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8002770:	4912      	ldr	r1, [pc, #72]	; (80027bc <_fx_system_initialize+0x80>)
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8002772:	6025      	str	r5, [r4, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8002774:	f5a3 432c 	sub.w	r3, r3, #44032	; 0xac00
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8002778:	4d11      	ldr	r5, [pc, #68]	; (80027c0 <_fx_system_initialize+0x84>)
    _fx_system_date =   FX_INITIAL_DATE;
 800277a:	6016      	str	r6, [r2, #0]
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800277c:	6008      	str	r0, [r1, #0]
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800277e:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <_fx_system_initialize+0x88>)
 8002780:	4911      	ldr	r1, [pc, #68]	; (80027c8 <_fx_system_initialize+0x8c>)
 8002782:	4812      	ldr	r0, [pc, #72]	; (80027cc <_fx_system_initialize+0x90>)
 8002784:	f006 fac4 	bl	8008d10 <_tx_timer_create>
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8002788:	4c11      	ldr	r4, [pc, #68]	; (80027d0 <_fx_system_initialize+0x94>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800278a:	682a      	ldr	r2, [r5, #0]
 800278c:	4911      	ldr	r1, [pc, #68]	; (80027d4 <_fx_system_initialize+0x98>)
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800278e:	6823      	ldr	r3, [r4, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8002790:	4811      	ldr	r0, [pc, #68]	; (80027d8 <_fx_system_initialize+0x9c>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8002792:	4311      	orrs	r1, r2
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <_fx_system_initialize+0xa0>)
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8002796:	6806      	ldr	r6, [r0, #0]
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8002798:	431a      	orrs	r2, r3
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <_fx_system_initialize+0xa4>)
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800279c:	6029      	str	r1, [r5, #0]
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800279e:	4333      	orrs	r3, r6
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 80027a0:	6022      	str	r2, [r4, #0]
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 80027a2:	6003      	str	r3, [r0, #0]
    }
}
 80027a4:	b004      	add	sp, #16
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	20002bd0 	.word	0x20002bd0
 80027ac:	20002bc8 	.word	0x20002bc8
 80027b0:	20002bdc 	.word	0x20002bdc
 80027b4:	20002bcc 	.word	0x20002bcc
 80027b8:	20002bc4 	.word	0x20002bc4
 80027bc:	20002bc0 	.word	0x20002bc0
 80027c0:	20002bd4 	.word	0x20002bd4
 80027c4:	080027e5 	.word	0x080027e5
 80027c8:	080096dc 	.word	0x080096dc
 80027cc:	20002b94 	.word	0x20002b94
 80027d0:	20002b90 	.word	0x20002b90
 80027d4:	ffff0000 	.word	0xffff0000
 80027d8:	20002bd8 	.word	0x20002bd8
 80027dc:	01008010 	.word	0x01008010
 80027e0:	000a03e8 	.word	0x000a03e8

080027e4 <_fx_system_timer_entry>:
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 80027e4:	4b67      	ldr	r3, [pc, #412]	; (8002984 <_fx_system_timer_entry+0x1a0>)
 80027e6:	4298      	cmp	r0, r3
 80027e8:	d000      	beq.n	80027ec <_fx_system_timer_entry+0x8>
 80027ea:	4770      	bx	lr
{
 80027ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80027f0:	4d65      	ldr	r5, [pc, #404]	; (8002988 <_fx_system_timer_entry+0x1a4>)
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
        day =     _fx_system_date & FX_DAY_MASK;
 80027f2:	4e66      	ldr	r6, [pc, #408]	; (800298c <_fx_system_timer_entry+0x1a8>)
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80027f4:	6829      	ldr	r1, [r5, #0]
        day =     _fx_system_date & FX_DAY_MASK;
 80027f6:	6834      	ldr	r4, [r6, #0]
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80027f8:	f001 001f 	and.w	r0, r1, #31
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 80027fc:	f3c1 1745 	ubfx	r7, r1, #5, #6
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8002800:	f3c4 2e46 	ubfx	lr, r4, #9, #7
        day =     _fx_system_date & FX_DAY_MASK;
 8002804:	f004 021f 	and.w	r2, r4, #31
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8002808:	0040      	lsls	r0, r0, #1
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800280a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800280e:	f20e 7cbc 	addw	ip, lr, #1980	; 0x7bc
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8002812:	f3c4 1443 	ubfx	r4, r4, #5, #4

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8002816:	f100 030a 	add.w	r3, r0, #10

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800281a:	2b3b      	cmp	r3, #59	; 0x3b
 800281c:	d80e      	bhi.n	800283c <_fx_system_timer_entry+0x58>
 800281e:	02c9      	lsls	r1, r1, #11
 8002820:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
                            (month << FX_MONTH_SHIFT) | day;

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8002824:	085b      	lsrs	r3, r3, #1
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8002826:	f2ac 7cbc 	subw	ip, ip, #1980	; 0x7bc
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800282a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
                            (month << FX_MONTH_SHIFT) | day;
 800282e:	ea42 224c 	orr.w	r2, r2, ip, lsl #9
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8002832:	430b      	orrs	r3, r1
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8002834:	6032      	str	r2, [r6, #0]
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8002836:	602b      	str	r3, [r5, #0]
    }
}
 8002838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            second =  second % 60;
 800283c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8002990 <_fx_system_timer_entry+0x1ac>
            minute =  minute + second / 60;
 8002840:	3701      	adds	r7, #1
            second =  second % 60;
 8002842:	fba8 9003 	umull	r9, r0, r8, r3
            if (minute > FX_MAXIMUM_MINUTE)
 8002846:	2f3b      	cmp	r7, #59	; 0x3b
            second =  second % 60;
 8002848:	ea4f 1050 	mov.w	r0, r0, lsr #5
 800284c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8002850:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
            if (minute > FX_MAXIMUM_MINUTE)
 8002854:	d9e3      	bls.n	800281e <_fx_system_timer_entry+0x3a>
                minute =  minute % 60;
 8002856:	fba8 0807 	umull	r0, r8, r8, r7
                hour =    hour + minute / 60;
 800285a:	3101      	adds	r1, #1
                minute =  minute % 60;
 800285c:	ea4f 1858 	mov.w	r8, r8, lsr #5
                if (hour > FX_MAXIMUM_HOUR)
 8002860:	2917      	cmp	r1, #23
                minute =  minute % 60;
 8002862:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8002866:	eba7 0788 	sub.w	r7, r7, r8, lsl #2
                if (hour > FX_MAXIMUM_HOUR)
 800286a:	d9d8      	bls.n	800281e <_fx_system_timer_entry+0x3a>
                    switch (month)
 800286c:	3c01      	subs	r4, #1
                    day++;
 800286e:	3201      	adds	r2, #1
                    switch (month)
 8002870:	2c0b      	cmp	r4, #11
 8002872:	d8e1      	bhi.n	8002838 <_fx_system_timer_entry+0x54>
 8002874:	e8df f004 	tbb	[pc, r4]
 8002878:	243e304a 	.word	0x243e304a
 800287c:	1e382a44 	.word	0x1e382a44
 8002880:	060c1218 	.word	0x060c1218
                        if (day > 31)
 8002884:	2a20      	cmp	r2, #32
 8002886:	d04b      	beq.n	8002920 <_fx_system_timer_entry+0x13c>
 8002888:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800288c:	2100      	movs	r1, #0
 800288e:	e7c9      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 30)
 8002890:	2a1e      	cmp	r2, #30
 8002892:	d841      	bhi.n	8002918 <_fx_system_timer_entry+0x134>
 8002894:	f442 72b0 	orr.w	r2, r2, #352	; 0x160
 8002898:	2100      	movs	r1, #0
 800289a:	e7c3      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 31)
 800289c:	2a20      	cmp	r2, #32
 800289e:	d04b      	beq.n	8002938 <_fx_system_timer_entry+0x154>
 80028a0:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 80028a4:	2100      	movs	r1, #0
 80028a6:	e7bd      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 30)
 80028a8:	2a1e      	cmp	r2, #30
 80028aa:	d841      	bhi.n	8002930 <_fx_system_timer_entry+0x14c>
 80028ac:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80028b0:	2100      	movs	r1, #0
 80028b2:	e7b7      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 31)
 80028b4:	2a20      	cmp	r2, #32
 80028b6:	d052      	beq.n	800295e <_fx_system_timer_entry+0x17a>
 80028b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028bc:	2100      	movs	r1, #0
 80028be:	e7b1      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 30)
 80028c0:	2a1e      	cmp	r2, #30
 80028c2:	d846      	bhi.n	8002952 <_fx_system_timer_entry+0x16e>
 80028c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c8:	2100      	movs	r1, #0
 80028ca:	e7ab      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 30)
 80028cc:	2a1e      	cmp	r2, #30
 80028ce:	d84e      	bhi.n	800296e <_fx_system_timer_entry+0x18a>
 80028d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80028d4:	2100      	movs	r1, #0
 80028d6:	e7a5      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if ((year % 4) == 0)
 80028d8:	f01c 0103 	ands.w	r1, ip, #3
 80028dc:	d133      	bne.n	8002946 <_fx_system_timer_entry+0x162>
                            if (day > 29)
 80028de:	2a1d      	cmp	r2, #29
 80028e0:	d84b      	bhi.n	800297a <_fx_system_timer_entry+0x196>
 80028e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e6:	e79d      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 31)
 80028e8:	2a20      	cmp	r2, #32
 80028ea:	d03c      	beq.n	8002966 <_fx_system_timer_entry+0x182>
 80028ec:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80028f0:	2100      	movs	r1, #0
 80028f2:	e797      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 31)
 80028f4:	2a20      	cmp	r2, #32
 80028f6:	d02f      	beq.n	8002958 <_fx_system_timer_entry+0x174>
 80028f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80028fc:	2100      	movs	r1, #0
 80028fe:	e791      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 31)
 8002900:	2a20      	cmp	r2, #32
 8002902:	d037      	beq.n	8002974 <_fx_system_timer_entry+0x190>
 8002904:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002908:	2100      	movs	r1, #0
 800290a:	e78b      	b.n	8002824 <_fx_system_timer_entry+0x40>
                        if (day > 31)
 800290c:	2a20      	cmp	r2, #32
 800290e:	d017      	beq.n	8002940 <_fx_system_timer_entry+0x15c>
 8002910:	f042 0220 	orr.w	r2, r2, #32
 8002914:	2100      	movs	r1, #0
 8002916:	e785      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002918:	f240 1281 	movw	r2, #385	; 0x181
 800291c:	2100      	movs	r1, #0
 800291e:	e781      	b.n	8002824 <_fx_system_timer_entry+0x40>
                            if (year > FX_MAXIMUM_YEAR)
 8002920:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 8002924:	f20e 7cbd 	addw	ip, lr, #1981	; 0x7bd
 8002928:	d086      	beq.n	8002838 <_fx_system_timer_entry+0x54>
 800292a:	2221      	movs	r2, #33	; 0x21
 800292c:	2100      	movs	r1, #0
 800292e:	e779      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002930:	f240 1241 	movw	r2, #321	; 0x141
 8002934:	2100      	movs	r1, #0
 8002936:	e775      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002938:	f240 1261 	movw	r2, #353	; 0x161
 800293c:	2100      	movs	r1, #0
 800293e:	e771      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002940:	2241      	movs	r2, #65	; 0x41
 8002942:	2100      	movs	r1, #0
 8002944:	e76e      	b.n	8002824 <_fx_system_timer_entry+0x40>
                            if (day > 28)
 8002946:	2a1c      	cmp	r2, #28
 8002948:	d819      	bhi.n	800297e <_fx_system_timer_entry+0x19a>
 800294a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294e:	2100      	movs	r1, #0
 8002950:	e768      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002952:	22a1      	movs	r2, #161	; 0xa1
 8002954:	2100      	movs	r1, #0
 8002956:	e765      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002958:	2281      	movs	r2, #129	; 0x81
 800295a:	2100      	movs	r1, #0
 800295c:	e762      	b.n	8002824 <_fx_system_timer_entry+0x40>
 800295e:	f240 1221 	movw	r2, #289	; 0x121
 8002962:	2100      	movs	r1, #0
 8002964:	e75e      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002966:	f240 1201 	movw	r2, #257	; 0x101
 800296a:	2100      	movs	r1, #0
 800296c:	e75a      	b.n	8002824 <_fx_system_timer_entry+0x40>
 800296e:	22e1      	movs	r2, #225	; 0xe1
 8002970:	2100      	movs	r1, #0
 8002972:	e757      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002974:	22c1      	movs	r2, #193	; 0xc1
 8002976:	2100      	movs	r1, #0
 8002978:	e754      	b.n	8002824 <_fx_system_timer_entry+0x40>
 800297a:	2261      	movs	r2, #97	; 0x61
 800297c:	e752      	b.n	8002824 <_fx_system_timer_entry+0x40>
 800297e:	2261      	movs	r2, #97	; 0x61
 8002980:	2100      	movs	r1, #0
 8002982:	e74f      	b.n	8002824 <_fx_system_timer_entry+0x40>
 8002984:	46585359 	.word	0x46585359
 8002988:	20002bdc 	.word	0x20002bdc
 800298c:	20002bc4 	.word	0x20002bc4
 8002990:	88888889 	.word	0x88888889

08002994 <_fx_utility_16_unsigned_read>:
{

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8002994:	7803      	ldrb	r3, [r0, #0]
 8002996:	7840      	ldrb	r0, [r0, #1]
              ((UINT)*(source_ptr) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8002998:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <_fx_utility_memory_copy>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 80029a0:	460b      	mov	r3, r1

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size);
 80029a2:	4601      	mov	r1, r0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f006 be37 	b.w	8009618 <memcpy>
 80029aa:	bf00      	nop

080029ac <_fxe_file_close>:

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 80029ac:	b178      	cbz	r0, 80029ce <_fxe_file_close+0x22>
__attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
{

unsigned int  ipsr_value;

    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80029ae:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <_fxe_file_close+0x28>)
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	d107      	bne.n	80029ca <_fxe_file_close+0x1e>
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_fxe_file_close+0x2c>)
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <_fxe_file_close+0x30>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d002      	beq.n	80029ca <_fxe_file_close+0x1e>
 80029c4:	b10b      	cbz	r3, 80029ca <_fxe_file_close+0x1e>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 80029c6:	f000 b98d 	b.w	8002ce4 <_fx_file_close>
    FX_CALLER_CHECKING_CODE
 80029ca:	2020      	movs	r0, #32

    /* Return status to the caller.  */
    return(status);
}
 80029cc:	4770      	bx	lr
        return(FX_PTR_ERROR);
 80029ce:	2018      	movs	r0, #24
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	2000007c 	.word	0x2000007c
 80029d8:	20002c7c 	.word	0x20002c7c
 80029dc:	20002d28 	.word	0x20002d28

080029e0 <_fxe_file_create>:

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 80029e0:	b178      	cbz	r0, 8002a02 <_fxe_file_create+0x22>
 80029e2:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <_fxe_file_create+0x28>)
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	d107      	bne.n	80029fe <_fxe_file_create+0x1e>
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <_fxe_file_create+0x2c>)
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <_fxe_file_create+0x30>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d002      	beq.n	80029fe <_fxe_file_create+0x1e>
 80029f8:	b10b      	cbz	r3, 80029fe <_fxe_file_create+0x1e>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 80029fa:	f000 b9e1 	b.w	8002dc0 <_fx_file_create>
    FX_CALLER_CHECKING_CODE
 80029fe:	2020      	movs	r0, #32

    /* File create is complete, return status.  */
    return(status);
}
 8002a00:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002a02:	2018      	movs	r0, #24
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	2000007c 	.word	0x2000007c
 8002a0c:	20002c7c 	.word	0x20002c7c
 8002a10:	20002d28 	.word	0x20002d28

08002a14 <_fxe_file_open>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8002a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a18:	9e06      	ldr	r6, [sp, #24]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8002a1a:	b388      	cbz	r0, 8002a80 <_fxe_file_open+0x6c>
 8002a1c:	4c23      	ldr	r4, [pc, #140]	; (8002aac <_fxe_file_open+0x98>)
 8002a1e:	6805      	ldr	r5, [r0, #0]
 8002a20:	42a5      	cmp	r5, r4
 8002a22:	d12d      	bne.n	8002a80 <_fxe_file_open+0x6c>
 8002a24:	b361      	cbz	r1, 8002a80 <_fxe_file_open+0x6c>
 8002a26:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8002a2a:	d129      	bne.n	8002a80 <_fxe_file_open+0x6c>
    {
        return(FX_PTR_ERROR);
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d82d      	bhi.n	8002a8c <_fxe_file_open+0x78>
 8002a30:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_ACCESS_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002a34:	4d1e      	ldr	r5, [pc, #120]	; (8002ab0 <_fxe_file_open+0x9c>)
 8002a36:	682d      	ldr	r5, [r5, #0]
 8002a38:	432c      	orrs	r4, r5
 8002a3a:	d124      	bne.n	8002a86 <_fxe_file_open+0x72>
 8002a3c:	4c1d      	ldr	r4, [pc, #116]	; (8002ab4 <_fxe_file_open+0xa0>)
 8002a3e:	4d1e      	ldr	r5, [pc, #120]	; (8002ab8 <_fxe_file_open+0xa4>)
 8002a40:	6824      	ldr	r4, [r4, #0]
 8002a42:	42ac      	cmp	r4, r5
 8002a44:	d01f      	beq.n	8002a86 <_fxe_file_open+0x72>
 8002a46:	b1f4      	cbz	r4, 8002a86 <_fxe_file_open+0x72>

    /* Get protection.  */
    FX_PROTECT
 8002a48:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	4630      	mov	r0, r6
 8002a56:	461f      	mov	r7, r3
 8002a58:	4690      	mov	r8, r2
 8002a5a:	f005 fd65 	bl	8008528 <_tx_mutex_get>
 8002a5e:	bb10      	cbnz	r0, 8002aa6 <_fxe_file_open+0x92>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 8002a60:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
    open_count =    media_ptr -> fx_media_opened_file_count;

    while (open_count--)
 8002a64:	1e51      	subs	r1, r2, #1
 8002a66:	b922      	cbnz	r2, 8002a72 <_fxe_file_open+0x5e>
 8002a68:	e012      	b.n	8002a90 <_fxe_file_open+0x7c>
 8002a6a:	3901      	subs	r1, #1
            /* Return error.  */
            return(FX_PTR_ERROR);
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    while (open_count--)
 8002a6e:	1c4a      	adds	r2, r1, #1
 8002a70:	d00e      	beq.n	8002a90 <_fxe_file_open+0x7c>
        if (file_ptr == current_file)
 8002a72:	429d      	cmp	r5, r3
 8002a74:	d1f9      	bne.n	8002a6a <_fxe_file_open+0x56>
            FX_UNPROTECT
 8002a76:	4630      	mov	r0, r6
 8002a78:	f005 fe40 	bl	80086fc <_tx_mutex_put>
            return(FX_PTR_ERROR);
 8002a7c:	2018      	movs	r0, #24
 8002a7e:	e000      	b.n	8002a82 <_fxe_file_open+0x6e>
        return(FX_PTR_ERROR);
 8002a80:	2018      	movs	r0, #24
    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);

    /* Open is complete, return status.  */
    return(status);
}
 8002a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FX_CALLER_CHECKING_CODE
 8002a86:	2020      	movs	r0, #32
}
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(FX_ACCESS_ERROR);
 8002a8c:	2006      	movs	r0, #6
 8002a8e:	e7f8      	b.n	8002a82 <_fxe_file_open+0x6e>
    FX_UNPROTECT
 8002a90:	4630      	mov	r0, r6
 8002a92:	f005 fe33 	bl	80086fc <_tx_mutex_put>
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8002a96:	463b      	mov	r3, r7
 8002a98:	4642      	mov	r2, r8
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	4620      	mov	r0, r4
}
 8002a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8002aa2:	f000 ba29 	b.w	8002ef8 <_fx_file_open>
    FX_PROTECT
 8002aa6:	2011      	movs	r0, #17
 8002aa8:	e7eb      	b.n	8002a82 <_fxe_file_open+0x6e>
 8002aaa:	bf00      	nop
 8002aac:	4d454449 	.word	0x4d454449
 8002ab0:	2000007c 	.word	0x2000007c
 8002ab4:	20002c7c 	.word	0x20002c7c
 8002ab8:	20002d28 	.word	0x20002d28

08002abc <_fxe_file_read>:

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf18      	it	ne
 8002ac0:	2900      	cmpne	r1, #0
 8002ac2:	d016      	beq.n	8002af2 <_fxe_file_read+0x36>
{
 8002ac4:	b430      	push	{r4, r5}
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8002ac6:	b188      	cbz	r0, 8002aec <_fxe_file_read+0x30>
 8002ac8:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002acc:	4d0a      	ldr	r5, [pc, #40]	; (8002af8 <_fxe_file_read+0x3c>)
 8002ace:	682d      	ldr	r5, [r5, #0]
 8002ad0:	432c      	orrs	r4, r5
 8002ad2:	d108      	bne.n	8002ae6 <_fxe_file_read+0x2a>
 8002ad4:	4c09      	ldr	r4, [pc, #36]	; (8002afc <_fxe_file_read+0x40>)
 8002ad6:	6824      	ldr	r4, [r4, #0]
 8002ad8:	b12c      	cbz	r4, 8002ae6 <_fxe_file_read+0x2a>
 8002ada:	4d09      	ldr	r5, [pc, #36]	; (8002b00 <_fxe_file_read+0x44>)
 8002adc:	42ac      	cmp	r4, r5
 8002ade:	d002      	beq.n	8002ae6 <_fxe_file_read+0x2a>
    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);

    /* Return status to the caller.  */
    return(status);
}
 8002ae0:	bc30      	pop	{r4, r5}
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8002ae2:	f000 bc47 	b.w	8003374 <_fx_file_read>
    FX_CALLER_CHECKING_CODE
 8002ae6:	2020      	movs	r0, #32
}
 8002ae8:	bc30      	pop	{r4, r5}
 8002aea:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002aec:	2018      	movs	r0, #24
}
 8002aee:	bc30      	pop	{r4, r5}
 8002af0:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002af2:	2018      	movs	r0, #24
}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	2000007c 	.word	0x2000007c
 8002afc:	20002c7c 	.word	0x20002c7c
 8002b00:	20002d28 	.word	0x20002d28

08002b04 <_fxe_file_seek>:

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8002b04:	b178      	cbz	r0, 8002b26 <_fxe_file_seek+0x22>
 8002b06:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <_fxe_file_seek+0x28>)
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	d107      	bne.n	8002b22 <_fxe_file_seek+0x1e>
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <_fxe_file_seek+0x2c>)
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <_fxe_file_seek+0x30>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d002      	beq.n	8002b22 <_fxe_file_seek+0x1e>
 8002b1c:	b10b      	cbz	r3, 8002b22 <_fxe_file_seek+0x1e>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8002b1e:	f000 bdb3 	b.w	8003688 <_fx_file_seek>
    FX_CALLER_CHECKING_CODE
 8002b22:	2020      	movs	r0, #32

    /* Seek is complete, return status.  */
    return(status);
}
 8002b24:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002b26:	2018      	movs	r0, #24
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	2000007c 	.word	0x2000007c
 8002b30:	20002c7c 	.word	0x20002c7c
 8002b34:	20002d28 	.word	0x20002d28

08002b38 <_fxe_file_write>:

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8002b38:	b1a8      	cbz	r0, 8002b66 <_fxe_file_write+0x2e>
 8002b3a:	b1a1      	cbz	r1, 8002b66 <_fxe_file_write+0x2e>
{
 8002b3c:	b410      	push	{r4}
 8002b3e:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002b42:	4c0a      	ldr	r4, [pc, #40]	; (8002b6c <_fxe_file_write+0x34>)
 8002b44:	6824      	ldr	r4, [r4, #0]
 8002b46:	4323      	orrs	r3, r4
 8002b48:	d109      	bne.n	8002b5e <_fxe_file_write+0x26>
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <_fxe_file_write+0x38>)
 8002b4c:	4c09      	ldr	r4, [pc, #36]	; (8002b74 <_fxe_file_write+0x3c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	d004      	beq.n	8002b5e <_fxe_file_write+0x26>
 8002b54:	b11b      	cbz	r3, 8002b5e <_fxe_file_write+0x26>
    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);

    /* Return status to the caller.  */
    return(status);
}
 8002b56:	f85d 4b04 	ldr.w	r4, [sp], #4
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 8002b5a:	f000 bd99 	b.w	8003690 <_fx_file_write>
    FX_CALLER_CHECKING_CODE
 8002b5e:	2020      	movs	r0, #32
}
 8002b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b64:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002b66:	2018      	movs	r0, #24
}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	2000007c 	.word	0x2000007c
 8002b70:	20002c7c 	.word	0x20002c7c
 8002b74:	20002d28 	.word	0x20002d28

08002b78 <_fxe_media_close>:

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8002b78:	b178      	cbz	r0, 8002b9a <_fxe_media_close+0x22>
 8002b7a:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <_fxe_media_close+0x28>)
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	d107      	bne.n	8002b96 <_fxe_media_close+0x1e>
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <_fxe_media_close+0x2c>)
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <_fxe_media_close+0x30>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d002      	beq.n	8002b96 <_fxe_media_close+0x1e>
 8002b90:	b10b      	cbz	r3, 8002b96 <_fxe_media_close+0x1e>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8002b92:	f001 b851 	b.w	8003c38 <_fx_media_close>
    FX_CALLER_CHECKING_CODE
 8002b96:	2020      	movs	r0, #32

    /* Return status to the caller.  */
    return(status);
}
 8002b98:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002b9a:	2018      	movs	r0, #24
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	2000007c 	.word	0x2000007c
 8002ba4:	20002c7c 	.word	0x20002c7c
 8002ba8:	20002d28 	.word	0x20002d28

08002bac <_fxe_media_format>:

UINT status;


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (driver == FX_NULL) || (memory_ptr == FX_NULL))
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf18      	it	ne
 8002bb0:	2900      	cmpne	r1, #0
 8002bb2:	d016      	beq.n	8002be2 <_fxe_media_format+0x36>
{
 8002bb4:	b430      	push	{r4, r5}
    if ((media_ptr == FX_NULL) || (driver == FX_NULL) || (memory_ptr == FX_NULL))
 8002bb6:	b188      	cbz	r0, 8002bdc <_fxe_media_format+0x30>
 8002bb8:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002bbc:	4d0a      	ldr	r5, [pc, #40]	; (8002be8 <_fxe_media_format+0x3c>)
 8002bbe:	682d      	ldr	r5, [r5, #0]
 8002bc0:	432c      	orrs	r4, r5
 8002bc2:	d108      	bne.n	8002bd6 <_fxe_media_format+0x2a>
 8002bc4:	4c09      	ldr	r4, [pc, #36]	; (8002bec <_fxe_media_format+0x40>)
 8002bc6:	6824      	ldr	r4, [r4, #0]
 8002bc8:	b12c      	cbz	r4, 8002bd6 <_fxe_media_format+0x2a>
 8002bca:	4d09      	ldr	r5, [pc, #36]	; (8002bf0 <_fxe_media_format+0x44>)
 8002bcc:	42ac      	cmp	r4, r5
 8002bce:	d002      	beq.n	8002bd6 <_fxe_media_format+0x2a>
                               total_sectors, bytes_per_sector, sectors_per_cluster,
                               heads, sectors_per_track);

    /* Return completion status.  */
    return(status);
}
 8002bd0:	bc30      	pop	{r4, r5}
    status =  _fx_media_format(media_ptr, driver, driver_info_ptr, memory_ptr, memory_size,
 8002bd2:	f001 b957 	b.w	8003e84 <_fx_media_format>
    FX_CALLER_CHECKING_CODE
 8002bd6:	2020      	movs	r0, #32
}
 8002bd8:	bc30      	pop	{r4, r5}
 8002bda:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002bdc:	2018      	movs	r0, #24
}
 8002bde:	bc30      	pop	{r4, r5}
 8002be0:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8002be2:	2018      	movs	r0, #24
}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000007c 	.word	0x2000007c
 8002bec:	20002c7c 	.word	0x20002c7c
 8002bf0:	20002d28 	.word	0x20002d28

08002bf4 <_fxe_media_open>:
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d031      	beq.n	8002c5c <_fxe_media_open+0x68>
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	d02f      	beq.n	8002c5c <_fxe_media_open+0x68>
{
 8002bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c00:	b085      	sub	sp, #20
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8002c02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002c04:	b334      	cbz	r4, 8002c54 <_fxe_media_open+0x60>
 8002c06:	f242 44b8 	movw	r4, #9400	; 0x24b8
 8002c0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002c0c:	42a5      	cmp	r5, r4
 8002c0e:	d121      	bne.n	8002c54 <_fxe_media_open+0x60>
 8002c10:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8002c14:	4d2c      	ldr	r5, [pc, #176]	; (8002cc8 <_fxe_media_open+0xd4>)
 8002c16:	682d      	ldr	r5, [r5, #0]
 8002c18:	432c      	orrs	r4, r5
 8002c1a:	d121      	bne.n	8002c60 <_fxe_media_open+0x6c>
 8002c1c:	4c2b      	ldr	r4, [pc, #172]	; (8002ccc <_fxe_media_open+0xd8>)
 8002c1e:	4d2c      	ldr	r5, [pc, #176]	; (8002cd0 <_fxe_media_open+0xdc>)
 8002c20:	6824      	ldr	r4, [r4, #0]
 8002c22:	42ac      	cmp	r4, r5
 8002c24:	d01c      	beq.n	8002c60 <_fxe_media_open+0x6c>
 8002c26:	b1dc      	cbz	r4, 8002c60 <_fxe_media_open+0x6c>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8002c28:	4c2a      	ldr	r4, [pc, #168]	; (8002cd4 <_fxe_media_open+0xe0>)
 8002c2a:	6825      	ldr	r5, [r4, #0]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8002c2c:	426c      	negs	r4, r5
 8002c2e:	402c      	ands	r4, r5

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8002c30:	2c01      	cmp	r4, #1
 8002c32:	d00b      	beq.n	8002c4c <_fxe_media_open+0x58>
 8002c34:	42a5      	cmp	r5, r4
 8002c36:	d109      	bne.n	8002c4c <_fxe_media_open+0x58>
        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8002c38:	4c27      	ldr	r4, [pc, #156]	; (8002cd8 <_fxe_media_open+0xe4>)
 8002c3a:	6824      	ldr	r4, [r4, #0]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8002c3c:	4265      	negs	r5, r4
 8002c3e:	4025      	ands	r5, r4

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8002c40:	2d01      	cmp	r5, #1
 8002c42:	d003      	beq.n	8002c4c <_fxe_media_open+0x58>
 8002c44:	1b64      	subs	r4, r4, r5
 8002c46:	bf18      	it	ne
 8002c48:	2401      	movne	r4, #1
 8002c4a:	b16c      	cbz	r4, 8002c68 <_fxe_media_open+0x74>
        return(FX_MEDIA_INVALID);
 8002c4c:	2002      	movs	r0, #2
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
}
 8002c4e:	b005      	add	sp, #20
 8002c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 8002c54:	2018      	movs	r0, #24
}
 8002c56:	b005      	add	sp, #20
 8002c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 8002c5c:	2018      	movs	r0, #24
}
 8002c5e:	4770      	bx	lr
    FX_CALLER_CHECKING_CODE
 8002c60:	2020      	movs	r0, #32
}
 8002c62:	b005      	add	sp, #20
 8002c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c68:	461e      	mov	r6, r3
 8002c6a:	4617      	mov	r7, r2
 8002c6c:	4688      	mov	r8, r1
 8002c6e:	4605      	mov	r5, r0
    current_thread =  tx_thread_identify();
 8002c70:	f005 fe4e 	bl	8008910 <_tx_thread_identify>
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8002c74:	4621      	mov	r1, r4
 8002c76:	aa03      	add	r2, sp, #12
    current_thread =  tx_thread_identify();
 8002c78:	4681      	mov	r9, r0
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8002c7a:	f005 fe8b 	bl	8008994 <_tx_thread_preemption_change>
    open_count =     _fx_system_media_opened_count;
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <_fxe_media_open+0xe8>)
    current_media =  _fx_system_media_opened_ptr;
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <_fxe_media_open+0xec>)
    open_count =     _fx_system_media_opened_count;
 8002c82:	6811      	ldr	r1, [r2, #0]
    current_media =  _fx_system_media_opened_ptr;
 8002c84:	681b      	ldr	r3, [r3, #0]
    while (open_count--)
 8002c86:	1e4a      	subs	r2, r1, #1
 8002c88:	b929      	cbnz	r1, 8002c96 <_fxe_media_open+0xa2>
 8002c8a:	e00d      	b.n	8002ca8 <_fxe_media_open+0xb4>
 8002c8c:	3a01      	subs	r2, #1
        current_media =  current_media -> fx_media_opened_next;
 8002c8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    while (open_count--)
 8002c92:	1c51      	adds	r1, r2, #1
 8002c94:	d008      	beq.n	8002ca8 <_fxe_media_open+0xb4>
        if (media_ptr == current_media)
 8002c96:	429d      	cmp	r5, r3
 8002c98:	d1f8      	bne.n	8002c8c <_fxe_media_open+0x98>
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8002c9a:	aa03      	add	r2, sp, #12
 8002c9c:	4648      	mov	r0, r9
 8002c9e:	9903      	ldr	r1, [sp, #12]
 8002ca0:	f005 fe78 	bl	8008994 <_tx_thread_preemption_change>
            return(FX_PTR_ERROR);
 8002ca4:	2018      	movs	r0, #24
 8002ca6:	e7d6      	b.n	8002c56 <_fxe_media_open+0x62>
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8002ca8:	aa03      	add	r2, sp, #12
 8002caa:	9903      	ldr	r1, [sp, #12]
 8002cac:	4648      	mov	r0, r9
 8002cae:	f005 fe71 	bl	8008994 <_tx_thread_preemption_change>
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 8002cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cb4:	463a      	mov	r2, r7
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	4628      	mov	r0, r5
 8002cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4633      	mov	r3, r6
 8002cc2:	f001 fbb5 	bl	8004430 <_fx_media_open>
    return(status);
 8002cc6:	e7c6      	b.n	8002c56 <_fxe_media_open+0x62>
 8002cc8:	2000007c 	.word	0x2000007c
 8002ccc:	20002c7c 	.word	0x20002c7c
 8002cd0:	20002d28 	.word	0x20002d28
 8002cd4:	20002bc0 	.word	0x20002bc0
 8002cd8:	20002bcc 	.word	0x20002bcc
 8002cdc:	20002bc8 	.word	0x20002bc8
 8002ce0:	20002bd0 	.word	0x20002bd0

08002ce4 <_fx_file_close>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8002ce6:	6802      	ldr	r2, [r0, #0]
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <_fx_file_close+0xc8>)
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d10c      	bne.n	8002d08 <_fx_file_close+0x24>
        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8002cee:	6d85      	ldr	r5, [r0, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8002cf0:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <_fx_file_close+0xcc>)
    media_ptr -> fx_media_file_closes++;
 8002cf2:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    FX_PROTECT
 8002cf6:	6829      	ldr	r1, [r5, #0]
    media_ptr -> fx_media_file_closes++;
 8002cf8:	3301      	adds	r3, #1
    FX_PROTECT
 8002cfa:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_closes++;
 8002cfc:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
    FX_PROTECT
 8002d00:	d005      	beq.n	8002d0e <_fx_file_close+0x2a>
 8002d02:	2611      	movs	r6, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return status to the caller.  */
    return(FX_SUCCESS);
}
 8002d04:	4630      	mov	r0, r6
 8002d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(FX_NOT_OPEN);
 8002d08:	2607      	movs	r6, #7
}
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FX_PROTECT
 8002d0e:	f505 77e4 	add.w	r7, r5, #456	; 0x1c8
 8002d12:	4604      	mov	r4, r0
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	4638      	mov	r0, r7
 8002d1a:	f005 fc05 	bl	8008528 <_tx_mutex_get>
 8002d1e:	4606      	mov	r6, r0
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d1ee      	bne.n	8002d02 <_fx_file_close+0x1e>
    if (file_ptr == file_ptr -> fx_file_opened_next)
 8002d24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d26:	42a3      	cmp	r3, r4
 8002d28:	d038      	beq.n	8002d9c <_fx_file_close+0xb8>
            file_ptr -> fx_file_opened_previous;
 8002d2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8002d2c:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8002d30:	6619      	str	r1, [r3, #96]	; 0x60
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8002d32:	42a2      	cmp	r2, r4
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8002d34:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002d36:	65cb      	str	r3, [r1, #92]	; 0x5c
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8002d38:	d033      	beq.n	8002da2 <_fx_file_close+0xbe>
    media_ptr -> fx_media_opened_file_count--;
 8002d3a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8002d3e:	68a2      	ldr	r2, [r4, #8]
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8002d40:	491c      	ldr	r1, [pc, #112]	; (8002db4 <_fx_file_close+0xd0>)
    media_ptr -> fx_media_opened_file_count--;
 8002d42:	3b01      	subs	r3, #1
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8002d44:	2a01      	cmp	r2, #1
    media_ptr -> fx_media_opened_file_count--;
 8002d46:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8002d4a:	6021      	str	r1, [r4, #0]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8002d4c:	d101      	bne.n	8002d52 <_fx_file_close+0x6e>
 8002d4e:	7b23      	ldrb	r3, [r4, #12]
 8002d50:	b923      	cbnz	r3, 8002d5c <_fx_file_close+0x78>
    FX_UNPROTECT
 8002d52:	4638      	mov	r0, r7
 8002d54:	f005 fcd2 	bl	80086fc <_tx_mutex_put>
}
 8002d58:	4630      	mov	r0, r6
 8002d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002d5c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002d60:	b672      	cpsid	i
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8002d62:	4915      	ldr	r1, [pc, #84]	; (8002db8 <_fx_file_close+0xd4>)
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <_fx_file_close+0xd8>)
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8002d66:	6809      	ldr	r1, [r1, #0]
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8002d68:	681b      	ldr	r3, [r3, #0]
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8002d6a:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8002d6e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8002d72:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002d76:	f382 8810 	msr	PRIMASK, r2
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8002d7a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f104 0168 	add.w	r1, r4, #104	; 0x68
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8002d84:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8002d88:	f003 f8a0 	bl	8005ecc <_fx_directory_entry_write>
        if (status != FX_SUCCESS)
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d0df      	beq.n	8002d52 <_fx_file_close+0x6e>
            FX_UNPROTECT
 8002d92:	4638      	mov	r0, r7
            return(status);
 8002d94:	461e      	mov	r6, r3
            FX_UNPROTECT
 8002d96:	f005 fcb1 	bl	80086fc <_tx_mutex_put>
            return(status);
 8002d9a:	e7b3      	b.n	8002d04 <_fx_file_close+0x20>
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 8002d9c:	f8c5 00c8 	str.w	r0, [r5, #200]	; 0xc8
 8002da0:	e7cb      	b.n	8002d3a <_fx_file_close+0x56>
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 8002da2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002da4:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 8002da8:	e7c7      	b.n	8002d3a <_fx_file_close+0x56>
 8002daa:	bf00      	nop
 8002dac:	46494c45 	.word	0x46494c45
 8002db0:	4d454449 	.word	0x4d454449
 8002db4:	46494c43 	.word	0x46494c43
 8002db8:	20002bdc 	.word	0x20002bdc
 8002dbc:	20002bc4 	.word	0x20002bc4

08002dc0 <_fx_file_create>:


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 8002dc0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8002dc4:	3301      	adds	r3, #1
{
 8002dc6:	b570      	push	{r4, r5, r6, lr}
    media_ptr -> fx_media_file_creates++;
 8002dc8:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
{
 8002dcc:	b0bc      	sub	sp, #240	; 0xf0

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
    work_ptr =  (CHAR *)file_name;
    while (*work_ptr)
 8002dce:	780b      	ldrb	r3, [r1, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d04e      	beq.n	8002e72 <_fx_file_create+0xb2>
 8002dd4:	460c      	mov	r4, r1
    i =  0;
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	e00b      	b.n	8002df2 <_fx_file_create+0x32>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8002dda:	2b2f      	cmp	r3, #47	; 0x2f
 8002ddc:	d00b      	beq.n	8002df6 <_fx_file_create+0x36>
        {
            /* Yes, reset the name size.  */
            i =  0;
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 8002dde:	3b20      	subs	r3, #32
 8002de0:	bf18      	it	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	b90a      	cbnz	r2, 8002dea <_fx_file_create+0x2a>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d041      	beq.n	8002e6e <_fx_file_create+0xae>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 8002dea:	3201      	adds	r2, #1
    while (*work_ptr)
 8002dec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002df0:	b133      	cbz	r3, 8002e00 <_fx_file_create+0x40>
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8002df2:	2b5c      	cmp	r3, #92	; 0x5c
 8002df4:	d1f1      	bne.n	8002dda <_fx_file_create+0x1a>
    while (*work_ptr)
 8002df6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            i =  0;
 8002dfa:	2200      	movs	r2, #0
    while (*work_ptr)
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f8      	bne.n	8002df2 <_fx_file_create+0x32>
        /* Move to the next character.  */
        work_ptr++;
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 8002e00:	3a01      	subs	r2, #1
 8002e02:	2afe      	cmp	r2, #254	; 0xfe
 8002e04:	d835      	bhi.n	8002e72 <_fx_file_create+0xb2>
    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
    search_directory.fx_dir_entry_short_name[0] = 0;

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002e06:	4a39      	ldr	r2, [pc, #228]	; (8002eec <_fx_file_create+0x12c>)
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8002e08:	f600 159c 	addw	r5, r0, #2460	; 0x99c
    dir_entry.fx_dir_entry_short_name[0] =        0;
 8002e0c:	f88d 3014 	strb.w	r3, [sp, #20]
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8002e10:	f600 249c 	addw	r4, r0, #2716	; 0xa9c
    search_directory.fx_dir_entry_short_name[0] = 0;
 8002e14:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002e18:	6803      	ldr	r3, [r0, #0]
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8002e1a:	9504      	str	r5, [sp, #16]
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002e1c:	4293      	cmp	r3, r2
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8002e1e:	9420      	str	r4, [sp, #128]	; 0x80
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002e20:	d003      	beq.n	8002e2a <_fx_file_create+0x6a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8002e22:	2411      	movs	r4, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* File create is complete, return status.  */
    return(status);
}
 8002e24:	4620      	mov	r0, r4
 8002e26:	b03c      	add	sp, #240	; 0xf0
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
    FX_PROTECT
 8002e2a:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4605      	mov	r5, r0
 8002e32:	f04f 31ff 	mov.w	r1, #4294967295
 8002e36:	4630      	mov	r0, r6
 8002e38:	f005 fb76 	bl	8008528 <_tx_mutex_get>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d1f0      	bne.n	8002e22 <_fx_file_create+0x62>
    if (media_ptr -> fx_media_driver_write_protect)
 8002e40:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8002e44:	b9cb      	cbnz	r3, 8002e7a <_fx_file_create+0xba>
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 8002e46:	a803      	add	r0, sp, #12
 8002e48:	4621      	mov	r1, r4
 8002e4a:	ab20      	add	r3, sp, #128	; 0x80
 8002e4c:	aa04      	add	r2, sp, #16
 8002e4e:	9000      	str	r0, [sp, #0]
 8002e50:	4628      	mov	r0, r5
 8002e52:	f004 f98f 	bl	8007174 <_fx_directory_search>
    if (status == FX_SUCCESS)
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d042      	beq.n	8002ee0 <_fx_file_create+0x120>
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 8002e5a:	9904      	ldr	r1, [sp, #16]
 8002e5c:	9803      	ldr	r0, [sp, #12]
 8002e5e:	f004 f93b 	bl	80070d8 <_fx_directory_name_extract>
 8002e62:	b178      	cbz	r0, 8002e84 <_fx_file_create+0xc4>
        FX_UNPROTECT
 8002e64:	4630      	mov	r0, r6
        return(FX_INVALID_PATH);
 8002e66:	240d      	movs	r4, #13
        FX_UNPROTECT
 8002e68:	f005 fc48 	bl	80086fc <_tx_mutex_put>
        return(FX_INVALID_PATH);
 8002e6c:	e7da      	b.n	8002e24 <_fx_file_create+0x64>
            i =  0;
 8002e6e:	461a      	mov	r2, r3
 8002e70:	e7bc      	b.n	8002dec <_fx_file_create+0x2c>
        return(FX_INVALID_NAME);
 8002e72:	240c      	movs	r4, #12
}
 8002e74:	4620      	mov	r0, r4
 8002e76:	b03c      	add	sp, #240	; 0xf0
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
        FX_UNPROTECT
 8002e7a:	4630      	mov	r0, r6
        return(FX_WRITE_PROTECT);
 8002e7c:	2423      	movs	r4, #35	; 0x23
        FX_UNPROTECT
 8002e7e:	f005 fc3d 	bl	80086fc <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 8002e82:	e7cf      	b.n	8002e24 <_fx_file_create+0x64>
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 8002e84:	a920      	add	r1, sp, #128	; 0x80
 8002e86:	aa04      	add	r2, sp, #16
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f003 fe9d 	bl	8006bc8 <_fx_directory_free_search>
    if (status != FX_SUCCESS)
 8002e8e:	4604      	mov	r4, r0
 8002e90:	bb10      	cbnz	r0, 8002ed8 <_fx_file_create+0x118>
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 8002e92:	9904      	ldr	r1, [sp, #16]
 8002e94:	9803      	ldr	r0, [sp, #12]
 8002e96:	f004 f91f 	bl	80070d8 <_fx_directory_name_extract>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e9a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e9e:	b672      	cpsid	i
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8002ea0:	4913      	ldr	r1, [pc, #76]	; (8002ef0 <_fx_file_create+0x130>)
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8002ea2:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <_fx_file_create+0x134>)
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8002ea4:	6809      	ldr	r1, [r1, #0]
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8002ea6:	6812      	ldr	r2, [r2, #0]
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8002ea8:	910f      	str	r1, [sp, #60]	; 0x3c
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8002eaa:	9210      	str	r2, [sp, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002eac:	f383 8810 	msr	PRIMASK, r3
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 8002eb0:	2220      	movs	r2, #32
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8002eb2:	9b04      	ldr	r3, [sp, #16]
    dir_entry.fx_dir_entry_file_size =  0;
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	2100      	movs	r1, #0
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 8002eb8:	9411      	str	r4, [sp, #68]	; 0x44
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 8002eba:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    dir_entry.fx_dir_entry_file_size =  0;
 8002ebe:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec6:	d102      	bne.n	8002ece <_fx_file_create+0x10e>
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 8002ec8:	2322      	movs	r3, #34	; 0x22
 8002eca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 8002ece:	a904      	add	r1, sp, #16
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f002 fffb 	bl	8005ecc <_fx_directory_entry_write>
 8002ed6:	4604      	mov	r4, r0
    FX_UNPROTECT
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f005 fc0f 	bl	80086fc <_tx_mutex_put>
    return(status);
 8002ede:	e7a1      	b.n	8002e24 <_fx_file_create+0x64>
        FX_UNPROTECT
 8002ee0:	4630      	mov	r0, r6
        return(FX_ALREADY_CREATED);
 8002ee2:	240b      	movs	r4, #11
        FX_UNPROTECT
 8002ee4:	f005 fc0a 	bl	80086fc <_tx_mutex_put>
        return(FX_ALREADY_CREATED);
 8002ee8:	e79c      	b.n	8002e24 <_fx_file_create+0x64>
 8002eea:	bf00      	nop
 8002eec:	4d454449 	.word	0x4d454449
 8002ef0:	20002bdc 	.word	0x20002bdc
 8002ef4:	20002bc4 	.word	0x20002bc4

08002ef8 <_fx_file_open>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 8002ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efc:	4604      	mov	r4, r0
 8002efe:	460d      	mov	r5, r1
UINT     fast_open;
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002f00:	486e      	ldr	r0, [pc, #440]	; (80030bc <_fx_file_open+0x1c4>)
{
 8002f02:	b093      	sub	sp, #76	; 0x4c
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002f04:	6821      	ldr	r1, [r4, #0]
ULONG    contents = 0;
 8002f06:	2600      	movs	r6, #0
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002f08:	4281      	cmp	r1, r0
ULONG    contents = 0;
 8002f0a:	9611      	str	r6, [sp, #68]	; 0x44
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8002f0c:	f040 80bb 	bne.w	8003086 <_fx_file_open+0x18e>
 8002f10:	4698      	mov	r8, r3
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 8002f12:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 8002f16:	f64f 70f8 	movw	r0, #65528	; 0xfff8
 8002f1a:	4617      	mov	r7, r2
    media_ptr -> fx_media_file_opens++;
 8002f1c:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_32_bit_FAT)
 8002f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
        fat_last        = FX_LAST_CLUSTER_1_32;
 8002f20:	4967      	ldr	r1, [pc, #412]	; (80030c0 <_fx_file_open+0x1c8>)
    media_ptr -> fx_media_file_opens++;
 8002f22:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        fat_last        = FX_LAST_CLUSTER_1_32;
 8002f26:	4603      	mov	r3, r0
    file_ptr -> fx_file_write_notify = FX_NULL;
 8002f28:	f8c5 61dc 	str.w	r6, [r5, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_1_32;
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	bf18      	it	ne
 8002f30:	460b      	movne	r3, r1
        fat_last        = FX_LAST_CLUSTER_1;
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
    }

    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8002f32:	f1b8 0f02 	cmp.w	r8, #2
        fat_last        = FX_LAST_CLUSTER_1_32;
 8002f36:	9304      	str	r3, [sp, #16]
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8002f38:	f000 80aa 	beq.w	8003090 <_fx_file_open+0x198>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8002f3c:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	4658      	mov	r0, fp
 8002f46:	f005 faef 	bl	8008528 <_tx_mutex_get>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	f040 809b 	bne.w	8003086 <_fx_file_open+0x18e>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8002f50:	f105 03d8 	add.w	r3, r5, #216	; 0xd8
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 8002f54:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8002f58:	4639      	mov	r1, r7
 8002f5a:	9000      	str	r0, [sp, #0]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	930b      	str	r3, [sp, #44]	; 0x2c
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8002f60:	4603      	mov	r3, r0
 8002f62:	4620      	mov	r0, r4
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8002f64:	66aa      	str	r2, [r5, #104]	; 0x68
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8002f66:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f6a:	f004 f903 	bl	8007174 <_fx_directory_search>

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8002f6e:	4607      	mov	r7, r0
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f040 809a 	bne.w	80030aa <_fx_file_open+0x1b2>
        /* Return the error code.  */
        return(status);
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8002f76:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 8002f7a:	f013 0f18 	tst.w	r3, #24
 8002f7e:	f040 8181 	bne.w	8003284 <_fx_file_open+0x38c>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 8002f82:	f1b8 0f01 	cmp.w	r8, #1
 8002f86:	f000 8134 	beq.w	80031f2 <_fx_file_open+0x2fa>
    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8002f8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    file_ptr -> fx_file_current_physical_cluster =  0;
 8002f8c:	f04f 0a00 	mov.w	sl, #0
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8002f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8002f92:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8002f96:	930e      	str	r3, [sp, #56]	; 0x38
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8002f98:	920c      	str	r2, [sp, #48]	; 0x30
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8002f9e:	9109      	str	r1, [sp, #36]	; 0x24
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8002fa0:	930a      	str	r3, [sp, #40]	; 0x28
    file_ptr -> fx_file_current_physical_cluster =  0;
 8002fa2:	f8c5 a020 	str.w	sl, [r5, #32]
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8002fa6:	e9d5 1228 	ldrd	r1, r2, [r5, #160]	; 0xa0
 8002faa:	e9cd 1202 	strd	r1, r2, [sp, #8]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8170 	beq.w	8003294 <_fx_file_open+0x39c>
    }

    last_cluster =      0;
    cluster_count =     0;
    leading_consecutive = 1;
    file_ptr -> fx_file_consecutive_cluster = 1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	61ab      	str	r3, [r5, #24]

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 8002fb8:	2e00      	cmp	r6, #0
 8002fba:	f040 8083 	bne.w	80030c4 <_fx_file_open+0x1cc>
        else
        {
#endif /* FX_ENABLE_EXFAT */

            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8002fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fc0:	4298      	cmp	r0, r3
 8002fc2:	f240 81c6 	bls.w	8003352 <_fx_file_open+0x45a>
 8002fc6:	f242 42a8 	movw	r2, #9384	; 0x24a8
 8002fca:	58a1      	ldr	r1, [r4, r2]
 8002fcc:	4288      	cmp	r0, r1
 8002fce:	f080 81c0 	bcs.w	8003352 <_fx_file_open+0x45a>
 8002fd2:	eb04 0a02 	add.w	sl, r4, r2
                /* Setup for the next cluster.  */
                cluster =  contents;

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 8002fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fd8:	2100      	movs	r1, #0
 8002fda:	970e      	str	r7, [sp, #56]	; 0x38
 8002fdc:	4610      	mov	r0, r2
 8002fde:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002fe0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002fe4:	4699      	mov	r9, r3
 8002fe6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002fea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002ff2:	e010      	b.n	8003016 <_fx_file_open+0x11e>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8002ff4:	ebbb 0909 	subs.w	r9, fp, r9
 8002ff8:	eb6c 0a0a 	sbc.w	sl, ip, sl
 8002ffc:	e9cd 9a02 	strd	r9, sl, [sp, #8]
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8003000:	2a01      	cmp	r2, #1
 8003002:	f240 8158 	bls.w	80032b6 <_fx_file_open+0x3be>
 8003006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	f080 8153 	bcs.w	80032b6 <_fx_file_open+0x3be>
 8003010:	4646      	mov	r6, r8
                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
                        file_ptr -> fx_file_current_relative_cluster++;

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 8003012:	4617      	mov	r7, r2
 8003014:	4681      	mov	r9, r0
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8003016:	aa11      	add	r2, sp, #68	; 0x44
 8003018:	4639      	mov	r1, r7
 800301a:	4620      	mov	r0, r4
                cluster_count++;
 800301c:	f106 0801 	add.w	r8, r6, #1
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8003020:	f001 fdb4 	bl	8004b8c <_fx_utility_FAT_entry_read>
                if (status != FX_SUCCESS)
 8003024:	2800      	cmp	r0, #0
 8003026:	f040 8187 	bne.w	8003338 <_fx_file_open+0x440>
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800302a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800302c:	42ba      	cmp	r2, r7
 800302e:	f000 813b 	beq.w	80032a8 <_fx_file_open+0x3b0>
 8003032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003034:	4543      	cmp	r3, r8
 8003036:	f0c0 8137 	bcc.w	80032a8 <_fx_file_open+0x3b0>
                if (cluster + 1 == contents)
 800303a:	1c7b      	adds	r3, r7, #1
                    if (leading_consecutive)
 800303c:	4293      	cmp	r3, r2
 800303e:	d102      	bne.n	8003046 <_fx_file_open+0x14e>
 8003040:	f019 0f01 	tst.w	r9, #1
 8003044:	d135      	bne.n	80030b2 <_fx_file_open+0x1ba>
                if (bytes_remaining > bytes_per_cluster)
 8003046:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800304a:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800304e:	45e2      	cmp	sl, ip
 8003050:	bf08      	it	eq
 8003052:	45d9      	cmpeq	r9, fp
 8003054:	d3ce      	bcc.n	8002ff4 <_fx_file_open+0xfc>
                else if (!file_ptr -> fx_file_current_physical_cluster)
 8003056:	6a2b      	ldr	r3, [r5, #32]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1d1      	bne.n	8003000 <_fx_file_open+0x108>
                    if ((bytes_remaining == bytes_per_cluster) &&
 800305c:	45e2      	cmp	sl, ip
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800305e:	622f      	str	r7, [r5, #32]
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8003060:	636e      	str	r6, [r5, #52]	; 0x34
                    if ((bytes_remaining == bytes_per_cluster) &&
 8003062:	bf08      	it	eq
 8003064:	45d9      	cmpeq	r9, fp
 8003066:	d1cb      	bne.n	8003000 <_fx_file_open+0x108>
 8003068:	2a01      	cmp	r2, #1
 800306a:	d9c9      	bls.n	8003000 <_fx_file_open+0x108>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800306c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	f080 8120 	bcs.w	80032b6 <_fx_file_open+0x3be>
                        bytes_remaining =  0;
 8003076:	2600      	movs	r6, #0
 8003078:	2700      	movs	r7, #0
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800307a:	622a      	str	r2, [r5, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800307c:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
                        bytes_remaining =  0;
 8003080:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003084:	e7c4      	b.n	8003010 <_fx_file_open+0x118>
        return(FX_MEDIA_NOT_OPEN);
 8003086:	2711      	movs	r7, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
}
 8003088:	4638      	mov	r0, r7
 800308a:	b013      	add	sp, #76	; 0x4c
 800308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8003090:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
 8003094:	f04f 31ff 	mov.w	r1, #4294967295
        open_type =  FX_OPEN_FOR_READ;
 8003098:	46b0      	mov	r8, r6
        fast_open =  FX_TRUE;
 800309a:	2601      	movs	r6, #1
    FX_PROTECT
 800309c:	4658      	mov	r0, fp
 800309e:	f005 fa43 	bl	8008528 <_tx_mutex_get>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	f43f af54 	beq.w	8002f50 <_fx_file_open+0x58>
 80030a8:	e7ed      	b.n	8003086 <_fx_file_open+0x18e>
        FX_UNPROTECT
 80030aa:	4658      	mov	r0, fp
 80030ac:	f005 fb26 	bl	80086fc <_tx_mutex_put>
        return(status);
 80030b0:	e7ea      	b.n	8003088 <_fx_file_open+0x190>
                        file_ptr -> fx_file_consecutive_cluster++;
 80030b2:	69ab      	ldr	r3, [r5, #24]
 80030b4:	2001      	movs	r0, #1
 80030b6:	4403      	add	r3, r0
 80030b8:	61ab      	str	r3, [r5, #24]
 80030ba:	e7c4      	b.n	8003046 <_fx_file_open+0x14e>
 80030bc:	4d454449 	.word	0x4d454449
 80030c0:	0ffffff8 	.word	0x0ffffff8
 80030c4:	4608      	mov	r0, r1
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 80030c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80030c8:	f110 30ff 	adds.w	r0, r0, #4294967295
 80030cc:	f142 31ff 	adc.w	r1, r2, #4294967295
 80030d0:	2200      	movs	r2, #0
 80030d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030da:	4613      	mov	r3, r2
 80030dc:	4632      	mov	r2, r6
 80030de:	1980      	adds	r0, r0, r6
 80030e0:	4159      	adcs	r1, r3
 80030e2:	f7fd f9c1 	bl	8000468 <__aeabi_uldivmod>
 80030e6:	fba0 2306 	umull	r2, r3, r0, r6
 80030ea:	46d6      	mov	lr, sl
 80030ec:	960a      	str	r6, [sp, #40]	; 0x28
 80030ee:	469a      	mov	sl, r3
 80030f0:	4691      	mov	r9, r2
 80030f2:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    last_cluster =      0;
 80030f6:	4676      	mov	r6, lr
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 80030f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 80030fc:	e9cd 9a06 	strd	r9, sl, [sp, #24]
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8003100:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8003104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003106:	fb03 a301 	mla	r3, r3, r1, sl
 800310a:	9307      	str	r3, [sp, #28]
    cluster_count =     0;
 800310c:	4673      	mov	r3, lr
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800310e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8003110:	2200      	movs	r2, #0
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8003112:	4897      	ldr	r0, [pc, #604]	; (8003370 <_fx_file_open+0x478>)
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8003114:	6069      	str	r1, [r5, #4]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8003116:	9909      	ldr	r1, [sp, #36]	; 0x24
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8003118:	732a      	strb	r2, [r5, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800311a:	612b      	str	r3, [r5, #16]
 800311c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800311e:	6169      	str	r1, [r5, #20]
 8003120:	2100      	movs	r1, #0
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8003122:	6028      	str	r0, [r5, #0]
 8003124:	4699      	mov	r9, r3
 8003126:	468a      	mov	sl, r1
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 8003128:	65ac      	str	r4, [r5, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800312a:	f8c5 8008 	str.w	r8, [r5, #8]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800312e:	61ee      	str	r6, [r5, #28]
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 8003130:	f8c5 21d8 	str.w	r2, [r5, #472]	; 0x1d8
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8003134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003138:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 800313c:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 8003140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003144:	e9c5 0114 	strd	r0, r1, [r5, #80]	; 0x50
    if (open_type == FX_OPEN_FOR_READ)
 8003148:	f1b8 0f00 	cmp.w	r8, #0
 800314c:	d07a      	beq.n	8003244 <_fx_file_open+0x34c>
        if (bytes_remaining == bytes_per_cluster)
 800314e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003150:	f04f 0900 	mov.w	r9, #0
 8003154:	6a2b      	ldr	r3, [r5, #32]
 8003156:	4688      	mov	r8, r1
 8003158:	1e98      	subs	r0, r3, #2
 800315a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800315e:	f04f 0900 	mov.w	r9, #0
 8003162:	fb00 fa0e 	mul.w	sl, r0, lr
 8003166:	f149 31ff 	adc.w	r1, r9, #4294967295
 800316a:	fba0 890c 	umull	r8, r9, r0, ip
 800316e:	fb0c aa01 	mla	sl, ip, r1, sl
 8003172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003176:	44d1      	add	r9, sl
 8003178:	eb10 0008 	adds.w	r0, r0, r8
 800317c:	eb41 0109 	adc.w	r1, r1, r9
 8003180:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800318c:	4589      	cmp	r9, r1
 800318e:	bf08      	it	eq
 8003190:	4580      	cmpeq	r8, r0
 8003192:	f000 80b9 	beq.w	8003308 <_fx_file_open+0x410>
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8003196:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8003198:	4680      	mov	r8, r0
 800319a:	4689      	mov	r9, r1
 800319c:	4613      	mov	r3, r2
 800319e:	4632      	mov	r2, r6
 80031a0:	f7fd f962 	bl	8000468 <__aeabi_uldivmod>
 80031a4:	63a8      	str	r0, [r5, #56]	; 0x38
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 80031a6:	fbb8 f3f6 	udiv	r3, r8, r6
 80031aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031ae:	9902      	ldr	r1, [sp, #8]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80031b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 80031b4:	fb06 1313 	mls	r3, r6, r3, r1
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80031b8:	eb18 0800 	adds.w	r8, r8, r0
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 80031bc:	632b      	str	r3, [r5, #48]	; 0x30
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80031be:	f149 0900 	adc.w	r9, r9, #0
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 80031c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80031c6:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 80031ca:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
    if (media_ptr -> fx_media_opened_file_list)
 80031ce:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d063      	beq.n	800329e <_fx_file_open+0x3a6>
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 80031d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 80031d8:	661d      	str	r5, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 80031da:	65d5      	str	r5, [r2, #92]	; 0x5c
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 80031dc:	662a      	str	r2, [r5, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 80031de:	65eb      	str	r3, [r5, #92]	; 0x5c
    media_ptr -> fx_media_opened_file_count++;
 80031e0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    FX_UNPROTECT
 80031e4:	4658      	mov	r0, fp
    media_ptr -> fx_media_opened_file_count++;
 80031e6:	3301      	adds	r3, #1
 80031e8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    FX_UNPROTECT
 80031ec:	f005 fa86 	bl	80086fc <_tx_mutex_put>
    return(FX_SUCCESS);
 80031f0:	e74a      	b.n	8003088 <_fx_file_open+0x190>
        if (media_ptr -> fx_media_driver_write_protect)
 80031f2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	d13f      	bne.n	800327a <_fx_file_open+0x382>
        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 80031fa:	07db      	lsls	r3, r3, #31
 80031fc:	d41d      	bmi.n	800323a <_fx_file_open+0x342>
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 80031fe:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
        while (open_count)
 8003202:	2a00      	cmp	r2, #0
 8003204:	f43f aec1 	beq.w	8002f8a <_fx_file_open+0x92>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8003208:	46dc      	mov	ip, fp
 800320a:	46a1      	mov	r9, r4
 800320c:	e9d5 012a 	ldrd	r0, r1, [r5, #168]	; 0xa8
 8003210:	e002      	b.n	8003218 <_fx_file_open+0x320>
        while (open_count)
 8003212:	3a01      	subs	r2, #1
            search_ptr =  search_ptr -> fx_file_opened_next;
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        while (open_count)
 8003216:	d03a      	beq.n	800328e <_fx_file_open+0x396>
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8003218:	e9d3 ab2a 	ldrd	sl, fp, [r3, #168]	; 0xa8
 800321c:	458b      	cmp	fp, r1
 800321e:	bf08      	it	eq
 8003220:	4582      	cmpeq	sl, r0
 8003222:	d1f6      	bne.n	8003212 <_fx_file_open+0x31a>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8003224:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8003228:	46a6      	mov	lr, r4
 800322a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 800322e:	45a6      	cmp	lr, r4
 8003230:	d1ef      	bne.n	8003212 <_fx_file_open+0x31a>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8003232:	689c      	ldr	r4, [r3, #8]
 8003234:	2c01      	cmp	r4, #1
 8003236:	d1ec      	bne.n	8003212 <_fx_file_open+0x31a>
 8003238:	46e3      	mov	fp, ip
                FX_UNPROTECT
 800323a:	4658      	mov	r0, fp
                return(FX_ACCESS_ERROR);
 800323c:	2706      	movs	r7, #6
                FX_UNPROTECT
 800323e:	f005 fa5d 	bl	80086fc <_tx_mutex_put>
                return(FX_ACCESS_ERROR);
 8003242:	e721      	b.n	8003088 <_fx_file_open+0x190>
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8003244:	9b09      	ldr	r3, [sp, #36]	; 0x24
        file_ptr -> fx_file_current_file_offset =       0;
 8003246:	2000      	movs	r0, #0
        file_ptr -> fx_file_current_relative_cluster =  0;
 8003248:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
        file_ptr -> fx_file_current_file_offset =       0;
 800324c:	2100      	movs	r1, #0
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800324e:	1e9e      	subs	r6, r3, #2
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8003250:	622b      	str	r3, [r5, #32]
        file_ptr -> fx_file_current_relative_sector =   0;
 8003252:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8003256:	fba6 230c 	umull	r2, r3, r6, ip
        file_ptr -> fx_file_current_logical_offset =    0;
 800325a:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800325e:	46c8      	mov	r8, r9
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8003260:	fb06 330e 	mla	r3, r6, lr, r3
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003264:	eb18 0802 	adds.w	r8, r8, r2
 8003268:	eb4a 0903 	adc.w	r9, sl, r3
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
        file_ptr -> fx_file_current_file_offset =       0;
 8003270:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003274:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
 8003278:	e7a9      	b.n	80031ce <_fx_file_open+0x2d6>
            FX_UNPROTECT
 800327a:	4658      	mov	r0, fp
            return(FX_WRITE_PROTECT);
 800327c:	2723      	movs	r7, #35	; 0x23
            FX_UNPROTECT
 800327e:	f005 fa3d 	bl	80086fc <_tx_mutex_put>
            return(FX_WRITE_PROTECT);
 8003282:	e701      	b.n	8003088 <_fx_file_open+0x190>
        FX_UNPROTECT
 8003284:	4658      	mov	r0, fp
        return(FX_NOT_A_FILE);
 8003286:	2705      	movs	r7, #5
        FX_UNPROTECT
 8003288:	f005 fa38 	bl	80086fc <_tx_mutex_put>
        return(FX_NOT_A_FILE);
 800328c:	e6fc      	b.n	8003088 <_fx_file_open+0x190>
 800328e:	46e3      	mov	fp, ip
 8003290:	464c      	mov	r4, r9
 8003292:	e67a      	b.n	8002f8a <_fx_file_open+0x92>
        FX_UNPROTECT
 8003294:	4658      	mov	r0, fp
        return(FX_MEDIA_INVALID);
 8003296:	2702      	movs	r7, #2
        FX_UNPROTECT
 8003298:	f005 fa30 	bl	80086fc <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 800329c:	e6f4      	b.n	8003088 <_fx_file_open+0x190>
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800329e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 80032a2:	65ed      	str	r5, [r5, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 80032a4:	662d      	str	r5, [r5, #96]	; 0x60
 80032a6:	e79b      	b.n	80031e0 <_fx_file_open+0x2e8>
 80032a8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
                    return(FX_FAT_READ_ERROR);
 80032ac:	2703      	movs	r7, #3
                    FX_UNPROTECT
 80032ae:	4658      	mov	r0, fp
 80032b0:	f005 fa24 	bl	80086fc <_tx_mutex_put>
                    return(FX_FAT_READ_ERROR);
 80032b4:	e6e8      	b.n	8003088 <_fx_file_open+0x190>
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 80032b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80032b8:	4643      	mov	r3, r8
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 80032ba:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 80032be:	f04f 0e00 	mov.w	lr, #0
 80032c2:	9709      	str	r7, [sp, #36]	; 0x24
 80032c4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 80032c6:	910e      	str	r1, [sp, #56]	; 0x38
 80032c8:	fba1 010c 	umull	r0, r1, r1, ip
 80032cc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80032d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80032d4:	fba0 9a03 	umull	r9, sl, r0, r3
 80032d8:	fb03 a101 	mla	r1, r3, r1, sl
 80032dc:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 80032e0:	9107      	str	r1, [sp, #28]
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 80032e2:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 80032e6:	e9d5 0128 	ldrd	r0, r1, [r5, #160]	; 0xa0
 80032ea:	458a      	cmp	sl, r1
 80032ec:	bf08      	it	eq
 80032ee:	4581      	cmpeq	r9, r0
 80032f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80032f4:	d328      	bcc.n	8003348 <_fx_file_open+0x450>
 80032f6:	b113      	cbz	r3, 80032fe <_fx_file_open+0x406>
                ((cluster_count) && (contents < fat_last)))
 80032f8:	9904      	ldr	r1, [sp, #16]
 80032fa:	428a      	cmp	r2, r1
 80032fc:	d324      	bcc.n	8003348 <_fx_file_open+0x450>
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 80032fe:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 8003302:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003304:	9209      	str	r2, [sp, #36]	; 0x24
 8003306:	e702      	b.n	800310e <_fx_file_open+0x216>
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8003308:	f110 30ff 	adds.w	r0, r0, #4294967295
 800330c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800330e:	4613      	mov	r3, r2
 8003310:	f141 31ff 	adc.w	r1, r1, #4294967295
 8003314:	4632      	mov	r2, r6
 8003316:	f7fd f8a7 	bl	8000468 <__aeabi_uldivmod>
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800331a:	632e      	str	r6, [r5, #48]	; 0x30
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800331c:	63a8      	str	r0, [r5, #56]	; 0x38
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800331e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8003322:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8003326:	eb18 0800 	adds.w	r8, r8, r0
 800332a:	eb49 0901 	adc.w	r9, r9, r1
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800332e:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003332:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
 8003336:	e74a      	b.n	80031ce <_fx_file_open+0x2d6>
 8003338:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800333c:	4601      	mov	r1, r0
                    FX_UNPROTECT
 800333e:	4658      	mov	r0, fp
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8003340:	460f      	mov	r7, r1
                    FX_UNPROTECT
 8003342:	f005 f9db 	bl	80086fc <_tx_mutex_put>
                    return(status);
 8003346:	e69f      	b.n	8003088 <_fx_file_open+0x190>
                FX_UNPROTECT
 8003348:	4658      	mov	r0, fp
                return(FX_FILE_CORRUPT);
 800334a:	2708      	movs	r7, #8
                FX_UNPROTECT
 800334c:	f005 f9d6 	bl	80086fc <_tx_mutex_put>
                return(FX_FILE_CORRUPT);
 8003350:	e69a      	b.n	8003088 <_fx_file_open+0x190>
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8003352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003356:	ea52 0103 	orrs.w	r1, r2, r3
 800335a:	d1f5      	bne.n	8003348 <_fx_file_open+0x450>
 800335c:	f04f 0e00 	mov.w	lr, #0
 8003360:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8003364:	e9cd 2306 	strd	r2, r3, [sp, #24]
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8003368:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800336c:	4673      	mov	r3, lr
 800336e:	e6ce      	b.n	800310e <_fx_file_open+0x216>
 8003370:	46494c45 	.word	0x46494c45

08003374 <_fx_file_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8003374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003378:	4605      	mov	r5, r0
 800337a:	b08f      	sub	sp, #60	; 0x3c
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800337c:	48ac      	ldr	r0, [pc, #688]	; (8003630 <_fx_file_read+0x2bc>)
{
 800337e:	9205      	str	r2, [sp, #20]
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8003380:	682a      	ldr	r2, [r5, #0]
{
 8003382:	9308      	str	r3, [sp, #32]
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8003384:	4282      	cmp	r2, r0
 8003386:	d10f      	bne.n	80033a8 <_fx_file_read+0x34>
        return(FX_NOT_OPEN);
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8003388:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800338a:	468a      	mov	sl, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800338c:	4aa9      	ldr	r2, [pc, #676]	; (8003634 <_fx_file_read+0x2c0>)
    media_ptr -> fx_media_file_reads++;
 800338e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    FX_PROTECT
 8003392:	6821      	ldr	r1, [r4, #0]
    media_ptr -> fx_media_file_reads++;
 8003394:	3301      	adds	r3, #1
    FX_PROTECT
 8003396:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_reads++;
 8003398:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    FX_PROTECT
 800339c:	d009      	beq.n	80033b2 <_fx_file_read+0x3e>
 800339e:	2211      	movs	r2, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
}
 80033a0:	4610      	mov	r0, r2
 80033a2:	b00f      	add	sp, #60	; 0x3c
 80033a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 80033a8:	2207      	movs	r2, #7
}
 80033aa:	4610      	mov	r0, r2
 80033ac:	b00f      	add	sp, #60	; 0x3c
 80033ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 80033b2:	f504 73e4 	add.w	r3, r4, #456	; 0x1c8
 80033b6:	f04f 31ff 	mov.w	r1, #4294967295
 80033ba:	4618      	mov	r0, r3
 80033bc:	9309      	str	r3, [sp, #36]	; 0x24
 80033be:	f005 f8b3 	bl	8008528 <_tx_mutex_get>
 80033c2:	4680      	mov	r8, r0
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d1ea      	bne.n	800339e <_fx_file_read+0x2a>
    if (file_ptr -> fx_file_current_file_offset >=
 80033c8:	e9d5 bc10 	ldrd	fp, ip, [r5, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 80033cc:	e9d5 6712 	ldrd	r6, r7, [r5, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 80033d0:	45bc      	cmp	ip, r7
 80033d2:	bf08      	it	eq
 80033d4:	45b3      	cmpeq	fp, r6
 80033d6:	f080 8131 	bcs.w	800363c <_fx_file_read+0x2c8>
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 80033da:	ebb6 080b 	subs.w	r8, r6, fp
    if ((ULONG64)request_size >
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	9b05      	ldr	r3, [sp, #20]
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 80033e4:	eb67 090c 	sbc.w	r9, r7, ip
    if ((ULONG64)request_size >
 80033e8:	4589      	cmp	r9, r1
 80033ea:	bf08      	it	eq
 80033ec:	4598      	cmpeq	r8, r3
 80033ee:	d202      	bcs.n	80033f6 <_fx_file_read+0x82>
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 80033f0:	eba6 030b 	sub.w	r3, r6, fp
 80033f4:	9305      	str	r3, [sp, #20]
    while (bytes_remaining)
 80033f6:	9f05      	ldr	r7, [sp, #20]
 80033f8:	2f00      	cmp	r7, #0
 80033fa:	d033      	beq.n	8003464 <_fx_file_read+0xf0>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 80033fc:	f242 48a8 	movw	r8, #9384	; 0x24a8
 8003400:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003402:	44a0      	add	r8, r4
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8003404:	b91a      	cbnz	r2, 800340e <_fx_file_read+0x9a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8003406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8003408:	42bb      	cmp	r3, r7
 800340a:	f240 80a5 	bls.w	8003558 <_fx_file_read+0x1e4>
            status =  _fx_utility_logical_sector_read(media_ptr,
 800340e:	2204      	movs	r2, #4
 8003410:	2301      	movs	r3, #1
 8003412:	4620      	mov	r0, r4
 8003414:	9202      	str	r2, [sp, #8]
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	68a1      	ldr	r1, [r4, #8]
 800341a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 800341e:	9100      	str	r1, [sp, #0]
 8003420:	f002 fab8 	bl	8005994 <_fx_utility_logical_sector_read>
            if (status !=  FX_SUCCESS)
 8003424:	2800      	cmp	r0, #0
 8003426:	f040 80c0 	bne.w	80035aa <_fx_file_read+0x236>
                file_ptr -> fx_file_current_logical_offset;
 800342a:	6b28      	ldr	r0, [r5, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 800342c:	4651      	mov	r1, sl
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800342e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8003430:	68a3      	ldr	r3, [r4, #8]
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8003432:	1a36      	subs	r6, r6, r0
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8003434:	4418      	add	r0, r3
 8003436:	42be      	cmp	r6, r7
 8003438:	bf28      	it	cs
 800343a:	463e      	movcs	r6, r7
 800343c:	4632      	mov	r2, r6
            bytes_remaining =  bytes_remaining - copy_bytes;
 800343e:	1bbf      	subs	r7, r7, r6
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8003440:	f7ff faae 	bl	80029a0 <_fx_utility_memory_copy>
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8003444:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8003446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            destination_ptr =  destination_ptr + copy_bytes;
 8003448:	44b2      	add	sl, r6
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800344a:	4432      	add	r2, r6
        if (file_ptr -> fx_file_current_logical_offset >=
 800344c:	429a      	cmp	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800344e:	632a      	str	r2, [r5, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8003450:	d260      	bcs.n	8003514 <_fx_file_read+0x1a0>
    while (bytes_remaining)
 8003452:	2f00      	cmp	r7, #0
 8003454:	d1d6      	bne.n	8003404 <_fx_file_read+0x90>
 8003456:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 800345a:	9905      	ldr	r1, [sp, #20]
 800345c:	eb12 0b01 	adds.w	fp, r2, r1
 8003460:	f143 0c00 	adc.w	ip, r3, #0
    *actual_size =  request_size;
 8003464:	9b08      	ldr	r3, [sp, #32]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8003466:	4974      	ldr	r1, [pc, #464]	; (8003638 <_fx_file_read+0x2c4>)
    *actual_size =  request_size;
 8003468:	461a      	mov	r2, r3
 800346a:	9b05      	ldr	r3, [sp, #20]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800346c:	6809      	ldr	r1, [r1, #0]
    FX_UNPROTECT
 800346e:	9809      	ldr	r0, [sp, #36]	; 0x24
    file_ptr -> fx_file_current_file_offset =
 8003470:	e9c5 bc10 	strd	fp, ip, [r5, #64]	; 0x40
    *actual_size =  request_size;
 8003474:	6013      	str	r3, [r2, #0]
    return(FX_SUCCESS);
 8003476:	2200      	movs	r2, #0
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8003478:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
    return(FX_SUCCESS);
 800347c:	9205      	str	r2, [sp, #20]
    FX_UNPROTECT
 800347e:	f005 f93d 	bl	80086fc <_tx_mutex_put>
    return(FX_SUCCESS);
 8003482:	9a05      	ldr	r2, [sp, #20]
 8003484:	e78c      	b.n	80033a0 <_fx_file_read+0x2c>
 8003486:	9b06      	ldr	r3, [sp, #24]
 8003488:	4645      	mov	r5, r8
 800348a:	464e      	mov	r6, r9
 800348c:	46b8      	mov	r8, r7
 800348e:	455b      	cmp	r3, fp
 8003490:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003492:	bf28      	it	cs
 8003494:	465b      	movcs	r3, fp
 8003496:	4619      	mov	r1, r3
 8003498:	9306      	str	r3, [sp, #24]
            if (sectors == 1)
 800349a:	2901      	cmp	r1, #1
 800349c:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 80034a0:	f000 80d6 	beq.w	8003650 <_fx_file_read+0x2dc>
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 80034a4:	f8d5 01d8 	ldr.w	r0, [r5, #472]	; 0x1d8
 80034a8:	f242 4ba4 	movw	fp, #9380	; 0x24a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80034ac:	f04f 0c04 	mov.w	ip, #4
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 80034b0:	f844 000b 	str.w	r0, [r4, fp]
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80034b4:	4620      	mov	r0, r4
 80034b6:	9101      	str	r1, [sp, #4]
 80034b8:	f8cd a000 	str.w	sl, [sp]
 80034bc:	f8cd c008 	str.w	ip, [sp, #8]
 80034c0:	f002 fa68 	bl	8005994 <_fx_utility_logical_sector_read>
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f844 300b 	str.w	r3, [r4, fp]
                if (status !=  FX_SUCCESS)
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d16d      	bne.n	80035aa <_fx_file_read+0x236>
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80034ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
                (sectors - 1);
 80034d0:	9906      	ldr	r1, [sp, #24]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80034d2:	3b01      	subs	r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 80034d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
                media_ptr -> fx_media_bytes_per_sector;
 80034d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                (sectors - 1);
 80034d8:	f101 3cff 	add.w	ip, r1, #4294967295
            file_ptr -> fx_file_current_physical_cluster = cluster;
 80034dc:	622e      	str	r6, [r5, #32]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80034de:	185e      	adds	r6, r3, r1
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80034e0:	fb01 f902 	mul.w	r9, r1, r2
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 80034e4:	6b69      	ldr	r1, [r5, #52]	; 0x34
            file_ptr -> fx_file_current_logical_offset =
 80034e6:	632a      	str	r2, [r5, #48]	; 0x30
            bytes_remaining =  bytes_remaining -
 80034e8:	eba7 0709 	sub.w	r7, r7, r9
            destination_ptr =  destination_ptr +
 80034ec:	44ca      	add	sl, r9
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80034ee:	fbb6 fef0 	udiv	lr, r6, r0
                file_ptr -> fx_file_current_logical_sector +
 80034f2:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 80034f6:	fb00 691e 	mls	r9, r0, lr, r6
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 80034fa:	eb01 060e 	add.w	r6, r1, lr
                file_ptr -> fx_file_current_logical_sector +
 80034fe:	eb12 000c 	adds.w	r0, r2, ip
            file_ptr -> fx_file_current_relative_sector =
 8003502:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
                file_ptr -> fx_file_current_logical_sector +
 8003506:	f143 0100 	adc.w	r1, r3, #0
 800350a:	4602      	mov	r2, r0
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800350c:	636e      	str	r6, [r5, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector +
 800350e:	460b      	mov	r3, r1
            file_ptr -> fx_file_current_logical_sector =
 8003510:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 8003514:	b967      	cbnz	r7, 8003530 <_fx_file_read+0x1bc>
 8003516:	9e05      	ldr	r6, [sp, #20]
 8003518:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 800351c:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	; 0x50
 8003520:	eb12 0b06 	adds.w	fp, r2, r6
 8003524:	f143 0c00 	adc.w	ip, r3, #0
 8003528:	458c      	cmp	ip, r1
 800352a:	bf08      	it	eq
 800352c:	4583      	cmpeq	fp, r0
 800352e:	d299      	bcs.n	8003464 <_fx_file_read+0xf0>
            file_ptr -> fx_file_current_relative_sector++;
 8003530:	6bab      	ldr	r3, [r5, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8003532:	6d62      	ldr	r2, [r4, #84]	; 0x54
            file_ptr -> fx_file_current_relative_sector++;
 8003534:	3301      	adds	r3, #1
            if (file_ptr -> fx_file_current_relative_sector >=
 8003536:	4293      	cmp	r3, r2
            file_ptr -> fx_file_current_relative_sector++;
 8003538:	63ab      	str	r3, [r5, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 800353a:	d23c      	bcs.n	80035b6 <_fx_file_read+0x242>
                file_ptr -> fx_file_current_logical_sector++;
 800353c:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8003540:	1c50      	adds	r0, r2, #1
 8003542:	f143 0100 	adc.w	r1, r3, #0
 8003546:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =  0;
 800354a:	2300      	movs	r3, #0
 800354c:	461a      	mov	r2, r3
 800354e:	632b      	str	r3, [r5, #48]	; 0x30
    while (bytes_remaining)
 8003550:	2f00      	cmp	r7, #0
 8003552:	f47f af57 	bne.w	8003404 <_fx_file_read+0x90>
 8003556:	e77e      	b.n	8003456 <_fx_file_read+0xe2>
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8003558:	fbb7 f3f3 	udiv	r3, r7, r3
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800355c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800355e:	6baa      	ldr	r2, [r5, #56]	; 0x38
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8003560:	f8d5 9020 	ldr.w	r9, [r5, #32]
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8003564:	eba1 0b02 	sub.w	fp, r1, r2
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8003568:	9306      	str	r3, [sp, #24]
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800356a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800356e:	455b      	cmp	r3, fp
 8003570:	d97f      	bls.n	8003672 <_fx_file_read+0x2fe>
 8003572:	970a      	str	r7, [sp, #40]	; 0x28
 8003574:	4647      	mov	r7, r8
 8003576:	46a8      	mov	r8, r5
 8003578:	461d      	mov	r5, r3
 800357a:	e00d      	b.n	8003598 <_fx_file_read+0x224>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800357c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800357e:	2e01      	cmp	r6, #1
 8003580:	d94a      	bls.n	8003618 <_fx_file_read+0x2a4>
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	428e      	cmp	r6, r1
 8003586:	d847      	bhi.n	8003618 <_fx_file_read+0x2a4>
                    if (next_cluster != cluster + 1)
 8003588:	4296      	cmp	r6, r2
 800358a:	f47f af7c 	bne.w	8003486 <_fx_file_read+0x112>
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800358e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003590:	46b1      	mov	r9, r6
 8003592:	4493      	add	fp, r2
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8003594:	455d      	cmp	r5, fp
 8003596:	d946      	bls.n	8003626 <_fx_file_read+0x2b2>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8003598:	aa0d      	add	r2, sp, #52	; 0x34
 800359a:	4649      	mov	r1, r9
 800359c:	4620      	mov	r0, r4
 800359e:	f001 faf5 	bl	8004b8c <_fx_utility_FAT_entry_read>
                    if (next_cluster != cluster + 1)
 80035a2:	f109 0201 	add.w	r2, r9, #1
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d0e8      	beq.n	800357c <_fx_file_read+0x208>
 80035aa:	9005      	str	r0, [sp, #20]
                        FX_UNPROTECT
 80035ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ae:	f005 f8a5 	bl	80086fc <_tx_mutex_put>
 80035b2:	9a05      	ldr	r2, [sp, #20]
 80035b4:	e6f4      	b.n	80033a0 <_fx_file_read+0x2c>
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 80035b6:	aa0d      	add	r2, sp, #52	; 0x34
 80035b8:	6a29      	ldr	r1, [r5, #32]
 80035ba:	4620      	mov	r0, r4
 80035bc:	f001 fae6 	bl	8004b8c <_fx_utility_FAT_entry_read>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d1f2      	bne.n	80035aa <_fx_file_read+0x236>
 80035c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035c6:	2901      	cmp	r1, #1
 80035c8:	d956      	bls.n	8003678 <_fx_file_read+0x304>
 80035ca:	f8d8 3000 	ldr.w	r3, [r8]
 80035ce:	4299      	cmp	r1, r3
 80035d0:	d852      	bhi.n	8003678 <_fx_file_read+0x304>
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80035d2:	f1b1 0b02 	subs.w	fp, r1, #2
 80035d6:	f04f 0300 	mov.w	r3, #0
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80035da:	6d66      	ldr	r6, [r4, #84]	; 0x54
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80035dc:	f143 3cff 	adc.w	ip, r3, #4294967295
 80035e0:	465a      	mov	r2, fp
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 80035e2:	6229      	str	r1, [r5, #32]
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80035e4:	4663      	mov	r3, ip
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80035e6:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
                file_ptr -> fx_file_current_relative_sector =  0;
 80035ea:	63a8      	str	r0, [r5, #56]	; 0x38
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80035ec:	fbab 0106 	umull	r0, r1, fp, r6
 80035f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80035f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                file_ptr -> fx_file_current_relative_cluster++;
 80035f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80035f8:	fb06 1303 	mla	r3, r6, r3, r1
                file_ptr -> fx_file_current_relative_cluster++;
 80035fc:	3201      	adds	r2, #1
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80035fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003602:	9307      	str	r3, [sp, #28]
                file_ptr -> fx_file_current_relative_cluster++;
 8003604:	636a      	str	r2, [r5, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800360a:	eb10 000c 	adds.w	r0, r0, ip
 800360e:	f141 0100 	adc.w	r1, r1, #0
 8003612:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
 8003616:	e798      	b.n	800354a <_fx_file_read+0x1d6>
                            return(FX_FILE_CORRUPT);
 8003618:	2208      	movs	r2, #8
                        FX_UNPROTECT
 800361a:	9809      	ldr	r0, [sp, #36]	; 0x24
                            return(FX_FILE_CORRUPT);
 800361c:	9205      	str	r2, [sp, #20]
                        FX_UNPROTECT
 800361e:	f005 f86d 	bl	80086fc <_tx_mutex_put>
 8003622:	9a05      	ldr	r2, [sp, #20]
 8003624:	e6bc      	b.n	80033a0 <_fx_file_read+0x2c>
 8003626:	4645      	mov	r5, r8
 8003628:	9906      	ldr	r1, [sp, #24]
 800362a:	46b8      	mov	r8, r7
 800362c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800362e:	e734      	b.n	800349a <_fx_file_read+0x126>
 8003630:	46494c45 	.word	0x46494c45
 8003634:	4d454449 	.word	0x4d454449
 8003638:	20002bc4 	.word	0x20002bc4
        return(FX_END_OF_FILE);
 800363c:	2209      	movs	r2, #9
        FX_UNPROTECT
 800363e:	9809      	ldr	r0, [sp, #36]	; 0x24
        return(FX_END_OF_FILE);
 8003640:	9205      	str	r2, [sp, #20]
        FX_UNPROTECT
 8003642:	f005 f85b 	bl	80086fc <_tx_mutex_put>
        *actual_size =  0;
 8003646:	9b08      	ldr	r3, [sp, #32]
        return(FX_END_OF_FILE);
 8003648:	9a05      	ldr	r2, [sp, #20]
        *actual_size =  0;
 800364a:	f8c3 8000 	str.w	r8, [r3]
        return(FX_END_OF_FILE);
 800364e:	e6a7      	b.n	80033a0 <_fx_file_read+0x2c>
 8003650:	4608      	mov	r0, r1
                status =  _fx_utility_logical_sector_read(media_ptr,
 8003652:	2104      	movs	r1, #4
 8003654:	9001      	str	r0, [sp, #4]
 8003656:	4620      	mov	r0, r4
 8003658:	9102      	str	r1, [sp, #8]
 800365a:	68a1      	ldr	r1, [r4, #8]
 800365c:	9100      	str	r1, [sp, #0]
 800365e:	f002 f999 	bl	8005994 <_fx_utility_logical_sector_read>
                if (status !=  FX_SUCCESS)
 8003662:	2800      	cmp	r0, #0
 8003664:	d1a1      	bne.n	80035aa <_fx_file_read+0x236>
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector);
 8003666:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003668:	4651      	mov	r1, sl
 800366a:	68a0      	ldr	r0, [r4, #8]
 800366c:	f7ff f998 	bl	80029a0 <_fx_utility_memory_copy>
 8003670:	e72d      	b.n	80034ce <_fx_file_read+0x15a>
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8003672:	464e      	mov	r6, r9
 8003674:	4619      	mov	r1, r3
 8003676:	e710      	b.n	800349a <_fx_file_read+0x126>
                            return(FX_FILE_CORRUPT);
 8003678:	2208      	movs	r2, #8
                        FX_UNPROTECT
 800367a:	9809      	ldr	r0, [sp, #36]	; 0x24
                            return(FX_FILE_CORRUPT);
 800367c:	9205      	str	r2, [sp, #20]
                        FX_UNPROTECT
 800367e:	f005 f83d 	bl	80086fc <_tx_mutex_put>
 8003682:	9a05      	ldr	r2, [sp, #20]
 8003684:	e68c      	b.n	80033a0 <_fx_file_read+0x2c>
 8003686:	bf00      	nop

08003688 <_fx_file_seek>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 8003688:	460a      	mov	r2, r1
 800368a:	2300      	movs	r3, #0
 800368c:	f004 b842 	b.w	8007714 <_fx_file_extended_seek>

08003690 <_fx_file_write>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8003694:	4b68      	ldr	r3, [pc, #416]	; (8003838 <_fx_file_write+0x1a8>)
{
 8003696:	460f      	mov	r7, r1
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8003698:	6801      	ldr	r1, [r0, #0]
{
 800369a:	b08f      	sub	sp, #60	; 0x3c
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800369c:	4299      	cmp	r1, r3
 800369e:	d123      	bne.n	80036e8 <_fx_file_write+0x58>
        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 80036a0:	6d85      	ldr	r5, [r0, #88]	; 0x58

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 80036a2:	4692      	mov	sl, r2
 80036a4:	f04f 0b00 	mov.w	fp, #0
 80036a8:	4604      	mov	r4, r0
 80036aa:	f04f 0900 	mov.w	r9, #0
    media_ptr -> fx_media_file_writes++;
 80036ae:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 80036b2:	f04f 38ff 	mov.w	r8, #4294967295
    media_ptr -> fx_media_file_writes++;
 80036b6:	3301      	adds	r3, #1
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 80036b8:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
 80036bc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80036c0:	eb12 0a00 	adds.w	sl, r2, r0
    media_ptr -> fx_media_file_writes++;
 80036c4:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 80036c8:	eb4b 0b01 	adc.w	fp, fp, r1
 80036cc:	45d9      	cmp	r9, fp
 80036ce:	bf08      	it	eq
 80036d0:	45d0      	cmpeq	r8, sl
 80036d2:	d30f      	bcc.n	80036f4 <_fx_file_write+0x64>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <_fx_file_write+0x1ac>)
 80036d6:	6829      	ldr	r1, [r5, #0]
 80036d8:	4299      	cmp	r1, r3
 80036da:	d011      	beq.n	8003700 <_fx_file_write+0x70>
 80036dc:	f04f 0b11 	mov.w	fp, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
}
 80036e0:	4658      	mov	r0, fp
 80036e2:	b00f      	add	sp, #60	; 0x3c
 80036e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 80036e8:	f04f 0b07 	mov.w	fp, #7
}
 80036ec:	4658      	mov	r0, fp
 80036ee:	b00f      	add	sp, #60	; 0x3c
 80036f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NO_MORE_SPACE);
 80036f4:	f04f 0b0a 	mov.w	fp, #10
}
 80036f8:	4658      	mov	r0, fp
 80036fa:	b00f      	add	sp, #60	; 0x3c
 80036fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8003700:	f505 73e4 	add.w	r3, r5, #456	; 0x1c8
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	9206      	str	r2, [sp, #24]
 800370a:	4618      	mov	r0, r3
 800370c:	9308      	str	r3, [sp, #32]
 800370e:	f004 ff0b 	bl	8008528 <_tx_mutex_get>
 8003712:	2800      	cmp	r0, #0
 8003714:	d1e2      	bne.n	80036dc <_fx_file_write+0x4c>
    if (media_ptr -> fx_media_driver_write_protect)
 8003716:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800371a:	9a06      	ldr	r2, [sp, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f040 8221 	bne.w	8003b64 <_fx_file_write+0x4d4>
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 8003722:	68a1      	ldr	r1, [r4, #8]
 8003724:	2901      	cmp	r1, #1
 8003726:	f040 8081 	bne.w	800382c <_fx_file_write+0x19c>
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800372a:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
 800372e:	6d6e      	ldr	r6, [r5, #84]	; 0x54
 8003730:	fb06 f60e 	mul.w	r6, r6, lr
    if (bytes_per_cluster == 0)
 8003734:	2e00      	cmp	r6, #0
 8003736:	d073      	beq.n	8003820 <_fx_file_write+0x190>
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 8003738:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 800373c:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
 8003740:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003744:	ebb0 0008 	subs.w	r0, r0, r8
 8003748:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800374c:	eb61 0109 	sbc.w	r1, r1, r9
 8003750:	4559      	cmp	r1, fp
 8003752:	bf08      	it	eq
 8003754:	4550      	cmpeq	r0, sl
 8003756:	f080 80c5 	bcs.w	80038e4 <_fx_file_write+0x254>
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800375a:	1e50      	subs	r0, r2, #1
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800375c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8003760:	4430      	add	r0, r6
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8003762:	ebb8 0101 	subs.w	r1, r8, r1
 8003766:	eb69 0202 	sbc.w	r2, r9, r2
 800376a:	eb11 0800 	adds.w	r8, r1, r0
 800376e:	4693      	mov	fp, r2
 8003770:	4640      	mov	r0, r8
 8003772:	4632      	mov	r2, r6
 8003774:	f14b 0900 	adc.w	r9, fp, #0
 8003778:	4649      	mov	r1, r9
 800377a:	f7fc fe75 	bl	8000468 <__aeabi_uldivmod>
 800377e:	4682      	mov	sl, r0
        if (clusters > media_ptr -> fx_media_available_clusters)
 8003780:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8003782:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
        if (clusters > media_ptr -> fx_media_available_clusters)
 8003786:	4550      	cmp	r0, sl
 8003788:	f0c0 8218 	bcc.w	8003bbc <_fx_file_write+0x52c>
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800378c:	4652      	mov	r2, sl
 800378e:	2300      	movs	r3, #0
 8003790:	fbaa 8906 	umull	r8, r9, sl, r6
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8003794:	6921      	ldr	r1, [r4, #16]
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 8003796:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800379a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800379c:	4451      	add	r1, sl
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800379e:	fb06 9903 	mla	r9, r6, r3, r9
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 80037a2:	6121      	str	r1, [r4, #16]
 80037a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037a8:	eb12 0208 	adds.w	r2, r2, r8
 80037ac:	f04f 38ff 	mov.w	r8, #4294967295
 80037b0:	eb43 0309 	adc.w	r3, r3, r9
 80037b4:	f04f 0900 	mov.w	r9, #0
 80037b8:	4599      	cmp	r9, r3
 80037ba:	bf08      	it	eq
 80037bc:	4590      	cmpeq	r8, r2
 80037be:	d201      	bcs.n	80037c4 <_fx_file_write+0x134>
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 80037c4:	eba0 000a 	sub.w	r0, r0, sl
        total_clusters =     media_ptr -> fx_media_total_clusters;
 80037c8:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 80037cc:	f8d4 901c 	ldr.w	r9, [r4, #28]
        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 80037d0:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 80037d4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 80037d8:	67e8      	str	r0, [r5, #124]	; 0x7c
        while (clusters)
 80037da:	f1ba 0f00 	cmp.w	sl, #0
 80037de:	d06f      	beq.n	80038c0 <_fx_file_write+0x230>
 80037e0:	4623      	mov	r3, r4
    first_new_cluster =  0;
 80037e2:	f04f 0a00 	mov.w	sl, #0
 80037e6:	4644      	mov	r4, r8
 80037e8:	4698      	mov	r8, r3
                    if (!total_clusters)
 80037ea:	b964      	cbnz	r4, 8003806 <_fx_file_write+0x176>
 80037ec:	e1e6      	b.n	8003bbc <_fx_file_write+0x52c>
 80037ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80037f0:	1c71      	adds	r1, r6, #1
                    if (FAT_value == FX_FREE_CLUSTER)
 80037f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037f4:	3302      	adds	r3, #2
 80037f6:	b31a      	cbz	r2, 8003840 <_fx_file_write+0x1b0>
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80037f8:	428b      	cmp	r3, r1
 80037fa:	bf8c      	ite	hi
 80037fc:	460e      	movhi	r6, r1
 80037fe:	2602      	movls	r6, #2
                    if (!total_clusters)
 8003800:	2c00      	cmp	r4, #0
 8003802:	f000 81db 	beq.w	8003bbc <_fx_file_write+0x52c>
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8003806:	aa0d      	add	r2, sp, #52	; 0x34
 8003808:	4631      	mov	r1, r6
 800380a:	4628      	mov	r0, r5
                    total_clusters--;
 800380c:	3c01      	subs	r4, #1
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800380e:	f001 f9bd 	bl	8004b8c <_fx_utility_FAT_entry_read>
                    if (status != FX_SUCCESS)
 8003812:	2800      	cmp	r0, #0
 8003814:	d0eb      	beq.n	80037ee <_fx_file_write+0x15e>
 8003816:	4683      	mov	fp, r0
                        FX_UNPROTECT
 8003818:	9808      	ldr	r0, [sp, #32]
 800381a:	f004 ff6f 	bl	80086fc <_tx_mutex_put>
 800381e:	e75f      	b.n	80036e0 <_fx_file_write+0x50>
        FX_UNPROTECT
 8003820:	9808      	ldr	r0, [sp, #32]
        return(FX_MEDIA_INVALID);
 8003822:	f04f 0b02 	mov.w	fp, #2
        FX_UNPROTECT
 8003826:	f004 ff69 	bl	80086fc <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 800382a:	e759      	b.n	80036e0 <_fx_file_write+0x50>
        FX_UNPROTECT
 800382c:	9808      	ldr	r0, [sp, #32]
        return(FX_ACCESS_ERROR);
 800382e:	f04f 0b06 	mov.w	fp, #6
        FX_UNPROTECT
 8003832:	f004 ff63 	bl	80086fc <_tx_mutex_put>
        return(FX_ACCESS_ERROR);
 8003836:	e753      	b.n	80036e0 <_fx_file_write+0x50>
 8003838:	46494c45 	.word	0x46494c45
 800383c:	4d454449 	.word	0x4d454449
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8003840:	428b      	cmp	r3, r1
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8003842:	bf98      	it	ls
 8003844:	2102      	movls	r1, #2
 8003846:	f1ba 0f00 	cmp.w	sl, #0
 800384a:	bf08      	it	eq
 800384c:	46b2      	moveq	sl, r6
 800384e:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
            if (last_cluster)
 8003852:	f1b9 0f00 	cmp.w	r9, #0
 8003856:	f000 81c2 	beq.w	8003bde <_fx_file_write+0x54e>
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800385a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800385e:	454b      	cmp	r3, r9
 8003860:	d006      	beq.n	8003870 <_fx_file_write+0x1e0>
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8003862:	4649      	mov	r1, r9
 8003864:	4632      	mov	r2, r6
 8003866:	4628      	mov	r0, r5
 8003868:	f001 faf0 	bl	8004e4c <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 800386c:	2800      	cmp	r0, #0
 800386e:	d1d2      	bne.n	8003816 <_fx_file_write+0x186>
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8003870:	6d68      	ldr	r0, [r5, #84]	; 0x54
                if ((file_ptr -> fx_file_current_relative_sector >=
 8003872:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8003876:	1e43      	subs	r3, r0, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 8003878:	429a      	cmp	r2, r3
 800387a:	d317      	bcc.n	80038ac <_fx_file_write+0x21c>
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800387c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8003880:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003882:	429a      	cmp	r2, r3
 8003884:	d312      	bcc.n	80038ac <_fx_file_write+0x21c>
                    file_ptr -> fx_file_current_relative_cluster++;
 8003886:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800388a:	f04f 0e00 	mov.w	lr, #0
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800388e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8003890:	f1a6 0c02 	sub.w	ip, r6, #2
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003894:	2300      	movs	r3, #0
                    file_ptr -> fx_file_current_relative_cluster++;
 8003896:	3101      	adds	r1, #1
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8003898:	f8c8 6020 	str.w	r6, [r8, #32]
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800389c:	fbe0 230c 	umlal	r2, r3, r0, ip
                    file_ptr -> fx_file_current_relative_sector =   0;
 80038a0:	f8c8 e038 	str.w	lr, [r8, #56]	; 0x38
                    file_ptr -> fx_file_current_relative_cluster++;
 80038a4:	e9c8 e10c 	strd	lr, r1, [r8, #48]	; 0x30
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80038a8:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
        while (clusters)
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	46b1      	mov	r9, r6
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80038b0:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
        while (clusters)
 80038b4:	3b01      	subs	r3, #1
 80038b6:	9309      	str	r3, [sp, #36]	; 0x24
 80038b8:	d197      	bne.n	80037ea <_fx_file_write+0x15a>
 80038ba:	4644      	mov	r4, r8
 80038bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80038c0:	f242 43ac 	movw	r3, #9388	; 0x24ac
 80038c4:	4649      	mov	r1, r9
 80038c6:	4628      	mov	r0, r5
 80038c8:	58ea      	ldr	r2, [r5, r3]
 80038ca:	f001 fabf 	bl	8004e4c <_fx_utility_FAT_entry_write>
            if (status !=  FX_SUCCESS)
 80038ce:	4683      	mov	fp, r0
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d1a1      	bne.n	8003818 <_fx_file_write+0x188>
        if (file_ptr -> fx_file_last_physical_cluster)
 80038d4:	69e1      	ldr	r1, [r4, #28]
 80038d6:	2900      	cmp	r1, #0
 80038d8:	f040 81a5 	bne.w	8003c26 <_fx_file_write+0x596>
 80038dc:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 80038e0:	f8c4 901c 	str.w	r9, [r4, #28]
    if (file_ptr -> fx_file_current_logical_offset >=
 80038e4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80038e6:	4576      	cmp	r6, lr
 80038e8:	d30c      	bcc.n	8003904 <_fx_file_write+0x274>
        file_ptr -> fx_file_current_relative_sector++;
 80038ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 80038ec:	2600      	movs	r6, #0
        file_ptr -> fx_file_current_logical_sector++;
 80038ee:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 80038f2:	3101      	adds	r1, #1
        file_ptr -> fx_file_current_logical_offset =  0;
 80038f4:	6326      	str	r6, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector++;
 80038f6:	f112 0801 	adds.w	r8, r2, #1
        file_ptr -> fx_file_current_relative_sector++;
 80038fa:	63a1      	str	r1, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_sector++;
 80038fc:	f143 0900 	adc.w	r9, r3, #0
 8003900:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
    while (bytes_remaining)
 8003904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	d050      	beq.n	80039ae <_fx_file_write+0x31e>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800390c:	f242 4aa8 	movw	sl, #9384	; 0x24a8
 8003910:	9706      	str	r7, [sp, #24]
    while (bytes_remaining)
 8003912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8003916:	44aa      	add	sl, r5
 8003918:	469b      	mov	fp, r3
 800391a:	4657      	mov	r7, sl
 800391c:	4692      	mov	sl, r2
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800391e:	b936      	cbnz	r6, 800392e <_fx_file_write+0x29e>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8003920:	2300      	movs	r3, #0
 8003922:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8003924:	459b      	cmp	fp, r3
 8003926:	bf08      	it	eq
 8003928:	4592      	cmpeq	sl, r2
 800392a:	f080 80f5 	bcs.w	8003b18 <_fx_file_write+0x488>
                status =  _fx_utility_logical_sector_read(media_ptr,
 800392e:	f04f 0904 	mov.w	r9, #4
 8003932:	f04f 0801 	mov.w	r8, #1
 8003936:	4628      	mov	r0, r5
 8003938:	f8cd 9008 	str.w	r9, [sp, #8]
 800393c:	f8cd 8004 	str.w	r8, [sp, #4]
 8003940:	68a9      	ldr	r1, [r5, #8]
 8003942:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003946:	9100      	str	r1, [sp, #0]
 8003948:	f002 f824 	bl	8005994 <_fx_utility_logical_sector_read>
            if (status !=  FX_SUCCESS)
 800394c:	2800      	cmp	r0, #0
 800394e:	f47f af62 	bne.w	8003816 <_fx_file_write+0x186>
                file_ptr -> fx_file_current_logical_offset;
 8003952:	6b23      	ldr	r3, [r4, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8003954:	6aae      	ldr	r6, [r5, #40]	; 0x28
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8003956:	68a9      	ldr	r1, [r5, #8]
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8003958:	1af6      	subs	r6, r6, r3
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 800395a:	9806      	ldr	r0, [sp, #24]
 800395c:	4419      	add	r1, r3
            if (copy_bytes > bytes_remaining)
 800395e:	2300      	movs	r3, #0
                copy_bytes =  (ULONG)bytes_remaining;
 8003960:	459b      	cmp	fp, r3
 8003962:	bf08      	it	eq
 8003964:	45b2      	cmpeq	sl, r6
 8003966:	bf38      	it	cc
 8003968:	4656      	movcc	r6, sl
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 800396a:	4632      	mov	r2, r6
 800396c:	f7ff f818 	bl	80029a0 <_fx_utility_memory_copy>
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8003970:	f8cd 9008 	str.w	r9, [sp, #8]
 8003974:	f8cd 8004 	str.w	r8, [sp, #4]
 8003978:	4628      	mov	r0, r5
 800397a:	68a9      	ldr	r1, [r5, #8]
 800397c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003980:	9100      	str	r1, [sp, #0]
 8003982:	f002 f9b5 	bl	8005cf0 <_fx_utility_logical_sector_write>
            if (status !=  FX_SUCCESS)
 8003986:	2800      	cmp	r0, #0
 8003988:	f47f af45 	bne.w	8003816 <_fx_file_write+0x186>
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800398c:	6b22      	ldr	r2, [r4, #48]	; 0x30
            bytes_remaining =  bytes_remaining - copy_bytes;
 800398e:	ebba 0a06 	subs.w	sl, sl, r6
            source_ptr =  source_ptr + copy_bytes;
 8003992:	9906      	ldr	r1, [sp, #24]
        if (file_ptr -> fx_file_current_logical_offset >=
 8003994:	6aab      	ldr	r3, [r5, #40]	; 0x28
            bytes_remaining =  bytes_remaining - copy_bytes;
 8003996:	f16b 0b00 	sbc.w	fp, fp, #0
            source_ptr =  source_ptr + copy_bytes;
 800399a:	4431      	add	r1, r6
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800399c:	4416      	add	r6, r2
        if (file_ptr -> fx_file_current_logical_offset >=
 800399e:	429e      	cmp	r6, r3
            source_ptr =  source_ptr + copy_bytes;
 80039a0:	9106      	str	r1, [sp, #24]
            file_ptr -> fx_file_current_logical_offset =
 80039a2:	6326      	str	r6, [r4, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 80039a4:	f080 8094 	bcs.w	8003ad0 <_fx_file_write+0x440>
    while (bytes_remaining)
 80039a8:	ea5a 030b 	orrs.w	r3, sl, fp
 80039ac:	d1b7      	bne.n	800391e <_fx_file_write+0x28e>
 80039ae:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
        file_ptr -> fx_file_current_file_offset + size;
 80039b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        file_ptr -> fx_file_current_file_size;
 80039b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
        file_ptr -> fx_file_current_file_offset + size;
 80039ba:	eb12 0208 	adds.w	r2, r2, r8
 80039be:	eb43 0309 	adc.w	r3, r3, r9
    if (file_ptr -> fx_file_current_file_offset >
 80039c2:	4299      	cmp	r1, r3
 80039c4:	bf08      	it	eq
 80039c6:	4290      	cmpeq	r0, r2
    file_ptr -> fx_file_current_file_offset =
 80039c8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80039cc:	e9c4 0128 	strd	r0, r1, [r4, #160]	; 0xa0
    if (file_ptr -> fx_file_current_file_offset >
 80039d0:	f080 811c 	bcs.w	8003c0c <_fx_file_write+0x57c>
        open_count =  media_ptr -> fx_media_opened_file_count;
 80039d4:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 80039d8:	f8d5 60c8 	ldr.w	r6, [r5, #200]	; 0xc8
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 80039dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        while (open_count)
 80039e0:	b927      	cbnz	r7, 80039ec <_fx_file_write+0x35c>
 80039e2:	e113      	b.n	8003c0c <_fx_file_write+0x57c>
 80039e4:	3f01      	subs	r7, #1
            search_ptr =  search_ptr -> fx_file_opened_next;
 80039e6:	6df6      	ldr	r6, [r6, #92]	; 0x5c
        while (open_count)
 80039e8:	f000 8110 	beq.w	8003c0c <_fx_file_write+0x57c>
            if ((search_ptr != file_ptr) &&
 80039ec:	42b4      	cmp	r4, r6
 80039ee:	d0f9      	beq.n	80039e4 <_fx_file_write+0x354>
 80039f0:	e9d6 012a 	ldrd	r0, r1, [r6, #168]	; 0xa8
 80039f4:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 80039f8:	4299      	cmp	r1, r3
 80039fa:	bf08      	it	eq
 80039fc:	4290      	cmpeq	r0, r2
 80039fe:	d1f1      	bne.n	80039e4 <_fx_file_write+0x354>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8003a00:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8003a04:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <_fx_file_write+0x354>
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8003a0c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8003a10:	69e0      	ldr	r0, [r4, #28]
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8003a12:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8003a16:	f8c6 109c 	str.w	r1, [r6, #156]	; 0x9c
                if (search_ptr -> fx_file_total_clusters == 0)
 8003a1a:	6931      	ldr	r1, [r6, #16]
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8003a1c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8003a20:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8003a24:	61f0      	str	r0, [r6, #28]
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8003a26:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 8003a2a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8003a2e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
                if (search_ptr -> fx_file_total_clusters == 0)
 8003a32:	2900      	cmp	r1, #0
 8003a34:	d1d6      	bne.n	80039e4 <_fx_file_write+0x354>
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8003a36:	f8d4 c014 	ldr.w	ip, [r4, #20]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003a3a:	f04f 0900 	mov.w	r9, #0
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 8003a3e:	6923      	ldr	r3, [r4, #16]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003a40:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8003a42:	f1ac 0a02 	sub.w	sl, ip, #2
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003a46:	6d68      	ldr	r0, [r5, #84]	; 0x54
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 8003a48:	6133      	str	r3, [r6, #16]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003a4a:	464b      	mov	r3, r9
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8003a4c:	f8c6 c020 	str.w	ip, [r6, #32]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003a50:	fbe0 230a 	umlal	r2, r3, r0, sl
                    search_ptr -> fx_file_current_relative_cluster =  0;
 8003a54:	6371      	str	r1, [r6, #52]	; 0x34
                    search_ptr -> fx_file_current_relative_sector =   0;
 8003a56:	63b1      	str	r1, [r6, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 8003a58:	6331      	str	r1, [r6, #48]	; 0x30
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003a5a:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
                    search_ptr -> fx_file_current_file_offset =       0;
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2300      	movs	r3, #0
 8003a62:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
 8003a66:	e7bd      	b.n	80039e4 <_fx_file_write+0x354>
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8003a68:	4649      	mov	r1, r9
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8003a6a:	9a06      	ldr	r2, [sp, #24]
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f8cd 8004 	str.w	r8, [sp, #4]
 8003a72:	4628      	mov	r0, r5
 8003a74:	9200      	str	r2, [sp, #0]
 8003a76:	9302      	str	r3, [sp, #8]
 8003a78:	9109      	str	r1, [sp, #36]	; 0x24
 8003a7a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003a7e:	f002 f937 	bl	8005cf0 <_fx_utility_logical_sector_write>
            if (status !=  FX_SUCCESS)
 8003a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a84:	2800      	cmp	r0, #0
 8003a86:	f47f aec6 	bne.w	8003816 <_fx_file_write+0x186>
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8003a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                (sectors - 1);
 8003a8c:	f108 36ff 	add.w	r6, r8, #4294967295
                media_ptr -> fx_media_bytes_per_sector;
 8003a90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8003a92:	3b01      	subs	r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8003a94:	6d68      	ldr	r0, [r5, #84]	; 0x54
            file_ptr -> fx_file_current_logical_offset =
 8003a96:	6322      	str	r2, [r4, #48]	; 0x30
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8003a98:	eb03 0c08 	add.w	ip, r3, r8
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8003a9c:	fb08 f802 	mul.w	r8, r8, r2
            source_ptr =  source_ptr +
 8003aa0:	9b06      	ldr	r3, [sp, #24]
            bytes_remaining =  bytes_remaining -
 8003aa2:	ebba 0a08 	subs.w	sl, sl, r8
            file_ptr -> fx_file_current_physical_cluster = cluster;
 8003aa6:	6221      	str	r1, [r4, #32]
            source_ptr =  source_ptr +
 8003aa8:	4443      	add	r3, r8
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8003aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
            bytes_remaining =  bytes_remaining -
 8003aac:	f16b 0b00 	sbc.w	fp, fp, #0
            source_ptr =  source_ptr +
 8003ab0:	9306      	str	r3, [sp, #24]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8003ab2:	fbbc fef0 	udiv	lr, ip, r0
                file_ptr -> fx_file_current_logical_sector +
 8003ab6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 8003aba:	fb00 c01e 	mls	r0, r0, lr, ip
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8003abe:	4471      	add	r1, lr
                file_ptr -> fx_file_current_logical_sector +
 8003ac0:	eb12 0806 	adds.w	r8, r2, r6
            file_ptr -> fx_file_current_relative_sector =
 8003ac4:	63a0      	str	r0, [r4, #56]	; 0x38
                file_ptr -> fx_file_current_logical_sector +
 8003ac6:	f143 0900 	adc.w	r9, r3, #0
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8003aca:	6361      	str	r1, [r4, #52]	; 0x34
            file_ptr -> fx_file_current_logical_sector =
 8003acc:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
            if ((bytes_remaining == 0) &&
 8003ad0:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ad4:	d110      	bne.n	8003af8 <_fx_file_write+0x468>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 8003ad6:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8003ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	eb10 0008 	adds.w	r0, r0, r8
            if ((bytes_remaining == 0) &&
 8003ae6:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
                ((file_ptr -> fx_file_current_file_offset + size) >=
 8003aea:	eb41 0109 	adc.w	r1, r1, r9
            if ((bytes_remaining == 0) &&
 8003aee:	4299      	cmp	r1, r3
 8003af0:	bf08      	it	eq
 8003af2:	4290      	cmpeq	r0, r2
 8003af4:	f4bf af5d 	bcs.w	80039b2 <_fx_file_write+0x322>
            file_ptr -> fx_file_current_relative_sector++;
 8003af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8003afa:	6d6a      	ldr	r2, [r5, #84]	; 0x54
            file_ptr -> fx_file_current_relative_sector++;
 8003afc:	3301      	adds	r3, #1
            if (file_ptr -> fx_file_current_relative_sector >=
 8003afe:	4293      	cmp	r3, r2
            file_ptr -> fx_file_current_relative_sector++;
 8003b00:	63a3      	str	r3, [r4, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8003b02:	d235      	bcs.n	8003b70 <_fx_file_write+0x4e0>
                file_ptr -> fx_file_current_logical_sector++;
 8003b04:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003b08:	1c50      	adds	r0, r2, #1
 8003b0a:	f143 0100 	adc.w	r1, r3, #0
 8003b0e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =  0;
 8003b12:	2600      	movs	r6, #0
 8003b14:	6326      	str	r6, [r4, #48]	; 0x30
 8003b16:	e747      	b.n	80039a8 <_fx_file_write+0x318>
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8003b18:	4650      	mov	r0, sl
 8003b1a:	4659      	mov	r1, fp
 8003b1c:	f7fc fca4 	bl	8000468 <__aeabi_uldivmod>
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8003b20:	6d6e      	ldr	r6, [r5, #84]	; 0x54
 8003b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8003b24:	4680      	mov	r8, r0
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8003b26:	f8d4 9020 	ldr.w	r9, [r4, #32]
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8003b2a:	1af6      	subs	r6, r6, r3
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8003b2c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8003b30:	42b0      	cmp	r0, r6
 8003b32:	d80d      	bhi.n	8003b50 <_fx_file_write+0x4c0>
 8003b34:	e798      	b.n	8003a68 <_fx_file_write+0x3d8>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8003b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b38:	2901      	cmp	r1, #1
 8003b3a:	d945      	bls.n	8003bc8 <_fx_file_write+0x538>
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4291      	cmp	r1, r2
 8003b40:	d842      	bhi.n	8003bc8 <_fx_file_write+0x538>
                    if (next_cluster != cluster + 1)
 8003b42:	4299      	cmp	r1, r3
 8003b44:	d146      	bne.n	8003bd4 <_fx_file_write+0x544>
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8003b46:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003b48:	4689      	mov	r9, r1
 8003b4a:	441e      	add	r6, r3
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8003b4c:	45b0      	cmp	r8, r6
 8003b4e:	d98c      	bls.n	8003a6a <_fx_file_write+0x3da>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8003b50:	aa0c      	add	r2, sp, #48	; 0x30
 8003b52:	4649      	mov	r1, r9
 8003b54:	4628      	mov	r0, r5
 8003b56:	f001 f819 	bl	8004b8c <_fx_utility_FAT_entry_read>
                    if (next_cluster != cluster + 1)
 8003b5a:	f109 0301 	add.w	r3, r9, #1
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d0e9      	beq.n	8003b36 <_fx_file_write+0x4a6>
 8003b62:	e658      	b.n	8003816 <_fx_file_write+0x186>
        FX_UNPROTECT
 8003b64:	9808      	ldr	r0, [sp, #32]
        return(FX_WRITE_PROTECT);
 8003b66:	f04f 0b23 	mov.w	fp, #35	; 0x23
        FX_UNPROTECT
 8003b6a:	f004 fdc7 	bl	80086fc <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 8003b6e:	e5b7      	b.n	80036e0 <_fx_file_write+0x50>
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8003b70:	aa0c      	add	r2, sp, #48	; 0x30
 8003b72:	6a21      	ldr	r1, [r4, #32]
 8003b74:	4628      	mov	r0, r5
 8003b76:	f001 f809 	bl	8004b8c <_fx_utility_FAT_entry_read>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f47f ae4b 	bne.w	8003816 <_fx_file_write+0x186>
 8003b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d920      	bls.n	8003bc8 <_fx_file_write+0x538>
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d81d      	bhi.n	8003bc8 <_fx_file_write+0x538>
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8003b8c:	6d69      	ldr	r1, [r5, #84]	; 0x54
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8003b8e:	1e9a      	subs	r2, r3, #2
 8003b90:	f04f 0900 	mov.w	r9, #0
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003b94:	6d2e      	ldr	r6, [r5, #80]	; 0x50
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 8003b96:	6223      	str	r3, [r4, #32]
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8003b98:	f149 33ff 	adc.w	r3, r9, #4294967295
 8003b9c:	fba2 8901 	umull	r8, r9, r2, r1
                file_ptr -> fx_file_current_relative_sector =  0;
 8003ba0:	63a0      	str	r0, [r4, #56]	; 0x38
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8003ba2:	fb01 9903 	mla	r9, r1, r3, r9
                file_ptr -> fx_file_current_relative_cluster++;
 8003ba6:	6b60      	ldr	r0, [r4, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003ba8:	eb18 0206 	adds.w	r2, r8, r6
                file_ptr -> fx_file_current_relative_cluster++;
 8003bac:	f100 0101 	add.w	r1, r0, #1
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003bb0:	f149 0300 	adc.w	r3, r9, #0
                file_ptr -> fx_file_current_relative_cluster++;
 8003bb4:	6361      	str	r1, [r4, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003bb6:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8003bba:	e7aa      	b.n	8003b12 <_fx_file_write+0x482>
                        FX_UNPROTECT
 8003bbc:	9808      	ldr	r0, [sp, #32]
                        return(FX_NO_MORE_SPACE);
 8003bbe:	f04f 0b0a 	mov.w	fp, #10
                        FX_UNPROTECT
 8003bc2:	f004 fd9b 	bl	80086fc <_tx_mutex_put>
                        return(FX_NO_MORE_SPACE);
 8003bc6:	e58b      	b.n	80036e0 <_fx_file_write+0x50>
                        FX_UNPROTECT
 8003bc8:	9808      	ldr	r0, [sp, #32]
                            return(FX_FILE_CORRUPT);
 8003bca:	f04f 0b08 	mov.w	fp, #8
                        FX_UNPROTECT
 8003bce:	f004 fd95 	bl	80086fc <_tx_mutex_put>
 8003bd2:	e585      	b.n	80036e0 <_fx_file_write+0x50>
 8003bd4:	45b0      	cmp	r8, r6
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	bf28      	it	cs
 8003bda:	46b0      	movcs	r8, r6
 8003bdc:	e745      	b.n	8003a6a <_fx_file_write+0x3da>
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003bde:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8003be0:	1eb1      	subs	r1, r6, #2
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003be2:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8003be4:	2300      	movs	r3, #0
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 8003be6:	f8c8 6014 	str.w	r6, [r8, #20]
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003bea:	fbe0 2301 	umlal	r2, r3, r0, r1
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8003bee:	f8c8 6020 	str.w	r6, [r8, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 8003bf2:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
                    file_ptr -> fx_file_current_logical_offset =    0;
 8003bf6:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 8003bfa:	f8c8 609c 	str.w	r6, [r8, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8003bfe:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
                    file_ptr -> fx_file_current_file_offset =       0;
 8003c02:	2200      	movs	r2, #0
 8003c04:	2300      	movs	r3, #0
 8003c06:	e9c8 2310 	strd	r2, r3, [r8, #64]	; 0x40
 8003c0a:	e64f      	b.n	80038ac <_fx_file_write+0x21c>
    file_ptr -> fx_file_modified =  FX_TRUE;
 8003c0c:	2201      	movs	r2, #1
    if (file_ptr -> fx_file_write_notify)
 8003c0e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
    file_ptr -> fx_file_modified =  FX_TRUE;
 8003c12:	7322      	strb	r2, [r4, #12]
    if (file_ptr -> fx_file_write_notify)
 8003c14:	b10b      	cbz	r3, 8003c1a <_fx_file_write+0x58a>
        file_ptr -> fx_file_write_notify(file_ptr);
 8003c16:	4620      	mov	r0, r4
 8003c18:	4798      	blx	r3
    FX_UNPROTECT
 8003c1a:	9808      	ldr	r0, [sp, #32]
    return(FX_SUCCESS);
 8003c1c:	f04f 0b00 	mov.w	fp, #0
    FX_UNPROTECT
 8003c20:	f004 fd6c 	bl	80086fc <_tx_mutex_put>
    return(FX_SUCCESS);
 8003c24:	e55c      	b.n	80036e0 <_fx_file_write+0x50>
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 8003c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f001 f90f 	bl	8004e4c <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 8003c2e:	4683      	mov	fp, r0
 8003c30:	2800      	cmp	r0, #0
 8003c32:	f43f ae53 	beq.w	80038dc <_fx_file_write+0x24c>
 8003c36:	e5ef      	b.n	8003818 <_fx_file_write+0x188>

08003c38 <_fx_media_close>:
FX_FILE *file_ptr;
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8003c38:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <_fx_media_close+0x228>)
 8003c3a:	6802      	ldr	r2, [r0, #0]
 8003c3c:	429a      	cmp	r2, r3
{
 8003c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c42:	b084      	sub	sp, #16
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8003c44:	d004      	beq.n	8003c50 <_fx_media_close+0x18>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8003c46:	2411      	movs	r4, #17
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
}
 8003c48:	4620      	mov	r0, r4
 8003c4a:	b004      	add	sp, #16
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FX_PROTECT
 8003c50:	f500 78e4 	add.w	r8, r0, #456	; 0x1c8
 8003c54:	4606      	mov	r6, r0
 8003c56:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f004 fc64 	bl	8008528 <_tx_mutex_get>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1f0      	bne.n	8003c46 <_fx_media_close+0xe>
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8003c64:	e9d6 4532 	ldrd	r4, r5, [r6, #200]	; 0xc8
    while (open_count)
 8003c68:	b365      	cbz	r5, 8003cc4 <_fx_media_close+0x8c>
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8003c6a:	f8df a210 	ldr.w	sl, [pc, #528]	; 8003e7c <_fx_media_close+0x244>
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8003c6e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8003e80 <_fx_media_close+0x248>
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8003c72:	4f7c      	ldr	r7, [pc, #496]	; (8003e64 <_fx_media_close+0x22c>)
 8003c74:	e003      	b.n	8003c7e <_fx_media_close+0x46>
    while (open_count)
 8003c76:	3d01      	subs	r5, #1
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8003c78:	6027      	str	r7, [r4, #0]
        file_ptr =  file_ptr -> fx_file_opened_next;
 8003c7a:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    while (open_count)
 8003c7c:	d022      	beq.n	8003cc4 <_fx_media_close+0x8c>
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d1f8      	bne.n	8003c76 <_fx_media_close+0x3e>
 8003c84:	7b23      	ldrb	r3, [r4, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f5      	beq.n	8003c76 <_fx_media_close+0x3e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003c8a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003c8e:	b672      	cpsid	i
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8003c90:	f8da 2000 	ldr.w	r2, [sl]
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8003c94:	f8d9 3000 	ldr.w	r3, [r9]
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8003c98:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8003c9c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003ca0:	f381 8810 	msr	PRIMASK, r1
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8003ca4:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8003ca8:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8003cac:	4630      	mov	r0, r6
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8003cae:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8003cb2:	f002 f90b 	bl	8005ecc <_fx_directory_entry_write>
            if (status != FX_SUCCESS)
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d158      	bne.n	8003d6c <_fx_media_close+0x134>
    while (open_count)
 8003cba:	3d01      	subs	r5, #1
            file_ptr -> fx_file_modified =  FX_FALSE;
 8003cbc:	7320      	strb	r0, [r4, #12]
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8003cbe:	6027      	str	r7, [r4, #0]
        file_ptr =  file_ptr -> fx_file_opened_next;
 8003cc0:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    while (open_count)
 8003cc2:	d1dc      	bne.n	8003c7e <_fx_media_close+0x46>
    _fx_utility_FAT_flush(media_ptr);
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f001 f94b 	bl	8004f60 <_fx_utility_FAT_flush>
    _fx_utility_FAT_map_flush(media_ptr);
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f001 fac4 	bl	8005258 <_fx_utility_FAT_map_flush>
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9102      	str	r1, [sp, #8]
 8003cd8:	4630      	mov	r0, r6
 8003cda:	e9d6 450e 	ldrd	r4, r5, [r6, #56]	; 0x38
 8003cde:	e9cd 4500 	strd	r4, r5, [sp]
 8003ce2:	f001 fb33 	bl	800534c <_fx_utility_logical_sector_flush>
    if (status != FX_SUCCESS)
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d13f      	bne.n	8003d6c <_fx_media_close+0x134>
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8003cec:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d14c      	bne.n	8003d8c <_fx_media_close+0x154>
    media_ptr -> fx_media_driver_flush_requests++;
 8003cf2:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 8003cf6:	2102      	movs	r1, #2
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8003cf8:	2590      	movs	r5, #144	; 0x90
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003cfa:	f8d6 20bc 	ldr.w	r2, [r6, #188]	; 0xbc
    media_ptr -> fx_media_driver_flush_requests++;
 8003cfe:	3301      	adds	r3, #1
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003d00:	4630      	mov	r0, r6
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8003d02:	e9c6 1522 	strd	r1, r5, [r6, #136]	; 0x88
    media_ptr -> fx_media_driver_flush_requests++;
 8003d06:	f8c6 31c0 	str.w	r3, [r6, #448]	; 0x1c0
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003d0a:	4790      	blx	r2
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8003d0c:	2308      	movs	r3, #8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8003d0e:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003d12:	4630      	mov	r0, r6
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8003d14:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003d18:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 8003d1c:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003d1e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003d22:	b672      	cpsid	i
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8003d24:	4a50      	ldr	r2, [pc, #320]	; (8003e68 <_fx_media_close+0x230>)
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d027      	beq.n	8003d7c <_fx_media_close+0x144>
        if (_fx_system_media_opened_ptr == media_ptr)
 8003d2c:	484f      	ldr	r0, [pc, #316]	; (8003e6c <_fx_media_close+0x234>)
            media_ptr -> fx_media_opened_previous;
 8003d2e:	e9d6 7534 	ldrd	r7, r5, [r6, #208]	; 0xd0
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8003d32:	f8c7 50d4 	str.w	r5, [r7, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8003d36:	f8d6 50d4 	ldr.w	r5, [r6, #212]	; 0xd4
 8003d3a:	f8c5 70d0 	str.w	r7, [r5, #208]	; 0xd0
        if (_fx_system_media_opened_ptr == media_ptr)
 8003d3e:	6805      	ldr	r5, [r0, #0]
 8003d40:	42b5      	cmp	r5, r6
 8003d42:	d01f      	beq.n	8003d84 <_fx_media_close+0x14c>
    _fx_system_media_opened_count--;
 8003d44:	3b01      	subs	r3, #1
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 8003d46:	484a      	ldr	r0, [pc, #296]	; (8003e70 <_fx_media_close+0x238>)
    _fx_system_media_opened_count--;
 8003d48:	6013      	str	r3, [r2, #0]
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 8003d4a:	6030      	str	r0, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003d4c:	f381 8810 	msr	PRIMASK, r1
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 8003d50:	4640      	mov	r0, r8
 8003d52:	f004 fb8f 	bl	8008474 <_tx_mutex_delete>
    if (media_ptr -> fx_media_close_notify)
 8003d56:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f43f af74 	beq.w	8003c48 <_fx_media_close+0x10>
        media_ptr -> fx_media_close_notify(media_ptr);
 8003d60:	4630      	mov	r0, r6
 8003d62:	4798      	blx	r3
}
 8003d64:	4620      	mov	r0, r4
 8003d66:	b004      	add	sp, #16
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        FX_UNPROTECT
 8003d6c:	4640      	mov	r0, r8
        return(FX_IO_ERROR);
 8003d6e:	2490      	movs	r4, #144	; 0x90
        FX_UNPROTECT
 8003d70:	f004 fcc4 	bl	80086fc <_tx_mutex_put>
        _fx_media_abort(media_ptr);
 8003d74:	4630      	mov	r0, r6
 8003d76:	f003 fdf7 	bl	8007968 <_fx_media_abort>
        return(FX_IO_ERROR);
 8003d7a:	e765      	b.n	8003c48 <_fx_media_close+0x10>
        _fx_system_media_opened_ptr =  FX_NULL;
 8003d7c:	483b      	ldr	r0, [pc, #236]	; (8003e6c <_fx_media_close+0x234>)
 8003d7e:	2500      	movs	r5, #0
 8003d80:	6005      	str	r5, [r0, #0]
 8003d82:	e7df      	b.n	8003d44 <_fx_media_close+0x10c>
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8003d84:	f8d6 50d0 	ldr.w	r5, [r6, #208]	; 0xd0
 8003d88:	6005      	str	r5, [r0, #0]
 8003d8a:	e7db      	b.n	8003d44 <_fx_media_close+0x10c>
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8003d8c:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 8003d8e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d0ae      	beq.n	8003cf2 <_fx_media_close+0xba>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 8003d94:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1aa      	bne.n	8003cf2 <_fx_media_close+0xba>
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8003d9c:	69f0      	ldr	r0, [r6, #28]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 8003d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
        media_ptr -> fx_media_driver_sectors =          1;
 8003da6:	2701      	movs	r7, #1
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8003da8:	7444      	strb	r4, [r0, #17]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003daa:	2590      	movs	r5, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 8003dac:	f8d6 11ac 	ldr.w	r1, [r6, #428]	; 0x1ac
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8003db0:	f04f 0903 	mov.w	r9, #3
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 8003db4:	e9c0 2302 	strd	r2, r3, [r0, #8]
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8003db8:	6803      	ldr	r3, [r0, #0]
        media_ptr -> fx_media_driver_read_requests++;
 8003dba:	4439      	add	r1, r7
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003dbc:	4630      	mov	r0, r6
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8003dbe:	f8c6 4088 	str.w	r4, [r6, #136]	; 0x88
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8003dc2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8003dc6:	6eb3      	ldr	r3, [r6, #104]	; 0x68
        media_ptr -> fx_media_driver_read_requests++;
 8003dc8:	f8c6 11ac 	str.w	r1, [r6, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8003dcc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003dd0:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003dd4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
        media_ptr -> fx_media_driver_sectors =          1;
 8003dd8:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8003ddc:	f8c6 90b8 	str.w	r9, [r6, #184]	; 0xb8
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003de0:	4798      	blx	r3
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8003de2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1c0      	bne.n	8003d6c <_fx_media_close+0x134>
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8003dea:	f8d6 a090 	ldr.w	sl, [r6, #144]	; 0x90
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8003dee:	4650      	mov	r0, sl
 8003df0:	f000 feb8 	bl	8004b64 <_fx_utility_32_unsigned_read>
        if (signature == 0x41615252)
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <_fx_media_close+0x23c>)
 8003df6:	4298      	cmp	r0, r3
 8003df8:	f47f af7b 	bne.w	8003cf2 <_fx_media_close+0xba>
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8003dfc:	f50a 70f2 	add.w	r0, sl, #484	; 0x1e4
 8003e00:	f000 feb0 	bl	8004b64 <_fx_utility_32_unsigned_read>
            if (signature == 0x61417272)
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <_fx_media_close+0x240>)
 8003e06:	4298      	cmp	r0, r3
 8003e08:	f47f af73 	bne.w	8003cf2 <_fx_media_close+0xba>
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 8003e0c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8003e0e:	f50a 70f4 	add.w	r0, sl, #488	; 0x1e8
 8003e12:	f000 feb3 	bl	8004b7c <_fx_utility_32_unsigned_write>
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 8003e16:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 8003e1a:	f50a 70f6 	add.w	r0, sl, #492	; 0x1ec
 8003e1e:	f000 fead 	bl	8004b7c <_fx_utility_32_unsigned_write>
                media_ptr -> fx_media_driver_write_requests++;
 8003e22:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8003e26:	6eb2      	ldr	r2, [r6, #104]	; 0x68
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003e28:	4630      	mov	r0, r6
                media_ptr -> fx_media_driver_write_requests++;
 8003e2a:	3301      	adds	r3, #1
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8003e2c:	f8c6 a090 	str.w	sl, [r6, #144]	; 0x90
                media_ptr -> fx_media_driver_sectors =          1;
 8003e30:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
                media_ptr -> fx_media_driver_write_requests++;
 8003e34:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8003e38:	f8c6 90b8 	str.w	r9, [r6, #184]	; 0xb8
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003e3c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8003e40:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8003e44:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8003e48:	e9c6 7522 	strd	r7, r5, [r6, #136]	; 0x88
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003e4c:	4798      	blx	r3
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8003e4e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8003e52:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d188      	bne.n	8003d6c <_fx_media_close+0x134>
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8003e5a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8003e5c:	66f3      	str	r3, [r6, #108]	; 0x6c
 8003e5e:	e748      	b.n	8003cf2 <_fx_media_close+0xba>
 8003e60:	4d454449 	.word	0x4d454449
 8003e64:	46494c43 	.word	0x46494c43
 8003e68:	20002bc8 	.word	0x20002bc8
 8003e6c:	20002bd0 	.word	0x20002bd0
 8003e70:	4d454443 	.word	0x4d454443
 8003e74:	41615252 	.word	0x41615252
 8003e78:	61417272 	.word	0x61417272
 8003e7c:	20002bdc 	.word	0x20002bdc
 8003e80:	20002bc4 	.word	0x20002bc4

08003e84 <_fx_media_format>:
/**************************************************************************/
UINT  _fx_media_format(FX_MEDIA *media_ptr, VOID (*driver)(FX_MEDIA *media), VOID *driver_info_ptr, UCHAR *memory_ptr, UINT memory_size,
                       CHAR *volume_name, UINT number_of_fats, UINT directory_entries, UINT hidden_sectors,
                       ULONG total_sectors, UINT bytes_per_sector, UINT sectors_per_cluster,
                       UINT heads, UINT sectors_per_track)
{
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8003e8c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FORMAT, media_ptr, directory_entries, total_sectors, sectors_per_cluster, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Validate bytes per sector value: greater than zero and no more than 4096.  */
    if((bytes_per_sector == 0) || (bytes_per_sector > 4096))
 8003e90:	1e74      	subs	r4, r6, #1
 8003e92:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003e96:	9402      	str	r4, [sp, #8]
 8003e98:	f080 81ea 	bcs.w	8004270 <_fx_media_format+0x3ec>
        return(FX_SECTOR_INVALID);

    /* Validate sectors per cluster value: greater than zero and no more than 128.  */
    if((sectors_per_cluster == 0) || (sectors_per_cluster > 128))
 8003e9c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003e9e:	f105 3aff 	add.w	sl, r5, #4294967295
 8003ea2:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 8003ea6:	f200 81e3 	bhi.w	8004270 <_fx_media_format+0x3ec>
 8003eaa:	4694      	mov	ip, r2
        return(FX_SECTOR_INVALID);

    /* Setup driver pointer and memory information.  */
    media_ptr -> fx_media_driver_entry =                driver;
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
    media_ptr -> fx_media_memory_size =                 memory_size;
 8003eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003eae:	460f      	mov	r7, r1
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	60c2      	str	r2, [r0, #12]
    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 8003eb4:	2300      	movs	r3, #0
    media_ptr -> fx_media_sectors_per_track =           sectors_per_track;
 8003eb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 8003eb8:	2104      	movs	r1, #4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8003eba:	f04f 0890 	mov.w	r8, #144	; 0x90
 8003ebe:	4604      	mov	r4, r0
    media_ptr -> fx_media_sectors_per_track =           sectors_per_track;
 8003ec0:	62c2      	str	r2, [r0, #44]	; 0x2c
    media_ptr -> fx_media_heads =                       heads;
 8003ec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    media_ptr -> fx_media_driver_entry =                driver;
 8003ec4:	f8c0 70bc 	str.w	r7, [r0, #188]	; 0xbc
    media_ptr -> fx_media_heads =                       heads;
 8003ec8:	6302      	str	r2, [r0, #48]	; 0x30
    media_ptr -> fx_media_hidden_sectors =              hidden_sectors;
 8003eca:	9a14      	ldr	r2, [sp, #80]	; 0x50
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8003ecc:	6085      	str	r5, [r0, #8]
    media_ptr -> fx_media_bytes_per_sector =            bytes_per_sector;
 8003ece:	6286      	str	r6, [r0, #40]	; 0x28
    media_ptr -> fx_media_hidden_sectors =              hidden_sectors;
 8003ed0:	6702      	str	r2, [r0, #112]	; 0x70
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 8003ed2:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8003ed6:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8003eda:	e9c0 1822 	strd	r1, r8, [r0, #136]	; 0x88
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8003ede:	e9c0 332a 	strd	r3, r3, [r0, #168]	; 0xa8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8003ee2:	47b8      	blx	r7

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8003ee4:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
 8003ee8:	f1bb 0f00 	cmp.w	fp, #0
 8003eec:	f040 81bc 	bne.w	8004268 <_fx_media_format+0x3e4>
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	4659      	mov	r1, fp
        /* Return the driver error status.  */
        return(FX_IO_ERROR);
    }

    /* Setup driver buffer memory.  */
    media_ptr -> fx_media_driver_buffer =  memory_ptr;
 8003ef4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f005 fb98 	bl	800962e <memset>
 8003efe:	4bcc      	ldr	r3, [pc, #816]	; (8004230 <_fx_media_format+0x3ac>)
        /* Clear each byte of the boot record.  */
        byte_ptr[i] =  (UCHAR)0;
    }

    /* Set jump instruction at the beginning of the sector.  */
    byte_ptr[0] =  (UCHAR)0xEB;
 8003f00:	22eb      	movs	r2, #235	; 0xeb
 8003f02:	1ce9      	adds	r1, r5, #3
 8003f04:	1d18      	adds	r0, r3, #4
    byte_ptr[1] =  (UCHAR)0x34;
 8003f06:	f04f 0c34 	mov.w	ip, #52	; 0x34
    byte_ptr[0] =  (UCHAR)0xEB;
 8003f0a:	702a      	strb	r2, [r5, #0]
 8003f0c:	1dea      	adds	r2, r5, #7
    byte_ptr[2] =  (UCHAR)0x90;
 8003f0e:	f885 8002 	strb.w	r8, [r5, #2]
 8003f12:	4281      	cmp	r1, r0
 8003f14:	bf38      	it	cc
 8003f16:	4293      	cmpcc	r3, r2
    byte_ptr[1] =  (UCHAR)0x34;
 8003f18:	f885 c001 	strb.w	ip, [r5, #1]
 8003f1c:	f0c0 820a 	bcc.w	8004334 <_fx_media_format+0x4b0>
 8003f20:	0789      	lsls	r1, r1, #30
 8003f22:	f040 8207 	bne.w	8004334 <_fx_media_format+0x4b0>
    /* Set the OEM name in the boot record.  */
    for (i = 0; i < 8; i++)
    {

        /* Copy a character from the OEM name.  */
        byte_ptr[i + 3] =  _fx_media_format_oem_name[i];
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	f8c5 2003 	str.w	r2, [r5, #3]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f8c5 3007 	str.w	r3, [r5, #7]
    }

    /* Set the media type in the boot record.  */
    byte_ptr[FX_MEDIA_TYPE] =  _fx_media_format_media_type;
 8003f32:	4bc0      	ldr	r3, [pc, #768]	; (8004234 <_fx_media_format+0x3b0>)

    /* Set the number of bytes per sector.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_BYTES_SECTOR], bytes_per_sector);
 8003f34:	4631      	mov	r1, r6
 8003f36:	f105 000b 	add.w	r0, r5, #11
    byte_ptr[FX_MEDIA_TYPE] =  _fx_media_format_media_type;
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	756b      	strb	r3, [r5, #21]
    _fx_utility_16_unsigned_write(&byte_ptr[FX_BYTES_SECTOR], bytes_per_sector);
 8003f3e:	f000 fe0d 	bl	8004b5c <_fx_utility_16_unsigned_write>

    /* Set the number of sectors per track.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS_PER_TRK], sectors_per_track);
 8003f42:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003f44:	f105 0018 	add.w	r0, r5, #24
 8003f48:	f000 fe08 	bl	8004b5c <_fx_utility_16_unsigned_write>

    /* Set the number of heads.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_HEADS], heads);
 8003f4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003f4e:	f105 001a 	add.w	r0, r5, #26
 8003f52:	f000 fe03 	bl	8004b5c <_fx_utility_16_unsigned_write>
#endif


    /* Calculate the maximum clusters.... This is actually greater than the actual since the FAT
       sectors have yet to be accounted for.  */
    total_clusters =  (total_sectors - reserved_sectors - ((directory_entries * FX_DIR_ENTRY_SIZE) + (bytes_per_sector - 1)) / bytes_per_sector) / sectors_per_cluster;
 8003f56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f5a:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	3a01      	subs	r2, #1
 8003f62:	fbb2 f2f6 	udiv	r2, r2, r6
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003f6a:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Calculate the maximum number of FAT sectors necessary for FAT12.  */
    if (total_clusters % 2)
 8003f6e:	07da      	lsls	r2, r3, #31
 8003f70:	f140 8182 	bpl.w	8004278 <_fx_media_format+0x3f4>
    {
        bytes_needed = (total_clusters + total_clusters / 2) + 1;
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    }
    else
    {
        bytes_needed = (total_clusters + total_clusters / 2);
    }
    sectors_per_fat =  bytes_needed / bytes_per_sector;
 8003f7a:	fbb2 f8f6 	udiv	r8, r2, r6
    if (bytes_needed % bytes_per_sector)
 8003f7e:	fb06 2218 	mls	r2, r6, r8, r2
 8003f82:	b10a      	cbz	r2, 8003f88 <_fx_media_format+0x104>
    {
        sectors_per_fat++;
 8003f84:	f108 0801 	add.w	r8, r8, #1
    }

    /* Now adjust the total clusters by the number of sectors per FAT.  */
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8003f88:	9a12      	ldr	r2, [sp, #72]	; 0x48

    /* Is the total cluster count greater than the FAT12 maximum?  */
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8003f8a:	f640 71f5 	movw	r1, #4085	; 0xff5
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8003f8e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003f90:	fb02 f208 	mul.w	r2, r2, r8
 8003f94:	9204      	str	r2, [sp, #16]
 8003f96:	4452      	add	r2, sl
 8003f98:	fbb2 f2f0 	udiv	r2, r2, r0
 8003f9c:	1a9a      	subs	r2, r3, r2
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8003f9e:	428a      	cmp	r2, r1
    total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8003fa0:	9201      	str	r2, [sp, #4]
    if (total_clusters >= FX_12_BIT_FAT_SIZE)
 8003fa2:	d915      	bls.n	8003fd0 <_fx_media_format+0x14c>
        /* Reset the maximum clusters.... This is actually greater than the actual since the FAT
           sectors have yet to be accounted for.  */
        total_clusters =  (total_sectors - reserved_sectors -  ((directory_entries * FX_DIR_ENTRY_SIZE) + (bytes_per_sector - 1)) / bytes_per_sector) / sectors_per_cluster;

        /* Calculate 16-bit FAT is present. Each cluster requires a 2 byte entry in the FAT table.  */
        sectors_per_fat =  (total_clusters * 2) / bytes_per_sector;
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	fbb2 f8f6 	udiv	r8, r2, r6
        if ((total_clusters * 2) % bytes_per_sector)
 8003faa:	fb06 2218 	mls	r2, r6, r8, r2
 8003fae:	b10a      	cbz	r2, 8003fb4 <_fx_media_format+0x130>
        {
            sectors_per_fat++;
 8003fb0:	f108 0801 	add.w	r8, r8, #1
        }

        /* Now adjust the total clusters by the number of sectors per FAT.  */
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8003fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48

        /* Is the total cluster count greater than the FAT16 maximum?  */
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8003fb6:	f64f 71f4 	movw	r1, #65524	; 0xfff4
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8003fba:	fb02 f208 	mul.w	r2, r2, r8
 8003fbe:	9204      	str	r2, [sp, #16]
 8003fc0:	4452      	add	r2, sl
 8003fc2:	fbb2 f2f0 	udiv	r2, r2, r0
 8003fc6:	1a9b      	subs	r3, r3, r2
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8003fc8:	428b      	cmp	r3, r1
        total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 8003fca:	9301      	str	r3, [sp, #4]
        if (total_clusters >= FX_16_BIT_FAT_SIZE)
 8003fcc:	f200 815f 	bhi.w	800428e <_fx_media_format+0x40a>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	9303      	str	r3, [sp, #12]
    /* Set sectors per FAT type.  */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
    {

        /* Set the number of sectors per FAT12/16.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS_PER_FAT], sectors_per_fat);
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	f105 0016 	add.w	r0, r5, #22
 8003fda:	f000 fdbf 	bl	8004b5c <_fx_utility_16_unsigned_write>

        /* Set the signature.  */
        byte_ptr[FX_BOOT_SIG] =  0x29;
 8003fde:	2229      	movs	r2, #41	; 0x29

        /* Setup the volume ID.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID], _fx_media_format_volume_id);
 8003fe0:	4b95      	ldr	r3, [pc, #596]	; (8004238 <_fx_media_format+0x3b4>)
 8003fe2:	f105 0027 	add.w	r0, r5, #39	; 0x27
        byte_ptr[FX_BOOT_SIG] =  0x29;
 8003fe6:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID], _fx_media_format_volume_id);
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	f000 fdc6 	bl	8004b7c <_fx_utility_32_unsigned_write>
        /* Setup the volume ID.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
    }

    /* Set the total number of sectors.  */
    if (total_sectors < (ULONG)0xFFFF)
 8003ff0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003ff4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ff6:	f105 0013 	add.w	r0, r5, #19
 8003ffa:	f105 0a20 	add.w	sl, r5, #32
 8003ffe:	429a      	cmp	r2, r3
 8004000:	f200 813d 	bhi.w	800427e <_fx_media_format+0x3fa>
    {

        /* Write the 16-bit total sector field.  */
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS], (UINT)(total_sectors));
 8004004:	4611      	mov	r1, r2
 8004006:	f000 fda9 	bl	8004b5c <_fx_utility_16_unsigned_write>

        /* Set the number of huge sectors.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], 0);
 800400a:	4650      	mov	r0, sl
 800400c:	2100      	movs	r1, #0
 800400e:	f000 fdb5 	bl	8004b7c <_fx_utility_32_unsigned_write>
        /* Set the number of huge sectors.  */
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], total_sectors);
    }

    /* Set the number of reserved sectors.  */
    _fx_utility_16_unsigned_write(&byte_ptr[FX_RESERVED_SECTORS], reserved_sectors);
 8004012:	9903      	ldr	r1, [sp, #12]
 8004014:	f105 000e 	add.w	r0, r5, #14
 8004018:	f000 fda0 	bl	8004b5c <_fx_utility_16_unsigned_write>

    /* Set the number of sectors per cluster */
    byte_ptr[FX_SECTORS_CLUSTER] =  (UCHAR)sectors_per_cluster;
 800401c:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    /* Set the number of FATs.  */
    byte_ptr[FX_NUMBER_OF_FATS] =  (UCHAR)number_of_fats;

    /* Set the number of hidden sectors.  */
    _fx_utility_32_unsigned_write(&byte_ptr[FX_HIDDEN_SECTORS], hidden_sectors);
 800401e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004020:	f105 001c 	add.w	r0, r5, #28
    byte_ptr[FX_SECTORS_CLUSTER] =  (UCHAR)sectors_per_cluster;
 8004024:	736b      	strb	r3, [r5, #13]
    byte_ptr[FX_NUMBER_OF_FATS] =  (UCHAR)number_of_fats;
 8004026:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004028:	742b      	strb	r3, [r5, #16]
    _fx_utility_32_unsigned_write(&byte_ptr[FX_HIDDEN_SECTORS], hidden_sectors);
 800402a:	f000 fda7 	bl	8004b7c <_fx_utility_32_unsigned_write>

    /* Determine if a FAT12 or FAT16 is present.  If FAT32 is present, these fields are left alone!   */
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 800402e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8004032:	9a01      	ldr	r2, [sp, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	f240 8176 	bls.w	8004326 <_fx_media_format+0x4a2>
    }
    else
    {

        /* FAT32 volume label offset.  */
        j =  FX_VOLUME_LABEL_32;
 800403a:	2247      	movs	r2, #71	; 0x47
    i = 0;
    while (i < 11)
    {

        /* Determine if it is NULL.  */
        if (volume_name[i] == 0)
 800403c:	f899 3000 	ldrb.w	r3, [r9]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8167 	beq.w	8004314 <_fx_media_format+0x490>
            /* Yes, the copying is finished.  */
            break;
        }

        /* Otherwise, copy byte of volume name into boot record.  */
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004046:	54ab      	strb	r3, [r5, r2]
        if (volume_name[i] == 0)
 8004048:	f899 1001 	ldrb.w	r1, [r9, #1]
 800404c:	2900      	cmp	r1, #0
 800404e:	f000 81ad 	beq.w	80043ac <_fx_media_format+0x528>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004052:	18ab      	adds	r3, r5, r2
 8004054:	7059      	strb	r1, [r3, #1]
        if (volume_name[i] == 0)
 8004056:	f899 1002 	ldrb.w	r1, [r9, #2]
 800405a:	2900      	cmp	r1, #0
 800405c:	f000 81a9 	beq.w	80043b2 <_fx_media_format+0x52e>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004060:	7099      	strb	r1, [r3, #2]
        if (volume_name[i] == 0)
 8004062:	f899 1003 	ldrb.w	r1, [r9, #3]
 8004066:	2900      	cmp	r1, #0
 8004068:	f000 81a6 	beq.w	80043b8 <_fx_media_format+0x534>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 800406c:	70d9      	strb	r1, [r3, #3]
        if (volume_name[i] == 0)
 800406e:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004072:	2900      	cmp	r1, #0
 8004074:	f000 81a6 	beq.w	80043c4 <_fx_media_format+0x540>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004078:	7119      	strb	r1, [r3, #4]
        if (volume_name[i] == 0)
 800407a:	f899 1005 	ldrb.w	r1, [r9, #5]
 800407e:	2900      	cmp	r1, #0
 8004080:	f000 819d 	beq.w	80043be <_fx_media_format+0x53a>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004084:	7159      	strb	r1, [r3, #5]
        if (volume_name[i] == 0)
 8004086:	f899 1006 	ldrb.w	r1, [r9, #6]
 800408a:	2900      	cmp	r1, #0
 800408c:	f000 819d 	beq.w	80043ca <_fx_media_format+0x546>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 8004090:	7199      	strb	r1, [r3, #6]
        if (volume_name[i] == 0)
 8004092:	f899 1007 	ldrb.w	r1, [r9, #7]
 8004096:	2900      	cmp	r1, #0
 8004098:	f000 81a5 	beq.w	80043e6 <_fx_media_format+0x562>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 800409c:	71d9      	strb	r1, [r3, #7]
        if (volume_name[i] == 0)
 800409e:	f899 1008 	ldrb.w	r1, [r9, #8]
 80040a2:	2900      	cmp	r1, #0
 80040a4:	f000 81a2 	beq.w	80043ec <_fx_media_format+0x568>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 80040a8:	7219      	strb	r1, [r3, #8]
        if (volume_name[i] == 0)
 80040aa:	f899 1009 	ldrb.w	r1, [r9, #9]
 80040ae:	2900      	cmp	r1, #0
 80040b0:	f000 812e 	beq.w	8004310 <_fx_media_format+0x48c>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 80040b4:	7259      	strb	r1, [r3, #9]
        if (volume_name[i] == 0)
 80040b6:	f899 100a 	ldrb.w	r1, [r9, #10]
 80040ba:	2900      	cmp	r1, #0
 80040bc:	f000 816d 	beq.w	800439a <_fx_media_format+0x516>
        byte_ptr[j + i] =  (UCHAR)volume_name[i];
 80040c0:	7299      	strb	r1, [r3, #10]
    byte_ptr[510] = 0x55;
    byte_ptr[511] = 0xAA;
#else

    /* Set bootrecord signature.  */
    byte_ptr[bytes_per_sector - 2] = 0x55;
 80040c2:	19aa      	adds	r2, r5, r6
 80040c4:	f04f 0b55 	mov.w	fp, #85	; 0x55
    byte_ptr[bytes_per_sector - 1] = 0xAA;
#endif

    /* Select the boot record write command.  */
    media_ptr -> fx_media_driver_request =       FX_DRIVER_BOOT_WRITE;
 80040c8:	2307      	movs	r3, #7
    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80040ca:	f04f 0901 	mov.w	r9, #1
    byte_ptr[bytes_per_sector - 2] = 0x55;
 80040ce:	f802 bc02 	strb.w	fp, [r2, #-2]
    byte_ptr[bytes_per_sector - 1] = 0xAA;
 80040d2:	f04f 0aaa 	mov.w	sl, #170	; 0xaa
 80040d6:	9a02      	ldr	r2, [sp, #8]

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_WRITE, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Write out the bootrecord */
    (driver)(media_ptr);
 80040d8:	4620      	mov	r0, r4
    byte_ptr[bytes_per_sector - 1] = 0xAA;
 80040da:	f805 a002 	strb.w	sl, [r5, r2]
    media_ptr -> fx_media_driver_request =       FX_DRIVER_BOOT_WRITE;
 80040de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80040e2:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
    media_ptr -> fx_media_driver_sector_type =   FX_BOOT_SECTOR;
 80040e6:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
    (driver)(media_ptr);
 80040ea:	47b8      	blx	r7

    /* Clear the write flag.  */
    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80040ec:	2200      	movs	r2, #0

    /* Determine if it was successful.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80040ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80040f2:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 80b6 	bne.w	8004268 <_fx_media_format+0x3e4>
    /* Calculate the number of root sectors.  */
    root_sectors =    ((directory_entries * FX_DIR_ENTRY_SIZE) + bytes_per_sector - 1) / bytes_per_sector;

    /* Determine if FAT32 is present AND if the bytes per sector is large enough to have
       a FSINFO sector.  */
    if ((total_clusters >= FX_16_BIT_FAT_SIZE) && (bytes_per_sector == 512))
 80040fc:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8004100:	9901      	ldr	r1, [sp, #4]
 8004102:	4291      	cmp	r1, r2
 8004104:	d941      	bls.n	800418a <_fx_media_format+0x306>
 8004106:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800410a:	d13e      	bne.n	800418a <_fx_media_format+0x306>
 800410c:	4619      	mov	r1, r3
 800410e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004112:	4628      	mov	r0, r5
 8004114:	9305      	str	r3, [sp, #20]
 8004116:	f005 fa8a 	bl	800962e <memset>
        /* Build the final signature word, this too is used to help verify that this is a FSINFO sector.  */
        byte_ptr[508] =  0x55;
        byte_ptr[509] =  0xAA;

        /* Setup the total available clusters on the media. We need to subtract 1 for the FAT32 root directory.  */
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 800411a:	9b01      	ldr	r3, [sp, #4]
        byte_ptr[3] =  0x41;
 800411c:	2241      	movs	r2, #65	; 0x41
        byte_ptr[0] =  0x52;
 800411e:	f04f 0e52 	mov.w	lr, #82	; 0x52
        byte_ptr[2] =  0x61;
 8004122:	f04f 0c61 	mov.w	ip, #97	; 0x61
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004126:	1e59      	subs	r1, r3, #1
        byte_ptr[484] =  0x72;
 8004128:	f04f 0372 	mov.w	r3, #114	; 0x72
        byte_ptr[3] =  0x41;
 800412c:	70ea      	strb	r2, [r5, #3]
        byte_ptr[486] =  0x41;
 800412e:	f885 21e6 	strb.w	r2, [r5, #486]	; 0x1e6
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004132:	f505 70f4 	add.w	r0, r5, #488	; 0x1e8
        byte_ptr[484] =  0x72;
 8004136:	f885 31e4 	strb.w	r3, [r5, #484]	; 0x1e4
        byte_ptr[485] =  0x72;
 800413a:	f885 31e5 	strb.w	r3, [r5, #485]	; 0x1e5
        byte_ptr[0] =  0x52;
 800413e:	f885 e000 	strb.w	lr, [r5]
        byte_ptr[1] =  0x52;
 8004142:	f885 e001 	strb.w	lr, [r5, #1]
        byte_ptr[2] =  0x61;
 8004146:	f885 c002 	strb.w	ip, [r5, #2]
        byte_ptr[487] =  0x61;
 800414a:	f885 c1e7 	strb.w	ip, [r5, #487]	; 0x1e7
        byte_ptr[508] =  0x55;
 800414e:	f885 b1fc 	strb.w	fp, [r5, #508]	; 0x1fc
        byte_ptr[509] =  0xAA;
 8004152:	f885 a1fd 	strb.w	sl, [r5, #509]	; 0x1fd
        _fx_utility_32_unsigned_write(&byte_ptr[488], (total_clusters - 1));
 8004156:	f000 fd11 	bl	8004b7c <_fx_utility_32_unsigned_write>

        /* Setup the starting free cluster to 3, since cluster 2 is reserved for the FAT32 root directory.  */
        _fx_utility_32_unsigned_write(&byte_ptr[492], 3);
 800415a:	2103      	movs	r1, #3
 800415c:	f505 70f6 	add.w	r0, r5, #492	; 0x1ec
 8004160:	f000 fd0c 	bl	8004b7c <_fx_utility_32_unsigned_write>

        /* Now write the FSINFO sector to the media.  */
        media_ptr -> fx_media_driver_logical_sector =  1;
 8004164:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004168:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, 1, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Write out the sector.  */
        (driver)(media_ptr);
 800416c:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_sectors =         1;
 800416e:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 8004172:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_sector_type =     FX_BOOT_SECTOR;
 8004176:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
        (driver)(media_ptr);
 800417a:	47b8      	blx	r7

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800417c:	9b05      	ldr	r3, [sp, #20]

        /* Determine if it was successful.  */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800417e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004182:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004186:	2a00      	cmp	r2, #0
 8004188:	d16e      	bne.n	8004268 <_fx_media_format+0x3e4>
    }

    /* At this point we need set up first to FAT entries and clear the remaining FAT sectors area.  */

    /* Loop through number of FATs. The first is the only one used.  */
    for (f = 0; f < number_of_fats; f++)
 800418a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800418c:	b3b3      	cbz	r3, 80041fc <_fx_media_format+0x378>
 800418e:	2300      	movs	r3, #0
 8004190:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004194:	469a      	mov	sl, r3
 8004196:	9305      	str	r3, [sp, #20]
    {

        /* Loop through all the sectors in this FAT.  */
        for (s = 0; s < sectors_per_fat; s++)
 8004198:	f1b8 0f00 	cmp.w	r8, #0
 800419c:	d027      	beq.n	80041ee <_fx_media_format+0x36a>
 800419e:	f04f 0b00 	mov.w	fp, #0
                    byte_ptr[2] =  (UCHAR)0xFF;

                    /* Start clearing at FAT entry 3.  */
                    i =  3;
                }
                else if (total_clusters < FX_16_BIT_FAT_SIZE)
 80041a2:	462b      	mov	r3, r5
 80041a4:	465d      	mov	r5, fp
 80041a6:	469b      	mov	fp, r3
            if (s == 0)
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	f000 80d4 	beq.w	8004356 <_fx_media_format+0x4d2>
                    i =  12;
                }
            }
            else
            {
                i = 0;
 80041ae:	2000      	movs	r0, #0
 80041b0:	1a32      	subs	r2, r6, r0
 80041b2:	2100      	movs	r1, #0
 80041b4:	4458      	add	r0, fp
 80041b6:	f005 fa3a 	bl	800962e <memset>
                byte_ptr[i] =  (CHAR)0;
            }

            /* Build sector write command.  */
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
            media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 80041ba:	2301      	movs	r3, #1
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
 80041bc:	eb05 0109 	add.w	r1, r5, r9
            media_ptr -> fx_media_driver_sectors =         1;
            media_ptr -> fx_media_driver_system_write =    FX_TRUE;
            media_ptr -> fx_media_driver_sector_type =     FX_FAT_SECTOR;
 80041c0:	2202      	movs	r2, #2

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_driver_logical_sector, 1, memory_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Write out the sector.  */
            (driver)(media_ptr);
 80041c2:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 80041c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            media_ptr -> fx_media_driver_sectors =         1;
 80041c8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 80041cc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
            media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (f * sectors_per_fat) + s;
 80041d0:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
            media_ptr -> fx_media_driver_sector_type =     FX_FAT_SECTOR;
 80041d4:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
            (driver)(media_ptr);
 80041d8:	47b8      	blx	r7

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;

            /* Determine if it was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80041da:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80041de:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d140      	bne.n	8004268 <_fx_media_format+0x3e4>
        for (s = 0; s < sectors_per_fat; s++)
 80041e6:	3501      	adds	r5, #1
 80041e8:	4545      	cmp	r5, r8
 80041ea:	d1dd      	bne.n	80041a8 <_fx_media_format+0x324>
 80041ec:	465d      	mov	r5, fp
    for (f = 0; f < number_of_fats; f++)
 80041ee:	9b05      	ldr	r3, [sp, #20]
 80041f0:	44c1      	add	r9, r8
 80041f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041f4:	3301      	adds	r3, #1
 80041f6:	429a      	cmp	r2, r3
 80041f8:	9305      	str	r3, [sp, #20]
 80041fa:	d1cd      	bne.n	8004198 <_fx_media_format+0x314>
 80041fc:	4632      	mov	r2, r6
 80041fe:	4628      	mov	r0, r5
 8004200:	2100      	movs	r1, #0
 8004202:	f005 fa14 	bl	800962e <memset>
    root_sectors =    ((directory_entries * FX_DIR_ENTRY_SIZE) + bytes_per_sector - 1) / bytes_per_sector;
 8004206:	9b02      	ldr	r3, [sp, #8]
 8004208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800420a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800420e:	fbb3 f3f6 	udiv	r3, r3, r6
    {
        byte_ptr[i] =  (CHAR)0;
    }

    /* Now clear the root directory sectors.  */
    for (s = 0; s < root_sectors; s++)
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80dc 	beq.w	80043d0 <_fx_media_format+0x54c>
    {

        /* Build sector write command.  */
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004218:	9a04      	ldr	r2, [sp, #16]
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 800421a:	2601      	movs	r6, #1
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 800421c:	9903      	ldr	r1, [sp, #12]
        media_ptr -> fx_media_driver_sectors =         1;
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
        media_ptr -> fx_media_driver_sector_type =     FX_DIRECTORY_SECTOR;
 800421e:	f04f 0a03 	mov.w	sl, #3

        /* Write out the sector.  */
        (driver)(media_ptr);

        /* Clear the write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004222:	f04f 0900 	mov.w	r9, #0
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004226:	440a      	add	r2, r1
 8004228:	4615      	mov	r5, r2
 800422a:	eb02 0803 	add.w	r8, r2, r3
 800422e:	e008      	b.n	8004242 <_fx_media_format+0x3be>
 8004230:	20000070 	.word	0x20000070
 8004234:	2000006c 	.word	0x2000006c
 8004238:	20000078 	.word	0x20000078
    for (s = 0; s < root_sectors; s++)
 800423c:	45a8      	cmp	r8, r5
 800423e:	f000 80c7 	beq.w	80043d0 <_fx_media_format+0x54c>
        media_ptr -> fx_media_driver_logical_sector =  reserved_sectors + (number_of_fats * sectors_per_fat) + s;
 8004242:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
        (driver)(media_ptr);
 8004246:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =         FX_DRIVER_WRITE;
 8004248:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 800424c:	3501      	adds	r5, #1
        media_ptr -> fx_media_driver_sectors =         1;
 800424e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_system_write =    FX_TRUE;
 8004252:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_sector_type =     FX_DIRECTORY_SECTOR;
 8004256:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
        (driver)(media_ptr);
 800425a:	47b8      	blx	r7

        /* Determine if it was successful.  */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800425c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8004260:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0e9      	beq.n	800423c <_fx_media_format+0x3b8>
        return(FX_IO_ERROR);
 8004268:	2090      	movs	r0, #144	; 0x90
    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);

    /* Return success!  */
    return(media_ptr -> fx_media_driver_status);
}
 800426a:	b007      	add	sp, #28
 800426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_SECTOR_INVALID);
 8004270:	2089      	movs	r0, #137	; 0x89
}
 8004272:	b007      	add	sp, #28
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        bytes_needed = (total_clusters + total_clusters / 2);
 8004278:	eb03 0253 	add.w	r2, r3, r3, lsr #1
 800427c:	e67d      	b.n	8003f7a <_fx_media_format+0xf6>
        _fx_utility_16_unsigned_write(&byte_ptr[FX_SECTORS], (UINT)0);
 800427e:	2100      	movs	r1, #0
 8004280:	f000 fc6c 	bl	8004b5c <_fx_utility_16_unsigned_write>
        _fx_utility_32_unsigned_write(&byte_ptr[FX_HUGE_SECTORS], total_sectors);
 8004284:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004286:	4650      	mov	r0, sl
 8004288:	f000 fc78 	bl	8004b7c <_fx_utility_32_unsigned_write>
 800428c:	e6c1      	b.n	8004012 <_fx_media_format+0x18e>
            if (bytes_per_sector == 512)
 800428e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004292:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004296:	f000 8083 	beq.w	80043a0 <_fx_media_format+0x51c>
    reserved_sectors =  1;
 800429a:	2301      	movs	r3, #1
                _fx_utility_16_unsigned_write(&byte_ptr[48], 0xFFFF);
 800429c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    reserved_sectors =  1;
 80042a0:	9303      	str	r3, [sp, #12]
                _fx_utility_16_unsigned_write(&byte_ptr[48], 0xFFFF);
 80042a2:	f000 fc5b 	bl	8004b5c <_fx_utility_16_unsigned_write>
            _fx_utility_32_unsigned_write(&byte_ptr[FX_ROOT_CLUSTER_32], FX_FAT_ENTRY_START);
 80042a6:	2102      	movs	r1, #2
 80042a8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80042ac:	f000 fc66 	bl	8004b7c <_fx_utility_32_unsigned_write>
            total_clusters =  (total_sectors - reserved_sectors) / sectors_per_cluster;
 80042b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042b2:	9a03      	ldr	r2, [sp, #12]
 80042b4:	1a9a      	subs	r2, r3, r2
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80042b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
            total_clusters =  (total_sectors - reserved_sectors) / sectors_per_cluster;
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80042bc:	fb03 f106 	mul.w	r1, r3, r6
            sectors_per_fat =  (total_clusters * 4) / bytes_per_sector;
 80042c0:	0093      	lsls	r3, r2, #2
 80042c2:	fbb3 f8f6 	udiv	r8, r3, r6
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80042c6:	0949      	lsrs	r1, r1, #5
            if ((total_clusters * 4) % bytes_per_sector)
 80042c8:	fb06 3318 	mls	r3, r6, r8, r3
            directory_entries =  (sectors_per_cluster * bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80042cc:	9113      	str	r1, [sp, #76]	; 0x4c
            if ((total_clusters * 4) % bytes_per_sector)
 80042ce:	b10b      	cbz	r3, 80042d4 <_fx_media_format+0x450>
                sectors_per_fat++;
 80042d0:	f108 0801 	add.w	r8, r8, #1
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 80042d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 80042d6:	f64f 71f4 	movw	r1, #65524	; 0xfff4
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 80042da:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80042dc:	fb03 f308 	mul.w	r3, r3, r8
 80042e0:	9304      	str	r3, [sp, #16]
 80042e2:	4453      	add	r3, sl
 80042e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80042e8:	1ad3      	subs	r3, r2, r3
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 80042ea:	428b      	cmp	r3, r1
            total_clusters =  total_clusters - ((sectors_per_fat * number_of_fats) + (sectors_per_cluster - 1)) / sectors_per_cluster;
 80042ec:	9301      	str	r3, [sp, #4]
    if (total_clusters < FX_16_BIT_FAT_SIZE)
 80042ee:	f67f ae71 	bls.w	8003fd4 <_fx_media_format+0x150>
        _fx_utility_32_unsigned_write(&byte_ptr[FX_SECTORS_PER_FAT_32], sectors_per_fat);
 80042f2:	4641      	mov	r1, r8
 80042f4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80042f8:	f000 fc40 	bl	8004b7c <_fx_utility_32_unsigned_write>
        byte_ptr[FX_BOOT_SIG_32] =  0x29;
 80042fc:	2229      	movs	r2, #41	; 0x29
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
 80042fe:	4b4b      	ldr	r3, [pc, #300]	; (800442c <_fx_media_format+0x5a8>)
 8004300:	f105 0043 	add.w	r0, r5, #67	; 0x43
        byte_ptr[FX_BOOT_SIG_32] =  0x29;
 8004304:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        _fx_utility_32_unsigned_write(&byte_ptr[FX_VOLUME_ID_32], _fx_media_format_volume_id);
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	f000 fc37 	bl	8004b7c <_fx_utility_32_unsigned_write>
 800430e:	e66f      	b.n	8003ff0 <_fx_media_format+0x16c>
        i++;
 8004310:	f04f 0b09 	mov.w	fp, #9
 8004314:	eb02 000b 	add.w	r0, r2, fp
 8004318:	2120      	movs	r1, #32
 800431a:	f1cb 020b 	rsb	r2, fp, #11
 800431e:	4428      	add	r0, r5
 8004320:	f005 f985 	bl	800962e <memset>
 8004324:	e6cd      	b.n	80040c2 <_fx_media_format+0x23e>
        _fx_utility_16_unsigned_write(&byte_ptr[FX_ROOT_DIR_ENTRIES], directory_entries);
 8004326:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004328:	f105 0011 	add.w	r0, r5, #17
 800432c:	f000 fc16 	bl	8004b5c <_fx_utility_16_unsigned_write>
        j =  FX_VOLUME_LABEL;
 8004330:	222b      	movs	r2, #43	; 0x2b
 8004332:	e683      	b.n	800403c <_fx_media_format+0x1b8>
        byte_ptr[i + 3] =  _fx_media_format_oem_name[i];
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	70ea      	strb	r2, [r5, #3]
 8004338:	785a      	ldrb	r2, [r3, #1]
 800433a:	712a      	strb	r2, [r5, #4]
 800433c:	789a      	ldrb	r2, [r3, #2]
 800433e:	716a      	strb	r2, [r5, #5]
 8004340:	78da      	ldrb	r2, [r3, #3]
 8004342:	71aa      	strb	r2, [r5, #6]
 8004344:	791a      	ldrb	r2, [r3, #4]
 8004346:	71ea      	strb	r2, [r5, #7]
 8004348:	795a      	ldrb	r2, [r3, #5]
 800434a:	722a      	strb	r2, [r5, #8]
 800434c:	799a      	ldrb	r2, [r3, #6]
 800434e:	726a      	strb	r2, [r5, #9]
 8004350:	79db      	ldrb	r3, [r3, #7]
 8004352:	72ab      	strb	r3, [r5, #10]
 8004354:	e5ed      	b.n	8003f32 <_fx_media_format+0xae>
                if (total_clusters < FX_12_BIT_FAT_SIZE)
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	f640 72f5 	movw	r2, #4085	; 0xff5
 800435c:	4293      	cmp	r3, r2
 800435e:	d912      	bls.n	8004386 <_fx_media_format+0x502>
                else if (total_clusters < FX_16_BIT_FAT_SIZE)
 8004360:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8004364:	4293      	cmp	r3, r2
 8004366:	d844      	bhi.n	80043f2 <_fx_media_format+0x56e>
                    byte_ptr[2] =  (UCHAR)0xFF;
 8004368:	23ff      	movs	r3, #255	; 0xff
                    byte_ptr[0] =  (UCHAR)0xF0;
 800436a:	22f0      	movs	r2, #240	; 0xf0
                    i =  4;
 800436c:	2004      	movs	r0, #4
                    byte_ptr[1] =  (UCHAR)0x00;
 800436e:	f88b 5001 	strb.w	r5, [fp, #1]
                    byte_ptr[0] =  (UCHAR)0xF0;
 8004372:	f88b 2000 	strb.w	r2, [fp]
                    byte_ptr[2] =  (UCHAR)0xFF;
 8004376:	f88b 3002 	strb.w	r3, [fp, #2]
                    byte_ptr[3] =  (UCHAR)0xFF;
 800437a:	f88b 3003 	strb.w	r3, [fp, #3]
            for (; i < bytes_per_sector; i++)
 800437e:	42b0      	cmp	r0, r6
 8004380:	f4bf af1b 	bcs.w	80041ba <_fx_media_format+0x336>
 8004384:	e714      	b.n	80041b0 <_fx_media_format+0x32c>
                    byte_ptr[0] =  (UCHAR)0x0F;
 8004386:	230f      	movs	r3, #15
                    byte_ptr[2] =  (UCHAR)0xFF;
 8004388:	22ff      	movs	r2, #255	; 0xff
                    i =  3;
 800438a:	2003      	movs	r0, #3
                    byte_ptr[0] =  (UCHAR)0x0F;
 800438c:	f88b 3000 	strb.w	r3, [fp]
                    byte_ptr[1] =  (UCHAR)0x0F;
 8004390:	f88b 3001 	strb.w	r3, [fp, #1]
                    byte_ptr[2] =  (UCHAR)0xFF;
 8004394:	f88b 2002 	strb.w	r2, [fp, #2]
 8004398:	e7f1      	b.n	800437e <_fx_media_format+0x4fa>
        i++;
 800439a:	f04f 0b0a 	mov.w	fp, #10
 800439e:	e7b9      	b.n	8004314 <_fx_media_format+0x490>
                _fx_utility_16_unsigned_write(&byte_ptr[48], 1);
 80043a0:	2101      	movs	r1, #1
 80043a2:	f000 fbdb 	bl	8004b5c <_fx_utility_16_unsigned_write>
                reserved_sectors++;
 80043a6:	2302      	movs	r3, #2
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	e77c      	b.n	80042a6 <_fx_media_format+0x422>
        i++;
 80043ac:	f04f 0b01 	mov.w	fp, #1
 80043b0:	e7b0      	b.n	8004314 <_fx_media_format+0x490>
 80043b2:	f04f 0b02 	mov.w	fp, #2
 80043b6:	e7ad      	b.n	8004314 <_fx_media_format+0x490>
 80043b8:	f04f 0b03 	mov.w	fp, #3
 80043bc:	e7aa      	b.n	8004314 <_fx_media_format+0x490>
 80043be:	f04f 0b05 	mov.w	fp, #5
 80043c2:	e7a7      	b.n	8004314 <_fx_media_format+0x490>
 80043c4:	f04f 0b04 	mov.w	fp, #4
 80043c8:	e7a4      	b.n	8004314 <_fx_media_format+0x490>
 80043ca:	f04f 0b06 	mov.w	fp, #6
 80043ce:	e7a1      	b.n	8004314 <_fx_media_format+0x490>
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80043d0:	2108      	movs	r1, #8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80043d2:	2290      	movs	r2, #144	; 0x90
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80043d4:	4620      	mov	r0, r4
 80043d6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80043da:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80043de:	4798      	blx	r3
    return(media_ptr -> fx_media_driver_status);
 80043e0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80043e4:	e741      	b.n	800426a <_fx_media_format+0x3e6>
        i++;
 80043e6:	f04f 0b07 	mov.w	fp, #7
 80043ea:	e793      	b.n	8004314 <_fx_media_format+0x490>
 80043ec:	f04f 0b08 	mov.w	fp, #8
 80043f0:	e790      	b.n	8004314 <_fx_media_format+0x490>
                    byte_ptr[4] =  (UCHAR)0xFF;
 80043f2:	23ff      	movs	r3, #255	; 0xff
                    byte_ptr[0] =  (UCHAR)0xF0;
 80043f4:	21f0      	movs	r1, #240	; 0xf0
                    byte_ptr[11] =  (UCHAR)0x0F;
 80043f6:	220f      	movs	r2, #15
                    byte_ptr[1] =  (UCHAR)0x00;
 80043f8:	f88b 5001 	strb.w	r5, [fp, #1]
                    byte_ptr[2] =  (UCHAR)0x00;
 80043fc:	f88b 5002 	strb.w	r5, [fp, #2]
                    i =  12;
 8004400:	200c      	movs	r0, #12
                    byte_ptr[3] =  (UCHAR)0x00;
 8004402:	f88b 5003 	strb.w	r5, [fp, #3]
                    byte_ptr[0] =  (UCHAR)0xF0;
 8004406:	f88b 1000 	strb.w	r1, [fp]
                    byte_ptr[4] =  (UCHAR)0xFF;
 800440a:	f88b 3004 	strb.w	r3, [fp, #4]
                    byte_ptr[5] =  (UCHAR)0xFF;
 800440e:	f88b 3005 	strb.w	r3, [fp, #5]
                    byte_ptr[6] =  (UCHAR)0xFF;
 8004412:	f88b 3006 	strb.w	r3, [fp, #6]
                    byte_ptr[7] =  (UCHAR)0xFF;
 8004416:	f88b 3007 	strb.w	r3, [fp, #7]
                    byte_ptr[8] =   (UCHAR)0xFF;
 800441a:	f88b 3008 	strb.w	r3, [fp, #8]
                    byte_ptr[9] =   (UCHAR)0xFF;
 800441e:	f88b 3009 	strb.w	r3, [fp, #9]
                    byte_ptr[10] =  (UCHAR)0xFF;
 8004422:	f88b 300a 	strb.w	r3, [fp, #10]
                    byte_ptr[11] =  (UCHAR)0x0F;
 8004426:	f88b 200b 	strb.w	r2, [fp, #11]
 800442a:	e7a8      	b.n	800437e <_fx_media_format+0x4fa>
 800442c:	20000078 	.word	0x20000078

08004430 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             bytes_in_buffer;
FX_INT_SAVE_AREA


    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8004434:	4d78      	ldr	r5, [pc, #480]	; (8004618 <_fx_media_open+0x1e8>)
{
 8004436:	b087      	sub	sp, #28
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8004438:	4c78      	ldr	r4, [pc, #480]	; (800461c <_fx_media_open+0x1ec>)
 800443a:	4e79      	ldr	r6, [pc, #484]	; (8004620 <_fx_media_open+0x1f0>)
 800443c:	6827      	ldr	r7, [r4, #0]
 800443e:	682d      	ldr	r5, [r5, #0]
 8004440:	433d      	orrs	r5, r7
 8004442:	6837      	ldr	r7, [r6, #0]
{
 8004444:	9e10      	ldr	r6, [sp, #64]	; 0x40
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8004446:	433d      	orrs	r5, r7
 8004448:	f000 80b8 	beq.w	80045bc <_fx_media_open+0x18c>
        _fx_version_id[0] == 0)
 800444c:	4d75      	ldr	r5, [pc, #468]	; (8004624 <_fx_media_open+0x1f4>)
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800444e:	782d      	ldrb	r5, [r5, #0]
 8004450:	2d00      	cmp	r5, #0
 8004452:	f000 80b3 	beq.w	80045bc <_fx_media_open+0x18c>
    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
    media_ptr -> fx_media_driver_entry =                media_driver;
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
    media_ptr -> fx_media_memory_size =                 memory_size;
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 8004456:	2500      	movs	r5, #0
    media_ptr -> fx_media_name =                        media_name;
 8004458:	6041      	str	r1, [r0, #4]
 800445a:	4698      	mov	r8, r3
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800445c:	f242 4ea4 	movw	lr, #9380	; 0x24a4
    media_ptr -> fx_media_memory_size =                 memory_size;
 8004460:	9b11      	ldr	r3, [sp, #68]	; 0x44
    media_ptr -> fx_media_FAT_type =                    0;
 8004462:	f242 4cb0 	movw	ip, #9392	; 0x24b0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 8004466:	2104      	movs	r1, #4
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8004468:	2790      	movs	r7, #144	; 0x90
 800446a:	4604      	mov	r4, r0
    media_ptr -> fx_media_memory_size =                 memory_size;
 800446c:	60c3      	str	r3, [r0, #12]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800446e:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8004472:	6086      	str	r6, [r0, #8]
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 8004474:	f840 500e 	str.w	r5, [r0, lr]
    media_ptr -> fx_media_directory_local_path_gets =  0;
 8004478:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800447c:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 8004480:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 8004484:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 8004488:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800448c:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 8004490:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 8004494:	f8c0 511c 	str.w	r5, [r0, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 8004498:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800449c:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 80044a0:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 80044a4:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 80044a8:	f8c0 5130 	str.w	r5, [r0, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 80044ac:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 80044b0:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 80044b4:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
    media_ptr -> fx_media_directory_attributes_sets =  0;
 80044b8:	e9c0 5536 	strd	r5, r5, [r0, #216]	; 0xd8
    media_ptr -> fx_media_directory_default_gets =  0;
 80044bc:	e9c0 5538 	strd	r5, r5, [r0, #224]	; 0xe0
    media_ptr -> fx_media_directory_deletes =  0;
 80044c0:	e9c0 553a 	strd	r5, r5, [r0, #232]	; 0xe8
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 80044c4:	e9c0 553c 	strd	r5, r5, [r0, #240]	; 0xf0
    media_ptr -> fx_media_directory_local_path_clears =  0;
 80044c8:	e9c0 553e 	strd	r5, r5, [r0, #248]	; 0xf8
    media_ptr -> fx_media_FAT_type =                    0;
 80044cc:	f800 500c 	strb.w	r5, [r0, ip]
    media_ptr -> fx_media_file_relative_seeks =  0;
 80044d0:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 80044d4:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 80044d8:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 80044dc:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 80044e0:	f8c0 5150 	str.w	r5, [r0, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 80044e4:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 80044e8:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 80044ec:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 80044f0:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 80044f4:	f8c0 5164 	str.w	r5, [r0, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 80044f8:	f8c0 5168 	str.w	r5, [r0, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 80044fc:	f8c0 516c 	str.w	r5, [r0, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 8004500:	f8c0 5170 	str.w	r5, [r0, #368]	; 0x170
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 8004504:	f8c0 51c4 	str.w	r5, [r0, #452]	; 0x1c4
    media_ptr -> fx_media_directory_free_searches =  0;
 8004508:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800450c:	f8c0 5178 	str.w	r5, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 8004510:	f8c0 517c 	str.w	r5, [r0, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 8004514:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 8004518:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800451c:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 8004520:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 8004524:	f8c0 5190 	str.w	r5, [r0, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 8004528:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800452c:	f8c0 5198 	str.w	r5, [r0, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 8004530:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 8004534:	f8c0 51a0 	str.w	r5, [r0, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 8004538:	f8c0 51a4 	str.w	r5, [r0, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800453c:	f8c0 51a8 	str.w	r5, [r0, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 8004540:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 8004544:	f8c0 51b0 	str.w	r5, [r0, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 8004548:	f8c0 51b4 	str.w	r5, [r0, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800454c:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 8004550:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 8004554:	f8c0 51c0 	str.w	r5, [r0, #448]	; 0x1c0
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8004558:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800455c:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8004560:	e9c0 552a 	strd	r5, r5, [r0, #168]	; 0xa8
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8004564:	e9c0 1722 	strd	r1, r7, [r0, #136]	; 0x88

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004568:	4790      	blx	r2

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800456a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d150      	bne.n	8004614 <_fx_media_open+0x1e4>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 8004572:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
    media_ptr -> fx_media_driver_sectors =          1;
 8004576:	2501      	movs	r5, #1
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 8004578:	2205      	movs	r2, #5
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800457a:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    media_ptr -> fx_media_driver_boot_read_requests++;
 800457e:	442b      	add	r3, r5
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 8004580:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 8004584:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004588:	4620      	mov	r0, r4
    media_ptr -> fx_media_driver_boot_read_requests++;
 800458a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    media_ptr -> fx_media_driver_sectors =          1;
 800458e:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004592:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 8004596:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800459a:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800459c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80045a0:	b18b      	cbz	r3, 80045c6 <_fx_media_open+0x196>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80045a2:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80045a4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80045a8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80045ac:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80045ae:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80045b2:	4798      	blx	r3
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
}
 80045b4:	4628      	mov	r0, r5
 80045b6:	b007      	add	sp, #28
 80045b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_IMPLEMENTED);
 80045bc:	2522      	movs	r5, #34	; 0x22
}
 80045be:	4628      	mov	r0, r5
 80045c0:	b007      	add	sp, #28
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 80045c6:	4620      	mov	r0, r4
 80045c8:	f003 fa2c 	bl	8007a24 <_fx_media_boot_info_extract>
 80045cc:	4605      	mov	r5, r0
 80045ce:	b150      	cbz	r0, 80045e6 <_fx_media_open+0x1b6>
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80045d0:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80045d2:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80045d6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80045da:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80045dc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        return(FX_MEDIA_INVALID);
 80045e0:	2502      	movs	r5, #2
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80045e2:	4798      	blx	r3
        return(FX_MEDIA_INVALID);
 80045e4:	e7e6      	b.n	80045b4 <_fx_media_open+0x184>
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 80045e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80045ea:	3030      	adds	r0, #48	; 0x30
 80045ec:	f7fe f9d2 	bl	8002994 <_fx_utility_16_unsigned_read>
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 80045f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 80045f4:	4680      	mov	r8, r0
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	6163      	str	r3, [r4, #20]
    if (media_ptr -> fx_media_sector_cache_size == 0)
 80045fc:	b9a3      	cbnz	r3, 8004628 <_fx_media_open+0x1f8>
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80045fe:	2208      	movs	r2, #8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8004600:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004604:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004608:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800460a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        return(FX_BUFFER_ERROR);
 800460e:	2521      	movs	r5, #33	; 0x21
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004610:	4798      	blx	r3
        return(FX_BUFFER_ERROR);
 8004612:	e7cf      	b.n	80045b4 <_fx_media_open+0x184>
        return(FX_IO_ERROR);
 8004614:	463d      	mov	r5, r7
 8004616:	e7cd      	b.n	80045b4 <_fx_media_open+0x184>
 8004618:	20002bd4 	.word	0x20002bd4
 800461c:	20002b90 	.word	0x20002b90
 8004620:	20002bd8 	.word	0x20002bd8
 8004624:	2000000c 	.word	0x2000000c
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	f240 817e 	bls.w	800492c <_fx_media_open+0x4fc>
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 8004630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004634:	23ff      	movs	r3, #255	; 0xff
 8004636:	6162      	str	r2, [r4, #20]
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 8004638:	f504 6e4a 	add.w	lr, r4, #3232	; 0xca0
 800463c:	f604 42b8 	addw	r2, r4, #3256	; 0xcb8
    while (i--)
 8004640:	469a      	mov	sl, r3
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 8004642:	46b1      	mov	r9, r6
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800464c:	f04f 0c00 	mov.w	ip, #0
    while (i--)
 8004650:	f10a 3aff 	add.w	sl, sl, #4294967295
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 8004654:	f802 cc08 	strb.w	ip, [r2, #-8]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 8004658:	f802 cc07 	strb.w	ip, [r2, #-7]
    while (i--)
 800465c:	f1ba 3fff 	cmp.w	sl, #4294967295
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 8004660:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 8004662:	f842 9c18 	str.w	r9, [r2, #-24]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 8004666:	f842 2c04 	str.w	r2, [r2, #-4]
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800466a:	44b9      	add	r9, r7
 800466c:	f102 0218 	add.w	r2, r2, #24
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 8004670:	e942 010a 	strd	r0, r1, [r2, #-40]	; 0x28
    while (i--)
 8004674:	d1ec      	bne.n	8004650 <_fx_media_open+0x220>
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8004676:	3301      	adds	r3, #1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8004678:	6961      	ldr	r1, [r4, #20]
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800467a:	f109 32ff 	add.w	r2, r9, #4294967295
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800467e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8004682:	290f      	cmp	r1, #15
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8004684:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8004688:	f843 cc04 	str.w	ip, [r3, #-4]
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800468c:	e9c4 2e06 	strd	r2, lr, [r4, #24]
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 8004690:	e9c4 cc08 	strd	ip, ip, [r4, #32]
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8004694:	d906      	bls.n	80046a4 <_fx_media_open+0x274>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 8004696:	1e4b      	subs	r3, r1, #1
 8004698:	ea81 0203 	eor.w	r2, r1, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800469c:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800469e:	429a      	cmp	r2, r3
 80046a0:	f000 81cb 	beq.w	8004a3a <_fx_media_open+0x60a>
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 80046a4:	2200      	movs	r2, #0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	6122      	str	r2, [r4, #16]
 80046ac:	f604 0018 	addw	r0, r4, #2072	; 0x818
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	4649      	mov	r1, r9
 80046b4:	f8c4 9758 	str.w	r9, [r4, #1880]	; 0x758
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80046b8:	f8c4 975c 	str.w	r9, [r4, #1884]	; 0x75c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80046bc:	f8c4 9760 	str.w	r9, [r4, #1888]	; 0x760
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046c0:	f8c4 9764 	str.w	r9, [r4, #1892]	; 0x764
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80046c4:	f8c4 9768 	str.w	r9, [r4, #1896]	; 0x768
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80046c8:	f8c4 976c 	str.w	r9, [r4, #1900]	; 0x76c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046cc:	f8c4 9770 	str.w	r9, [r4, #1904]	; 0x770
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80046d0:	f8c4 9774 	str.w	r9, [r4, #1908]	; 0x774
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80046d4:	f8c4 9778 	str.w	r9, [r4, #1912]	; 0x778
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046d8:	f8c4 977c 	str.w	r9, [r4, #1916]	; 0x77c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80046dc:	f8c4 9780 	str.w	r9, [r4, #1920]	; 0x780
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80046e0:	f8c4 9784 	str.w	r9, [r4, #1924]	; 0x784
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046e4:	f8c4 9788 	str.w	r9, [r4, #1928]	; 0x788
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80046e8:	f8c4 978c 	str.w	r9, [r4, #1932]	; 0x78c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80046ec:	f8c4 9790 	str.w	r9, [r4, #1936]	; 0x790
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046f0:	f8c4 9794 	str.w	r9, [r4, #1940]	; 0x794
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 80046f4:	f8c4 9798 	str.w	r9, [r4, #1944]	; 0x798
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 80046f8:	f8c4 979c 	str.w	r9, [r4, #1948]	; 0x79c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80046fc:	f8c4 97a0 	str.w	r9, [r4, #1952]	; 0x7a0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004700:	f8c4 97a4 	str.w	r9, [r4, #1956]	; 0x7a4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004704:	f8c4 97a8 	str.w	r9, [r4, #1960]	; 0x7a8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004708:	f8c4 97ac 	str.w	r9, [r4, #1964]	; 0x7ac
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800470c:	f8c4 97b0 	str.w	r9, [r4, #1968]	; 0x7b0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004710:	f8c4 97b4 	str.w	r9, [r4, #1972]	; 0x7b4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004714:	f8c4 97b8 	str.w	r9, [r4, #1976]	; 0x7b8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004718:	f8c4 97bc 	str.w	r9, [r4, #1980]	; 0x7bc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800471c:	f8c4 97c0 	str.w	r9, [r4, #1984]	; 0x7c0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004720:	f8c4 97c4 	str.w	r9, [r4, #1988]	; 0x7c4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004724:	f8c4 97c8 	str.w	r9, [r4, #1992]	; 0x7c8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004728:	f8c4 97cc 	str.w	r9, [r4, #1996]	; 0x7cc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800472c:	f8c4 97d0 	str.w	r9, [r4, #2000]	; 0x7d0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004730:	f8c4 97d4 	str.w	r9, [r4, #2004]	; 0x7d4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004734:	f8c4 97d8 	str.w	r9, [r4, #2008]	; 0x7d8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004738:	f8c4 97dc 	str.w	r9, [r4, #2012]	; 0x7dc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800473c:	f8c4 97e0 	str.w	r9, [r4, #2016]	; 0x7e0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004740:	f8c4 97e4 	str.w	r9, [r4, #2020]	; 0x7e4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004744:	f8c4 97e8 	str.w	r9, [r4, #2024]	; 0x7e8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004748:	f8c4 97ec 	str.w	r9, [r4, #2028]	; 0x7ec
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800474c:	f8c4 97f0 	str.w	r9, [r4, #2032]	; 0x7f0
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004750:	f8c4 97f4 	str.w	r9, [r4, #2036]	; 0x7f4
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004754:	f8c4 97f8 	str.w	r9, [r4, #2040]	; 0x7f8
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004758:	f8c4 97fc 	str.w	r9, [r4, #2044]	; 0x7fc
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800475c:	f8c4 9800 	str.w	r9, [r4, #2048]	; 0x800
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8004760:	f8c4 9804 	str.w	r9, [r4, #2052]	; 0x804
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004764:	f8c4 9808 	str.w	r9, [r4, #2056]	; 0x808
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8004768:	f8c4 980c 	str.w	r9, [r4, #2060]	; 0x80c
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800476c:	f8c4 9810 	str.w	r9, [r4, #2064]	; 0x810
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8004770:	f8c4 9814 	str.w	r9, [r4, #2068]	; 0x814
 8004774:	f004 ff5b 	bl	800962e <memset>
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8004778:	6fa2      	ldr	r2, [r4, #120]	; 0x78
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800477a:	6c60      	ldr	r0, [r4, #68]	; 0x44
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800477c:	464b      	mov	r3, r9
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800477e:	eb07 1242 	add.w	r2, r7, r2, lsl #5
            (media_ptr -> fx_media_number_of_FATs *
 8004782:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                                                            media_ptr -> fx_media_sectors_per_cluster);
 8004784:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8004788:	f102 3cff 	add.w	ip, r2, #4294967295
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800478c:	6da2      	ldr	r2, [r4, #88]	; 0x58
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800478e:	fbbc f7f7 	udiv	r7, ip, r7
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8004792:	fb02 0101 	mla	r1, r2, r1, r0
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8004796:	4652      	mov	r2, sl
        media_ptr -> fx_media_root_sectors =
 8004798:	64e7      	str	r7, [r4, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800479a:	eb01 0b07 	add.w	fp, r1, r7
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800479e:	64a1      	str	r1, [r4, #72]	; 0x48
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80047a0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 80047a4:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80047a8:	ebb0 000b 	subs.w	r0, r0, fp
 80047ac:	f161 0100 	sbc.w	r1, r1, #0
 80047b0:	f7fb fe5a 	bl	8000468 <__aeabi_uldivmod>
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 80047b4:	f640 73f5 	movw	r3, #4085	; 0xff5
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 80047b8:	6420      	str	r0, [r4, #64]	; 0x40
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 80047ba:	4298      	cmp	r0, r3
 80047bc:	f200 80b8 	bhi.w	8004930 <_fx_media_open+0x500>
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 80047c0:	2201      	movs	r2, #1
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 80047c2:	f242 41a8 	movw	r1, #9384	; 0x24a8
 80047c6:	f64f 70f0 	movw	r0, #65520	; 0xfff0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 80047ca:	f242 43ac 	movw	r3, #9388	; 0x24ac
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 80047ce:	6622      	str	r2, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 80047d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 80047d4:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 80047d8:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 80047dc:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 80047de:	50e2      	str	r2, [r4, r3]
    media_ptr -> fx_media_available_clusters =  0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	67e3      	str	r3, [r4, #124]	; 0x7c
    media_ptr -> fx_media_cluster_search_start =  0;
 80047e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (media_ptr -> fx_media_12_bit_FAT)
 80047e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 80b3 	bne.w	8004956 <_fx_media_open+0x526>
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 80047f0:	2101      	movs	r1, #1
 80047f2:	2300      	movs	r3, #0
 80047f4:	2201      	movs	r2, #1
 80047f6:	4620      	mov	r0, r4
 80047f8:	9102      	str	r1, [sp, #8]
 80047fa:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 80047fe:	e9cd 8900 	strd	r8, r9, [sp]
 8004802:	f000 fda3 	bl	800534c <_fx_utility_logical_sector_flush>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8004806:	6da3      	ldr	r3, [r4, #88]	; 0x58
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 8004808:	60a6      	str	r6, [r4, #8]
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800480a:	2b00      	cmp	r3, #0
 800480c:	d051      	beq.n	80048b2 <_fx_media_open+0x482>
 800480e:	2700      	movs	r7, #0
 8004810:	6960      	ldr	r0, [r4, #20]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004812:	f04f 0890 	mov.w	r8, #144	; 0x90
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8004816:	f04f 0902 	mov.w	r9, #2
        cluster_number =  0;
 800481a:	463e      	mov	r6, r7
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800481c:	46ba      	mov	sl, r7
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800481e:	1bd9      	subs	r1, r3, r7
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8004820:	6c62      	ldr	r2, [r4, #68]	; 0x44
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	4281      	cmp	r1, r0
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8004826:	443a      	add	r2, r7
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8004828:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 800482c:	bf28      	it	cs
 800482e:	4601      	movcs	r1, r0
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004830:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004834:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8004836:	f8c4 90b8 	str.w	r9, [r4, #184]	; 0xb8
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800483a:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 800483e:	468b      	mov	fp, r1
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8004840:	e9c4 3224 	strd	r3, r2, [r4, #144]	; 0x90
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004844:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004848:	4798      	blx	r3
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800484a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 80fe 	bne.w	8004a50 <_fx_media_open+0x620>
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 8004854:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004856:	fb00 f00b 	mul.w	r0, r0, fp
            for (j = 0; j < bytes_in_buffer;)
 800485a:	2800      	cmp	r0, #0
 800485c:	f000 80eb 	beq.w	8004a36 <_fx_media_open+0x606>
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8004860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004864:	f103 0c02 	add.w	ip, r3, #2
 8004868:	68a1      	ldr	r1, [r4, #8]
 800486a:	2a00      	cmp	r2, #0
 800486c:	f040 80cd 	bne.w	8004a0a <_fx_media_open+0x5da>
            for (j = 0; j < bytes_in_buffer;)
 8004870:	4696      	mov	lr, r2
 8004872:	e002      	b.n	800487a <_fx_media_open+0x44a>
 8004874:	4570      	cmp	r0, lr
 8004876:	f240 80de 	bls.w	8004a36 <_fx_media_open+0x606>
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800487a:	eb01 020e 	add.w	r2, r1, lr
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800487e:	f811 300e 	ldrb.w	r3, [r1, lr]
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 8004882:	f10e 0e02 	add.w	lr, lr, #2
 8004886:	7852      	ldrb	r2, [r2, #1]
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8004888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800488c:	9305      	str	r3, [sp, #20]
                if (FAT_entry == FX_FREE_CLUSTER)
 800488e:	b93b      	cbnz	r3, 80048a0 <_fx_media_open+0x470>
                    media_ptr -> fx_media_available_clusters++;
 8004890:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8004892:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    media_ptr -> fx_media_available_clusters++;
 8004896:	3301      	adds	r3, #1
 8004898:	67e3      	str	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800489a:	b90a      	cbnz	r2, 80048a0 <_fx_media_open+0x470>
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800489c:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
                cluster_number++;
 80048a0:	3601      	adds	r6, #1
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80048a2:	45b4      	cmp	ip, r6
 80048a4:	d8e6      	bhi.n	8004874 <_fx_media_open+0x444>
                    i = media_ptr -> fx_media_sectors_per_FAT;
 80048a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048a8:	461f      	mov	r7, r3
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 80048aa:	6960      	ldr	r0, [r4, #20]
 80048ac:	4407      	add	r7, r0
 80048ae:	42bb      	cmp	r3, r7
 80048b0:	d8b5      	bhi.n	800481e <_fx_media_open+0x3ee>
    if (media_ptr -> fx_media_cluster_search_start == 0)
 80048b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80048b6:	b913      	cbnz	r3, 80048be <_fx_media_open+0x48e>
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 80048b8:	2302      	movs	r3, #2
 80048ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 80048be:	2300      	movs	r3, #0
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 80048c0:	f504 62ca 	add.w	r2, r4, #1616	; 0x650
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 80048c4:	499d      	ldr	r1, [pc, #628]	; (8004b3c <_fx_media_open+0x70c>)
 80048c6:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 80048ca:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 80048ce:	461a      	mov	r2, r3
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 80048d0:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 80048d4:	f884 3650 	strb.w	r3, [r4, #1616]	; 0x650
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 80048d8:	f884 3550 	strb.w	r3, [r4, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 80048dc:	f884 364f 	strb.w	r3, [r4, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 80048e0:	f8c4 3750 	str.w	r3, [r4, #1872]	; 0x750
    media_ptr -> fx_media_last_found_name[0] =  0;
 80048e4:	f884 33e0 	strb.w	r3, [r4, #992]	; 0x3e0
    media_ptr -> fx_media_opened_file_count =     0;
 80048e8:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 80048ec:	f003 fd92 	bl	8008414 <_tx_mutex_create>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80048f0:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80048f4:	b672      	cpsid	i
    if (_fx_system_media_opened_ptr)
 80048f6:	4a92      	ldr	r2, [pc, #584]	; (8004b40 <_fx_media_open+0x710>)
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 80048f8:	4992      	ldr	r1, [pc, #584]	; (8004b44 <_fx_media_open+0x714>)
    if (_fx_system_media_opened_ptr)
 80048fa:	6813      	ldr	r3, [r2, #0]
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 80048fc:	6021      	str	r1, [r4, #0]
    if (_fx_system_media_opened_ptr)
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a2 	beq.w	8004a48 <_fx_media_open+0x618>
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 8004904:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 8004908:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800490c:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 8004910:	e9c4 3234 	strd	r3, r2, [r4, #208]	; 0xd0
    _fx_system_media_opened_count++;
 8004914:	498c      	ldr	r1, [pc, #560]	; (8004b48 <_fx_media_open+0x718>)
    if (media_ptr -> fx_media_open_notify)
 8004916:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    _fx_system_media_opened_count++;
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	600b      	str	r3, [r1, #0]
    if (media_ptr -> fx_media_open_notify)
 8004920:	b10a      	cbz	r2, 8004926 <_fx_media_open+0x4f6>
        media_ptr -> fx_media_open_notify(media_ptr);
 8004922:	4620      	mov	r0, r4
 8004924:	4790      	blx	r2
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004926:	f386 8810 	msr	PRIMASK, r6
    return(FX_SUCCESS);
 800492a:	e643      	b.n	80045b4 <_fx_media_open+0x184>
 800492c:	3b01      	subs	r3, #1
 800492e:	e683      	b.n	8004638 <_fx_media_open+0x208>
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 8004930:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8004934:	4298      	cmp	r0, r3
 8004936:	d837      	bhi.n	80049a8 <_fx_media_open+0x578>
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8004938:	f242 41a8 	movw	r1, #9384	; 0x24a8
 800493c:	f64f 70f0 	movw	r0, #65520	; 0xfff0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8004940:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8004944:	f64f 72ff 	movw	r2, #65535	; 0xffff
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8004948:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800494c:	e9c4 9918 	strd	r9, r9, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8004950:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8004952:	50e2      	str	r2, [r4, r3]
 8004954:	e744      	b.n	80047e0 <_fx_media_open+0x3b0>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8004956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004958:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800495a:	2b02      	cmp	r3, #2
 800495c:	d9a9      	bls.n	80048b2 <_fx_media_open+0x482>
 800495e:	2602      	movs	r6, #2
 8004960:	af05      	add	r7, sp, #20
 8004962:	e00e      	b.n	8004982 <_fx_media_open+0x552>
            if (FAT_entry == FX_FREE_CLUSTER)
 8004964:	9b05      	ldr	r3, [sp, #20]
 8004966:	b93b      	cbnz	r3, 8004978 <_fx_media_open+0x548>
                media_ptr -> fx_media_available_clusters++;
 8004968:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800496a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                media_ptr -> fx_media_available_clusters++;
 800496e:	3301      	adds	r3, #1
 8004970:	67e3      	str	r3, [r4, #124]	; 0x7c
                if (media_ptr -> fx_media_cluster_search_start == 0)
 8004972:	b90a      	cbnz	r2, 8004978 <_fx_media_open+0x548>
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8004974:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8004978:	6c23      	ldr	r3, [r4, #64]	; 0x40
             cluster_number++)
 800497a:	3601      	adds	r6, #1
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800497c:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800497e:	42b3      	cmp	r3, r6
 8004980:	d997      	bls.n	80048b2 <_fx_media_open+0x482>
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8004982:	463a      	mov	r2, r7
 8004984:	4631      	mov	r1, r6
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f900 	bl	8004b8c <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 800498c:	2800      	cmp	r0, #0
 800498e:	d0e9      	beq.n	8004964 <_fx_media_open+0x534>
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8004990:	2108      	movs	r1, #8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8004992:	2290      	movs	r2, #144	; 0x90
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004994:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004998:	4620      	mov	r0, r4
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800499a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
                return(FX_FAT_READ_ERROR);
 800499e:	2503      	movs	r5, #3
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80049a0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80049a4:	4798      	blx	r3
                return(FX_FAT_READ_ERROR);
 80049a6:	e605      	b.n	80045b4 <_fx_media_open+0x184>
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 80049a8:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 80049ac:	2201      	movs	r2, #1
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 80049ae:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 80049b2:	f242 43a8 	movw	r3, #9384	; 0x24a8
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 80049b6:	6662      	str	r2, [r4, #100]	; 0x64
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 80049b8:	f242 41ac 	movw	r1, #9388	; 0x24ac
 80049bc:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 80049c0:	4a62      	ldr	r2, [pc, #392]	; (8004b4c <_fx_media_open+0x71c>)
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 80049c2:	f1b8 0f01 	cmp.w	r8, #1
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 80049c6:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 80049ca:	5060      	str	r0, [r4, r1]
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 80049cc:	50e2      	str	r2, [r4, r3]
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 80049ce:	f240 80b3 	bls.w	8004b38 <_fx_media_open+0x708>
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 80049d2:	f1a8 0302 	sub.w	r3, r8, #2
 80049d6:	af05      	add	r7, sp, #20
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 80049d8:	fb0a b303 	mla	r3, sl, r3, fp
            if (FAT_entry >= FX_RESERVED_1_32)
 80049dc:	f8df a178 	ldr.w	sl, [pc, #376]	; 8004b58 <_fx_media_open+0x728>
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 80049e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80049e2:	e008      	b.n	80049f6 <_fx_media_open+0x5c6>
            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 80049e4:	9b05      	ldr	r3, [sp, #20]
 80049e6:	4543      	cmp	r3, r8
 80049e8:	4698      	mov	r8, r3
 80049ea:	d0d1      	beq.n	8004990 <_fx_media_open+0x560>
 80049ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049ee:	454b      	cmp	r3, r9
 80049f0:	d3ce      	bcc.n	8004990 <_fx_media_open+0x560>
            if (FAT_entry >= FX_RESERVED_1_32)
 80049f2:	45d0      	cmp	r8, sl
 80049f4:	d837      	bhi.n	8004a66 <_fx_media_open+0x636>
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 80049f6:	463a      	mov	r2, r7
 80049f8:	4641      	mov	r1, r8
 80049fa:	4620      	mov	r0, r4
            i++;
 80049fc:	f109 0901 	add.w	r9, r9, #1
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8004a00:	f000 f8c4 	bl	8004b8c <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d0ed      	beq.n	80049e4 <_fx_media_open+0x5b4>
 8004a08:	e7c2      	b.n	8004990 <_fx_media_open+0x560>
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8004a0a:	468e      	mov	lr, r1
 8004a0c:	e001      	b.n	8004a12 <_fx_media_open+0x5e2>
            for (j = 0; j < bytes_in_buffer;)
 8004a0e:	4558      	cmp	r0, fp
 8004a10:	d911      	bls.n	8004a36 <_fx_media_open+0x606>
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 8004a12:	f85e 3b04 	ldr.w	r3, [lr], #4
            for (j = 0; j < bytes_in_buffer;)
 8004a16:	ebae 0b01 	sub.w	fp, lr, r1
 8004a1a:	9305      	str	r3, [sp, #20]
                if (FAT_entry == FX_FREE_CLUSTER)
 8004a1c:	b93b      	cbnz	r3, 8004a2e <_fx_media_open+0x5fe>
                    media_ptr -> fx_media_available_clusters++;
 8004a1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8004a20:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    media_ptr -> fx_media_available_clusters++;
 8004a24:	3301      	adds	r3, #1
 8004a26:	67e3      	str	r3, [r4, #124]	; 0x7c
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8004a28:	b90a      	cbnz	r2, 8004a2e <_fx_media_open+0x5fe>
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8004a2a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
                cluster_number++;
 8004a2e:	3601      	adds	r6, #1
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8004a30:	45b4      	cmp	ip, r6
 8004a32:	d8ec      	bhi.n	8004a0e <_fx_media_open+0x5de>
 8004a34:	e737      	b.n	80048a6 <_fx_media_open+0x476>
 8004a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a38:	e737      	b.n	80048aa <_fx_media_open+0x47a>
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8004a3a:	088b      	lsrs	r3, r1, #2
        media_ptr -> fx_media_sector_cache_hash_mask =
 8004a3c:	f242 41a0 	movw	r1, #9376	; 0x24a0
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 8004a40:	2201      	movs	r2, #1
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8004a42:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 8004a44:	5063      	str	r3, [r4, r1]
 8004a46:	e62e      	b.n	80046a6 <_fx_media_open+0x276>
        _fx_system_media_opened_ptr =           media_ptr;
 8004a48:	6014      	str	r4, [r2, #0]
        media_ptr -> fx_media_opened_previous = media_ptr;
 8004a4a:	e9c4 4434 	strd	r4, r4, [r4, #208]	; 0xd0
 8004a4e:	e761      	b.n	8004914 <_fx_media_open+0x4e4>
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8004a50:	2208      	movs	r2, #8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8004a52:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004a56:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004a5a:	4620      	mov	r0, r4
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8004a5c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
                return(FX_FAT_READ_ERROR);
 8004a60:	2503      	movs	r5, #3
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004a62:	4798      	blx	r3
                return(FX_FAT_READ_ERROR);
 8004a64:	e5a6      	b.n	80045b4 <_fx_media_open+0x184>
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8004a66:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    media_ptr -> fx_media_available_clusters =  0;
 8004a6a:	67e0      	str	r0, [r4, #124]	; 0x7c
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8004a6c:	fb03 f302 	mul.w	r3, r3, r2
 8004a70:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    media_ptr -> fx_media_cluster_search_start =  0;
 8004a72:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8004a76:	fb09 f903 	mul.w	r9, r9, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8004a7a:	ea4f 1359 	mov.w	r3, r9, lsr #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8004a7e:	67a3      	str	r3, [r4, #120]	; 0x78
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	f43f aeb1 	beq.w	80047e8 <_fx_media_open+0x3b8>
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8004a86:	69e2      	ldr	r2, [r4, #28]
        media_ptr -> fx_media_driver_sectors =          1;
 8004a88:	2101      	movs	r1, #1
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 8004a8a:	f04f 38ff 	mov.w	r8, #4294967295
 8004a8e:	f04f 39ff 	mov.w	r9, #4294967295
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8004a92:	7450      	strb	r0, [r2, #17]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004a94:	2790      	movs	r7, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 8004a96:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 8004a9a:	e9c2 8902 	strd	r8, r9, [r2, #8]
        media_ptr -> fx_media_driver_read_requests++;
 8004a9e:	440b      	add	r3, r1
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8004aa0:	6812      	ldr	r2, [r2, #0]
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8004aa2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004aa6:	4620      	mov	r0, r4
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8004aa8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8004aac:	2203      	movs	r2, #3
        media_ptr -> fx_media_driver_read_requests++;
 8004aae:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8004ab2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004ab4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8004ab8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8004abc:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004ac0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8004ac4:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8004ac8:	4798      	blx	r3
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8004aca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004ace:	b153      	cbz	r3, 8004ae6 <_fx_media_open+0x6b6>
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	66a3      	str	r3, [r4, #104]	; 0x68
    if (media_ptr -> fx_media_12_bit_FAT)
 8004ad4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f47f af3d 	bne.w	8004956 <_fx_media_open+0x526>
    else if (media_ptr -> fx_media_available_clusters == 0)
 8004adc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f47f aee7 	bne.w	80048b2 <_fx_media_open+0x482>
 8004ae4:	e684      	b.n	80047f0 <_fx_media_open+0x3c0>
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8004ae6:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8004aea:	4638      	mov	r0, r7
 8004aec:	f000 f83a 	bl	8004b64 <_fx_utility_32_unsigned_read>
            if (signature == 0x41615252)
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <_fx_media_open+0x720>)
 8004af2:	4298      	cmp	r0, r3
 8004af4:	d1ec      	bne.n	8004ad0 <_fx_media_open+0x6a0>
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8004af6:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 8004afa:	f000 f833 	bl	8004b64 <_fx_utility_32_unsigned_read>
                if (signature == 0x61417272)
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <_fx_media_open+0x724>)
 8004b00:	4298      	cmp	r0, r3
 8004b02:	d1e5      	bne.n	8004ad0 <_fx_media_open+0x6a0>
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 8004b04:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8004b08:	f000 f82c 	bl	8004b64 <_fx_utility_32_unsigned_read>
 8004b0c:	4603      	mov	r3, r0
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8004b0e:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 8004b12:	67e3      	str	r3, [r4, #124]	; 0x7c
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8004b14:	66e3      	str	r3, [r4, #108]	; 0x6c
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8004b16:	f000 f825 	bl	8004b64 <_fx_utility_32_unsigned_read>
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8004b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b1c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8004b1e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	f63f ae5c 	bhi.w	80047e0 <_fx_media_open+0x3b0>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8004b28:	3302      	adds	r3, #2
 8004b2a:	4298      	cmp	r0, r3
 8004b2c:	f63f ae58 	bhi.w	80047e0 <_fx_media_open+0x3b0>
 8004b30:	2801      	cmp	r0, #1
 8004b32:	f67f ae55 	bls.w	80047e0 <_fx_media_open+0x3b0>
 8004b36:	e7cd      	b.n	8004ad4 <_fx_media_open+0x6a4>
                return(FX_MEDIA_INVALID);
 8004b38:	2502      	movs	r5, #2
 8004b3a:	e53b      	b.n	80045b4 <_fx_media_open+0x184>
 8004b3c:	080096f0 	.word	0x080096f0
 8004b40:	20002bd0 	.word	0x20002bd0
 8004b44:	4d454449 	.word	0x4d454449
 8004b48:	20002bc8 	.word	0x20002bc8
 8004b4c:	0ffffff0 	.word	0x0ffffff0
 8004b50:	41615252 	.word	0x41615252
 8004b54:	61417272 	.word	0x61417272
 8004b58:	0fffffef 	.word	0x0fffffef

08004b5c <_fx_utility_16_unsigned_write>:
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8004b5c:	0a0b      	lsrs	r3, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8004b5e:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8004b60:	7043      	strb	r3, [r0, #1]
}
 8004b62:	4770      	bx	lr

08004b64 <_fx_utility_32_unsigned_read>:
{

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8004b64:	7803      	ldrb	r3, [r0, #0]
 8004b66:	7841      	ldrb	r1, [r0, #1]
 8004b68:	7882      	ldrb	r2, [r0, #2]
 8004b6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b6e:	78c0      	ldrb	r0, [r0, #3]
 8004b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
              (((ULONG) *(source_ptr)) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8004b74:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop

08004b7c <_fx_utility_32_unsigned_write>:
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8004b7c:	0a0a      	lsrs	r2, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8004b7e:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8004b80:	0c0b      	lsrs	r3, r1, #16
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8004b82:	0e09      	lsrs	r1, r1, #24
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8004b84:	7042      	strb	r2, [r0, #1]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8004b86:	7083      	strb	r3, [r0, #2]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8004b88:	70c1      	strb	r1, [r0, #3]
}
 8004b8a:	4770      	bx	lr

08004b8c <_fx_utility_FAT_entry_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 8004b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8004b90:	f001 0403 	and.w	r4, r1, #3
    media_ptr -> fx_media_fat_entry_reads++;
 8004b94:	f8d0 6178 	ldr.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8004b98:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
{
 8004b9c:	b089      	sub	sp, #36	; 0x24
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8004b9e:	00a7      	lsls	r7, r4, #2
    media_ptr -> fx_media_fat_entry_reads++;
 8004ba0:	3601      	adds	r6, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8004ba2:	3301      	adds	r3, #1
    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];

    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8004ba4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    media_ptr -> fx_media_fat_entry_reads++;
 8004ba8:	f8c0 6178 	str.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8004bac:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8004bb0:	00a4      	lsls	r4, r4, #2
 8004bb2:	eb00 0c04 	add.w	ip, r0, r4
 8004bb6:	f8dc 6758 	ldr.w	r6, [ip, #1880]	; 0x758
 8004bba:	428e      	cmp	r6, r1
 8004bbc:	d05f      	beq.n	8004c7e <_fx_utility_FAT_entry_read+0xf2>
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8004bbe:	f504 64eb 	add.w	r4, r4, #1880	; 0x758
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	f50c 6eeb 	add.w	lr, ip, #1880	; 0x758
 8004bc8:	4404      	add	r4, r0
        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 8004bca:	68e6      	ldr	r6, [r4, #12]
 8004bcc:	428e      	cmp	r6, r1
 8004bce:	d041      	beq.n	8004c54 <_fx_utility_FAT_entry_read+0xc8>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8004bd0:	69a6      	ldr	r6, [r4, #24]
 8004bd2:	428e      	cmp	r6, r1
 8004bd4:	d063      	beq.n	8004c9e <_fx_utility_FAT_entry_read+0x112>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 8004bd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bd8:	428e      	cmp	r6, r1
 8004bda:	d07b      	beq.n	8004cd4 <_fx_utility_FAT_entry_read+0x148>
 8004bdc:	4690      	mov	r8, r2
        return(FX_SUCCESS);
    }

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8004bde:	1cfa      	adds	r2, r7, #3
 8004be0:	460e      	mov	r6, r1
 8004be2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004be6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004bea:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	d14d      	bne.n	8004c8e <_fx_utility_FAT_entry_read+0x102>

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8004bf2:	f8d5 1184 	ldr.w	r1, [r5, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8004bf6:	1e5a      	subs	r2, r3, #1
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8004bf8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8004bfa:	3101      	adds	r1, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8004bfc:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
 8004c00:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8004c04:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
 8004c08:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004c0a:	68a8      	ldr	r0, [r5, #8]
    if (media_ptr -> fx_media_12_bit_FAT)
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 809d 	bne.w	8004d4c <_fx_utility_FAT_entry_read+0x1c0>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8004c12:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d17e      	bne.n	8004d16 <_fx_utility_FAT_entry_read+0x18a>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8004c18:	ea4f 0a46 	mov.w	sl, r6, lsl #1
        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
            (ULONG)media_ptr -> fx_media_reserved_sectors;

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	9000      	str	r0, [sp, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	2002      	movs	r0, #2
 8004c24:	9101      	str	r1, [sp, #4]
 8004c26:	9002      	str	r0, [sp, #8]
 8004c28:	4628      	mov	r0, r5
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8004c2a:	fbba f9f9 	udiv	r9, sl, r9
 8004c2e:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004c30:	464a      	mov	r2, r9
 8004c32:	f000 feaf 	bl	8005994 <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8004c36:	4603      	mov	r3, r0
 8004c38:	b9e8      	cbnz	r0, 8004c76 <_fx_utility_FAT_entry_read+0xea>
            return(status);
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8004c3a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004c3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c3e:	eba9 0902 	sub.w	r9, r9, r2
             media_ptr -> fx_media_bytes_per_sector);

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8004c42:	68a8      	ldr	r0, [r5, #8]
        byte_offset =  byte_offset -
 8004c44:	fb03 aa19 	mls	sl, r3, r9, sl

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8004c48:	4450      	add	r0, sl
 8004c4a:	f7fd fea3 	bl	8002994 <_fx_utility_16_unsigned_read>

        *entry_ptr =  entry;
 8004c4e:	f8c8 0000 	str.w	r0, [r8]
 8004c52:	e0b2      	b.n	8004dba <_fx_utility_FAT_entry_read+0x22e>
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8004c54:	6921      	ldr	r1, [r4, #16]
        temp_cache_entry =        *(cache_entry_ptr);
 8004c56:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8004c58:	340c      	adds	r4, #12
        return(FX_SUCCESS);
 8004c5a:	2300      	movs	r3, #0
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8004c5c:	6011      	str	r1, [r2, #0]
        temp_cache_entry =        *(cache_entry_ptr);
 8004c5e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004c62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8004c66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c6a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8004c6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	b009      	add	sp, #36	; 0x24
 8004c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_SUCCESS);
 8004c7e:	2300      	movs	r3, #0
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8004c80:	f8dc 175c 	ldr.w	r1, [ip, #1884]	; 0x75c
}
 8004c84:	4618      	mov	r0, r3
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8004c86:	6011      	str	r1, [r2, #0]
}
 8004c88:	b009      	add	sp, #36	; 0x24
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status = _fx_utility_FAT_flush(media_ptr);
 8004c8e:	f000 f967 	bl	8004f60 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 8004c92:	4603      	mov	r3, r0
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d1ee      	bne.n	8004c76 <_fx_utility_FAT_entry_read+0xea>
 8004c98:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 8004c9c:	e7a9      	b.n	8004bf2 <_fx_utility_FAT_entry_read+0x66>
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8004c9e:	69e3      	ldr	r3, [r4, #28]
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8004ca0:	f104 0718 	add.w	r7, r4, #24
        temp_cache_entry =        *(cache_entry_ptr);
 8004ca4:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004ca6:	340c      	adds	r4, #12
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8004ca8:	6013      	str	r3, [r2, #0]
        return(FX_SUCCESS);
 8004caa:	2300      	movs	r3, #0
        temp_cache_entry =        *(cache_entry_ptr);
 8004cac:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004cb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8004cb4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004cb8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004cbc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004cc0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8004cc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	b009      	add	sp, #36	; 0x24
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8004cd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        temp_cache_entry =        *(cache_entry_ptr);
 8004cd6:	ab05      	add	r3, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8004cd8:	f104 0724 	add.w	r7, r4, #36	; 0x24
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004cdc:	f104 0518 	add.w	r5, r4, #24
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8004ce0:	6011      	str	r1, [r2, #0]
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004ce2:	340c      	adds	r4, #12
        temp_cache_entry =        *(cache_entry_ptr);
 8004ce4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004ce8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8004cec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004cf0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004cf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cf8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004cfc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004d00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8004d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
        return(FX_SUCCESS);
 8004d08:	2300      	movs	r3, #0
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8004d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	b009      	add	sp, #36	; 0x24
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byte_offset =  (((ULONG)cluster) * 4);
 8004d16:	ea4f 0a86 	mov.w	sl, r6, lsl #2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004d1a:	f04f 0c02 	mov.w	ip, #2
 8004d1e:	2101      	movs	r1, #1
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8004d20:	fbba fbf9 	udiv	fp, sl, r9
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004d24:	e88d 1003 	stmia.w	sp, {r0, r1, ip}
 8004d28:	445a      	add	r2, fp
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fe32 	bl	8005994 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 8004d30:	4603      	mov	r3, r0
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d19f      	bne.n	8004c76 <_fx_utility_FAT_entry_read+0xea>
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8004d36:	68a8      	ldr	r0, [r5, #8]
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8004d38:	fb09 a91b 	mls	r9, r9, fp, sl
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 8004d3c:	4448      	add	r0, r9
 8004d3e:	f7ff ff11 	bl	8004b64 <_fx_utility_32_unsigned_read>
            entry32 = entry32 & 0x0FFFFFFF;
 8004d42:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
        *entry_ptr =  entry32;
 8004d46:	f8c8 0000 	str.w	r0, [r8]
 8004d4a:	e036      	b.n	8004dba <_fx_utility_FAT_entry_read+0x22e>
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004d4c:	f04f 0b01 	mov.w	fp, #1
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8004d50:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004d54:	2302      	movs	r3, #2
 8004d56:	9000      	str	r0, [sp, #0]
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8004d58:	fa2a fa0b 	lsr.w	sl, sl, fp
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004d5c:	f8cd b004 	str.w	fp, [sp, #4]
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	4628      	mov	r0, r5
 8004d64:	2300      	movs	r3, #0
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8004d66:	fbba f9f9 	udiv	r9, sl, r9
 8004d6a:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004d6c:	464a      	mov	r2, r9
 8004d6e:	f000 fe11 	bl	8005994 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 8004d72:	4603      	mov	r3, r0
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f47f af7e 	bne.w	8004c76 <_fx_utility_FAT_entry_read+0xea>
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8004d7a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
             media_ptr -> fx_media_bytes_per_sector);
 8004d7c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8004d7e:	eba9 0202 	sub.w	r2, r9, r2
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8004d82:	68a8      	ldr	r0, [r5, #8]
 8004d84:	f101 3cff 	add.w	ip, r1, #4294967295
        byte_offset =  byte_offset -
 8004d88:	fb01 a212 	mls	r2, r1, r2, sl
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8004d8c:	eb00 0e02 	add.w	lr, r0, r2
 8004d90:	f810 a002 	ldrb.w	sl, [r0, r2]
 8004d94:	eb0e 010b 	add.w	r1, lr, fp
        if (cluster & 1)
 8004d98:	ea16 0e0b 	ands.w	lr, r6, fp
 8004d9c:	d02c      	beq.n	8004df8 <_fx_utility_FAT_entry_read+0x26c>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8004d9e:	4562      	cmp	r2, ip
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8004da0:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8004da4:	d031      	beq.n	8004e0a <_fx_utility_FAT_entry_read+0x27e>
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 8004da6:	780b      	ldrb	r3, [r1, #0]
 8004da8:	ea4a 1303 	orr.w	r3, sl, r3, lsl #4
        if (entry >= FX_MAX_12BIT_CLUST)
 8004dac:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
            entry =  entry | FX_SIGN_EXTEND;
 8004db0:	bf28      	it	cs
 8004db2:	f443 4370 	orrcs.w	r3, r3, #61440	; 0xf000
        *entry_ptr =  entry;
 8004db6:	f8c8 3000 	str.w	r3, [r8]
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004dba:	f104 0c18 	add.w	ip, r4, #24
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004dbe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004dc2:	f104 0e24 	add.w	lr, r4, #36	; 0x24
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004dc6:	340c      	adds	r4, #12
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004dc8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    return(FX_SUCCESS);
 8004dcc:	2300      	movs	r3, #0
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004dce:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004dd2:	f505 67eb 	add.w	r7, r5, #1880	; 0x758
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004dd6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004dda:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004dde:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004de2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8004dea:	f8c5 6758 	str.w	r6, [r5, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 8004dee:	f8d8 2000 	ldr.w	r2, [r8]
 8004df2:	f8c5 275c 	str.w	r2, [r5, #1884]	; 0x75c
    return(FX_SUCCESS);
 8004df6:	e73e      	b.n	8004c76 <_fx_utility_FAT_entry_read+0xea>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8004df8:	4562      	cmp	r2, ip
 8004dfa:	d015      	beq.n	8004e28 <_fx_utility_FAT_entry_read+0x29c>
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 8004dfc:	780b      	ldrb	r3, [r1, #0]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e04:	ea43 030a 	orr.w	r3, r3, sl
 8004e08:	e7d0      	b.n	8004dac <_fx_utility_FAT_entry_read+0x220>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	e9cd 0b00 	strd	r0, fp, [sp]
 8004e10:	9202      	str	r2, [sp, #8]
 8004e12:	4628      	mov	r0, r5
 8004e14:	eb09 020b 	add.w	r2, r9, fp
 8004e18:	f000 fdbc 	bl	8005994 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	f47f af29 	bne.w	8004c76 <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8004e24:	68a9      	ldr	r1, [r5, #8]
 8004e26:	e7be      	b.n	8004da6 <_fx_utility_FAT_entry_read+0x21a>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004e28:	2302      	movs	r3, #2
 8004e2a:	9000      	str	r0, [sp, #0]
 8004e2c:	f109 0201 	add.w	r2, r9, #1
 8004e30:	f8cd b004 	str.w	fp, [sp, #4]
 8004e34:	9302      	str	r3, [sp, #8]
 8004e36:	4628      	mov	r0, r5
 8004e38:	4673      	mov	r3, lr
 8004e3a:	f000 fdab 	bl	8005994 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f47f af18 	bne.w	8004c76 <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8004e46:	68a9      	ldr	r1, [r5, #8]
 8004e48:	e7d8      	b.n	8004dfc <_fx_utility_FAT_entry_read+0x270>
 8004e4a:	bf00      	nop

08004e4c <_fx_utility_FAT_entry_write>:

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8004e4c:	f001 0303 	and.w	r3, r1, #3
{
 8004e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8004e54:	009e      	lsls	r6, r3, #2
{
 8004e56:	4691      	mov	r9, r2
    media_ptr -> fx_media_fat_entry_writes++;
 8004e58:	f8d0 217c 	ldr.w	r2, [r0, #380]	; 0x17c
{
 8004e5c:	460f      	mov	r7, r1

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8004e5e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8004e62:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_writes++;
 8004e66:	3201      	adds	r2, #1
{
 8004e68:	4605      	mov	r5, r0
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8004e6a:	009b      	lsls	r3, r3, #2
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8004e6c:	1c4c      	adds	r4, r1, #1
    media_ptr -> fx_media_fat_entry_writes++;
 8004e6e:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8004e72:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8004e76:	f8c0 4188 	str.w	r4, [r0, #392]	; 0x188
    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8004e7a:	58c2      	ldr	r2, [r0, r3]
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8004e7c:	4403      	add	r3, r0
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8004e7e:	4297      	cmp	r7, r2
 8004e80:	d058      	beq.n	8004f34 <_fx_utility_FAT_entry_write+0xe8>
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	f103 080c 	add.w	r8, r3, #12
 8004e88:	4297      	cmp	r7, r2
 8004e8a:	d064      	beq.n	8004f56 <_fx_utility_FAT_entry_write+0x10a>
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	f103 0a18 	add.w	sl, r3, #24
 8004e92:	4297      	cmp	r7, r2
 8004e94:	d04d      	beq.n	8004f32 <_fx_utility_FAT_entry_write+0xe6>
 8004e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e98:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004e9c:	42ba      	cmp	r2, r7
 8004e9e:	d05c      	beq.n	8004f5a <_fx_utility_FAT_entry_write+0x10e>
    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8004ea0:	1cf2      	adds	r2, r6, #3
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8004ea2:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8004ea6:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8004eaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8004eae:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8004eb0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8004eb4:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8004eb8:	f8d2 3760 	ldr.w	r3, [r2, #1888]	; 0x760
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d045      	beq.n	8004f4c <_fx_utility_FAT_entry_write+0x100>
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004ec0:	eb06 0646 	add.w	r6, r6, r6, lsl #1

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8004ec4:	f04f 0c01 	mov.w	ip, #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004ec8:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004ecc:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8004ed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004ed4:	f506 63eb 	add.w	r3, r6, #1880	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8004ed8:	f8d5 40ac 	ldr.w	r4, [r5, #172]	; 0xac
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8004edc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004ee0:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8004ee4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ee8:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8004eec:	f8c6 7758 	str.w	r7, [r6, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8004ef0:	f8c6 975c 	str.w	r9, [r6, #1884]	; 0x75c
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8004ef4:	f8c6 c760 	str.w	ip, [r6, #1888]	; 0x760
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8004ef8:	b1c4      	cbz	r4, 8004f2c <_fx_utility_FAT_entry_write+0xe0>
 8004efa:	f1b9 0f00 	cmp.w	r9, #0
 8004efe:	d115      	bne.n	8004f2c <_fx_utility_FAT_entry_write+0xe0>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8004f00:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8004f04:	3f02      	subs	r7, #2
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8004f06:	2406      	movs	r4, #6

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8004f08:	4628      	mov	r0, r5
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8004f0a:	3301      	adds	r3, #1
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8004f0c:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8004f10:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8004f14:	fb02 1707 	mla	r7, r2, r7, r1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004f18:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8004f1a:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8004f1e:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8004f22:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8004f26:	e9c5 4122 	strd	r4, r1, [r5, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8004f2a:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 8004f2c:	2000      	movs	r0, #0
}
 8004f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8004f32:	4653      	mov	r3, sl
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8004f34:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8004f38:	2101      	movs	r1, #1
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8004f3a:	f8c3 9004 	str.w	r9, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8004f3e:	6099      	str	r1, [r3, #8]
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d0f3      	beq.n	8004f2c <_fx_utility_FAT_entry_write+0xe0>
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8004f44:	f1b9 0f00 	cmp.w	r9, #0
 8004f48:	d0da      	beq.n	8004f00 <_fx_utility_FAT_entry_write+0xb4>
 8004f4a:	e7ef      	b.n	8004f2c <_fx_utility_FAT_entry_write+0xe0>
        status = _fx_utility_FAT_flush(media_ptr);
 8004f4c:	f000 f808 	bl	8004f60 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d0b5      	beq.n	8004ec0 <_fx_utility_FAT_entry_write+0x74>
 8004f54:	e7eb      	b.n	8004f2e <_fx_utility_FAT_entry_write+0xe2>
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8004f56:	4643      	mov	r3, r8
 8004f58:	e7ec      	b.n	8004f34 <_fx_utility_FAT_entry_write+0xe8>
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	e7ea      	b.n	8004f34 <_fx_utility_FAT_entry_write+0xe8>
 8004f5e:	bf00      	nop

08004f60 <_fx_utility_FAT_flush>:
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8004f60:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
{
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_fat_cache_flushes++;
 8004f68:	3301      	adds	r3, #1
{
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	4604      	mov	r4, r0
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8004f6e:	2700      	movs	r7, #0
 8004f70:	4606      	mov	r6, r0
    media_ptr -> fx_media_fat_cache_flushes++;
 8004f72:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8004f76:	f8d6 3760 	ldr.w	r3, [r6, #1888]	; 0x760
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d064      	beq.n	8005048 <_fx_utility_FAT_flush+0xe8>

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8004f7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8004f80:	f8d6 2758 	ldr.w	r2, [r6, #1880]	; 0x758
 8004f84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f88:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f8a:	68a0      	ldr	r0, [r4, #8]
        if (media_ptr -> fx_media_12_bit_FAT)
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d163      	bne.n	8005058 <_fx_utility_FAT_flush+0xf8>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8004f90:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8004f94:	f1be 0f00 	cmp.w	lr, #0
 8004f98:	f040 8124 	bne.w	80051e4 <_fx_utility_FAT_flush+0x284>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8004f9c:	0055      	lsls	r5, r2, #1
            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
                (ULONG)media_ptr -> fx_media_reserved_sectors;

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004f9e:	9000      	str	r0, [sp, #0]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	2002      	movs	r0, #2
 8004fa4:	4673      	mov	r3, lr
 8004fa6:	9002      	str	r0, [sp, #8]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	9201      	str	r2, [sp, #4]
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8004fac:	fbb5 f5fc 	udiv	r5, r5, ip
 8004fb0:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	f000 fcee 	bl	8005994 <_fx_utility_logical_sector_read>
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d14a      	bne.n	8005052 <_fx_utility_FAT_flush+0xf2>
 8004fbc:	68a0      	ldr	r0, [r4, #8]
 8004fbe:	46b0      	mov	r8, r6
 8004fc0:	46b9      	mov	r9, r7
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8004fc2:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8004fc6:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8004fca:	b1b3      	cbz	r3, 8004ffa <_fx_utility_FAT_flush+0x9a>

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8004fcc:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8004fd0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 2);
 8004fd4:	005b      	lsls	r3, r3, #1
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8004fd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8004fd8:	fbb3 f2fc 	udiv	r2, r3, ip
 8004fdc:	440a      	add	r2, r1

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8004fde:	4295      	cmp	r5, r2
 8004fe0:	d10b      	bne.n	8004ffa <_fx_utility_FAT_flush+0x9a>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8004fe2:	1a6a      	subs	r2, r5, r1

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8004fe4:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 8004fe8:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8004fec:	4418      	add	r0, r3
 8004fee:	f7ff fdb5 	bl	8004b5c <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	68a0      	ldr	r0, [r4, #8]
 8004ff6:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8004ffa:	f1b9 0f10 	cmp.w	r9, #16
 8004ffe:	f108 080c 	add.w	r8, r8, #12
 8005002:	d1de      	bne.n	8004fc2 <_fx_utility_FAT_flush+0x62>
                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8005004:	2302      	movs	r3, #2
 8005006:	2101      	movs	r1, #1
 8005008:	9000      	str	r0, [sp, #0]
 800500a:	462a      	mov	r2, r5
 800500c:	9302      	str	r3, [sp, #8]
 800500e:	4620      	mov	r0, r4
 8005010:	2300      	movs	r3, #0
 8005012:	9101      	str	r1, [sp, #4]
 8005014:	f000 fe6c 	bl	8005cf0 <_fx_utility_logical_sector_write>
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8005018:	b9d8      	cbnz	r0, 8005052 <_fx_utility_FAT_flush+0xf2>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800501a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800501c:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8005020:	f3c2 2287 	ubfx	r2, r2, #10, #8
 8005024:	b10b      	cbz	r3, 800502a <_fx_utility_FAT_flush+0xca>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8005026:	3201      	adds	r2, #1
 8005028:	b2d2      	uxtb	r2, r2
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800502a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 800502c:	2301      	movs	r3, #1
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800502e:	1a6d      	subs	r5, r5, r1
 8005030:	fbb5 f5f2 	udiv	r5, r5, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005034:	eb04 02d5 	add.w	r2, r4, r5, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005038:	40ab      	lsls	r3, r5
 800503a:	f892 1818 	ldrb.w	r1, [r2, #2072]	; 0x818
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	430b      	orrs	r3, r1
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005044:	f882 3818 	strb.w	r3, [r2, #2072]	; 0x818
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8005048:	3701      	adds	r7, #1
 800504a:	360c      	adds	r6, #12
 800504c:	2f10      	cmp	r7, #16
 800504e:	d192      	bne.n	8004f76 <_fx_utility_FAT_flush+0x16>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8005050:	2000      	movs	r0, #0
}
 8005052:	b005      	add	sp, #20
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005058:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            multi_sector_entry = -1;
 800505c:	f04f 38ff 	mov.w	r8, #4294967295
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8005060:	0855      	lsrs	r5, r2, #1
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005062:	fbb5 f5fc 	udiv	r5, r5, ip
 8005066:	440d      	add	r5, r1
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005068:	2301      	movs	r3, #1
 800506a:	2202      	movs	r2, #2
 800506c:	9000      	str	r0, [sp, #0]
 800506e:	4620      	mov	r0, r4
 8005070:	9202      	str	r2, [sp, #8]
 8005072:	462a      	mov	r2, r5
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	2300      	movs	r3, #0
 8005078:	f000 fc8c 	bl	8005994 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 800507c:	2800      	cmp	r0, #0
 800507e:	d1e8      	bne.n	8005052 <_fx_utility_FAT_flush+0xf2>
                if (multi_sector_entry != -1)
 8005080:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005084:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005088:	d00f      	beq.n	80050aa <_fx_utility_FAT_flush+0x14a>
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800508a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800508e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
                    if (cluster & 1)
 8005092:	f8d8 2758 	ldr.w	r2, [r8, #1880]	; 0x758
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8005096:	f8d8 375c 	ldr.w	r3, [r8, #1884]	; 0x75c
                    if (cluster & 1)
 800509a:	07d2      	lsls	r2, r2, #31
 800509c:	f140 808a 	bpl.w	80051b4 <_fx_utility_FAT_flush+0x254>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f88e 3000 	strb.w	r3, [lr]
 80050a6:	f8d4 e008 	ldr.w	lr, [r4, #8]
            multi_sector_entry = -1;
 80050aa:	4631      	mov	r1, r6
 80050ac:	4638      	mov	r0, r7
 80050ae:	f04f 38ff 	mov.w	r8, #4294967295
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 80050b2:	f8d1 3760 	ldr.w	r3, [r1, #1888]	; 0x760
 80050b6:	b38b      	cbz	r3, 800511c <_fx_utility_FAT_flush+0x1bc>
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 80050b8:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80050bc:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80050c0:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 80050c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80050c6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80050ca:	fbbc f9fa 	udiv	r9, ip, sl
 80050ce:	4499      	add	r9, r3
                    if (sector != FAT_sector)
 80050d0:	454d      	cmp	r5, r9
 80050d2:	d123      	bne.n	800511c <_fx_utility_FAT_flush+0x1bc>
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80050d4:	1aeb      	subs	r3, r5, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80050d6:	f10a 3bff 	add.w	fp, sl, #4294967295
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 80050da:	f8d1 975c 	ldr.w	r9, [r1, #1884]	; 0x75c
 80050de:	f002 0201 	and.w	r2, r2, #1
                    byte_offset =  byte_offset -
 80050e2:	fb0a c313 	mls	r3, sl, r3, ip
 80050e6:	fa5f fc89 	uxtb.w	ip, r9
 80050ea:	449e      	add	lr, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80050ec:	459b      	cmp	fp, r3
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	f8c1 3760 	str.w	r3, [r1, #1888]	; 0x760
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80050f6:	d056      	beq.n	80051a6 <_fx_utility_FAT_flush+0x246>
                    if (cluster & 1)
 80050f8:	2a00      	cmp	r2, #0
 80050fa:	d043      	beq.n	8005184 <_fx_utility_FAT_flush+0x224>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80050fc:	f89e 3000 	ldrb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8005100:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800510a:	f88e 3000 	strb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 800510e:	d047      	beq.n	80051a0 <_fx_utility_FAT_flush+0x240>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8005110:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8005114:	f88e 9001 	strb.w	r9, [lr, #1]
 8005118:	f8d4 e008 	ldr.w	lr, [r4, #8]
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800511c:	3001      	adds	r0, #1
 800511e:	310c      	adds	r1, #12
 8005120:	2810      	cmp	r0, #16
 8005122:	d1c6      	bne.n	80050b2 <_fx_utility_FAT_flush+0x152>
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8005124:	2301      	movs	r3, #1
 8005126:	2202      	movs	r2, #2
 8005128:	f8cd e000 	str.w	lr, [sp]
 800512c:	4620      	mov	r0, r4
 800512e:	9202      	str	r2, [sp, #8]
 8005130:	462a      	mov	r2, r5
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	2300      	movs	r3, #0
 8005136:	f000 fddb 	bl	8005cf0 <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 800513a:	2800      	cmp	r0, #0
 800513c:	d189      	bne.n	8005052 <_fx_utility_FAT_flush+0xf2>
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800513e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005140:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005144:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8005148:	b10a      	cbz	r2, 800514e <_fx_utility_FAT_flush+0x1ee>
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800514a:	3301      	adds	r3, #1
 800514c:	b2db      	uxtb	r3, r3
                if (sectors_per_bit == 0)
 800514e:	2b00      	cmp	r3, #0
 8005150:	d07d      	beq.n	800524e <_fx_utility_FAT_flush+0x2ee>
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8005152:	6c61      	ldr	r1, [r4, #68]	; 0x44
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005154:	2201      	movs	r2, #1
                if (multi_sector_entry != -1)
 8005156:	f1b8 3fff 	cmp.w	r8, #4294967295
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800515a:	eba5 0101 	sub.w	r1, r5, r1
 800515e:	fbb1 f3f3 	udiv	r3, r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005162:	eb04 01d3 	add.w	r1, r4, r3, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	f891 2818 	ldrb.w	r2, [r1, #2072]	; 0x818
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	ea43 0302 	orr.w	r3, r3, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8005176:	f881 3818 	strb.w	r3, [r1, #2072]	; 0x818
                if (multi_sector_entry != -1)
 800517a:	f43f af65 	beq.w	8005048 <_fx_utility_FAT_flush+0xe8>
                    FAT_sector++;
 800517e:	3501      	adds	r5, #1
 8005180:	68a0      	ldr	r0, [r4, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005182:	e771      	b.n	8005068 <_fx_utility_FAT_flush+0x108>
                        if ((multi_sector_entry) == (INT)i)
 8005184:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8005186:	f88e c000 	strb.w	ip, [lr]
                        if ((multi_sector_entry) == (INT)i)
 800518a:	d00f      	beq.n	80051ac <_fx_utility_FAT_flush+0x24c>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800518c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8005190:	f3c9 2903 	ubfx	r9, r9, #8, #4
 8005194:	f023 030f 	bic.w	r3, r3, #15
 8005198:	ea49 0903 	orr.w	r9, r9, r3
 800519c:	f88e 9001 	strb.w	r9, [lr, #1]
 80051a0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80051a4:	e7ba      	b.n	800511c <_fx_utility_FAT_flush+0x1bc>
                    if (cluster & 1)
 80051a6:	b98a      	cbnz	r2, 80051cc <_fx_utility_FAT_flush+0x26c>
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 80051a8:	f88e c000 	strb.w	ip, [lr]
 80051ac:	f8d4 e008 	ldr.w	lr, [r4, #8]
                        if ((multi_sector_entry) == (INT)i)
 80051b0:	4680      	mov	r8, r0
 80051b2:	e7b3      	b.n	800511c <_fx_utility_FAT_flush+0x1bc>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80051b4:	f89e 2000 	ldrb.w	r2, [lr]
 80051b8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80051bc:	f022 020f 	bic.w	r2, r2, #15
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f88e 3000 	strb.w	r3, [lr]
 80051c6:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80051ca:	e76e      	b.n	80050aa <_fx_utility_FAT_flush+0x14a>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80051cc:	f89e 3000 	ldrb.w	r3, [lr]
 80051d0:	4680      	mov	r8, r0
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80051da:	f88e 3000 	strb.w	r3, [lr]
 80051de:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80051e2:	e79b      	b.n	800511c <_fx_utility_FAT_flush+0x1bc>
            byte_offset =  (((ULONG)cluster) * 4);
 80051e4:	0092      	lsls	r2, r2, #2
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80051e6:	2501      	movs	r5, #1
 80051e8:	9000      	str	r0, [sp, #0]
 80051ea:	2002      	movs	r0, #2
 80051ec:	9501      	str	r5, [sp, #4]
 80051ee:	9002      	str	r0, [sp, #8]
 80051f0:	4620      	mov	r0, r4
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80051f2:	fbb2 f5fc 	udiv	r5, r2, ip
 80051f6:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80051f8:	462a      	mov	r2, r5
 80051fa:	f000 fbcb 	bl	8005994 <_fx_utility_logical_sector_read>
            if (status != FX_SUCCESS)
 80051fe:	2800      	cmp	r0, #0
 8005200:	f47f af27 	bne.w	8005052 <_fx_utility_FAT_flush+0xf2>
 8005204:	68a0      	ldr	r0, [r4, #8]
 8005206:	46b0      	mov	r8, r6
 8005208:	46b9      	mov	r9, r7
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800520a:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800520e:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8005212:	b1b3      	cbz	r3, 8005242 <_fx_utility_FAT_flush+0x2e2>
                byte_offset =  (((ULONG)cluster) * 4);
 8005214:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005218:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 4);
 800521c:	009b      	lsls	r3, r3, #2
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800521e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005220:	fbb3 f2fc 	udiv	r2, r3, ip
 8005224:	440a      	add	r2, r1
                if (sector != FAT_sector)
 8005226:	4295      	cmp	r5, r2
 8005228:	d10b      	bne.n	8005242 <_fx_utility_FAT_flush+0x2e2>
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800522a:	1a6a      	subs	r2, r5, r1
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 800522c:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 8005230:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8005234:	4418      	add	r0, r3
 8005236:	f7ff fca1 	bl	8004b7c <_fx_utility_32_unsigned_write>
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	68a0      	ldr	r0, [r4, #8]
 800523e:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8005242:	f1b9 0f10 	cmp.w	r9, #16
 8005246:	f108 080c 	add.w	r8, r8, #12
 800524a:	d1de      	bne.n	800520a <_fx_utility_FAT_flush+0x2aa>
 800524c:	e6da      	b.n	8005004 <_fx_utility_FAT_flush+0xa4>
                    return(FX_MEDIA_INVALID);
 800524e:	2002      	movs	r0, #2
}
 8005250:	b005      	add	sp, #20
 8005252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005256:	bf00      	nop

08005258 <_fx_utility_FAT_map_flush>:
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8005258:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 800525a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800525e:	f3c3 0209 	ubfx	r2, r3, #0, #10
{
 8005262:	b08b      	sub	sp, #44	; 0x2c
 8005264:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8005268:	4682      	mov	sl, r0
 800526a:	9308      	str	r3, [sp, #32]
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800526c:	b112      	cbz	r2, 8005274 <_fx_utility_FAT_map_flush+0x1c>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800526e:	3301      	adds	r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	9308      	str	r3, [sp, #32]
{
 8005274:	2300      	movs	r3, #0
        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8005276:	f04f 0902 	mov.w	r9, #2
 800527a:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800527e:	469b      	mov	fp, r3
{
 8005280:	9307      	str	r3, [sp, #28]
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8005282:	eb0a 02db 	add.w	r2, sl, fp, lsr #3
 8005286:	f00b 0307 	and.w	r3, fp, #7
 800528a:	f892 2818 	ldrb.w	r2, [r2, #2072]	; 0x818
 800528e:	fa42 f303 	asr.w	r3, r2, r3
 8005292:	07db      	lsls	r3, r3, #31
 8005294:	d548      	bpl.n	8005328 <_fx_utility_FAT_map_flush+0xd0>
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8005296:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 800529a:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 800529e:	9907      	ldr	r1, [sp, #28]
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 80052a0:	441a      	add	r2, r3
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 80052a2:	185e      	adds	r6, r3, r1
        last_sector =   FAT_sector + sectors_per_bit;
 80052a4:	9b08      	ldr	r3, [sp, #32]
 80052a6:	18f3      	adds	r3, r6, r3
 80052a8:	429a      	cmp	r2, r3
 80052aa:	bf28      	it	cs
 80052ac:	461a      	movcs	r2, r3
        for (; FAT_sector < last_sector; FAT_sector++)
 80052ae:	4296      	cmp	r6, r2
 80052b0:	9209      	str	r2, [sp, #36]	; 0x24
 80052b2:	d239      	bcs.n	8005328 <_fx_utility_FAT_map_flush+0xd0>
 80052b4:	2700      	movs	r7, #0
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80052b6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80052ba:	4632      	mov	r2, r6
 80052bc:	463b      	mov	r3, r7
 80052be:	f8cd 9008 	str.w	r9, [sp, #8]
 80052c2:	4650      	mov	r0, sl
 80052c4:	e9cd 1800 	strd	r1, r8, [sp]
 80052c8:	f000 fb64 	bl	8005994 <_fx_utility_logical_sector_read>
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80052cc:	bb18      	cbnz	r0, 8005316 <_fx_utility_FAT_map_flush+0xbe>
                /* Return the error status.  */
                return(status);
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 80052ce:	f8da 405c 	ldr.w	r4, [sl, #92]	; 0x5c

            /* Loop to update additional FAT entries.  */
            while (FATs)
 80052d2:	3c01      	subs	r4, #1
 80052d4:	d022      	beq.n	800531c <_fx_utility_FAT_map_flush+0xc4>
 80052d6:	2500      	movs	r5, #0
 80052d8:	e000      	b.n	80052dc <_fx_utility_FAT_map_flush+0x84>
 80052da:	b1fc      	cbz	r4, 800531c <_fx_utility_FAT_map_flush+0xc4>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80052dc:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
                status =  _fx_utility_logical_sector_write(media_ptr,
 80052e0:	4650      	mov	r0, sl
 80052e2:	f8cd 9008 	str.w	r9, [sp, #8]
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80052e6:	fba1 2304 	umull	r2, r3, r1, r4
 80052ea:	f114 34ff 	adds.w	r4, r4, #4294967295
 80052ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
                status =  _fx_utility_logical_sector_write(media_ptr,
 80052f2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80052f6:	e9cd 3800 	strd	r3, r8, [sp]
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80052fa:	9b05      	ldr	r3, [sp, #20]
 80052fc:	fb01 3305 	mla	r3, r1, r5, r3
 8005300:	f145 35ff 	adc.w	r5, r5, #4294967295
 8005304:	9305      	str	r3, [sp, #20]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8005306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530a:	1992      	adds	r2, r2, r6
 800530c:	417b      	adcs	r3, r7
 800530e:	f000 fcef 	bl	8005cf0 <_fx_utility_logical_sector_write>
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8005312:	2800      	cmp	r0, #0
 8005314:	d0e1      	beq.n	80052da <_fx_utility_FAT_map_flush+0x82>
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
}
 8005316:	b00b      	add	sp, #44	; 0x2c
 8005318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531c:	3601      	adds	r6, #1
        for (; FAT_sector < last_sector; FAT_sector++)
 800531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005320:	f147 0700 	adc.w	r7, r7, #0
 8005324:	42b3      	cmp	r3, r6
 8005326:	d8c6      	bhi.n	80052b6 <_fx_utility_FAT_map_flush+0x5e>
 8005328:	9b07      	ldr	r3, [sp, #28]
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	9a08      	ldr	r2, [sp, #32]
 8005330:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 8005334:	4413      	add	r3, r2
 8005336:	9307      	str	r3, [sp, #28]
 8005338:	d1a3      	bne.n	8005282 <_fx_utility_FAT_map_flush+0x2a>
 800533a:	f60a 0018 	addw	r0, sl, #2072	; 0x818
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	2100      	movs	r1, #0
 8005342:	f004 f974 	bl	800962e <memset>
    return(FX_SUCCESS);
 8005346:	2000      	movs	r0, #0
 8005348:	e7e5      	b.n	8005316 <_fx_utility_FAT_map_flush+0xbe>
 800534a:	bf00      	nop

0800534c <_fx_utility_logical_sector_flush>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	b08b      	sub	sp, #44	; 0x2c
 8005352:	461e      	mov	r6, r3
 8005354:	4615      	mov	r5, r2
 8005356:	4681      	mov	r9, r0
 8005358:	2000      	movs	r0, #0
 800535a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 800535e:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
 8005362:	4601      	mov	r1, r0
 8005364:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
{
 8005368:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800536c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005370:	f144 34ff 	adc.w	r4, r4, #4294967295
 8005374:	18ef      	adds	r7, r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8005376:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800537a:	eb56 0804 	adcs.w	r8, r6, r4
 800537e:	bf28      	it	cs
 8005380:	2001      	movcs	r0, #1
 8005382:	4602      	mov	r2, r0
 8005384:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8005388:	e9cd 7804 	strd	r7, r8, [sp, #16]
 800538c:	9007      	str	r0, [sp, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 8097 	bne.w	80054c2 <_fx_utility_logical_sector_flush+0x176>
        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8005394:	f8d9 401c 	ldr.w	r4, [r9, #28]

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8005398:	1e45      	subs	r5, r0, #1
 800539a:	2800      	cmp	r0, #0
 800539c:	f000 808d 	beq.w	80054ba <_fx_utility_logical_sector_flush+0x16e>
 80053a0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80053a4:	ea52 0103 	orrs.w	r1, r2, r3
 80053a8:	f000 8087 	beq.w	80054ba <_fx_utility_logical_sector_flush+0x16e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 80053ac:	ea5a 010b 	orrs.w	r1, sl, fp
 80053b0:	f000 8083 	beq.w	80054ba <_fx_utility_logical_sector_flush+0x16e>
 80053b4:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
 80053b8:	4301      	orrs	r1, r0
 80053ba:	bf0c      	ite	eq
 80053bc:	2601      	moveq	r6, #1
 80053be:	2600      	movne	r6, #0
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	d17a      	bne.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
                /* Determine if the invalidate option is specified.  */
                if (invalidate)
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80053c4:	9600      	str	r6, [sp, #0]
 80053c6:	4649      	mov	r1, r9
 80053c8:	4616      	mov	r6, r2
 80053ca:	461f      	mov	r7, r3
 80053cc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80053d0:	e00f      	b.n	80053f2 <_fx_utility_logical_sector_flush+0xa6>
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80053d2:	3d01      	subs	r5, #1
                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80053d4:	6964      	ldr	r4, [r4, #20]
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80053d6:	1c6e      	adds	r6, r5, #1
 80053d8:	d06f      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
 80053da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80053de:	461f      	mov	r7, r3
 80053e0:	4313      	orrs	r3, r2
 80053e2:	4616      	mov	r6, r2
 80053e4:	d069      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
            if (sectors == 0)
 80053e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80053ea:	d066      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
 80053ec:	ea58 0309 	orrs.w	r3, r8, r9
 80053f0:	d063      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
            if ((cache_entry -> fx_cached_sector_valid) &&
 80053f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053f6:	429f      	cmp	r7, r3
 80053f8:	bf08      	it	eq
 80053fa:	4296      	cmpeq	r6, r2
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80053fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8005400:	bf2c      	ite	cs
 8005402:	2001      	movcs	r0, #1
 8005404:	2000      	movcc	r0, #0
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8005406:	42bb      	cmp	r3, r7
 8005408:	f000 0001 	and.w	r0, r0, #1
 800540c:	bf08      	it	eq
 800540e:	42b2      	cmpeq	r2, r6
 8005410:	bf38      	it	cc
 8005412:	2000      	movcc	r0, #0
 8005414:	2800      	cmp	r0, #0
 8005416:	d0dc      	beq.n	80053d2 <_fx_utility_logical_sector_flush+0x86>
            if ((cache_entry -> fx_cached_sector_valid) &&
 8005418:	7c60      	ldrb	r0, [r4, #17]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 800541a:	2800      	cmp	r0, #0
 800541c:	d0d9      	beq.n	80053d2 <_fx_utility_logical_sector_flush+0x86>
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 800541e:	7c20      	ldrb	r0, [r4, #16]
 8005420:	b370      	cbz	r0, 8005480 <_fx_utility_logical_sector_flush+0x134>
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8005422:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
 8005426:	bb58      	cbnz	r0, 8005480 <_fx_utility_logical_sector_flush+0x134>
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005428:	2201      	movs	r2, #1
                        media_ptr -> fx_media_driver_write_requests++;
 800542a:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800542e:	2090      	movs	r0, #144	; 0x90
                        media_ptr -> fx_media_driver_write_requests++;
 8005430:	4413      	add	r3, r2
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005432:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005436:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800543a:	6820      	ldr	r0, [r4, #0]
                        media_ptr -> fx_media_driver_write_requests++;
 800543c:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005440:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8005444:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
                        media_ptr -> fx_media_driver_sectors =          1;
 8005448:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800544c:	7ca3      	ldrb	r3, [r4, #18]
 800544e:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8005452:	7ca3      	ldrb	r3, [r4, #18]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d001      	beq.n	800545c <_fx_utility_logical_sector_flush+0x110>
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005458:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800545c:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8005460:	4608      	mov	r0, r1
 8005462:	9106      	str	r1, [sp, #24]
 8005464:	4798      	blx	r3
                        if (media_ptr -> fx_media_driver_status)
 8005466:	9906      	ldr	r1, [sp, #24]
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005468:	9b00      	ldr	r3, [sp, #0]
                        if (media_ptr -> fx_media_driver_status)
 800546a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800546e:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
                        if (media_ptr -> fx_media_driver_status)
 8005472:	bb18      	cbnz	r0, 80054bc <_fx_utility_logical_sector_flush+0x170>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8005474:	7420      	strb	r0, [r4, #16]
                        remaining_dirty--;
 8005476:	f10a 3aff 	add.w	sl, sl, #4294967295
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 800547a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800547c:	3b01      	subs	r3, #1
 800547e:	624b      	str	r3, [r1, #36]	; 0x24
                if (invalidate)
 8005480:	f1bb 0f00 	cmp.w	fp, #0
 8005484:	d010      	beq.n	80054a8 <_fx_utility_logical_sector_flush+0x15c>
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005486:	9b00      	ldr	r3, [sp, #0]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005488:	f04f 32ff 	mov.w	r2, #4294967295
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 800548c:	7c20      	ldrb	r0, [r4, #16]
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800548e:	7463      	strb	r3, [r4, #17]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	e9c4 2302 	strd	r2, r3, [r4, #8]
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8005498:	b130      	cbz	r0, 80054a8 <_fx_utility_logical_sector_flush+0x15c>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800549a:	9b00      	ldr	r3, [sp, #0]
                        remaining_dirty--;
 800549c:	f10a 3aff 	add.w	sl, sl, #4294967295
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80054a0:	7423      	strb	r3, [r4, #16]
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80054a2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80054a4:	3b01      	subs	r3, #1
 80054a6:	624b      	str	r3, [r1, #36]	; 0x24
                sectors--;
 80054a8:	f118 38ff 	adds.w	r8, r8, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80054ac:	f105 35ff 	add.w	r5, r5, #4294967295
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80054b0:	6964      	ldr	r4, [r4, #20]
                sectors--;
 80054b2:	f149 39ff 	adc.w	r9, r9, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80054b6:	1c6e      	adds	r6, r5, #1
 80054b8:	d18f      	bne.n	80053da <_fx_utility_logical_sector_flush+0x8e>
            }
        }
    }

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 80054ba:	2000      	movs	r0, #0
}
 80054bc:	b00b      	add	sp, #44	; 0x2c
 80054be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 80054c2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80054c6:	9309      	str	r3, [sp, #36]	; 0x24
        while (valid_bit_map)
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f6      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80054cc:	fabb f38b 	clz	r3, fp
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	9306      	str	r3, [sp, #24]
 80054d4:	ea5a 030b 	orrs.w	r3, sl, fp
 80054d8:	d0ef      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 80054da:	e9dd 3014 	ldrd	r3, r0, [sp, #80]	; 0x50
 80054de:	4303      	orrs	r3, r0
 80054e0:	d0eb      	beq.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
 80054e2:	ea52 0301 	orrs.w	r3, r2, r1
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e4      	bne.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
 80054f0:	9308      	str	r3, [sp, #32]
            if (use_starting_sector)
 80054f2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
            if ((sectors == 0) || (starting_sector > ending_sector))
 80054f6:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
            if (use_starting_sector)
 80054fa:	2c00      	cmp	r4, #0
 80054fc:	bf08      	it	eq
 80054fe:	2b20      	cmpeq	r3, #32
 8005500:	f080 80b4 	bcs.w	800566c <_fx_utility_logical_sector_flush+0x320>
                bit_set =  (index % 32);
 8005504:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8005508:	9a02      	ldr	r2, [sp, #8]
 800550a:	f859 3003 	ldr.w	r3, [r9, r3]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	4013      	ands	r3, r2
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8005514:	009e      	lsls	r6, r3, #2
                bit_set =  (index % 32);
 8005516:	9308      	str	r3, [sp, #32]
 8005518:	eb06 0446 	add.w	r4, r6, r6, lsl #1
            remaining_valid =  0;
 800551c:	2500      	movs	r5, #0
 800551e:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 8005522:	f504 644a 	add.w	r4, r4, #3232	; 0xca0
 8005526:	e9cd 7800 	strd	r7, r8, [sp]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800552a:	7c63      	ldrb	r3, [r4, #17]
 800552c:	b183      	cbz	r3, 8005550 <_fx_utility_logical_sector_flush+0x204>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800552e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005536:	4607      	mov	r7, r0
 8005538:	4299      	cmp	r1, r3
 800553a:	bf08      	it	eq
 800553c:	4290      	cmpeq	r0, r2
 800553e:	d306      	bcc.n	800554e <_fx_utility_logical_sector_flush+0x202>
 8005540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005544:	428b      	cmp	r3, r1
 8005546:	bf08      	it	eq
 8005548:	4282      	cmpeq	r2, r0
 800554a:	f080 809f 	bcs.w	800568c <_fx_utility_logical_sector_flush+0x340>
                            remaining_valid++;
 800554e:	3501      	adds	r5, #1
 8005550:	ea4b 030a 	orr.w	r3, fp, sl
 8005554:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8096 	beq.w	8005688 <_fx_utility_logical_sector_flush+0x33c>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 800555c:	e9dd 2000 	ldrd	r2, r0, [sp]
 8005560:	4310      	orrs	r0, r2
 8005562:	d103      	bne.n	800556c <_fx_utility_logical_sector_flush+0x220>
 8005564:	9a06      	ldr	r2, [sp, #24]
 8005566:	2a00      	cmp	r2, #0
 8005568:	f040 81a6 	bne.w	80058b8 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800556c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005570:	b17b      	cbz	r3, 8005592 <_fx_utility_logical_sector_flush+0x246>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8005572:	e9d4 7808 	ldrd	r7, r8, [r4, #32]
 8005576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800557a:	4598      	cmp	r8, r3
 800557c:	bf08      	it	eq
 800557e:	4297      	cmpeq	r7, r2
 8005580:	d306      	bcc.n	8005590 <_fx_utility_logical_sector_flush+0x244>
 8005582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005586:	4543      	cmp	r3, r8
 8005588:	bf08      	it	eq
 800558a:	42ba      	cmpeq	r2, r7
 800558c:	f080 80d0 	bcs.w	8005730 <_fx_utility_logical_sector_flush+0x3e4>
                            remaining_valid++;
 8005590:	3501      	adds	r5, #1
 8005592:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8005594:	b918      	cbnz	r0, 800559e <_fx_utility_logical_sector_flush+0x252>
 8005596:	9a06      	ldr	r2, [sp, #24]
 8005598:	2a00      	cmp	r2, #0
 800559a:	f040 818d 	bne.w	80058b8 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800559e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80055a2:	b17b      	cbz	r3, 80055c4 <_fx_utility_logical_sector_flush+0x278>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80055a4:	e9d4 780e 	ldrd	r7, r8, [r4, #56]	; 0x38
 80055a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ac:	4598      	cmp	r8, r3
 80055ae:	bf08      	it	eq
 80055b0:	4297      	cmpeq	r7, r2
 80055b2:	d306      	bcc.n	80055c2 <_fx_utility_logical_sector_flush+0x276>
 80055b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b8:	4543      	cmp	r3, r8
 80055ba:	bf08      	it	eq
 80055bc:	42ba      	cmpeq	r2, r7
 80055be:	f080 8119 	bcs.w	80057f4 <_fx_utility_logical_sector_flush+0x4a8>
                            remaining_valid++;
 80055c2:	3501      	adds	r5, #1
 80055c4:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80055c6:	b918      	cbnz	r0, 80055d0 <_fx_utility_logical_sector_flush+0x284>
 80055c8:	9a06      	ldr	r2, [sp, #24]
 80055ca:	2a00      	cmp	r2, #0
 80055cc:	f040 8174 	bne.w	80058b8 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80055d0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80055d4:	b17b      	cbz	r3, 80055f6 <_fx_utility_logical_sector_flush+0x2aa>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80055d6:	e9d4 7814 	ldrd	r7, r8, [r4, #80]	; 0x50
 80055da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055de:	4598      	cmp	r8, r3
 80055e0:	bf08      	it	eq
 80055e2:	4297      	cmpeq	r7, r2
 80055e4:	d306      	bcc.n	80055f4 <_fx_utility_logical_sector_flush+0x2a8>
 80055e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ea:	4543      	cmp	r3, r8
 80055ec:	bf08      	it	eq
 80055ee:	42ba      	cmpeq	r2, r7
 80055f0:	f080 8167 	bcs.w	80058c2 <_fx_utility_logical_sector_flush+0x576>
                            remaining_valid++;
 80055f4:	3501      	adds	r5, #1
 80055f6:	460b      	mov	r3, r1
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 80055f8:	3680      	adds	r6, #128	; 0x80
            } while (index < cache_size);
 80055fa:	9a07      	ldr	r2, [sp, #28]
 80055fc:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005600:	4296      	cmp	r6, r2
 8005602:	d392      	bcc.n	800552a <_fx_utility_logical_sector_flush+0x1de>
 8005604:	e9dd 7800 	ldrd	r7, r8, [sp]
            if ((invalidate) && (remaining_valid == 0))
 8005608:	f1bb 0f00 	cmp.w	fp, #0
 800560c:	d009      	beq.n	8005622 <_fx_utility_logical_sector_flush+0x2d6>
 800560e:	b945      	cbnz	r5, 8005622 <_fx_utility_logical_sector_flush+0x2d6>
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8005610:	2101      	movs	r1, #1
 8005612:	9808      	ldr	r0, [sp, #32]
 8005614:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8005618:	4081      	lsls	r1, r0
 800561a:	ea22 0201 	bic.w	r2, r2, r1
 800561e:	f8c9 2020 	str.w	r2, [r9, #32]
            if (use_starting_sector)
 8005622:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005626:	2a00      	cmp	r2, #0
 8005628:	bf08      	it	eq
 800562a:	2920      	cmpeq	r1, #32
 800562c:	f080 81a6 	bcs.w	800597c <_fx_utility_logical_sector_flush+0x630>
                starting_sector++;
 8005630:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005634:	3101      	adds	r1, #1
 8005636:	f142 0200 	adc.w	r2, r2, #0
 800563a:	e9cd 1202 	strd	r1, r2, [sp, #8]
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800563e:	2b00      	cmp	r3, #0
 8005640:	f43f af3b 	beq.w	80054ba <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 8005644:	ea57 0308 	orrs.w	r3, r7, r8
 8005648:	f43f af37 	beq.w	80054ba <_fx_utility_logical_sector_flush+0x16e>
 800564c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005650:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005654:	4294      	cmp	r4, r2
 8005656:	bf08      	it	eq
 8005658:	428b      	cmpeq	r3, r1
 800565a:	f4ff af2e 	bcc.w	80054ba <_fx_utility_logical_sector_flush+0x16e>
            if (use_starting_sector)
 800565e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8005662:	2c00      	cmp	r4, #0
 8005664:	bf08      	it	eq
 8005666:	2b20      	cmpeq	r3, #32
 8005668:	f4ff af4c 	bcc.w	8005504 <_fx_utility_logical_sector_flush+0x1b8>
                while ((valid_bit_map & 1) == 0)
 800566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566e:	07d8      	lsls	r0, r3, #31
 8005670:	f100 818d 	bmi.w	800598e <_fx_utility_logical_sector_flush+0x642>
 8005674:	9a08      	ldr	r2, [sp, #32]
                    valid_bit_map =  valid_bit_map >> 1;
 8005676:	085b      	lsrs	r3, r3, #1
                    bit_set++;
 8005678:	3201      	adds	r2, #1
                while ((valid_bit_map & 1) == 0)
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d5fb      	bpl.n	8005676 <_fx_utility_logical_sector_flush+0x32a>
 800567e:	9309      	str	r3, [sp, #36]	; 0x24
 8005680:	4613      	mov	r3, r2
 8005682:	9208      	str	r2, [sp, #32]
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8005684:	009e      	lsls	r6, r3, #2
 8005686:	e747      	b.n	8005518 <_fx_utility_logical_sector_flush+0x1cc>
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8005688:	469a      	mov	sl, r3
 800568a:	e7b5      	b.n	80055f8 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 800568c:	7c21      	ldrb	r1, [r4, #16]
 800568e:	b389      	cbz	r1, 80056f4 <_fx_utility_logical_sector_flush+0x3a8>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8005690:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8005694:	bb71      	cbnz	r1, 80056f4 <_fx_utility_logical_sector_flush+0x3a8>
                                media_ptr -> fx_media_driver_write_requests++;
 8005696:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800569a:	f04f 0801 	mov.w	r8, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800569e:	6821      	ldr	r1, [r4, #0]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80056a0:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80056a2:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80056a4:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80056a8:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80056ac:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 80056b0:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80056b2:	e9c9 8222 	strd	r8, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 80056b6:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80056ba:	7ca3      	ldrb	r3, [r4, #18]
 80056bc:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80056c0:	7ca3      	ldrb	r3, [r4, #18]
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d002      	beq.n	80056cc <_fx_utility_logical_sector_flush+0x380>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80056cc:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 80056d0:	4648      	mov	r0, r9
 80056d2:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80056d4:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 80056d6:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80056da:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 80056de:	2800      	cmp	r0, #0
 80056e0:	f47f aeec 	bne.w	80054bc <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80056e4:	7420      	strb	r0, [r4, #16]
                                remaining_dirty--;
 80056e6:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80056ea:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 80056f4:	f1bb 0f00 	cmp.w	fp, #0
 80056f8:	d011      	beq.n	800571e <_fx_utility_logical_sector_flush+0x3d2>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80056fa:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8005704:	7c22      	ldrb	r2, [r4, #16]
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005706:	7463      	strb	r3, [r4, #17]
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005708:	e9c4 0102 	strd	r0, r1, [r4, #8]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 800570c:	b13a      	cbz	r2, 800571e <_fx_utility_logical_sector_flush+0x3d2>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800570e:	7423      	strb	r3, [r4, #16]
                                remaining_dirty--;
 8005710:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8005714:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8005718:	3b01      	subs	r3, #1
 800571a:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 800571e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005722:	f112 32ff 	adds.w	r2, r2, #4294967295
 8005726:	f143 33ff 	adc.w	r3, r3, #4294967295
 800572a:	e9cd 2300 	strd	r2, r3, [sp]
 800572e:	e70f      	b.n	8005550 <_fx_utility_logical_sector_flush+0x204>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8005730:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8005734:	b3a1      	cbz	r1, 80057a0 <_fx_utility_logical_sector_flush+0x454>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8005736:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 800573a:	bb89      	cbnz	r1, 80057a0 <_fx_utility_logical_sector_flush+0x454>
                                media_ptr -> fx_media_driver_write_requests++;
 800573c:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005740:	f04f 0e01 	mov.w	lr, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005744:	69a1      	ldr	r1, [r4, #24]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005746:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8005748:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800574a:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800574e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8005752:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 8005756:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005758:	e9c9 e222 	strd	lr, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 800575c:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8005760:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005764:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8005768:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800576c:	2b04      	cmp	r3, #4
 800576e:	d002      	beq.n	8005776 <_fx_utility_logical_sector_flush+0x42a>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005776:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 800577a:	4648      	mov	r0, r9
 800577c:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800577e:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8005780:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005784:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8005788:	2800      	cmp	r0, #0
 800578a:	f47f ae97 	bne.w	80054bc <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800578e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
                                remaining_dirty--;
 8005792:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8005796:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800579a:	3b01      	subs	r3, #1
 800579c:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 80057a0:	f1bb 0f00 	cmp.w	fp, #0
 80057a4:	d014      	beq.n	80057d0 <_fx_utility_logical_sector_flush+0x484>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80057a6:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ac:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80057b0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80057b4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80057b8:	e9c4 0108 	strd	r0, r1, [r4, #32]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80057bc:	b142      	cbz	r2, 80057d0 <_fx_utility_logical_sector_flush+0x484>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80057be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                                remaining_dirty--;
 80057c2:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80057c6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80057ca:	3b01      	subs	r3, #1
 80057cc:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 80057d0:	ea4b 030a 	orr.w	r3, fp, sl
                        sectors--;
 80057d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80057d8:	f111 31ff 	adds.w	r1, r1, #4294967295
 80057dc:	f142 32ff 	adc.w	r2, r2, #4294967295
 80057e0:	e9cd 1200 	strd	r1, r2, [sp]
 80057e4:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f43f af4e 	beq.w	8005688 <_fx_utility_logical_sector_flush+0x33c>
 80057ec:	e9dd 2000 	ldrd	r2, r0, [sp]
 80057f0:	4310      	orrs	r0, r2
 80057f2:	e6cf      	b.n	8005594 <_fx_utility_logical_sector_flush+0x248>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80057f4:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 80057f8:	b3a1      	cbz	r1, 8005864 <_fx_utility_logical_sector_flush+0x518>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80057fa:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 80057fe:	bb89      	cbnz	r1, 8005864 <_fx_utility_logical_sector_flush+0x518>
                                media_ptr -> fx_media_driver_write_requests++;
 8005800:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005804:	f04f 0c01 	mov.w	ip, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005808:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800580a:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 800580c:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800580e:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005812:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 8005816:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 800581a:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800581c:	e9c9 c222 	strd	ip, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 8005820:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8005824:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005828:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800582c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005830:	2b04      	cmp	r3, #4
 8005832:	d002      	beq.n	800583a <_fx_utility_logical_sector_flush+0x4ee>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800583a:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 800583e:	4648      	mov	r0, r9
 8005840:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005842:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8005844:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005848:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 800584c:	2800      	cmp	r0, #0
 800584e:	f47f ae35 	bne.w	80054bc <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8005852:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
                                remaining_dirty--;
 8005856:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 800585a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800585e:	3b01      	subs	r3, #1
 8005860:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8005864:	f1bb 0f00 	cmp.w	fp, #0
 8005868:	d014      	beq.n	8005894 <_fx_utility_logical_sector_flush+0x548>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800586a:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8005874:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005878:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800587c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8005880:	b142      	cbz	r2, 8005894 <_fx_utility_logical_sector_flush+0x548>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8005882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                                remaining_dirty--;
 8005886:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 800588a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800588e:	3b01      	subs	r3, #1
 8005890:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8005894:	ea4a 030b 	orr.w	r3, sl, fp
                        sectors--;
 8005898:	e9dd 1200 	ldrd	r1, r2, [sp]
 800589c:	f111 31ff 	adds.w	r1, r1, #4294967295
 80058a0:	f142 32ff 	adc.w	r2, r2, #4294967295
 80058a4:	e9cd 1200 	strd	r1, r2, [sp]
 80058a8:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f43f aeec 	beq.w	8005688 <_fx_utility_logical_sector_flush+0x33c>
 80058b0:	e9dd 2000 	ldrd	r2, r0, [sp]
 80058b4:	4310      	orrs	r0, r2
 80058b6:	e686      	b.n	80055c6 <_fx_utility_logical_sector_flush+0x27a>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80058b8:	2100      	movs	r1, #0
 80058ba:	2200      	movs	r2, #0
 80058bc:	e9cd 1200 	strd	r1, r2, [sp]
 80058c0:	e69a      	b.n	80055f8 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80058c2:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80058c6:	b399      	cbz	r1, 8005930 <_fx_utility_logical_sector_flush+0x5e4>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80058c8:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 80058cc:	bb81      	cbnz	r1, 8005930 <_fx_utility_logical_sector_flush+0x5e4>
                                media_ptr -> fx_media_driver_write_requests++;
 80058ce:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80058d2:	2001      	movs	r0, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80058d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80058d6:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80058d8:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80058da:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80058de:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 80058e2:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 80058e6:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80058e8:	e9c9 0222 	strd	r0, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 80058ec:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80058f0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 80058f4:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80058f8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d002      	beq.n	8005906 <_fx_utility_logical_sector_flush+0x5ba>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005906:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 800590a:	4648      	mov	r0, r9
 800590c:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800590e:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 8005910:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005914:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 8005918:	2800      	cmp	r0, #0
 800591a:	f47f adcf 	bne.w	80054bc <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800591e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
                                remaining_dirty--;
 8005922:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8005926:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800592a:	3b01      	subs	r3, #1
 800592c:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 8005930:	f1bb 0f00 	cmp.w	fp, #0
 8005934:	d014      	beq.n	8005960 <_fx_utility_logical_sector_flush+0x614>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005936:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8005940:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005944:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005948:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 800594c:	b142      	cbz	r2, 8005960 <_fx_utility_logical_sector_flush+0x614>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800594e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                                remaining_dirty--;
 8005952:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8005956:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800595a:	3b01      	subs	r3, #1
 800595c:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 8005960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005964:	f112 32ff 	adds.w	r2, r2, #4294967295
 8005968:	f143 33ff 	adc.w	r3, r3, #4294967295
 800596c:	e9cd 2300 	strd	r2, r3, [sp]
 8005970:	ea5a 030b 	orrs.w	r3, sl, fp
 8005974:	bf08      	it	eq
 8005976:	f04f 0a00 	moveq.w	sl, #0
 800597a:	e63d      	b.n	80055f8 <_fx_utility_logical_sector_flush+0x2ac>
                bit_set++;
 800597c:	9a08      	ldr	r2, [sp, #32]
 800597e:	3201      	adds	r2, #1
 8005980:	9208      	str	r2, [sp, #32]
        while (valid_bit_map)
 8005982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005984:	0852      	lsrs	r2, r2, #1
 8005986:	9209      	str	r2, [sp, #36]	; 0x24
 8005988:	f47f ae59 	bne.w	800563e <_fx_utility_logical_sector_flush+0x2f2>
 800598c:	e595      	b.n	80054ba <_fx_utility_logical_sector_flush+0x16e>
 800598e:	9b08      	ldr	r3, [sp, #32]
 8005990:	e678      	b.n	8005684 <_fx_utility_logical_sector_flush+0x338>
 8005992:	bf00      	nop

08005994 <_fx_utility_logical_sector_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	b08b      	sub	sp, #44	; 0x2c
 800599a:	4604      	mov	r4, r0
 800599c:	4616      	mov	r6, r2
 800599e:	461f      	mov	r7, r3
 80059a0:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 80059a4:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80059a8:	2902      	cmp	r1, #2
{
 80059aa:	9106      	str	r1, [sp, #24]
 80059ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
    if (sector_type == FX_FAT_SECTOR)
 80059ae:	d104      	bne.n	80059ba <_fx_utility_logical_sector_read+0x26>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 80059b0:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 80059b4:	3301      	adds	r3, #1
 80059b6:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 80059ba:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80059be:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_reads++;
 80059c0:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80059c2:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_reads++;
 80059c4:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80059c8:	d803      	bhi.n	80059d2 <_fx_utility_logical_sector_read+0x3e>
 80059ca:	69a3      	ldr	r3, [r4, #24]
 80059cc:	4553      	cmp	r3, sl
 80059ce:	f080 80fa 	bcs.w	8005bc6 <_fx_utility_logical_sector_read+0x232>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 80059d2:	eb16 0805 	adds.w	r8, r6, r5
 80059d6:	f147 0900 	adc.w	r9, r7, #0
 80059da:	f118 30ff 	adds.w	r0, r8, #4294967295
 80059de:	f149 31ff 	adc.w	r1, r9, #4294967295
 80059e2:	f04f 0900 	mov.w	r9, #0
 80059e6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80059ea:	4589      	cmp	r9, r1
 80059ec:	bf08      	it	eq
 80059ee:	4282      	cmpeq	r2, r0
 80059f0:	f0c0 80e5 	bcc.w	8005bbe <_fx_utility_logical_sector_read+0x22a>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	f000 80de 	beq.w	8005bb6 <_fx_utility_logical_sector_read+0x222>
 80059fa:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 80059fe:	e00b      	b.n	8005a18 <_fx_utility_logical_sector_read+0x84>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8005a00:	3601      	adds	r6, #1
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8005a02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a04:	68a0      	ldr	r0, [r4, #8]
            logical_sector++;
 8005a06:	f147 0700 	adc.w	r7, r7, #0
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8005a0a:	f7fc ffc9 	bl	80029a0 <_fx_utility_memory_copy>
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8005a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        while (sectors)
 8005a10:	3d01      	subs	r5, #1
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8005a12:	449a      	add	sl, r3
        while (sectors)
 8005a14:	f000 80cf 	beq.w	8005bb6 <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8005a18:	f8cd b000 	str.w	fp, [sp]
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4620      	mov	r0, r4
 8005a22:	f002 f857 	bl	8007ad4 <_fx_utility_logical_sector_cache_entry_read>
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8005a26:	4651      	mov	r1, sl
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d0e9      	beq.n	8005a00 <_fx_utility_logical_sector_read+0x6c>
            sectors--;
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8005a2c:	f116 38ff 	adds.w	r8, r6, #4294967295
 8005a30:	f147 39ff 	adc.w	r9, r7, #4294967295
 8005a34:	eb18 0205 	adds.w	r2, r8, r5
 8005a38:	f149 0300 	adc.w	r3, r9, #0
 8005a3c:	4690      	mov	r8, r2
 8005a3e:	4699      	mov	r9, r3
 8005a40:	e009      	b.n	8005a56 <_fx_utility_logical_sector_read+0xc2>
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8005a42:	3d01      	subs	r5, #1
 8005a44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
 8005a46:	68a0      	ldr	r0, [r4, #8]
 8005a48:	fb02 a105 	mla	r1, r2, r5, sl
 8005a4c:	f7fc ffa8 	bl	80029a0 <_fx_utility_memory_copy>
        while (sectors)
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	f000 80b0 	beq.w	8005bb6 <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8005a56:	4642      	mov	r2, r8
                                    media_ptr -> fx_media_bytes_per_sector);

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8005a58:	f118 38ff 	adds.w	r8, r8, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	f8cd b000 	str.w	fp, [sp]
 8005a62:	4620      	mov	r0, r4
            end_sector--;
 8005a64:	f149 39ff 	adc.w	r9, r9, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8005a68:	f002 f834 	bl	8007ad4 <_fx_utility_logical_sector_cache_entry_read>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d0e8      	beq.n	8005a42 <_fx_utility_logical_sector_read+0xae>
            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8005a70:	f04f 0901 	mov.w	r9, #1
 8005a74:	f04f 0800 	mov.w	r8, #0
 8005a78:	4632      	mov	r2, r6
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	9500      	str	r5, [sp, #0]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a84:	f8cd 8004 	str.w	r8, [sp, #4]
 8005a88:	f7ff fc60 	bl	800534c <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8005a8c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8005a90:	9906      	ldr	r1, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005a92:	2290      	movs	r2, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 8005a94:	444b      	add	r3, r9
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8005a96:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8005a9a:	2904      	cmp	r1, #4
        media_ptr -> fx_media_driver_sectors =          sectors;
 8005a9c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8005aa0:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_read_requests++;
 8005aa4:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005aa8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8005aac:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90
        if (sector_type == FX_DATA_SECTOR)
 8005ab0:	f000 80fc 	beq.w	8005cac <_fx_utility_logical_sector_read+0x318>

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005ab4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8005abc:	2300      	movs	r3, #0

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8005abe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8005ac2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d176      	bne.n	8005bb8 <_fx_utility_logical_sector_read+0x224>
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	ebb5 0f93 	cmp.w	r5, r3, lsr #2
 8005ad0:	d272      	bcs.n	8005bb8 <_fx_utility_logical_sector_read+0x224>
 8005ad2:	f116 0801 	adds.w	r8, r6, #1
 8005ad6:	f105 31ff 	add.w	r1, r5, #4294967295

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005ada:	9007      	str	r0, [sp, #28]
 8005adc:	f147 0900 	adc.w	r9, r7, #0
 8005ae0:	eb18 0201 	adds.w	r2, r8, r1
 8005ae4:	f149 0300 	adc.w	r3, r9, #0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005ae8:	46d1      	mov	r9, sl
 8005aea:	46a2      	mov	sl, r4
 8005aec:	e9cd 2304 	strd	r2, r3, [sp, #16]
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8005af0:	f8cd b000 	str.w	fp, [sp]
 8005af4:	4632      	mov	r2, r6
 8005af6:	463b      	mov	r3, r7
 8005af8:	4650      	mov	r0, sl
 8005afa:	f001 ffeb 	bl	8007ad4 <_fx_utility_logical_sector_cache_entry_read>
                if (cache_entry == FX_NULL)
 8005afe:	4604      	mov	r4, r0
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d058      	beq.n	8005bb6 <_fx_utility_logical_sector_read+0x222>
                if ((cache_entry -> fx_cached_sector_valid) &&
 8005b04:	7c42      	ldrb	r2, [r0, #17]
 8005b06:	6803      	ldr	r3, [r0, #0]
 8005b08:	b372      	cbz	r2, 8005b68 <_fx_utility_logical_sector_read+0x1d4>
 8005b0a:	7c22      	ldrb	r2, [r4, #16]
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005b0c:	4650      	mov	r0, sl
                if ((cache_entry -> fx_cached_sector_valid) &&
 8005b0e:	b35a      	cbz	r2, 8005b68 <_fx_utility_logical_sector_read+0x1d4>
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005b10:	2101      	movs	r1, #1
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005b12:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
                    media_ptr -> fx_media_driver_write_requests++;
 8005b16:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8005b1a:	68a3      	ldr	r3, [r4, #8]
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005b1c:	f8ca 1088 	str.w	r1, [sl, #136]	; 0x88
                    media_ptr -> fx_media_driver_write_requests++;
 8005b20:	440a      	add	r2, r1
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8005b22:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005b26:	2190      	movs	r1, #144	; 0x90
                    media_ptr -> fx_media_driver_sectors =          1;
 8005b28:	2301      	movs	r3, #1
                    media_ptr -> fx_media_driver_write_requests++;
 8005b2a:	f8ca 21b0 	str.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005b2e:	f8ca 108c 	str.w	r1, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_sectors =          1;
 8005b32:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8005b36:	7ca3      	ldrb	r3, [r4, #18]
 8005b38:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8005b3c:	7ca3      	ldrb	r3, [r4, #18]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d002      	beq.n	8005b48 <_fx_utility_logical_sector_read+0x1b4>
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005b48:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 8005b4c:	4798      	blx	r3
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005b4e:	9b07      	ldr	r3, [sp, #28]

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8005b50:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005b54:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    if (media_ptr -> fx_media_driver_status)
 8005b58:	bb70      	cbnz	r0, 8005bb8 <_fx_utility_logical_sector_read+0x224>
                        return(media_ptr -> fx_media_driver_status);
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8005b5a:	7420      	strb	r0, [r4, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8005b5c:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	3a01      	subs	r2, #1
 8005b64:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8005b68:	f04f 0501 	mov.w	r5, #1

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8005b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        media_ptr -> fx_media_sector_cache_list_ptr;
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr,
 8005b6e:	4648      	mov	r0, r9
 8005b70:	4619      	mov	r1, r3
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8005b72:	7465      	strb	r5, [r4, #17]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8005b74:	9d06      	ldr	r5, [sp, #24]
                cache_entry -> fx_cached_sector =  logical_sector;
 8005b76:	e9c4 6702 	strd	r6, r7, [r4, #8]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8005b7a:	74a5      	strb	r5, [r4, #18]
                if (previous_cache_entry)
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	f000 8098 	beq.w	8005cb2 <_fx_utility_logical_sector_read+0x31e>
                    cache_entry -> fx_cached_sector_next_used =
 8005b82:	f8da 301c 	ldr.w	r3, [sl, #28]

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8005b86:	3601      	adds	r6, #1
                    previous_cache_entry -> fx_cached_sector_next_used =
 8005b88:	6965      	ldr	r5, [r4, #20]
                logical_sector++;
 8005b8a:	f147 0700 	adc.w	r7, r7, #0
                    previous_cache_entry -> fx_cached_sector_next_used =
 8005b8e:	6155      	str	r5, [r2, #20]
                _fx_utility_memory_copy(buffer_ptr,
 8005b90:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                    cache_entry -> fx_cached_sector_next_used =
 8005b94:	6163      	str	r3, [r4, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8005b96:	f8ca 401c 	str.w	r4, [sl, #28]
                _fx_utility_memory_copy(buffer_ptr,
 8005b9a:	f7fc ff01 	bl	80029a0 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8005b9e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8005ba2:	4499      	add	r9, r3
            while (sectors)
 8005ba4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ba8:	42a7      	cmp	r7, r4
 8005baa:	bf08      	it	eq
 8005bac:	429e      	cmpeq	r6, r3
 8005bae:	d19f      	bne.n	8005af0 <_fx_utility_logical_sector_read+0x15c>
 8005bb0:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8005bb4:	e000      	b.n	8005bb8 <_fx_utility_logical_sector_read+0x224>
            return(FX_SUCCESS);
 8005bb6:	2000      	movs	r0, #0
    }
}
 8005bb8:	b00b      	add	sp, #44	; 0x2c
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 8005bbe:	2089      	movs	r0, #137	; 0x89
}
 8005bc0:	b00b      	add	sp, #44	; 0x2c
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8005bc6:	a909      	add	r1, sp, #36	; 0x24
 8005bc8:	4632      	mov	r2, r6
 8005bca:	463b      	mov	r3, r7
 8005bcc:	4620      	mov	r0, r4
 8005bce:	9100      	str	r1, [sp, #0]
 8005bd0:	f001 ff80 	bl	8007ad4 <_fx_utility_logical_sector_cache_entry_read>
        if (cache_entry == FX_NULL)
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d0ed      	beq.n	8005bb6 <_fx_utility_logical_sector_read+0x222>
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8005bda:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8005bde:	3301      	adds	r3, #1
 8005be0:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
        if ((cache_entry -> fx_cached_sector_valid) &&
 8005be4:	7c43      	ldrb	r3, [r0, #17]
 8005be6:	b35b      	cbz	r3, 8005c40 <_fx_utility_logical_sector_read+0x2ac>
 8005be8:	7c03      	ldrb	r3, [r0, #16]
 8005bea:	b34b      	cbz	r3, 8005c40 <_fx_utility_logical_sector_read+0x2ac>
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005bec:	2101      	movs	r1, #1
            media_ptr -> fx_media_driver_write_requests++;
 8005bee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005bf2:	6802      	ldr	r2, [r0, #0]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005bf4:	2090      	movs	r0, #144	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 8005bf6:	440b      	add	r3, r1
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005bf8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005bfc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 8005c00:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8005c04:	68ab      	ldr	r3, [r5, #8]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005c06:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005c0a:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sectors =          1;
 8005c0c:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8005c10:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8005c14:	7cab      	ldrb	r3, [r5, #18]
 8005c16:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8005c1a:	7cab      	ldrb	r3, [r5, #18]
 8005c1c:	2b04      	cmp	r3, #4
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005c1e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005c22:	bf18      	it	ne
 8005c24:	f8c4 10b0 	strne.w	r1, [r4, #176]	; 0xb0
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005c28:	4798      	blx	r3
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005c2a:	2300      	movs	r3, #0
            if (media_ptr -> fx_media_driver_status)
 8005c2c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005c30:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
            if (media_ptr -> fx_media_driver_status)
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d1bf      	bne.n	8005bb8 <_fx_utility_logical_sector_read+0x224>
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8005c38:	7428      	strb	r0, [r5, #16]
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8005c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	6263      	str	r3, [r4, #36]	; 0x24
        if (logical_sector >= (ULONG)media_ptr -> fx_media_total_sectors)
 8005c40:	2100      	movs	r1, #0
 8005c42:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8005c46:	428f      	cmp	r7, r1
 8005c48:	bf08      	it	eq
 8005c4a:	4296      	cmpeq	r6, r2
 8005c4c:	d2b7      	bcs.n	8005bbe <_fx_utility_logical_sector_read+0x22a>
        media_ptr -> fx_media_driver_read_requests++;
 8005c4e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8005c52:	2100      	movs	r1, #0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005c54:	2290      	movs	r2, #144	; 0x90
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005c56:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_read_requests++;
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	e9c4 3624 	strd	r3, r6, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8005c64:	9b06      	ldr	r3, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005c66:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
        if (sector_type == FX_DATA_SECTOR)
 8005c6a:	2b04      	cmp	r3, #4
        media_ptr -> fx_media_driver_sectors =          1;
 8005c6c:	f04f 0201 	mov.w	r2, #1
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8005c70:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_sectors =          1;
 8005c74:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8005c78:	bf08      	it	eq
 8005c7a:	f8c4 20b4 	streq.w	r2, [r4, #180]	; 0xb4
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005c7e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005c82:	4798      	blx	r3
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8005c84:	2300      	movs	r3, #0
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8005c86:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8005c8a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8005c8e:	bb12      	cbnz	r2, 8005cd6 <_fx_utility_logical_sector_read+0x342>
            cache_entry -> fx_cached_sector_type =  sector_type;
 8005c90:	9b06      	ldr	r3, [sp, #24]
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8005c92:	2201      	movs	r2, #1
            cache_entry -> fx_cached_sector_type =  sector_type;
 8005c94:	74ab      	strb	r3, [r5, #18]
            if (previous_cache_entry)
 8005c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8005c98:	746a      	strb	r2, [r5, #17]
            cache_entry -> fx_cached_sector =  logical_sector;
 8005c9a:	e9c5 6702 	strd	r6, r7, [r5, #8]
            if (previous_cache_entry)
 8005c9e:	b30b      	cbz	r3, 8005ce4 <_fx_utility_logical_sector_read+0x350>
                    cache_entry -> fx_cached_sector_next_used;
 8005ca0:	6969      	ldr	r1, [r5, #20]
                cache_entry -> fx_cached_sector_next_used =
 8005ca2:	69e2      	ldr	r2, [r4, #28]
                previous_cache_entry -> fx_cached_sector_next_used =
 8005ca4:	6159      	str	r1, [r3, #20]
                cache_entry -> fx_cached_sector_next_used =
 8005ca6:	616a      	str	r2, [r5, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8005ca8:	61e5      	str	r5, [r4, #28]
 8005caa:	e01b      	b.n	8005ce4 <_fx_utility_logical_sector_read+0x350>
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8005cac:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
 8005cb0:	e700      	b.n	8005ab4 <_fx_utility_logical_sector_read+0x120>
                logical_sector++;
 8005cb2:	3601      	adds	r6, #1
                _fx_utility_memory_copy(buffer_ptr,
 8005cb4:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                logical_sector++;
 8005cb8:	f147 0700 	adc.w	r7, r7, #0
                _fx_utility_memory_copy(buffer_ptr,
 8005cbc:	f7fc fe70 	bl	80029a0 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8005cc0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8005cc4:	4499      	add	r9, r3
            while (sectors)
 8005cc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005cca:	42bc      	cmp	r4, r7
 8005ccc:	bf08      	it	eq
 8005cce:	42b3      	cmpeq	r3, r6
 8005cd0:	f47f af0e 	bne.w	8005af0 <_fx_utility_logical_sector_read+0x15c>
 8005cd4:	e76c      	b.n	8005bb0 <_fx_utility_logical_sector_read+0x21c>
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	f04f 31ff 	mov.w	r1, #4294967295
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8005cde:	746b      	strb	r3, [r5, #17]
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8005ce0:	e9c5 0102 	strd	r0, r1, [r5, #8]
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8005ce4:	682b      	ldr	r3, [r5, #0]
        return(media_ptr -> fx_media_driver_status);
 8005ce6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8005cea:	60a3      	str	r3, [r4, #8]
        return(media_ptr -> fx_media_driver_status);
 8005cec:	e764      	b.n	8005bb8 <_fx_utility_logical_sector_read+0x224>
 8005cee:	bf00      	nop

08005cf0 <_fx_utility_logical_sector_write>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	461f      	mov	r7, r3
 8005cfc:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8005d00:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8005d04:	2d02      	cmp	r5, #2
 8005d06:	d104      	bne.n	8005d12 <_fx_utility_logical_sector_write+0x22>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8005d08:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8005d12:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8005d16:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_writes++;
 8005d18:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8005d1a:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_writes++;
 8005d1c:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8005d20:	d802      	bhi.n	8005d28 <_fx_utility_logical_sector_write+0x38>
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	4553      	cmp	r3, sl
 8005d26:	d24b      	bcs.n	8005dc0 <_fx_utility_logical_sector_write+0xd0>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8005d28:	ea56 0307 	orrs.w	r3, r6, r7
 8005d2c:	d044      	beq.n	8005db8 <_fx_utility_logical_sector_write+0xc8>
 8005d2e:	2f00      	cmp	r7, #0
 8005d30:	bf08      	it	eq
 8005d32:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8005d36:	d03f      	beq.n	8005db8 <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 8005d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4698      	mov	r8, r3
 8005d42:	eb18 0b06 	adds.w	fp, r8, r6
 8005d46:	eb49 0c07 	adc.w	ip, r9, r7
 8005d4a:	f11b 30ff 	adds.w	r0, fp, #4294967295
 8005d4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8005d52:	460b      	mov	r3, r1
 8005d54:	f14c 31ff 	adc.w	r1, ip, #4294967295
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	bf08      	it	eq
 8005d5c:	4290      	cmpeq	r0, r2
 8005d5e:	d22b      	bcs.n	8005db8 <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8005d60:	f04f 0b01 	mov.w	fp, #1
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f8cd b008 	str.w	fp, [sp, #8]
 8005d6e:	e9cd 8900 	strd	r8, r9, [sp]
 8005d72:	f7ff faeb 	bl	800534c <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8005d76:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005d7a:	2290      	movs	r2, #144	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8005d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 8005d7e:	445b      	add	r3, fp
        media_ptr -> fx_media_driver_sector_type =      sector_type;

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8005d80:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005d82:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
        media_ptr -> fx_media_driver_sectors =          sectors;
 8005d86:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8005d8a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8005d8e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005d92:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005d96:	bf18      	it	ne
 8005d98:	f8c4 b0b0 	strne.w	fp, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8005d9c:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8005da0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005da4:	4620      	mov	r0, r4
 8005da6:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005da8:	2300      	movs	r3, #0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8005daa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8005dae:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    }
}
 8005db2:	b005      	add	sp, #20
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 8005db8:	2089      	movs	r0, #137	; 0x89
}
 8005dba:	b005      	add	sp, #20
 8005dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_sector_cache_hashed)
 8005dc0:	6923      	ldr	r3, [r4, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d062      	beq.n	8005e8c <_fx_utility_logical_sector_write+0x19c>
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8005dc6:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8005dca:	58e1      	ldr	r1, [r4, r3]
 8005dcc:	4031      	ands	r1, r6
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8005dce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005dd2:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8005dd6:	f501 614a 	add.w	r1, r1, #3232	; 0xca0
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8005dda:	7c4b      	ldrb	r3, [r1, #17]
 8005ddc:	b12b      	cbz	r3, 8005dea <_fx_utility_logical_sector_write+0xfa>
 8005dde:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005de2:	429f      	cmp	r7, r3
 8005de4:	bf08      	it	eq
 8005de6:	4296      	cmpeq	r6, r2
 8005de8:	d063      	beq.n	8005eb2 <_fx_utility_logical_sector_write+0x1c2>
 8005dea:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8005dee:	f101 0018 	add.w	r0, r1, #24
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8005df2:	b12b      	cbz	r3, 8005e00 <_fx_utility_logical_sector_write+0x110>
 8005df4:	e9d1 2308 	ldrd	r2, r3, [r1, #32]
 8005df8:	429f      	cmp	r7, r3
 8005dfa:	bf08      	it	eq
 8005dfc:	4296      	cmpeq	r6, r2
 8005dfe:	d062      	beq.n	8005ec6 <_fx_utility_logical_sector_write+0x1d6>
 8005e00:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8005e04:	f101 0030 	add.w	r0, r1, #48	; 0x30
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8005e08:	b12b      	cbz	r3, 8005e16 <_fx_utility_logical_sector_write+0x126>
 8005e0a:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8005e0e:	429f      	cmp	r7, r3
 8005e10:	bf08      	it	eq
 8005e12:	4296      	cmpeq	r6, r2
 8005e14:	d057      	beq.n	8005ec6 <_fx_utility_logical_sector_write+0x1d6>
 8005e16:	f891 3059 	ldrb.w	r3, [r1, #89]	; 0x59
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8005e1a:	f101 0248 	add.w	r2, r1, #72	; 0x48
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8005e1e:	b12b      	cbz	r3, 8005e2c <_fx_utility_logical_sector_write+0x13c>
 8005e20:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8005e24:	42b9      	cmp	r1, r7
 8005e26:	bf08      	it	eq
 8005e28:	42b0      	cmpeq	r0, r6
 8005e2a:	d041      	beq.n	8005eb0 <_fx_utility_logical_sector_write+0x1c0>
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8005e2c:	ea56 0307 	orrs.w	r3, r6, r7
 8005e30:	d0c2      	beq.n	8005db8 <_fx_utility_logical_sector_write+0xc8>
 8005e32:	2f00      	cmp	r7, #0
 8005e34:	bf08      	it	eq
 8005e36:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8005e3a:	d0bd      	beq.n	8005db8 <_fx_utility_logical_sector_write+0xc8>
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 8005e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e3e:	eb16 0803 	adds.w	r8, r6, r3
 8005e42:	f147 0900 	adc.w	r9, r7, #0
 8005e46:	f118 30ff 	adds.w	r0, r8, #4294967295
 8005e4a:	f149 31ff 	adc.w	r1, r9, #4294967295
 8005e4e:	f04f 0900 	mov.w	r9, #0
 8005e52:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8005e56:	4549      	cmp	r1, r9
 8005e58:	bf08      	it	eq
 8005e5a:	4290      	cmpeq	r0, r2
 8005e5c:	d2ac      	bcs.n	8005db8 <_fx_utility_logical_sector_write+0xc8>
        media_ptr -> fx_media_driver_write_requests++;
 8005e5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8005e62:	2201      	movs	r2, #1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005e64:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          sectors;
 8005e66:	980f      	ldr	r0, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 8005e68:	4413      	add	r3, r2
        if (sector_type != FX_DATA_SECTOR)
 8005e6a:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8005e6c:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8005e70:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          sectors;
 8005e74:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8005e78:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8005e7c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8005e80:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
        if (sector_type != FX_DATA_SECTOR)
 8005e84:	d08c      	beq.n	8005da0 <_fx_utility_logical_sector_write+0xb0>
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8005e86:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8005e8a:	e789      	b.n	8005da0 <_fx_utility_logical_sector_write+0xb0>
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8005e8c:	6960      	ldr	r0, [r4, #20]
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8005e8e:	69e1      	ldr	r1, [r4, #28]
            while (cache_size--)
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d0cb      	beq.n	8005e2c <_fx_utility_logical_sector_write+0x13c>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8005e94:	7c4b      	ldrb	r3, [r1, #17]
 8005e96:	3801      	subs	r0, #1
 8005e98:	b12b      	cbz	r3, 8005ea6 <_fx_utility_logical_sector_write+0x1b6>
 8005e9a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005e9e:	42bb      	cmp	r3, r7
 8005ea0:	bf08      	it	eq
 8005ea2:	42b2      	cmpeq	r2, r6
 8005ea4:	d005      	beq.n	8005eb2 <_fx_utility_logical_sector_write+0x1c2>
                if (cache_entry -> fx_cached_sector_next_used)
 8005ea6:	694b      	ldr	r3, [r1, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf18      	it	ne
 8005eac:	4619      	movne	r1, r3
 8005eae:	e7ef      	b.n	8005e90 <_fx_utility_logical_sector_write+0x1a0>
 8005eb0:	4611      	mov	r1, r2
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 8005eb2:	7c08      	ldrb	r0, [r1, #16]
 8005eb4:	b108      	cbz	r0, 8005eba <_fx_utility_logical_sector_write+0x1ca>
            return(FX_SUCCESS);
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e77f      	b.n	8005dba <_fx_utility_logical_sector_write+0xca>
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8005eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8005ebc:	2201      	movs	r2, #1
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8005ebe:	4413      	add	r3, r2
 8005ec0:	6263      	str	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8005ec2:	740a      	strb	r2, [r1, #16]
 8005ec4:	e779      	b.n	8005dba <_fx_utility_logical_sector_write+0xca>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	e7f3      	b.n	8005eb2 <_fx_utility_logical_sector_write+0x1c2>
 8005eca:	bf00      	nop

08005ecc <_fx_directory_entry_write>:


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8005ecc:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8005ed0:	680a      	ldr	r2, [r1, #0]
    media_ptr -> fx_media_directory_entry_writes++;
 8005ed2:	3301      	adds	r3, #1
{
 8005ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_directory_entry_writes++;
 8005ed8:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
{
 8005edc:	b095      	sub	sp, #84	; 0x54
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8005ede:	7813      	ldrb	r3, [r2, #0]
{
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	460d      	mov	r5, r1
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8005ee4:	2be5      	cmp	r3, #229	; 0xe5
 8005ee6:	f000 848c 	beq.w	8006802 <_fx_directory_entry_write+0x936>
 8005eea:	2301      	movs	r3, #1
 8005eec:	9307      	str	r3, [sp, #28]

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8005eee:	6d33      	ldr	r3, [r6, #80]	; 0x50
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8005ef0:	f8d5 b048 	ldr.w	fp, [r5, #72]	; 0x48
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8005ef4:	e9d5 8910 	ldrd	r8, r9, [r5, #64]	; 0x40
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8005ef8:	4543      	cmp	r3, r8
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8005efa:	f8cd 8018 	str.w	r8, [sp, #24]
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8005efe:	f200 8388 	bhi.w	8006612 <_fx_directory_entry_write+0x746>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8005f02:	eba8 0303 	sub.w	r3, r8, r3
 8005f06:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8005f08:	fbb3 f2f1 	udiv	r2, r3, r1
 8005f0c:	fb01 3312 	mls	r3, r1, r2, r3
 8005f10:	9309      	str	r3, [sp, #36]	; 0x24
 8005f12:	1c93      	adds	r3, r2, #2
 8005f14:	930b      	str	r3, [sp, #44]	; 0x2c
        cluster =  0;
        relative_sector =  0;
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8005f16:	68b4      	ldr	r4, [r6, #8]
 8005f18:	2101      	movs	r1, #1
 8005f1a:	f04f 0a03 	mov.w	sl, #3
 8005f1e:	4642      	mov	r2, r8
 8005f20:	4630      	mov	r0, r6
 8005f22:	464b      	mov	r3, r9
 8005f24:	f8cd a008 	str.w	sl, [sp, #8]
 8005f28:	9101      	str	r1, [sp, #4]
 8005f2a:	9400      	str	r4, [sp, #0]
 8005f2c:	f7ff fd32 	bl	8005994 <_fx_utility_logical_sector_read>
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8005f30:	4602      	mov	r2, r0
 8005f32:	900a      	str	r0, [sp, #40]	; 0x28
 8005f34:	2800      	cmp	r0, #0
 8005f36:	f040 8368 	bne.w	800660a <_fx_directory_entry_write+0x73e>
        /* Return the error status.  */
        return(status);
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8005f3a:	68b3      	ldr	r3, [r6, #8]
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	2100      	movs	r1, #0
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8005f40:	6cac      	ldr	r4, [r5, #72]	; 0x48
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8005f42:	696f      	ldr	r7, [r5, #20]
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8005f44:	9308      	str	r3, [sp, #32]
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8005f46:	441c      	add	r4, r3
 8005f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f000 8364 	beq.w	800661a <_fx_directory_entry_write+0x74e>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	f893 9000 	ldrb.w	r9, [r3]
 8005f58:	f1b9 0f00 	cmp.w	r9, #0
 8005f5c:	f000 85a5 	beq.w	8006aaa <_fx_directory_entry_write+0xbde>
 8005f60:	9205      	str	r2, [sp, #20]
 8005f62:	4611      	mov	r1, r2
 8005f64:	920e      	str	r2, [sp, #56]	; 0x38
 8005f66:	4690      	mov	r8, r2
 8005f68:	1c5f      	adds	r7, r3, #1
 8005f6a:	464a      	mov	r2, r9
 8005f6c:	e00e      	b.n	8005f8c <_fx_directory_entry_write+0xc0>
                dotpos   = len + 1;
                continue;
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8005f6e:	f1b8 0f07 	cmp.w	r8, #7
 8005f72:	d807      	bhi.n	8005f84 <_fx_directory_entry_write+0xb8>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8005f74:	a914      	add	r1, sp, #80	; 0x50
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8005f76:	2a20      	cmp	r2, #32
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8005f78:	4441      	add	r1, r8
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8005f7a:	d003      	beq.n	8005f84 <_fx_directory_entry_write+0xb8>
                i++;
 8005f7c:	f108 0801 	add.w	r8, r8, #1
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8005f80:	f801 2c0c 	strb.w	r2, [r1, #-12]
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8005f84:	f817 2b01 	ldrb.w	r2, [r7], #1
 8005f88:	4601      	mov	r1, r0
 8005f8a:	b16a      	cbz	r2, 8005fa8 <_fx_directory_entry_write+0xdc>
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8005f8c:	2a2e      	cmp	r2, #46	; 0x2e
 8005f8e:	f101 0001 	add.w	r0, r1, #1
 8005f92:	d1ec      	bne.n	8005f6e <_fx_directory_entry_write+0xa2>
                if (len == 0)
 8005f94:	2900      	cmp	r1, #0
 8005f96:	d0f5      	beq.n	8005f84 <_fx_directory_entry_write+0xb8>
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8005f98:	f817 2b01 	ldrb.w	r2, [r7], #1
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	9005      	str	r0, [sp, #20]
 8005fa0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1f1      	bne.n	8005f8c <_fx_directory_entry_write+0xc0>
 8005fa8:	4abc      	ldr	r2, [pc, #752]	; (800629c <_fx_directory_entry_write+0x3d0>)
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8005faa:	f1b8 0f0a 	cmp.w	r8, #10
 8005fae:	fba2 2a00 	umull	r2, sl, r2, r0
 8005fb2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8005fb6:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8005fba:	4657      	mov	r7, sl
 8005fbc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8005fc0:	eba0 0a02 	sub.w	sl, r0, r2
 8005fc4:	d80f      	bhi.n	8005fe6 <_fx_directory_entry_write+0x11a>
        {
            shortname[j] =  ' ';
 8005fc6:	f108 0001 	add.w	r0, r8, #1
 8005fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fcc:	ab11      	add	r3, sp, #68	; 0x44
 8005fce:	f1c8 020b 	rsb	r2, r8, #11
 8005fd2:	280b      	cmp	r0, #11
 8005fd4:	f04f 0120 	mov.w	r1, #32
 8005fd8:	eb03 0008 	add.w	r0, r3, r8
 8005fdc:	bf88      	it	hi
 8005fde:	2201      	movhi	r2, #1
 8005fe0:	f003 fb25 	bl	800962e <memset>
 8005fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 8005fe6:	9905      	ldr	r1, [sp, #20]
 8005fe8:	b331      	cbz	r1, 8006038 <_fx_directory_entry_write+0x16c>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8005fea:	5c5a      	ldrb	r2, [r3, r1]
 8005fec:	b19a      	cbz	r2, 8006016 <_fx_directory_entry_write+0x14a>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8005fee:	3101      	adds	r1, #1
 8005ff0:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8005ff4:	5c58      	ldrb	r0, [r3, r1]
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f000 85dc 	beq.w	8006bb4 <_fx_directory_entry_write+0xce8>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8005ffc:	9905      	ldr	r1, [sp, #20]
 8005ffe:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
 8006002:	1c8a      	adds	r2, r1, #2
 8006004:	5c99      	ldrb	r1, [r3, r2]
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8006006:	2900      	cmp	r1, #0
 8006008:	f000 85d1 	beq.w	8006bae <_fx_directory_entry_write+0xce2>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800600c:	9a05      	ldr	r2, [sp, #20]
 800600e:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
 8006012:	3203      	adds	r2, #3
 8006014:	9205      	str	r2, [sp, #20]
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;

            for (; dotfound <= 7; dotfound++)
 8006016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006018:	f893 9000 	ldrb.w	r9, [r3]
 800601c:	2a07      	cmp	r2, #7
 800601e:	f200 8552 	bhi.w	8006ac6 <_fx_directory_entry_write+0xbfa>
 8006022:	930e      	str	r3, [sp, #56]	; 0x38
 8006024:	a811      	add	r0, sp, #68	; 0x44
 8006026:	4613      	mov	r3, r2
 8006028:	2120      	movs	r1, #32
 800602a:	f1c2 0208 	rsb	r2, r2, #8
 800602e:	4418      	add	r0, r3
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 8006030:	4698      	mov	r8, r3
 8006032:	f003 fafc 	bl	800962e <memset>
 8006036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 8006038:	f1ba 0f00 	cmp.w	sl, #0
 800603c:	f040 846b 	bne.w	8006916 <_fx_directory_entry_write+0xa4a>
        /* Default the name match to true.  */
        match =  TX_TRUE;

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 8006040:	2100      	movs	r1, #0
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 8006042:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
        k =  0;
 8006046:	460a      	mov	r2, r1
            if (shortname[k] == ' ')
 8006048:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 800604c:	4494      	add	ip, r2
 800604e:	f81c cc0c 	ldrb.w	ip, [ip, #-12]
 8006052:	f1bc 0f20 	cmp.w	ip, #32
 8006056:	f040 853c 	bne.w	8006ad2 <_fx_directory_entry_write+0xc06>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800605a:	f1b9 0f00 	cmp.w	r9, #0
 800605e:	f000 8548 	beq.w	8006af2 <_fx_directory_entry_write+0xc26>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8006062:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006066:	f000 84fd 	beq.w	8006a64 <_fx_directory_entry_write+0xb98>
            l++;
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800606a:	9a05      	ldr	r2, [sp, #20]
 800606c:	2a00      	cmp	r2, #0
 800606e:	f040 8457 	bne.w	8006920 <_fx_directory_entry_write+0xa54>
 8006072:	f1b8 0f03 	cmp.w	r8, #3
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 8006076:	f8d5 904c 	ldr.w	r9, [r5, #76]	; 0x4c
            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
            {
                i = 3;
            }
            shortname[i++] = '~';
 800607a:	aa14      	add	r2, sp, #80	; 0x50
 800607c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8006080:	bf28      	it	cs
 8006082:	f04f 0803 	movcs.w	r8, #3
            entry = entry % 0x10000;
 8006086:	fa1f f389 	uxth.w	r3, r9
                {
                     temp = ((entry >> 4) & 0xf);
                }
                else
                {
                     temp = ((entry) & 0xf);
 800608a:	f009 090f 	and.w	r9, r9, #15
            shortname[i++] = '~';
 800608e:	eb02 0108 	add.w	r1, r2, r8
                    temp =  ((entry >> 12) & 0xf);
 8006092:	0b18      	lsrs	r0, r3, #12
                     temp = ((entry >> 4) & 0xf);
 8006094:	f3c3 1c03 	ubfx	ip, r3, #4, #4
            shortname[i++] = '~';
 8006098:	f108 0201 	add.w	r2, r8, #1
 800609c:	f801 ec0c 	strb.w	lr, [r1, #-12]
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 80060a0:	2809      	cmp	r0, #9
 80060a2:	fa5f fe80 	uxtb.w	lr, r0
                     temp = ((entry >> 8) & 0xf);
 80060a6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80060aa:	a814      	add	r0, sp, #80	; 0x50
 80060ac:	f108 0102 	add.w	r1, r8, #2
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80060b0:	bf8c      	ite	hi
 80060b2:	f10e 0e37 	addhi.w	lr, lr, #55	; 0x37
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 80060b6:	f10e 0e30 	addls.w	lr, lr, #48	; 0x30
 80060ba:	4402      	add	r2, r0
                if (temp > 9)
 80060bc:	2b09      	cmp	r3, #9
 80060be:	b2d8      	uxtb	r0, r3
 80060c0:	ab14      	add	r3, sp, #80	; 0x50
 80060c2:	f802 ec0c 	strb.w	lr, [r2, #-12]
 80060c6:	f108 0203 	add.w	r2, r8, #3
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80060ca:	bf8c      	ite	hi
 80060cc:	3037      	addhi	r0, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 80060ce:	3030      	addls	r0, #48	; 0x30
 80060d0:	4419      	add	r1, r3
                if (temp > 9)
 80060d2:	f1bc 0f09 	cmp.w	ip, #9
 80060d6:	fa5f f38c 	uxtb.w	r3, ip
 80060da:	f108 0804 	add.w	r8, r8, #4
 80060de:	f801 0c0c 	strb.w	r0, [r1, #-12]
 80060e2:	a914      	add	r1, sp, #80	; 0x50
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80060e4:	bf8c      	ite	hi
 80060e6:	3337      	addhi	r3, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 80060e8:	3330      	addls	r3, #48	; 0x30
 80060ea:	440a      	add	r2, r1
                if (temp > 9)
 80060ec:	f1b9 0f09 	cmp.w	r9, #9
 80060f0:	f802 3c0c 	strb.w	r3, [r2, #-12]
 80060f4:	fa5f f389 	uxtb.w	r3, r9
 80060f8:	aa14      	add	r2, sp, #80	; 0x50
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80060fa:	bf8c      	ite	hi
 80060fc:	3337      	addhi	r3, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 80060fe:	3330      	addls	r3, #48	; 0x30
 8006100:	4490      	add	r8, r2
 8006102:	f808 3c0c 	strb.w	r3, [r8, #-12]
 8006106:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
        /* Set end of short string to NULL.   */
        shortname[11] = 0;

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800610a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        shortname[11] = 0;
 800610e:	2200      	movs	r2, #0
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8006110:	2be5      	cmp	r3, #229	; 0xe5
        shortname[11] = 0;
 8006112:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8006116:	f040 837d 	bne.w	8006814 <_fx_directory_entry_write+0x948>
 800611a:	9a07      	ldr	r2, [sp, #28]
 800611c:	2a00      	cmp	r2, #0
 800611e:	f000 8379 	beq.w	8006814 <_fx_directory_entry_write+0x948>
        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 8006122:	238f      	movs	r3, #143	; 0x8f
 8006124:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8006128:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            if ((alpha >= 'a') && (alpha <= 'z'))
 800612c:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8006130:	2b19      	cmp	r3, #25
 8006132:	d801      	bhi.n	8006138 <_fx_directory_entry_write+0x26c>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006134:	3a20      	subs	r2, #32
 8006136:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8006138:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
            shortname[i] =  alpha;
 800613c:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
            if ((alpha >= 'a') && (alpha <= 'z'))
 8006140:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006144:	2a19      	cmp	r2, #25
 8006146:	d801      	bhi.n	800614c <_fx_directory_entry_write+0x280>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006148:	3b20      	subs	r3, #32
 800614a:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 800614c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
            shortname[i] =  alpha;
 8006150:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if ((alpha >= 'a') && (alpha <= 'z'))
 8006154:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8006158:	2b19      	cmp	r3, #25
 800615a:	d801      	bhi.n	8006160 <_fx_directory_entry_write+0x294>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800615c:	3a20      	subs	r2, #32
 800615e:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8006160:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
            shortname[i] =  alpha;
 8006164:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
            if ((alpha >= 'a') && (alpha <= 'z'))
 8006168:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800616c:	2a19      	cmp	r2, #25
 800616e:	d801      	bhi.n	8006174 <_fx_directory_entry_write+0x2a8>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006170:	3b20      	subs	r3, #32
 8006172:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8006174:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
            shortname[i] =  alpha;
 8006178:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            if ((alpha >= 'a') && (alpha <= 'z'))
 800617c:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8006180:	2b19      	cmp	r3, #25
 8006182:	d801      	bhi.n	8006188 <_fx_directory_entry_write+0x2bc>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006184:	3a20      	subs	r2, #32
 8006186:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8006188:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
            shortname[i] =  alpha;
 800618c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
            if ((alpha >= 'a') && (alpha <= 'z'))
 8006190:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006194:	2a19      	cmp	r2, #25
 8006196:	d801      	bhi.n	800619c <_fx_directory_entry_write+0x2d0>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006198:	3b20      	subs	r3, #32
 800619a:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 800619c:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
            shortname[i] =  alpha;
 80061a0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            if ((alpha >= 'a') && (alpha <= 'z'))
 80061a4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80061a8:	2b19      	cmp	r3, #25
 80061aa:	d801      	bhi.n	80061b0 <_fx_directory_entry_write+0x2e4>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80061ac:	3a20      	subs	r2, #32
 80061ae:	b2d2      	uxtb	r2, r2
            shortname[i] =  alpha;
 80061b0:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
            if ((alpha >= 'a') && (alpha <= 'z'))
 80061b4:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
            alpha = shortname[i];
 80061b8:	4603      	mov	r3, r0
            if ((alpha >= 'a') && (alpha <= 'z'))
 80061ba:	2a19      	cmp	r2, #25
 80061bc:	d802      	bhi.n	80061c4 <_fx_directory_entry_write+0x2f8>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80061be:	f1a0 0320 	sub.w	r3, r0, #32
 80061c2:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 80061c4:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
            shortname[i] =  alpha;
 80061c8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
            if ((alpha >= 'a') && (alpha <= 'z'))
 80061cc:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80061d0:	2b19      	cmp	r3, #25
 80061d2:	d801      	bhi.n	80061d8 <_fx_directory_entry_write+0x30c>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80061d4:	3a20      	subs	r2, #32
 80061d6:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 80061d8:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            shortname[i] =  alpha;
 80061dc:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
            if ((alpha >= 'a') && (alpha <= 'z'))
 80061e0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061e4:	2a19      	cmp	r2, #25
 80061e6:	d801      	bhi.n	80061ec <_fx_directory_entry_write+0x320>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80061e8:	3b20      	subs	r3, #32
 80061ea:	b2db      	uxtb	r3, r3
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 80061ec:	792a      	ldrb	r2, [r5, #4]
            shortname[i] =  alpha;
 80061ee:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	f000 80c7 	beq.w	8006386 <_fx_directory_entry_write+0x4ba>
 80061f8:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80061fc:	2a2e      	cmp	r2, #46	; 0x2e
 80061fe:	9312      	str	r3, [sp, #72]	; 0x48
 8006200:	9311      	str	r3, [sp, #68]	; 0x44
 8006202:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8006206:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800620a:	f000 83fd 	beq.w	8006a08 <_fx_directory_entry_write+0xb3c>
 800620e:	796b      	ldrb	r3, [r5, #5]

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8006210:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8475 	beq.w	8006b04 <_fx_directory_entry_write+0xc38>
 800621a:	2b2e      	cmp	r3, #46	; 0x2e
 800621c:	f000 8472 	beq.w	8006b04 <_fx_directory_entry_write+0xc38>
                shortname[j] =  alpha;
 8006220:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8006224:	79ab      	ldrb	r3, [r5, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8469 	beq.w	8006afe <_fx_directory_entry_write+0xc32>
 800622c:	2b2e      	cmp	r3, #46	; 0x2e
 800622e:	f000 8466 	beq.w	8006afe <_fx_directory_entry_write+0xc32>
                shortname[j] =  alpha;
 8006232:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8006236:	79eb      	ldrb	r3, [r5, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 846a 	beq.w	8006b12 <_fx_directory_entry_write+0xc46>
 800623e:	2b2e      	cmp	r3, #46	; 0x2e
 8006240:	f000 8467 	beq.w	8006b12 <_fx_directory_entry_write+0xc46>
                shortname[j] =  alpha;
 8006244:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8006248:	7a2b      	ldrb	r3, [r5, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8484 	beq.w	8006b58 <_fx_directory_entry_write+0xc8c>
 8006250:	2b2e      	cmp	r3, #46	; 0x2e
 8006252:	f000 8481 	beq.w	8006b58 <_fx_directory_entry_write+0xc8c>
                shortname[j] =  alpha;
 8006256:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800625a:	7a6b      	ldrb	r3, [r5, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8478 	beq.w	8006b52 <_fx_directory_entry_write+0xc86>
 8006262:	2b2e      	cmp	r3, #46	; 0x2e
 8006264:	f000 8475 	beq.w	8006b52 <_fx_directory_entry_write+0xc86>
                shortname[j] =  alpha;
 8006268:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800626c:	7aab      	ldrb	r3, [r5, #10]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 846c 	beq.w	8006b4c <_fx_directory_entry_write+0xc80>
 8006274:	2b2e      	cmp	r3, #46	; 0x2e
 8006276:	f000 8469 	beq.w	8006b4c <_fx_directory_entry_write+0xc80>
                shortname[j] =  alpha;
 800627a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 800627e:	7aeb      	ldrb	r3, [r5, #11]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006280:	2b2e      	cmp	r3, #46	; 0x2e
 8006282:	f000 8460 	beq.w	8006b46 <_fx_directory_entry_write+0xc7a>
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 845d 	beq.w	8006b46 <_fx_directory_entry_write+0xc7a>
                shortname[j] =  alpha;
 800628c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8006290:	2208      	movs	r2, #8
 8006292:	7b2b      	ldrb	r3, [r5, #12]
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 83b8 	bne.w	8006a0a <_fx_directory_entry_write+0xb3e>
 800629a:	e001      	b.n	80062a0 <_fx_directory_entry_write+0x3d4>
 800629c:	4ec4ec4f 	.word	0x4ec4ec4f
            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 80062a0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 80062a4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80062a8:	2a19      	cmp	r2, #25
 80062aa:	d801      	bhi.n	80062b0 <_fx_directory_entry_write+0x3e4>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80062ac:	3b20      	subs	r3, #32
 80062ae:	b2db      	uxtb	r3, r3
                alpha =  shortname[j];
 80062b0:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 80062b4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                if ((alpha >= 'a') && (alpha <= 'z'))
 80062b8:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80062bc:	2a19      	cmp	r2, #25
 80062be:	d801      	bhi.n	80062c4 <_fx_directory_entry_write+0x3f8>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80062c0:	3920      	subs	r1, #32
 80062c2:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 80062c4:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
                shortname[j] =  alpha;
 80062c8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
                if ((alpha >= 'a') && (alpha <= 'z'))
 80062cc:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80062d0:	2919      	cmp	r1, #25
 80062d2:	d801      	bhi.n	80062d8 <_fx_directory_entry_write+0x40c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80062d4:	3a20      	subs	r2, #32
 80062d6:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 80062d8:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
                shortname[j] =  alpha;
 80062dc:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
                if ((alpha >= 'a') && (alpha <= 'z'))
 80062e0:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80062e4:	2a19      	cmp	r2, #25
 80062e6:	d801      	bhi.n	80062ec <_fx_directory_entry_write+0x420>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80062e8:	3920      	subs	r1, #32
 80062ea:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 80062ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
                shortname[j] =  alpha;
 80062f0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
                if ((alpha >= 'a') && (alpha <= 'z'))
 80062f4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80062f8:	2919      	cmp	r1, #25
 80062fa:	d801      	bhi.n	8006300 <_fx_directory_entry_write+0x434>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80062fc:	3a20      	subs	r2, #32
 80062fe:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8006300:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
                shortname[j] =  alpha;
 8006304:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006308:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 800630c:	2a19      	cmp	r2, #25
 800630e:	d801      	bhi.n	8006314 <_fx_directory_entry_write+0x448>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006310:	3920      	subs	r1, #32
 8006312:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8006314:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
                shortname[j] =  alpha;
 8006318:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
                if ((alpha >= 'a') && (alpha <= 'z'))
 800631c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8006320:	2919      	cmp	r1, #25
 8006322:	d801      	bhi.n	8006328 <_fx_directory_entry_write+0x45c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006324:	3a20      	subs	r2, #32
 8006326:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8006328:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
                shortname[j] =  alpha;
 800632c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006330:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8006334:	2a19      	cmp	r2, #25
 8006336:	d801      	bhi.n	800633c <_fx_directory_entry_write+0x470>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006338:	3920      	subs	r1, #32
 800633a:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 800633c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
                shortname[j] =  alpha;
 8006340:	f88d 104b 	strb.w	r1, [sp, #75]	; 0x4b
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006344:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8006348:	2919      	cmp	r1, #25
 800634a:	d801      	bhi.n	8006350 <_fx_directory_entry_write+0x484>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800634c:	3a20      	subs	r2, #32
 800634e:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8006350:	f89d 104d 	ldrb.w	r1, [sp, #77]	; 0x4d
                shortname[j] =  alpha;
 8006354:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006358:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 800635c:	2a19      	cmp	r2, #25
 800635e:	d801      	bhi.n	8006364 <_fx_directory_entry_write+0x498>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006360:	3920      	subs	r1, #32
 8006362:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8006364:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
                shortname[j] =  alpha;
 8006368:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
                if ((alpha >= 'a') && (alpha <= 'z'))
 800636c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8006370:	2919      	cmp	r1, #25
 8006372:	d801      	bhi.n	8006378 <_fx_directory_entry_write+0x4ac>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006374:	3a20      	subs	r2, #32
 8006376:	b2d2      	uxtb	r2, r2
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 8006378:	2be5      	cmp	r3, #229	; 0xe5
                shortname[j] =  alpha;
 800637a:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800637e:	d102      	bne.n	8006386 <_fx_directory_entry_write+0x4ba>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 8006380:	238f      	movs	r3, #143	; 0x8f
 8006382:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 8006386:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800638a:	f047 0040 	orr.w	r0, r7, #64	; 0x40
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800638e:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 8006392:	01da      	lsls	r2, r3, #7
 8006394:	f89d c046 	ldrb.w	ip, [sp, #70]	; 0x46
        work_ptr[0] =  (UCHAR)(0x40 | card);
 8006398:	7020      	strb	r0, [r4, #0]
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800639a:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800639e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 80063a2:	440a      	add	r2, r1
 80063a4:	b2d1      	uxtb	r1, r2
 80063a6:	01ca      	lsls	r2, r1, #7
 80063a8:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 80063ac:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80063b0:	fa5c f282 	uxtab	r2, ip, r2
 80063b4:	fa5f fc82 	uxtb.w	ip, r2
 80063b8:	ea4f 12cc 	mov.w	r2, ip, lsl #7
 80063bc:	ea42 025c 	orr.w	r2, r2, ip, lsr #1
 80063c0:	f89d c049 	ldrb.w	ip, [sp, #73]	; 0x49
 80063c4:	fa50 f282 	uxtab	r2, r0, r2
 80063c8:	b2d0      	uxtb	r0, r2
 80063ca:	01c2      	lsls	r2, r0, #7
 80063cc:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 80063d0:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
 80063d4:	fa51 f282 	uxtab	r2, r1, r2
 80063d8:	b2d1      	uxtb	r1, r2
 80063da:	01ca      	lsls	r2, r1, #7
 80063dc:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 80063e0:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80063e4:	fa5c f282 	uxtab	r2, ip, r2
 80063e8:	fa5f fc82 	uxtb.w	ip, r2
 80063ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80063f0:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 80063f4:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 80063f8:	fa50 f282 	uxtab	r2, r0, r2
 80063fc:	b2d0      	uxtb	r0, r2
 80063fe:	0842      	lsrs	r2, r0, #1
 8006400:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8006404:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
 8006408:	fa51 f282 	uxtab	r2, r1, r2
 800640c:	b2d1      	uxtb	r1, r2
 800640e:	084a      	lsrs	r2, r1, #1
 8006410:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006414:	f89d 104e 	ldrb.w	r1, [sp, #78]	; 0x4e
 8006418:	fa5c f282 	uxtab	r2, ip, r2
 800641c:	fa5f fc82 	uxtb.w	ip, r2
 8006420:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8006424:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 8006428:	fa50 f282 	uxtab	r2, r0, r2
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	0850      	lsrs	r0, r2, #1
 8006430:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
 8006434:	fa51 f182 	uxtab	r1, r1, r2
 8006438:	b2ca      	uxtb	r2, r1
 800643a:	9207      	str	r2, [sp, #28]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800643c:	2f00      	cmp	r7, #0
 800643e:	f000 8241 	beq.w	80068c4 <_fx_directory_entry_write+0x9f8>
 8006442:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 8006446:	9906      	ldr	r1, [sp, #24]
 8006448:	f04f 0a00 	mov.w	sl, #0
 800644c:	4622      	mov	r2, r4
 800644e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 8006452:	460c      	mov	r4, r1

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
                {

                    work_ptr[i] = eof_marker;
 8006454:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006458:	4658      	mov	r0, fp
 800645a:	f1a8 080d 	sub.w	r8, r8, #13
 800645e:	4651      	mov	r1, sl
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8006460:	2be5      	cmp	r3, #229	; 0xe5
            work_ptr[12] = 0;
 8006462:	f04f 0a00 	mov.w	sl, #0
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8006466:	46c6      	mov	lr, r8
 8006468:	9105      	str	r1, [sp, #20]
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800646a:	bf08      	it	eq
 800646c:	7013      	strbeq	r3, [r2, #0]
            work_ptr[11] = FX_LONG_NAME;
 800646e:	f04f 030f 	mov.w	r3, #15
            eof_marker = 0;
 8006472:	46d4      	mov	ip, sl
            work_ptr[12] = 0;
 8006474:	f882 a00c 	strb.w	sl, [r2, #12]
            work_ptr[11] = FX_LONG_NAME;
 8006478:	72d3      	strb	r3, [r2, #11]
            work_ptr[13] = checksum;
 800647a:	9b07      	ldr	r3, [sp, #28]
            work_ptr[26] = 0;
 800647c:	f882 a01a 	strb.w	sl, [r2, #26]
            work_ptr[13] = checksum;
 8006480:	7353      	strb	r3, [r2, #13]
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8006482:	2301      	movs	r3, #1
            work_ptr[27] = 0;
 8006484:	f882 a01b 	strb.w	sl, [r2, #27]
                if ((i == 11) || (i == 26))
 8006488:	2b0b      	cmp	r3, #11
 800648a:	f103 0a01 	add.w	sl, r3, #1
 800648e:	d016      	beq.n	80064be <_fx_directory_entry_write+0x5f2>
 8006490:	2b1a      	cmp	r3, #26
 8006492:	d014      	beq.n	80064be <_fx_directory_entry_write+0x5f2>
                if (i == 13)
 8006494:	2b0d      	cmp	r3, #13
 8006496:	f000 81d6 	beq.w	8006846 <_fx_directory_entry_write+0x97a>
                if (eof_marker)
 800649a:	f1bc 0f00 	cmp.w	ip, #0
 800649e:	f000 81ca 	beq.w	8006836 <_fx_directory_entry_write+0x96a>
                    work_ptr[i] = eof_marker;
 80064a2:	f802 9003 	strb.w	r9, [r2, r3]
                    work_ptr[i + 1] = eof_marker;
 80064a6:	f802 900a 	strb.w	r9, [r2, sl]
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
                    work_ptr[i + 1] = 0;
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 80064aa:	6829      	ldr	r1, [r5, #0]
 80064ac:	f811 a00e 	ldrb.w	sl, [r1, lr]

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
                }

                j++;
 80064b0:	f10e 0e01 	add.w	lr, lr, #1
                    eof_marker =  (UCHAR)0xff;
 80064b4:	f1ba 0f00 	cmp.w	sl, #0
 80064b8:	bf08      	it	eq
 80064ba:	f04f 0cff 	moveq.w	ip, #255	; 0xff
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 80064be:	3302      	adds	r3, #2
 80064c0:	2b1f      	cmp	r3, #31
 80064c2:	d9e1      	bls.n	8006488 <_fx_directory_entry_write+0x5bc>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
            byte_offset += FX_DIR_ENTRY_SIZE;
 80064c4:	3020      	adds	r0, #32
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 80064c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80064c8:	9905      	ldr	r1, [sp, #20]
 80064ca:	46a2      	mov	sl, r4
 80064cc:	4283      	cmp	r3, r0
 80064ce:	468b      	mov	fp, r1
 80064d0:	f240 81bb 	bls.w	800684a <_fx_directory_entry_write+0x97e>
            work_ptr += FX_DIR_ENTRY_SIZE;
 80064d4:	3220      	adds	r2, #32
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 80064d6:	3f01      	subs	r7, #1
 80064d8:	f1a8 080d 	sub.w	r8, r8, #13
            work_ptr[0] = (UCHAR)card;
 80064dc:	7017      	strb	r7, [r2, #0]
        while (card > 0)
 80064de:	2f00      	cmp	r7, #0
 80064e0:	f000 81ed 	beq.w	80068be <_fx_directory_entry_write+0x9f2>
 80064e4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80064e8:	e7ba      	b.n	8006460 <_fx_directory_entry_write+0x594>
        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80064ea:	2304      	movs	r3, #4
                work_ptr[j] =  (UCHAR)alpha;
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 80064ec:	b1f9      	cbz	r1, 800652e <_fx_directory_entry_write+0x662>
            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80064ee:	441a      	add	r2, r3
 80064f0:	7852      	ldrb	r2, [r2, #1]
 80064f2:	b1e2      	cbz	r2, 800652e <_fx_directory_entry_write+0x662>

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 80064f4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80064f8:	2919      	cmp	r1, #25
 80064fa:	d801      	bhi.n	8006500 <_fx_directory_entry_write+0x634>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80064fc:	3a20      	subs	r2, #32
 80064fe:	b2d2      	uxtb	r2, r2
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8006500:	7222      	strb	r2, [r4, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006502:	682a      	ldr	r2, [r5, #0]
 8006504:	441a      	add	r2, r3
 8006506:	7892      	ldrb	r2, [r2, #2]
 8006508:	b18a      	cbz	r2, 800652e <_fx_directory_entry_write+0x662>
                if ((alpha >= 'a') && (alpha <= 'z'))
 800650a:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 800650e:	2919      	cmp	r1, #25
 8006510:	d801      	bhi.n	8006516 <_fx_directory_entry_write+0x64a>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006512:	3a20      	subs	r2, #32
 8006514:	b2d2      	uxtb	r2, r2
                work_ptr[j] =  (UCHAR)alpha;
 8006516:	7262      	strb	r2, [r4, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006518:	682a      	ldr	r2, [r5, #0]
 800651a:	4413      	add	r3, r2
 800651c:	78db      	ldrb	r3, [r3, #3]
 800651e:	b133      	cbz	r3, 800652e <_fx_directory_entry_write+0x662>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006520:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006524:	2a19      	cmp	r2, #25
 8006526:	d801      	bhi.n	800652c <_fx_directory_entry_write+0x660>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006528:	3b20      	subs	r3, #32
 800652a:	b2db      	uxtb	r3, r3
                work_ptr[j] =  (UCHAR)alpha;
 800652c:	72a3      	strb	r3, [r4, #10]
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800652e:	340b      	adds	r4, #11
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8006530:	7f2b      	ldrb	r3, [r5, #28]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8006532:	1ce0      	adds	r0, r4, #3
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8006534:	7023      	strb	r3, [r4, #0]
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 8006536:	7f6b      	ldrb	r3, [r5, #29]
 8006538:	7063      	strb	r3, [r4, #1]
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800653a:	7fab      	ldrb	r3, [r5, #30]
 800653c:	70a3      	strb	r3, [r4, #2]
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800653e:	6a29      	ldr	r1, [r5, #32]
 8006540:	f7fe fb0c 	bl	8004b5c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 8006544:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006546:	1d60      	adds	r0, r4, #5
 8006548:	f7fe fb08 	bl	8004b5c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800654c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800654e:	1de0      	adds	r0, r4, #7
 8006550:	f7fe fb04 	bl	8004b5c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 8006554:	6e71      	ldr	r1, [r6, #100]	; 0x64
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006556:	f104 0009 	add.w	r0, r4, #9
    if (media_ptr -> fx_media_32_bit_FAT)
 800655a:	2900      	cmp	r1, #0
 800655c:	f000 81ef 	beq.w	800693e <_fx_directory_entry_write+0xa72>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
        _fx_utility_16_unsigned_write(work_ptr, temp);
 8006560:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 8006562:	f7fe fafb 	bl	8004b5c <_fx_utility_16_unsigned_write>

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 8006566:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006568:	f104 000b 	add.w	r0, r4, #11
 800656c:	f7fe faf6 	bl	8004b5c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 8006570:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006572:	f104 000d 	add.w	r0, r4, #13
 8006576:	f7fe faf1 	bl	8004b5c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800657a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800657c:	f104 000f 	add.w	r0, r4, #15
 8006580:	f7fe faec 	bl	8004b5c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 8006584:	f104 0011 	add.w	r0, r4, #17
 8006588:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800658a:	f7fe faf7 	bl	8004b7c <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800658e:	9b08      	ldr	r3, [sp, #32]
 8006590:	2003      	movs	r0, #3
 8006592:	2101      	movs	r1, #1
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	9002      	str	r0, [sp, #8]
 8006598:	4630      	mov	r0, r6
 800659a:	9101      	str	r1, [sp, #4]
 800659c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065a0:	f7ff fba6 	bl	8005cf0 <_fx_utility_logical_sector_write>
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 80065a4:	900a      	str	r0, [sp, #40]	; 0x28
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d12f      	bne.n	800660a <_fx_directory_entry_write+0x73e>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 80065aa:	f896 33e0 	ldrb.w	r3, [r6, #992]	; 0x3e0
 80065ae:	b363      	cbz	r3, 800660a <_fx_directory_entry_write+0x73e>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 80065b0:	f506 712c 	add.w	r1, r6, #688	; 0x2b0
 80065b4:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 80065b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf08      	it	eq
 80065c0:	4282      	cmpeq	r2, r0
 80065c2:	d122      	bne.n	800660a <_fx_directory_entry_write+0x73e>
 80065c4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80065c6:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d11d      	bne.n	800660a <_fx_directory_entry_write+0x73e>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 80065ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 80065d0:	f506 702a 	add.w	r0, r6, #680	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 80065d4:	f506 7124 	add.w	r1, r6, #656	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 80065d8:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 80065dc:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 80065e0:	e9c0 2300 	strd	r2, r3, [r0]
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 80065e4:	7f2b      	ldrb	r3, [r5, #28]
 80065e6:	f886 328c 	strb.w	r3, [r6, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 80065ea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 80065ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 80065ee:	f8c6 229c 	str.w	r2, [r6, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 80065f2:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 80065f6:	7f6b      	ldrb	r3, [r5, #29]
 80065f8:	f886 328d 	strb.w	r3, [r6, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 80065fc:	7fab      	ldrb	r3, [r5, #30]
 80065fe:	f886 328e 	strb.w	r3, [r6, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8006602:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8006606:	e9c1 2300 	strd	r2, r3, [r1]
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 800660a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800660c:	b015      	add	sp, #84	; 0x54
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cluster =  0;
 8006612:	2300      	movs	r3, #0
 8006614:	930b      	str	r3, [sp, #44]	; 0x2c
        relative_sector =  0;
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	e47d      	b.n	8005f16 <_fx_directory_entry_write+0x4a>
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800661a:	69ab      	ldr	r3, [r5, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d062      	beq.n	80066e6 <_fx_directory_entry_write+0x81a>
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 8006620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006624:	7822      	ldrb	r2, [r4, #0]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	429a      	cmp	r2, r3
 800662a:	d15c      	bne.n	80066e6 <_fx_directory_entry_write+0x81a>
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800662c:	f242 49a8 	movw	r9, #9384	; 0x24a8
 8006630:	9a06      	ldr	r2, [sp, #24]
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8006632:	46d0      	mov	r8, sl
 8006634:	f04f 0a00 	mov.w	sl, #0
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8006638:	44b1      	add	r9, r6
 800663a:	4658      	mov	r0, fp
 800663c:	4651      	mov	r1, sl
 800663e:	4623      	mov	r3, r4
 8006640:	f8cd 9018 	str.w	r9, [sp, #24]
 8006644:	4693      	mov	fp, r2
 8006646:	f8dd c020 	ldr.w	ip, [sp, #32]
 800664a:	4691      	mov	r9, r2
 800664c:	46aa      	mov	sl, r5
 800664e:	e005      	b.n	800665c <_fx_directory_entry_write+0x790>
                    work_ptr += FX_DIR_ENTRY_SIZE;
 8006650:	3320      	adds	r3, #32
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 8006652:	3701      	adds	r7, #1
 8006654:	f8da 2018 	ldr.w	r2, [sl, #24]
 8006658:	42ba      	cmp	r2, r7
 800665a:	d93e      	bls.n	80066da <_fx_directory_entry_write+0x80e>
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800665c:	f8da 2000 	ldr.w	r2, [sl]
                    byte_offset += FX_DIR_ENTRY_SIZE;
 8006660:	3020      	adds	r0, #32
 8006662:	464c      	mov	r4, r9
 8006664:	460d      	mov	r5, r1
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	2ae5      	cmp	r2, #229	; 0xe5
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800666a:	bf08      	it	eq
 800666c:	701a      	strbeq	r2, [r3, #0]
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800666e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8006670:	4282      	cmp	r2, r0
 8006672:	d8ed      	bhi.n	8006650 <_fx_directory_entry_write+0x784>
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8006674:	2001      	movs	r0, #1
 8006676:	f8cd 8008 	str.w	r8, [sp, #8]
 800667a:	f8cd c000 	str.w	ip, [sp]
 800667e:	464a      	mov	r2, r9
 8006680:	9001      	str	r0, [sp, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	4630      	mov	r0, r6
 8006686:	f7ff fb33 	bl	8005cf0 <_fx_utility_logical_sector_write>
                        if (status != FX_SUCCESS)
 800668a:	2800      	cmp	r0, #0
 800668c:	f040 8160 	bne.w	8006950 <_fx_directory_entry_write+0xa84>
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8006690:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006692:	455b      	cmp	r3, fp
 8006694:	f200 8156 	bhi.w	8006944 <_fx_directory_entry_write+0xa78>
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8006698:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800669a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800669c:	3b01      	subs	r3, #1
 800669e:	4293      	cmp	r3, r2
 80066a0:	f240 81c7 	bls.w	8006a32 <_fx_directory_entry_write+0xb66>
                                relative_sector++;
 80066a4:	3201      	adds	r2, #1
                                logical_sector++;
 80066a6:	f10b 0b01 	add.w	fp, fp, #1
                                relative_sector++;
 80066aa:	9209      	str	r2, [sp, #36]	; 0x24
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80066ac:	68b3      	ldr	r3, [r6, #8]
 80066ae:	2100      	movs	r1, #0
 80066b0:	2001      	movs	r0, #1
 80066b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	465a      	mov	r2, fp
 80066ba:	9001      	str	r0, [sp, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	4630      	mov	r0, r6
 80066c0:	46d9      	mov	r9, fp
 80066c2:	465c      	mov	r4, fp
 80066c4:	460d      	mov	r5, r1
 80066c6:	9105      	str	r1, [sp, #20]
 80066c8:	f7ff f964 	bl	8005994 <_fx_utility_logical_sector_read>
                        if (status != FX_SUCCESS)
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f040 813f 	bne.w	8006950 <_fx_directory_entry_write+0xa84>
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 80066d2:	68b3      	ldr	r3, [r6, #8]
 80066d4:	9905      	ldr	r1, [sp, #20]
 80066d6:	469c      	mov	ip, r3
 80066d8:	e7bb      	b.n	8006652 <_fx_directory_entry_write+0x786>
 80066da:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80066de:	461c      	mov	r4, r3
 80066e0:	4655      	mov	r5, sl
 80066e2:	f8cd c020 	str.w	ip, [sp, #32]
 80066e6:	220b      	movs	r2, #11
 80066e8:	2120      	movs	r1, #32
 80066ea:	4620      	mov	r0, r4
 80066ec:	f002 ff9f 	bl	800962e <memset>
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 80066f0:	682a      	ldr	r2, [r5, #0]
 80066f2:	7811      	ldrb	r1, [r2, #0]
 80066f4:	292e      	cmp	r1, #46	; 0x2e
 80066f6:	f040 81e1 	bne.w	8006abc <_fx_directory_entry_write+0xbf0>
            work_ptr[i] = '.';
 80066fa:	460f      	mov	r7, r1
 80066fc:	1e60      	subs	r0, r4, #1
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 80066fe:	2300      	movs	r3, #0
            work_ptr[i] = '.';
 8006700:	f800 7f01 	strb.w	r7, [r0, #1]!
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8006704:	3301      	adds	r3, #1
 8006706:	682a      	ldr	r2, [r5, #0]
 8006708:	5cd1      	ldrb	r1, [r2, r3]
 800670a:	292e      	cmp	r1, #46	; 0x2e
 800670c:	d0f8      	beq.n	8006700 <_fx_directory_entry_write+0x834>
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800670e:	2900      	cmp	r1, #0
 8006710:	f000 8104 	beq.w	800691c <_fx_directory_entry_write+0xa50>
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8006714:	7811      	ldrb	r1, [r2, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006716:	2900      	cmp	r1, #0
 8006718:	f000 81f9 	beq.w	8006b0e <_fx_directory_entry_write+0xc42>
 800671c:	292e      	cmp	r1, #46	; 0x2e
 800671e:	f000 81f6 	beq.w	8006b0e <_fx_directory_entry_write+0xc42>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006722:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8006726:	2b19      	cmp	r3, #25
 8006728:	d801      	bhi.n	800672e <_fx_directory_entry_write+0x862>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800672a:	3920      	subs	r1, #32
 800672c:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 800672e:	7021      	strb	r1, [r4, #0]
 8006730:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8006732:	7851      	ldrb	r1, [r2, #1]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006734:	2900      	cmp	r1, #0
 8006736:	f000 81e8 	beq.w	8006b0a <_fx_directory_entry_write+0xc3e>
 800673a:	292e      	cmp	r1, #46	; 0x2e
 800673c:	f000 81e5 	beq.w	8006b0a <_fx_directory_entry_write+0xc3e>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006740:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8006744:	2b19      	cmp	r3, #25
 8006746:	d801      	bhi.n	800674c <_fx_directory_entry_write+0x880>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006748:	3920      	subs	r1, #32
 800674a:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 800674c:	7061      	strb	r1, [r4, #1]
 800674e:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8006750:	7891      	ldrb	r1, [r2, #2]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006752:	2900      	cmp	r1, #0
 8006754:	f000 81e2 	beq.w	8006b1c <_fx_directory_entry_write+0xc50>
 8006758:	292e      	cmp	r1, #46	; 0x2e
 800675a:	f000 81df 	beq.w	8006b1c <_fx_directory_entry_write+0xc50>
                if ((alpha >= 'a') && (alpha <= 'z'))
 800675e:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8006762:	2b19      	cmp	r3, #25
 8006764:	d801      	bhi.n	800676a <_fx_directory_entry_write+0x89e>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006766:	3920      	subs	r1, #32
 8006768:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 800676a:	70a1      	strb	r1, [r4, #2]
 800676c:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800676e:	78d1      	ldrb	r1, [r2, #3]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006770:	2900      	cmp	r1, #0
 8006772:	f000 81d1 	beq.w	8006b18 <_fx_directory_entry_write+0xc4c>
 8006776:	292e      	cmp	r1, #46	; 0x2e
 8006778:	f000 81ce 	beq.w	8006b18 <_fx_directory_entry_write+0xc4c>
                if ((alpha >= 'a') && (alpha <= 'z'))
 800677c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8006780:	2b19      	cmp	r3, #25
 8006782:	f240 8180 	bls.w	8006a86 <_fx_directory_entry_write+0xbba>
                work_ptr[j] =  (UCHAR)alpha;
 8006786:	70e1      	strb	r1, [r4, #3]
 8006788:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800678a:	7911      	ldrb	r1, [r2, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800678c:	2900      	cmp	r1, #0
 800678e:	f43f aeac 	beq.w	80064ea <_fx_directory_entry_write+0x61e>
 8006792:	292e      	cmp	r1, #46	; 0x2e
 8006794:	f43f aea9 	beq.w	80064ea <_fx_directory_entry_write+0x61e>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006798:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800679c:	2b19      	cmp	r3, #25
 800679e:	f240 8175 	bls.w	8006a8c <_fx_directory_entry_write+0xbc0>
                work_ptr[j] =  (UCHAR)alpha;
 80067a2:	7121      	strb	r1, [r4, #4]
 80067a4:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 80067a6:	7951      	ldrb	r1, [r2, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80067a8:	2900      	cmp	r1, #0
 80067aa:	f000 81b9 	beq.w	8006b20 <_fx_directory_entry_write+0xc54>
 80067ae:	292e      	cmp	r1, #46	; 0x2e
 80067b0:	f000 81b6 	beq.w	8006b20 <_fx_directory_entry_write+0xc54>
                if ((alpha >= 'a') && (alpha <= 'z'))
 80067b4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80067b8:	2b19      	cmp	r3, #25
 80067ba:	f240 816a 	bls.w	8006a92 <_fx_directory_entry_write+0xbc6>
                work_ptr[j] =  (UCHAR)alpha;
 80067be:	7161      	strb	r1, [r4, #5]
 80067c0:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 80067c2:	7991      	ldrb	r1, [r2, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80067c4:	2900      	cmp	r1, #0
 80067c6:	f000 81ad 	beq.w	8006b24 <_fx_directory_entry_write+0xc58>
 80067ca:	292e      	cmp	r1, #46	; 0x2e
 80067cc:	f000 81aa 	beq.w	8006b24 <_fx_directory_entry_write+0xc58>
                if ((alpha >= 'a') && (alpha <= 'z'))
 80067d0:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80067d4:	2b19      	cmp	r3, #25
 80067d6:	f240 815f 	bls.w	8006a98 <_fx_directory_entry_write+0xbcc>
                work_ptr[j] =  (UCHAR)alpha;
 80067da:	71a1      	strb	r1, [r4, #6]
 80067dc:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 80067de:	79d1      	ldrb	r1, [r2, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80067e0:	292e      	cmp	r1, #46	; 0x2e
 80067e2:	f000 81bc 	beq.w	8006b5e <_fx_directory_entry_write+0xc92>
 80067e6:	2900      	cmp	r1, #0
 80067e8:	f000 81b9 	beq.w	8006b5e <_fx_directory_entry_write+0xc92>
                if ((alpha >= 'a') && (alpha <= 'z'))
 80067ec:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80067f0:	2b19      	cmp	r3, #25
 80067f2:	d801      	bhi.n	80067f8 <_fx_directory_entry_write+0x92c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80067f4:	3920      	subs	r1, #32
 80067f6:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 80067f8:	71e1      	strb	r1, [r4, #7]
 80067fa:	2308      	movs	r3, #8
 80067fc:	682a      	ldr	r2, [r5, #0]
 80067fe:	7a11      	ldrb	r1, [r2, #8]
 8006800:	e674      	b.n	80064ec <_fx_directory_entry_write+0x620>
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8006802:	790b      	ldrb	r3, [r1, #4]
 8006804:	2be5      	cmp	r3, #229	; 0xe5
 8006806:	f47f ab70 	bne.w	8005eea <_fx_directory_entry_write+0x1e>
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800680a:	2300      	movs	r3, #0
 800680c:	710b      	strb	r3, [r1, #4]
 800680e:	9307      	str	r3, [sp, #28]
 8006810:	f7ff bb6d 	b.w	8005eee <_fx_directory_entry_write+0x22>
            if ((alpha >= 'a') && (alpha <= 'z'))
 8006814:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006818:	2a19      	cmp	r2, #25
 800681a:	f63f ac83 	bhi.w	8006124 <_fx_directory_entry_write+0x258>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800681e:	3b20      	subs	r3, #32
            alpha = shortname[i];
 8006820:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006824:	b2db      	uxtb	r3, r3
            shortname[i] =  alpha;
 8006826:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            if ((alpha >= 'a') && (alpha <= 'z'))
 800682a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800682e:	2b19      	cmp	r3, #25
 8006830:	f63f ac82 	bhi.w	8006138 <_fx_directory_entry_write+0x26c>
 8006834:	e47e      	b.n	8006134 <_fx_directory_entry_write+0x268>
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 8006836:	6829      	ldr	r1, [r5, #0]
 8006838:	f811 b00e 	ldrb.w	fp, [r1, lr]
 800683c:	f802 b003 	strb.w	fp, [r2, r3]
                    work_ptr[i + 1] = 0;
 8006840:	f802 c00a 	strb.w	ip, [r2, sl]
 8006844:	e631      	b.n	80064aa <_fx_directory_entry_write+0x5de>
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8006846:	230e      	movs	r3, #14
 8006848:	e61e      	b.n	8006488 <_fx_directory_entry_write+0x5bc>
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800684a:	9b08      	ldr	r3, [sp, #32]
 800684c:	2001      	movs	r0, #1
 800684e:	f04f 0c03 	mov.w	ip, #3
 8006852:	4622      	mov	r2, r4
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	460b      	mov	r3, r1
 8006858:	9001      	str	r0, [sp, #4]
 800685a:	4630      	mov	r0, r6
 800685c:	f8cd c008 	str.w	ip, [sp, #8]
 8006860:	f7ff fa46 	bl	8005cf0 <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 8006864:	2800      	cmp	r0, #0
 8006866:	d173      	bne.n	8006950 <_fx_directory_entry_write+0xa84>
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8006868:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800686a:	9a06      	ldr	r2, [sp, #24]
 800686c:	4293      	cmp	r3, r2
 800686e:	d833      	bhi.n	80068d8 <_fx_directory_entry_write+0xa0c>
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8006870:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006872:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006874:	3b01      	subs	r3, #1
 8006876:	428b      	cmp	r3, r1
 8006878:	d935      	bls.n	80068e6 <_fx_directory_entry_write+0xa1a>
                        logical_sector++;
 800687a:	3201      	adds	r2, #1
                        relative_sector++;
 800687c:	3101      	adds	r1, #1
                        logical_sector++;
 800687e:	9206      	str	r2, [sp, #24]
                        relative_sector++;
 8006880:	9109      	str	r1, [sp, #36]	; 0x24
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006882:	68b3      	ldr	r3, [r6, #8]
 8006884:	2100      	movs	r1, #0
 8006886:	9c06      	ldr	r4, [sp, #24]
 8006888:	2001      	movs	r0, #1
 800688a:	f04f 0c03 	mov.w	ip, #3
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	9001      	str	r0, [sp, #4]
 8006892:	4622      	mov	r2, r4
 8006894:	460b      	mov	r3, r1
 8006896:	f8cd c008 	str.w	ip, [sp, #8]
 800689a:	4630      	mov	r0, r6
 800689c:	46a2      	mov	sl, r4
 800689e:	468b      	mov	fp, r1
 80068a0:	9105      	str	r1, [sp, #20]
 80068a2:	f7ff f877 	bl	8005994 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d152      	bne.n	8006950 <_fx_directory_entry_write+0xa84>
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 80068aa:	68b2      	ldr	r2, [r6, #8]
            card--;
 80068ac:	3f01      	subs	r7, #1
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 80068ae:	9905      	ldr	r1, [sp, #20]
 80068b0:	f1a8 080d 	sub.w	r8, r8, #13
 80068b4:	9208      	str	r2, [sp, #32]
            work_ptr[0] = (UCHAR)card;
 80068b6:	7017      	strb	r7, [r2, #0]
        while (card > 0)
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	f47f ae13 	bne.w	80064e4 <_fx_directory_entry_write+0x618>
 80068be:	4614      	mov	r4, r2
 80068c0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 80068c4:	792b      	ldrb	r3, [r5, #4]
 80068c6:	220b      	movs	r2, #11
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d146      	bne.n	800695a <_fx_directory_entry_write+0xa8e>
 80068cc:	a911      	add	r1, sp, #68	; 0x44
 80068ce:	4620      	mov	r0, r4
 80068d0:	4414      	add	r4, r2
 80068d2:	f002 fea1 	bl	8009618 <memcpy>
 80068d6:	e62b      	b.n	8006530 <_fx_directory_entry_write+0x664>
                    logical_sector++;
 80068d8:	3201      	adds	r2, #1
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80068da:	4293      	cmp	r3, r2
                    logical_sector++;
 80068dc:	9206      	str	r2, [sp, #24]
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80068de:	d8d0      	bhi.n	8006882 <_fx_directory_entry_write+0x9b6>
                            return(FX_FILE_CORRUPT);
 80068e0:	2308      	movs	r3, #8
 80068e2:	930a      	str	r3, [sp, #40]	; 0x28
 80068e4:	e691      	b.n	800660a <_fx_directory_entry_write+0x73e>
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80068e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068e8:	aa10      	add	r2, sp, #64	; 0x40
 80068ea:	4630      	mov	r0, r6
 80068ec:	f7fe f94e 	bl	8004b8c <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 80068f0:	bb70      	cbnz	r0, 8006950 <_fx_directory_entry_write+0xa84>
                        cluster =  next_cluster;
 80068f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80068f4:	2b01      	cmp	r3, #1
                        cluster =  next_cluster;
 80068f6:	930b      	str	r3, [sp, #44]	; 0x2c
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80068f8:	d9f2      	bls.n	80068e0 <_fx_directory_entry_write+0xa14>
 80068fa:	461a      	mov	r2, r3
 80068fc:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8006900:	58f3      	ldr	r3, [r6, r3]
 8006902:	4293      	cmp	r3, r2
 8006904:	d9ec      	bls.n	80068e0 <_fx_directory_entry_write+0xa14>
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8006906:	1e93      	subs	r3, r2, #2
                        relative_sector =  0;
 8006908:	9009      	str	r0, [sp, #36]	; 0x24
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800690a:	e9d6 2114 	ldrd	r2, r1, [r6, #80]	; 0x50
 800690e:	fb01 2303 	mla	r3, r1, r3, r2
 8006912:	9306      	str	r3, [sp, #24]
 8006914:	e7b5      	b.n	8006882 <_fx_directory_entry_write+0x9b6>
            card =  len / 13 + 1;
 8006916:	3701      	adds	r7, #1
 8006918:	f7ff bb92 	b.w	8006040 <_fx_directory_entry_write+0x174>
 800691c:	5cd1      	ldrb	r1, [r2, r3]
 800691e:	e5e5      	b.n	80064ec <_fx_directory_entry_write+0x620>
        if ((dotpos) && (shortname[8] == ' '))
 8006920:	f04f 0c01 	mov.w	ip, #1
 8006924:	2820      	cmp	r0, #32
 8006926:	f43f aba4 	beq.w	8006072 <_fx_directory_entry_write+0x1a6>
 800692a:	5c5b      	ldrb	r3, [r3, r1]
        if (match == FX_FALSE)
 800692c:	2b00      	cmp	r3, #0
 800692e:	f47f aba0 	bne.w	8006072 <_fx_directory_entry_write+0x1a6>
 8006932:	f1bc 0f00 	cmp.w	ip, #0
 8006936:	f43f abe8 	beq.w	800610a <_fx_directory_entry_write+0x23e>
 800693a:	f7ff bb9a 	b.w	8006072 <_fx_directory_entry_write+0x1a6>
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800693e:	f7fe f90d 	bl	8004b5c <_fx_utility_16_unsigned_write>
 8006942:	e610      	b.n	8006566 <_fx_directory_entry_write+0x69a>
                            logical_sector++;
 8006944:	f10b 0b01 	add.w	fp, fp, #1
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8006948:	455b      	cmp	r3, fp
 800694a:	f63f aeaf 	bhi.w	80066ac <_fx_directory_entry_write+0x7e0>
 800694e:	e7c7      	b.n	80068e0 <_fx_directory_entry_write+0xa14>
 8006950:	900a      	str	r0, [sp, #40]	; 0x28
}
 8006952:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006954:	b015      	add	sp, #84	; 0x54
 8006956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695a:	2120      	movs	r1, #32
 800695c:	4620      	mov	r0, r4
 800695e:	f002 fe66 	bl	800962e <memset>
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8006962:	792b      	ldrb	r3, [r5, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006964:	2b2e      	cmp	r3, #46	; 0x2e
 8006966:	d03b      	beq.n	80069e0 <_fx_directory_entry_write+0xb14>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d039      	beq.n	80069e0 <_fx_directory_entry_write+0xb14>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800696c:	7023      	strb	r3, [r4, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800696e:	796b      	ldrb	r3, [r5, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006970:	2b2e      	cmp	r3, #46	; 0x2e
 8006972:	f000 80fc 	beq.w	8006b6e <_fx_directory_entry_write+0xca2>
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80f9 	beq.w	8006b6e <_fx_directory_entry_write+0xca2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800697c:	7063      	strb	r3, [r4, #1]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800697e:	79ab      	ldrb	r3, [r5, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006980:	2b2e      	cmp	r3, #46	; 0x2e
 8006982:	f000 8102 	beq.w	8006b8a <_fx_directory_entry_write+0xcbe>
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 80ff 	beq.w	8006b8a <_fx_directory_entry_write+0xcbe>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800698c:	70a3      	strb	r3, [r4, #2]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800698e:	79eb      	ldrb	r3, [r5, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006990:	2b2e      	cmp	r3, #46	; 0x2e
 8006992:	f000 80f4 	beq.w	8006b7e <_fx_directory_entry_write+0xcb2>
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80f1 	beq.w	8006b7e <_fx_directory_entry_write+0xcb2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800699c:	70e3      	strb	r3, [r4, #3]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800699e:	7a2b      	ldrb	r3, [r5, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069a0:	2b2e      	cmp	r3, #46	; 0x2e
 80069a2:	d07c      	beq.n	8006a9e <_fx_directory_entry_write+0xbd2>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d07a      	beq.n	8006a9e <_fx_directory_entry_write+0xbd2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80069a8:	7123      	strb	r3, [r4, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 80069aa:	7a6b      	ldrb	r3, [r5, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069ac:	2b2e      	cmp	r3, #46	; 0x2e
 80069ae:	f000 80f8 	beq.w	8006ba2 <_fx_directory_entry_write+0xcd6>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80f5 	beq.w	8006ba2 <_fx_directory_entry_write+0xcd6>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80069b8:	7163      	strb	r3, [r4, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 80069ba:	7aab      	ldrb	r3, [r5, #10]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069bc:	2b2e      	cmp	r3, #46	; 0x2e
 80069be:	f000 80ea 	beq.w	8006b96 <_fx_directory_entry_write+0xcca>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80e7 	beq.w	8006b96 <_fx_directory_entry_write+0xcca>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80069c8:	71a3      	strb	r3, [r4, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 80069ca:	7aeb      	ldrb	r3, [r5, #11]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069cc:	2b2e      	cmp	r3, #46	; 0x2e
 80069ce:	f000 80c8 	beq.w	8006b62 <_fx_directory_entry_write+0xc96>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80c5 	beq.w	8006b62 <_fx_directory_entry_write+0xc96>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80069d8:	71e3      	strb	r3, [r4, #7]
 80069da:	2308      	movs	r3, #8
 80069dc:	930a      	str	r3, [sp, #40]	; 0x28
 80069de:	7b2b      	ldrb	r3, [r5, #12]
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f43f ada4 	beq.w	800652e <_fx_directory_entry_write+0x662>
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e8:	442b      	add	r3, r5
 80069ea:	795a      	ldrb	r2, [r3, #5]
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	f43f ad9e 	beq.w	800652e <_fx_directory_entry_write+0x662>
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80069f2:	7222      	strb	r2, [r4, #8]
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069f4:	799a      	ldrb	r2, [r3, #6]
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	f43f ad99 	beq.w	800652e <_fx_directory_entry_write+0x662>
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80069fc:	7262      	strb	r2, [r4, #9]
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80069fe:	79db      	ldrb	r3, [r3, #7]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f ad93 	bne.w	800652c <_fx_directory_entry_write+0x660>
 8006a06:	e592      	b.n	800652e <_fx_directory_entry_write+0x662>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006a08:	2200      	movs	r2, #0
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006a0a:	442a      	add	r2, r5
 8006a0c:	7953      	ldrb	r3, [r2, #5]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f43f ac46 	beq.w	80062a0 <_fx_directory_entry_write+0x3d4>
 8006a14:	7991      	ldrb	r1, [r2, #6]
                    shortname[j] =  alpha;
 8006a16:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006a1a:	2900      	cmp	r1, #0
 8006a1c:	f43f ac40 	beq.w	80062a0 <_fx_directory_entry_write+0x3d4>
 8006a20:	79d3      	ldrb	r3, [r2, #7]
                    shortname[j] =  alpha;
 8006a22:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f43f ac3a 	beq.w	80062a0 <_fx_directory_entry_write+0x3d4>
                    shortname[j] =  alpha;
 8006a2c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8006a30:	e436      	b.n	80062a0 <_fx_directory_entry_write+0x3d4>
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8006a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a34:	aa10      	add	r2, sp, #64	; 0x40
 8006a36:	4630      	mov	r0, r6
 8006a38:	f7fe f8a8 	bl	8004b8c <_fx_utility_FAT_entry_read>
                                if (status != FX_SUCCESS)
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d187      	bne.n	8006950 <_fx_directory_entry_write+0xa84>
                                cluster =  next_cluster;
 8006a40:	9a10      	ldr	r2, [sp, #64]	; 0x40
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8006a42:	2a01      	cmp	r2, #1
                                cluster =  next_cluster;
 8006a44:	920b      	str	r2, [sp, #44]	; 0x2c
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8006a46:	f67f af4b 	bls.w	80068e0 <_fx_directory_entry_write+0xa14>
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	f67f af46 	bls.w	80068e0 <_fx_directory_entry_write+0xa14>
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8006a54:	f1a2 0b02 	sub.w	fp, r2, #2
                                relative_sector =  0;
 8006a58:	9009      	str	r0, [sp, #36]	; 0x24
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8006a5a:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8006a5e:	fb02 3b0b 	mla	fp, r2, fp, r3
 8006a62:	e623      	b.n	80066ac <_fx_directory_entry_write+0x7e0>
 8006a64:	2820      	cmp	r0, #32
 8006a66:	d15f      	bne.n	8006b28 <_fx_directory_entry_write+0xc5c>
 8006a68:	4419      	add	r1, r3
 8006a6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 8083 	beq.w	8006b7a <_fx_directory_entry_write+0xcae>
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8006a74:	2b2e      	cmp	r3, #46	; 0x2e
 8006a76:	d0f8      	beq.n	8006a6a <_fx_directory_entry_write+0xb9e>
 8006a78:	f04f 0c01 	mov.w	ip, #1
        if ((dotpos) && (shortname[8] == ' '))
 8006a7c:	9a05      	ldr	r2, [sp, #20]
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	f47f aaf7 	bne.w	8006072 <_fx_directory_entry_write+0x1a6>
 8006a84:	e752      	b.n	800692c <_fx_directory_entry_write+0xa60>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006a86:	3920      	subs	r1, #32
 8006a88:	b2c9      	uxtb	r1, r1
 8006a8a:	e67c      	b.n	8006786 <_fx_directory_entry_write+0x8ba>
 8006a8c:	3920      	subs	r1, #32
 8006a8e:	b2c9      	uxtb	r1, r1
 8006a90:	e687      	b.n	80067a2 <_fx_directory_entry_write+0x8d6>
 8006a92:	3920      	subs	r1, #32
 8006a94:	b2c9      	uxtb	r1, r1
 8006a96:	e692      	b.n	80067be <_fx_directory_entry_write+0x8f2>
 8006a98:	3920      	subs	r1, #32
 8006a9a:	b2c9      	uxtb	r1, r1
 8006a9c:	e69d      	b.n	80067da <_fx_directory_entry_write+0x90e>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f43f ad43 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006aa8:	e79d      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8006aaa:	464f      	mov	r7, r9
 8006aac:	46ca      	mov	sl, r9
 8006aae:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ab2:	46c8      	mov	r8, r9
 8006ab4:	f8cd 9014 	str.w	r9, [sp, #20]
 8006ab8:	f7ff ba85 	b.w	8005fc6 <_fx_directory_entry_write+0xfa>
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8006abc:	2300      	movs	r3, #0
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	f43f af2c 	beq.w	800691c <_fx_directory_entry_write+0xa50>
 8006ac4:	e626      	b.n	8006714 <_fx_directory_entry_write+0x848>
 8006ac6:	4690      	mov	r8, r2
        if (len % 13 == 0)
 8006ac8:	f1ba 0f00 	cmp.w	sl, #0
 8006acc:	f43f aab8 	beq.w	8006040 <_fx_directory_entry_write+0x174>
 8006ad0:	e721      	b.n	8006916 <_fx_directory_entry_write+0xa4a>
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 8006ad2:	2a08      	cmp	r2, #8
 8006ad4:	d02c      	beq.n	8006b30 <_fx_directory_entry_write+0xc64>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8006ad6:	45cc      	cmp	ip, r9
 8006ad8:	f47f aac7 	bne.w	800606a <_fx_directory_entry_write+0x19e>
            k++;
 8006adc:	3201      	adds	r2, #1
            l++;
 8006ade:	3101      	adds	r1, #1
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8006ae0:	2a0b      	cmp	r2, #11
 8006ae2:	d12c      	bne.n	8006b3e <_fx_directory_entry_write+0xc72>
 8006ae4:	f04f 0c00 	mov.w	ip, #0
        if ((dotpos) && (shortname[8] == ' '))
 8006ae8:	9a05      	ldr	r2, [sp, #20]
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	f47f af1a 	bne.w	8006924 <_fx_directory_entry_write+0xa58>
 8006af0:	e71b      	b.n	800692a <_fx_directory_entry_write+0xa5e>
 8006af2:	9a05      	ldr	r2, [sp, #20]
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	f43f ab08 	beq.w	800610a <_fx_directory_entry_write+0x23e>
 8006afa:	46cc      	mov	ip, r9
 8006afc:	e712      	b.n	8006924 <_fx_directory_entry_write+0xa58>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006afe:	2202      	movs	r2, #2
 8006b00:	f7ff bbc8 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
 8006b04:	2201      	movs	r2, #1
 8006b06:	f7ff bbc5 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e4ee      	b.n	80064ec <_fx_directory_entry_write+0x620>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e4ec      	b.n	80064ec <_fx_directory_entry_write+0x620>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b12:	2203      	movs	r2, #3
 8006b14:	f7ff bbbe 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e4e7      	b.n	80064ec <_fx_directory_entry_write+0x620>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e4e5      	b.n	80064ec <_fx_directory_entry_write+0x620>
 8006b20:	2305      	movs	r3, #5
 8006b22:	e4e3      	b.n	80064ec <_fx_directory_entry_write+0x620>
 8006b24:	2306      	movs	r3, #6
 8006b26:	e4e1      	b.n	80064ec <_fx_directory_entry_write+0x620>
                l++;
 8006b28:	3101      	adds	r1, #1
 8006b2a:	4684      	mov	ip, r0
 8006b2c:	f813 9001 	ldrb.w	r9, [r3, r1]
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 8006b30:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b34:	d044      	beq.n	8006bc0 <_fx_directory_entry_write+0xcf4>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8006b36:	45cc      	cmp	ip, r9
 8006b38:	d13f      	bne.n	8006bba <_fx_directory_entry_write+0xcee>
            l++;
 8006b3a:	3101      	adds	r1, #1
            k++;
 8006b3c:	2209      	movs	r2, #9
 8006b3e:	f813 9001 	ldrb.w	r9, [r3, r1]
 8006b42:	f7ff ba81 	b.w	8006048 <_fx_directory_entry_write+0x17c>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b46:	2207      	movs	r2, #7
 8006b48:	f7ff bba4 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
 8006b4c:	2206      	movs	r2, #6
 8006b4e:	f7ff bba1 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
 8006b52:	2205      	movs	r2, #5
 8006b54:	f7ff bb9e 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
 8006b58:	2204      	movs	r2, #4
 8006b5a:	f7ff bb9b 	b.w	8006294 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b5e:	2307      	movs	r3, #7
 8006b60:	e4c4      	b.n	80064ec <_fx_directory_entry_write+0x620>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b62:	2207      	movs	r2, #7
 8006b64:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f43f ace1 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006b6c:	e73b      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f43f acdb 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006b78:	e735      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
 8006b7a:	469c      	mov	ip, r3
 8006b7c:	e77e      	b.n	8006a7c <_fx_directory_entry_write+0xbb0>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b7e:	2203      	movs	r2, #3
 8006b80:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f43f acd3 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006b88:	e72d      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f43f accd 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006b94:	e727      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006b96:	2206      	movs	r2, #6
 8006b98:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f43f acc7 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006ba0:	e721      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006ba2:	2205      	movs	r2, #5
 8006ba4:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f43f acc1 	beq.w	800652e <_fx_directory_entry_write+0x662>
 8006bac:	e71b      	b.n	80069e6 <_fx_directory_entry_write+0xb1a>
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8006bae:	9205      	str	r2, [sp, #20]
 8006bb0:	f7ff ba31 	b.w	8006016 <_fx_directory_entry_write+0x14a>
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8006bb4:	9105      	str	r1, [sp, #20]
 8006bb6:	f7ff ba2e 	b.w	8006016 <_fx_directory_entry_write+0x14a>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8006bba:	f04f 0c01 	mov.w	ip, #1
 8006bbe:	e793      	b.n	8006ae8 <_fx_directory_entry_write+0xc1c>
                l++;
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	f813 9001 	ldrb.w	r9, [r3, r1]
 8006bc6:	e7b6      	b.n	8006b36 <_fx_directory_entry_write+0xc6a>

08006bc8 <_fx_directory_free_search>:
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 8006bc8:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
{
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_directory_free_searches++;
 8006bd0:	3301      	adds	r3, #1

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 8006bd2:	6814      	ldr	r4, [r2, #0]
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8006bd4:	2500      	movs	r5, #0
{
 8006bd6:	b095      	sub	sp, #84	; 0x54
    media_ptr -> fx_media_directory_free_searches++;
 8006bd8:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8006bdc:	6155      	str	r5, [r2, #20]
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 8006bde:	7823      	ldrb	r3, [r4, #0]
 8006be0:	2b2e      	cmp	r3, #46	; 0x2e
 8006be2:	f000 8147 	beq.w	8006e74 <_fx_directory_free_search+0x2ac>
            return(FX_INVALID_NAME);
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 81df 	beq.w	8006faa <_fx_directory_free_search+0x3e2>
{
 8006bec:	f04f 0c00 	mov.w	ip, #0
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006bf0:	2701      	movs	r7, #1
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8006bf2:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8006f18 <_fx_directory_free_search+0x350>
{
 8006bf6:	4665      	mov	r5, ip
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8006bf8:	f8df e320 	ldr.w	lr, [pc, #800]	; 8006f1c <_fx_directory_free_search+0x354>
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 8006bfc:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 8006c00:	2e19      	cmp	r6, #25
 8006c02:	d92e      	bls.n	8006c62 <_fx_directory_free_search+0x9a>
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 8006c04:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006c08:	2e09      	cmp	r6, #9
 8006c0a:	d92a      	bls.n	8006c62 <_fx_directory_free_search+0x9a>
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 8006c0c:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 8006c10:	2e19      	cmp	r6, #25
 8006c12:	f240 80cf 	bls.w	8006db4 <_fx_directory_free_search+0x1ec>
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	f000 80cc 	beq.w	8006db4 <_fx_directory_free_search+0x1ec>
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 8006c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1e:	f000 80cb 	beq.w	8006db8 <_fx_directory_free_search+0x1f0>
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 8006c22:	2be5      	cmp	r3, #229	; 0xe5
 8006c24:	f000 80c6 	beq.w	8006db4 <_fx_directory_free_search+0x1ec>
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 8006c28:	061e      	lsls	r6, r3, #24
 8006c2a:	d41a      	bmi.n	8006c62 <_fx_directory_free_search+0x9a>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8006c2c:	f1a3 097d 	sub.w	r9, r3, #125	; 0x7d
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8006c30:	f1a3 0621 	sub.w	r6, r3, #33	; 0x21
 8006c34:	2b7b      	cmp	r3, #123	; 0x7b
 8006c36:	bf18      	it	ne
 8006c38:	f1b9 0f01 	cmpne.w	r9, #1
 8006c3c:	b2f6      	uxtb	r6, r6
 8006c3e:	bf94      	ite	ls
 8006c40:	f04f 0901 	movls.w	r9, #1
 8006c44:	f04f 0900 	movhi.w	r9, #0
 8006c48:	2e1f      	cmp	r6, #31
 8006c4a:	f240 809b 	bls.w	8006d84 <_fx_directory_free_search+0x1bc>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8006c4e:	f1a3 065e 	sub.w	r6, r3, #94	; 0x5e
 8006c52:	2e02      	cmp	r6, #2
 8006c54:	bf8c      	ite	hi
 8006c56:	464e      	movhi	r6, r9
 8006c58:	f049 0601 	orrls.w	r6, r9, #1
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8006c5c:	2e00      	cmp	r6, #0
 8006c5e:	f000 8098 	beq.w	8006d92 <_fx_directory_free_search+0x1ca>
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8006c62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006c66:	3501      	adds	r5, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1c7      	bne.n	8006bfc <_fx_directory_free_search+0x34>
            return(FX_INVALID_NAME);
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 8006c6c:	f1bc 0f00 	cmp.w	ip, #0
 8006c70:	d06f      	beq.n	8006d52 <_fx_directory_free_search+0x18a>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 8006c72:	eba5 030c 	sub.w	r3, r5, ip
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d96b      	bls.n	8006d52 <_fx_directory_free_search+0x18a>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	6153      	str	r3, [r2, #20]
 8006c7e:	4ba5      	ldr	r3, [pc, #660]	; (8006f14 <_fx_directory_free_search+0x34c>)
 8006c80:	fba3 4305 	umull	r4, r3, r3, r5
 8006c84:	089b      	lsrs	r3, r3, #2
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 8006c86:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8006c8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c8e:	42a5      	cmp	r5, r4
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 8006c90:	bf0c      	ite	eq
 8006c92:	3301      	addeq	r3, #1
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 8006c94:	3302      	addne	r3, #2
 8006c96:	9305      	str	r3, [sp, #20]
 8006c98:	015b      	lsls	r3, r3, #5
 8006c9a:	9307      	str	r3, [sp, #28]
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 8006c9c:	680b      	ldr	r3, [r1, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d169      	bne.n	8006d78 <_fx_directory_free_search+0x1b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8006ca4:	6f87      	ldr	r7, [r0, #120]	; 0x78

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 8006ca6:	9304      	str	r3, [sp, #16]
 8006ca8:	4682      	mov	sl, r0
 8006caa:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8006cae:	910f      	str	r1, [sp, #60]	; 0x3c
 8006cb0:	4693      	mov	fp, r2
                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8006cb2:	f242 41ac 	movw	r1, #9388	; 0x24ac
    entry_sector = entry_offset = 0;
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f848 3d04 	str.w	r3, [r8, #-4]!
 8006cbc:	f242 40a8 	movw	r0, #9384	; 0x24a8
 8006cc0:	4643      	mov	r3, r8
 8006cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc4:	9208      	str	r2, [sp, #32]
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8006cc6:	eb0a 0201 	add.w	r2, sl, r1
        search_dir_ptr =  FX_NULL;
 8006cca:	46b9      	mov	r9, r7
 8006ccc:	46b8      	mov	r8, r7
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8006cce:	920d      	str	r2, [sp, #52]	; 0x34
 8006cd0:	461f      	mov	r7, r3
 8006cd2:	eb0a 0200 	add.w	r2, sl, r0
 8006cd6:	920e      	str	r2, [sp, #56]	; 0x38
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 8006cd8:	465b      	mov	r3, fp
 8006cda:	463a      	mov	r2, r7
 8006cdc:	9904      	ldr	r1, [sp, #16]
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f001 f896 	bl	8007e10 <_fx_directory_entry_read>
        if (status != FX_SUCCESS)
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f040 8158 	bne.w	8006f9c <_fx_directory_free_search+0x3d4>
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8006cec:	f8db 2000 	ldr.w	r2, [fp]
 8006cf0:	7813      	ldrb	r3, [r2, #0]
 8006cf2:	2be5      	cmp	r3, #229	; 0xe5
 8006cf4:	d069      	beq.n	8006dca <_fx_directory_free_search+0x202>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d16f      	bne.n	8006dda <_fx_directory_free_search+0x212>
            if (total_entries > 1)
 8006cfa:	9b05      	ldr	r3, [sp, #20]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	f040 80a6 	bne.w	8006e4e <_fx_directory_free_search+0x286>
 8006d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d04:	1c53      	adds	r3, r2, #1
            if (free_entry_start == directory_entries)
 8006d06:	45c1      	cmp	r9, r8
 8006d08:	d06b      	beq.n	8006de2 <_fx_directory_free_search+0x21a>
 8006d0a:	eba3 0208 	sub.w	r2, r3, r8
            if ((directory_index - free_entry_start + 1) >= total_entries)
 8006d0e:	9905      	ldr	r1, [sp, #20]
 8006d10:	4291      	cmp	r1, r2
 8006d12:	f240 814f 	bls.w	8006fb4 <_fx_directory_free_search+0x3ec>
        if (directory_index >= directory_entries)
 8006d16:	4599      	cmp	r9, r3
        directory_index++;
 8006d18:	9313      	str	r3, [sp, #76]	; 0x4c
        if (directory_index >= directory_entries)
 8006d1a:	d8dd      	bhi.n	8006cd8 <_fx_directory_free_search+0x110>
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8006d1c:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 8006d20:	9c07      	ldr	r4, [sp, #28]
 8006d22:	1e4b      	subs	r3, r1, #1
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 8006d24:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8006d28:	4423      	add	r3, r4
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 8006d2a:	1e50      	subs	r0, r2, #1
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8006d2c:	fbb3 f3f1 	udiv	r3, r3, r1
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 8006d30:	4403      	add	r3, r0
 8006d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d36:	9306      	str	r3, [sp, #24]
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 8006d38:	9b04      	ldr	r3, [sp, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d05a      	beq.n	8006df4 <_fx_directory_free_search+0x22c>
 8006d3e:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 8006d42:	9a06      	ldr	r2, [sp, #24]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d85e      	bhi.n	8006e06 <_fx_directory_free_search+0x23e>
            }
        }
    } while (directory_index < directory_entries);

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 8006d48:	230a      	movs	r3, #10
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	b015      	add	sp, #84	; 0x54
 8006d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 8006d52:	2d0c      	cmp	r5, #12
 8006d54:	d893      	bhi.n	8006c7e <_fx_directory_free_search+0xb6>
 8006d56:	6953      	ldr	r3, [r2, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d190      	bne.n	8006c7e <_fx_directory_free_search+0xb6>
        if ((j >= 9) || ((i - j) >= 9))
 8006d5c:	f1bc 0f08 	cmp.w	ip, #8
 8006d60:	f240 811e 	bls.w	8006fa0 <_fx_directory_free_search+0x3d8>
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006d64:	2301      	movs	r3, #1
 8006d66:	2440      	movs	r4, #64	; 0x40
 8006d68:	6153      	str	r3, [r2, #20]
    if (directory_ptr -> fx_dir_entry_name[0])
 8006d6a:	680b      	ldr	r3, [r1, #0]
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006d6c:	9407      	str	r4, [sp, #28]
            total_entries = 2;
 8006d6e:	2402      	movs	r4, #2
    if (directory_ptr -> fx_dir_entry_name[0])
 8006d70:	781b      	ldrb	r3, [r3, #0]
            total_entries = 2;
 8006d72:	9405      	str	r4, [sp, #20]
    if (directory_ptr -> fx_dir_entry_name[0])
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d095      	beq.n	8006ca4 <_fx_directory_free_search+0xdc>
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8006d78:	2400      	movs	r4, #0
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 8006d7a:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8006d7c:	9104      	str	r1, [sp, #16]
        directory_index =  2;
 8006d7e:	2302      	movs	r3, #2
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8006d80:	650c      	str	r4, [r1, #80]	; 0x50
 8006d82:	e791      	b.n	8006ca8 <_fx_directory_free_search+0xe0>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8006d84:	fa2e f606 	lsr.w	r6, lr, r6
 8006d88:	f006 0601 	and.w	r6, r6, #1
 8006d8c:	ea49 0906 	orr.w	r9, r9, r6
 8006d90:	e75d      	b.n	8006c4e <_fx_directory_free_search+0x86>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8006d92:	f1a3 092b 	sub.w	r9, r3, #43	; 0x2b
 8006d96:	fa5f f989 	uxtb.w	r9, r9
 8006d9a:	f1b9 0f12 	cmp.w	r9, #18
 8006d9e:	d803      	bhi.n	8006da8 <_fx_directory_free_search+0x1e0>
 8006da0:	fa28 f909 	lsr.w	r9, r8, r9
 8006da4:	f009 0601 	and.w	r6, r9, #1
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8006da8:	2b5d      	cmp	r3, #93	; 0x5d
 8006daa:	bf18      	it	ne
 8006dac:	2b5b      	cmpne	r3, #91	; 0x5b
 8006dae:	d001      	beq.n	8006db4 <_fx_directory_free_search+0x1ec>
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	d063      	beq.n	8006e7c <_fx_directory_free_search+0x2b4>
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006db4:	6157      	str	r7, [r2, #20]
 8006db6:	e754      	b.n	8006c62 <_fx_directory_free_search+0x9a>
            if (j == 0)
 8006db8:	f1bc 0f00 	cmp.w	ip, #0
 8006dbc:	d1fa      	bne.n	8006db4 <_fx_directory_free_search+0x1ec>
                if (i == 0)
 8006dbe:	2d00      	cmp	r5, #0
 8006dc0:	f040 80a5 	bne.w	8006f0e <_fx_directory_free_search+0x346>
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8006dc4:	6157      	str	r7, [r2, #20]
 8006dc6:	46ac      	mov	ip, r5
 8006dc8:	e74b      	b.n	8006c62 <_fx_directory_free_search+0x9a>
 8006dca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8006dcc:	f89b 1004 	ldrb.w	r1, [fp, #4]
 8006dd0:	1c53      	adds	r3, r2, #1
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	d097      	beq.n	8006d06 <_fx_directory_free_search+0x13e>
 8006dd6:	46c8      	mov	r8, r9
 8006dd8:	e79d      	b.n	8006d16 <_fx_directory_free_search+0x14e>
 8006dda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ddc:	46c8      	mov	r8, r9
 8006dde:	3301      	adds	r3, #1
 8006de0:	e799      	b.n	8006d16 <_fx_directory_free_search+0x14e>
                free_entry_start =  directory_index;
 8006de2:	4690      	mov	r8, r2
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8006de4:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 8006de8:	9208      	str	r2, [sp, #32]
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 8006dea:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 8006dee:	9209      	str	r2, [sp, #36]	; 0x24
 8006df0:	2201      	movs	r2, #1
 8006df2:	e78c      	b.n	8006d0e <_fx_directory_free_search+0x146>
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 8006df4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0a5      	beq.n	8006d48 <_fx_directory_free_search+0x180>
 8006dfc:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 8006e00:	9a06      	ldr	r2, [sp, #24]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d9a0      	bls.n	8006d48 <_fx_directory_free_search+0x180>
                total_clusters =     media_ptr -> fx_media_total_clusters;
 8006e06:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
                while (clusters)
 8006e0a:	4613      	mov	r3, r2
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8006e0c:	f8da 6080 	ldr.w	r6, [sl, #128]	; 0x80
                while (clusters)
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	f000 80f1 	beq.w	8006ff8 <_fx_directory_free_search+0x430>
                last_cluster =       0;
 8006e16:	2200      	movs	r2, #0
                while (clusters)
 8006e18:	930c      	str	r3, [sp, #48]	; 0x30
 8006e1a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
                last_cluster =       0;
 8006e1e:	920a      	str	r2, [sp, #40]	; 0x28
                first_new_cluster =  0;
 8006e20:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e22:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
                        if (!total_clusters)
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	d08e      	beq.n	8006d48 <_fx_directory_free_search+0x180>
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8006e2a:	aa12      	add	r2, sp, #72	; 0x48
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4650      	mov	r0, sl
                        total_clusters--;
 8006e30:	3d01      	subs	r5, #1
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8006e32:	f7fd feab 	bl	8004b8c <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 8006e36:	b9c0      	cbnz	r0, 8006e6a <_fx_directory_free_search+0x2a2>
 8006e38:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006e3c:	1c72      	adds	r2, r6, #1
                        if (FAT_value == FX_FREE_CLUSTER)
 8006e3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006e40:	3302      	adds	r3, #2
 8006e42:	b1e9      	cbz	r1, 8006e80 <_fx_directory_free_search+0x2b8>
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bf8c      	ite	hi
 8006e48:	4616      	movhi	r6, r2
 8006e4a:	2602      	movls	r6, #2
 8006e4c:	e7eb      	b.n	8006e26 <_fx_directory_free_search+0x25e>
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 8006e4e:	23e5      	movs	r3, #229	; 0xe5
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8006e50:	f8cb 4014 	str.w	r4, [fp, #20]
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8006e54:	4659      	mov	r1, fp
 8006e56:	4650      	mov	r0, sl
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 8006e58:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 8006e5a:	f8db 3000 	ldr.w	r3, [fp]
 8006e5e:	705c      	strb	r4, [r3, #1]
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8006e60:	f7ff f834 	bl	8005ecc <_fx_directory_entry_write>
                    if(status != FX_SUCCESS)
 8006e64:	2800      	cmp	r0, #0
 8006e66:	f43f af4c 	beq.w	8006d02 <_fx_directory_free_search+0x13a>
 8006e6a:	4603      	mov	r3, r0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	b015      	add	sp, #84	; 0x54
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 8006e74:	7865      	ldrb	r5, [r4, #1]
 8006e76:	2d2e      	cmp	r5, #46	; 0x2e
 8006e78:	f47f aeb8 	bne.w	8006bec <_fx_directory_free_search+0x24>
            return(FX_INVALID_NAME);
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	e764      	b.n	8006d4a <_fx_directory_free_search+0x182>
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8006e80:	4293      	cmp	r3, r2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 8006e82:	f8da 8054 	ldr.w	r8, [sl, #84]	; 0x54
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8006e86:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8006e8a:	f1a6 0902 	sub.w	r9, r6, #2
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8006e8e:	bf98      	it	ls
 8006e90:	2202      	movls	r2, #2
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006e92:	f8da 1008 	ldr.w	r1, [sl, #8]
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8006e96:	fb08 3909 	mla	r9, r8, r9, r3
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006e9a:	2401      	movs	r4, #1
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8006e9c:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	464a      	mov	r2, r9
 8006eaa:	e9cd 1400 	strd	r1, r4, [sp]
 8006eae:	f7fe fd71 	bl	8005994 <_fx_utility_logical_sector_read>
                    if (status != FX_SUCCESS)
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d1d9      	bne.n	8006e6a <_fx_directory_free_search+0x2a2>
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8006eb6:	f8da 4028 	ldr.w	r4, [sl, #40]	; 0x28
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8006eba:	f8da 1008 	ldr.w	r1, [sl, #8]
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8006ebe:	b12c      	cbz	r4, 8006ecc <_fx_directory_free_search+0x304>
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8006ec0:	460b      	mov	r3, r1
                        *((ULONG *)work_ptr) =  (ULONG)0;
 8006ec2:	f843 0b04 	str.w	r0, [r3], #4
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8006ec6:	1a5a      	subs	r2, r3, r1
 8006ec8:	4294      	cmp	r4, r2
 8006eca:	d8fa      	bhi.n	8006ec2 <_fx_directory_free_search+0x2fa>
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8006ecc:	2303      	movs	r3, #3
 8006ece:	2401      	movs	r4, #1
 8006ed0:	9100      	str	r1, [sp, #0]
 8006ed2:	464a      	mov	r2, r9
 8006ed4:	9302      	str	r3, [sp, #8]
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	9401      	str	r4, [sp, #4]
 8006eda:	2300      	movs	r3, #0
 8006edc:	f7fe ff08 	bl	8005cf0 <_fx_utility_logical_sector_write>
                    if (status != FX_SUCCESS)
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1c2      	bne.n	8006e6a <_fx_directory_free_search+0x2a2>
                    if (sectors > 1)
 8006ee4:	45a0      	cmp	r8, r4
 8006ee6:	d81b      	bhi.n	8006f20 <_fx_directory_free_search+0x358>
 8006ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eea:	461a      	mov	r2, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf08      	it	eq
 8006ef0:	4632      	moveq	r2, r6
                    if (last_cluster)
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d147      	bne.n	8006f8a <_fx_directory_free_search+0x3c2>
                while (clusters)
 8006efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8006efc:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
                while (clusters)
 8006f00:	3a01      	subs	r2, #1
 8006f02:	960a      	str	r6, [sp, #40]	; 0x28
 8006f04:	920c      	str	r2, [sp, #48]	; 0x30
 8006f06:	f000 80d2 	beq.w	80070ae <_fx_directory_free_search+0x4e6>
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8006f0a:	461e      	mov	r6, r3
 8006f0c:	e78b      	b.n	8006e26 <_fx_directory_free_search+0x25e>
 8006f0e:	46ac      	mov	ip, r5
 8006f10:	e6a7      	b.n	8006c62 <_fx_directory_free_search+0x9a>
 8006f12:	bf00      	nop
 8006f14:	4ec4ec4f 	.word	0x4ec4ec4f
 8006f18:	00050003 	.word	0x00050003
 8006f1c:	800011fd 	.word	0x800011fd
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 8006f20:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f24:	9001      	str	r0, [sp, #4]
 8006f26:	4603      	mov	r3, r0
 8006f28:	9402      	str	r4, [sp, #8]
 8006f2a:	f8cd 8000 	str.w	r8, [sp]
 8006f2e:	eb09 0204 	add.w	r2, r9, r4
 8006f32:	4650      	mov	r0, sl
 8006f34:	f7fe fa0a 	bl	800534c <_fx_utility_logical_sector_flush>
                        if (status != FX_SUCCESS)
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d196      	bne.n	8006e6a <_fx_directory_free_search+0x2a2>
                            media_ptr -> fx_media_driver_write_requests++;
 8006f3c:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006f40:	2090      	movs	r0, #144	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8006f42:	eb09 0108 	add.w	r1, r9, r8
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8006f46:	f8da 2008 	ldr.w	r2, [sl, #8]
                            media_ptr -> fx_media_driver_write_requests++;
 8006f4a:	3301      	adds	r3, #1
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8006f4c:	f8ca 008c 	str.w	r0, [sl, #140]	; 0x8c
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8006f50:	2003      	movs	r0, #3
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8006f52:	f8ca 4088 	str.w	r4, [sl, #136]	; 0x88
                            media_ptr -> fx_media_driver_write_requests++;
 8006f56:	f8ca 31b0 	str.w	r3, [sl, #432]	; 0x1b0
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8006f5a:	f8ca 00b8 	str.w	r0, [sl, #184]	; 0xb8
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006f5e:	4650      	mov	r0, sl
 8006f60:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
                            media_ptr -> fx_media_driver_sectors =          1;
 8006f64:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8006f68:	f8ca 40b0 	str.w	r4, [sl, #176]	; 0xb0
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8006f6c:	e9ca 2124 	strd	r2, r1, [sl, #144]	; 0x90
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8006f70:	4798      	blx	r3
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006f72:	2300      	movs	r3, #0
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8006f74:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8006f78:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f47f af74 	bne.w	8006e6a <_fx_directory_free_search+0x2a2>
                        while (sectors)
 8006f82:	f1b8 0801 	subs.w	r8, r8, #1
 8006f86:	d1d9      	bne.n	8006f3c <_fx_directory_free_search+0x374>
 8006f88:	e7ae      	b.n	8006ee8 <_fx_directory_free_search+0x320>
 8006f8a:	4619      	mov	r1, r3
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	4650      	mov	r0, sl
 8006f90:	f7fd ff5c 	bl	8004e4c <_fx_utility_FAT_entry_write>
                        if (status !=  FX_SUCCESS)
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d0b0      	beq.n	8006efa <_fx_directory_free_search+0x332>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	e767      	b.n	8006e6c <_fx_directory_free_search+0x2a4>
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	e6d4      	b.n	8006d4a <_fx_directory_free_search+0x182>
        if ((j >= 9) || ((i - j) >= 9))
 8006fa0:	eba5 050c 	sub.w	r5, r5, ip
 8006fa4:	2d08      	cmp	r5, #8
 8006fa6:	f63f aedd 	bhi.w	8006d64 <_fx_directory_free_search+0x19c>
 8006faa:	2320      	movs	r3, #32
 8006fac:	9307      	str	r3, [sp, #28]
        total_entries = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	e673      	b.n	8006c9c <_fx_directory_free_search+0xd4>
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8006fb4:	9908      	ldr	r1, [sp, #32]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f8cb 1040 	str.w	r1, [fp, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8006fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8006fc0:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8006fc4:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
                entry_ptr -> fx_dir_entry_reserved =            0;
 8006fc8:	f88b 201d 	strb.w	r2, [fp, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 8006fcc:	f88b 201e 	strb.w	r2, [fp, #30]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006fd0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006fd4:	b672      	cpsid	i
                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8006fd6:	4c3e      	ldr	r4, [pc, #248]	; (80070d0 <_fx_directory_free_search+0x508>)
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8006fd8:	493e      	ldr	r1, [pc, #248]	; (80070d4 <_fx_directory_free_search+0x50c>)
                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8006fda:	6824      	ldr	r4, [r4, #0]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8006fdc:	6809      	ldr	r1, [r1, #0]
 8006fde:	e9cb 4108 	strd	r4, r1, [fp, #32]
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 8006fe2:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006fe6:	f380 8810 	msr	PRIMASK, r0
                if (total_entries == 1)
 8006fea:	9905      	ldr	r1, [sp, #20]
 8006fec:	2901      	cmp	r1, #1
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8006fee:	bf18      	it	ne
 8006ff0:	2201      	movne	r2, #1
 8006ff2:	f8cb 2014 	str.w	r2, [fp, #20]
 8006ff6:	e6a8      	b.n	8006d4a <_fx_directory_free_search+0x182>
                last_cluster =       0;
 8006ff8:	4616      	mov	r6, r2
                first_new_cluster =  0;
 8006ffa:	920b      	str	r2, [sp, #44]	; 0x2c
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8006ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ffe:	4631      	mov	r1, r6
 8007000:	4650      	mov	r0, sl
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	f7fd ff22 	bl	8004e4c <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 8007008:	4604      	mov	r4, r0
 800700a:	2800      	cmp	r0, #0
 800700c:	d1c6      	bne.n	8006f9c <_fx_directory_free_search+0x3d4>
                if (search_dir_ptr)
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d051      	beq.n	80070b8 <_fx_directory_free_search+0x4f0>
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 8007014:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                first_new_cluster =  0;
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800701c:	4666      	mov	r6, ip
 800701e:	e00f      	b.n	8007040 <_fx_directory_free_search+0x478>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 8007020:	f7fd fdb4 	bl	8004b8c <_fx_utility_FAT_entry_read>
 8007024:	46ac      	mov	ip, r5
                    if (status != FX_SUCCESS)
 8007026:	2800      	cmp	r0, #0
 8007028:	f47f af1f 	bne.w	8006e6a <_fx_directory_free_search+0x2a2>
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800702c:	2d01      	cmp	r5, #1
 800702e:	d93c      	bls.n	80070aa <_fx_directory_free_search+0x4e2>
 8007030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007032:	42ab      	cmp	r3, r5
 8007034:	461d      	mov	r5, r3
 8007036:	d038      	beq.n	80070aa <_fx_directory_free_search+0x4e2>
 8007038:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800703c:	42b3      	cmp	r3, r6
 800703e:	d334      	bcc.n	80070aa <_fx_directory_free_search+0x4e2>
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007040:	6823      	ldr	r3, [r4, #0]
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 8007042:	4629      	mov	r1, r5
 8007044:	aa12      	add	r2, sp, #72	; 0x48
 8007046:	4650      	mov	r0, sl
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007048:	42ab      	cmp	r3, r5
                    i++;
 800704a:	f106 0601 	add.w	r6, r6, #1
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800704e:	d8e7      	bhi.n	8007020 <_fx_directory_free_search+0x458>
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8007050:	f8da 207c 	ldr.w	r2, [sl, #124]	; 0x7c
 8007054:	9c06      	ldr	r4, [sp, #24]
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8007056:	f8db 0000 	ldr.w	r0, [fp]
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800705a:	1b12      	subs	r2, r2, r4
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800705c:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 8007060:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8007064:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8007068:	fb03 f301 	mul.w	r3, r3, r1
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800706c:	7802      	ldrb	r2, [r0, #0]
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800706e:	fb04 f303 	mul.w	r3, r4, r3
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8007072:	2ae5      	cmp	r2, #229	; 0xe5
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8007074:	eb09 1953 	add.w	r9, r9, r3, lsr #5
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8007078:	d021      	beq.n	80070be <_fx_directory_free_search+0x4f6>
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800707a:	46c8      	mov	r8, r9
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800707c:	2200      	movs	r2, #0
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800707e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8007082:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007084:	e9c1 920e 	strd	r9, r2, [r1, #56]	; 0x38
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 8007088:	b10b      	cbz	r3, 800708e <_fx_directory_free_search+0x4c6>
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	b1eb      	cbz	r3, 80070ca <_fx_directory_free_search+0x502>
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800708e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007090:	4661      	mov	r1, ip
 8007092:	4650      	mov	r0, sl
 8007094:	f7fd feda 	bl	8004e4c <_fx_utility_FAT_entry_write>
                if (status != FX_SUCCESS)
 8007098:	4604      	mov	r4, r0
 800709a:	2800      	cmp	r0, #0
 800709c:	f47f af7e 	bne.w	8006f9c <_fx_directory_free_search+0x3d4>
    } while (directory_index < directory_entries);
 80070a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070a2:	454b      	cmp	r3, r9
 80070a4:	f4ff ae18 	bcc.w	8006cd8 <_fx_directory_free_search+0x110>
 80070a8:	e64e      	b.n	8006d48 <_fx_directory_free_search+0x180>
                        return(FX_FAT_READ_ERROR);
 80070aa:	2303      	movs	r3, #3
 80070ac:	e64d      	b.n	8006d4a <_fx_directory_free_search+0x182>
 80070ae:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80070b2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80070b6:	e7a1      	b.n	8006ffc <_fx_directory_free_search+0x434>
                    cluster = media_ptr -> fx_media_root_cluster_32;
 80070b8:	f8da 5074 	ldr.w	r5, [sl, #116]	; 0x74
 80070bc:	e7ab      	b.n	8007016 <_fx_directory_free_search+0x44e>
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 80070be:	f89b 3004 	ldrb.w	r3, [fp, #4]
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bf18      	it	ne
 80070c6:	46c8      	movne	r8, r9
 80070c8:	e7d8      	b.n	800707c <_fx_directory_free_search+0x4b4>
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 80070ca:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
 80070ce:	e7de      	b.n	800708e <_fx_directory_free_search+0x4c6>
 80070d0:	20002bdc 	.word	0x20002bdc
 80070d4:	20002bc4 	.word	0x20002bc4

080070d8 <_fx_directory_name_extract>:

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 80070d8:	2300      	movs	r3, #0
{
 80070da:	b4f0      	push	{r4, r5, r6, r7}
    dest_ptr[0] = 0;
 80070dc:	700b      	strb	r3, [r1, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 80070de:	7803      	ldrb	r3, [r0, #0]
 80070e0:	2b5c      	cmp	r3, #92	; 0x5c
 80070e2:	d03b      	beq.n	800715c <_fx_directory_name_extract+0x84>
 80070e4:	2b2f      	cmp	r3, #47	; 0x2f
 80070e6:	d102      	bne.n	80070ee <_fx_directory_name_extract+0x16>
 80070e8:	e038      	b.n	800715c <_fx_directory_name_extract+0x84>
        /* Advance the string pointer.  */
        source_ptr++;
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 80070ea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d0fb      	beq.n	80070ea <_fx_directory_name_extract+0x12>
        source_ptr++;
    }

    /* Loop to extract the name.  */
    i = 0;
    while (*source_ptr)
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d039      	beq.n	800716a <_fx_directory_name_extract+0x92>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 80070f6:	2b5c      	cmp	r3, #92	; 0x5c
 80070f8:	d039      	beq.n	800716e <_fx_directory_name_extract+0x96>
 80070fa:	f1a3 022f 	sub.w	r2, r3, #47	; 0x2f
 80070fe:	fab2 f282 	clz	r2, r2
 8007102:	0952      	lsrs	r2, r2, #5
 8007104:	bb9a      	cbnz	r2, 800716e <_fx_directory_name_extract+0x96>
 8007106:	1e4d      	subs	r5, r1, #1
 8007108:	e00b      	b.n	8007122 <_fx_directory_name_extract+0x4a>
 800710a:	2b5c      	cmp	r3, #92	; 0x5c
 800710c:	d010      	beq.n	8007130 <_fx_directory_name_extract+0x58>
 800710e:	f1a3 072f 	sub.w	r7, r3, #47	; 0x2f
 8007112:	fab7 f787 	clz	r7, r7
 8007116:	097f      	lsrs	r7, r7, #5
 8007118:	b957      	cbnz	r7, 8007130 <_fx_directory_name_extract+0x58>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800711a:	2eff      	cmp	r6, #255	; 0xff
 800711c:	4632      	mov	r2, r6
 800711e:	d020      	beq.n	8007162 <_fx_directory_name_extract+0x8a>
 8007120:	4620      	mov	r0, r4
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 8007122:	f805 3f01 	strb.w	r3, [r5, #1]!
 8007126:	1c44      	adds	r4, r0, #1
    while (*source_ptr)
 8007128:	7843      	ldrb	r3, [r0, #1]

        /* Increment the character counter.  */
        i++;
 800712a:	1c56      	adds	r6, r2, #1
    while (*source_ptr)
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1ec      	bne.n	800710a <_fx_directory_name_extract+0x32>
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 8007130:	2300      	movs	r3, #0
 8007132:	558b      	strb	r3, [r1, r6]
        /* Yes, we can move backwards.  */
        i--;
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 8007134:	5c8d      	ldrb	r5, [r1, r2]
 8007136:	188b      	adds	r3, r1, r2
 8007138:	2d20      	cmp	r5, #32
 800713a:	d108      	bne.n	800714e <_fx_directory_name_extract+0x76>
 800713c:	3a01      	subs	r2, #1
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800713e:	2500      	movs	r5, #0
 8007140:	4411      	add	r1, r2
 8007142:	701d      	strb	r5, [r3, #0]
    while (dest_ptr[i] == ' ')
 8007144:	460b      	mov	r3, r1
 8007146:	3901      	subs	r1, #1
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	2a20      	cmp	r2, #32
 800714c:	d0f9      	beq.n	8007142 <_fx_directory_name_extract+0x6a>
 800714e:	7843      	ldrb	r3, [r0, #1]
    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 8007150:	2b00      	cmp	r3, #0
 8007152:	bf08      	it	eq
 8007154:	2400      	moveq	r4, #0
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
}
 8007156:	4620      	mov	r0, r4
 8007158:	bcf0      	pop	{r4, r5, r6, r7}
 800715a:	4770      	bx	lr
 800715c:	7843      	ldrb	r3, [r0, #1]
        source_ptr++;
 800715e:	3001      	adds	r0, #1
 8007160:	e7c5      	b.n	80070ee <_fx_directory_name_extract+0x16>
    dest_ptr[i] =  0;
 8007162:	f881 70ff 	strb.w	r7, [r1, #255]	; 0xff
 8007166:	22fe      	movs	r2, #254	; 0xfe
 8007168:	e7e4      	b.n	8007134 <_fx_directory_name_extract+0x5c>
        source_ptr = FX_NULL;
 800716a:	461c      	mov	r4, r3
 800716c:	e7f3      	b.n	8007156 <_fx_directory_name_extract+0x7e>
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800716e:	4604      	mov	r4, r0
 8007170:	e7f1      	b.n	8007156 <_fx_directory_name_extract+0x7e>
 8007172:	bf00      	nop

08007174 <_fx_directory_search>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4607      	mov	r7, r0
 800717a:	b0ab      	sub	sp, #172	; 0xac

ULONG         i, n;
UINT          found;
UINT          status;
UINT          v, j;
ULONG         cluster, next_cluster = 0;
 800717c:	2000      	movs	r0, #0
{
 800717e:	9208      	str	r2, [sp, #32]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 8007180:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
{
 8007184:	9107      	str	r1, [sp, #28]
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 8007186:	f607 019c 	addw	r1, r7, #2204	; 0x89c
    media_ptr -> fx_media_directory_searches++;
 800718a:	3201      	adds	r2, #1
ULONG         cluster, next_cluster = 0;
 800718c:	900d      	str	r0, [sp, #52]	; 0x34
    name =  media_ptr -> fx_media_name_buffer;
 800718e:	9103      	str	r1, [sp, #12]

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 8007190:	930a      	str	r3, [sp, #40]	; 0x28
    media_ptr -> fx_media_directory_searches++;
 8007192:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
    if (last_dir_ptr)
 8007196:	b10b      	cbz	r3, 800719c <_fx_directory_search+0x28>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	7018      	strb	r0, [r3, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	f897 53e0 	ldrb.w	r5, [r7, #992]	; 0x3e0
 80071a2:	781c      	ldrb	r4, [r3, #0]
 80071a4:	2c5c      	cmp	r4, #92	; 0x5c
 80071a6:	d019      	beq.n	80071dc <_fx_directory_search+0x68>
 80071a8:	2c2f      	cmp	r4, #47	; 0x2f
 80071aa:	d017      	beq.n	80071dc <_fx_directory_search+0x68>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 80071ac:	4bad      	ldr	r3, [pc, #692]	; (8007464 <_fx_directory_search+0x2f0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80071b4:	2900      	cmp	r1, #0
 80071b6:	f000 81f1 	beq.w	800759c <_fx_directory_search+0x428>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 80071ba:	680b      	ldr	r3, [r1, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 81b1 	beq.w	8007526 <_fx_directory_search+0x3b2>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80071c4:	2270      	movs	r2, #112	; 0x70
 80071c6:	ae0e      	add	r6, sp, #56	; 0x38

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 80071c8:	188b      	adds	r3, r1, r2
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80071ca:	4630      	mov	r0, r6
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 80071cc:	930b      	str	r3, [sp, #44]	; 0x2c
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80071ce:	f002 fa23 	bl	8009618 <memcpy>
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	f040 81fe 	bne.w	80075d4 <_fx_directory_search+0x460>
 80071d8:	9601      	str	r6, [sp, #4]
 80071da:	e005      	b.n	80071e8 <_fx_directory_search+0x74>
 80071dc:	2d00      	cmp	r5, #0
 80071de:	f040 8143 	bne.w	8007468 <_fx_directory_search+0x2f4>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 80071e2:	2300      	movs	r3, #0
 80071e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	f242 42a8 	movw	r2, #9384	; 0x24a8
            return(FX_SUCCESS);
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	9907      	ldr	r1, [sp, #28]
 80071f0:	18ba      	adds	r2, r7, r2
 80071f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f6:	9106      	str	r1, [sp, #24]
 80071f8:	9209      	str	r2, [sp, #36]	; 0x24
 80071fa:	f887 33e0 	strb.w	r3, [r7, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 80071fe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8007200:	b113      	cbz	r3, 8007208 <_fx_directory_search+0x94>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 8007202:	461a      	mov	r2, r3
 8007204:	9b06      	ldr	r3, [sp, #24]
 8007206:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 8007208:	9806      	ldr	r0, [sp, #24]
 800720a:	9903      	ldr	r1, [sp, #12]
 800720c:	f7ff ff64 	bl	80070d8 <_fx_directory_name_extract>

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 8007210:	9a01      	ldr	r2, [sp, #4]
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 8007212:	9006      	str	r0, [sp, #24]
        if (search_dir_ptr)
 8007214:	2a00      	cmp	r2, #0
 8007216:	d04f      	beq.n	80072b8 <_fx_directory_search+0x144>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8007218:	2300      	movs	r3, #0

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800721a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800721c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8007220:	6513      	str	r3, [r2, #80]	; 0x50
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007222:	461c      	mov	r4, r3
                i =        0;
 8007224:	930c      	str	r3, [sp, #48]	; 0x30
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007226:	e012      	b.n	800724e <_fx_directory_search+0xda>
                {

                    /* Increment the cluster count.  */
                    i++;
 8007228:	950c      	str	r5, [sp, #48]	; 0x30

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800722a:	f7fd fcaf 	bl	8004b8c <_fx_utility_FAT_entry_read>

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800722e:	2800      	cmp	r0, #0
 8007230:	f040 81af 	bne.w	8007592 <_fx_directory_search+0x41e>
                        /* Return the bad status.  */
                        return(status);
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 8007234:	2e01      	cmp	r6, #1
 8007236:	f240 81a7 	bls.w	8007588 <_fx_directory_search+0x414>
 800723a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800723c:	42b3      	cmp	r3, r6
 800723e:	461e      	mov	r6, r3
 8007240:	f000 81a2 	beq.w	8007588 <_fx_directory_search+0x414>
 8007244:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	42a3      	cmp	r3, r4
 800724a:	f0c0 819d 	bcc.w	8007588 <_fx_directory_search+0x414>
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800724e:	f8d9 3000 	ldr.w	r3, [r9]
                    i++;
 8007252:	1c65      	adds	r5, r4, #1
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8007254:	4631      	mov	r1, r6
 8007256:	aa0d      	add	r2, sp, #52	; 0x34
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007258:	42b3      	cmp	r3, r6
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800725a:	4638      	mov	r0, r7
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800725c:	d8e4      	bhi.n	8007228 <_fx_directory_search+0xb4>

                    cluster = next_cluster;
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800725e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8007262:	9e01      	ldr	r6, [sp, #4]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8007264:	fba0 0103 	umull	r0, r1, r0, r3
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 8007268:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800726a:	fba0 2304 	umull	r2, r3, r0, r4
            if (last_dir_ptr)
 800726e:	4628      	mov	r0, r5
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8007270:	fb04 3301 	mla	r3, r4, r1, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8007274:	0951      	lsrs	r1, r2, #5
 8007276:	ea41 61c3 	orr.w	r1, r1, r3, lsl #27
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	9104      	str	r1, [sp, #16]
 800727e:	9305      	str	r3, [sp, #20]
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8007280:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8007284:	e9c6 120e 	strd	r1, r2, [r6, #56]	; 0x38
            if (last_dir_ptr)
 8007288:	b1dd      	cbz	r5, 80072c2 <_fx_directory_search+0x14e>

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800728a:	2270      	movs	r2, #112	; 0x70
 800728c:	4631      	mov	r1, r6
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800728e:	682c      	ldr	r4, [r5, #0]
                *last_dir_ptr =  *search_dir_ptr;
 8007290:	f002 f9c2 	bl	8009618 <memcpy>
 8007294:	6833      	ldr	r3, [r6, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007296:	2200      	movs	r2, #0
 8007298:	1e61      	subs	r1, r4, #1
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800729a:	602c      	str	r4, [r5, #0]
 800729c:	3b01      	subs	r3, #1
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800729e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80072a2:	f801 0f01 	strb.w	r0, [r1, #1]!

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 80072a6:	7818      	ldrb	r0, [r3, #0]
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 80072a8:	b908      	cbnz	r0, 80072ae <_fx_directory_search+0x13a>
 80072aa:	2aff      	cmp	r2, #255	; 0xff
 80072ac:	d109      	bne.n	80072c2 <_fx_directory_search+0x14e>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80072ae:	3201      	adds	r2, #1
 80072b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80072b4:	d1f3      	bne.n	800729e <_fx_directory_search+0x12a>
 80072b6:	e004      	b.n	80072c2 <_fx_directory_search+0x14e>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 80072b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ba:	2200      	movs	r2, #0
 80072bc:	4619      	mov	r1, r3
 80072be:	e9cd 1204 	strd	r1, r2, [sp, #16]
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 80072c2:	aa2a      	add	r2, sp, #168	; 0xa8
 80072c4:	2300      	movs	r3, #0
 80072c6:	f842 3d78 	str.w	r3, [r2, #-120]!
 80072ca:	9202      	str	r2, [sp, #8]

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 80072cc:	4643      	mov	r3, r8
 80072ce:	9a02      	ldr	r2, [sp, #8]
 80072d0:	9901      	ldr	r1, [sp, #4]
 80072d2:	4638      	mov	r0, r7
 80072d4:	f000 fd9c 	bl	8007e10 <_fx_directory_entry_read>
#endif /* FX_ENABLE_EXFAT */

            i++;
 80072d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072da:	3501      	adds	r5, #1
 80072dc:	950c      	str	r5, [sp, #48]	; 0x30

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 80072de:	2800      	cmp	r0, #0
 80072e0:	f040 8157 	bne.w	8007592 <_fx_directory_search+0x41e>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 80072e4:	f8d8 4000 	ldr.w	r4, [r8]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	b373      	cbz	r3, 800734a <_fx_directory_search+0x1d6>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 80072ec:	2be5      	cmp	r3, #229	; 0xe5
 80072ee:	d102      	bne.n	80072f6 <_fx_directory_search+0x182>
 80072f0:	f898 3004 	ldrb.w	r3, [r8, #4]
 80072f4:	b313      	cbz	r3, 800733c <_fx_directory_search+0x1c8>
 80072f6:	9e03      	ldr	r6, [sp, #12]
 80072f8:	46b2      	mov	sl, r6
 80072fa:	e002      	b.n	8007302 <_fx_directory_search+0x18e>
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
                dir_name_ptr++;
            } while (*dir_name_ptr);
 80072fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007300:	b343      	cbz	r3, 8007354 <_fx_directory_search+0x1e0>
                alpha =  *dir_name_ptr;
 8007302:	7822      	ldrb	r2, [r4, #0]
 8007304:	46b3      	mov	fp, r6
                name_alpha =  *work_ptr;
 8007306:	f816 3b01 	ldrb.w	r3, [r6], #1
                if ((alpha >= 'a') && (alpha <= 'z'))
 800730a:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800730e:	f1a2 0c20 	sub.w	ip, r2, #32
 8007312:	4696      	mov	lr, r2
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8007314:	f1a3 0920 	sub.w	r9, r3, #32
                if ((alpha >= 'a') && (alpha <= 'z'))
 8007318:	2919      	cmp	r1, #25
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800731a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800731e:	bf98      	it	ls
 8007320:	fa5f fe8c 	uxtbls.w	lr, ip
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 8007324:	2919      	cmp	r1, #25
 8007326:	469c      	mov	ip, r3
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8007328:	bf98      	it	ls
 800732a:	fa5f fc89 	uxtbls.w	ip, r9
                if (alpha != name_alpha)
 800732e:	45e6      	cmp	lr, ip
 8007330:	d0e4      	beq.n	80072fc <_fx_directory_search+0x188>

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8007332:	b18a      	cbz	r2, 8007358 <_fx_directory_search+0x1e4>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8007334:	f898 3004 	ldrb.w	r3, [r8, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d141      	bne.n	80073c0 <_fx_directory_search+0x24c>
                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
                }
            }
        } while ((i < directory_size) && (!found));
 800733c:	2300      	movs	r3, #0
 800733e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007342:	428b      	cmp	r3, r1
 8007344:	bf08      	it	eq
 8007346:	4285      	cmpeq	r5, r0
 8007348:	d3c0      	bcc.n	80072cc <_fx_directory_search+0x158>
        /* Now determine if we have a match.  */
        if (!found)
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800734a:	2504      	movs	r5, #4
        }
    }
#endif

    return(FX_SUCCESS);
}
 800734c:	4628      	mov	r0, r5
 800734e:	b02b      	add	sp, #172	; 0xac
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	f89b 3001 	ldrb.w	r3, [fp, #1]
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1eb      	bne.n	8007334 <_fx_directory_search+0x1c0>
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800735c:	f898 301c 	ldrb.w	r3, [r8, #28]
 8007360:	4605      	mov	r5, r0
 8007362:	06db      	lsls	r3, r3, #27
 8007364:	d44b      	bmi.n	80073fe <_fx_directory_search+0x28a>
            if (name_ptr)
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1ee      	bne.n	800734a <_fx_directory_search+0x1d6>
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b5c      	cmp	r3, #92	; 0x5c
 8007372:	f000 8176 	beq.w	8007662 <_fx_directory_search+0x4ee>
 8007376:	2b2f      	cmp	r3, #47	; 0x2f
 8007378:	f000 8173 	beq.w	8007662 <_fx_directory_search+0x4ee>
 800737c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 81c3 	beq.w	800770a <_fx_directory_search+0x596>
 8007384:	1e59      	subs	r1, r3, #1
 8007386:	f207 32df 	addw	r2, r7, #991	; 0x3df
    v=  0;
 800738a:	2300      	movs	r3, #0
 800738c:	e005      	b.n	800739a <_fx_directory_search+0x226>
            v++;
 800738e:	3301      	adds	r3, #1
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8007390:	f802 0f01 	strb.w	r0, [r2, #1]!
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8007394:	2bff      	cmp	r3, #255	; 0xff
 8007396:	f000 8165 	beq.w	8007664 <_fx_directory_search+0x4f0>
 800739a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800739e:	2800      	cmp	r0, #0
 80073a0:	d1f5      	bne.n	800738e <_fx_directory_search+0x21a>
    if ((*original_name != '\\') && (*original_name != '/'))
 80073a2:	9a07      	ldr	r2, [sp, #28]
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	2a5c      	cmp	r2, #92	; 0x5c
 80073a8:	f000 815c 	beq.w	8007664 <_fx_directory_search+0x4f0>
 80073ac:	2a2f      	cmp	r2, #47	; 0x2f
 80073ae:	f000 8159 	beq.w	8007664 <_fx_directory_search+0x4f0>
 80073b2:	1c5a      	adds	r2, r3, #1
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 80073b4:	18f9      	adds	r1, r7, r3
 80073b6:	202f      	movs	r0, #47	; 0x2f
 80073b8:	4613      	mov	r3, r2
 80073ba:	f881 03e0 	strb.w	r0, [r1, #992]	; 0x3e0
 80073be:	e151      	b.n	8007664 <_fx_directory_search+0x4f0>
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 80073c0:	f108 0204 	add.w	r2, r8, #4
 80073c4:	e003      	b.n	80073ce <_fx_directory_search+0x25a>
                } while (*dir_name_ptr);
 80073c6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
                    work_ptr++;
 80073ca:	4656      	mov	r6, sl
                } while (*dir_name_ptr);
 80073cc:	b17b      	cbz	r3, 80073ee <_fx_directory_search+0x27a>
 80073ce:	4656      	mov	r6, sl
                    name_alpha =  *work_ptr;
 80073d0:	f81a 3b01 	ldrb.w	r3, [sl], #1
                    alpha =  *dir_name_ptr;
 80073d4:	7811      	ldrb	r1, [r2, #0]
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80073d6:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80073da:	f1a3 0c20 	sub.w	ip, r3, #32
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80073de:	2c19      	cmp	r4, #25
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80073e0:	bf98      	it	ls
 80073e2:	fa5f f38c 	uxtbls.w	r3, ip
                    if (alpha != name_alpha)
 80073e6:	428b      	cmp	r3, r1
 80073e8:	d0ed      	beq.n	80073c6 <_fx_directory_search+0x252>
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 80073ea:	2900      	cmp	r1, #0
 80073ec:	d1a6      	bne.n	800733c <_fx_directory_search+0x1c8>
 80073ee:	7833      	ldrb	r3, [r6, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1a3      	bne.n	800733c <_fx_directory_search+0x1c8>
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 80073f4:	f898 301c 	ldrb.w	r3, [r8, #28]
 80073f8:	4605      	mov	r5, r0
 80073fa:	06db      	lsls	r3, r3, #27
 80073fc:	d5b3      	bpl.n	8007366 <_fx_directory_search+0x1f2>
            search_dir =      *entry_ptr;
 80073fe:	2270      	movs	r2, #112	; 0x70
 8007400:	4641      	mov	r1, r8
 8007402:	a80e      	add	r0, sp, #56	; 0x38
 8007404:	f002 f908 	bl	8009618 <memcpy>
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8007408:	2200      	movs	r2, #0
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800740a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800740c:	9222      	str	r2, [sp, #136]	; 0x88
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 80d4 	bne.w	80075bc <_fx_directory_search+0x448>
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 8007414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007416:	7013      	strb	r3, [r2, #0]
                if (last_dir_ptr)
 8007418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741a:	b1fb      	cbz	r3, 800745c <_fx_directory_search+0x2e8>
                    *last_dir_ptr =  *search_dir_ptr;
 800741c:	a90e      	add	r1, sp, #56	; 0x38
 800741e:	2270      	movs	r2, #112	; 0x70
 8007420:	4618      	mov	r0, r3
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8007422:	681c      	ldr	r4, [r3, #0]
 8007424:	461e      	mov	r6, r3
                    *last_dir_ptr =  *search_dir_ptr;
 8007426:	f002 f8f7 	bl	8009618 <memcpy>
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800742a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800742c:	1d23      	adds	r3, r4, #4
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800742e:	6034      	str	r4, [r6, #0]
 8007430:	1d11      	adds	r1, r2, #4
 8007432:	428c      	cmp	r4, r1
 8007434:	bf38      	it	cc
 8007436:	429a      	cmpcc	r2, r3
 8007438:	f0c0 8156 	bcc.w	80076e8 <_fx_directory_search+0x574>
 800743c:	ea44 0102 	orr.w	r1, r4, r2
 8007440:	0789      	lsls	r1, r1, #30
 8007442:	f040 8151 	bne.w	80076e8 <_fx_directory_search+0x574>
 8007446:	3a04      	subs	r2, #4
 8007448:	f504 7080 	add.w	r0, r4, #256	; 0x100
                        destination_name_ptr[n] =  source_name_ptr[n];
 800744c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8007450:	4298      	cmp	r0, r3
 8007452:	6021      	str	r1, [r4, #0]
 8007454:	461c      	mov	r4, r3
 8007456:	f103 0304 	add.w	r3, r3, #4
 800745a:	d1f7      	bne.n	800744c <_fx_directory_search+0x2d8>
                search_dir_ptr =  FX_NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	e0ae      	b.n	80075c0 <_fx_directory_search+0x44c>
 8007462:	bf00      	nop
 8007464:	20002c7c 	.word	0x20002c7c
 8007468:	9907      	ldr	r1, [sp, #28]
 800746a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800746e:	460b      	mov	r3, r1
 8007470:	f101 06fe 	add.w	r6, r1, #254	; 0xfe
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8007474:	b18c      	cbz	r4, 800749a <_fx_directory_search+0x326>
                if (alpha == '\\')
 8007476:	2c5c      	cmp	r4, #92	; 0x5c
 8007478:	f000 8082 	beq.w	8007580 <_fx_directory_search+0x40c>
                if (beta == '\\')
 800747c:	2d5c      	cmp	r5, #92	; 0x5c
 800747e:	4621      	mov	r1, r4
 8007480:	d04f      	beq.n	8007522 <_fx_directory_search+0x3ae>
                    alpha =  '/';
 8007482:	4628      	mov	r0, r5
                if (alpha != beta)
 8007484:	4288      	cmp	r0, r1
 8007486:	d108      	bne.n	800749a <_fx_directory_search+0x326>
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8007488:	42b3      	cmp	r3, r6
 800748a:	f000 8127 	beq.w	80076dc <_fx_directory_search+0x568>
 800748e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007492:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007496:	2c00      	cmp	r4, #0
 8007498:	d1ed      	bne.n	8007476 <_fx_directory_search+0x302>
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800749a:	42a5      	cmp	r5, r4
 800749c:	f47f aea1 	bne.w	80071e2 <_fx_directory_search+0x6e>
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 80074a0:	9d08      	ldr	r5, [sp, #32]
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 80074a2:	f507 711c 	add.w	r1, r7, #624	; 0x270
 80074a6:	2270      	movs	r2, #112	; 0x70
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 80074a8:	682c      	ldr	r4, [r5, #0]
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 80074aa:	4628      	mov	r0, r5
 80074ac:	f002 f8b4 	bl	8009618 <memcpy>
 80074b0:	f207 21df 	addw	r1, r7, #735	; 0x2df
 80074b4:	1e60      	subs	r0, r4, #1
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80074b6:	2300      	movs	r3, #0
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 80074b8:	602c      	str	r4, [r5, #0]
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 80074ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80074be:	2bff      	cmp	r3, #255	; 0xff
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80074c0:	f103 0301 	add.w	r3, r3, #1
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 80074c4:	f800 2f01 	strb.w	r2, [r0, #1]!
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80074c8:	d07f      	beq.n	80075ca <_fx_directory_search+0x456>
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	d17d      	bne.n	80075ca <_fx_directory_search+0x456>
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 80074ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074d0:	b1d6      	cbz	r6, 8007508 <_fx_directory_search+0x394>
 80074d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80074d6:	b1bb      	cbz	r3, 8007508 <_fx_directory_search+0x394>
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 80074d8:	6835      	ldr	r5, [r6, #0]
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 80074da:	2270      	movs	r2, #112	; 0x70
 80074dc:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80074e0:	4630      	mov	r0, r6
 80074e2:	f002 f899 	bl	8009618 <memcpy>
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80074e6:	6035      	str	r5, [r6, #0]
 80074e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80074ec:	1e6a      	subs	r2, r5, #1
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80074ee:	2100      	movs	r1, #0
 80074f0:	3b01      	subs	r3, #1
                    destination_name_ptr[n] =  source_name_ptr[n];
 80074f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80074f6:	f802 0f01 	strb.w	r0, [r2, #1]!
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 80074fa:	7818      	ldrb	r0, [r3, #0]
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f040 80aa 	bne.w	8007656 <_fx_directory_search+0x4e2>
 8007502:	29ff      	cmp	r1, #255	; 0xff
 8007504:	f000 80a7 	beq.w	8007656 <_fx_directory_search+0x4e2>
            if (last_name_ptr)
 8007508:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800750a:	b103      	cbz	r3, 800750e <_fx_directory_search+0x39a>
                *last_name_ptr =  temp_ptr;
 800750c:	601c      	str	r4, [r3, #0]
            media_ptr -> fx_media_directory_search_cache_hits++;
 800750e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
            return(FX_SUCCESS);
 8007512:	2500      	movs	r5, #0
            media_ptr -> fx_media_directory_search_cache_hits++;
 8007514:	3301      	adds	r3, #1
}
 8007516:	4628      	mov	r0, r5
            media_ptr -> fx_media_directory_search_cache_hits++;
 8007518:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
}
 800751c:	b02b      	add	sp, #172	; 0xac
 800751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    beta =  '/';
 8007522:	202f      	movs	r0, #47	; 0x2f
 8007524:	e7ae      	b.n	8007484 <_fx_directory_search+0x310>
    if (media_ptr -> fx_media_last_found_name[0])
 8007526:	2d00      	cmp	r5, #0
 8007528:	f43f ae5b 	beq.w	80071e2 <_fx_directory_search+0x6e>
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800752c:	2d5c      	cmp	r5, #92	; 0x5c
 800752e:	d002      	beq.n	8007536 <_fx_directory_search+0x3c2>
 8007530:	2d2f      	cmp	r5, #47	; 0x2f
 8007532:	f47f ae56 	bne.w	80071e2 <_fx_directory_search+0x6e>
 8007536:	2300      	movs	r3, #0
                    v++;
 8007538:	2501      	movs	r5, #1
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800753a:	930b      	str	r3, [sp, #44]	; 0x2c
 800753c:	9301      	str	r3, [sp, #4]
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800753e:	2c00      	cmp	r4, #0
 8007540:	f000 80e5 	beq.w	800770e <_fx_directory_search+0x59a>
 8007544:	f203 30e1 	addw	r0, r3, #993	; 0x3e1
 8007548:	9e07      	ldr	r6, [sp, #28]
 800754a:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
                j =  0;
 800754e:	2100      	movs	r1, #0
 8007550:	4438      	add	r0, r7
 8007552:	e00c      	b.n	800756e <_fx_directory_search+0x3fa>
                        beta =  '/';
 8007554:	2a5c      	cmp	r2, #92	; 0x5c
 8007556:	bf08      	it	eq
 8007558:	222f      	moveq	r2, #47	; 0x2f
                    if (alpha != beta)
 800755a:	42a2      	cmp	r2, r4
 800755c:	d172      	bne.n	8007644 <_fx_directory_search+0x4d0>
                    j++;
 800755e:	3101      	adds	r1, #1
                    v++;
 8007560:	3501      	adds	r5, #1
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8007562:	4299      	cmp	r1, r3
 8007564:	d06e      	beq.n	8007644 <_fx_directory_search+0x4d0>
 8007566:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800756a:	2c00      	cmp	r4, #0
 800756c:	d06a      	beq.n	8007644 <_fx_directory_search+0x4d0>
                    if (alpha == '\\')
 800756e:	2c5c      	cmp	r4, #92	; 0x5c
                    beta =   media_ptr -> fx_media_last_found_name[v];
 8007570:	f810 2b01 	ldrb.w	r2, [r0], #1
                    if (alpha == '\\')
 8007574:	d1ee      	bne.n	8007554 <_fx_directory_search+0x3e0>
                    if (beta == '\\')
 8007576:	2a5c      	cmp	r2, #92	; 0x5c
                        alpha =  '/';
 8007578:	f04f 042f 	mov.w	r4, #47	; 0x2f
                    if (beta == '\\')
 800757c:	d1ed      	bne.n	800755a <_fx_directory_search+0x3e6>
 800757e:	e7ee      	b.n	800755e <_fx_directory_search+0x3ea>
                if (beta == '\\')
 8007580:	2d5c      	cmp	r5, #92	; 0x5c
 8007582:	d081      	beq.n	8007488 <_fx_directory_search+0x314>
                    alpha =  '/';
 8007584:	212f      	movs	r1, #47	; 0x2f
 8007586:	e77c      	b.n	8007482 <_fx_directory_search+0x30e>
                        return(FX_FAT_READ_ERROR);
 8007588:	2503      	movs	r5, #3
}
 800758a:	4628      	mov	r0, r5
 800758c:	b02b      	add	sp, #172	; 0xac
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	4605      	mov	r5, r0
 8007594:	4628      	mov	r0, r5
 8007596:	b02b      	add	sp, #172	; 0xac
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800759c:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0bf      	beq.n	8007526 <_fx_directory_search+0x3b2>
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80075a6:	ae0e      	add	r6, sp, #56	; 0x38
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 80075a8:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80075ac:	2270      	movs	r2, #112	; 0x70
 80075ae:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80075b2:	4630      	mov	r0, r6
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 80075b4:	930b      	str	r3, [sp, #44]	; 0x2c
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80075b6:	f002 f82f 	bl	8009618 <memcpy>
 80075ba:	e60a      	b.n	80071d2 <_fx_directory_search+0x5e>
            search_dir_ptr =  &search_dir;
 80075bc:	ab0e      	add	r3, sp, #56	; 0x38
 80075be:	9301      	str	r3, [sp, #4]
    } while (name_ptr);
 80075c0:	9b06      	ldr	r3, [sp, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f47f ae1b 	bne.w	80071fe <_fx_directory_search+0x8a>
 80075c8:	e6d0      	b.n	800736c <_fx_directory_search+0x1f8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80075ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ce:	f47f af74 	bne.w	80074ba <_fx_directory_search+0x346>
 80075d2:	e77c      	b.n	80074ce <_fx_directory_search+0x35a>
 80075d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d6:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
 80075da:	1e59      	subs	r1, r3, #1
        v =  0;
 80075dc:	2300      	movs	r3, #0
 80075de:	e008      	b.n	80075f2 <_fx_directory_search+0x47e>
                        beta =  '/';
 80075e0:	2a5c      	cmp	r2, #92	; 0x5c
 80075e2:	bf08      	it	eq
 80075e4:	222f      	moveq	r2, #47	; 0x2f
                    if (alpha != beta)
 80075e6:	42aa      	cmp	r2, r5
 80075e8:	d10f      	bne.n	800760a <_fx_directory_search+0x496>
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 80075ea:	2bff      	cmp	r3, #255	; 0xff
 80075ec:	d00d      	beq.n	800760a <_fx_directory_search+0x496>
 80075ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80075f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075f6:	b1b2      	cbz	r2, 8007626 <_fx_directory_search+0x4b2>
                    if (alpha == '\\')
 80075f8:	2d5c      	cmp	r5, #92	; 0x5c
 80075fa:	f103 0301 	add.w	r3, r3, #1
 80075fe:	d1ef      	bne.n	80075e0 <_fx_directory_search+0x46c>
                    if (beta == '\\')
 8007600:	2a5c      	cmp	r2, #92	; 0x5c
                        alpha =  '/';
 8007602:	f04f 052f 	mov.w	r5, #47	; 0x2f
                    if (beta == '\\')
 8007606:	d1ee      	bne.n	80075e6 <_fx_directory_search+0x472>
 8007608:	e7ef      	b.n	80075ea <_fx_directory_search+0x476>
                if (path_ptr[v])
 800760a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800760c:	5cd2      	ldrb	r2, [r2, r3]
 800760e:	2a00      	cmp	r2, #0
 8007610:	f47f ade2 	bne.w	80071d8 <_fx_directory_search+0x64>
 8007614:	18fa      	adds	r2, r7, r3
 8007616:	f892 23e0 	ldrb.w	r2, [r2, #992]	; 0x3e0
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800761a:	2a5c      	cmp	r2, #92	; 0x5c
 800761c:	d008      	beq.n	8007630 <_fx_directory_search+0x4bc>
 800761e:	2a2f      	cmp	r2, #47	; 0x2f
 8007620:	f47f adda 	bne.w	80071d8 <_fx_directory_search+0x64>
 8007624:	e004      	b.n	8007630 <_fx_directory_search+0x4bc>
 8007626:	2d5c      	cmp	r5, #92	; 0x5c
 8007628:	d002      	beq.n	8007630 <_fx_directory_search+0x4bc>
 800762a:	2d2f      	cmp	r5, #47	; 0x2f
 800762c:	f47f add4 	bne.w	80071d8 <_fx_directory_search+0x64>
                    v++;
 8007630:	1c5d      	adds	r5, r3, #1
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8007632:	9601      	str	r6, [sp, #4]
 8007634:	2dfe      	cmp	r5, #254	; 0xfe
 8007636:	d982      	bls.n	800753e <_fx_directory_search+0x3ca>
                if (v >= 256)
 8007638:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800763c:	f43f add4 	beq.w	80071e8 <_fx_directory_search+0x74>
                j =  0;
 8007640:	2100      	movs	r1, #0
                if (v >= 256)
 8007642:	25ff      	movs	r5, #255	; 0xff
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 8007644:	9b07      	ldr	r3, [sp, #28]
 8007646:	443d      	add	r5, r7
 8007648:	5c5a      	ldrb	r2, [r3, r1]
 800764a:	f895 33e0 	ldrb.w	r3, [r5, #992]	; 0x3e0
 800764e:	429a      	cmp	r2, r3
 8007650:	f47f adca 	bne.w	80071e8 <_fx_directory_search+0x74>
 8007654:	e724      	b.n	80074a0 <_fx_directory_search+0x32c>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007656:	3101      	adds	r1, #1
 8007658:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800765c:	f47f af49 	bne.w	80074f2 <_fx_directory_search+0x37e>
 8007660:	e752      	b.n	8007508 <_fx_directory_search+0x394>
    v=  0;
 8007662:	2300      	movs	r3, #0
 8007664:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8007668:	9907      	ldr	r1, [sp, #28]
 800766a:	443a      	add	r2, r7
 800766c:	1e48      	subs	r0, r1, #1
 800766e:	e005      	b.n	800767c <_fx_directory_search+0x508>
        v++;
 8007670:	3301      	adds	r3, #1
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 8007672:	f802 1b01 	strb.w	r1, [r2], #1
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	d040      	beq.n	80076fe <_fx_directory_search+0x58a>
 800767c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8007680:	2900      	cmp	r1, #0
 8007682:	d1f5      	bne.n	8007670 <_fx_directory_search+0x4fc>
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8007684:	443b      	add	r3, r7
 8007686:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
    if (search_dir_ptr)
 800768a:	9901      	ldr	r1, [sp, #4]
 800768c:	2900      	cmp	r1, #0
 800768e:	d03a      	beq.n	8007706 <_fx_directory_search+0x592>
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8007690:	2270      	movs	r2, #112	; 0x70
 8007692:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8007696:	f001 ffbf 	bl	8009618 <memcpy>
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800769a:	2301      	movs	r3, #1
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800769c:	9c08      	ldr	r4, [sp, #32]
 800769e:	2270      	movs	r2, #112	; 0x70
 80076a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80076a4:	f507 701c 	add.w	r0, r7, #624	; 0x270
 80076a8:	4621      	mov	r1, r4
 80076aa:	f001 ffb5 	bl	8009618 <memcpy>
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 80076ae:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80076b2:	f207 21df 	addw	r1, r7, #735	; 0x2df
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80076b6:	2300      	movs	r3, #0
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 80076b8:	f8c7 2270 	str.w	r2, [r7, #624]	; 0x270
 80076bc:	6822      	ldr	r2, [r4, #0]
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 80076be:	5cd2      	ldrb	r2, [r2, r3]
 80076c0:	f801 2f01 	strb.w	r2, [r1, #1]!
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	5cd0      	ldrb	r0, [r2, r3]
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80076ca:	b910      	cbnz	r0, 80076d2 <_fx_directory_search+0x55e>
 80076cc:	2bff      	cmp	r3, #255	; 0xff
 80076ce:	f47f ae3d 	bne.w	800734c <_fx_directory_search+0x1d8>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80076d2:	3301      	adds	r3, #1
 80076d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d8:	d1f1      	bne.n	80076be <_fx_directory_search+0x54a>
 80076da:	e637      	b.n	800734c <_fx_directory_search+0x1d8>
 80076dc:	9b07      	ldr	r3, [sp, #28]
 80076de:	f897 54df 	ldrb.w	r5, [r7, #1247]	; 0x4df
 80076e2:	f893 40ff 	ldrb.w	r4, [r3, #255]	; 0xff
 80076e6:	e6d8      	b.n	800749a <_fx_directory_search+0x326>
 80076e8:	3c01      	subs	r4, #1
 80076ea:	1e51      	subs	r1, r2, #1
 80076ec:	f102 03ff 	add.w	r3, r2, #255	; 0xff
                        destination_name_ptr[n] =  source_name_ptr[n];
 80076f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80076f4:	428b      	cmp	r3, r1
                        destination_name_ptr[n] =  source_name_ptr[n];
 80076f6:	f804 2f01 	strb.w	r2, [r4, #1]!
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80076fa:	d1f9      	bne.n	80076f0 <_fx_directory_search+0x57c>
 80076fc:	e6ae      	b.n	800745c <_fx_directory_search+0x2e8>
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	f887 33e0 	strb.w	r3, [r7, #992]	; 0x3e0
 8007704:	e7c1      	b.n	800768a <_fx_directory_search+0x516>
 8007706:	460b      	mov	r3, r1
 8007708:	e7c8      	b.n	800769c <_fx_directory_search+0x528>
 800770a:	2201      	movs	r2, #1
 800770c:	e652      	b.n	80073b4 <_fx_directory_search+0x240>
                j =  0;
 800770e:	4621      	mov	r1, r4
 8007710:	e798      	b.n	8007644 <_fx_directory_search+0x4d0>
 8007712:	bf00      	nop

08007714 <_fx_file_extended_seek>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8007718:	4991      	ldr	r1, [pc, #580]	; (8007960 <_fx_file_extended_seek+0x24c>)
{
 800771a:	461f      	mov	r7, r3
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800771c:	6803      	ldr	r3, [r0, #0]
{
 800771e:	b08d      	sub	sp, #52	; 0x34
ULONG     contents = 0;
 8007720:	2400      	movs	r4, #0
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8007722:	428b      	cmp	r3, r1
ULONG     contents = 0;
 8007724:	940b      	str	r4, [sp, #44]	; 0x2c
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8007726:	d110      	bne.n	800774a <_fx_file_extended_seek+0x36>
        return(FX_NOT_OPEN);
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8007728:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800772a:	4616      	mov	r6, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800772c:	4a8d      	ldr	r2, [pc, #564]	; (8007964 <_fx_file_extended_seek+0x250>)
    media_ptr -> fx_media_file_seeks++;
 800772e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    FX_PROTECT
 8007732:	6829      	ldr	r1, [r5, #0]
    media_ptr -> fx_media_file_seeks++;
 8007734:	3301      	adds	r3, #1
    FX_PROTECT
 8007736:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_seeks++;
 8007738:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    FX_PROTECT
 800773c:	d00b      	beq.n	8007756 <_fx_file_extended_seek+0x42>
 800773e:	f04f 0811 	mov.w	r8, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
}
 8007742:	4640      	mov	r0, r8
 8007744:	b00d      	add	sp, #52	; 0x34
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 800774a:	f04f 0807 	mov.w	r8, #7
}
 800774e:	4640      	mov	r0, r8
 8007750:	b00d      	add	sp, #52	; 0x34
 8007752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8007756:	f505 73e4 	add.w	r3, r5, #456	; 0x1c8
 800775a:	4604      	mov	r4, r0
 800775c:	f04f 31ff 	mov.w	r1, #4294967295
 8007760:	4618      	mov	r0, r3
 8007762:	9306      	str	r3, [sp, #24]
 8007764:	f000 fee0 	bl	8008528 <_tx_mutex_get>
 8007768:	4680      	mov	r8, r0
 800776a:	2800      	cmp	r0, #0
 800776c:	d1e7      	bne.n	800773e <_fx_file_extended_seek+0x2a>
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800776e:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8007772:	42b9      	cmp	r1, r7
 8007774:	bf08      	it	eq
 8007776:	42b0      	cmpeq	r0, r6
 8007778:	f000 8084 	beq.w	8007884 <_fx_file_extended_seek+0x170>
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800777c:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8007780:	f8d5 a054 	ldr.w	sl, [r5, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8007784:	fb0a fb09 	mul.w	fp, sl, r9
    if (bytes_per_cluster == 0)
 8007788:	f1bb 0f00 	cmp.w	fp, #0
 800778c:	f000 80bb 	beq.w	8007906 <_fx_file_extended_seek+0x1f2>
 8007790:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8007794:	429f      	cmp	r7, r3
 8007796:	bf08      	it	eq
 8007798:	4296      	cmpeq	r6, r2
 800779a:	e9cd 2300 	strd	r2, r3, [sp]
 800779e:	d375      	bcc.n	800788c <_fx_file_extended_seek+0x178>
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 80077a0:	465a      	mov	r2, fp
 80077a2:	2300      	movs	r3, #0
 80077a4:	69a6      	ldr	r6, [r4, #24]
 80077a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077ae:	fba6 230b 	umull	r2, r3, r6, fp
 80077b2:	4299      	cmp	r1, r3
 80077b4:	bf08      	it	eq
 80077b6:	4290      	cmpeq	r0, r2
 80077b8:	d340      	bcc.n	800783c <_fx_file_extended_seek+0x128>
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 80077ba:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80077bc:	fbab 2307 	umull	r2, r3, fp, r7
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf08      	it	eq
 80077c4:	4282      	cmpeq	r2, r0
 80077c6:	d277      	bcs.n	80078b8 <_fx_file_extended_seek+0x1a4>
                bytes_remaining =   byte_offset -
 80077c8:	1a80      	subs	r0, r0, r2
                cluster =    file_ptr -> fx_file_current_physical_cluster;
 80077ca:	6a26      	ldr	r6, [r4, #32]
                bytes_remaining =   byte_offset -
 80077cc:	f161 0100 	sbc.w	r1, r1, #0
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80077d0:	2e01      	cmp	r6, #1
 80077d2:	f240 80be 	bls.w	8007952 <_fx_file_extended_seek+0x23e>
 80077d6:	f242 49a8 	movw	r9, #9384	; 0x24a8
 80077da:	f855 3009 	ldr.w	r3, [r5, r9]
 80077de:	42b3      	cmp	r3, r6
 80077e0:	d978      	bls.n	80078d4 <_fx_file_extended_seek+0x1c0>
 80077e2:	44a9      	add	r9, r5
 80077e4:	9503      	str	r5, [sp, #12]
 80077e6:	f8cd b01c 	str.w	fp, [sp, #28]
 80077ea:	4682      	mov	sl, r0
 80077ec:	9409      	str	r4, [sp, #36]	; 0x24
 80077ee:	468b      	mov	fp, r1
 80077f0:	f8cd 8020 	str.w	r8, [sp, #32]
 80077f4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077f8:	e011      	b.n	800781e <_fx_file_extended_seek+0x10a>
                if (bytes_remaining > bytes_per_cluster)
 80077fa:	455d      	cmp	r5, fp
                cluster =  contents;
 80077fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                if (bytes_remaining > bytes_per_cluster)
 80077fe:	bf08      	it	eq
 8007800:	4554      	cmpeq	r4, sl
 8007802:	f080 8086 	bcs.w	8007912 <_fx_file_extended_seek+0x1fe>
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8007806:	ebba 0a04 	subs.w	sl, sl, r4
                cluster_count++;
 800780a:	4647      	mov	r7, r8
 800780c:	4616      	mov	r6, r2
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800780e:	eb6b 0b05 	sbc.w	fp, fp, r5
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8007812:	2a01      	cmp	r2, #1
 8007814:	d96d      	bls.n	80078f2 <_fx_file_extended_seek+0x1de>
 8007816:	f8d9 1000 	ldr.w	r1, [r9]
 800781a:	4291      	cmp	r1, r2
 800781c:	d969      	bls.n	80078f2 <_fx_file_extended_seek+0x1de>
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800781e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007820:	4631      	mov	r1, r6
 8007822:	9803      	ldr	r0, [sp, #12]
                cluster_count++;
 8007824:	f107 0801 	add.w	r8, r7, #1
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8007828:	f7fd f9b0 	bl	8004b8c <_fx_utility_FAT_entry_read>
                if (status != FX_SUCCESS)
 800782c:	2800      	cmp	r0, #0
 800782e:	d0e4      	beq.n	80077fa <_fx_file_extended_seek+0xe6>
 8007830:	4603      	mov	r3, r0
                    FX_UNPROTECT
 8007832:	9806      	ldr	r0, [sp, #24]
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8007834:	4698      	mov	r8, r3
                    FX_UNPROTECT
 8007836:	f000 ff61 	bl	80086fc <_tx_mutex_put>
                    return(status);
 800783a:	e782      	b.n	8007742 <_fx_file_extended_seek+0x2e>
        file_ptr -> fx_file_current_relative_cluster = (ULONG)byte_offset / bytes_per_cluster;
 800783c:	fbb0 f7fb 	udiv	r7, r0, fp
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 8007840:	6966      	ldr	r6, [r4, #20]
        file_ptr -> fx_file_current_relative_cluster = (ULONG)byte_offset / bytes_per_cluster;
 8007842:	6367      	str	r7, [r4, #52]	; 0x34
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 8007844:	443e      	add	r6, r7
        bytes_remaining =  byte_offset % bytes_per_cluster;
 8007846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        file_ptr -> fx_file_current_physical_cluster =
 800784a:	6226      	str	r6, [r4, #32]
        bytes_remaining =  byte_offset % bytes_per_cluster;
 800784c:	f7f8 fe0c 	bl	8000468 <__aeabi_uldivmod>
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007856:	3e02      	subs	r6, #2
 8007858:	2500      	movs	r5, #0
 800785a:	fb0a 3606 	mla	r6, sl, r6, r3
    if (bytes_remaining == bytes_per_cluster)
 800785e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007862:	428b      	cmp	r3, r1
 8007864:	bf08      	it	eq
 8007866:	4282      	cmpeq	r2, r0
 8007868:	d013      	beq.n	8007892 <_fx_file_extended_seek+0x17e>
 800786a:	464a      	mov	r2, r9
 800786c:	462b      	mov	r3, r5
 800786e:	f7f8 fdfb 	bl	8000468 <__aeabi_uldivmod>
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8007872:	6322      	str	r2, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8007874:	4406      	add	r6, r0
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8007876:	63a0      	str	r0, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8007878:	e9dd 2300 	ldrd	r2, r3, [sp]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800787c:	e9c4 650a 	strd	r6, r5, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8007880:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    FX_UNPROTECT
 8007884:	9806      	ldr	r0, [sp, #24]
 8007886:	f000 ff39 	bl	80086fc <_tx_mutex_put>
    return(FX_SUCCESS);
 800788a:	e75a      	b.n	8007742 <_fx_file_extended_seek+0x2e>
 800788c:	e9cd 6700 	strd	r6, r7, [sp]
 8007890:	e786      	b.n	80077a0 <_fx_file_extended_seek+0x8c>
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8007892:	f112 30ff 	adds.w	r0, r2, #4294967295
 8007896:	464a      	mov	r2, r9
 8007898:	f143 31ff 	adc.w	r1, r3, #4294967295
 800789c:	462b      	mov	r3, r5
 800789e:	f7f8 fde3 	bl	8000468 <__aeabi_uldivmod>
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80078a2:	4406      	add	r6, r0
 80078a4:	62e5      	str	r5, [r4, #44]	; 0x2c
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 80078a6:	63a0      	str	r0, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 80078a8:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80078ac:	62a6      	str	r6, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 80078ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078b2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80078b6:	e7e5      	b.n	8007884 <_fx_file_extended_seek+0x170>
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80078b8:	6963      	ldr	r3, [r4, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 80078ba:	1e77      	subs	r7, r6, #1
 80078bc:	460a      	mov	r2, r1
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80078be:	441e      	add	r6, r3
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 80078c0:	fb0b f307 	mul.w	r3, fp, r7
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80078c4:	3e01      	subs	r6, #1
                bytes_remaining =   byte_offset -
 80078c6:	1ac1      	subs	r1, r0, r3
 80078c8:	f162 0200 	sbc.w	r2, r2, #0
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80078cc:	2e01      	cmp	r6, #1
                bytes_remaining =   byte_offset -
 80078ce:	4608      	mov	r0, r1
 80078d0:	4611      	mov	r1, r2
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80078d2:	d880      	bhi.n	80077d6 <_fx_file_extended_seek+0xc2>
 80078d4:	46ba      	mov	sl, r7
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 80078d6:	fbab ab0a 	umull	sl, fp, fp, sl
 80078da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078de:	459b      	cmp	fp, r3
 80078e0:	bf08      	it	eq
 80078e2:	4592      	cmpeq	sl, r2
 80078e4:	d335      	bcc.n	8007952 <_fx_file_extended_seek+0x23e>
 80078e6:	6a26      	ldr	r6, [r4, #32]
 80078e8:	f8d5 a054 	ldr.w	sl, [r5, #84]	; 0x54
 80078ec:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
 80078f0:	e7b0      	b.n	8007854 <_fx_file_extended_seek+0x140>
 80078f2:	4650      	mov	r0, sl
 80078f4:	4659      	mov	r1, fp
 80078f6:	46c2      	mov	sl, r8
 80078f8:	9d03      	ldr	r5, [sp, #12]
 80078fa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80078fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007902:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007904:	e7e7      	b.n	80078d6 <_fx_file_extended_seek+0x1c2>
        FX_UNPROTECT
 8007906:	9806      	ldr	r0, [sp, #24]
        return(FX_MEDIA_INVALID);
 8007908:	f04f 0802 	mov.w	r8, #2
        FX_UNPROTECT
 800790c:	f000 fef6 	bl	80086fc <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 8007910:	e717      	b.n	8007742 <_fx_file_extended_seek+0x2e>
 8007912:	9c09      	ldr	r4, [sp, #36]	; 0x24
                    if ((bytes_remaining == bytes_per_cluster) &&
 8007914:	2a01      	cmp	r2, #1
 8007916:	4650      	mov	r0, sl
 8007918:	4659      	mov	r1, fp
 800791a:	46c2      	mov	sl, r8
 800791c:	9d03      	ldr	r5, [sp, #12]
 800791e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007922:	f8dd 8020 	ldr.w	r8, [sp, #32]
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8007926:	6226      	str	r6, [r4, #32]
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8007928:	6367      	str	r7, [r4, #52]	; 0x34
                    if ((bytes_remaining == bytes_per_cluster) &&
 800792a:	d9d4      	bls.n	80078d6 <_fx_file_extended_seek+0x1c2>
 800792c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8007930:	428f      	cmp	r7, r1
 8007932:	bf08      	it	eq
 8007934:	4286      	cmpeq	r6, r0
 8007936:	d1ce      	bne.n	80078d6 <_fx_file_extended_seek+0x1c2>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8007938:	f242 43a8 	movw	r3, #9384	; 0x24a8
 800793c:	58eb      	ldr	r3, [r5, r3]
 800793e:	4293      	cmp	r3, r2
 8007940:	d9c9      	bls.n	80078d6 <_fx_file_extended_seek+0x1c2>
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8007942:	6222      	str	r2, [r4, #32]
                        bytes_remaining =  0;
 8007944:	2300      	movs	r3, #0
 8007946:	2200      	movs	r2, #0
                        file_ptr -> fx_file_current_relative_cluster++;
 8007948:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
                        bytes_remaining =  0;
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	e7c1      	b.n	80078d6 <_fx_file_extended_seek+0x1c2>
                FX_UNPROTECT
 8007952:	9806      	ldr	r0, [sp, #24]
                return(FX_FILE_CORRUPT);
 8007954:	f04f 0808 	mov.w	r8, #8
                FX_UNPROTECT
 8007958:	f000 fed0 	bl	80086fc <_tx_mutex_put>
                return(FX_FILE_CORRUPT);
 800795c:	e6f1      	b.n	8007742 <_fx_file_extended_seek+0x2e>
 800795e:	bf00      	nop
 8007960:	46494c45 	.word	0x46494c45
 8007964:	4d454449 	.word	0x4d454449

08007968 <_fx_media_abort>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800796a:	4a29      	ldr	r2, [pc, #164]	; (8007a10 <_fx_media_abort+0xa8>)
    media_ptr -> fx_media_aborts++;
 800796c:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8007970:	6801      	ldr	r1, [r0, #0]
    media_ptr -> fx_media_aborts++;
 8007972:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8007974:	4291      	cmp	r1, r2
    media_ptr -> fx_media_aborts++;
 8007976:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800797a:	d002      	beq.n	8007982 <_fx_media_abort+0x1a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800797c:	2511      	movs	r5, #17
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
}
 800797e:	4628      	mov	r0, r5
 8007980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FX_PROTECT
 8007982:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 8007986:	4604      	mov	r4, r0
 8007988:	f04f 31ff 	mov.w	r1, #4294967295
 800798c:	4630      	mov	r0, r6
 800798e:	f000 fdcb 	bl	8008528 <_tx_mutex_get>
 8007992:	4605      	mov	r5, r0
 8007994:	2800      	cmp	r0, #0
 8007996:	d1f1      	bne.n	800797c <_fx_media_abort+0x14>
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8007998:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
    while (open_count)
 800799c:	b123      	cbz	r3, 80079a8 <_fx_media_abort+0x40>
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800799e:	491d      	ldr	r1, [pc, #116]	; (8007a14 <_fx_media_abort+0xac>)
    while (open_count)
 80079a0:	3b01      	subs	r3, #1
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 80079a2:	6011      	str	r1, [r2, #0]
        file_ptr =  file_ptr -> fx_file_opened_next;
 80079a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    while (open_count)
 80079a6:	d1fb      	bne.n	80079a0 <_fx_media_abort+0x38>
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 80079a8:	2103      	movs	r1, #3
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80079aa:	2290      	movs	r2, #144	; 0x90
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80079ac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80079b0:	4620      	mov	r0, r4
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80079b2:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80079b6:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80079b8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80079bc:	b672      	cpsid	i
    if (_fx_system_media_opened_count == ((ULONG) 1))
 80079be:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <_fx_media_abort+0xb0>)
 80079c0:	6813      	ldr	r3, [r2, #0]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d01a      	beq.n	80079fc <_fx_media_abort+0x94>
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80079c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 80079ca:	f8d4 70d0 	ldr.w	r7, [r4, #208]	; 0xd0
        if (_fx_system_media_opened_ptr == media_ptr)
 80079ce:	f8df c050 	ldr.w	ip, [pc, #80]	; 8007a20 <_fx_media_abort+0xb8>
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80079d2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 80079d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 80079da:	f8c0 70d0 	str.w	r7, [r0, #208]	; 0xd0
        if (_fx_system_media_opened_ptr == media_ptr)
 80079de:	f8dc 0000 	ldr.w	r0, [ip]
 80079e2:	42a0      	cmp	r0, r4
 80079e4:	d00e      	beq.n	8007a04 <_fx_media_abort+0x9c>
    _fx_system_media_opened_count--;
 80079e6:	3b01      	subs	r3, #1
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 80079e8:	480c      	ldr	r0, [pc, #48]	; (8007a1c <_fx_media_abort+0xb4>)
    _fx_system_media_opened_count--;
 80079ea:	6013      	str	r3, [r2, #0]
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 80079ec:	6020      	str	r0, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80079ee:	f381 8810 	msr	PRIMASK, r1
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 80079f2:	4630      	mov	r0, r6
 80079f4:	f000 fd3e 	bl	8008474 <_tx_mutex_delete>
}
 80079f8:	4628      	mov	r0, r5
 80079fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _fx_system_media_opened_ptr =  FX_NULL;
 80079fc:	4808      	ldr	r0, [pc, #32]	; (8007a20 <_fx_media_abort+0xb8>)
 80079fe:	2700      	movs	r7, #0
 8007a00:	6007      	str	r7, [r0, #0]
 8007a02:	e7f0      	b.n	80079e6 <_fx_media_abort+0x7e>
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8007a04:	f8d4 70d0 	ldr.w	r7, [r4, #208]	; 0xd0
 8007a08:	f8cc 7000 	str.w	r7, [ip]
 8007a0c:	e7eb      	b.n	80079e6 <_fx_media_abort+0x7e>
 8007a0e:	bf00      	nop
 8007a10:	4d454449 	.word	0x4d454449
 8007a14:	46494c41 	.word	0x46494c41
 8007a18:	20002bc8 	.word	0x20002bc8
 8007a1c:	4d454441 	.word	0x4d454441
 8007a20:	20002bd0 	.word	0x20002bd0

08007a24 <_fx_media_boot_info_extract>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8007a24:	b538      	push	{r3, r4, r5, lr}

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 8007a26:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
{
 8007a2a:	4604      	mov	r4, r0

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 8007a2c:	f105 000b 	add.w	r0, r5, #11
 8007a30:	f7fa ffb0 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007a34:	62a0      	str	r0, [r4, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 8007a36:	b388      	cbz	r0, 8007a9c <_fx_media_boot_info_extract+0x78>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8007a38:	f105 0018 	add.w	r0, r5, #24
 8007a3c:	f7fa ffaa 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007a40:	62e0      	str	r0, [r4, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 8007a42:	f105 001a 	add.w	r0, r5, #26
 8007a46:	f7fa ffa5 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007a4a:	6320      	str	r0, [r4, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8007a4c:	f105 0013 	add.w	r0, r5, #19
 8007a50:	f7fa ffa0 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007a54:	2100      	movs	r1, #0
        if (media_ptr -> fx_media_total_sectors == 0)
 8007a56:	ea50 0301 	orrs.w	r3, r0, r1
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8007a5a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8007a5e:	d013      	beq.n	8007a88 <_fx_media_boot_info_extract+0x64>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 8007a60:	f105 000e 	add.w	r0, r5, #14
 8007a64:	f7fa ff96 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007a68:	6460      	str	r0, [r4, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 8007a6a:	b1b8      	cbz	r0, 8007a9c <_fx_media_boot_info_extract+0x78>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 8007a6c:	7b6b      	ldrb	r3, [r5, #13]
 8007a6e:	6563      	str	r3, [r4, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 8007a70:	b1a3      	cbz	r3, 8007a9c <_fx_media_boot_info_extract+0x78>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 8007a72:	f105 0016 	add.w	r0, r5, #22
 8007a76:	f7fa ff8d 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007a7a:	65a0      	str	r0, [r4, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8007a7c:	b310      	cbz	r0, 8007ac4 <_fx_media_boot_info_extract+0xa0>
        {
            return(FX_MEDIA_INVALID);
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8007a7e:	7c2b      	ldrb	r3, [r5, #16]
 8007a80:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8007a82:	b973      	cbnz	r3, 8007aa2 <_fx_media_boot_info_extract+0x7e>
        {
            return(FX_BOOT_ERROR);
 8007a84:	2301      	movs	r3, #1
 8007a86:	e00a      	b.n	8007a9e <_fx_media_boot_info_extract+0x7a>
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8007a88:	f105 0020 	add.w	r0, r5, #32
 8007a8c:	f7fd f86a 	bl	8004b64 <_fx_utility_32_unsigned_read>
 8007a90:	2100      	movs	r1, #0
        if (media_ptr -> fx_media_total_sectors == 0)
 8007a92:	ea50 0301 	orrs.w	r3, r0, r1
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8007a96:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8007a9a:	d1e1      	bne.n	8007a60 <_fx_media_boot_info_extract+0x3c>
        return(FX_MEDIA_INVALID);
 8007a9c:	2302      	movs	r3, #2
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	bd38      	pop	{r3, r4, r5, pc}
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 8007aa2:	f105 001c 	add.w	r0, r5, #28
 8007aa6:	f7fd f85d 	bl	8004b64 <_fx_utility_32_unsigned_read>
 8007aaa:	6720      	str	r0, [r4, #112]	; 0x70
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 8007aac:	f105 0011 	add.w	r0, r5, #17
 8007ab0:	f7fa ff70 	bl	8002994 <_fx_utility_16_unsigned_read>
 8007ab4:	67a0      	str	r0, [r4, #120]	; 0x78
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8007ab6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8007aba:	f7fd f853 	bl	8004b64 <_fx_utility_32_unsigned_read>
    return(FX_SUCCESS);
 8007abe:	2300      	movs	r3, #0
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8007ac0:	6760      	str	r0, [r4, #116]	; 0x74
    return(FX_SUCCESS);
 8007ac2:	e7ec      	b.n	8007a9e <_fx_media_boot_info_extract+0x7a>
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 8007ac4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ac8:	f7fd f84c 	bl	8004b64 <_fx_utility_32_unsigned_read>
 8007acc:	65a0      	str	r0, [r4, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0e4      	beq.n	8007a9c <_fx_media_boot_info_extract+0x78>
 8007ad2:	e7d4      	b.n	8007a7e <_fx_media_boot_info_extract+0x5a>

08007ad4 <_fx_utility_logical_sector_cache_entry_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8007ad8:	6904      	ldr	r4, [r0, #16]
{
 8007ada:	4616      	mov	r6, r2
 8007adc:	461f      	mov	r7, r3
 8007ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (media_ptr -> fx_media_sector_cache_hashed)
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	f000 808d 	beq.w	8007c00 <_fx_utility_logical_sector_cache_entry_read+0x12c>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8007ae6:	f242 43a0 	movw	r3, #9376	; 0x24a0

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8007aea:	2501      	movs	r5, #1
 8007aec:	6a04      	ldr	r4, [r0, #32]
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8007aee:	58c3      	ldr	r3, [r0, r3]
 8007af0:	4033      	ands	r3, r6

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8007af2:	0099      	lsls	r1, r3, #2
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8007af4:	f003 0c1f 	and.w	ip, r3, #31

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8007af8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8007afc:	fa05 f50c 	lsl.w	r5, r5, ip
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8007b00:	00db      	lsls	r3, r3, #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8007b02:	432c      	orrs	r4, r5

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8007b04:	eb00 0e03 	add.w	lr, r0, r3
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8007b08:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8007b0c:	6204      	str	r4, [r0, #32]
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8007b0e:	f89e ccb1 	ldrb.w	ip, [lr, #3249]	; 0xcb1
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8007b12:	4403      	add	r3, r0
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8007b14:	f1bc 0f00 	cmp.w	ip, #0
 8007b18:	f040 8086 	bne.w	8007c28 <_fx_utility_logical_sector_cache_entry_read+0x154>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8007b1c:	f893 e029 	ldrb.w	lr, [r3, #41]	; 0x29
 8007b20:	f1be 0f00 	cmp.w	lr, #0
 8007b24:	d006      	beq.n	8007b34 <_fx_utility_logical_sector_cache_entry_read+0x60>
 8007b26:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007b2a:	42bd      	cmp	r5, r7
 8007b2c:	bf08      	it	eq
 8007b2e:	42b4      	cmpeq	r4, r6
 8007b30:	f000 80f5 	beq.w	8007d1e <_fx_utility_logical_sector_cache_entry_read+0x24a>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8007b34:	f893 9041 	ldrb.w	r9, [r3, #65]	; 0x41
 8007b38:	f1b9 0f00 	cmp.w	r9, #0
 8007b3c:	d006      	beq.n	8007b4c <_fx_utility_logical_sector_cache_entry_read+0x78>
 8007b3e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007b42:	42bd      	cmp	r5, r7
 8007b44:	bf08      	it	eq
 8007b46:	42b4      	cmpeq	r4, r6
 8007b48:	f000 811c 	beq.w	8007d84 <_fx_utility_logical_sector_cache_entry_read+0x2b0>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8007b4c:	f893 a059 	ldrb.w	sl, [r3, #89]	; 0x59
 8007b50:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8007b54:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007b58:	f1ba 0f00 	cmp.w	sl, #0
 8007b5c:	d004      	beq.n	8007b68 <_fx_utility_logical_sector_cache_entry_read+0x94>
 8007b5e:	42af      	cmp	r7, r5
 8007b60:	bf08      	it	eq
 8007b62:	42a6      	cmpeq	r6, r4
 8007b64:	f000 8085 	beq.w	8007c72 <_fx_utility_logical_sector_cache_entry_read+0x19e>
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8007b68:	eb01 0741 	add.w	r7, r1, r1, lsl #1
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007b6c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8007b6e:	f883 9059 	strb.w	r9, [r3, #89]	; 0x59
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8007b72:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007b76:	699f      	ldr	r7, [r3, #24]
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007b78:	649e      	str	r6, [r3, #72]	; 0x48
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007b7a:	631f      	str	r7, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8007b7c:	f893 c040 	ldrb.w	ip, [r3, #64]	; 0x40
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8007b80:	f893 b042 	ldrb.w	fp, [r3, #66]	; 0x42
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007b84:	f893 9028 	ldrb.w	r9, [r3, #40]	; 0x28
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8007b88:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8007b8c:	f600 4ea8 	addw	lr, r0, #3240	; 0xca8
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007b90:	f883 9040 	strb.w	r9, [r3, #64]	; 0x40
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8007b94:	f893 902a 	ldrb.w	r9, [r3, #42]	; 0x2a
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8007b98:	e9d3 670e 	ldrd	r6, r7, [r3, #56]	; 0x38
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8007b9c:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8007ba0:	e9c3 6714 	strd	r6, r7, [r3, #80]	; 0x50
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8007ba4:	f893 705a 	ldrb.w	r7, [r3, #90]	; 0x5a
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8007ba8:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8007bac:	f883 b05a 	strb.w	fp, [r3, #90]	; 0x5a
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8007bb0:	f883 c058 	strb.w	ip, [r3, #88]	; 0x58
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8007bb4:	e9d3 bc08 	ldrd	fp, ip, [r3, #32]
 8007bb8:	e9c3 bc0e 	strd	fp, ip, [r3, #56]	; 0x38
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8007bbc:	f8d0 1ca0 	ldr.w	r1, [r0, #3232]	; 0xca0
 8007bc0:	6199      	str	r1, [r3, #24]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8007bc2:	2100      	movs	r1, #0
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8007bc4:	e9de bc00 	ldrd	fp, ip, [lr]
 8007bc8:	e9c3 bc08 	strd	fp, ip, [r3, #32]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8007bcc:	f890 ccb0 	ldrb.w	ip, [r0, #3248]	; 0xcb0
 8007bd0:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8007bd4:	f890 ccb1 	ldrb.w	ip, [r0, #3249]	; 0xcb1
 8007bd8:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8007bdc:	f890 ccb2 	ldrb.w	ip, [r0, #3250]	; 0xcb2
 8007be0:	f883 c02a 	strb.w	ip, [r3, #42]	; 0x2a
        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8007be4:	f8c0 8ca0 	str.w	r8, [r0, #3232]	; 0xca0
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8007be8:	e9ce 4500 	strd	r4, r5, [lr]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8007bec:	f880 6cb0 	strb.w	r6, [r0, #3248]	; 0xcb0
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8007bf0:	f880 acb1 	strb.w	sl, [r0, #3249]	; 0xcb1
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8007bf4:	f880 7cb2 	strb.w	r7, [r0, #3250]	; 0xcb2
        *previous_cache_entry =  FX_NULL;
 8007bf8:	6011      	str	r1, [r2, #0]
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8007c00:	6941      	ldr	r1, [r0, #20]
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8007c02:	69c3      	ldr	r3, [r0, #28]
        *previous_cache_entry =  FX_NULL;
 8007c04:	6014      	str	r4, [r2, #0]
        while (cache_size--)
 8007c06:	2900      	cmp	r1, #0
 8007c08:	d0f7      	beq.n	8007bfa <_fx_utility_logical_sector_cache_entry_read+0x126>
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8007c0a:	7c5c      	ldrb	r4, [r3, #17]
 8007c0c:	3901      	subs	r1, #1
 8007c0e:	b12c      	cbz	r4, 8007c1c <_fx_utility_logical_sector_cache_entry_read+0x148>
 8007c10:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007c14:	42bd      	cmp	r5, r7
 8007c16:	bf08      	it	eq
 8007c18:	42b4      	cmpeq	r4, r6
 8007c1a:	d018      	beq.n	8007c4e <_fx_utility_logical_sector_cache_entry_read+0x17a>
            if (cache_entry -> fx_cached_sector_next_used)
 8007c1c:	695c      	ldr	r4, [r3, #20]
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	d0f1      	beq.n	8007c06 <_fx_utility_logical_sector_cache_entry_read+0x132>
                *previous_cache_entry =  cache_entry;
 8007c22:	6013      	str	r3, [r2, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	e7ee      	b.n	8007c06 <_fx_utility_logical_sector_cache_entry_read+0x132>
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8007c28:	f60e 44a8 	addw	r4, lr, #3240	; 0xca8
 8007c2c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8007c30:	42bd      	cmp	r5, r7
 8007c32:	bf08      	it	eq
 8007c34:	42b4      	cmpeq	r4, r6
 8007c36:	f47f af71 	bne.w	8007b1c <_fx_utility_logical_sector_cache_entry_read+0x48>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c3a:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8007c3e:	2300      	movs	r3, #0
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8007c40:	f8de 1ca0 	ldr.w	r1, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c44:	3201      	adds	r2, #1
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8007c46:	6081      	str	r1, [r0, #8]
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c48:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8007c4c:	e7d5      	b.n	8007bfa <_fx_utility_logical_sector_cache_entry_read+0x126>
                if (*previous_cache_entry)
 8007c4e:	6812      	ldr	r2, [r2, #0]
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8007c50:	6819      	ldr	r1, [r3, #0]
 8007c52:	6081      	str	r1, [r0, #8]
                if (*previous_cache_entry)
 8007c54:	b122      	cbz	r2, 8007c60 <_fx_utility_logical_sector_cache_entry_read+0x18c>
                        cache_entry -> fx_cached_sector_next_used;
 8007c56:	695c      	ldr	r4, [r3, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8007c58:	69c1      	ldr	r1, [r0, #28]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8007c5a:	6154      	str	r4, [r2, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8007c5c:	6159      	str	r1, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8007c5e:	61c3      	str	r3, [r0, #28]
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c60:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
                return(FX_NULL);
 8007c64:	2300      	movs	r3, #0
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c66:	3201      	adds	r2, #1
 8007c68:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007c72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c76:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8007c7a:	f8c0 8008 	str.w	r8, [r0, #8]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007c7e:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c82:	3201      	adds	r2, #1
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8007c84:	f60e 49a8 	addw	r9, lr, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007c88:	f8de 6ca0 	ldr.w	r6, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007c8c:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8007c90:	f89e 7cb0 	ldrb.w	r7, [lr, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8007c94:	f89e 2cb2 	ldrb.w	r2, [lr, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8007c98:	e9d9 4500 	ldrd	r4, r5, [r9]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8007c9c:	f8ce 8ca0 	str.w	r8, [lr, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8007ca0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007ca4:	e9c9 0100 	strd	r0, r1, [r9]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8007ca8:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 8007cac:	f88e 1cb0 	strb.w	r1, [lr, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8007cb0:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 8007cb4:	f88e 1cb1 	strb.w	r1, [lr, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8007cb8:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8007cbc:	f88e 1cb2 	strb.w	r1, [lr, #3250]	; 0xcb2
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007cc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8007cc2:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8007cc6:	f893 8041 	ldrb.w	r8, [r3, #65]	; 0x41
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007cca:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007ccc:	6498      	str	r0, [r3, #72]	; 0x48
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007cce:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8007cd2:	f893 e042 	ldrb.w	lr, [r3, #66]	; 0x42
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8007cd6:	f883 9058 	strb.w	r9, [r3, #88]	; 0x58
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8007cda:	f883 8059 	strb.w	r8, [r3, #89]	; 0x59
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007cde:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007ce0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8007ce4:	f883 e05a 	strb.w	lr, [r3, #90]	; 0x5a
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8007ce8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8007cec:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8007cf0:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8007cf4:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8007cf8:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8007cfc:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8007d00:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8007d04:	619e      	str	r6, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8007d06:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8007d0a:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8007d0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8007d12:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8007d16:	e9c3 4508 	strd	r4, r5, [r3, #32]
            return(FX_NULL);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e76d      	b.n	8007bfa <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007d1e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007d22:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007d26:	6999      	ldr	r1, [r3, #24]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007d28:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007d2c:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007d2e:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8007d30:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007d34:	f8d2 8ca0 	ldr.w	r8, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007d38:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8007d3c:	f892 ecb0 	ldrb.w	lr, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8007d40:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8007d44:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007d48:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8007d4c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007d50:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007d54:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8007d58:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8007d5c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8007d60:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8007d64:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8007d68:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8007d6c:	f8c3 8018 	str.w	r8, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8007d70:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8007d74:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8007d78:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8007d7c:	e9c3 6708 	strd	r6, r7, [r3, #32]
            return(FX_NULL);
 8007d80:	2300      	movs	r3, #0
 8007d82:	e73a      	b.n	8007bfa <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007d84:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007d88:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007d8e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007d92:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007d94:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8007d96:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8007d9a:	f8d2 eca0 	ldr.w	lr, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8007d9e:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8007da2:	f892 8cb0 	ldrb.w	r8, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8007da6:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8007daa:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8007dae:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8007db2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007db6:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8007dba:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8007dbe:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8007dc2:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8007dc6:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8007dca:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8007dce:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007dd2:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8007dd4:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007dd8:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8007ddc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8007de0:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8007de2:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8007de6:	f8c3 e018 	str.w	lr, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8007dea:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8007dee:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8007df2:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8007df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8007dfa:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8007dfe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8007e02:	e9c3 6708 	strd	r6, r7, [r3, #32]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8007e06:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
            return(FX_NULL);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e6f5      	b.n	8007bfa <_fx_utility_logical_sector_cache_entry_read+0x126>
 8007e0e:	bf00      	nop

08007e10 <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	461f      	mov	r7, r3


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 8007e16:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
 8007e1a:	b091      	sub	sp, #68	; 0x44
ULONG  cluster, next_cluster = 0;
 8007e1c:	f04f 0c00 	mov.w	ip, #0

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8007e20:	468b      	mov	fp, r1
    media_ptr -> fx_media_directory_entry_reads++;
 8007e22:	3301      	adds	r3, #1
ULONG  entry = *entry_ptr;
 8007e24:	6811      	ldr	r1, [r2, #0]
{
 8007e26:	4606      	mov	r6, r0
 8007e28:	9207      	str	r2, [sp, #28]
ULONG  entry = *entry_ptr;
 8007e2a:	9106      	str	r1, [sp, #24]
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8007e2c:	ea4f 1841 	mov.w	r8, r1, lsl #5
 8007e30:	6a82      	ldr	r2, [r0, #40]	; 0x28
ULONG  cluster, next_cluster = 0;
 8007e32:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    media_ptr -> fx_media_directory_entry_reads++;
 8007e36:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8007e3a:	f1bb 0f00 	cmp.w	fp, #0
 8007e3e:	f000 8098 	beq.w	8007f72 <_fx_directory_entry_read+0x162>

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8007e42:	6d40      	ldr	r0, [r0, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8007e44:	fb00 f302 	mul.w	r3, r0, r2

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 809a 	beq.w	8007f82 <_fx_directory_entry_read+0x172>
        /* Determine if there is a sub-directory.  */
        if (source_dir)
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8007e4e:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8007e52:	fbb8 faf3 	udiv	sl, r8, r3
        byte_offset =  byte_offset % bytes_per_cluster;
 8007e56:	fb03 881a 	mls	r8, r3, sl, r8
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8007e5a:	fbb8 f3f2 	udiv	r3, r8, r2
 8007e5e:	9305      	str	r3, [sp, #20]
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8007e60:	b121      	cbz	r1, 8007e6c <_fx_directory_entry_read+0x5c>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8007e62:	f8db 9054 	ldr.w	r9, [fp, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8007e66:	45d1      	cmp	r9, sl
 8007e68:	f240 80a9 	bls.w	8007fbe <_fx_directory_entry_read+0x1ae>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8007e6c:	f8db 1034 	ldr.w	r1, [fp, #52]	; 0x34

                /* Setup the relative cluster index to zero.  */
                i =  0;
 8007e70:	f04f 0900 	mov.w	r9, #0
            /* Setup the relative cluster index to zero.  */
            i =  0;
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 8007e74:	45d1      	cmp	r9, sl
 8007e76:	d21d      	bcs.n	8007eb4 <_fx_directory_entry_read+0xa4>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8007e78:	2901      	cmp	r1, #1
 8007e7a:	f240 8092 	bls.w	8007fa2 <_fx_directory_entry_read+0x192>
 8007e7e:	f242 45a8 	movw	r5, #9384	; 0x24a8
 8007e82:	5973      	ldr	r3, [r6, r5]
 8007e84:	428b      	cmp	r3, r1
 8007e86:	f240 808c 	bls.w	8007fa2 <_fx_directory_entry_read+0x192>
 8007e8a:	4435      	add	r5, r6
 8007e8c:	e006      	b.n	8007e9c <_fx_directory_entry_read+0x8c>
 8007e8e:	2901      	cmp	r1, #1
 8007e90:	f240 8087 	bls.w	8007fa2 <_fx_directory_entry_read+0x192>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	428b      	cmp	r3, r1
 8007e98:	f240 8083 	bls.w	8007fa2 <_fx_directory_entry_read+0x192>
                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8007e9c:	aa0f      	add	r2, sp, #60	; 0x3c
 8007e9e:	4630      	mov	r0, r6

            /* Setup the actual cluster.  */
            cluster = next_cluster;

            /* Increment the relative cluster number.  */
            i++;
 8007ea0:	f109 0901 	add.w	r9, r9, #1
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8007ea4:	f7fc fe72 	bl	8004b8c <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d16b      	bne.n	8007f84 <_fx_directory_entry_read+0x174>
        while (i < relative_cluster)
 8007eac:	45d1      	cmp	r9, sl
            cluster = next_cluster;
 8007eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
        while (i < relative_cluster)
 8007eb0:	d1ed      	bne.n	8007e8e <_fx_directory_entry_read+0x7e>
 8007eb2:	6d70      	ldr	r0, [r6, #84]	; 0x54
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8007eb4:	6d32      	ldr	r2, [r6, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8007eb6:	1e8c      	subs	r4, r1, #2
 8007eb8:	9108      	str	r1, [sp, #32]
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8007eba:	2303      	movs	r3, #3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8007ebc:	9905      	ldr	r1, [sp, #20]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	f04f 0c01 	mov.w	ip, #1
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8007ec6:	440a      	add	r2, r1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8007ec8:	462b      	mov	r3, r5
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8007eca:	fb00 2904 	mla	r9, r0, r4, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8007ece:	68b4      	ldr	r4, [r6, #8]
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f8cd c004 	str.w	ip, [sp, #4]
 8007ed6:	464a      	mov	r2, r9
 8007ed8:	9400      	str	r4, [sp, #0]
 8007eda:	f7fd fd5b 	bl	8005994 <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d150      	bne.n	8007f84 <_fx_directory_entry_read+0x174>
            /* Return error code.  */
            return(status);
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8007ee2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007ee4:	9908      	ldr	r1, [sp, #32]
 8007ee6:	fbb8 f0f3 	udiv	r0, r8, r3
 8007eea:	fb03 8010 	mls	r0, r3, r0, r8
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
             media_ptr -> fx_media_bytes_per_sector);
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8007eee:	68b3      	ldr	r3, [r6, #8]
    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8007ef0:	f04f 0e00 	mov.w	lr, #0
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8007ef4:	647d      	str	r5, [r7, #68]	; 0x44
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8007ef6:	181c      	adds	r4, r3, r0
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8007ef8:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 8007efc:	64b8      	str	r0, [r7, #72]	; 0x48
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8007efe:	f8c7 e018 	str.w	lr, [r7, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 8007f02:	f887 e004 	strb.w	lr, [r7, #4]
    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;

    /* Check if long file name exists.  */
    get_short_name =  0;
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8007f06:	f894 c00b 	ldrb.w	ip, [r4, #11]
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8007f0a:	683d      	ldr	r5, [r7, #0]
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8007f0c:	f1bc 0f0f 	cmp.w	ip, #15
 8007f10:	f000 8174 	beq.w	80081fc <_fx_directory_entry_read+0x3ec>
    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	2201      	movs	r2, #1
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	1e62      	subs	r2, r4, #1
 8007f20:	f104 0e0a 	add.w	lr, r4, #10

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8007f24:	f04f 092e 	mov.w	r9, #46	; 0x2e
    dotflag =  0;
 8007f28:	469c      	mov	ip, r3
    short_name_ptr[0] =  0;
 8007f2a:	702b      	strb	r3, [r5, #0]
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	e017      	b.n	8007f60 <_fx_directory_entry_read+0x150>
        if ((CHAR)read_ptr[i] == ' ')
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	f000 813b 	beq.w	80081ac <_fx_directory_entry_read+0x39c>
        if (i == FX_DIR_NAME_SIZE)
 8007f36:	eba2 0804 	sub.w	r8, r2, r4
            if (dotflag == 0)
 8007f3a:	f1b8 0f08 	cmp.w	r8, #8
 8007f3e:	d102      	bne.n	8007f46 <_fx_directory_entry_read+0x136>
 8007f40:	f1bc 0f00 	cmp.w	ip, #0
 8007f44:	d002      	beq.n	8007f4c <_fx_directory_entry_read+0x13c>
        if (dotflag == 1)
 8007f46:	f1bc 0f01 	cmp.w	ip, #1
 8007f4a:	d105      	bne.n	8007f58 <_fx_directory_entry_read+0x148>
            short_name_ptr[j++] =  '.';
 8007f4c:	f805 9000 	strb.w	r9, [r5, r0]
            dotflag =  2;    /* no more dot for spaces */
 8007f50:	f04f 0c02 	mov.w	ip, #2
            short_name_ptr[j++] =  '.';
 8007f54:	3001      	adds	r0, #1
 8007f56:	7813      	ldrb	r3, [r2, #0]
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8007f58:	542b      	strb	r3, [r5, r0]

        /* Increment size.  */
        j++;
 8007f5a:	3001      	adds	r0, #1
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8007f5c:	4572      	cmp	r2, lr
 8007f5e:	d041      	beq.n	8007fe4 <_fx_directory_entry_read+0x1d4>
        if ((CHAR)read_ptr[i] == 0)
 8007f60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d03d      	beq.n	8007fe4 <_fx_directory_entry_read+0x1d4>
        if ((CHAR)read_ptr[i] == '.')
 8007f68:	2b2e      	cmp	r3, #46	; 0x2e
 8007f6a:	d1e1      	bne.n	8007f30 <_fx_directory_entry_read+0x120>
            dotflag =  2;
 8007f6c:	f04f 0c02 	mov.w	ip, #2
 8007f70:	e7f2      	b.n	8007f58 <_fx_directory_entry_read+0x148>
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8007f72:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80fb 	beq.w	8008170 <_fx_directory_entry_read+0x360>
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8007f7a:	6d40      	ldr	r0, [r0, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8007f7c:	fb02 f300 	mul.w	r3, r2, r0
        if (bytes_per_cluster == 0)
 8007f80:	b99b      	cbnz	r3, 8007faa <_fx_directory_entry_read+0x19a>
            return(FX_MEDIA_INVALID);
 8007f82:	2002      	movs	r0, #2
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8007f84:	b011      	add	sp, #68	; 0x44
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8007f8a:	6e73      	ldr	r3, [r6, #100]	; 0x64
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f040 815b 	bne.w	8008248 <_fx_directory_entry_read+0x438>
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8007f92:	6cb3      	ldr	r3, [r6, #72]	; 0x48
                    logical_sector++;
 8007f94:	f109 0901 	add.w	r9, r9, #1
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8007f98:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8007f9a:	4413      	add	r3, r2
 8007f9c:	454b      	cmp	r3, r9
 8007f9e:	f200 815c 	bhi.w	800825a <_fx_directory_entry_read+0x44a>
                return(FX_FILE_CORRUPT);
 8007fa2:	2008      	movs	r0, #8
}
 8007fa4:	b011      	add	sp, #68	; 0x44
 8007fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8007faa:	fbb8 faf3 	udiv	sl, r8, r3
        byte_offset =  byte_offset % bytes_per_cluster;
 8007fae:	fb03 881a 	mls	r8, r3, sl, r8
            cluster =  media_ptr -> fx_media_root_cluster_32;
 8007fb2:	6f71      	ldr	r1, [r6, #116]	; 0x74
            i =  0;
 8007fb4:	46d9      	mov	r9, fp
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8007fb6:	fbb8 f3f2 	udiv	r3, r8, r2
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	e75a      	b.n	8007e74 <_fx_directory_entry_read+0x64>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8007fbe:	e9db 2310 	ldrd	r2, r3, [fp, #64]	; 0x40
 8007fc2:	e9db 4516 	ldrd	r4, r5, [fp, #88]	; 0x58
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	bf08      	it	eq
 8007fca:	4294      	cmpeq	r4, r2
 8007fcc:	f47f af4e 	bne.w	8007e6c <_fx_directory_entry_read+0x5c>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8007fd0:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8007fd4:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	f47f af47 	bne.w	8007e6c <_fx_directory_entry_read+0x5c>
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 8007fde:	f8cb c050 	str.w	ip, [fp, #80]	; 0x50
 8007fe2:	e747      	b.n	8007e74 <_fx_directory_entry_read+0x64>
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	782a      	ldrb	r2, [r5, #0]
 8007fe8:	b113      	cbz	r3, 8007ff0 <_fx_directory_entry_read+0x1e0>
 8007fea:	2ae5      	cmp	r2, #229	; 0xe5
 8007fec:	f000 80e4 	beq.w	80081b8 <_fx_directory_entry_read+0x3a8>
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	f000 80e7 	beq.w	80081c4 <_fx_directory_entry_read+0x3b4>
    short_name_ptr[j] = 0;
 8007ff6:	2300      	movs	r3, #0
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8007ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    short_name_ptr[j] = 0;
 8007ffa:	542b      	strb	r3, [r5, r0]
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8007ffc:	7ae3      	ldrb	r3, [r4, #11]
 8007ffe:	773b      	strb	r3, [r7, #28]
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8008000:	7b23      	ldrb	r3, [r4, #12]
 8008002:	777b      	strb	r3, [r7, #29]
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8008004:	2a00      	cmp	r2, #0
 8008006:	d066      	beq.n	80080d6 <_fx_directory_entry_read+0x2c6>
 8008008:	071b      	lsls	r3, r3, #28
 800800a:	d564      	bpl.n	80080d6 <_fx_directory_entry_read+0x2c6>
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800800c:	782b      	ldrb	r3, [r5, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d061      	beq.n	80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8008012:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008016:	2a19      	cmp	r2, #25
 8008018:	d801      	bhi.n	800801e <_fx_directory_entry_read+0x20e>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800801a:	3320      	adds	r3, #32
 800801c:	702b      	strb	r3, [r5, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800801e:	786b      	ldrb	r3, [r5, #1]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d058      	beq.n	80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8008024:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008028:	2a19      	cmp	r2, #25
 800802a:	d801      	bhi.n	8008030 <_fx_directory_entry_read+0x220>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800802c:	3320      	adds	r3, #32
 800802e:	706b      	strb	r3, [r5, #1]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008030:	78ab      	ldrb	r3, [r5, #2]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d04f      	beq.n	80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8008036:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800803a:	2a19      	cmp	r2, #25
 800803c:	d801      	bhi.n	8008042 <_fx_directory_entry_read+0x232>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800803e:	3320      	adds	r3, #32
 8008040:	70ab      	strb	r3, [r5, #2]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008042:	78eb      	ldrb	r3, [r5, #3]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d046      	beq.n	80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8008048:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800804c:	2a19      	cmp	r2, #25
 800804e:	d801      	bhi.n	8008054 <_fx_directory_entry_read+0x244>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8008050:	3320      	adds	r3, #32
 8008052:	70eb      	strb	r3, [r5, #3]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008054:	792b      	ldrb	r3, [r5, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d03d      	beq.n	80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800805a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800805e:	2a19      	cmp	r2, #25
 8008060:	d801      	bhi.n	8008066 <_fx_directory_entry_read+0x256>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8008062:	3320      	adds	r3, #32
 8008064:	712b      	strb	r3, [r5, #4]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008066:	796b      	ldrb	r3, [r5, #5]
 8008068:	b3ab      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800806a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800806e:	2a19      	cmp	r2, #25
 8008070:	d801      	bhi.n	8008076 <_fx_directory_entry_read+0x266>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8008072:	3320      	adds	r3, #32
 8008074:	716b      	strb	r3, [r5, #5]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008076:	79ab      	ldrb	r3, [r5, #6]
 8008078:	b36b      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800807a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800807e:	2a19      	cmp	r2, #25
 8008080:	d801      	bhi.n	8008086 <_fx_directory_entry_read+0x276>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8008082:	3320      	adds	r3, #32
 8008084:	71ab      	strb	r3, [r5, #6]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008086:	79eb      	ldrb	r3, [r5, #7]
 8008088:	b32b      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800808a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800808e:	2a19      	cmp	r2, #25
 8008090:	d801      	bhi.n	8008096 <_fx_directory_entry_read+0x286>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8008092:	3320      	adds	r3, #32
 8008094:	71eb      	strb	r3, [r5, #7]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8008096:	7a2b      	ldrb	r3, [r5, #8]
 8008098:	b1eb      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800809a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800809e:	2a19      	cmp	r2, #25
 80080a0:	d801      	bhi.n	80080a6 <_fx_directory_entry_read+0x296>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80080a2:	3320      	adds	r3, #32
 80080a4:	722b      	strb	r3, [r5, #8]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80080a6:	7a6b      	ldrb	r3, [r5, #9]
 80080a8:	b1ab      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80080aa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80080ae:	2a19      	cmp	r2, #25
 80080b0:	d801      	bhi.n	80080b6 <_fx_directory_entry_read+0x2a6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80080b2:	3320      	adds	r3, #32
 80080b4:	726b      	strb	r3, [r5, #9]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80080b6:	7aab      	ldrb	r3, [r5, #10]
 80080b8:	b16b      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80080ba:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80080be:	2a19      	cmp	r2, #25
 80080c0:	d801      	bhi.n	80080c6 <_fx_directory_entry_read+0x2b6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80080c2:	3320      	adds	r3, #32
 80080c4:	72ab      	strb	r3, [r5, #10]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80080c6:	7aeb      	ldrb	r3, [r5, #11]
 80080c8:	b12b      	cbz	r3, 80080d6 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80080ca:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80080ce:	2a19      	cmp	r2, #25
 80080d0:	d801      	bhi.n	80080d6 <_fx_directory_entry_read+0x2c6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80080d2:	3320      	adds	r3, #32
 80080d4:	72eb      	strb	r3, [r5, #11]
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 80080d6:	7b63      	ldrb	r3, [r4, #13]
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 80080d8:	f104 000e 	add.w	r0, r4, #14
 80080dc:	9105      	str	r1, [sp, #20]
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 80080de:	77bb      	strb	r3, [r7, #30]
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 80080e0:	f7fa fc58 	bl	8002994 <_fx_utility_16_unsigned_read>
 80080e4:	6238      	str	r0, [r7, #32]
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 80080e6:	f104 0010 	add.w	r0, r4, #16
 80080ea:	f7fa fc53 	bl	8002994 <_fx_utility_16_unsigned_read>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80080f0:	f104 0012 	add.w	r0, r4, #18
 80080f4:	f7fa fc4e 	bl	8002994 <_fx_utility_16_unsigned_read>
    if (media_ptr -> fx_media_32_bit_FAT)
 80080f8:	6e73      	ldr	r3, [r6, #100]	; 0x64
 80080fa:	9905      	ldr	r1, [sp, #20]
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80080fc:	62b8      	str	r0, [r7, #40]	; 0x28
    if (media_ptr -> fx_media_32_bit_FAT)
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f040 8125 	bne.w	800834e <_fx_directory_entry_read+0x53e>
        destination_ptr -> fx_dir_entry_cluster =  0;
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8008106:	f104 0016 	add.w	r0, r4, #22
 800810a:	9105      	str	r1, [sp, #20]
 800810c:	f7fa fc42 	bl	8002994 <_fx_utility_16_unsigned_read>
 8008110:	62f8      	str	r0, [r7, #44]	; 0x2c
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8008112:	f104 0018 	add.w	r0, r4, #24
 8008116:	f7fa fc3d 	bl	8002994 <_fx_utility_16_unsigned_read>
 800811a:	6338      	str	r0, [r7, #48]	; 0x30
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800811c:	f104 001a 	add.w	r0, r4, #26
 8008120:	f7fa fc38 	bl	8002994 <_fx_utility_16_unsigned_read>
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	4403      	add	r3, r0
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8008128:	f104 001c 	add.w	r0, r4, #28
 800812c:	2400      	movs	r4, #0
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8008130:	f7fc fd18 	bl	8004b64 <_fx_utility_32_unsigned_read>
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8008134:	2300      	movs	r3, #0
 8008136:	2200      	movs	r2, #0
    destination_ptr -> fx_dir_entry_number =  entry;
 8008138:	9906      	ldr	r1, [sp, #24]
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800813a:	63b8      	str	r0, [r7, #56]	; 0x38
    destination_ptr -> fx_dir_entry_number =  entry;
 800813c:	64f9      	str	r1, [r7, #76]	; 0x4c
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800813e:	63fc      	str	r4, [r7, #60]	; 0x3c
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8008140:	663c      	str	r4, [r7, #96]	; 0x60
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8008142:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    *entry_ptr =  entry;
 8008146:	9b07      	ldr	r3, [sp, #28]
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8008148:	e9c7 4414 	strd	r4, r4, [r7, #80]	; 0x50
    *entry_ptr =  entry;
 800814c:	6019      	str	r1, [r3, #0]
    if (source_dir)
 800814e:	f1bb 0f00 	cmp.w	fp, #0
 8008152:	f000 8105 	beq.w	8008360 <_fx_directory_entry_read+0x550>
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8008156:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
    return(FX_SUCCESS);
 800815a:	4620      	mov	r0, r4
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800815c:	9905      	ldr	r1, [sp, #20]
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800815e:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8008162:	e9db 2310 	ldrd	r2, r3, [fp, #64]	; 0x40
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8008166:	e9cb 1a14 	strd	r1, sl, [fp, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800816a:	e9cb 2316 	strd	r2, r3, [fp, #88]	; 0x58
 800816e:	e709      	b.n	8007f84 <_fx_directory_entry_read+0x174>
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8008170:	fbb8 f1f2 	udiv	r1, r8, r2
 8008174:	6c83      	ldr	r3, [r0, #72]	; 0x48
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8008176:	2203      	movs	r2, #3
 8008178:	2501      	movs	r5, #1
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800817a:	eb01 0903 	add.w	r9, r1, r3
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800817e:	6881      	ldr	r1, [r0, #8]
 8008180:	465b      	mov	r3, fp
 8008182:	9202      	str	r2, [sp, #8]
 8008184:	464a      	mov	r2, r9
 8008186:	e9cd 1500 	strd	r1, r5, [sp]
 800818a:	465d      	mov	r5, fp
 800818c:	f7fd fc02 	bl	8005994 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 8008190:	2800      	cmp	r0, #0
 8008192:	f47f aef7 	bne.w	8007f84 <_fx_directory_entry_read+0x174>
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8008196:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        relative_cluster =  relative_sector =  cluster =  0;
 8008198:	46da      	mov	sl, fp
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800819a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
        relative_cluster =  relative_sector =  cluster =  0;
 800819c:	4659      	mov	r1, fp
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800819e:	eba9 0303 	sub.w	r3, r9, r3
        relative_cluster =  relative_sector =  cluster =  0;
 80081a2:	f8cd b014 	str.w	fp, [sp, #20]
        byte_offset =  byte_offset -
 80081a6:	fb00 8013 	mls	r0, r0, r3, r8
 80081aa:	e6a0      	b.n	8007eee <_fx_directory_entry_read+0xde>
                dotflag =  1;
 80081ac:	f1bc 0f00 	cmp.w	ip, #0
 80081b0:	bf08      	it	eq
 80081b2:	f04f 0c01 	moveq.w	ip, #1
 80081b6:	e6d1      	b.n	8007f5c <_fx_directory_entry_read+0x14c>
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 80081b8:	683b      	ldr	r3, [r7, #0]
        short_name_ptr[0] =  (CHAR)0;
 80081ba:	f04f 0c00 	mov.w	ip, #0
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 80081be:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 80081c0:	f885 c000 	strb.w	ip, [r5]
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 80081c4:	7823      	ldrb	r3, [r4, #0]
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	f47f af15 	bne.w	8007ff6 <_fx_directory_entry_read+0x1e6>
 80081cc:	1d2b      	adds	r3, r5, #4
 80081ce:	1d22      	adds	r2, r4, #4
 80081d0:	4295      	cmp	r5, r2
 80081d2:	bf38      	it	cc
 80081d4:	429c      	cmpcc	r4, r3
 80081d6:	f0c0 80e8 	bcc.w	80083aa <_fx_directory_entry_read+0x59a>
 80081da:	ea45 0304 	orr.w	r3, r5, r4
 80081de:	079a      	lsls	r2, r3, #30
 80081e0:	f040 80e3 	bne.w	80083aa <_fx_directory_entry_read+0x59a>
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	606b      	str	r3, [r5, #4]
 80081ec:	7a23      	ldrb	r3, [r4, #8]
                dotflag =  1;
 80081ee:	200b      	movs	r0, #11
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80081f0:	722b      	strb	r3, [r5, #8]
 80081f2:	7a63      	ldrb	r3, [r4, #9]
 80081f4:	726b      	strb	r3, [r5, #9]
 80081f6:	7aa3      	ldrb	r3, [r4, #10]
 80081f8:	72ab      	strb	r3, [r5, #10]
 80081fa:	e6fc      	b.n	8007ff6 <_fx_directory_entry_read+0x1e6>
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80081fc:	5c1b      	ldrb	r3, [r3, r0]
 80081fe:	2be5      	cmp	r3, #229	; 0xe5
 8008200:	f43f ae88 	beq.w	8007f14 <_fx_directory_entry_read+0x104>
 8008204:	f003 031f 	and.w	r3, r3, #31
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 8008208:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800820c:	9309      	str	r3, [sp, #36]	; 0x24
 800820e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008212:	f1ac 080d 	sub.w	r8, ip, #13
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8008216:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 800821a:	f240 80b4 	bls.w	8008386 <_fx_directory_entry_read+0x576>
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800821e:	61bb      	str	r3, [r7, #24]
            get_short_name = 1;
 8008220:	2301      	movs	r3, #1
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8008222:	9508      	str	r5, [sp, #32]
 8008224:	4698      	mov	r8, r3
            get_short_name = 1;
 8008226:	930b      	str	r3, [sp, #44]	; 0x2c
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8008228:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800822c:	910c      	str	r1, [sp, #48]	; 0x30
 800822e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008232:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008236:	e024      	b.n	8008282 <_fx_directory_entry_read+0x472>
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8008238:	3020      	adds	r0, #32
 800823a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800823c:	4298      	cmp	r0, r3
 800823e:	d31a      	bcc.n	8008276 <_fx_directory_entry_read+0x466>
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8008240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	f43f aea1 	beq.w	8007f8a <_fx_directory_entry_read+0x17a>
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8008248:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800824a:	9a05      	ldr	r2, [sp, #20]
 800824c:	3b01      	subs	r3, #1
 800824e:	4293      	cmp	r3, r2
 8008250:	d957      	bls.n	8008302 <_fx_directory_entry_read+0x4f2>
                        relative_sector++;
 8008252:	3201      	adds	r2, #1
                        logical_sector++;
 8008254:	f109 0901 	add.w	r9, r9, #1
                        relative_sector++;
 8008258:	9205      	str	r2, [sp, #20]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800825a:	68b1      	ldr	r1, [r6, #8]
 800825c:	2303      	movs	r3, #3
 800825e:	2001      	movs	r0, #1
 8008260:	464a      	mov	r2, r9
 8008262:	9302      	str	r3, [sp, #8]
 8008264:	2300      	movs	r3, #0
 8008266:	9001      	str	r0, [sp, #4]
 8008268:	4630      	mov	r0, r6
 800826a:	9100      	str	r1, [sp, #0]
 800826c:	f7fd fb92 	bl	8005994 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8008270:	2800      	cmp	r0, #0
 8008272:	f47f ae87 	bne.w	8007f84 <_fx_directory_entry_read+0x174>
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8008276:	68b4      	ldr	r4, [r6, #8]
            entry++;
 8008278:	f10a 0a01 	add.w	sl, sl, #1
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800827c:	4404      	add	r4, r0
        } while (card > 0);
 800827e:	2d00      	cmp	r5, #0
 8008280:	d070      	beq.n	8008364 <_fx_directory_entry_read+0x554>
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 8008282:	7825      	ldrb	r5, [r4, #0]
 8008284:	f005 051f 	and.w	r5, r5, #31
 8008288:	3d01      	subs	r5, #1
            if (get_short_name == 0)
 800828a:	f1b8 0f00 	cmp.w	r8, #0
 800828e:	d1d3      	bne.n	8008238 <_fx_directory_entry_read+0x428>
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8008290:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8008294:	4641      	mov	r1, r8
 8008296:	2301      	movs	r3, #1
 8008298:	9006      	str	r0, [sp, #24]
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800829a:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
                    if ((i == 11) || (i == 26))
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d022      	beq.n	80082e8 <_fx_directory_entry_read+0x4d8>
 80082a2:	2b1a      	cmp	r3, #26
 80082a4:	d020      	beq.n	80082e8 <_fx_directory_entry_read+0x4d8>
                    if (i == 13)
 80082a6:	2b0d      	cmp	r3, #13
 80082a8:	d023      	beq.n	80082f2 <_fx_directory_entry_read+0x4e2>
                    if (read_ptr[i + 1])
 80082aa:	18e2      	adds	r2, r4, r3
 80082ac:	f892 c001 	ldrb.w	ip, [r2, #1]
 80082b0:	f1bc 0f00 	cmp.w	ip, #0
 80082b4:	d008      	beq.n	80082c8 <_fx_directory_entry_read+0x4b8>
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 80082b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80082ba:	d01c      	beq.n	80082f6 <_fx_directory_entry_read+0x4e6>
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80082bc:	6838      	ldr	r0, [r7, #0]
                            get_short_name = 1;
 80082be:	f04f 0801 	mov.w	r8, #1
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80082c2:	9008      	str	r0, [sp, #32]
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 80082c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c6:	61b8      	str	r0, [r7, #24]
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 80082c8:	f892 c000 	ldrb.w	ip, [r2]
 80082cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	2afd      	cmp	r2, #253	; 0xfd
 80082d4:	d808      	bhi.n	80082e8 <_fx_directory_entry_read+0x4d8>
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 80082d6:	eb0e 0201 	add.w	r2, lr, r1
 80082da:	f8d7 b000 	ldr.w	fp, [r7]
 80082de:	2afe      	cmp	r2, #254	; 0xfe
 80082e0:	d82d      	bhi.n	800833e <_fx_directory_entry_read+0x52e>
                    j++;
 80082e2:	3101      	adds	r1, #1
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 80082e4:	f80b c002 	strb.w	ip, [fp, r2]
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 80082e8:	3302      	adds	r3, #2
 80082ea:	2b1f      	cmp	r3, #31
 80082ec:	d9d7      	bls.n	800829e <_fx_directory_entry_read+0x48e>
 80082ee:	9806      	ldr	r0, [sp, #24]
 80082f0:	e7a2      	b.n	8008238 <_fx_directory_entry_read+0x428>
 80082f2:	230e      	movs	r3, #14
 80082f4:	e7d3      	b.n	800829e <_fx_directory_entry_read+0x48e>
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 80082f6:	f892 c000 	ldrb.w	ip, [r2]
 80082fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80082fe:	d1dd      	bne.n	80082bc <_fx_directory_entry_read+0x4ac>
 8008300:	e7f2      	b.n	80082e8 <_fx_directory_entry_read+0x4d8>
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8008302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008304:	aa0f      	add	r2, sp, #60	; 0x3c
 8008306:	4630      	mov	r0, r6
 8008308:	f7fc fc40 	bl	8004b8c <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 800830c:	9005      	str	r0, [sp, #20]
 800830e:	2800      	cmp	r0, #0
 8008310:	f47f ae38 	bne.w	8007f84 <_fx_directory_entry_read+0x174>
                        cluster =  next_cluster;
 8008314:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8008316:	2a01      	cmp	r2, #1
                        cluster =  next_cluster;
 8008318:	920c      	str	r2, [sp, #48]	; 0x30
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800831a:	f67f ae42 	bls.w	8007fa2 <_fx_directory_entry_read+0x192>
 800831e:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8008322:	58f3      	ldr	r3, [r6, r3]
 8008324:	4293      	cmp	r3, r2
 8008326:	f67f ae3c 	bls.w	8007fa2 <_fx_directory_entry_read+0x192>
                        relative_cluster++;
 800832a:	990d      	ldr	r1, [sp, #52]	; 0x34
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800832c:	f1a2 0902 	sub.w	r9, r2, #2
                        relative_cluster++;
 8008330:	3101      	adds	r1, #1
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8008332:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
                        relative_cluster++;
 8008336:	910d      	str	r1, [sp, #52]	; 0x34
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8008338:	fb02 3909 	mla	r9, r2, r9, r3
 800833c:	e78d      	b.n	800825a <_fx_directory_entry_read+0x44a>
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800833e:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        get_short_name =  1;
 8008340:	f04f 0801 	mov.w	r8, #1
 8008344:	9806      	ldr	r0, [sp, #24]
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8008346:	61bb      	str	r3, [r7, #24]
                        break;
 8008348:	f8cd b020 	str.w	fp, [sp, #32]
 800834c:	e774      	b.n	8008238 <_fx_directory_entry_read+0x428>
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800834e:	f104 0014 	add.w	r0, r4, #20
 8008352:	9105      	str	r1, [sp, #20]
 8008354:	f7fa fb1e 	bl	8002994 <_fx_utility_16_unsigned_read>
 8008358:	9905      	ldr	r1, [sp, #20]
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 800835a:	0400      	lsls	r0, r0, #16
 800835c:	6378      	str	r0, [r7, #52]	; 0x34
 800835e:	e6d2      	b.n	8008106 <_fx_directory_entry_read+0x2f6>
    return(FX_SUCCESS);
 8008360:	4658      	mov	r0, fp
 8008362:	e60f      	b.n	8007f84 <_fx_directory_entry_read+0x174>
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8008364:	2301      	movs	r3, #1
 8008366:	f8cd a018 	str.w	sl, [sp, #24]
 800836a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800836e:	617b      	str	r3, [r7, #20]
    if (get_short_name == 1)
 8008370:	4643      	mov	r3, r8
 8008372:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008374:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008378:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800837c:	9d08      	ldr	r5, [sp, #32]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f43f adcc 	beq.w	8007f1c <_fx_directory_entry_read+0x10c>
 8008384:	e5c6      	b.n	8007f14 <_fx_directory_entry_read+0x104>
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8008386:	1d3b      	adds	r3, r7, #4
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8008388:	f10c 0c01 	add.w	ip, ip, #1
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800838c:	4672      	mov	r2, lr
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	4643      	mov	r3, r8
 8008392:	e002      	b.n	800839a <_fx_directory_entry_read+0x58a>
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8008394:	2bff      	cmp	r3, #255	; 0xff
 8008396:	d804      	bhi.n	80083a2 <_fx_directory_entry_read+0x592>
 8008398:	683d      	ldr	r5, [r7, #0]
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800839a:	54ea      	strb	r2, [r5, r3]
                i++;
 800839c:	3301      	adds	r3, #1
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800839e:	459c      	cmp	ip, r3
 80083a0:	d8f8      	bhi.n	8008394 <_fx_directory_entry_read+0x584>
    get_short_name =  0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a6:	4698      	mov	r8, r3
 80083a8:	e73e      	b.n	8008228 <_fx_directory_entry_read+0x418>
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80083aa:	2320      	movs	r3, #32
 80083ac:	702b      	strb	r3, [r5, #0]
 80083ae:	7863      	ldrb	r3, [r4, #1]
 80083b0:	706b      	strb	r3, [r5, #1]
 80083b2:	78a3      	ldrb	r3, [r4, #2]
 80083b4:	70ab      	strb	r3, [r5, #2]
 80083b6:	78e3      	ldrb	r3, [r4, #3]
 80083b8:	70eb      	strb	r3, [r5, #3]
 80083ba:	7923      	ldrb	r3, [r4, #4]
 80083bc:	712b      	strb	r3, [r5, #4]
 80083be:	7963      	ldrb	r3, [r4, #5]
 80083c0:	716b      	strb	r3, [r5, #5]
 80083c2:	79a3      	ldrb	r3, [r4, #6]
 80083c4:	71ab      	strb	r3, [r5, #6]
 80083c6:	79e3      	ldrb	r3, [r4, #7]
 80083c8:	71eb      	strb	r3, [r5, #7]
 80083ca:	e70f      	b.n	80081ec <_fx_directory_entry_read+0x3dc>

080083cc <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 80083cc:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80083ce:	4c0e      	ldr	r4, [pc, #56]	; (8008408 <_tx_initialize_kernel_enter+0x3c>)
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80083d6:	d00a      	beq.n	80083ee <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate 
		 initialization is in progress.  Note that this variable is 
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80083d8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80083dc:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 80083de:	f7f7 ff17 	bl	8000210 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the 
		 ThreadX components and the application's initialization 
		 function.  */
		_tx_initialize_high_level();
 80083e2:	f000 fed5 	bl	8009190 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 80083e6:	4a09      	ldr	r2, [pc, #36]	; (800840c <_tx_initialize_kernel_enter+0x40>)
 80083e8:	6813      	ldr	r3, [r2, #0]
 80083ea:	3301      	adds	r3, #1
 80083ec:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 80083ee:	4a08      	ldr	r2, [pc, #32]	; (8008410 <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80083f0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 80083f4:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80083f6:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 80083f8:	f7f8 fba6 	bl	8000b48 <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 80083fc:	2300      	movs	r3, #0
 80083fe:	6023      	str	r3, [r4, #0]
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 8008404:	f7f7 bf54 	b.w	80002b0 <_tx_thread_schedule>
 8008408:	2000007c 	.word	0x2000007c
 800840c:	20002c78 	.word	0x20002c78
 8008410:	20003228 	.word	0x20003228

08008414 <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	460d      	mov	r5, r1
 8008418:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800841a:	2100      	movs	r1, #0
 800841c:	2234      	movs	r2, #52	; 0x34
 800841e:	f001 f906 	bl	800962e <memset>
 8008422:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8008424:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8008426:	6104      	str	r4, [r0, #16]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008428:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800842c:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800842e:	490c      	ldr	r1, [pc, #48]	; (8008460 <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8008430:	480c      	ldr	r0, [pc, #48]	; (8008464 <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8008432:	4e0d      	ldr	r6, [pc, #52]	; (8008468 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 8008434:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8008436:	4d0d      	ldr	r5, [pc, #52]	; (800846c <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8008438:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800843a:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800843c:	480c      	ldr	r0, [pc, #48]	; (8008470 <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 800843e:	b15a      	cbz	r2, 8008458 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8008440:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8008442:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8008444:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8008446:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8008448:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800844c:	3201      	adds	r2, #1
 800844e:	600a      	str	r2, [r1, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008450:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8008454:	2000      	movs	r0, #0
 8008456:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8008458:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	e7f5      	b.n	800844c <_tx_mutex_create+0x38>
 8008460:	20003214 	.word	0x20003214
 8008464:	20002c60 	.word	0x20002c60
 8008468:	4d555445 	.word	0x4d555445
 800846c:	08009281 	.word	0x08009281
 8008470:	20003218 	.word	0x20003218

08008474 <_tx_mutex_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8008474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008478:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800847c:	b672      	cpsid	i

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800847e:	4927      	ldr	r1, [pc, #156]	; (800851c <_tx_mutex_delete+0xa8>)
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8008480:	2400      	movs	r4, #0
    _tx_mutex_created_count--;
 8008482:	680b      	ldr	r3, [r1, #0]
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8008484:	6004      	str	r4, [r0, #0]
    _tx_mutex_created_count--;
 8008486:	3b01      	subs	r3, #1
 8008488:	600b      	str	r3, [r1, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800848a:	2b00      	cmp	r3, #0
 800848c:	d13c      	bne.n	8008508 <_tx_mutex_delete+0x94>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800848e:	4924      	ldr	r1, [pc, #144]	; (8008520 <_tx_mutex_delete+0xac>)
 8008490:	600b      	str	r3, [r1, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008492:	4e24      	ldr	r6, [pc, #144]	; (8008524 <_tx_mutex_delete+0xb0>)

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8008494:	2700      	movs	r7, #0

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8008496:	68c1      	ldr	r1, [r0, #12]
    _tx_thread_preempt_disable++;
 8008498:	6833      	ldr	r3, [r6, #0]
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800849a:	6984      	ldr	r4, [r0, #24]
    _tx_thread_preempt_disable++;
 800849c:	3301      	adds	r3, #1
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800849e:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80084a0:	6187      	str	r7, [r0, #24]
    _tx_thread_preempt_disable++;
 80084a2:	6033      	str	r3, [r6, #0]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80084a4:	61c7      	str	r7, [r0, #28]
    if (owner_thread != TX_NULL)
 80084a6:	b141      	cbz	r1, 80084ba <_tx_mutex_delete+0x46>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80084a8:	2301      	movs	r3, #1
 80084aa:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084ac:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 80084b0:	f000 f924 	bl	80086fc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80084b4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80084b8:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084ba:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80084be:	b1b5      	cbz	r5, 80084ee <_tx_mutex_delete+0x7a>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80084c0:	f04f 0800 	mov.w	r8, #0

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80084c4:	2701      	movs	r7, #1
        suspended_count--;
 80084c6:	3d01      	subs	r5, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80084c8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80084cc:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80084ce:	6833      	ldr	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80084d0:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 80084d4:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80084d6:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80084da:	6f22      	ldr	r2, [r4, #112]	; 0x70
        _tx_thread_preempt_disable++;
 80084dc:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084de:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80084e2:	4620      	mov	r0, r4
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80084e4:	4614      	mov	r4, r2
        _tx_thread_system_resume(thread_ptr);
 80084e6:	f000 fac9 	bl	8008a7c <_tx_thread_system_resume>
    while (suspended_count != ((ULONG) 0))
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	d1eb      	bne.n	80084c6 <_tx_mutex_delete+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80084ee:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80084f2:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80084f4:	6833      	ldr	r3, [r6, #0]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084fa:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80084fe:	f000 fa9f 	bl	8008a40 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8008502:	2000      	movs	r0, #0
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_mutex_created_ptr == mutex_ptr)
 8008508:	4c05      	ldr	r4, [pc, #20]	; (8008520 <_tx_mutex_delete+0xac>)
 800850a:	6825      	ldr	r5, [r4, #0]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800850c:	e9d0 3108 	ldrd	r3, r1, [r0, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 8008510:	4285      	cmp	r5, r0
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8008512:	6259      	str	r1, [r3, #36]	; 0x24
            _tx_mutex_created_ptr =  next_mutex;
 8008514:	bf08      	it	eq
 8008516:	6023      	streq	r3, [r4, #0]
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8008518:	620b      	str	r3, [r1, #32]
 800851a:	e7ba      	b.n	8008492 <_tx_mutex_delete+0x1e>
 800851c:	20003214 	.word	0x20003214
 8008520:	20003218 	.word	0x20003218
 8008524:	20002c78 	.word	0x20002c78

08008528 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800852a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800852e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008530:	4a3b      	ldr	r2, [pc, #236]	; (8008620 <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8008532:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008534:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8008536:	b9e3      	cbnz	r3, 8008572 <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8008538:	2301      	movs	r3, #1
 800853a:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800853e:	b1a4      	cbz	r4, 800856a <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008540:	6903      	ldr	r3, [r0, #16]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d103      	bne.n	800854e <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8008548:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800854a:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800854c:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800854e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8008552:	2b00      	cmp	r3, #0
 8008554:	d044      	beq.n	80085e0 <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8008556:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008558:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800855a:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800855c:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8008560:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008564:	3301      	adds	r3, #1
 8008566:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800856a:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800856e:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 8008570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8008572:	68c2      	ldr	r2, [r0, #12]
 8008574:	42a2      	cmp	r2, r4
 8008576:	d029      	beq.n	80085cc <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 8008578:	b371      	cbz	r1, 80085d8 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800857a:	4e2a      	ldr	r6, [pc, #168]	; (8008624 <_tx_mutex_get+0xfc>)
 800857c:	6833      	ldr	r3, [r6, #0]
 800857e:	bb5b      	cbnz	r3, 80085d8 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 8008580:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8008584:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8008628 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 8008588:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800858a:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800858c:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 800858e:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8008592:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8008596:	bb43      	cbnz	r3, 80085ea <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8008598:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800859a:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 800859e:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 80085a0:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80085a2:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 80085a6:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 80085a8:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80085aa:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80085ac:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 80085ae:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80085b0:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80085b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80085b6:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80085ba:	6903      	ldr	r3, [r0, #16]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d01d      	beq.n	80085fc <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fae1 	bl	8008b88 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 80085c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 80085ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 80085cc:	3301      	adds	r3, #1
 80085ce:	6083      	str	r3, [r0, #8]
 80085d0:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7cb      	b.n	8008570 <_tx_mutex_get+0x48>
 80085d8:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 80085dc:	201d      	movs	r0, #29
}
 80085de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80085e0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80085e4:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 80085e8:	e7ba      	b.n	8008560 <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80085ea:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80085ec:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80085f0:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80085f4:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80085f8:	677c      	str	r4, [r7, #116]	; 0x74
 80085fa:	e7d0      	b.n	800859e <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80085fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80085fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008600:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8008602:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8008606:	bf88      	it	hi
 8008608:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800860a:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800860c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800860e:	bf38      	it	cc
 8008610:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8008614:	4299      	cmp	r1, r3
 8008616:	d2d3      	bcs.n	80085c0 <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8008618:	4610      	mov	r0, r2
 800861a:	f000 f807 	bl	800862c <_tx_mutex_priority_change>
 800861e:	e7cf      	b.n	80085c0 <_tx_mutex_get+0x98>
 8008620:	20002c7c 	.word	0x20002c7c
 8008624:	20002c78 	.word	0x20002c78
 8008628:	08009201 	.word	0x08009201

0800862c <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008632:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008636:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8008638:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800863a:	b152      	cbz	r2, 8008652 <_tx_mutex_priority_change+0x26>
 800863c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8008640:	62c1      	str	r1, [r0, #44]	; 0x2c
 8008642:	428a      	cmp	r2, r1
 8008644:	bf28      	it	cs
 8008646:	460a      	movcs	r2, r1
 8008648:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800864a:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008652:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008654:	4925      	ldr	r1, [pc, #148]	; (80086ec <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8008656:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 800865a:	4f25      	ldr	r7, [pc, #148]	; (80086f0 <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800865c:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800865e:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008662:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008664:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8008666:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800866a:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800866e:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 8008670:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 8008674:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 8008678:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 800867c:	f000 fa84 	bl	8008b88 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008680:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008684:	b672      	cpsid	i
 8008686:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 800868a:	62e5      	str	r5, [r4, #44]	; 0x2c
 800868c:	42ab      	cmp	r3, r5
 800868e:	bf28      	it	cs
 8008690:	462b      	movcs	r3, r5
 8008692:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008694:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8008698:	4620      	mov	r0, r4
 800869a:	f000 f9ef 	bl	8008a7c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800869e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80086a2:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 80086a4:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 80086a6:	429c      	cmp	r4, r3
 80086a8:	d007      	beq.n	80086ba <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 80086aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086ac:	b92a      	cbnz	r2, 80086ba <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d805      	bhi.n	80086c2 <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 80086b6:	4544      	cmp	r4, r8
 80086b8:	d010      	beq.n	80086dc <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80086ba:	f381 8810 	msr	PRIMASK, r1
}
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80086c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80086c4:	4283      	cmp	r3, r0
 80086c6:	d9f8      	bls.n	80086ba <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 80086c8:	4282      	cmp	r2, r0
 80086ca:	d207      	bcs.n	80086dc <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80086cc:	4809      	ldr	r0, [pc, #36]	; (80086f4 <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 80086ce:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	ea43 030a 	orr.w	r3, r3, sl
 80086d8:	6003      	str	r3, [r0, #0]
 80086da:	e7ee      	b.n	80086ba <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 80086dc:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 80086de:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 80086e0:	d2eb      	bcs.n	80086ba <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80086e2:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <_tx_mutex_priority_change+0xcc>)
 80086e4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80086e8:	e7e7      	b.n	80086ba <_tx_mutex_priority_change+0x8e>
 80086ea:	bf00      	nop
 80086ec:	20002c78 	.word	0x20002c78
 80086f0:	20002c80 	.word	0x20002c80
 80086f4:	20002c88 	.word	0x20002c88
 80086f8:	20002be0 	.word	0x20002be0

080086fc <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80086fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008700:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008704:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008706:	6882      	ldr	r2, [r0, #8]
 8008708:	2a00      	cmp	r2, #0
 800870a:	d056      	beq.n	80087ba <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800870c:	497e      	ldr	r1, [pc, #504]	; (8008908 <_tx_mutex_put+0x20c>)
 800870e:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8008710:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8008712:	6809      	ldr	r1, [r1, #0]
 8008714:	428b      	cmp	r3, r1
 8008716:	d003      	beq.n	8008720 <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8008718:	4e7c      	ldr	r6, [pc, #496]	; (800890c <_tx_mutex_put+0x210>)
 800871a:	6831      	ldr	r1, [r6, #0]
 800871c:	2900      	cmp	r1, #0
 800871e:	d04c      	beq.n	80087ba <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8008720:	3a01      	subs	r2, #1
 8008722:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008724:	2a00      	cmp	r2, #0
 8008726:	d143      	bne.n	80087b0 <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8008728:	2b00      	cmp	r3, #0
 800872a:	d041      	beq.n	80087b0 <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800872c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008730:	3a01      	subs	r2, #1
 8008732:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8008736:	2a00      	cmp	r2, #0
 8008738:	d144      	bne.n	80087c4 <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800873a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800873e:	6987      	ldr	r7, [r0, #24]
 8008740:	6902      	ldr	r2, [r0, #16]
 8008742:	2f00      	cmp	r7, #0
 8008744:	f000 8082 	beq.w	800884c <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008748:	2a01      	cmp	r2, #1
 800874a:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800874c:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008750:	f000 8084 	beq.w	800885c <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008754:	69c3      	ldr	r3, [r0, #28]
 8008756:	4e6d      	ldr	r6, [pc, #436]	; (800890c <_tx_mutex_put+0x210>)
 8008758:	2b01      	cmp	r3, #1
 800875a:	d95d      	bls.n	8008818 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800875c:	2f00      	cmp	r7, #0
 800875e:	f000 8097 	beq.w	8008890 <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 8008762:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8008764:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8008768:	2a00      	cmp	r2, #0
 800876a:	d167      	bne.n	800883c <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800876c:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8008770:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8008774:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8008776:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8008778:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800877a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 800877e:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8008780:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008784:	2b00      	cmp	r3, #0
 8008786:	d153      	bne.n	8008830 <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8008788:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800878a:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800878c:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 800878e:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008790:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008792:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8008796:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008798:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800879c:	692b      	ldr	r3, [r5, #16]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	f000 8097 	beq.w	80088d2 <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80087a4:	4638      	mov	r0, r7
 80087a6:	f000 f969 	bl	8008a7c <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80087aa:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b0:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 80087b4:	2000      	movs	r0, #0
}
 80087b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ba:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 80087be:	201e      	movs	r0, #30
}
 80087c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80087c4:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80087c8:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80087cc:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80087ce:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80087d0:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80087d2:	d1b4      	bne.n	800873e <_tx_mutex_put+0x42>
 80087d4:	e7b1      	b.n	800873a <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 80087d6:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80087d8:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80087dc:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 80087de:	6832      	ldr	r2, [r6, #0]
 80087e0:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 80087e2:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80087e6:	69eb      	ldr	r3, [r5, #28]
 80087e8:	bf28      	it	cs
 80087ea:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 80087ec:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80087ee:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 80087f0:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80087f2:	d969      	bls.n	80088c8 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80087f4:	692a      	ldr	r2, [r5, #16]
 80087f6:	2a01      	cmp	r2, #1
 80087f8:	d176      	bne.n	80088e8 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 80087fa:	6833      	ldr	r3, [r6, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008800:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 8008804:	4628      	mov	r0, r5
 8008806:	f000 fd5d 	bl	80092c4 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800880a:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800880e:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 8008810:	6833      	ldr	r3, [r6, #0]
 8008812:	69af      	ldr	r7, [r5, #24]
 8008814:	3b01      	subs	r3, #1
 8008816:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008818:	2f00      	cmp	r7, #0
 800881a:	d039      	beq.n	8008890 <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800881c:	692b      	ldr	r3, [r5, #16]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d154      	bne.n	80088cc <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008824:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8008826:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008828:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800882a:	616a      	str	r2, [r5, #20]
 800882c:	69eb      	ldr	r3, [r5, #28]
 800882e:	e799      	b.n	8008764 <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008830:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8008834:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008836:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8008838:	6713      	str	r3, [r2, #112]	; 0x70
 800883a:	e7a6      	b.n	800878a <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800883c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8008840:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008842:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8008844:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8008846:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 800884a:	e793      	b.n	8008774 <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800884c:	2a00      	cmp	r2, #0
 800884e:	f47f af7b 	bne.w	8008748 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008852:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008854:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 8008858:	4610      	mov	r0, r2
 800885a:	e7ac      	b.n	80087b6 <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 800885c:	4e2b      	ldr	r6, [pc, #172]	; (800890c <_tx_mutex_put+0x210>)
 800885e:	6832      	ldr	r2, [r6, #0]
 8008860:	3201      	adds	r2, #1
 8008862:	6032      	str	r2, [r6, #0]
 8008864:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8008868:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 800886c:	2900      	cmp	r1, #0
 800886e:	d0b2      	beq.n	80087d6 <_tx_mutex_put+0xda>
 8008870:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008872:	2420      	movs	r4, #32
 8008874:	e001      	b.n	800887a <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 8008876:	2a00      	cmp	r2, #0
 8008878:	d0ae      	beq.n	80087d8 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800887a:	6910      	ldr	r0, [r2, #16]
 800887c:	2801      	cmp	r0, #1
 800887e:	d103      	bne.n	8008888 <_tx_mutex_put+0x18c>
 8008880:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8008882:	4284      	cmp	r4, r0
 8008884:	bf28      	it	cs
 8008886:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8008888:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800888a:	4291      	cmp	r1, r2
 800888c:	d1f3      	bne.n	8008876 <_tx_mutex_put+0x17a>
 800888e:	e7a3      	b.n	80087d8 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800889a:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800889c:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800889e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80088a0:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80088a2:	4543      	cmp	r3, r8
 80088a4:	d002      	beq.n	80088ac <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80088a6:	4641      	mov	r1, r8
 80088a8:	f7ff fec0 	bl	800862c <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80088ac:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80088b0:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 80088b2:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80088b4:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 80088b6:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80088b8:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 80088ba:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80088bc:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 80088c0:	f000 f8be 	bl	8008a40 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 80088c4:	4620      	mov	r0, r4
 80088c6:	e776      	b.n	80087b6 <_tx_mutex_put+0xba>
 80088c8:	69af      	ldr	r7, [r5, #24]
 80088ca:	e7a5      	b.n	8008818 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 80088cc:	2400      	movs	r4, #0
 80088ce:	69eb      	ldr	r3, [r5, #28]
 80088d0:	e748      	b.n	8008764 <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80088d2:	69eb      	ldr	r3, [r5, #28]
 80088d4:	b953      	cbnz	r3, 80088ec <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 80088d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80088d8:	4543      	cmp	r3, r8
 80088da:	f43f af63 	beq.w	80087a4 <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80088de:	4641      	mov	r1, r8
 80088e0:	4620      	mov	r0, r4
 80088e2:	f7ff fea3 	bl	800862c <_tx_mutex_priority_change>
 80088e6:	e75d      	b.n	80087a4 <_tx_mutex_put+0xa8>
 80088e8:	69af      	ldr	r7, [r5, #24]
 80088ea:	e737      	b.n	800875c <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 fce9 	bl	80092c4 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80088f2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80088f6:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 80088f8:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 80088fa:	b10b      	cbz	r3, 8008900 <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008900:	f382 8810 	msr	PRIMASK, r2
 8008904:	e7e7      	b.n	80088d6 <_tx_mutex_put+0x1da>
 8008906:	bf00      	nop
 8008908:	20002c7c 	.word	0x20002c7c
 800890c:	20002c78 	.word	0x20002c78

08008910 <_tx_thread_identify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008910:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008914:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008916:	4a02      	ldr	r2, [pc, #8]	; (8008920 <_tx_thread_identify+0x10>)
 8008918:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800891a:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 800891e:	4770      	bx	lr
 8008920:	20002c7c 	.word	0x20002c7c

08008924 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8008924:	b538      	push	{r3, r4, r5, lr}

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8008926:	480f      	ldr	r0, [pc, #60]	; (8008964 <_tx_thread_initialize+0x40>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 8008928:	2400      	movs	r4, #0

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800892a:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <_tx_thread_initialize+0x44>)
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800892c:	2520      	movs	r5, #32
    _tx_thread_execute_ptr =  TX_NULL;
 800892e:	6004      	str	r4, [r0, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008930:	4621      	mov	r1, r4
    TX_THREAD_SET_CURRENT(TX_NULL)
 8008932:	4a0e      	ldr	r2, [pc, #56]	; (800896c <_tx_thread_initialize+0x48>)
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8008934:	480e      	ldr	r0, [pc, #56]	; (8008970 <_tx_thread_initialize+0x4c>)
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8008936:	601c      	str	r4, [r3, #0]
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008938:	4b0e      	ldr	r3, [pc, #56]	; (8008974 <_tx_thread_initialize+0x50>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 800893a:	6014      	str	r4, [r2, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800893c:	2280      	movs	r2, #128	; 0x80
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 800893e:	6004      	str	r4, [r0, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008940:	480d      	ldr	r0, [pc, #52]	; (8008978 <_tx_thread_initialize+0x54>)
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008942:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008944:	f000 fe73 	bl	800962e <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
 8008948:	4a0c      	ldr	r2, [pc, #48]	; (800897c <_tx_thread_initialize+0x58>)
    _tx_thread_created_ptr =        TX_NULL;
 800894a:	490d      	ldr	r1, [pc, #52]	; (8008980 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
                            | (((ULONG) 1) << 7)
 800894c:	6810      	ldr	r0, [r2, #0]
 800894e:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <_tx_thread_initialize+0x60>)
    _tx_thread_created_ptr =        TX_NULL;
 8008950:	600c      	str	r4, [r1, #0]
                            | (((ULONG) 1) << 7)
 8008952:	4303      	orrs	r3, r0
    _tx_thread_created_count =      TX_EMPTY;
 8008954:	4d0c      	ldr	r5, [pc, #48]	; (8008988 <_tx_thread_initialize+0x64>)
    _tx_thread_preempt_disable =    ((UINT) 0);
 8008956:	480d      	ldr	r0, [pc, #52]	; (800898c <_tx_thread_initialize+0x68>)
    _tx_thread_mutex_release =      TX_NULL;
 8008958:	490d      	ldr	r1, [pc, #52]	; (8008990 <_tx_thread_initialize+0x6c>)
    _tx_thread_created_count =      TX_EMPTY;
 800895a:	602c      	str	r4, [r5, #0]
    _tx_thread_preempt_disable =    ((UINT) 0);
 800895c:	6004      	str	r4, [r0, #0]
    _tx_thread_mutex_release =      TX_NULL;
 800895e:	600c      	str	r4, [r1, #0]
    _tx_build_options =  _tx_build_options 
 8008960:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	20002c80 	.word	0x20002c80
 8008968:	20002c64 	.word	0x20002c64
 800896c:	20002c7c 	.word	0x20002c7c
 8008970:	20002c88 	.word	0x20002c88
 8008974:	20002c84 	.word	0x20002c84
 8008978:	20002be0 	.word	0x20002be0
 800897c:	20002c6c 	.word	0x20002c6c
 8008980:	20002c68 	.word	0x20002c68
 8008984:	01000080 	.word	0x01000080
 8008988:	20002c70 	.word	0x20002c70
 800898c:	20002c78 	.word	0x20002c78
 8008990:	20002c60 	.word	0x20002c60

08008994 <_tx_thread_preemption_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008996:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800899a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800899c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80089a0:	428b      	cmp	r3, r1
 80089a2:	d341      	bcc.n	8008a28 <_tx_thread_preemption_change+0x94>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 80089a4:	d017      	beq.n	80089d6 <_tx_thread_preemption_change+0x42>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80089a6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80089aa:	4d21      	ldr	r5, [pc, #132]	; (8008a30 <_tx_thread_preemption_change+0x9c>)
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80089b2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80089b4:	428b      	cmp	r3, r1
 80089b6:	682d      	ldr	r5, [r5, #0]
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 80089b8:	4616      	mov	r6, r2
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80089ba:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 80089be:	bf28      	it	cs
 80089c0:	460b      	movcs	r3, r1
            if (_tx_thread_highest_priority < new_threshold)
 80089c2:	428a      	cmp	r2, r1
 80089c4:	bf28      	it	cs
 80089c6:	460e      	movcs	r6, r1
 80089c8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80089ca:	42b5      	cmp	r5, r6
 80089cc:	d312      	bcc.n	80089f4 <_tx_thread_preemption_change+0x60>
    status =  TX_SUCCESS;
 80089ce:	2000      	movs	r0, #0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80089d0:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
}
 80089d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 80089d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80089d8:	4d16      	ldr	r5, [pc, #88]	; (8008a34 <_tx_thread_preemption_change+0xa0>)
 80089da:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80089de:	4285      	cmp	r5, r0
 80089e0:	d1e1      	bne.n	80089a6 <_tx_thread_preemption_change+0x12>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80089e2:	4f15      	ldr	r7, [pc, #84]	; (8008a38 <_tx_thread_preemption_change+0xa4>)
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 80089e4:	2601      	movs	r6, #1
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80089e6:	683d      	ldr	r5, [r7, #0]
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 80089e8:	fa06 f303 	lsl.w	r3, r6, r3
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80089ec:	ea25 0503 	bic.w	r5, r5, r3
 80089f0:	603d      	str	r5, [r7, #0]
 80089f2:	e7d8      	b.n	80089a6 <_tx_thread_preemption_change+0x12>
                if (_tx_thread_execute_ptr == thread_ptr)
 80089f4:	4911      	ldr	r1, [pc, #68]	; (8008a3c <_tx_thread_preemption_change+0xa8>)
 80089f6:	680e      	ldr	r6, [r1, #0]
 80089f8:	4286      	cmp	r6, r0
 80089fa:	d1e8      	bne.n	80089ce <_tx_thread_preemption_change+0x3a>
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d006      	beq.n	8008a0e <_tx_thread_preemption_change+0x7a>
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008a00:	4e0d      	ldr	r6, [pc, #52]	; (8008a38 <_tx_thread_preemption_change+0xa4>)
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8008a02:	2001      	movs	r0, #1
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008a04:	6833      	ldr	r3, [r6, #0]
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8008a06:	fa00 f202 	lsl.w	r2, r0, r2
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	6033      	str	r3, [r6, #0]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <_tx_thread_preemption_change+0xa0>)
 8008a10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008a14:	600b      	str	r3, [r1, #0]
 8008a16:	f384 8810 	msr	PRIMASK, r4
                    _tx_thread_system_preempt_check();
 8008a1a:	f000 f811 	bl	8008a40 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008a1e:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008a22:	b672      	cpsid	i
    status =  TX_SUCCESS;
 8008a24:	2000      	movs	r0, #0
 8008a26:	e7d3      	b.n	80089d0 <_tx_thread_preemption_change+0x3c>
        status =  TX_THRESH_ERROR;
 8008a28:	2018      	movs	r0, #24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a2a:	f384 8810 	msr	PRIMASK, r4
}
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	20002c84 	.word	0x20002c84
 8008a34:	20002be0 	.word	0x20002be0
 8008a38:	20002c88 	.word	0x20002c88
 8008a3c:	20002c80 	.word	0x20002c80

08008a40 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <_tx_thread_system_preempt_check+0x2c>)
 8008a42:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8008a44:	b98b      	cbnz	r3, 8008a6a <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008a46:	4a0a      	ldr	r2, [pc, #40]	; (8008a70 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d00b      	beq.n	8008a6a <_tx_thread_system_preempt_check+0x2a>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <_tx_thread_system_preempt_check+0x38>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008a5a:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8008a5e:	b923      	cbnz	r3, 8008a6a <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008a60:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8008a64:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a66:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008a6a:	4770      	bx	lr
 8008a6c:	20002c78 	.word	0x20002c78
 8008a70:	20002c7c 	.word	0x20002c7c
 8008a74:	20002c80 	.word	0x20002c80
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008a80:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008a84:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8008a86:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d03f      	beq.n	8008b0c <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8008a8c:	304c      	adds	r0, #76	; 0x4c
 8008a8e:	f000 fa1d 	bl	8008ecc <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008a92:	4a35      	ldr	r2, [pc, #212]	; (8008b68 <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008a94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8008a96:	6813      	ldr	r3, [r2, #0]
 8008a98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008a9e:	b9b8      	cbnz	r0, 8008ad0 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8008aa0:	b9f9      	cbnz	r1, 8008ae2 <_tx_thread_system_resume+0x66>
 8008aa2:	4b32      	ldr	r3, [pc, #200]	; (8008b6c <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008aa4:	4932      	ldr	r1, [pc, #200]	; (8008b70 <_tx_thread_system_resume+0xf4>)
 8008aa6:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008aa8:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	428b      	cmp	r3, r1
 8008ab0:	d00d      	beq.n	8008ace <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008ab2:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8008ab4:	b95b      	cbnz	r3, 8008ace <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008ab6:	4b2f      	ldr	r3, [pc, #188]	; (8008b74 <_tx_thread_system_resume+0xf8>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008abe:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8008ac2:	b923      	cbnz	r3, 8008ace <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ac4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8008ac8:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008aca:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8008ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008ad0:	3901      	subs	r1, #1
 8008ad2:	2901      	cmp	r1, #1
 8008ad4:	d9e5      	bls.n	8008aa2 <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ad8:	b991      	cbnz	r1, 8008b00 <_tx_thread_system_resume+0x84>
 8008ada:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8008adc:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008ade:	6321      	str	r1, [r4, #48]	; 0x30
 8008ae0:	e7e0      	b.n	8008aa4 <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ae4:	b963      	cbnz	r3, 8008b00 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 8008ae6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 8008ae8:	4e23      	ldr	r6, [pc, #140]	; (8008b78 <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 8008aea:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 8008aec:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 8008af0:	b171      	cbz	r1, 8008b10 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8008af2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008af4:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8008af6:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8008af8:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8008afa:	e9c4 1008 	strd	r1, r0, [r4, #32]
 8008afe:	e7d1      	b.n	8008aa4 <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008b00:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008b02:	2103      	movs	r1, #3
 8008b04:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <_tx_thread_system_resume+0xf0>)
 8008b06:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 8008b0a:	e7cb      	b.n	8008aa4 <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008b0c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008b0e:	e7c0      	b.n	8008a92 <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008b10:	491a      	ldr	r1, [pc, #104]	; (8008b7c <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008b12:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 8008b16:	4f1a      	ldr	r7, [pc, #104]	; (8008b80 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008b18:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008b1a:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8008b1e:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 8008b22:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008b24:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 8008b28:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008b2a:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8008b2e:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 8008b32:	d9b7      	bls.n	8008aa4 <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 8008b34:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 8008b36:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 8008b38:	b199      	cbz	r1, 8008b62 <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8008b3a:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8008b3c:	4286      	cmp	r6, r0
 8008b3e:	d9b1      	bls.n	8008aa4 <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8008b40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008b42:	428e      	cmp	r6, r1
 8008b44:	d006      	beq.n	8008b54 <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008b46:	480f      	ldr	r0, [pc, #60]	; (8008b84 <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8008b48:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8008b4c:	6801      	ldr	r1, [r0, #0]
 8008b4e:	ea41 010c 	orr.w	r1, r1, ip
 8008b52:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 8008b54:	601c      	str	r4, [r3, #0]
 8008b56:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008b5a:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0aa      	beq.n	8008ab6 <_tx_thread_system_resume+0x3a>
}
 8008b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 8008b62:	601c      	str	r4, [r3, #0]
 8008b64:	e79e      	b.n	8008aa4 <_tx_thread_system_resume+0x28>
 8008b66:	bf00      	nop
 8008b68:	20002c78 	.word	0x20002c78
 8008b6c:	20002c80 	.word	0x20002c80
 8008b70:	20002c7c 	.word	0x20002c7c
 8008b74:	e000ed04 	.word	0xe000ed04
 8008b78:	20002be0 	.word	0x20002be0
 8008b7c:	20002c64 	.word	0x20002c64
 8008b80:	20002c84 	.word	0x20002c84
 8008b84:	20002c88 	.word	0x20002c88

08008b88 <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008b8c:	4b57      	ldr	r3, [pc, #348]	; (8008cec <_tx_thread_system_suspend+0x164>)
{
 8008b8e:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 8008b90:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008b92:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008b96:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8008b98:	4285      	cmp	r5, r0
 8008b9a:	d060      	beq.n	8008c5e <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008b9c:	4a54      	ldr	r2, [pc, #336]	; (8008cf0 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008b9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8008ba0:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008ba2:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 8008ba4:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ba8:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008baa:	d015      	beq.n	8008bd8 <_tx_thread_system_suspend+0x50>
 8008bac:	4b51      	ldr	r3, [pc, #324]	; (8008cf4 <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008bae:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	42ab      	cmp	r3, r5
 8008bb6:	d00d      	beq.n	8008bd4 <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008bb8:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8008bba:	b95b      	cbnz	r3, 8008bd4 <_tx_thread_system_suspend+0x4c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008bbc:	4b4e      	ldr	r3, [pc, #312]	; (8008cf8 <_tx_thread_system_suspend+0x170>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bc4:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8008bc8:	b923      	cbnz	r3, 8008bd4 <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008bca:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8008bce:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008bd0:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 8008bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008bd8:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008bda:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 8008bde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 8008be0:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008be2:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 8008be6:	d050      	beq.n	8008c8a <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008be8:	4f44      	ldr	r7, [pc, #272]	; (8008cfc <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008bea:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008bee:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8008bf2:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008bf6:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 8008bf8:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008bfc:	d037      	beq.n	8008c6e <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 8008bfe:	4b3d      	ldr	r3, [pc, #244]	; (8008cf4 <_tx_thread_system_suspend+0x16c>)
 8008c00:	6819      	ldr	r1, [r3, #0]
 8008c02:	42a1      	cmp	r1, r4
 8008c04:	d1d3      	bne.n	8008bae <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008c06:	483e      	ldr	r0, [pc, #248]	; (8008d00 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c08:	493e      	ldr	r1, [pc, #248]	; (8008d04 <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008c0a:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c0c:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008c0e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8008c12:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c14:	b1ec      	cbz	r4, 8008c52 <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 8008c16:	6814      	ldr	r4, [r2, #0]
 8008c18:	3401      	adds	r4, #1
 8008c1a:	6014      	str	r4, [r2, #0]
 8008c1c:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008c20:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008c24:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 8008c26:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8008c28:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 8008c2a:	3c01      	subs	r4, #1
 8008c2c:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008c2e:	fa95 f4a5 	rbit	r4, r5
 8008c32:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8008c36:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 8008c3a:	f8d0 c000 	ldr.w	ip, [r0]
 8008c3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c40:	4560      	cmp	r0, ip
 8008c42:	d806      	bhi.n	8008c52 <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008c44:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8008c46:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008c48:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8008c4c:	ea25 0504 	bic.w	r5, r5, r4
 8008c50:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c52:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008c56:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0af      	beq.n	8008bbc <_tx_thread_system_suspend+0x34>
 8008c5c:	e7ba      	b.n	8008bd4 <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 8008c5e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008c60:	3b01      	subs	r3, #1
 8008c62:	3303      	adds	r3, #3
 8008c64:	d935      	bls.n	8008cd2 <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008c66:	4b28      	ldr	r3, [pc, #160]	; (8008d08 <_tx_thread_system_suspend+0x180>)
 8008c68:	69e2      	ldr	r2, [r4, #28]
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	e796      	b.n	8008b9c <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c6e:	f8df c094 	ldr.w	ip, [pc, #148]	; 8008d04 <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 8008c72:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c76:	f8dc 3000 	ldr.w	r3, [ip]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0bf      	beq.n	8008bfe <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008c7e:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8008c80:	ea23 0301 	bic.w	r3, r3, r1
 8008c84:	f8cc 3000 	str.w	r3, [ip]
 8008c88:	e7b9      	b.n	8008bfe <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008c8a:	f8df e080 	ldr.w	lr, [pc, #128]	; 8008d0c <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 8008c8e:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c90:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008d04 <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008c94:	f8de 3000 	ldr.w	r3, [lr]
 8008c98:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 8008c9a:	4f18      	ldr	r7, [pc, #96]	; (8008cfc <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008c9c:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008c9e:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 8008ca2:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008ca6:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8008caa:	f1b9 0f00 	cmp.w	r9, #0
 8008cae:	d003      	beq.n	8008cb8 <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8008cb0:	ea01 0109 	and.w	r1, r1, r9
 8008cb4:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 8008cb8:	b983      	cbnz	r3, 8008cdc <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008cba:	4811      	ldr	r0, [pc, #68]	; (8008d00 <_tx_thread_system_suspend+0x178>)
 8008cbc:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 8008cbe:	490d      	ldr	r1, [pc, #52]	; (8008cf4 <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008cc0:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008cc8:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f43f af76 	beq.w	8008bbc <_tx_thread_system_suspend+0x34>
 8008cd0:	e780      	b.n	8008bd4 <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8008cd2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8008cd6:	f000 f8cf 	bl	8008e78 <_tx_timer_system_activate>
 8008cda:	e7c4      	b.n	8008c66 <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008cdc:	fa93 f3a3 	rbit	r3, r3
 8008ce0:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008ce4:	4906      	ldr	r1, [pc, #24]	; (8008d00 <_tx_thread_system_suspend+0x178>)
 8008ce6:	600b      	str	r3, [r1, #0]
 8008ce8:	e789      	b.n	8008bfe <_tx_thread_system_suspend+0x76>
 8008cea:	bf00      	nop
 8008cec:	20002c7c 	.word	0x20002c7c
 8008cf0:	20002c78 	.word	0x20002c78
 8008cf4:	20002c80 	.word	0x20002c80
 8008cf8:	e000ed04 	.word	0xe000ed04
 8008cfc:	20002be0 	.word	0x20002be0
 8008d00:	20002c84 	.word	0x20002c84
 8008d04:	20002c88 	.word	0x20002c88
 8008d08:	20002d18 	.word	0x20002d18
 8008d0c:	20002c64 	.word	0x20002c64

08008d10 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	460f      	mov	r7, r1
 8008d14:	4616      	mov	r6, r2
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8008d16:	2100      	movs	r1, #0
 8008d18:	222c      	movs	r2, #44	; 0x2c
{
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	461d      	mov	r5, r3
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8008d1e:	f000 fc86 	bl	800962e <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8008d22:	9b06      	ldr	r3, [sp, #24]
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8008d24:	6067      	str	r7, [r4, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8008d26:	60a3      	str	r3, [r4, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8008d28:	9b07      	ldr	r3, [sp, #28]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8008d2a:	6165      	str	r5, [r4, #20]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8008d2c:	e9c4 3603 	strd	r3, r6, [r4, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008d30:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008d34:	b672      	cpsid	i
    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8008d36:	4a12      	ldr	r2, [pc, #72]	; (8008d80 <_tx_timer_create+0x70>)
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8008d38:	4912      	ldr	r1, [pc, #72]	; (8008d84 <_tx_timer_create+0x74>)
    if (_tx_timer_created_count == TX_EMPTY)
 8008d3a:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8008d3c:	6021      	str	r1, [r4, #0]
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8008d3e:	4912      	ldr	r1, [pc, #72]	; (8008d88 <_tx_timer_create+0x78>)
    if (_tx_timer_created_count == TX_EMPTY)
 8008d40:	b95b      	cbnz	r3, 8008d5a <_tx_timer_create+0x4a>
        timer_ptr -> tx_timer_created_previous =  previous_timer;
        timer_ptr -> tx_timer_created_next =      next_timer;
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8008d42:	3301      	adds	r3, #1
        _tx_timer_created_ptr =                   timer_ptr;
 8008d44:	600c      	str	r4, [r1, #0]
    _tx_timer_created_count++;
 8008d46:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8008d48:	9b08      	ldr	r3, [sp, #32]
 8008d4a:	2b01      	cmp	r3, #1
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8008d4c:	e9c4 4409 	strd	r4, r4, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 8008d50:	d00e      	beq.n	8008d70 <_tx_timer_create+0x60>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d52:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8008d56:	2000      	movs	r0, #0
 8008d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _tx_timer_created_count++;
 8008d5a:	3301      	adds	r3, #1
        next_timer =  _tx_timer_created_ptr;
 8008d5c:	6809      	ldr	r1, [r1, #0]
    _tx_timer_created_count++;
 8008d5e:	6013      	str	r3, [r2, #0]
    if (auto_activate == TX_AUTO_ACTIVATE)
 8008d60:	9b08      	ldr	r3, [sp, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8008d62:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if (auto_activate == TX_AUTO_ACTIVATE)
 8008d64:	2b01      	cmp	r3, #1
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8008d66:	628c      	str	r4, [r1, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8008d68:	6244      	str	r4, [r0, #36]	; 0x24
        timer_ptr -> tx_timer_created_next =      next_timer;
 8008d6a:	e9c4 1009 	strd	r1, r0, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 8008d6e:	d1f0      	bne.n	8008d52 <_tx_timer_create+0x42>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8008d70:	f104 0008 	add.w	r0, r4, #8
 8008d74:	f000 f880 	bl	8008e78 <_tx_timer_system_activate>
 8008d78:	f386 8810 	msr	PRIMASK, r6
}
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d80:	20003204 	.word	0x20003204
 8008d84:	4154494d 	.word	0x4154494d
 8008d88:	20002df8 	.word	0x20002df8

08008d8c <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8008d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8008d90:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008d92:	4c26      	ldr	r4, [pc, #152]	; (8008e2c <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8008d94:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8008e64 <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008d98:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 8008d9a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8008e68 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008d9e:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8008da0:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008da2:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008da4:	4f23      	ldr	r7, [pc, #140]	; (8008e34 <_tx_timer_initialize+0xa8>)
{
 8008da6:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 8008da8:	4e23      	ldr	r6, [pc, #140]	; (8008e38 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8008daa:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 8008dae:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008db2:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 8008db4:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8008db6:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008db8:	f000 fc39 	bl	800962e <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8008dbc:	4e1f      	ldr	r6, [pc, #124]	; (8008e3c <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008dbe:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 8008dc2:	4a1f      	ldr	r2, [pc, #124]	; (8008e40 <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008dc4:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8008dc8:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8008dca:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8008dcc:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8008e6c <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008dd0:	4f1c      	ldr	r7, [pc, #112]	; (8008e44 <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 8008dd2:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8008dd4:	4661      	mov	r1, ip
 8008dd6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008e70 <_tx_timer_initialize+0xe4>
 8008dda:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8008ddc:	4e1a      	ldr	r6, [pc, #104]	; (8008e48 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008dde:	4c1b      	ldr	r4, [pc, #108]	; (8008e4c <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008de0:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8008de4:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8008de8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8008e74 <_tx_timer_initialize+0xe8>
 8008dec:	4f18      	ldr	r7, [pc, #96]	; (8008e50 <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8008dee:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8008df2:	4d18      	ldr	r5, [pc, #96]	; (8008e54 <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008df4:	6020      	str	r0, [r4, #0]
 8008df6:	e003      	b.n	8008e00 <_tx_timer_initialize+0x74>
 8008df8:	6831      	ldr	r1, [r6, #0]
 8008dfa:	6822      	ldr	r2, [r4, #0]
 8008dfc:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8008e00:	2000      	movs	r0, #0
 8008e02:	9201      	str	r2, [sp, #4]
 8008e04:	9100      	str	r1, [sp, #0]
 8008e06:	463a      	mov	r2, r7
 8008e08:	4629      	mov	r1, r5
 8008e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e0e:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8008e12:	464b      	mov	r3, r9
 8008e14:	4810      	ldr	r0, [pc, #64]	; (8008e58 <_tx_timer_initialize+0xcc>)
 8008e16:	f000 faa7 	bl	8009368 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d1ec      	bne.n	8008df8 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8008e1e:	4a0f      	ldr	r2, [pc, #60]	; (8008e5c <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 8008e22:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 8008e24:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8008e26:	b007      	add	sp, #28
 8008e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e2c:	20002c94 	.word	0x20002c94
 8008e30:	20002df0 	.word	0x20002df0
 8008e34:	20003208 	.word	0x20003208
 8008e38:	20002d14 	.word	0x20002d14
 8008e3c:	20002c90 	.word	0x20002c90
 8008e40:	20002df4 	.word	0x20002df4
 8008e44:	20002d20 	.word	0x20002d20
 8008e48:	20003200 	.word	0x20003200
 8008e4c:	20002dfc 	.word	0x20002dfc
 8008e50:	08008efd 	.word	0x08008efd
 8008e54:	08009704 	.word	0x08009704
 8008e58:	20002d28 	.word	0x20002d28
 8008e5c:	20002df8 	.word	0x20002df8
 8008e60:	20003204 	.word	0x20003204
 8008e64:	2000320c 	.word	0x2000320c
 8008e68:	20002d18 	.word	0x20002d18
 8008e6c:	20002e00 	.word	0x20002e00
 8008e70:	20002d1c 	.word	0x20002d1c
 8008e74:	4154494d 	.word	0x4154494d

08008e78 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8008e78:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8008e7a:	1e53      	subs	r3, r2, #1
 8008e7c:	1cd9      	adds	r1, r3, #3
 8008e7e:	d900      	bls.n	8008e82 <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 8008e80:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8008e82:	6981      	ldr	r1, [r0, #24]
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d1fb      	bne.n	8008e80 <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008e88:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008e8a:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008e8c:	490d      	ldr	r1, [pc, #52]	; (8008ec4 <_tx_timer_system_activate+0x4c>)
 8008e8e:	bf94      	ite	ls
 8008e90:	009b      	lslls	r3, r3, #2
 8008e92:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008e94:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008e96:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008e98:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	d803      	bhi.n	8008ea6 <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8008ea0:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8008ea2:	6812      	ldr	r2, [r2, #0]
 8008ea4:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	b132      	cbz	r2, 8008eb8 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8008eaa:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8008eac:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8008eae:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8008eb0:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8008eb4:	6183      	str	r3, [r0, #24]
}
 8008eb6:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8008eb8:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 8008ebc:	6018      	str	r0, [r3, #0]
 8008ebe:	e7f9      	b.n	8008eb4 <_tx_timer_system_activate+0x3c>
 8008ec0:	20002c90 	.word	0x20002c90
 8008ec4:	20002d20 	.word	0x20002d20
 8008ec8:	20002df4 	.word	0x20002df4

08008ecc <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8008ecc:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8008ece:	b153      	cbz	r3, 8008ee6 <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8008ed0:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8008ed2:	4290      	cmp	r0, r2
 8008ed4:	d008      	beq.n	8008ee8 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8008ed6:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008ed8:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008eda:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8008edc:	6819      	ldr	r1, [r3, #0]
 8008ede:	4281      	cmp	r1, r0
 8008ee0:	d008      	beq.n	8008ef4 <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6183      	str	r3, [r0, #24]
    }
}
 8008ee6:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4282      	cmp	r2, r0
 8008eec:	d1f9      	bne.n	8008ee2 <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	e7f6      	b.n	8008ee2 <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 8008ef4:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e7f3      	b.n	8008ee2 <_tx_timer_system_deactivate+0x16>
 8008efa:	bf00      	nop

08008efc <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8008efc:	4b40      	ldr	r3, [pc, #256]	; (8009000 <_tx_timer_thread_entry+0x104>)
 8008efe:	4298      	cmp	r0, r3
 8008f00:	d000      	beq.n	8008f04 <_tx_timer_thread_entry+0x8>
 8008f02:	4770      	bx	lr
{
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8009018 <_tx_timer_thread_entry+0x11c>
 8008f0e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800901c <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8008f12:	2600      	movs	r6, #0
 8008f14:	ad01      	add	r5, sp, #4
 8008f16:	4c3b      	ldr	r4, [pc, #236]	; (8009004 <_tx_timer_thread_entry+0x108>)
 8008f18:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8009010 <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f1c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f20:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 8008f22:	f8db 3000 	ldr.w	r3, [fp]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 8008f2a:	b10a      	cbz	r2, 8008f30 <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8008f2c:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8008f30:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 8008f34:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8008f38:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8008f3a:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8008f3e:	d059      	beq.n	8008ff4 <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8008f40:	4b31      	ldr	r3, [pc, #196]	; (8009008 <_tx_timer_thread_entry+0x10c>)
 8008f42:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008f44:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f48:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f4c:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8008f4e:	9f00      	ldr	r7, [sp, #0]
 8008f50:	b9b7      	cbnz	r7, 8008f80 <_tx_timer_thread_entry+0x84>
 8008f52:	e034      	b.n	8008fbe <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8008f54:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008f56:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8008f58:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8008f5a:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8008f5c:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8008f5e:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008f60:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f64:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f68:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8008f6a:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8008f6c:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 8008f6e:	42b8      	cmp	r0, r7
 8008f70:	d02b      	beq.n	8008fca <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008f72:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f76:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f7a:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8008f7c:	9f00      	ldr	r7, [sp, #0]
 8008f7e:	b1f7      	cbz	r7, 8008fbe <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8008f80:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 8008f82:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 8008f84:	42ba      	cmp	r2, r7
 8008f86:	d018      	beq.n	8008fba <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8008f88:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 8008f8a:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008f8c:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008f8e:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8008f90:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	2a20      	cmp	r2, #32
 8008f98:	d8dc      	bhi.n	8008f54 <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8008f9a:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8008f9c:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8008fa0:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8008fa2:	b113      	cbz	r3, 8008faa <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008fa4:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8008fa6:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 8008fa8:	9701      	str	r7, [sp, #4]
 8008faa:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 8008fac:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008fae:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	d0d6      	beq.n	8008f64 <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 8008fb6:	4790      	blx	r2
 8008fb8:	e7d4      	b.n	8008f64 <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 8008fba:	9600      	str	r6, [sp, #0]
 8008fbc:	e7ea      	b.n	8008f94 <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <_tx_timer_thread_entry+0x10c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	b13b      	cbz	r3, 8008fd4 <_tx_timer_thread_entry+0xd8>
 8008fc4:	f38c 8810 	msr	PRIMASK, ip
 8008fc8:	e7a8      	b.n	8008f1c <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008fca:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f7ff ff53 	bl	8008e78 <_tx_timer_system_activate>
 8008fd2:	e7ce      	b.n	8008f72 <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8008fd4:	490d      	ldr	r1, [pc, #52]	; (800900c <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008fd6:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008fd8:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 8008fda:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008fdc:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 8008fe0:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008fe2:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 8008fe6:	600b      	str	r3, [r1, #0]
 8008fe8:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008fec:	4808      	ldr	r0, [pc, #32]	; (8009010 <_tx_timer_thread_entry+0x114>)
 8008fee:	f7ff fdcb 	bl	8008b88 <_tx_thread_system_suspend>
 8008ff2:	e793      	b.n	8008f1c <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <_tx_timer_thread_entry+0x118>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f8cb 3000 	str.w	r3, [fp]
 8008ffc:	e7a0      	b.n	8008f40 <_tx_timer_thread_entry+0x44>
 8008ffe:	bf00      	nop
 8009000:	4154494d 	.word	0x4154494d
 8009004:	20002df0 	.word	0x20002df0
 8009008:	20002d14 	.word	0x20002d14
 800900c:	20002c78 	.word	0x20002c78
 8009010:	20002d28 	.word	0x20002d28
 8009014:	20002df4 	.word	0x20002df4
 8009018:	20002c90 	.word	0x20002c90
 800901c:	20002d20 	.word	0x20002d20

08009020 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	b085      	sub	sp, #20
 8009026:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 800902a:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800902e:	9401      	str	r4, [sp, #4]
 8009030:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009032:	9403      	str	r4, [sp, #12]
 8009034:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009036:	9402      	str	r4, [sp, #8]
 8009038:	9c14      	ldr	r4, [sp, #80]	; 0x50
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800903a:	2800      	cmp	r0, #0
 800903c:	d079      	beq.n	8009132 <_txe_thread_create+0x112>
 800903e:	2cc8      	cmp	r4, #200	; 0xc8
 8009040:	d177      	bne.n	8009132 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009042:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009046:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009048:	f8df e140 	ldr.w	lr, [pc, #320]	; 800918c <_txe_thread_create+0x16c>
 800904c:	f8de 4000 	ldr.w	r4, [lr]
 8009050:	3401      	adds	r4, #1
 8009052:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009056:	f385 8810 	msr	PRIMASK, r5
        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
        next_thread =  _tx_thread_created_ptr;
 800905a:	4c47      	ldr	r4, [pc, #284]	; (8009178 <_txe_thread_create+0x158>)
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800905c:	f108 3cff 	add.w	ip, r8, #4294967295
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009060:	4d46      	ldr	r5, [pc, #280]	; (800917c <_txe_thread_create+0x15c>)
        next_thread =  _tx_thread_created_ptr;
 8009062:	6824      	ldr	r4, [r4, #0]
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8009064:	44bc      	add	ip, r7
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009066:	f8d5 b000 	ldr.w	fp, [r5]
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800906a:	1b05      	subs	r5, r0, r4
 800906c:	fab5 f585 	clz	r5, r5
 8009070:	096d      	lsrs	r5, r5, #5
 8009072:	f1bb 0f00 	cmp.w	fp, #0
 8009076:	bf08      	it	eq
 8009078:	2501      	moveq	r5, #1
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800907a:	b985      	cbnz	r5, 800909e <_txe_thread_create+0x7e>
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800907c:	469a      	mov	sl, r3
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800907e:	68e6      	ldr	r6, [r4, #12]
 8009080:	42be      	cmp	r6, r7
 8009082:	d865      	bhi.n	8009150 <_txe_thread_create+0x130>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	42bb      	cmp	r3, r7
 8009088:	d962      	bls.n	8009150 <_txe_thread_create+0x130>
                    break_flag =  TX_TRUE;
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800908a:	4566      	cmp	r6, ip
 800908c:	d803      	bhi.n	8009096 <_txe_thread_create+0x76>
 800908e:	2601      	movs	r6, #1
                    stack_start =  TX_NULL;
 8009090:	2700      	movs	r7, #0
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8009092:	4563      	cmp	r3, ip
 8009094:	d951      	bls.n	800913a <_txe_thread_create+0x11a>
 8009096:	4653      	mov	r3, sl
                    break_flag =  TX_TRUE;
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8009098:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
                    stack_start =  TX_NULL;
 800909c:	2700      	movs	r7, #0
 800909e:	4605      	mov	r5, r0
 80090a0:	469a      	mov	sl, r3
 80090a2:	4616      	mov	r6, r2
 80090a4:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80090a6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80090aa:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80090ac:	f8de 3000 	ldr.w	r3, [lr]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80090b6:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80090ba:	f7ff fcc1 	bl	8008a40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80090be:	42a5      	cmp	r5, r4
 80090c0:	d037      	beq.n	8009132 <_txe_thread_create+0x112>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80090c2:	2e00      	cmp	r6, #0
 80090c4:	d04c      	beq.n	8009160 <_txe_thread_create+0x140>
 80090c6:	2f00      	cmp	r7, #0
 80090c8:	d04a      	beq.n	8009160 <_txe_thread_create+0x140>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80090ca:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 80090ce:	d945      	bls.n	800915c <_txe_thread_create+0x13c>
            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80090d0:	f1b9 0f1f 	cmp.w	r9, #31
 80090d4:	d848      	bhi.n	8009168 <_txe_thread_create+0x148>
            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80090d6:	9b01      	ldr	r3, [sp, #4]
 80090d8:	4599      	cmp	r9, r3
 80090da:	d34b      	bcc.n	8009174 <_txe_thread_create+0x154>
            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80090dc:	9b02      	ldr	r3, [sp, #8]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d844      	bhi.n	800916c <_txe_thread_create+0x14c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80090e2:	4a27      	ldr	r2, [pc, #156]	; (8009180 <_txe_thread_create+0x160>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80090e4:	4b27      	ldr	r3, [pc, #156]	; (8009184 <_txe_thread_create+0x164>)
 80090e6:	6810      	ldr	r0, [r2, #0]
    status =  TX_SUCCESS;
 80090e8:	4298      	cmp	r0, r3
 80090ea:	bf0c      	ite	eq
 80090ec:	2013      	moveq	r0, #19
 80090ee:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80090f0:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80090f4:	4b24      	ldr	r3, [pc, #144]	; (8009188 <_txe_thread_create+0x168>)
 80090f6:	6819      	ldr	r1, [r3, #0]
 80090f8:	430a      	orrs	r2, r1
 80090fa:	d006      	beq.n	800910a <_txe_thread_create+0xea>
 80090fc:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4313      	orrs	r3, r2
 8009104:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009108:	d332      	bcc.n	8009170 <_txe_thread_create+0x150>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800910a:	b998      	cbnz	r0, 8009134 <_txe_thread_create+0x114>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800910c:	9b02      	ldr	r3, [sp, #8]
 800910e:	4628      	mov	r0, r5
 8009110:	9a03      	ldr	r2, [sp, #12]
 8009112:	9901      	ldr	r1, [sp, #4]
 8009114:	9313      	str	r3, [sp, #76]	; 0x4c
 8009116:	4653      	mov	r3, sl
 8009118:	9212      	str	r2, [sp, #72]	; 0x48
 800911a:	4632      	mov	r2, r6
 800911c:	9111      	str	r1, [sp, #68]	; 0x44
 800911e:	4659      	mov	r1, fp
 8009120:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8009124:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
}
 8009128:	b005      	add	sp, #20
 800912a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800912e:	f000 b91b 	b.w	8009368 <_tx_thread_create>
        status =  TX_THREAD_ERROR;
 8009132:	200e      	movs	r0, #14
}
 8009134:	b005      	add	sp, #20
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            next_thread =  next_thread -> tx_thread_created_next;
 800913a:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800913e:	3501      	adds	r5, #1
            if (break_flag == TX_TRUE)
 8009140:	42a0      	cmp	r0, r4
 8009142:	bf18      	it	ne
 8009144:	455d      	cmpne	r5, fp
 8009146:	d201      	bcs.n	800914c <_txe_thread_create+0x12c>
 8009148:	2e00      	cmp	r6, #0
 800914a:	d098      	beq.n	800907e <_txe_thread_create+0x5e>
 800914c:	4653      	mov	r3, sl
 800914e:	e7a6      	b.n	800909e <_txe_thread_create+0x7e>
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8009150:	4566      	cmp	r6, ip
 8009152:	f04f 0600 	mov.w	r6, #0
 8009156:	d8f0      	bhi.n	800913a <_txe_thread_create+0x11a>
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	e79a      	b.n	8009092 <_txe_thread_create+0x72>
            status =  TX_SIZE_ERROR;
 800915c:	2005      	movs	r0, #5
 800915e:	e7e9      	b.n	8009134 <_txe_thread_create+0x114>
            status =  TX_PTR_ERROR;
 8009160:	2003      	movs	r0, #3
}
 8009162:	b005      	add	sp, #20
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  TX_PRIORITY_ERROR;
 8009168:	200f      	movs	r0, #15
 800916a:	e7e3      	b.n	8009134 <_txe_thread_create+0x114>
            status =  TX_START_ERROR;
 800916c:	2010      	movs	r0, #16
 800916e:	e7e1      	b.n	8009134 <_txe_thread_create+0x114>
                    status =  TX_CALLER_ERROR;
 8009170:	2013      	movs	r0, #19
    return(status);
 8009172:	e7df      	b.n	8009134 <_txe_thread_create+0x114>
            status =  TX_THRESH_ERROR;
 8009174:	2018      	movs	r0, #24
 8009176:	e7dd      	b.n	8009134 <_txe_thread_create+0x114>
 8009178:	20002c68 	.word	0x20002c68
 800917c:	20002c70 	.word	0x20002c70
 8009180:	20002c7c 	.word	0x20002c7c
 8009184:	20002d28 	.word	0x20002d28
 8009188:	2000007c 	.word	0x2000007c
 800918c:	20002c78 	.word	0x20002c78

08009190 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8009190:	b538      	push	{r3, r4, r5, lr}

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8009192:	f7ff fbc7 	bl	8008924 <_tx_thread_initialize>

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8009196:	4d0e      	ldr	r5, [pc, #56]	; (80091d0 <_tx_initialize_high_level+0x40>)
    _tx_timer_initialize();
 8009198:	f7ff fdf8 	bl	8008d8c <_tx_timer_initialize>
    _tx_semaphore_initialize();
 800919c:	2300      	movs	r3, #0
 800919e:	490d      	ldr	r1, [pc, #52]	; (80091d4 <_tx_initialize_high_level+0x44>)
 80091a0:	4a0d      	ldr	r2, [pc, #52]	; (80091d8 <_tx_initialize_high_level+0x48>)
 80091a2:	600b      	str	r3, [r1, #0]
 80091a4:	6013      	str	r3, [r2, #0]
    _tx_queue_initialize();
 80091a6:	4c0d      	ldr	r4, [pc, #52]	; (80091dc <_tx_initialize_high_level+0x4c>)

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80091a8:	480d      	ldr	r0, [pc, #52]	; (80091e0 <_tx_initialize_high_level+0x50>)
 80091aa:	490e      	ldr	r1, [pc, #56]	; (80091e4 <_tx_initialize_high_level+0x54>)

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80091ac:	4a0e      	ldr	r2, [pc, #56]	; (80091e8 <_tx_initialize_high_level+0x58>)
    _tx_queue_initialize();
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	6023      	str	r3, [r4, #0]
    _tx_event_flags_initialize();
 80091b2:	6003      	str	r3, [r0, #0]
 80091b4:	600b      	str	r3, [r1, #0]
    _tx_block_pool_initialize();
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	4d0c      	ldr	r5, [pc, #48]	; (80091ec <_tx_initialize_high_level+0x5c>)

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80091ba:	4c0d      	ldr	r4, [pc, #52]	; (80091f0 <_tx_initialize_high_level+0x60>)
 80091bc:	480d      	ldr	r0, [pc, #52]	; (80091f4 <_tx_initialize_high_level+0x64>)

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80091be:	490e      	ldr	r1, [pc, #56]	; (80091f8 <_tx_initialize_high_level+0x68>)
 80091c0:	4a0e      	ldr	r2, [pc, #56]	; (80091fc <_tx_initialize_high_level+0x6c>)
    _tx_block_pool_initialize();
 80091c2:	602b      	str	r3, [r5, #0]
    _tx_byte_pool_initialize();
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	6003      	str	r3, [r0, #0]
    _tx_mutex_initialize();
 80091c8:	600b      	str	r3, [r1, #0]
 80091ca:	6013      	str	r3, [r2, #0]
#endif
}
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	2000323c 	.word	0x2000323c
 80091d4:	20003220 	.word	0x20003220
 80091d8:	20003230 	.word	0x20003230
 80091dc:	2000321c 	.word	0x2000321c
 80091e0:	20003210 	.word	0x20003210
 80091e4:	20003234 	.word	0x20003234
 80091e8:	20003238 	.word	0x20003238
 80091ec:	2000322c 	.word	0x2000322c
 80091f0:	20003224 	.word	0x20003224
 80091f4:	20003240 	.word	0x20003240
 80091f8:	20003218 	.word	0x20003218
 80091fc:	20003214 	.word	0x20003214

08009200 <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8009200:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009202:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009206:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8009208:	4a1a      	ldr	r2, [pc, #104]	; (8009274 <_tx_mutex_cleanup+0x74>)
 800920a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800920c:	4294      	cmp	r4, r2
 800920e:	d002      	beq.n	8009216 <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009210:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009214:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009216:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800921a:	428a      	cmp	r2, r1
 800921c:	d1f8      	bne.n	8009210 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800921e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 8009220:	2a00      	cmp	r2, #0
 8009222:	d0f5      	beq.n	8009210 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8009224:	4914      	ldr	r1, [pc, #80]	; (8009278 <_tx_mutex_cleanup+0x78>)
 8009226:	6814      	ldr	r4, [r2, #0]
 8009228:	428c      	cmp	r4, r1
 800922a:	d1f1      	bne.n	8009210 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800922c:	69d1      	ldr	r1, [r2, #28]
 800922e:	2900      	cmp	r1, #0
 8009230:	d0ee      	beq.n	8009210 <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 8009232:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009234:	2400      	movs	r4, #0
 8009236:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 8009238:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800923a:	b1c1      	cbz	r1, 800926e <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800923c:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800923e:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009242:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009244:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009246:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009248:	d011      	beq.n	800926e <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800924a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800924c:	2a0d      	cmp	r2, #13
 800924e:	d1df      	bne.n	8009210 <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8009250:	490a      	ldr	r1, [pc, #40]	; (800927c <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009252:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 8009254:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009256:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800925a:	3201      	adds	r2, #1
 800925c:	600a      	str	r2, [r1, #0]
 800925e:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8009262:	f7ff fc0b 	bl	8008a7c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009266:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800926a:	b672      	cpsid	i
 800926c:	e7d0      	b.n	8009210 <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800926e:	6191      	str	r1, [r2, #24]
 8009270:	e7eb      	b.n	800924a <_tx_mutex_cleanup+0x4a>
 8009272:	bf00      	nop
 8009274:	08009201 	.word	0x08009201
 8009278:	4d555445 	.word	0x4d555445
 800927c:	20002c78 	.word	0x20002c78

08009280 <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009284:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009288:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800928a:	4d0d      	ldr	r5, [pc, #52]	; (80092c0 <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800928c:	2601      	movs	r6, #1
 800928e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 8009292:	682a      	ldr	r2, [r5, #0]
 8009294:	4432      	add	r2, r6
 8009296:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 8009298:	b158      	cbz	r0, 80092b2 <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800929a:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800929c:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80092a0:	f7ff fa2c 	bl	80086fc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80092a4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80092a8:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80092aa:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d1f2      	bne.n	8009298 <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80092b2:	682a      	ldr	r2, [r5, #0]
 80092b4:	3a01      	subs	r2, #1
 80092b6:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80092b8:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
 80092be:	bf00      	nop
 80092c0:	20002c78 	.word	0x20002c78

080092c4 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80092c6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80092ca:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80092cc:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80092ce:	2f01      	cmp	r7, #1
 80092d0:	d92a      	bls.n	8009328 <_tx_mutex_prioritize+0x64>
 80092d2:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 80092d4:	2f02      	cmp	r7, #2
 80092d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80092d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80092da:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80092dc:	d021      	beq.n	8009322 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80092de:	f8df c084 	ldr.w	ip, [pc, #132]	; 8009364 <_tx_mutex_prioritize+0xa0>
 80092e2:	4616      	mov	r6, r2
 80092e4:	f8dc e000 	ldr.w	lr, [ip]
 80092e8:	f10e 0e01 	add.w	lr, lr, #1
 80092ec:	f8cc e000 	str.w	lr, [ip]
 80092f0:	e007      	b.n	8009302 <_tx_mutex_prioritize+0x3e>
 80092f2:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80092f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80092f6:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 80092f8:	428b      	cmp	r3, r1
 80092fa:	461e      	mov	r6, r3
 80092fc:	d018      	beq.n	8009330 <_tx_mutex_prioritize+0x6c>
 80092fe:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8009300:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009302:	42ab      	cmp	r3, r5
 8009304:	bf88      	it	hi
 8009306:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009308:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800930c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009310:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8009312:	6983      	ldr	r3, [r0, #24]
 8009314:	42b3      	cmp	r3, r6
 8009316:	d1ec      	bne.n	80092f2 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8009318:	69c5      	ldr	r5, [r0, #28]
 800931a:	42bd      	cmp	r5, r7
 800931c:	d020      	beq.n	8009360 <_tx_mutex_prioritize+0x9c>
 800931e:	462f      	mov	r7, r5
 8009320:	e7e8      	b.n	80092f4 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8009322:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8009324:	bf38      	it	cc
 8009326:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009328:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 800932c:	2000      	movs	r0, #0
 800932e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 8009330:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 8009334:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 8009336:	f101 31ff 	add.w	r1, r1, #4294967295
 800933a:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 800933e:	d009      	beq.n	8009354 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8009340:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8009344:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8009346:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8009348:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800934a:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800934e:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8009350:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8009352:	6182      	str	r2, [r0, #24]
 8009354:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 8009358:	f7ff fb72 	bl	8008a40 <_tx_thread_system_preempt_check>
}
 800935c:	2000      	movs	r0, #0
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009360:	6f09      	ldr	r1, [r1, #112]	; 0x70
 8009362:	e7c9      	b.n	80092f8 <_tx_mutex_prioritize+0x34>
 8009364:	20002c78 	.word	0x20002c78

08009368 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8009368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800936e:	4604      	mov	r4, r0
 8009370:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009372:	468b      	mov	fp, r1
 8009374:	4692      	mov	sl, r2
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8009376:	4630      	mov	r0, r6
 8009378:	462a      	mov	r2, r5
 800937a:	21ef      	movs	r1, #239	; 0xef
{
 800937c:	4698      	mov	r8, r3
 800937e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8009382:	f000 f954 	bl	800962e <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8009386:	4620      	mov	r0, r4
 8009388:	22c8      	movs	r2, #200	; 0xc8
 800938a:	2100      	movs	r1, #0
 800938c:	f000 f94f 	bl	800962e <memset>
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
    thread_ptr -> tx_thread_stack_start =       stack_start;
    thread_ptr -> tx_thread_stack_size =        stack_size;
    thread_ptr -> tx_thread_priority =          priority;
    thread_ptr -> tx_thread_user_priority =     priority;
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8009390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8009392:	1e6a      	subs	r2, r5, #1
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009394:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009398:	2103      	movs	r1, #3

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800939a:	4f36      	ldr	r7, [pc, #216]	; (8009474 <_tx_thread_create+0x10c>)
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800939c:	4432      	add	r2, r6
    thread_ptr -> tx_thread_name =              name_ptr;
 800939e:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80093a2:	6321      	str	r1, [r4, #48]	; 0x30
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80093a4:	4620      	mov	r0, r4
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80093a6:	60e6      	str	r6, [r4, #12]
    thread_ptr -> tx_thread_priority =          priority;
 80093a8:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80093ac:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80093b0:	65a4      	str	r4, [r4, #88]	; 0x58
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80093b2:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80093b6:	6567      	str	r7, [r4, #84]	; 0x54
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80093b8:	492f      	ldr	r1, [pc, #188]	; (8009478 <_tx_thread_create+0x110>)
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80093ba:	e9c4 3306 	strd	r3, r3, [r4, #24]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 80093be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80093c0:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80093c4:	e9c4 2504 	strd	r2, r5, [r4, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 80093c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 80093ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80093ce:	f7f7 f827 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80093d2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80093d6:	b672      	cpsid	i
    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80093d8:	4828      	ldr	r0, [pc, #160]	; (800947c <_tx_thread_create+0x114>)
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80093da:	4a29      	ldr	r2, [pc, #164]	; (8009480 <_tx_thread_create+0x118>)
    if (_tx_thread_created_count == TX_EMPTY)
 80093dc:	6803      	ldr	r3, [r0, #0]
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80093de:	6022      	str	r2, [r4, #0]
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80093e0:	4a28      	ldr	r2, [pc, #160]	; (8009484 <_tx_thread_create+0x11c>)
    if (_tx_thread_created_count == TX_EMPTY)
 80093e2:	b9db      	cbnz	r3, 800941c <_tx_thread_create+0xb4>
        _tx_thread_created_ptr =                    thread_ptr;
 80093e4:	6014      	str	r4, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80093e6:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80093ea:	4927      	ldr	r1, [pc, #156]	; (8009488 <_tx_thread_create+0x120>)
    _tx_thread_created_count++;
 80093ec:	3301      	adds	r3, #1
    _tx_thread_preempt_disable++;
 80093ee:	680a      	ldr	r2, [r1, #0]
    _tx_thread_created_count++;
 80093f0:	6003      	str	r3, [r0, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80093f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    _tx_thread_preempt_disable++;
 80093f4:	3201      	adds	r2, #1
    if (auto_start == TX_AUTO_START)
 80093f6:	2b01      	cmp	r3, #1
    _tx_thread_preempt_disable++;
 80093f8:	600a      	str	r2, [r1, #0]
    if (auto_start == TX_AUTO_START)
 80093fa:	d12a      	bne.n	8009452 <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80093fc:	f3ef 8205 	mrs	r2, IPSR
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8009400:	4b22      	ldr	r3, [pc, #136]	; (800948c <_tx_thread_create+0x124>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4313      	orrs	r3, r2
 8009406:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800940a:	d211      	bcs.n	8009430 <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800940c:	f385 8810 	msr	PRIMASK, r5

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009410:	4620      	mov	r0, r4
 8009412:	f7ff fb33 	bl	8008a7c <_tx_thread_system_resume>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
}
 8009416:	2000      	movs	r0, #0
 8009418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        next_thread =  _tx_thread_created_ptr;
 800941c:	6812      	ldr	r2, [r2, #0]
        previous_thread =  next_thread -> tx_thread_created_previous;
 800941e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8009422:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8009426:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
        thread_ptr -> tx_thread_created_next =      next_thread;
 800942a:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 800942e:	e7dc      	b.n	80093ea <_tx_thread_create+0x82>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <_tx_thread_create+0x128>)
 8009432:	681e      	ldr	r6, [r3, #0]
            if (saved_thread_ptr != TX_NULL)
 8009434:	b1e6      	cbz	r6, 8009470 <_tx_thread_create+0x108>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8009436:	6af3      	ldr	r3, [r6, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009438:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800943a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800943c:	f385 8810 	msr	PRIMASK, r5
        _tx_thread_system_resume(thread_ptr);
 8009440:	4620      	mov	r0, r4
 8009442:	f7ff fb1b 	bl	8008a7c <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 8009446:	2e00      	cmp	r6, #0
 8009448:	d0e5      	beq.n	8009416 <_tx_thread_create+0xae>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800944a:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 800944c:	2000      	movs	r0, #0
 800944e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009452:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009456:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800945a:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	3b01      	subs	r3, #1
 8009460:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009462:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8009466:	f7ff faeb 	bl	8008a40 <_tx_thread_system_preempt_check>
}
 800946a:	2000      	movs	r0, #0
 800946c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
UINT                    saved_threshold =  ((UINT) 0);
 8009470:	4637      	mov	r7, r6
 8009472:	e7e3      	b.n	800943c <_tx_thread_create+0xd4>
 8009474:	08009571 	.word	0x08009571
 8009478:	08009495 	.word	0x08009495
 800947c:	20002c70 	.word	0x20002c70
 8009480:	54485244 	.word	0x54485244
 8009484:	20002c68 	.word	0x20002c68
 8009488:	20002c78 	.word	0x20002c78
 800948c:	2000007c 	.word	0x2000007c
 8009490:	20002c80 	.word	0x20002c80

08009494 <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009494:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <_tx_thread_shell_entry+0x5c>)
{
 8009496:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009498:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800949a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800949e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80094a0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80094a4:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80094a8:	b113      	cbz	r3, 80094b0 <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80094aa:	2100      	movs	r1, #0
 80094ac:	4620      	mov	r0, r4
 80094ae:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80094b0:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 80094b4:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <_tx_thread_shell_entry+0x60>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	b10b      	cbz	r3, 80094c0 <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80094bc:	4620      	mov	r0, r4
 80094be:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80094c0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80094c4:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80094c6:	4a0c      	ldr	r2, [pc, #48]	; (80094f8 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80094c8:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80094ca:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80094cc:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 80094d0:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80094d2:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 80094d4:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80094d6:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80094d8:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 80094da:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80094dc:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80094e0:	b10d      	cbz	r5, 80094e6 <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80094e2:	4620      	mov	r0, r4
 80094e4:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80094e6:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80094e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 80094ec:	f7ff bb4c 	b.w	8008b88 <_tx_thread_system_suspend>
 80094f0:	20002c7c 	.word	0x20002c7c
 80094f4:	20002c60 	.word	0x20002c60
 80094f8:	20002c78 	.word	0x20002c78

080094fc <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80094fc:	4b16      	ldr	r3, [pc, #88]	; (8009558 <_tx_thread_time_slice+0x5c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009500:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009504:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009506:	4915      	ldr	r1, [pc, #84]	; (800955c <_tx_thread_time_slice+0x60>)
 8009508:	2000      	movs	r0, #0
 800950a:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800950c:	b193      	cbz	r3, 8009534 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800950e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009510:	b981      	cbnz	r1, 8009534 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009512:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009514:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009516:	4298      	cmp	r0, r3
{
 8009518:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800951a:	4c11      	ldr	r4, [pc, #68]	; (8009560 <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800951c:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800951e:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009520:	d003      	beq.n	800952a <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009526:	4299      	cmp	r1, r3
 8009528:	d007      	beq.n	800953a <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800952a:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800952e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	f382 8810 	msr	PRIMASK, r2
 8009538:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800953a:	4c0a      	ldr	r4, [pc, #40]	; (8009564 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800953e:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009540:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009544:	4909      	ldr	r1, [pc, #36]	; (800956c <_tx_thread_time_slice+0x70>)
 8009546:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800954a:	600b      	str	r3, [r1, #0]
 800954c:	f382 8810 	msr	PRIMASK, r2
}
 8009550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20002c7c 	.word	0x20002c7c
 800955c:	20003208 	.word	0x20003208
 8009560:	20002d18 	.word	0x20002d18
 8009564:	20002c84 	.word	0x20002c84
 8009568:	20002be0 	.word	0x20002be0
 800956c:	20002c80 	.word	0x20002c80

08009570 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009570:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009572:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009576:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009578:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800957a:	2a04      	cmp	r2, #4
 800957c:	d008      	beq.n	8009590 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800957e:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009580:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009584:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 8009588:	b162      	cbz	r2, 80095a4 <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800958a:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800958e:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 8009590:	4a06      	ldr	r2, [pc, #24]	; (80095ac <_tx_thread_timeout+0x3c>)
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	f384 8810 	msr	PRIMASK, r4
}
 800959c:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 80095a0:	f7ff ba6c 	b.w	8008a7c <_tx_thread_system_resume>
}
 80095a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20002c78 	.word	0x20002c78

080095b0 <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80095b0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80095b4:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80095b6:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <_tx_timer_expiration_process+0x18>)
 80095b8:	6813      	ldr	r3, [r2, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80095be:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80095c2:	4802      	ldr	r0, [pc, #8]	; (80095cc <_tx_timer_expiration_process+0x1c>)
 80095c4:	f7ff ba5a 	b.w	8008a7c <_tx_thread_system_resume>
 80095c8:	20002c78 	.word	0x20002c78
 80095cc:	20002d28 	.word	0x20002d28

080095d0 <__libc_init_array>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4e0d      	ldr	r6, [pc, #52]	; (8009608 <__libc_init_array+0x38>)
 80095d4:	4c0d      	ldr	r4, [pc, #52]	; (800960c <__libc_init_array+0x3c>)
 80095d6:	1ba4      	subs	r4, r4, r6
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	2500      	movs	r5, #0
 80095dc:	42a5      	cmp	r5, r4
 80095de:	d109      	bne.n	80095f4 <__libc_init_array+0x24>
 80095e0:	4e0b      	ldr	r6, [pc, #44]	; (8009610 <__libc_init_array+0x40>)
 80095e2:	4c0c      	ldr	r4, [pc, #48]	; (8009614 <__libc_init_array+0x44>)
 80095e4:	f000 f82c 	bl	8009640 <_init>
 80095e8:	1ba4      	subs	r4, r4, r6
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	2500      	movs	r5, #0
 80095ee:	42a5      	cmp	r5, r4
 80095f0:	d105      	bne.n	80095fe <__libc_init_array+0x2e>
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095f8:	4798      	blx	r3
 80095fa:	3501      	adds	r5, #1
 80095fc:	e7ee      	b.n	80095dc <__libc_init_array+0xc>
 80095fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009602:	4798      	blx	r3
 8009604:	3501      	adds	r5, #1
 8009606:	e7f2      	b.n	80095ee <__libc_init_array+0x1e>
 8009608:	08009720 	.word	0x08009720
 800960c:	08009720 	.word	0x08009720
 8009610:	08009720 	.word	0x08009720
 8009614:	08009724 	.word	0x08009724

08009618 <memcpy>:
 8009618:	b510      	push	{r4, lr}
 800961a:	1e43      	subs	r3, r0, #1
 800961c:	440a      	add	r2, r1
 800961e:	4291      	cmp	r1, r2
 8009620:	d100      	bne.n	8009624 <memcpy+0xc>
 8009622:	bd10      	pop	{r4, pc}
 8009624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800962c:	e7f7      	b.n	800961e <memcpy+0x6>

0800962e <memset>:
 800962e:	4402      	add	r2, r0
 8009630:	4603      	mov	r3, r0
 8009632:	4293      	cmp	r3, r2
 8009634:	d100      	bne.n	8009638 <memset+0xa>
 8009636:	4770      	bx	lr
 8009638:	f803 1b01 	strb.w	r1, [r3], #1
 800963c:	e7f9      	b.n	8009632 <memset+0x4>
	...

08009640 <_init>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr

0800964c <_fini>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	bf00      	nop
 8009650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009652:	bc08      	pop	{r3}
 8009654:	469e      	mov	lr, r3
 8009656:	4770      	bx	lr
